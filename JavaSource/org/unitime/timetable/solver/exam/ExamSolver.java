begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamAssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ui
operator|.
name|ExamRoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|BackupFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamCourseSection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamInstructor
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamPlacement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|exam
operator|.
name|model
operator|.
name|ExamRoom
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExamSolver
extends|extends
name|Solver
implements|implements
name|ExamSolverProxy
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExamSolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|iDebugLevel
init|=
name|Progress
operator|.
name|MSGLEVEL_INFO
decl_stmt|;
specifier|private
name|boolean
name|iWorking
init|=
literal|false
decl_stmt|;
specifier|private
name|Date
name|iLoadedDate
init|=
literal|null
decl_stmt|;
specifier|private
name|ExamSolverDisposeListener
name|iDisposeListener
init|=
literal|null
decl_stmt|;
specifier|public
name|ExamSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|ExamSolverDisposeListener
name|disposeListener
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iDisposeListener
operator|=
name|disposeListener
expr_stmt|;
block|}
specifier|public
name|Date
name|getLoadedDate
parameter_list|()
block|{
if|if
condition|(
name|iLoadedDate
operator|!=
literal|null
condition|)
return|return
name|iLoadedDate
return|;
name|Vector
name|log
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
operator|&&
operator|!
name|log
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
operator|(
name|Progress
operator|.
name|Message
operator|)
name|log
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getDate
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|()
block|{
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|iDebugLevel
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|(
name|int
name|level
parameter_list|,
name|boolean
name|includeDate
parameter_list|)
block|{
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|level
argument_list|,
name|includeDate
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|(
name|int
name|level
parameter_list|,
name|boolean
name|includeDate
parameter_list|,
name|String
name|fromStage
parameter_list|)
block|{
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|level
argument_list|,
name|includeDate
argument_list|,
name|fromStage
argument_list|)
return|;
block|}
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.Note"
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.Note"
argument_list|,
name|note
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDebugLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|iDebugLevel
operator|=
name|level
expr_stmt|;
block|}
specifier|public
name|int
name|getDebugLevel
parameter_list|()
block|{
return|return
name|iDebugLevel
return|;
block|}
specifier|public
name|boolean
name|isWorking
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|iWorking
return|;
block|}
specifier|public
name|void
name|restoreBest
parameter_list|()
block|{
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveBest
parameter_list|()
block|{
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
name|getProgress
parameter_list|()
block|{
try|try
block|{
name|Hashtable
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"STATUS"
argument_list|,
name|p
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"PHASE"
argument_list|,
name|p
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"PROGRESS"
argument_list|,
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getProgress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAX_PROGRESS"
argument_list|,
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getProgressMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"VERSION"
argument_list|,
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|disposeNoInherit
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|disposeNoInherit
parameter_list|()
block|{
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|!=
literal|null
operator|&&
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
operator|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDisposeListener
operator|!=
literal|null
condition|)
name|iDisposeListener
operator|.
name|onDispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
specifier|public
name|String
name|getHostLabel
parameter_list|()
block|{
return|return
name|getHost
argument_list|()
return|;
block|}
specifier|public
name|Object
name|exec
parameter_list|(
name|Object
index|[]
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
index|[]
name|types
init|=
operator|new
name|Class
index|[
operator|(
name|cmd
operator|.
name|length
operator|-
literal|2
operator|)
operator|/
literal|2
index|]
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
operator|(
name|cmd
operator|.
name|length
operator|-
literal|2
operator|)
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|(
name|Class
operator|)
name|cmd
index|[
literal|2
operator|*
name|i
operator|+
literal|2
index|]
expr_stmt|;
name|args
index|[
name|i
index|]
operator|=
name|cmd
index|[
literal|2
operator|*
name|i
operator|+
literal|3
index|]
expr_stmt|;
block|}
return|return
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
operator|(
name|String
operator|)
name|cmd
index|[
literal|0
index|]
argument_list|,
name|types
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Exam
name|getExam
parameter_list|(
name|long
name|examId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getId
argument_list|()
operator|==
name|examId
condition|)
return|return
name|exam
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|ExamInfo
name|getInfo
parameter_list|(
name|long
name|examId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
name|Exam
name|exam
init|=
name|getExam
argument_list|(
name|examId
argument_list|)
decl_stmt|;
return|return
operator|(
name|exam
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
name|ExamAssignment
name|getAssignment
parameter_list|(
name|long
name|examId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
name|Exam
name|exam
init|=
name|getExam
argument_list|(
name|examId
argument_list|)
decl_stmt|;
return|return
operator|(
name|exam
operator|==
literal|null
operator|||
name|exam
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ExamAssignment
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
name|ExamAssignmentInfo
name|getAssignmentInfo
parameter_list|(
name|long
name|examId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
name|Exam
name|exam
init|=
name|getExam
argument_list|(
name|examId
argument_list|)
decl_stmt|;
return|return
operator|(
name|exam
operator|==
literal|null
operator|||
name|exam
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getPeriods
parameter_list|(
name|long
name|examId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
name|Exam
name|exam
init|=
name|getExam
argument_list|(
name|examId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|periods
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getPeriods
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Set
name|rooms
init|=
name|exam
operator|.
name|findBestAvailableRooms
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|rooms
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|exam
operator|.
name|checkDistributionConstraints
argument_list|(
name|period
argument_list|)
condition|)
continue|continue;
name|periods
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|new
name|ExamPlacement
argument_list|(
name|exam
argument_list|,
name|period
argument_list|,
name|rooms
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|periods
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamRoomInfo
argument_list|>
name|getRooms
parameter_list|(
name|long
name|examId
parameter_list|,
name|long
name|periodId
parameter_list|)
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
name|Exam
name|exam
init|=
name|getExam
argument_list|(
name|examId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ExamPeriod
name|period
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getPeriods
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|periodId
operator|==
name|p
operator|.
name|getId
argument_list|()
condition|)
block|{
name|period
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
argument_list|<
name|ExamRoomInfo
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|<
name|ExamRoomInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getMaxRooms
argument_list|()
operator|==
literal|0
condition|)
return|return
name|rooms
return|;
for|for
control|(
name|Enumeration
name|e
init|=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamRoom
name|room
init|=
operator|(
name|ExamRoom
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|int
name|cap
init|=
operator|(
name|exam
operator|.
name|isSectionExam
argument_list|()
condition|?
name|room
operator|.
name|getAltSize
argument_list|()
else|:
name|room
operator|.
name|getSize
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|cap
operator|<
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
operator|/
name|exam
operator|.
name|getMaxRooms
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|cap
operator|>
literal|2
operator|*
name|exam
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|room
operator|.
name|isAvailable
argument_list|(
name|period
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|exam
operator|.
name|checkDistributionConstraints
argument_list|(
name|room
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|room
operator|.
name|getPlacement
argument_list|(
name|period
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getPlacement
argument_list|(
name|period
argument_list|)
operator|.
name|variable
argument_list|()
operator|.
name|equals
argument_list|(
name|exam
argument_list|)
condition|)
continue|continue;
name|rooms
operator|.
name|add
argument_list|(
operator|new
name|ExamRoomInfo
argument_list|(
name|room
argument_list|,
name|exam
operator|.
name|getWeight
argument_list|(
name|room
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
block|}
specifier|public
name|Hashtable
name|currentSolutionInfo
parameter_list|()
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
return|return
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getInfo
argument_list|()
return|;
block|}
block|}
specifier|public
name|Hashtable
name|bestSolutionInfo
parameter_list|()
block|{
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
return|return
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
return|;
block|}
block|}
specifier|protected
name|void
name|onFinish
parameter_list|()
block|{
name|super
operator|.
name|onFinish
argument_list|()
expr_stmt|;
try|try
block|{
name|iWorking
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Save"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ExamDatabaseSaver
name|saver
init|=
operator|new
name|ExamDatabaseSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|saver
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Unload"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iWorking
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onStop
parameter_list|()
block|{
name|super
operator|.
name|onStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|()
block|{
name|iWorking
operator|=
literal|true
expr_stmt|;
name|ExamDatabaseSaver
name|saver
init|=
operator|new
name|ExamDatabaseSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|saver
operator|.
name|setCallback
argument_list|(
name|getSavingDoneCallback
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|saver
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|ExamModel
name|model
init|=
operator|new
name|ExamModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|ExamDatabaseLoader
name|loader
init|=
operator|new
name|ExamDatabaseLoader
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
name|getLoadingDoneCallback
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|thread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reload
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|currentSolution
argument_list|()
operator|==
literal|null
operator|||
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return;
block|}
name|Callback
name|callBack
init|=
name|getReloadingDoneCallback
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|ExamModel
name|model
init|=
operator|new
name|ExamModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
name|Progress
operator|.
name|changeInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|ExamDatabaseLoader
name|loader
init|=
operator|new
name|ExamDatabaseLoader
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
name|callBack
argument_list|)
expr_stmt|;
operator|(
operator|new
name|Thread
argument_list|(
name|loader
argument_list|)
operator|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Callback
name|getLoadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|LoadingDoneCallback
argument_list|()
return|;
block|}
specifier|public
name|Callback
name|getReloadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|ReloadingDoneCallback
argument_list|()
return|;
block|}
specifier|public
name|Callback
name|getSavingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|SavingDoneCallback
argument_list|()
return|;
block|}
specifier|protected
name|void
name|afterSave
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|afterLoad
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|afterFinalSectioning
parameter_list|()
block|{
block|}
specifier|public
class|class
name|ReloadingDoneCallback
implements|implements
name|Callback
block|{
name|Hashtable
name|iCurrentAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|iBestAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Hashtable
name|iInitialAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|String
name|iSolutionId
init|=
literal|null
decl_stmt|;
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|public
name|ReloadingDoneCallback
parameter_list|()
block|{
name|iSolutionId
operator|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.SolutionId"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iCurrentAssignmentTable
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getId
argument_list|()
argument_list|,
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getBestAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iBestAssignmentTable
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getId
argument_list|()
argument_list|,
name|exam
operator|.
name|getBestAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iInitialAssignmentTable
operator|.
name|put
argument_list|(
name|exam
operator|.
name|getId
argument_list|()
argument_list|,
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Exam
name|getExam
parameter_list|(
name|long
name|examId
parameter_list|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getId
argument_list|()
operator|==
name|examId
condition|)
return|return
name|exam
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|ExamPlacement
name|getPlacement
parameter_list|(
name|Exam
name|exam
parameter_list|,
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|ExamPeriod
name|period
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|exam
operator|.
name|getPeriods
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|p
init|=
operator|(
name|ExamPeriod
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getPeriod
argument_list|()
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|period
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|period
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"WARNING: Period "
operator|+
name|placement
operator|.
name|getPeriod
argument_list|()
operator|+
literal|" is no longer valid for class "
operator|+
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Set
name|rooms
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|exam
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamRoom
name|r
init|=
operator|(
name|ExamRoom
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|!=
name|placement
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"WARNING: Room(s) "
operator|+
name|placement
operator|.
name|getRooms
argument_list|()
operator|+
literal|" are no longer valid for exam "
operator|+
name|exam
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
operator|new
name|ExamPlacement
argument_list|(
name|exam
argument_list|,
name|period
argument_list|,
name|rooms
argument_list|)
return|;
block|}
specifier|private
name|void
name|assign
parameter_list|(
name|ExamPlacement
name|placement
parameter_list|)
block|{
name|Hashtable
name|conflictConstraints
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|placement
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" := "
operator|+
name|placement
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;Reason:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
name|ex
init|=
name|conflictConstraints
operator|.
name|keys
argument_list|()
init|;
name|ex
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Constraint
name|c
init|=
operator|(
name|Constraint
operator|)
name|ex
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Collection
name|vals
init|=
operator|(
name|Collection
operator|)
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|vals
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Value
name|v
init|=
operator|(
name|Value
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|v
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;in constraint "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|unassignAll
parameter_list|()
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|exam
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iBestAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating best assignment ..."
argument_list|,
name|iBestAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iBestAssignmentTable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Exam
name|exam
init|=
name|getExam
argument_list|(
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
continue|continue;
name|ExamPlacement
name|placement
init|=
name|getPlacement
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iInitialAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating initial assignment ..."
argument_list|,
name|iInitialAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iInitialAssignmentTable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Exam
name|exam
init|=
name|getExam
argument_list|(
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
continue|continue;
name|ExamPlacement
name|placement
init|=
name|getPlacement
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|exam
operator|.
name|setInitialAssignment
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iCurrentAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating current assignment ..."
argument_list|,
name|iCurrentAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iCurrentAssignmentTable
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Exam
name|exam
init|=
name|getExam
argument_list|(
operator|(
name|Long
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|==
literal|null
condition|)
continue|continue;
name|ExamPlacement
name|placement
init|=
name|getPlacement
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
name|iCurrentAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iProgress
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSolutionId
operator|!=
literal|null
condition|)
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|iSolutionId
argument_list|)
expr_stmt|;
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|LoadingDoneCallback
implements|implements
name|Callback
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.StartSolver"
argument_list|,
literal|false
argument_list|)
condition|)
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SavingDoneCallback
implements|implements
name|Callback
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterSave
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|ExamSolverDisposeListener
block|{
specifier|public
name|void
name|onDispose
parameter_list|()
function_decl|;
block|}
specifier|public
name|boolean
name|backup
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
name|folder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|File
name|outXmlFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"exam"
operator|+
name|BackupFileFilter
operator|.
name|sXmlExtension
argument_list|)
decl_stmt|;
name|File
name|outPropertiesFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"exam"
operator|+
name|BackupFileFilter
operator|.
name|sPropertiesExtension
argument_list|)
decl_stmt|;
try|try
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveConflictTable"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outXmlFile
argument_list|)
expr_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|fos
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
operator|(
operator|(
name|ExamModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|save
argument_list|()
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|String
operator|)
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Configuration key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" is not of type String ("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
operator|)
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Value of configuration key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" is not of type String ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|" is of type "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outPropertiesFile
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|"Backup file"
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|outXmlFile
operator|.
name|exists
argument_list|()
condition|)
name|outXmlFile
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|outPropertiesFile
operator|.
name|exists
argument_list|()
condition|)
name|outPropertiesFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
return|return
name|restore
argument_list|(
name|folder
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|boolean
name|removeFiles
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"restore(folder="
operator|+
name|folder
operator|+
literal|",exam)"
argument_list|)
expr_stmt|;
name|File
name|inXmlFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"exam"
operator|+
name|BackupFileFilter
operator|.
name|sXmlExtension
argument_list|)
decl_stmt|;
name|File
name|inPropertiesFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"exam"
operator|+
name|BackupFileFilter
operator|.
name|sPropertiesExtension
argument_list|)
decl_stmt|;
name|ExamModel
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
name|stopSolver
argument_list|()
expr_stmt|;
name|this
operator|.
name|disposeNoInherit
argument_list|()
expr_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|inPropertiesFile
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|model
operator|=
operator|new
name|ExamModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|model
operator|.
name|load
argument_list|(
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|inXmlFile
argument_list|)
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeFiles
condition|)
block|{
name|inXmlFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|inPropertiesFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|exam
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|currentSolution
argument_list|()
operator|.
name|clearBest
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getAssignedExams
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamInfo
argument_list|>
name|getUnassignedExams
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|exam
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getAssignedExams
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|)
block|{
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|<
literal|0
condition|)
return|return
name|getAssignedExams
argument_list|()
return|;
name|String
name|sa
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|subjectAreaId
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
decl_stmt|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|boolean
name|hasSubjectArea
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|exam
operator|.
name|getCourseSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
operator|!
name|hasSubjectArea
operator|&&
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamCourseSection
name|ecs
init|=
operator|(
name|ExamCourseSection
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|hasSubjectArea
operator|=
name|ecs
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sa
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasSubjectArea
operator|&&
name|exam
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamInfo
argument_list|>
name|getUnassignedExams
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|)
block|{
if|if
condition|(
name|subjectAreaId
operator|==
literal|null
operator|||
name|subjectAreaId
operator|<
literal|0
condition|)
return|return
name|getUnassignedExams
argument_list|()
return|;
name|String
name|sa
init|=
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|subjectAreaId
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
decl_stmt|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|boolean
name|hasSubjectArea
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|exam
operator|.
name|getCourseSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
operator|!
name|hasSubjectArea
operator|&&
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamCourseSection
name|ecs
init|=
operator|(
name|ExamCourseSection
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|hasSubjectArea
operator|=
name|ecs
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sa
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasSubjectArea
operator|&&
name|exam
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamInfo
argument_list|(
name|exam
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getAssignedExamsOfRoom
parameter_list|(
name|Long
name|roomId
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|ExamRoom
name|room
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
operator|(
name|ExamModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamRoom
name|r
init|=
operator|(
name|ExamRoom
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|==
name|roomId
condition|)
block|{
name|room
operator|=
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|room
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
operator|(
name|ExamModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getPeriods
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|ExamPlacement
name|placement
init|=
name|room
operator|.
name|getPlacement
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|getAssignedExamsOfInstructor
parameter_list|(
name|Long
name|instructorId
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|ExamInstructor
name|instructor
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
operator|(
name|ExamModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getRooms
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamInstructor
name|i
init|=
operator|(
name|ExamInstructor
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|getId
argument_list|()
operator|==
name|instructorId
condition|)
block|{
name|instructor
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
name|ret
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
operator|(
operator|(
name|ExamModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getPeriods
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamPeriod
name|period
init|=
operator|(
name|ExamPeriod
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Set
name|exams
init|=
name|instructor
operator|.
name|getExams
argument_list|(
name|period
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|exams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
argument_list|(
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|int
name|getExamType
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"Exam.Type"
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
index|[]
argument_list|>
name|getChangesToInitial
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|)
block|{
name|String
name|sa
init|=
operator|(
name|subjectAreaId
operator|!=
literal|null
operator|&&
name|subjectAreaId
operator|>=
literal|0
condition|?
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|subjectAreaId
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
else|:
literal|null
operator|)
decl_stmt|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
index|[]
argument_list|>
name|changes
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
index|[]
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|sa
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasSubjectArea
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|exam
operator|.
name|getCourseSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
operator|!
name|hasSubjectArea
operator|&&
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamCourseSection
name|ecs
init|=
operator|(
name|ExamCourseSection
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|hasSubjectArea
operator|=
name|ecs
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sa
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasSubjectArea
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|,
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
condition|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
index|[]
block|{
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
block|,
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|changes
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ExamAssignmentInfo
index|[]
argument_list|>
name|getChangesToBest
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|)
block|{
name|String
name|sa
init|=
operator|(
name|subjectAreaId
operator|!=
literal|null
operator|&&
name|subjectAreaId
operator|>=
literal|0
condition|?
operator|new
name|SubjectAreaDAO
argument_list|()
operator|.
name|get
argument_list|(
name|subjectAreaId
argument_list|)
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
else|:
literal|null
operator|)
decl_stmt|;
name|Vector
argument_list|<
name|ExamAssignmentInfo
index|[]
argument_list|>
name|changes
init|=
operator|new
name|Vector
argument_list|<
name|ExamAssignmentInfo
index|[]
argument_list|>
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|sa
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasSubjectArea
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
name|f
init|=
name|exam
operator|.
name|getCourseSections
argument_list|()
operator|.
name|elements
argument_list|()
init|;
operator|!
name|hasSubjectArea
operator|&&
name|f
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|ExamCourseSection
name|ecs
init|=
operator|(
name|ExamCourseSection
operator|)
name|f
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|hasSubjectArea
operator|=
name|ecs
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sa
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasSubjectArea
condition|)
continue|continue;
block|}
if|if
condition|(
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|exam
operator|.
name|getBestAssignment
argument_list|()
argument_list|,
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
condition|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ExamAssignmentInfo
index|[]
block|{
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
block|,
operator|new
name|ExamAssignmentInfo
argument_list|(
name|exam
argument_list|,
operator|(
name|ExamPlacement
operator|)
name|exam
operator|.
name|getAssignment
argument_list|()
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|changes
return|;
block|}
block|}
end_class

end_unit

