begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|PatternSyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|InstructorSchedulingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|ComputeSuggestionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSchedulingSuggestions
block|{
specifier|private
name|InstructorSchedulingSolver
name|iSolver
decl_stmt|;
specifier|private
name|InstructorSchedulingModel
name|iModel
decl_stmt|;
specifier|private
name|Assignment
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|iAssignment
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|>
name|iInitialUnassignments
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|iInitialAssignments
init|=
operator|new
name|HashMap
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|double
name|iValue
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|iValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iDepth
init|=
literal|2
decl_stmt|;
specifier|private
name|int
name|iLimit
init|=
literal|20
decl_stmt|;
specifier|private
name|int
name|iNrSolutions
init|=
literal|0
decl_stmt|,
name|iNrCombinationsConsidered
init|=
literal|0
decl_stmt|,
name|iNrDomainValues
init|=
literal|0
decl_stmt|;
empty_stmt|;
specifier|private
name|long
name|iTimeOut
init|=
literal|5000
decl_stmt|;
specifier|private
name|long
name|iStartTime
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iTimeoutReached
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|private
name|TeachingRequest
operator|.
name|Variable
name|iRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|SuggestionInfo
argument_list|>
name|iSuggestions
init|=
literal|null
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|SuggestionInfo
argument_list|>
name|iDomain
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|>
name|iResolvedRequests
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|iConflictsToResolve
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingRequestInfo
argument_list|>
name|iRequestInfos
init|=
literal|null
decl_stmt|;
specifier|private
name|Instructor
name|iInstructor
init|=
literal|null
decl_stmt|;
specifier|public
name|InstructorSchedulingSuggestions
parameter_list|(
name|InstructorSchedulingSolver
name|solver
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
name|iModel
operator|=
operator|(
name|InstructorSchedulingModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
expr_stmt|;
name|iAssignment
operator|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
expr_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|variable
range|:
name|iModel
operator|.
name|variables
argument_list|()
control|)
block|{
name|TeachingAssignment
name|value
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|variable
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|iInitialUnassignments
operator|.
name|add
argument_list|(
name|variable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iInitialAssignments
operator|.
name|put
argument_list|(
name|variable
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|iValue
operator|=
name|iModel
operator|.
name|getTotalValue
argument_list|(
name|iAssignment
argument_list|)
expr_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|iModel
operator|.
name|getCriteria
argument_list|()
control|)
name|iValues
operator|.
name|put
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|c
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|iDepth
return|;
block|}
specifier|public
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|iDepth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|long
name|getTimeOut
parameter_list|()
block|{
return|return
name|iTimeOut
return|;
block|}
specifier|public
name|void
name|setTimeOut
parameter_list|(
name|long
name|timeOut
parameter_list|)
block|{
name|iTimeOut
operator|=
name|timeOut
expr_stmt|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|iFilter
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|int
name|getNrSolutions
parameter_list|()
block|{
return|return
name|iNrSolutions
return|;
block|}
specifier|public
name|int
name|getNrCombinationsConsidered
parameter_list|()
block|{
return|return
name|iNrCombinationsConsidered
return|;
block|}
specifier|public
name|boolean
name|wasTimeoutReached
parameter_list|()
block|{
return|return
name|iTimeoutReached
return|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iFilter
operator|==
literal|null
operator|||
name|iFilter
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
name|String
name|n
init|=
name|name
operator|.
name|toUpperCase
argument_list|()
decl_stmt|;
name|StringTokenizer
name|stk1
init|=
operator|new
name|StringTokenizer
argument_list|(
name|iFilter
operator|.
name|toUpperCase
argument_list|()
argument_list|,
literal|";"
argument_list|)
decl_stmt|;
while|while
condition|(
name|stk1
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|StringTokenizer
name|stk2
init|=
operator|new
name|StringTokenizer
argument_list|(
name|stk1
operator|.
name|nextToken
argument_list|()
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|match
operator|&&
name|stk2
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
name|String
name|token
init|=
name|stk2
operator|.
name|nextToken
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|token
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|>=
literal|0
operator|||
name|token
operator|.
name|indexOf
argument_list|(
literal|'?'
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|String
name|tokenRegExp
init|=
literal|"\\s+"
operator|+
name|token
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|"\\."
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\?"
argument_list|,
literal|".+"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\*"
argument_list|,
literal|".*"
argument_list|)
operator|+
literal|"\\s"
decl_stmt|;
if|if
condition|(
operator|!
name|Pattern
operator|.
name|compile
argument_list|(
name|tokenRegExp
argument_list|)
operator|.
name|matcher
argument_list|(
literal|" "
operator|+
name|n
operator|+
literal|" "
argument_list|)
operator|.
name|find
argument_list|()
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PatternSyntaxException
name|e
parameter_list|)
block|{
name|match
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|n
operator|.
name|indexOf
argument_list|(
name|token
argument_list|)
operator|<
literal|0
condition|)
name|match
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|match
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|synchronized
name|SuggestionsResponse
name|computeSuggestions
parameter_list|(
name|ComputeSuggestionsRequest
name|request
parameter_list|)
block|{
name|SuggestionsResponse
name|response
init|=
operator|new
name|SuggestionsResponse
argument_list|()
decl_stmt|;
name|iSuggestions
operator|=
operator|new
name|TreeSet
argument_list|<
name|SuggestionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iDomain
operator|=
operator|new
name|TreeSet
argument_list|<
name|SuggestionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iResolvedRequests
operator|=
operator|new
name|ArrayList
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|>
argument_list|()
expr_stmt|;
name|iConflictsToResolve
operator|=
operator|new
name|HashMap
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|iRequestInfos
operator|=
operator|new
name|HashMap
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingRequestInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iNrSolutions
operator|=
operator|-
literal|1
expr_stmt|;
name|iNrCombinationsConsidered
operator|=
literal|0
expr_stmt|;
name|iNrDomainValues
operator|=
literal|0
expr_stmt|;
name|iTimeoutReached
operator|=
literal|false
expr_stmt|;
name|iRequest
operator|=
literal|null
expr_stmt|;
name|iDepth
operator|=
name|request
operator|.
name|getMaxDept
argument_list|()
expr_stmt|;
name|iTimeOut
operator|=
name|request
operator|.
name|getTimeout
argument_list|()
expr_stmt|;
name|iLimit
operator|=
name|request
operator|.
name|getMaxResults
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getSelectedInstructorId
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Instructor
name|instructor
range|:
name|iModel
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
operator|==
name|request
operator|.
name|getSelectedInstructorId
argument_list|()
condition|)
block|{
name|iInstructor
operator|=
name|instructor
expr_stmt|;
break|break;
block|}
name|TeachingAssignment
name|requestedAssignment
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|TeachingAssignment
argument_list|>
name|givenAssignments
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingAssignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getSelectedRequestId
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|iModel
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tr
operator|.
name|getRequestId
argument_list|()
operator|==
name|request
operator|.
name|getSelectedRequestId
argument_list|()
condition|)
block|{
name|iRequest
operator|=
name|tr
operator|.
name|getVariable
argument_list|(
name|request
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|request
operator|.
name|getAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|iModel
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|tr
operator|.
name|getRequestId
argument_list|()
operator|==
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestId
argument_list|()
condition|)
block|{
name|TeachingRequest
operator|.
name|Variable
name|var
init|=
name|tr
operator|.
name|getVariable
argument_list|(
name|assignment
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|TeachingAssignment
name|original
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TeachingAssignment
name|val
range|:
name|var
operator|.
name|values
argument_list|(
name|iAssignment
argument_list|)
control|)
block|{
if|if
condition|(
name|val
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
operator|==
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
condition|)
name|requestedAssignment
operator|=
name|val
expr_stmt|;
if|else if
condition|(
name|original
operator|==
literal|null
operator|||
operator|!
name|original
operator|.
name|equals
argument_list|(
name|val
argument_list|)
condition|)
name|givenAssignments
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
comment|// requestedAssignment != null
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|iRequest
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|givenAssignments
control|)
block|{
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|assignment
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|givenAssignments
control|)
block|{
for|for
control|(
name|TeachingAssignment
name|conflict
range|:
name|iModel
operator|.
name|conflictValues
argument_list|(
name|iAssignment
argument_list|,
name|assignment
argument_list|)
control|)
block|{
name|iConflictsToResolve
operator|.
name|put
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iResolvedRequests
operator|.
name|add
argument_list|(
name|assignment
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iInstructor
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|iModel
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|iInstructor
operator|.
name|canTeach
argument_list|(
name|tr
argument_list|)
condition|)
block|{
name|PreferenceCombination
name|attributePref
init|=
name|tr
operator|.
name|getAttributePreference
argument_list|(
name|iInstructor
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributePref
operator|.
name|isProhibited
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|tr
operator|.
name|getVariables
argument_list|()
control|)
block|{
if|if
condition|(
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|var
argument_list|)
condition|)
continue|continue;
name|SuggestionInfo
name|suggestion
init|=
name|tryAssignment
argument_list|(
operator|new
name|TeachingAssignment
argument_list|(
name|var
argument_list|,
name|iInstructor
argument_list|,
name|attributePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestion
operator|!=
literal|null
operator|&&
operator|!
name|suggestion
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iDomain
operator|.
name|size
argument_list|()
operator|==
name|iLimit
condition|)
block|{
if|if
condition|(
name|suggestion
operator|.
name|compareTo
argument_list|(
name|iDomain
operator|.
name|last
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|iDomain
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
name|iDomain
operator|.
name|remove
argument_list|(
name|iDomain
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iDomain
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|iInstructor
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|iRequest
operator|.
name|values
argument_list|(
name|iAssignment
argument_list|)
control|)
block|{
name|SuggestionInfo
name|suggestion
init|=
name|tryAssignment
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestion
operator|!=
literal|null
operator|&&
operator|!
name|suggestion
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iDomain
operator|.
name|size
argument_list|()
operator|==
name|iLimit
condition|)
block|{
if|if
condition|(
name|suggestion
operator|.
name|compareTo
argument_list|(
name|iDomain
operator|.
name|last
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|iDomain
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
name|iDomain
operator|.
name|remove
argument_list|(
name|iDomain
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iDomain
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|requestedAssignment
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TeachingAssignment
name|conflict
range|:
name|iModel
operator|.
name|conflictValues
argument_list|(
name|iAssignment
argument_list|,
name|requestedAssignment
argument_list|)
control|)
block|{
name|iConflictsToResolve
operator|.
name|put
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iConflictsToResolve
operator|.
name|isEmpty
argument_list|()
condition|)
name|iResolvedRequests
operator|.
name|add
argument_list|(
name|requestedAssignment
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|requestedAssignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRequest
operator|==
literal|null
operator|&&
operator|!
name|iResolvedRequests
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iConflictsToResolve
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|givenAssignments
control|)
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|iInstructor
argument_list|)
condition|)
block|{
name|iRequest
operator|=
name|assignment
operator|.
name|variable
argument_list|()
expr_stmt|;
name|iResolvedRequests
operator|.
name|remove
argument_list|(
name|iRequest
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iRequest
operator|==
literal|null
operator|&&
operator|!
name|iResolvedRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iRequest
operator|=
name|iResolvedRequests
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iResolvedRequests
operator|.
name|remove
argument_list|(
name|iRequest
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setCurrentAssignment
argument_list|(
name|createSuggestion
argument_list|(
name|iModel
operator|.
name|getTotalValue
argument_list|(
name|iAssignment
argument_list|)
operator|-
name|iValue
argument_list|)
argument_list|)
expr_stmt|;
name|iStartTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|iInstructor
operator|!=
literal|null
operator|&&
name|iResolvedRequests
operator|.
name|isEmpty
argument_list|()
condition|)
name|instructorBacktrack
argument_list|()
expr_stmt|;
else|else
name|backtrack
argument_list|(
name|iDepth
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|x
range|:
name|iInitialUnassignments
control|)
if|if
condition|(
name|iAssignment
operator|.
name|getValue
argument_list|(
name|x
argument_list|)
operator|!=
literal|null
condition|)
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TeachingAssignment
argument_list|>
name|changes
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|x
range|:
name|iInitialAssignments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TeachingRequest
operator|.
name|Variable
name|var
init|=
name|x
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|TeachingAssignment
name|current
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
name|TeachingAssignment
name|initial
init|=
name|x
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|initial
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|var
argument_list|)
expr_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|initial
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TeachingAssignment
name|initial
range|:
name|changes
control|)
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|initial
argument_list|)
expr_stmt|;
for|for
control|(
name|SuggestionInfo
name|suggestion
range|:
name|iSuggestions
control|)
name|response
operator|.
name|addSuggestion
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
for|for
control|(
name|SuggestionInfo
name|domain
range|:
name|iDomain
control|)
name|response
operator|.
name|addDomainValue
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|response
operator|.
name|setTimeoutReached
argument_list|(
name|wasTimeoutReached
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNrCombinationsConsidered
argument_list|(
name|getNrCombinationsConsidered
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNrSolutions
argument_list|(
name|getNrSolutions
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingRequestInfo
argument_list|>
name|e
range|:
name|iRequestInfos
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|TeachingRequestInfo
name|info
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getVariables
argument_list|()
control|)
block|{
name|TeachingAssignment
name|initial
init|=
name|iInitialAssignments
operator|.
name|get
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|initial
operator|!=
literal|null
condition|)
name|info
operator|.
name|addInstructor
argument_list|(
name|toInstructorInfo
argument_list|(
name|initial
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|response
return|;
block|}
specifier|protected
name|InstructorInfo
name|toInstructorInfo
parameter_list|(
name|TeachingAssignment
name|assignment
parameter_list|)
block|{
return|return
name|iSolver
operator|.
name|toInstructorInfo
argument_list|(
name|assignment
argument_list|)
return|;
block|}
specifier|protected
name|TeachingRequestInfo
name|toRequestInfo
parameter_list|(
name|TeachingRequest
name|request
parameter_list|)
block|{
name|TeachingRequestInfo
name|info
init|=
name|iRequestInfos
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
name|iSolver
operator|.
name|toRequestInfo
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|iRequestInfos
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|protected
name|AssignmentInfo
name|toAssignmentInfo
parameter_list|(
name|TeachingRequest
operator|.
name|Variable
name|request
parameter_list|)
block|{
name|AssignmentInfo
name|info
init|=
operator|new
name|AssignmentInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setRequest
argument_list|(
name|toRequestInfo
argument_list|(
name|request
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setIndex
argument_list|(
name|request
operator|.
name|getInstructorIndex
argument_list|()
argument_list|)
expr_stmt|;
name|TeachingAssignment
name|current
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
name|info
operator|.
name|setInstructor
argument_list|(
name|toInstructorInfo
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|TeachingAssignment
name|initial
init|=
name|iInitialAssignments
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|initial
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Constraint
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|iModel
operator|.
name|constraints
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|inConflict
argument_list|(
name|iAssignment
argument_list|,
name|initial
argument_list|)
condition|)
name|info
operator|.
name|addConflict
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|iModel
operator|.
name|globalConstraints
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|inConflict
argument_list|(
name|iAssignment
argument_list|,
name|initial
argument_list|)
condition|)
name|info
operator|.
name|addConflict
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
specifier|protected
name|SuggestionInfo
name|tryAssignment
parameter_list|(
name|TeachingAssignment
name|assignment
parameter_list|)
block|{
name|TeachingAssignment
name|original
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|assignment
operator|.
name|variable
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
name|conflicts
init|=
name|iModel
operator|.
name|conflictValues
argument_list|(
name|iAssignment
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|.
name|contains
argument_list|(
name|assignment
argument_list|)
condition|)
return|return
literal|null
return|;
for|for
control|(
name|TeachingAssignment
name|conflict
range|:
name|conflicts
control|)
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0l
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|SuggestionInfo
name|suggestion
init|=
operator|new
name|SuggestionInfo
argument_list|()
decl_stmt|;
name|suggestion
operator|.
name|setValue
argument_list|(
name|iModel
operator|.
name|getTotalValue
argument_list|(
name|iAssignment
argument_list|)
operator|-
name|iValue
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setId
argument_list|(
operator|new
name|Long
argument_list|(
name|iNrDomainValues
operator|++
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|iModel
operator|.
name|getCriteria
argument_list|()
control|)
block|{
name|double
name|v
init|=
name|c
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
decl_stmt|;
name|Double
name|base
init|=
name|iValues
operator|.
name|get
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|suggestion
operator|.
name|addValue
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|base
operator|==
literal|null
condition|?
name|v
else|:
name|v
operator|-
name|base
argument_list|)
expr_stmt|;
block|}
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|assignment
operator|.
name|variable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|iResolvedRequests
control|)
block|{
if|if
condition|(
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|||
name|var
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingAssignment
name|conflict
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|||
name|iConflictsToResolve
operator|.
name|containsKey
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
operator|||
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|assignment
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingAssignment
name|conflict
range|:
name|conflicts
control|)
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0l
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|!=
literal|null
condition|)
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0l
argument_list|,
name|original
argument_list|)
expr_stmt|;
return|return
name|suggestion
return|;
block|}
specifier|protected
name|SuggestionInfo
name|createSuggestion
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|SuggestionInfo
name|suggestion
init|=
operator|new
name|SuggestionInfo
argument_list|()
decl_stmt|;
name|suggestion
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|suggestion
operator|.
name|setId
argument_list|(
operator|new
name|Long
argument_list|(
name|iNrSolutions
operator|++
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|iModel
operator|.
name|getCriteria
argument_list|()
control|)
block|{
name|double
name|v
init|=
name|c
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
decl_stmt|;
name|Double
name|base
init|=
name|iValues
operator|.
name|get
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|suggestion
operator|.
name|addValue
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|base
operator|==
literal|null
condition|?
name|v
else|:
name|v
operator|-
name|base
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
block|{
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|iRequest
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|iResolvedRequests
control|)
block|{
if|if
condition|(
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
condition|)
continue|continue;
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|iConflictsToResolve
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
condition|)
continue|continue;
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|iModel
operator|.
name|assignedVariables
argument_list|(
name|iAssignment
argument_list|)
control|)
block|{
if|if
condition|(
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|var
argument_list|)
operator|||
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|||
name|iAssignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
operator|.
name|equals
argument_list|(
name|iInitialAssignments
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
operator|||
name|iConflictsToResolve
operator|.
name|containsKey
argument_list|(
name|var
argument_list|)
condition|)
continue|continue;
name|suggestion
operator|.
name|addAssignment
argument_list|(
name|toAssignmentInfo
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|suggestion
return|;
block|}
specifier|private
name|void
name|instructorBacktrack
parameter_list|()
block|{
for|for
control|(
name|TeachingRequest
name|tr
range|:
name|iModel
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|iInstructor
operator|.
name|canTeach
argument_list|(
name|tr
argument_list|)
condition|)
block|{
name|PreferenceCombination
name|attributePref
init|=
name|tr
operator|.
name|getAttributePreference
argument_list|(
name|iInstructor
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributePref
operator|.
name|isProhibited
argument_list|()
condition|)
continue|continue;
name|variables
label|:
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|tr
operator|.
name|getVariables
argument_list|()
control|)
block|{
if|if
condition|(
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|var
argument_list|)
condition|)
continue|continue;
name|TeachingAssignment
name|assignment
init|=
operator|new
name|TeachingAssignment
argument_list|(
name|var
argument_list|,
name|iInstructor
argument_list|,
name|attributePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|equals
argument_list|(
name|iAssignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
name|conflicts
init|=
name|iModel
operator|.
name|conflictValues
argument_list|(
name|iAssignment
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|iNrCombinationsConsidered
operator|++
expr_stmt|;
if|if
condition|(
name|iConflictsToResolve
operator|.
name|size
argument_list|()
operator|+
name|conflicts
operator|.
name|size
argument_list|()
operator|>
name|iDepth
condition|)
continue|continue;
for|for
control|(
name|TeachingAssignment
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|)
operator|&&
name|var
operator|.
name|equals
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
block|{
continue|continue
name|variables
continue|;
block|}
block|}
name|TeachingAssignment
name|cur
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
for|for
control|(
name|TeachingAssignment
name|c
range|:
name|conflicts
control|)
block|{
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|iConflictsToResolve
operator|.
name|put
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|TeachingAssignment
name|resolvedConf
init|=
name|iConflictsToResolve
operator|.
name|remove
argument_list|(
name|var
argument_list|)
decl_stmt|;
name|iResolvedRequests
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|backtrack
argument_list|(
name|iDepth
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iResolvedRequests
operator|.
name|remove
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|var
argument_list|)
expr_stmt|;
else|else
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|cur
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingAssignment
name|c
range|:
name|conflicts
control|)
block|{
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|iConflictsToResolve
operator|.
name|remove
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolvedConf
operator|!=
literal|null
condition|)
name|iConflictsToResolve
operator|.
name|put
argument_list|(
name|var
argument_list|,
name|resolvedConf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|backtrack
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
if|if
condition|(
name|iDepth
operator|>
name|depth
operator|&&
name|iConflictsToResolve
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|double
name|value
init|=
operator|(
name|iModel
operator|.
name|getTotalValue
argument_list|(
name|iAssignment
argument_list|)
operator|-
name|iValue
operator|)
decl_stmt|;
if|if
condition|(
name|iSuggestions
operator|.
name|size
argument_list|()
operator|==
name|iLimit
operator|&&
operator|(
name|iSuggestions
operator|.
name|last
argument_list|()
operator|.
name|getValue
argument_list|()
operator|<
name|value
operator|||
operator|(
name|iSuggestions
operator|.
name|last
argument_list|()
operator|.
name|getValue
argument_list|()
operator|==
name|value
operator|&&
name|iSuggestions
operator|.
name|last
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
name|iResolvedRequests
operator|.
name|size
argument_list|()
operator|)
operator|)
condition|)
return|return;
name|iSuggestions
operator|.
name|add
argument_list|(
name|createSuggestion
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggestions
operator|.
name|size
argument_list|()
operator|>
name|iLimit
condition|)
name|iSuggestions
operator|.
name|remove
argument_list|(
name|iSuggestions
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|depth
operator|<=
literal|0
condition|)
return|return;
if|if
condition|(
name|iTimeOut
operator|>
literal|0
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|iStartTime
operator|>
name|iTimeOut
condition|)
block|{
name|iTimeoutReached
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|TeachingRequest
operator|.
name|Variable
name|var
init|=
operator|(
name|iDepth
operator|==
name|depth
operator|&&
name|iRequest
operator|!=
literal|null
operator|&&
operator|!
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|iRequest
argument_list|)
condition|?
name|iRequest
else|:
name|iConflictsToResolve
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|var
argument_list|)
condition|)
return|return;
name|iResolvedRequests
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|values
label|:
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|var
operator|.
name|values
argument_list|(
name|iAssignment
argument_list|)
control|)
block|{
if|if
condition|(
name|assignment
operator|.
name|equals
argument_list|(
name|iInitialAssignments
operator|.
name|get
argument_list|(
name|var
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|var
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|&&
operator|!
name|match
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|" "
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
name|conflicts
init|=
name|iModel
operator|.
name|conflictValues
argument_list|(
name|iAssignment
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
name|iNrCombinationsConsidered
operator|++
expr_stmt|;
if|if
condition|(
name|iConflictsToResolve
operator|.
name|size
argument_list|()
operator|+
name|conflicts
operator|.
name|size
argument_list|()
operator|>
name|depth
condition|)
continue|continue;
for|for
control|(
name|TeachingAssignment
name|c
range|:
name|conflicts
control|)
block|{
if|if
condition|(
name|iResolvedRequests
operator|.
name|contains
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|)
condition|)
continue|continue
name|values
continue|;
block|}
name|TeachingAssignment
name|cur
init|=
name|iAssignment
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
for|for
control|(
name|TeachingAssignment
name|c
range|:
name|conflicts
control|)
block|{
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|c
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|iConflictsToResolve
operator|.
name|put
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|TeachingAssignment
name|resolvedConf
init|=
name|iConflictsToResolve
operator|.
name|remove
argument_list|(
name|var
argument_list|)
decl_stmt|;
name|backtrack
argument_list|(
name|depth
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|cur
operator|==
literal|null
condition|)
name|iAssignment
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|var
argument_list|)
expr_stmt|;
else|else
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|cur
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingAssignment
name|c
range|:
name|conflicts
control|)
block|{
name|iAssignment
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|iConflictsToResolve
operator|.
name|remove
argument_list|(
name|c
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|resolvedConf
operator|!=
literal|null
condition|)
name|iConflictsToResolve
operator|.
name|put
argument_list|(
name|var
argument_list|,
name|resolvedConf
argument_list|)
expr_stmt|;
block|}
name|iResolvedRequests
operator|.
name|remove
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

