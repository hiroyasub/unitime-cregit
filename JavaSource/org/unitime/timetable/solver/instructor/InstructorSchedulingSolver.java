begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|EnrolledClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|InstructorSchedulingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|AbstractSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverDisposeListener
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSchedulingSolver
extends|extends
name|AbstractSolver
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|,
name|InstructorSchedulingModel
argument_list|>
implements|implements
name|InstructorSchedulingProxy
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|InstructorSchedulingSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|SolverDisposeListener
name|disposeListener
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|,
name|disposeListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SolverType
name|getType
parameter_list|()
block|{
return|return
name|SolverType
operator|.
name|INSTRUCTOR
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemSaver
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|,
name|InstructorSchedulingModel
argument_list|>
name|getDatabaseSaver
parameter_list|(
name|Solver
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|solver
parameter_list|)
block|{
return|return
operator|new
name|InstructorSchedulingDatabaseSaver
argument_list|(
name|solver
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemLoader
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|,
name|InstructorSchedulingModel
argument_list|>
name|getDatabaseLoader
parameter_list|(
name|InstructorSchedulingModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
return|return
operator|new
name|InstructorSchedulingDatabaseLoader
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InstructorSchedulingModel
name|createModel
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
return|return
operator|new
name|InstructorSchedulingModel
argument_list|(
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Document
name|createCurrentSolutionBackup
parameter_list|(
name|boolean
name|anonymize
parameter_list|,
name|boolean
name|idconv
parameter_list|)
block|{
if|if
condition|(
name|anonymize
condition|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.Anonymize"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ConvertIds"
argument_list|,
name|idconv
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveInitial"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveBest"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveSolution"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.Anonymize"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ConvertIds"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveInitial"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveBest"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveSolution"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|InstructorSchedulingModel
name|model
init|=
operator|(
name|InstructorSchedulingModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|model
operator|.
name|save
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
operator|!
name|anonymize
condition|)
block|{
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
name|p
operator|.
name|save
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|document
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|restureCurrentSolutionFromBackup
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|InstructorSchedulingModel
name|model
init|=
operator|(
name|InstructorSchedulingModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|model
operator|.
name|load
argument_list|(
name|document
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|load
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|.
name|message
argument_list|(
name|Progress
operator|.
name|MSGLEVEL_STAGE
argument_list|,
literal|"Restoring from backup ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|TeachingRequestInfo
name|toRequestInfo
parameter_list|(
name|TeachingRequest
name|request
parameter_list|)
block|{
name|TeachingRequestInfo
name|info
init|=
operator|new
name|TeachingRequestInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setRequestId
argument_list|(
name|request
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLoad
argument_list|(
name|request
operator|.
name|getLoad
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNrInstructors
argument_list|(
name|request
operator|.
name|getNrInstructors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|Attribute
argument_list|>
name|p
range|:
name|request
operator|.
name|getAttributePreferences
argument_list|()
control|)
name|info
operator|.
name|addAttributePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getAttributeId
argument_list|()
argument_list|,
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getAttributeName
argument_list|()
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|Instructor
argument_list|>
name|p
range|:
name|request
operator|.
name|getInstructorPreferences
argument_list|()
control|)
name|info
operator|.
name|addInstructorPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|CourseInfo
name|course
init|=
operator|new
name|CourseInfo
argument_list|()
decl_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseName
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|boolean
name|useAmPm
init|=
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|SectionInfo
name|si
init|=
operator|new
name|SectionInfo
argument_list|()
decl_stmt|;
name|si
operator|.
name|setSectionId
argument_list|(
name|section
operator|.
name|getSectionId
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setExternalId
argument_list|(
name|section
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setSectionName
argument_list|(
name|section
operator|.
name|getSectionName
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setSectionType
argument_list|(
name|section
operator|.
name|getSectionType
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setCommon
argument_list|(
name|section
operator|.
name|isCommon
argument_list|()
argument_list|)
expr_stmt|;
name|si
operator|.
name|setTime
argument_list|(
name|section
operator|.
name|hasTime
argument_list|()
condition|?
name|section
operator|.
name|getTimeName
argument_list|(
name|useAmPm
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
name|si
operator|.
name|setDate
argument_list|(
name|section
operator|.
name|hasTime
argument_list|()
condition|?
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|si
operator|.
name|setRoom
argument_list|(
name|section
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addSection
argument_list|(
name|si
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|protected
name|InstructorInfo
name|toInstructorInfo
parameter_list|(
name|Instructor
name|instructor
parameter_list|)
block|{
name|boolean
name|useAmPm
init|=
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|InstructorInfo
name|info
init|=
operator|new
name|InstructorInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setInstructorId
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setInstructorName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMaxLoad
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|Course
argument_list|>
name|p
range|:
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
control|)
name|info
operator|.
name|addCoursePreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
index|[]
index|[]
name|slot2pref
init|=
operator|new
name|int
index|[
name|Constants
operator|.
name|NR_DAYS
operator|*
name|Constants
operator|.
name|SLOTS_PER_DAY
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|slot2pref
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
for|for
control|(
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
name|p
range|:
name|instructor
operator|.
name|getTimePreferences
argument_list|()
control|)
block|{
name|PreferenceInfo
name|pi
init|=
operator|new
name|PreferenceInfo
argument_list|(
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getLongName
argument_list|(
name|useAmPm
argument_list|)
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setComparable
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%03d:%05d"
argument_list|,
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|addTimePreference
argument_list|(
name|pi
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getTarget
argument_list|()
operator|instanceof
name|EnrolledClass
condition|)
block|{
name|EnrolledClass
name|ec
init|=
operator|(
name|EnrolledClass
operator|)
name|p
operator|.
name|getTarget
argument_list|()
decl_stmt|;
name|ClassInfo
name|ci
init|=
operator|new
name|ClassInfo
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setCourseId
argument_list|(
name|ec
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setCourse
argument_list|(
name|ec
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setClassId
argument_list|(
name|ec
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setSection
argument_list|(
name|ec
operator|.
name|getSection
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setExternalId
argument_list|(
name|ec
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setType
argument_list|(
name|ec
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|ec
operator|.
name|isInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setRoom
argument_list|(
name|ec
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTime
argument_list|(
name|ec
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|ec
operator|.
name|getStartTimeHeader
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|ec
operator|.
name|getEndTimeHeader
argument_list|(
name|useAmPm
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setDate
argument_list|(
name|ec
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|addEnrollment
argument_list|(
name|ci
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|2
index|]
operator|=
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|p
operator|.
name|getTarget
argument_list|()
operator|.
name|getSlots
argument_list|()
init|;
name|i
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|int
name|slot
init|=
name|i
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|0
index|]
argument_list|,
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|slot2pref
index|[
name|slot
index|]
index|[
literal|1
index|]
argument_list|,
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
name|slot2pref
index|[
name|slot
index|]
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
name|StringBuffer
name|pattern
init|=
operator|new
name|StringBuffer
argument_list|(
name|slot2pref
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|slot2pref
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|min
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|max
init|=
name|slot2pref
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|pref
init|=
operator|(
name|max
operator|>
operator|-
name|min
condition|?
name|max
else|:
operator|-
name|min
operator|>
name|max
condition|?
name|min
else|:
name|max
operator|)
decl_stmt|;
if|if
condition|(
name|slot2pref
index|[
name|i
index|]
index|[
literal|2
index|]
operator|==
literal|1
condition|)
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|PreferenceLevel
operator|.
name|sNotAvailable
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|pattern
operator|.
name|append
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2char
argument_list|(
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setAvailability
argument_list|(
name|pattern
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Attribute
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|AttributeInterface
name|attribute
init|=
operator|new
name|AttributeInterface
argument_list|()
decl_stmt|;
name|attribute
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getAttributeId
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setName
argument_list|(
name|a
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
name|AttributeTypeInterface
name|type
init|=
operator|new
name|AttributeTypeInterface
argument_list|()
decl_stmt|;
name|type
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getTypeId
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setConjunctive
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isConjunctive
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setRequired
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|info
operator|.
name|addAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getPreference
argument_list|()
operator|!=
literal|0
condition|)
name|info
operator|.
name|setTeachingPreference
argument_list|(
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|instructor
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getBackToBackPreference
argument_list|()
operator|!=
literal|0
condition|)
name|info
operator|.
name|addDistributionPreference
argument_list|(
operator|new
name|PreferenceInfo
argument_list|(
literal|1l
argument_list|,
name|CONSTANTS
operator|.
name|instructorBackToBack
argument_list|()
argument_list|,
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|instructor
operator|.
name|getBackToBackPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|protected
name|InstructorInfo
name|toInstructorInfo
parameter_list|(
name|TeachingAssignment
name|assignment
parameter_list|)
block|{
name|InstructorInfo
name|info
init|=
name|toInstructorInfo
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
argument_list|)
decl_stmt|;
name|Instructor
operator|.
name|Context
name|context
init|=
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getContext
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
name|info
operator|.
name|setAssignedLoad
argument_list|(
name|context
operator|.
name|getLoad
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|assignment
operator|.
name|variable
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getCriteria
argument_list|()
control|)
block|{
name|double
name|value
init|=
name|c
operator|.
name|getValue
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|assignment
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
name|info
operator|.
name|setValue
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TeachingRequestInfo
argument_list|>
name|getTeachingRequests
parameter_list|(
name|Long
name|subjectAreaId
parameter_list|,
name|boolean
name|assigned
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|TeachingRequestInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TeachingRequest
name|request
range|:
name|getModel
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|subjectAreaId
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|course
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
operator|!
name|subjectAreaId
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
name|TeachingRequestInfo
name|info
init|=
name|toRequestInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|request
operator|.
name|getVariables
argument_list|()
control|)
block|{
name|TeachingAssignment
name|placement
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|info
operator|.
name|addInstructor
argument_list|(
name|toInstructorInfo
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assigned
operator|&&
name|info
operator|.
name|hasInstructors
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assigned
operator|&&
name|info
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|<
name|info
operator|.
name|getNrInstructors
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|getInstructors
parameter_list|(
name|Long
name|departmentId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|instructorIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|departmentId
operator|!=
literal|null
condition|)
block|{
name|instructorIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select i.uniqueId from DepartmentalInstructor i where i.department.uniqueId = :departmentId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|departmentId
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|InstructorSchedulingModel
name|model
init|=
operator|(
name|InstructorSchedulingModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Instructor
name|instructor
range|:
name|model
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|instructorIds
operator|!=
literal|null
operator|&&
operator|!
name|instructorIds
operator|.
name|contains
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Instructor
operator|.
name|Context
name|context
init|=
name|instructor
operator|.
name|getContext
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorInfo
name|info
init|=
name|toInstructorInfo
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
name|info
operator|.
name|setAssignedLoad
argument_list|(
name|context
operator|.
name|getLoad
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|context
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|TeachingRequestInfo
name|request
init|=
name|toRequestInfo
argument_list|(
name|assignment
operator|.
name|variable
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Criterion
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|model
operator|.
name|getCriteria
argument_list|()
control|)
block|{
name|double
name|value
init|=
name|c
operator|.
name|getValue
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|assignment
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|0
condition|)
block|{
name|request
operator|.
name|setValue
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|info
operator|.
name|addValue
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|info
operator|.
name|addAssignedRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TeachingRequestInfo
name|getTeachingRequestInfo
parameter_list|(
name|Long
name|requestId
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|TeachingRequest
name|request
range|:
name|getModel
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|InstructorInfo
argument_list|>
name|values
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|InstructorInfo
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getRequestId
argument_list|()
operator|==
name|requestId
condition|)
block|{
name|TeachingRequestInfo
name|info
init|=
name|toRequestInfo
argument_list|(
name|request
argument_list|)
decl_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|request
operator|.
name|getVariables
argument_list|()
control|)
block|{
name|TeachingAssignment
name|placement
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
name|info
operator|.
name|addInstructor
argument_list|(
name|toInstructorInfo
argument_list|(
name|placement
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|request
operator|.
name|getVariables
argument_list|()
control|)
block|{
for|for
control|(
name|TeachingAssignment
name|assignment
range|:
name|var
operator|.
name|values
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
control|)
block|{
name|InstructorInfo
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
name|toInstructorInfo
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|info
operator|.
name|addDomainValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Constraint
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
argument_list|,
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
argument_list|>
name|conflicts
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Constraint
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|>
argument_list|,
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
argument_list|>
name|entry
range|:
name|conflicts
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|TeachingAssignment
name|conflict
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|TeachingRequestInfo
name|c
init|=
name|value
operator|.
name|getConflict
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|toRequestInfo
argument_list|(
name|conflict
operator|.
name|variable
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setConflict
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|addInstructor
argument_list|(
name|toInstructorInfo
argument_list|(
name|conflict
argument_list|)
argument_list|)
expr_stmt|;
name|value
operator|.
name|addConflict
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|getInstructor
argument_list|(
name|conflict
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|addInstructor
argument_list|(
name|toInstructorInfo
argument_list|(
name|conflict
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|info
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingAssignment
name|assignment
parameter_list|)
block|{
return|return
literal|"<a href='instructorDetail.do?instructorId="
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
operator|+
literal|"'>"
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingRequest
name|request
parameter_list|)
block|{
return|return
literal|"<a href='classDetail.do?cid="
operator|+
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSectionId
argument_list|()
operator|+
literal|"'>"
operator|+
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getSections
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingRequest
operator|.
name|Variable
name|variable
parameter_list|)
block|{
return|return
literal|"<a href='classDetail.do?cid="
operator|+
name|variable
operator|.
name|getRequest
argument_list|()
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSectionId
argument_list|()
operator|+
literal|"'>"
operator|+
name|variable
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
operator|(
name|variable
operator|.
name|getRequest
argument_list|()
operator|.
name|getNrInstructors
argument_list|()
operator|!=
literal|1
condition|?
literal|"["
operator|+
name|variable
operator|.
name|getInstructorIndex
argument_list|()
operator|+
literal|"]"
else|:
literal|""
operator|)
operator|+
literal|" "
operator|+
name|variable
operator|.
name|getRequest
argument_list|()
operator|.
name|getSections
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assign
parameter_list|(
name|SuggestionInfo
name|suggestion
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TeachingAssignment
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|assignments
label|:
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|suggestion
operator|.
name|getAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|TeachingRequest
name|request
range|:
name|getModel
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getRequestId
argument_list|()
operator|==
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestId
argument_list|()
condition|)
block|{
name|TeachingRequest
operator|.
name|Variable
name|var
init|=
name|request
operator|.
name|getVariable
argument_list|(
name|assignment
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|TeachingAssignment
name|cur
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|var
argument_list|)
decl_stmt|;
name|variables
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TeachingAssignment
name|val
range|:
name|var
operator|.
name|values
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|val
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
operator|==
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
condition|)
block|{
name|values
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|p
operator|.
name|info
argument_list|(
name|toHtml
argument_list|(
name|var
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|cur
operator|==
literal|null
condition|?
literal|"not assigned"
else|:
name|toHtml
argument_list|(
name|cur
argument_list|)
operator|)
operator|+
literal|"&rarr; "
operator|+
name|toHtml
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
continue|continue
name|assignments
continue|;
block|}
block|}
name|p
operator|.
name|info
argument_list|(
name|toHtml
argument_list|(
name|var
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|cur
operator|==
literal|null
condition|?
literal|"not assigned"
else|:
name|toHtml
argument_list|(
name|cur
argument_list|)
operator|)
operator|+
literal|"&rarr; not assigned"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|var
range|:
name|variables
control|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|var
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingAssignment
name|val
range|:
name|values
control|)
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0l
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SuggestionsResponse
name|computeSuggestions
parameter_list|(
name|SuggestionInfo
name|suggestion
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|int
name|timeout
parameter_list|,
name|int
name|maxResults
parameter_list|)
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|InstructorSchedulingSuggestions
name|suggestions
init|=
operator|new
name|InstructorSchedulingSuggestions
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|suggestions
operator|.
name|setDepth
argument_list|(
name|maxDepth
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|setLimit
argument_list|(
name|maxResults
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|setTimeOut
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|SuggestionsResponse
name|response
init|=
operator|new
name|SuggestionsResponse
argument_list|()
decl_stmt|;
for|for
control|(
name|SuggestionInfo
name|s
range|:
name|suggestions
operator|.
name|computeSuggestions
argument_list|(
name|suggestion
argument_list|)
control|)
block|{
name|response
operator|.
name|addSuggestion
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setTimeoutReached
argument_list|(
name|suggestions
operator|.
name|wasTimeoutReached
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNrCombinationsConsidered
argument_list|(
name|suggestions
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setNrSolutions
argument_list|(
name|suggestions
operator|.
name|getNrSolutions
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

