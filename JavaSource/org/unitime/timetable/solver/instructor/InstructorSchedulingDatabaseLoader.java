begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|constraints
operator|.
name|SameInstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|InstructorSchedulingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSchedulingDatabaseLoader
extends|extends
name|ProblemLoader
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingAssignment
argument_list|,
name|InstructorSchedulingModel
argument_list|>
block|{
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iSolverGroupId
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iInstructorFormat
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iCommonItypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Attribute
operator|.
name|Type
argument_list|>
name|iAttributeTypes
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Attribute
operator|.
name|Type
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Attribute
argument_list|>
name|iAttributes
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Attribute
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|iCourses
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Attribute
argument_list|>
name|iDepartmentAttribute
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Attribute
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|iSections
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Instructor
argument_list|>
name|iInstructors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Instructor
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iHasTentative
init|=
literal|false
decl_stmt|,
name|iHasCommitted
init|=
literal|false
decl_stmt|;
specifier|public
name|InstructorSchedulingDatabaseLoader
parameter_list|(
name|InstructorSchedulingModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingAssignment
argument_list|>
name|assignment
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|(
name|Long
operator|)
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
control|)
name|iSolverGroupId
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|iInstructorFormat
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|NameFormat
operator|.
name|LAST_FIRST
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|commonItypes
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.CommonItypes"
argument_list|,
literal|"lec"
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonItypes
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|itype
range|:
name|commonItypes
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
if|if
condition|(
operator|!
name|itype
operator|.
name|isEmpty
argument_list|()
condition|)
name|iCommonItypes
operator|.
name|add
argument_list|(
name|itype
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|Exception
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|COMMIT
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|load
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to load input data, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|load
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Loading input data ..."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Department d where d.solverGroup.uniqueId in :solverGroupId"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|iSolverGroupId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|departments
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Attribute
operator|.
name|Type
name|dt
init|=
operator|new
name|Attribute
operator|.
name|Type
argument_list|(
operator|-
literal|1
argument_list|,
literal|"Department"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|addAttributeType
argument_list|(
name|dt
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|departments
control|)
name|iDepartmentAttribute
operator|.
name|put
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|new
name|Attribute
argument_list|(
operator|-
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dt
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|loadInstructors
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|loadRequests
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|createAssignment
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Save.Commit"
argument_list|,
name|iHasTentative
operator|||
operator|!
name|iHasCommitted
condition|?
literal|"false"
else|:
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Attribute
name|getAttribute
parameter_list|(
name|InstructorAttribute
name|a
parameter_list|)
block|{
name|Attribute
name|attribute
init|=
name|iAttributes
operator|.
name|get
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
block|{
name|Attribute
operator|.
name|Type
name|type
init|=
name|iAttributeTypes
operator|.
name|get
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
operator|new
name|Attribute
operator|.
name|Type
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isConjunctive
argument_list|()
argument_list|,
name|a
operator|.
name|getType
argument_list|()
operator|.
name|isRequired
argument_list|()
argument_list|)
expr_stmt|;
name|iAttributeTypes
operator|.
name|put
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addAttributeType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|attribute
operator|=
operator|new
name|Attribute
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|iAttributes
operator|.
name|put
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
return|return
name|attribute
return|;
block|}
specifier|protected
name|Course
name|getCourse
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
block|{
name|Course
name|course
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|course
operator|=
operator|new
name|Course
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
return|return
name|course
return|;
block|}
specifier|protected
name|void
name|loadDistributionPreferences
parameter_list|(
name|Instructor
name|instructor
parameter_list|,
name|DistributionPref
name|dp
parameter_list|)
block|{
if|if
condition|(
literal|"BTB_TIME"
operator|.
name|equals
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
literal|"BTB"
operator|.
name|equals
argument_list|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
name|instructor
operator|.
name|setBackToBackPreference
argument_list|(
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|dp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadTimePreferences
parameter_list|(
name|Instructor
name|instructor
parameter_list|,
name|TimePref
name|tp
parameter_list|)
block|{
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|boolean
name|out
index|[]
index|[]
init|=
operator|new
name|boolean
index|[
name|m
operator|.
name|getNrDays
argument_list|()
index|]
index|[
name|m
operator|.
name|getNrTimes
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|out
index|[
name|i
index|]
index|[
name|j
index|]
condition|)
continue|continue;
name|out
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
condition|)
continue|continue;
name|int
name|endDay
init|=
name|i
decl_stmt|,
name|endTime
init|=
name|j
decl_stmt|;
while|while
condition|(
name|endTime
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
operator|&&
operator|!
name|out
index|[
name|i
index|]
index|[
name|endTime
operator|+
literal|1
index|]
operator|&&
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|endTime
operator|+
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
condition|)
name|endTime
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
name|i
init|;
name|k
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|out
index|[
name|k
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|k
operator|+
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
block|}
if|if
condition|(
name|same
condition|)
name|endDay
operator|=
name|m
operator|.
name|getNrDays
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
name|endDay
operator|+
literal|1
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|)
block|{
name|boolean
name|same
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|j
init|;
name|x
operator|<=
name|endTime
condition|;
name|x
operator|++
control|)
if|if
condition|(
operator|!
name|out
index|[
name|endDay
operator|+
literal|1
index|]
index|[
name|x
index|]
operator|&&
operator|!
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|endDay
operator|+
literal|1
argument_list|,
name|x
argument_list|)
argument_list|)
condition|)
block|{
name|same
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|same
condition|)
break|break;
name|endDay
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
for|for
control|(
name|int
name|b
init|=
name|j
init|;
name|b
operator|<=
name|endTime
condition|;
name|b
operator|++
control|)
name|out
index|[
name|a
index|]
index|[
name|b
index|]
operator|=
literal|true
expr_stmt|;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
name|i
init|;
name|a
operator|<=
name|endDay
condition|;
name|a
operator|++
control|)
name|dayCode
operator||=
name|m
operator|.
name|getDayCode
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|TimeLocation
name|time
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|m
operator|.
name|getStartSlot
argument_list|(
name|j
argument_list|)
argument_list|,
name|m
operator|.
name|getStartSlot
argument_list|(
name|endTime
argument_list|)
operator|-
name|m
operator|.
name|getStartSlot
argument_list|(
name|j
argument_list|)
operator|+
name|m
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|,
name|m
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|instructor
operator|.
name|addTimePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
name|time
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|m
operator|.
name|getPreference
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadUnavailability
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|DepartmentalInstructor
name|di
parameter_list|,
name|Instructor
name|instructor
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollments
init|=
operator|(
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentClassEnrollment e where e.student.session.uniqueId = :sessionId and e.student.externalUniqueId = :externalId and e.clazz.cancelled = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|datePattern
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|TimeLocation
name|time
init|=
operator|new
name|TimeLocation
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
operator|new
name|BitSet
argument_list|()
else|:
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
operator|)
argument_list|,
name|assignment
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|instructor
operator|.
name|addTimePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
name|time
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|ClassInstructor
argument_list|>
name|classInstructors
init|=
operator|(
name|List
argument_list|<
name|ClassInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from ClassInstructor ci where ci.instructor.externalUniqueId = :externalId and ci.instructor.department.session.uniqueId = :sessionId and "
operator|+
literal|"ci.instructor.department.uniqueId != :departmentId and ci.tentative = false and ci.lead = true and ci.classInstructing.cancelled = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|di
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|classInstructors
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|DatePattern
name|datePattern
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|TimeLocation
name|time
init|=
operator|new
name|TimeLocation
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|assignment
operator|.
name|getSlotPerMtg
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassLabel
argument_list|(
literal|true
argument_list|)
argument_list|,
operator|(
name|datePattern
operator|==
literal|null
condition|?
operator|new
name|BitSet
argument_list|()
else|:
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
operator|)
argument_list|,
name|assignment
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|instructor
operator|.
name|addTimePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
name|time
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|di
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|isTentative
argument_list|()
operator|||
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|||
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|||
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
continue|continue;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|instructor
operator|.
name|addTimePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelProhibited
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|loadInstructors
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from DepartmentalInstructor i, SolverGroup g inner join g.departments d where "
operator|+
literal|"g.uniqueId in :solverGroupId and i.department = d and i.teachingPreference.prefProlog != :prohibited and i.maxLoad> 0.0"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|iSolverGroupId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"prohibited"
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading instructors..."
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|list
control|)
block|{
name|Instructor
name|instructor
init|=
operator|new
name|Instructor
argument_list|(
name|i
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|i
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|i
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|i
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|InstructorAttribute
name|a
range|:
name|i
operator|.
name|getAttributes
argument_list|()
control|)
name|instructor
operator|.
name|addAttribute
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iDepartmentAttribute
operator|.
name|isEmpty
argument_list|()
condition|)
name|instructor
operator|.
name|addAttribute
argument_list|(
name|iDepartmentAttribute
operator|.
name|get
argument_list|(
name|i
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
name|p
range|:
name|i
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|InstructorCoursePref
condition|)
block|{
name|InstructorCoursePref
name|cp
init|=
operator|(
name|InstructorCoursePref
operator|)
name|p
decl_stmt|;
name|instructor
operator|.
name|addCoursePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|Course
argument_list|>
argument_list|(
name|getCourse
argument_list|(
name|cp
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|cp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|DistributionPref
condition|)
block|{
name|loadDistributionPreferences
argument_list|(
name|instructor
argument_list|,
operator|(
name|DistributionPref
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|TimePref
condition|)
block|{
name|loadTimePreferences
argument_list|(
name|instructor
argument_list|,
operator|(
name|TimePref
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|loadUnavailability
argument_list|(
name|hibSession
argument_list|,
name|i
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|put
argument_list|(
name|i
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Section
name|getSection
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|boolean
name|overlap
parameter_list|)
block|{
name|Section
name|section
init|=
name|iSections
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|CourseOffering
name|course
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|String
name|room
init|=
literal|null
decl_stmt|;
name|TimeLocation
name|time
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|time
operator|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|room
operator|=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
else|else
name|room
operator|+=
literal|", "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
name|section
operator|=
operator|new
name|Section
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
argument_list|,
name|time
argument_list|,
name|room
argument_list|,
name|overlap
argument_list|,
operator|!
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|iSections
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
specifier|protected
name|boolean
name|isToBeIncluded
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iCommonItypes
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getSis_ref
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|int
name|nrInstructorsNeeded
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|int
name|nrChildInstructors
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
block|{
name|nrChildInstructors
operator|+=
name|nrInstructorsNeeded
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
operator|(
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|?
name|clazz
operator|.
name|effectiveNbrInstructors
argument_list|()
else|:
literal|0
operator|)
operator|-
name|nrChildInstructors
argument_list|)
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
literal|"<A href='classDetail.do?cid="
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
return|return
literal|"<a href='instructorDetail.do?instructorId="
operator|+
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&deptId="
operator|+
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingAssignment
name|assignment
parameter_list|)
block|{
return|return
literal|"<a href='instructorDetail.do?instructorId="
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
operator|+
literal|"'>"
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingRequest
name|request
parameter_list|)
block|{
return|return
literal|"<a href='classDetail.do?cid="
operator|+
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSectionId
argument_list|()
operator|+
literal|"'>"
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|boolean
name|isToBeIgnored
parameter_list|(
name|ClassInstructor
name|ci
parameter_list|)
block|{
if|if
condition|(
name|ci
operator|.
name|isTentative
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
return|return
literal|true
return|;
name|Instructor
name|instructor
init|=
name|iInstructors
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Instructor "
operator|+
name|toHtml
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
operator|+
literal|" is assigned to "
operator|+
name|toHtml
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
operator|+
literal|", but not allowed for automatic assignment."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|getInstructors
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|ArrayList
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isToBeIgnored
argument_list|(
name|ci
argument_list|)
condition|)
block|{
if|if
condition|(
name|ci
operator|.
name|isTentative
argument_list|()
condition|)
name|iHasTentative
operator|=
literal|true
expr_stmt|;
else|else
name|iHasCommitted
operator|=
literal|true
expr_stmt|;
name|instructors
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|child
operator|.
name|isCancelled
argument_list|()
operator|||
operator|!
name|child
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|child
operator|.
name|getClassInstructors
argument_list|()
control|)
if|if
condition|(
operator|!
name|isToBeIgnored
argument_list|(
name|ci
argument_list|)
condition|)
name|instructors
operator|.
name|remove
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|instructors
return|;
block|}
specifier|protected
name|void
name|loadRequest
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|int
name|nrInstructors
init|=
name|nrInstructorsNeeded
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrInstructors
operator|<=
literal|0
condition|)
return|return;
name|Course
name|course
init|=
name|getCourse
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|getSection
argument_list|(
name|clazz
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|float
name|load
init|=
name|clazz
operator|.
name|effectiveTeachingLoad
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|checked
init|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
name|checked
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
init|;
name|parent
operator|!=
literal|null
condition|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
control|)
block|{
name|checked
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isToBeIncluded
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|getSection
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
name|load
operator|+=
name|parent
operator|.
name|effectiveTeachingLoad
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|SchedulingSubpart
name|other
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|checked
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iCommonItypes
operator|.
name|contains
argument_list|(
name|other
operator|.
name|getItype
argument_list|()
operator|.
name|getSis_ref
argument_list|()
argument_list|)
operator|&&
operator|!
name|other
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|other
operator|.
name|getClasses
argument_list|()
control|)
name|sections
operator|.
name|add
argument_list|(
name|getSection
argument_list|(
name|c
argument_list|,
name|other
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|TeachingRequest
argument_list|>
name|requests
init|=
operator|new
name|ArrayList
argument_list|<
name|TeachingRequest
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|getInstructors
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructors
operator|.
name|size
argument_list|()
operator|>
name|nrInstructors
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"There are more instructors are assigned to "
operator|+
name|toHtml
argument_list|(
name|clazz
argument_list|)
operator|+
literal|" than requested."
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrInstructors
condition|;
name|i
operator|++
control|)
block|{
name|TeachingRequest
name|request
init|=
operator|new
name|TeachingRequest
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|i
argument_list|,
name|course
argument_list|,
name|load
argument_list|,
name|sections
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|InstructorPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorPref
name|p
init|=
operator|(
name|InstructorPref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Instructor
name|instructor
init|=
name|iInstructors
operator|.
name|get
argument_list|(
name|p
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addInstructorPreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|Instructor
argument_list|>
argument_list|(
name|instructor
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|InstructorAttributePref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorAttributePref
name|p
init|=
operator|(
name|InstructorAttributePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|request
operator|.
name|addAttributePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|Attribute
argument_list|>
argument_list|(
name|getAttribute
argument_list|(
name|p
operator|.
name|getAttribute
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|preference2preferenceLevel
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iDepartmentAttribute
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|.
name|addAttributePreference
argument_list|(
operator|new
name|Preference
argument_list|<
name|Attribute
argument_list|>
argument_list|(
name|iDepartmentAttribute
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|sPreferenceLevelRequired
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|request
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|j
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Instructor
name|instructor
init|=
name|iInstructors
operator|.
name|get
argument_list|(
name|di
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setInitialAssignment
argument_list|(
operator|new
name|TeachingAssignment
argument_list|(
name|request
argument_list|,
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Instructor "
operator|+
name|toHtml
argument_list|(
name|di
argument_list|)
operator|+
literal|" is assigned to "
operator|+
name|toHtml
argument_list|(
name|clazz
argument_list|)
operator|+
literal|", but not allowed for automatic assignment."
argument_list|)
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|requests
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|requests
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|SameInstructorConstraint
name|diffInstructor
init|=
operator|new
name|SameInstructorConstraint
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|Constants
operator|.
name|sPreferenceProhibited
argument_list|)
decl_stmt|;
for|for
control|(
name|TeachingRequest
name|request
range|:
name|requests
control|)
name|diffInstructor
operator|.
name|addVariable
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|diffInstructor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadRequests
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Class_ c where c.controllingDept.solverGroup.uniqueId in :solverGroupId and c.cancelled = false and "
operator|+
literal|"(c.teachingLoad is not null or c.schedulingSubpart.teachingLoad is not null) and "
operator|+
literal|"((c.nbrInstructors is null and c.schedulingSubpart.nbrInstructors> 0) or c.nbrInstructors> 0)"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|iSolverGroupId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading requests..."
argument_list|,
name|classes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isInstructorAssignmentNeeded
argument_list|()
condition|)
continue|continue;
name|loadRequest
argument_list|(
name|hibSession
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|createAssignment
parameter_list|()
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating initial assignment..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|requests
label|:
for|for
control|(
name|TeachingRequest
name|request
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|TeachingAssignment
name|assignment
init|=
name|request
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getTimePreference
argument_list|(
name|request
argument_list|)
operator|.
name|isProhibited
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|toHtml
argument_list|(
name|request
argument_list|)
operator|+
literal|"&larr; "
operator|+
name|toHtml
argument_list|(
name|assignment
argument_list|)
operator|+
literal|": instructor is not available."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getCoursePreference
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|.
name|isProhibited
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|toHtml
argument_list|(
name|request
argument_list|)
operator|+
literal|"&larr; "
operator|+
name|toHtml
argument_list|(
name|assignment
argument_list|)
operator|+
literal|": course "
operator|+
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" is prohibited."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|request
operator|.
name|getInstructorPreference
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
argument_list|)
operator|.
name|isProhibited
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|toHtml
argument_list|(
name|request
argument_list|)
operator|+
literal|"&larr; "
operator|+
name|toHtml
argument_list|(
name|assignment
argument_list|)
operator|+
literal|": instructor "
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is prohibited."
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Attribute
operator|.
name|Type
name|type
range|:
name|getModel
argument_list|()
operator|.
name|getAttributeTypes
argument_list|()
control|)
block|{
name|int
name|pref
init|=
name|request
operator|.
name|getAttributePreference
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|sPreferenceProhibited
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|preferenceLevel2preference
argument_list|(
name|pref
argument_list|)
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|toHtml
argument_list|(
name|request
argument_list|)
operator|+
literal|"&larr; "
operator|+
name|toHtml
argument_list|(
name|assignment
argument_list|)
operator|+
literal|": probibited by attribute type "
operator|+
name|type
operator|.
name|getTypeName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue
name|requests
continue|;
block|}
block|}
if|if
condition|(
operator|!
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|canTeach
argument_list|(
name|request
argument_list|)
operator|||
name|request
operator|.
name|getAttributePreference
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
argument_list|)
operator|.
name|isProhibited
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|toHtml
argument_list|(
name|request
argument_list|)
operator|+
literal|"&larr; "
operator|+
name|toHtml
argument_list|(
name|assignment
argument_list|)
operator|+
literal|": assignment not valid."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|getModel
argument_list|()
operator|.
name|weaken
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Constraint
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingAssignment
argument_list|>
argument_list|,
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|warn
init|=
literal|"Unable to assign "
operator|+
name|toHtml
argument_list|(
name|request
argument_list|)
operator|+
literal|"&larr; "
operator|+
name|toHtml
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
name|warn
operator|+=
literal|"<br>&nbsp;&nbsp;Reason:"
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|TeachingRequest
argument_list|,
name|TeachingAssignment
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|TeachingAssignment
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|TeachingAssignment
name|v
range|:
name|vals
control|)
block|{
name|warn
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|toHtml
argument_list|(
name|v
operator|.
name|variable
argument_list|()
argument_list|)
operator|+
literal|" = "
operator|+
name|toHtml
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|warn
operator|+=
literal|"<br>&nbsp;&nbsp;&nbsp;&nbsp;    in constraint "
operator|+
name|c
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
name|warn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

