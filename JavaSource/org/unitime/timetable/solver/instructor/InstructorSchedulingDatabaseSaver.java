begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|InstructorSchedulingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|instructor
operator|.
name|model
operator|.
name|TeachingRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalCourseOfferingEditAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalInstrOfferingConfigAssignInstructorsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServerImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorSchedulingDatabaseSaver
extends|extends
name|ProblemSaver
argument_list|<
name|TeachingRequest
operator|.
name|Variable
argument_list|,
name|TeachingAssignment
argument_list|,
name|InstructorSchedulingModel
argument_list|>
block|{
specifier|private
name|String
name|iInstructorFormat
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iSolverGroupId
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|iUpdatedConfigs
init|=
operator|new
name|HashSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|InstructionalOffering
argument_list|>
name|iUpdatedOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iTentative
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iShowClassSuffix
init|=
literal|false
decl_stmt|;
specifier|public
name|InstructorSchedulingDatabaseSaver
parameter_list|(
name|Solver
name|solver
parameter_list|)
block|{
name|super
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|(
name|Long
operator|)
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
control|)
name|iSolverGroupId
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|iTentative
operator|=
operator|!
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Save.Commit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iInstructorFormat
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|NameFormat
operator|.
name|LAST_FIRST
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|iShowClassSuffix
operator|=
name|ApplicationProperty
operator|.
name|SolverShowClassSufix
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|Exception
block|{
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Saving solution ..."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|saveSolution
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iUpdatedConfigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionInstrOfferingConfigAssignInstructors
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalInstrOfferingConfigAssignInstructorsAction
name|assignAction
init|=
operator|(
name|ExternalInstrOfferingConfigAssignInstructorsAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Performing external actions ..."
argument_list|,
name|iUpdatedConfigs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|iUpdatedConfigs
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|assignAction
operator|.
name|performExternalInstrOfferingConfigAssignInstructorsAction
argument_list|(
name|ioc
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iUpdatedOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|className
init|=
name|ApplicationProperty
operator|.
name|ExternalActionCourseOfferingEdit
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
operator|&&
name|className
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ExternalCourseOfferingEditAction
name|editAction
init|=
operator|(
name|ExternalCourseOfferingEditAction
operator|)
operator|(
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Performing external actions ..."
argument_list|,
name|iUpdatedOfferings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|iUpdatedOfferings
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|editAction
operator|.
name|performExternalCourseOfferingEditAction
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Refreshing solution ..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|.
name|refreshInstructorSolution
argument_list|(
name|iSolverGroupId
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to refresh solution, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to save a solution, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
literal|"<A href='classDetail.do?cid="
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|)
operator|+
literal|"</A>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
return|return
literal|"<a href='instructorDetail.do?instructorId="
operator|+
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"&deptId="
operator|+
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingAssignment
name|assignment
parameter_list|)
block|{
return|return
literal|"<a href='instructorDetail.do?instructorId="
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
operator|+
literal|"'>"
operator|+
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|String
name|toHtml
parameter_list|(
name|TeachingRequest
name|request
parameter_list|)
block|{
return|return
literal|"<a href='classDetail.do?cid="
operator|+
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSectionId
argument_list|()
operator|+
literal|"'>"
operator|+
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|request
operator|.
name|getSections
argument_list|()
operator|+
literal|"</a>"
return|;
block|}
specifier|protected
name|void
name|saveSolution
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading instructors ..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|changedInstructors
init|=
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InstructionalOffering
argument_list|>
name|changedOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i, SolverGroup g inner join g.departments d where "
operator|+
literal|"g.uniqueId in :solverGroupId and i.department = d"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|iSolverGroupId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|instructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iUpdatedConfigs
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
name|changedInstructors
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|OfferingCoordinator
name|coordinator
range|:
operator|(
name|List
argument_list|<
name|OfferingCoordinator
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from OfferingCoordinator c inner join c.instructor i, SolverGroup g inner join g.departments d where "
operator|+
literal|"g.uniqueId in :solverGroupId and i.department = d"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|iSolverGroupId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|coordinator
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iUpdatedOfferings
operator|.
name|add
argument_list|(
name|coordinator
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
name|changedOfferings
operator|.
name|add
argument_list|(
name|coordinator
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
name|coordinator
operator|.
name|getOffering
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|remove
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|coordinator
argument_list|)
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading requests ..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
argument_list|>
name|requests
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
name|request
range|:
operator|(
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from TeachingRequest r inner join r.offering.courseOfferings co where co.isControl = true and co.subjectArea.department.solverGroup.uniqueId in :solverGroupId"
argument_list|)
operator|.
name|setParameterList
argument_list|(
literal|"solverGroupId"
argument_list|,
name|iSolverGroupId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|request
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|requests
operator|.
name|put
argument_list|(
name|request
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Saving instructor assignments ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingRequest
operator|.
name|Variable
name|request
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|TeachingAssignment
name|assignment
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
name|DepartmentalInstructor
name|instructor
init|=
name|instructors
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
continue|continue;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|request
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
name|r
operator|.
name|getAssignedInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iTentative
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
block|{
name|OfferingCoordinator
name|oc
init|=
operator|new
name|OfferingCoordinator
argument_list|()
decl_stmt|;
name|oc
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setOffering
argument_list|(
name|r
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setResponsibility
argument_list|(
name|r
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|oc
operator|.
name|setTeachingRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|r
operator|.
name|getOffering
argument_list|()
operator|.
name|getOfferingCoordinators
argument_list|()
operator|.
name|add
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|changedOfferings
operator|.
name|add
argument_list|(
name|r
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|oc
argument_list|)
expr_stmt|;
name|iUpdatedOfferings
operator|.
name|add
argument_list|(
name|r
operator|.
name|getOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TeachingClassRequest
name|cr
range|:
name|r
operator|.
name|getClassRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|isAssignInstructor
argument_list|()
condition|)
block|{
name|ClassInstructor
name|ci
init|=
operator|new
name|ClassInstructor
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setLead
argument_list|(
name|cr
operator|.
name|isLead
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setPercentShare
argument_list|(
name|cr
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setResponsibility
argument_list|(
name|r
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setTeachingRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|changedInstructors
operator|.
name|add
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|iUpdatedConfigs
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingRequest
name|request
range|:
name|requests
operator|.
name|values
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|request
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|changedInstructors
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|offering
range|:
name|changedOfferings
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

