begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|ParallelSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|BackupFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSolver
parameter_list|<
name|V
extends|extends
name|Variable
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|T
extends|extends
name|Value
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|M
extends|extends
name|Model
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|>
extends|extends
name|ParallelSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
implements|implements
name|CommonSolverInterface
block|{
specifier|protected
name|Log
name|sLog
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iWorking
init|=
literal|false
decl_stmt|;
specifier|protected
name|Date
name|iLoadedDate
init|=
literal|null
decl_stmt|;
specifier|private
name|SolverDisposeListener
name|iDisposeListener
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iLastTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iIsPassivated
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
name|iProgressBeforePassivation
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iCurrentSolutionInfoBeforePassivation
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iBestSolutionInfoBeforePassivation
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|iPassivationFolder
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPassivationPuid
init|=
literal|null
decl_stmt|;
specifier|protected
name|Thread
name|iWorkThread
init|=
literal|null
decl_stmt|;
specifier|public
name|AbstractSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|SolverDisposeListener
name|disposeListener
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iDisposeListener
operator|=
name|disposeListener
expr_stmt|;
name|sLog
operator|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getLoadedDate
parameter_list|()
block|{
if|if
condition|(
name|iLoadedDate
operator|==
literal|null
operator|&&
operator|!
name|isPassivated
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
name|log
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
operator|&&
operator|!
name|log
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iLoadedDate
operator|=
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|iLoadedDate
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
name|getProgressLog
parameter_list|(
name|Integer
name|level
parameter_list|,
name|String
name|fromStage
parameter_list|,
name|Date
name|since
parameter_list|)
block|{
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|p
operator|.
name|getLog
argument_list|()
init|)
block|{
name|ArrayList
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
name|log
init|=
operator|new
name|ArrayList
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Progress
operator|.
name|Message
name|m
range|:
name|p
operator|.
name|getLog
argument_list|()
control|)
block|{
if|if
condition|(
name|fromStage
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getLevel
argument_list|()
operator|==
name|Progress
operator|.
name|MSGLEVEL_STAGE
operator|&&
name|m
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|fromStage
argument_list|)
condition|)
block|{
name|log
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|level
operator|!=
literal|null
operator|&&
name|m
operator|.
name|getLevel
argument_list|()
operator|<
name|level
condition|)
continue|continue;
if|if
condition|(
name|since
operator|!=
literal|null
operator|&&
operator|!
name|m
operator|.
name|getDate
argument_list|()
operator|.
name|after
argument_list|(
name|since
argument_list|)
condition|)
continue|continue;
name|log
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|log
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLog
parameter_list|(
name|int
name|level
parameter_list|,
name|boolean
name|includeDate
parameter_list|,
name|String
name|fromStage
parameter_list|)
block|{
if|if
condition|(
name|fromStage
operator|==
literal|null
condition|)
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|level
argument_list|,
name|includeDate
argument_list|)
return|;
else|else
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|level
argument_list|,
name|includeDate
argument_list|,
name|fromStage
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isWorking
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|iWorking
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|restoreBest
parameter_list|()
block|{
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|saveBest
parameter_list|()
block|{
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
name|getProgress
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
name|iProgressBeforePassivation
return|;
try|try
block|{
name|Hashtable
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"STATUS"
argument_list|,
name|p
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"PHASE"
argument_list|,
name|p
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"PROGRESS"
argument_list|,
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getProgress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAX_PROGRESS"
argument_list|,
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getProgressMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"VERSION"
argument_list|,
name|Constants
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperties
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|disposeNoInherit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|disposeNoInherit
parameter_list|(
name|boolean
name|unregister
parameter_list|)
block|{
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|!=
literal|null
operator|&&
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|unregister
operator|&&
name|iDisposeListener
operator|!=
literal|null
condition|)
name|iDisposeListener
operator|.
name|onDispose
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentSolutionInfo
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
name|iCurrentSolutionInfoBeforePassivation
return|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bestSolutionInfo
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
name|iBestSolutionInfoBeforePassivation
return|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|ProblemSaver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|getDatabaseSaver
parameter_list|(
name|Solver
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|solver
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|ProblemLoader
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|getDatabaseLoader
parameter_list|(
name|M
name|model
parameter_list|,
name|Assignment
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|assignment
parameter_list|)
function_decl|;
specifier|protected
name|void
name|finishBeforeSave
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onFinish
parameter_list|()
block|{
name|super
operator|.
name|onFinish
argument_list|()
expr_stmt|;
try|try
block|{
name|iWorking
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
name|finishBeforeSave
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Save"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|ProblemSaver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|saver
init|=
name|getDatabaseSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|saver
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to save the problem: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Unload"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iWorking
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onStop
parameter_list|()
block|{
name|super
operator|.
name|onStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
block|{
name|iWorking
operator|=
literal|true
expr_stmt|;
name|ProblemSaver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|saver
init|=
name|getDatabaseSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|saver
operator|.
name|setCallback
argument_list|(
name|getSavingDoneCallback
argument_list|()
argument_list|)
expr_stmt|;
name|iWorkThread
operator|=
operator|new
name|Thread
argument_list|(
name|saver
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|M
name|createModel
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|load
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|M
name|model
init|=
name|createModel
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|ProblemLoader
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|loader
init|=
name|getDatabaseLoader
argument_list|(
name|model
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
name|getLoadingDoneCallback
argument_list|()
argument_list|)
expr_stmt|;
name|iWorkThread
operator|=
operator|new
name|Thread
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reload
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|currentSolution
argument_list|()
operator|==
literal|null
operator|||
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return;
block|}
name|Callback
name|callBack
init|=
name|getReloadingDoneCallback
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|M
name|model
init|=
name|createModel
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
name|Progress
operator|.
name|changeInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|ProblemLoader
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|loader
init|=
name|getDatabaseLoader
argument_list|(
name|model
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
name|callBack
argument_list|)
expr_stmt|;
name|iWorkThread
operator|=
operator|new
name|Thread
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Callback
name|getLoadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|DefaultLoadingDoneCallback
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|Callback
name|getReloadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|DefaultReloadingDoneCallback
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
argument_list|(
name|this
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|Callback
name|getSavingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|DefaultSavingDoneCallback
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|afterSave
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|afterLoad
parameter_list|()
block|{
block|}
specifier|protected
specifier|static
class|class
name|DefaultLoadingDoneCallback
parameter_list|<
name|V
extends|extends
name|Variable
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|T
extends|extends
name|Value
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|M
extends|extends
name|Model
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|>
implements|implements
name|Callback
block|{
name|AbstractSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|iSolver
decl_stmt|;
specifier|protected
name|DefaultLoadingDoneCallback
parameter_list|(
name|AbstractSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|solver
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSolver
operator|.
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iSolver
operator|.
name|iWorking
operator|=
literal|false
expr_stmt|;
name|iSolver
operator|.
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|iSolver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSolver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.StartSolver"
argument_list|,
literal|false
argument_list|)
condition|)
name|iSolver
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|DefaultSavingDoneCallback
parameter_list|<
name|V
extends|extends
name|Variable
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|T
extends|extends
name|Value
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|M
extends|extends
name|Model
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|>
implements|implements
name|Callback
block|{
name|AbstractSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|iSolver
decl_stmt|;
specifier|protected
name|DefaultSavingDoneCallback
parameter_list|(
name|AbstractSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|solver
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSolver
operator|.
name|iWorking
operator|=
literal|false
expr_stmt|;
name|iSolver
operator|.
name|afterSave
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|iSolver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|abstract
name|Document
name|createCurrentSolutionBackup
parameter_list|(
name|boolean
name|anonymize
parameter_list|,
name|boolean
name|idconv
parameter_list|)
function_decl|;
specifier|protected
name|void
name|saveProperties
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|Element
name|configuration
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|addElement
argument_list|(
literal|"configuration"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|e
range|:
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|configuration
operator|.
name|addElement
argument_list|(
literal|"property"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|readProperties
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|Element
name|configuration
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"configuration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|configuration
operator|.
name|elementIterator
argument_list|(
literal|"property"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|e
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|backup
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
name|folder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|File
name|outXmlFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
name|getType
argument_list|()
operator|.
name|getPrefix
argument_list|()
operator|+
name|puid
operator|+
name|BackupFileFilter
operator|.
name|sXmlExtension
argument_list|)
decl_stmt|;
try|try
block|{
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outXmlFile
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|createCurrentSolutionBackup
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|saveProperties
argument_list|(
name|document
argument_list|)
expr_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|fos
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|outXmlFile
operator|.
name|exists
argument_list|()
condition|)
name|outXmlFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
return|return
name|restore
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|restureCurrentSolutionFromBackup
parameter_list|(
name|Document
name|document
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|,
name|boolean
name|removeFiles
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"restore(folder="
operator|+
name|folder
operator|+
literal|","
operator|+
name|puid
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|File
name|inXmlFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
name|getType
argument_list|()
operator|.
name|getPrefix
argument_list|()
operator|+
name|puid
operator|+
name|BackupFileFilter
operator|.
name|sXmlExtension
argument_list|)
decl_stmt|;
name|M
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
name|stopSolver
argument_list|()
expr_stmt|;
name|disposeNoInherit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|inXmlFile
argument_list|)
decl_stmt|;
name|readProperties
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|model
operator|=
name|createModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|restureCurrentSolutionFromBackup
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeFiles
condition|)
block|{
name|inXmlFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|writeLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|V
name|v
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|currentSolution
argument_list|()
operator|.
name|clearBest
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Solution
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|currentSolution
parameter_list|()
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|currentSolution
argument_list|()
return|;
block|}
specifier|protected
name|void
name|beforeStart
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
name|beforeStart
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|isPassivated
parameter_list|()
block|{
return|return
name|iIsPassivated
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|long
name|timeFromLastUsed
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|iLastTimeStamp
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|activateIfNeeded
parameter_list|()
block|{
name|iLastTimeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isPassivated
argument_list|()
condition|)
return|return
literal|false
return|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"<activate "
operator|+
name|iPassivationPuid
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|iIsPassivated
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage before activation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|restore
argument_list|(
name|iPassivationFolder
argument_list|,
name|iPassivationPuid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage after activation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|passivate
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
if|if
condition|(
name|isPassivated
argument_list|()
operator|||
name|super
operator|.
name|currentSolution
argument_list|()
operator|==
literal|null
operator|||
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"<passivate "
operator|+
name|puid
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage before passivation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|iProgressBeforePassivation
operator|=
name|getProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|iProgressBeforePassivation
operator|!=
literal|null
condition|)
name|iProgressBeforePassivation
operator|.
name|put
argument_list|(
literal|"STATUS"
argument_list|,
literal|"Pasivated"
argument_list|)
expr_stmt|;
name|iCurrentSolutionInfoBeforePassivation
operator|=
name|currentSolutionInfo
argument_list|()
expr_stmt|;
name|iBestSolutionInfoBeforePassivation
operator|=
name|bestSolutionInfo
argument_list|()
expr_stmt|;
name|iPassivationFolder
operator|=
name|folder
expr_stmt|;
name|iPassivationPuid
operator|=
name|puid
expr_stmt|;
name|backup
argument_list|(
name|iPassivationFolder
argument_list|,
name|iPassivationPuid
argument_list|)
expr_stmt|;
name|disposeNoInherit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage after passivation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|iIsPassivated
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|boolean
name|passivateIfNeeded
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
name|long
name|inactiveTimeToPassivate
init|=
literal|60000l
operator|*
name|ApplicationProperty
operator|.
name|SolverPasivationTime
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isPassivated
argument_list|()
operator|||
name|inactiveTimeToPassivate
operator|<=
literal|0
operator|||
name|timeFromLastUsed
argument_list|()
operator|<
name|inactiveTimeToPassivate
operator|||
name|isWorking
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|passivate
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getLastUsed
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|iLastTimeStamp
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iSolverThread
operator|!=
literal|null
condition|)
block|{
name|iStop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iSolverThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iSolverThread
operator|.
name|isInterrupted
argument_list|()
condition|)
name|iSolverThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iWorkThread
operator|!=
literal|null
operator|&&
name|iWorkThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iWorkThread
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|iWorkThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to interrupt the solver, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statusSolutionInfo
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
operator|(
name|iBestSolutionInfoBeforePassivation
operator|==
literal|null
condition|?
name|iCurrentSolutionInfoBeforePassivation
else|:
name|iBestSolutionInfoBeforePassivation
operator|)
return|;
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
decl_stmt|;
try|try
block|{
name|Solution
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|solution
init|=
name|getWorkingSolution
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|getSolutionComparator
argument_list|()
operator|.
name|isBetterThanBestSolution
argument_list|(
name|solution
argument_list|)
condition|)
name|info
operator|=
name|solution
operator|.
name|getModel
argument_list|()
operator|.
name|getInfo
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
block|}
return|return
name|info
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|exportXml
parameter_list|()
throws|throws
name|IOException
block|{
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|anonymize
init|=
name|ApplicationProperty
operator|.
name|SolverXMLExportNames
operator|.
name|isFalse
argument_list|()
decl_stmt|;
name|boolean
name|idconv
init|=
name|ApplicationProperty
operator|.
name|SolverXMLExportConvertIds
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|ret
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|Document
name|document
init|=
name|createCurrentSolutionBackup
argument_list|(
name|anonymize
argument_list|,
name|idconv
argument_list|)
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|SolverXMLExportConfiguration
operator|.
name|isTrue
argument_list|()
condition|)
name|saveProperties
argument_list|(
name|document
argument_list|)
expr_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|ret
argument_list|,
name|OutputFormat
operator|.
name|createPrettyPrint
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|ret
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ret
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
operator|.
name|toByteArray
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DefaultReloadingDoneCallback
parameter_list|<
name|V
extends|extends
name|Variable
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|T
extends|extends
name|Value
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|,
name|M
extends|extends
name|Model
parameter_list|<
name|V
parameter_list|,
name|T
parameter_list|>
parameter_list|>
implements|implements
name|Callback
block|{
name|Map
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|iCurrentAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|iBestAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|iInitialAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|boolean
name|iRestoreInitial
init|=
literal|false
decl_stmt|;
name|String
name|iSolutionId
init|=
literal|null
decl_stmt|;
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
name|AbstractSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|iSolver
decl_stmt|;
specifier|public
name|DefaultReloadingDoneCallback
parameter_list|(
name|AbstractSolver
argument_list|<
name|V
argument_list|,
name|T
argument_list|,
name|M
argument_list|>
name|solver
parameter_list|,
name|boolean
name|restoreInitial
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
name|iSolutionId
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.SolutionId"
argument_list|)
expr_stmt|;
name|Solution
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|solution
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
decl_stmt|;
for|for
control|(
name|V
name|v
range|:
name|solution
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|T
name|t
init|=
name|solution
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|iCurrentAssignmentTable
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getBestAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iBestAssignmentTable
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|v
operator|.
name|getBestAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|iInitialAssignmentTable
operator|.
name|put
argument_list|(
name|v
argument_list|,
name|v
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|V
name|getVariable
parameter_list|(
name|V
name|old
parameter_list|)
block|{
for|for
control|(
name|V
name|v
range|:
name|iSolver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|old
argument_list|)
condition|)
return|return
name|v
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|T
name|getValue
parameter_list|(
name|V
name|v
parameter_list|,
name|T
name|old
parameter_list|)
block|{
for|for
control|(
name|T
name|t
range|:
name|v
operator|.
name|values
argument_list|(
name|iSolver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|t
operator|.
name|equals
argument_list|(
name|old
argument_list|)
condition|)
return|return
name|t
return|;
block|}
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Assignment "
operator|+
name|old
operator|.
name|getName
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|v
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|protected
name|void
name|assign
parameter_list|(
name|T
name|t
parameter_list|)
block|{
name|Solution
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|solution
init|=
name|iSolver
operator|.
name|currentSolution
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Constraint
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
argument_list|,
name|Set
argument_list|<
name|T
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|solution
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|solution
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solution
operator|.
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|t
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" := "
operator|+
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;Reason:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|T
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|T
name|v
range|:
name|vals
control|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|v
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;in constraint "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|unassignAll
parameter_list|()
block|{
name|Solution
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|solution
init|=
name|iSolver
operator|.
name|currentSolution
argument_list|()
decl_stmt|;
for|for
control|(
name|V
name|v
range|:
name|solution
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|solution
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|Solution
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|solution
init|=
name|iSolver
operator|.
name|currentSolution
argument_list|()
decl_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|solution
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iBestAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating best assignment ..."
argument_list|,
name|iBestAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|e
range|:
name|iBestAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|V
name|v
init|=
name|getVariable
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
continue|continue;
name|T
name|t
init|=
name|getValue
argument_list|(
name|v
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|solution
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iRestoreInitial
operator|&&
operator|!
name|iInitialAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating initial assignment ..."
argument_list|,
name|iInitialAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|e
range|:
name|iInitialAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|V
name|v
init|=
name|getVariable
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
continue|continue;
name|T
name|t
init|=
name|getValue
argument_list|(
name|v
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|v
operator|.
name|setInitialAssignment
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iCurrentAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating current assignment ..."
argument_list|,
name|iCurrentAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|V
argument_list|,
name|T
argument_list|>
name|e
range|:
name|iCurrentAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|V
name|v
init|=
name|getVariable
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
continue|continue;
name|T
name|t
init|=
name|getValue
argument_list|(
name|v
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|iCurrentAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iProgress
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSolutionId
operator|!=
literal|null
condition|)
name|iSolver
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|iSolutionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|iSolver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|fatal
argument_list|(
literal|"Failed to restore previous assignments: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iSolver
operator|.
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iSolver
operator|.
name|iWorking
operator|=
literal|false
expr_stmt|;
name|iSolver
operator|.
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|iSolver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|M
name|getModel
parameter_list|()
block|{
return|return
operator|(
name|M
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
return|;
block|}
block|}
end_class

end_unit

