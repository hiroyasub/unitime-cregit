begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentCommittedConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentDistanceConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|criteria
operator|.
name|StudentHardConflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|FinalSectioning
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|criteria
operator|.
name|Criterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|CPSolverMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EnrollmentCheck
block|{
specifier|protected
specifier|static
name|CPSolverMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CPSolverMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|java
operator|.
name|text
operator|.
name|DecimalFormat
name|sDoubleFormat
init|=
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormat
argument_list|(
literal|"0.##"
argument_list|,
operator|new
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|TimetableModel
name|iModel
init|=
literal|null
decl_stmt|;
specifier|private
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|iAssignment
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iMessageLevel
init|=
name|Progress
operator|.
name|MSGLEVEL_WARN
decl_stmt|;
specifier|private
name|int
name|iMessageLowerLevel
init|=
name|Progress
operator|.
name|MSGLEVEL_INFO
decl_stmt|;
specifier|public
name|EnrollmentCheck
parameter_list|(
name|TimetableModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
parameter_list|,
name|int
name|msgLevel
parameter_list|)
block|{
name|iModel
operator|=
name|model
expr_stmt|;
name|iAssignment
operator|=
name|assignment
expr_stmt|;
name|setMessageLevel
argument_list|(
name|msgLevel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMessageLevel
parameter_list|(
name|int
name|messageLevel
parameter_list|)
block|{
name|iMessageLevel
operator|=
name|messageLevel
expr_stmt|;
switch|switch
condition|(
name|iMessageLevel
condition|)
block|{
case|case
name|Progress
operator|.
name|MSGLEVEL_FATAL
case|:
name|iMessageLowerLevel
operator|=
name|Progress
operator|.
name|MSGLEVEL_ERROR
expr_stmt|;
break|break;
case|case
name|Progress
operator|.
name|MSGLEVEL_ERROR
case|:
name|iMessageLowerLevel
operator|=
name|Progress
operator|.
name|MSGLEVEL_WARN
expr_stmt|;
break|break;
case|case
name|Progress
operator|.
name|MSGLEVEL_WARN
case|:
name|iMessageLowerLevel
operator|=
name|Progress
operator|.
name|MSGLEVEL_INFO
expr_stmt|;
break|break;
case|case
name|Progress
operator|.
name|MSGLEVEL_INFO
case|:
name|iMessageLowerLevel
operator|=
name|Progress
operator|.
name|MSGLEVEL_DEBUG
expr_stmt|;
break|break;
case|case
name|Progress
operator|.
name|MSGLEVEL_DEBUG
case|:
name|iMessageLowerLevel
operator|=
name|Progress
operator|.
name|MSGLEVEL_TRACE
expr_stmt|;
break|break;
case|case
name|Progress
operator|.
name|MSGLEVEL_TRACE
case|:
name|iMessageLowerLevel
operator|=
name|Progress
operator|.
name|MSGLEVEL_TRACE
expr_stmt|;
break|break;
block|}
block|}
specifier|protected
name|String
name|toString
parameter_list|(
name|Collection
argument_list|<
name|Student
argument_list|>
name|students
parameter_list|)
block|{
if|if
condition|(
name|students
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|students
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|s
operator|.
name|getId
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
comment|/** Check validity of JENRL constraints from student enrollments */
specifier|public
name|void
name|checkJenrl
parameter_list|(
name|Progress
name|p
parameter_list|)
block|{
try|try
block|{
name|p
operator|.
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCheckingJenrl
argument_list|()
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|l1
range|:
name|iModel
operator|.
name|variables
argument_list|()
control|)
block|{
name|p
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|p
operator|.
name|debug
argument_list|(
literal|"Checking "
operator|+
name|l1
operator|.
name|getName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|l2
range|:
name|iModel
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|l1
operator|.
name|getId
argument_list|()
operator|<
name|l2
operator|.
name|getId
argument_list|()
condition|)
block|{
name|double
name|jenrl
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Student
argument_list|>
name|jenrlStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|l1
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l2
operator|.
name|students
argument_list|()
operator|.
name|contains
argument_list|(
name|student
argument_list|)
condition|)
block|{
name|jenrl
operator|+=
name|student
operator|.
name|getJenrlWeight
argument_list|(
name|l1
argument_list|,
name|l2
argument_list|)
expr_stmt|;
name|jenrlStudents
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|JenrlConstraint
name|j
range|:
name|iModel
operator|.
name|getJenrlConstraints
argument_list|()
control|)
block|{
name|Lecture
name|a
init|=
operator|(
name|Lecture
operator|)
name|j
operator|.
name|first
argument_list|()
decl_stmt|;
name|Lecture
name|b
init|=
operator|(
name|Lecture
operator|)
name|j
operator|.
name|second
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|.
name|equals
argument_list|(
name|l1
argument_list|)
operator|&&
name|b
operator|.
name|equals
argument_list|(
name|l2
argument_list|)
operator|)
operator|||
operator|(
name|a
operator|.
name|equals
argument_list|(
name|l2
argument_list|)
operator|&&
name|b
operator|.
name|equals
argument_list|(
name|l1
argument_list|)
operator|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|j
operator|.
name|getJenrl
argument_list|()
operator|!=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|jenrl
argument_list|)
condition|)
block|{
name|p
operator|.
name|error
argument_list|(
name|MSG
operator|.
name|warnWrongJenrl
argument_list|(
name|getClassLabel
argument_list|(
name|l1
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|l2
argument_list|)
argument_list|,
name|j
operator|.
name|getJenrl
argument_list|()
argument_list|,
operator|(
name|long
operator|)
name|Math
operator|.
name|ceil
argument_list|(
name|jenrl
argument_list|)
argument_list|,
name|toString
argument_list|(
name|l1
operator|.
name|students
argument_list|()
argument_list|)
argument_list|,
name|toString
argument_list|(
name|l2
operator|.
name|students
argument_list|()
argument_list|)
argument_list|,
name|toString
argument_list|(
name|jenrlStudents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
name|jenrl
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|error
argument_list|(
name|MSG
operator|.
name|warnMissingJenrl
argument_list|(
name|getClassLabel
argument_list|(
name|l1
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|l2
argument_list|)
argument_list|,
name|Math
operator|.
name|round
argument_list|(
name|jenrl
argument_list|)
argument_list|,
name|toString
argument_list|(
name|l1
operator|.
name|students
argument_list|()
argument_list|)
argument_list|,
name|toString
argument_list|(
name|l2
operator|.
name|students
argument_list|()
argument_list|)
argument_list|,
name|toString
argument_list|(
name|jenrlStudents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|p
operator|.
name|error
argument_list|(
name|MSG
operator|.
name|warnUnexpectedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|checkEnrollment
parameter_list|(
name|Progress
name|p
parameter_list|,
name|Student
name|s
parameter_list|,
name|Long
name|subpartId
parameter_list|,
name|Collection
name|lectures
parameter_list|)
block|{
name|Lecture
name|enrolled
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lectures
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getLectures
argument_list|()
operator|.
name|contains
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
if|if
condition|(
name|enrolled
operator|!=
literal|null
condition|)
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnStudentInMultipleClasses
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|enrolled
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|enrolled
operator|=
name|lecture
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enrolled
operator|==
literal|null
condition|)
block|{
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnStudentInNoClasses
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|,
name|getSubpartLabel
argument_list|(
name|subpartId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|enrolled
operator|.
name|hasAnyChildren
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|sid
range|:
name|enrolled
operator|.
name|getChildrenSubpartIds
argument_list|()
control|)
block|{
name|checkEnrollment
argument_list|(
name|p
argument_list|,
name|s
argument_list|,
name|sid
argument_list|,
name|enrolled
operator|.
name|getChildren
argument_list|(
name|sid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|String
name|getClassLabel
parameter_list|(
name|Lecture
name|lecture
parameter_list|)
block|{
return|return
literal|"<A href='classDetail.do?cid="
operator|+
name|lecture
operator|.
name|getClassId
argument_list|()
operator|+
literal|"'>"
operator|+
name|lecture
operator|.
name|getName
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|String
name|getSubpartLabel
parameter_list|(
name|Long
name|subpartId
parameter_list|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
operator|new
name|SchedulingSubpartDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|subpartId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|!=
literal|null
condition|)
block|{
name|String
name|suffix
init|=
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
return|return
literal|"<A href='schedulingSubpartDetail.do?ssuid="
operator|+
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|subpart
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|suffix
operator|+
literal|")"
operator|)
operator|+
literal|"</A>"
return|;
block|}
else|else
return|return
name|subpartId
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getOfferingLabel
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|InstructionalOffering
name|offering
init|=
operator|(
operator|new
name|InstructionalOfferingDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
return|return
literal|"<A href='instructionalOfferingDetail.do?io="
operator|+
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"</A>"
return|;
else|else
return|return
name|offeringId
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|getOfferingsLabel
parameter_list|(
name|Collection
name|offeringIds
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"["
argument_list|)
decl_stmt|;
if|if
condition|(
name|offeringIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|offeringIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|offeringId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getOfferingLabel
argument_list|(
name|offeringId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasSubpartMixedOwnership
parameter_list|(
name|SchedulingSubpart
name|subpart
parameter_list|)
block|{
name|Department
name|owner
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
name|owner
operator|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|owner
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|hasSubpartMixedOwnership
argument_list|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasSubpartMixedOwnership
parameter_list|(
name|Lecture
name|lecture
parameter_list|)
block|{
name|Class_
name|clazz
init|=
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|SchedulingSubpart
name|subpart
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|lecture
operator|.
name|sameSubpartLectures
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|lecture
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|hasSubpartMixedOwnership
argument_list|(
name|lecture
operator|.
name|getParent
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|hasSubpartMixedOwnership
argument_list|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|checkStudentEnrollments
parameter_list|(
name|Progress
name|p
parameter_list|)
block|{
name|p
operator|.
name|setStatus
argument_list|(
literal|"Student Enrollments Check"
argument_list|)
expr_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.##"
argument_list|)
decl_stmt|;
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|sc
init|=
name|iModel
operator|.
name|getCriterion
argument_list|(
name|StudentConflict
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
operator|!=
name|sc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnWrongStudentConflictCount
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|sc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|sc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|shc
init|=
name|iModel
operator|.
name|getCriterion
argument_list|(
name|StudentHardConflict
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|shc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
operator|!=
name|shc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnWrongHardStudentConflictCount
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|shc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|shc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|sdc
init|=
name|iModel
operator|.
name|getCriterion
argument_list|(
name|StudentDistanceConflict
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
operator|!=
name|sdc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnWrongDistanceStudentConflictCount
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|sdc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|sdc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Criterion
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|scc
init|=
name|iModel
operator|.
name|getCriterion
argument_list|(
name|StudentCommittedConflict
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|scc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
operator|!=
name|scc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnWrongCommittedStudentConflictCount
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|scc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|scc
operator|.
name|getValue
argument_list|(
name|iAssignment
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCheckingClassLimits
argument_list|()
argument_list|,
name|iModel
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|iModel
operator|.
name|variables
argument_list|()
control|)
block|{
name|p
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|p
operator|.
name|debug
argument_list|(
literal|"Checking "
operator|+
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
operator|+
literal|" ... students="
operator|+
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|", weighted="
operator|+
name|lecture
operator|.
name|nrWeightedStudents
argument_list|()
operator|+
literal|", limit="
operator|+
name|lecture
operator|.
name|classLimit
argument_list|(
name|iAssignment
argument_list|)
operator|+
literal|" ("
operator|+
name|lecture
operator|.
name|minClassLimit
argument_list|()
operator|+
literal|".."
operator|+
name|lecture
operator|.
name|maxClassLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|double
name|w
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|w
operator|=
name|Math
operator|.
name|max
argument_list|(
name|w
argument_list|,
operator|(
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getOfferingWeight
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|nrWeightedStudents
argument_list|()
operator|-
name|w
operator|+
name|FinalSectioning
operator|.
name|sEps
operator|>
name|lecture
operator|.
name|classLimit
argument_list|(
name|iAssignment
argument_list|)
condition|)
block|{
if|if
condition|(
name|hasSubpartMixedOwnership
argument_list|(
name|lecture
argument_list|)
condition|)
name|p
operator|.
name|message
argument_list|(
name|iMessageLowerLevel
argument_list|,
name|MSG
operator|.
name|warnClassLimitOver
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|lecture
operator|.
name|nrWeightedStudents
argument_list|()
argument_list|)
argument_list|,
name|lecture
operator|.
name|classLimit
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnClassLimitOver
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|sDoubleFormat
operator|.
name|format
argument_list|(
name|lecture
operator|.
name|nrWeightedStudents
argument_list|()
argument_list|)
argument_list|,
name|lecture
operator|.
name|classLimit
argument_list|(
name|iAssignment
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// checkJenrl(p);
name|p
operator|.
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCheckingEnrollments
argument_list|()
argument_list|,
name|iModel
operator|.
name|getAllStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iModel
operator|.
name|getAllStudents
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|student
operator|.
name|getLectures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|canEnroll
argument_list|(
name|lecture
argument_list|)
condition|)
name|p
operator|.
name|message
argument_list|(
name|iMessageLowerLevel
argument_list|,
name|MSG
operator|.
name|warnStudentInInvalidClass
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getConfigurations
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|student
operator|.
name|getOfferings
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|Vector
name|got
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|student
operator|.
name|getConfigurations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Configuration
name|cfg
init|=
operator|(
name|Configuration
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|got
operator|.
name|add
argument_list|(
name|cfg
operator|.
name|getOfferingId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|message
argument_list|(
name|iMessageLevel
argument_list|,
name|MSG
operator|.
name|warnStudentInWrongCourses
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|getOfferingsLabel
argument_list|(
name|student
operator|.
name|getOfferings
argument_list|()
argument_list|)
argument_list|,
name|getOfferingsLabel
argument_list|(
name|got
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|student
operator|.
name|getConfigurations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Configuration
name|cfg
init|=
operator|(
name|Configuration
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|subpartId
range|:
name|cfg
operator|.
name|getTopSubpartIds
argument_list|()
control|)
block|{
name|checkEnrollment
argument_list|(
name|p
argument_list|,
name|student
argument_list|,
name|subpartId
argument_list|,
name|cfg
operator|.
name|getTopLectures
argument_list|(
name|subpartId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

