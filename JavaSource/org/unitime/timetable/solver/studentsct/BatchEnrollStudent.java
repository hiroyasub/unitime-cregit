begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|SctAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|StudentEnrollmentProvider
operator|.
name|EnrollmentFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|EnrollStudent
import|;
end_import

begin_class
specifier|public
class|class
name|BatchEnrollStudent
extends|extends
name|EnrollStudent
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|execute
parameter_list|(
name|OnlineSectioningServer
name|server
parameter_list|,
specifier|final
name|OnlineSectioningHelper
name|helper
parameter_list|)
block|{
if|if
condition|(
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|StudentSolver
name|solver
init|=
operator|(
name|StudentSolver
operator|)
name|server
decl_stmt|;
name|StudentSectioningModel
name|model
init|=
operator|(
name|StudentSectioningModel
operator|)
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
name|Student
name|student
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|model
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getId
argument_list|()
operator|==
name|getRequest
argument_list|()
operator|.
name|getStudentId
argument_list|()
condition|)
block|{
name|student
operator|=
name|s
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|List
argument_list|<
name|EnrollmentFailure
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentFailure
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|CourseRequest
argument_list|,
name|List
argument_list|<
name|Section
argument_list|>
argument_list|>
name|enrollments
init|=
operator|new
name|HashMap
argument_list|<
name|CourseRequest
argument_list|,
name|List
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|assignments
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
range|:
name|getAssignment
argument_list|()
control|)
block|{
if|if
condition|(
name|assignment
operator|==
literal|null
operator|||
operator|!
name|assignment
operator|.
name|isAssigned
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
block|}
else|else
block|{
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
name|Course
name|course
init|=
literal|null
decl_stmt|;
name|requests
label|:
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Course
name|c
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getId
argument_list|()
operator|==
name|assignment
operator|.
name|getCourseId
argument_list|()
condition|)
block|{
name|course
operator|=
name|c
expr_stmt|;
name|request
operator|=
operator|(
name|CourseRequest
operator|)
name|r
expr_stmt|;
break|break
name|requests
break|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|XCourse
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|assignment
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
name|XOffering
name|offering
init|=
name|server
operator|.
name|getOffering
argument_list|(
name|c
operator|.
name|getOfferingId
argument_list|()
argument_list|)
decl_stmt|;
name|failures
operator|.
name|add
argument_list|(
operator|new
name|EnrollmentFailure
argument_list|(
name|c
argument_list|,
name|offering
operator|.
name|getSection
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|,
literal|"Adding courses is not supported at the moment."
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
continue|continue
name|assignments
continue|;
block|}
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|enrollments
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
init|=
name|solver
operator|.
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|assignment
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|assignment
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|enrollments
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|sections
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|pririty
init|=
literal|0
decl_stmt|;
name|Config
name|config
init|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getOffering
argument_list|()
argument_list|)
condition|)
block|{
name|pririty
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|assignment
operator|.
name|assign
argument_list|(
literal|0l
argument_list|,
operator|new
name|Enrollment
argument_list|(
name|cr
argument_list|,
name|pririty
argument_list|,
name|config
argument_list|,
operator|new
name|HashSet
argument_list|<
name|SctAssignment
argument_list|>
argument_list|(
name|sections
argument_list|)
argument_list|,
name|assignment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|Enrollment
name|enrollment
init|=
name|ft
operator|.
name|createEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|model
operator|.
name|inConflict
argument_list|(
name|assignment
argument_list|,
name|enrollment
argument_list|)
condition|)
name|assignment
operator|.
name|assign
argument_list|(
literal|0l
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|withMessages
argument_list|(
name|failures
argument_list|)
argument_list|,
name|helper
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

