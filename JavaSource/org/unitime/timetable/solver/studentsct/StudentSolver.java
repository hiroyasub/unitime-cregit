begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|DefaultSingleAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Model
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|CSVFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProblemSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Unavailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|NeverOverExpected
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|online
operator|.
name|expectations
operator|.
name|OverExpectedCriterion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|report
operator|.
name|StudentSectioningReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|dom
operator|.
name|DOMCDATA
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningReports
operator|.
name|ReportTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningSolutionLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SectioningSolutionLogDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|StudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XExpectations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|sectioning
operator|.
name|SectioningReportTypesBackend
operator|.
name|ReportType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|AbstractSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverDisposeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServerImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|MemoryCounter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|Gson
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|GsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonDeserializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonPrimitive
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gson
operator|.
name|JsonSerializer
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSolver
extends|extends
name|AbstractSolver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
implements|implements
name|StudentSolverProxy
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|SCT_MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|Long
argument_list|,
name|XCourse
argument_list|>
name|iCourseInfoCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|iOfferingCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|iInstructedOfferingsCache
init|=
literal|null
decl_stmt|;
specifier|private
specifier|transient
name|Map
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|iStudentCache
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|iOnlineProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InMemoryReport
argument_list|>
name|iReports
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InMemoryReport
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|StudentSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|SolverDisposeListener
name|disposeListener
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|,
name|disposeListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemSaver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
name|getDatabaseSaver
parameter_list|(
name|Solver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|solver
parameter_list|)
block|{
try|try
block|{
name|String
name|saverClass
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.DatabaseSaver"
argument_list|,
name|StudentSectioningDatabaseSaver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|saverClass
operator|!=
literal|null
operator|&&
operator|!
name|saverClass
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
name|ProblemSaver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|saverClass
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Solver
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|solver
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Failed to create a custom database saver: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StudentSectioningDatabaseSaver
argument_list|(
name|solver
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemLoader
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
name|getDatabaseLoader
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
try|try
block|{
name|String
name|loaderClass
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.DatabaseLoader"
argument_list|,
name|StudentSectioningDatabaseLoader
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loaderClass
operator|!=
literal|null
operator|&&
operator|!
name|loaderClass
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
name|ProblemLoader
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|loaderClass
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|StudentSectioningModel
operator|.
name|class
argument_list|,
name|Assignment
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Failed to create a custom database loader: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StudentSectioningDatabaseLoader
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ProblemSaver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
name|getCustomValidator
parameter_list|(
name|Solver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|solver
parameter_list|)
block|{
try|try
block|{
name|String
name|validatorClass
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.CustomValidator"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|validatorClass
operator|!=
literal|null
operator|&&
operator|!
name|validatorClass
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|(
name|ProblemSaver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|validatorClass
argument_list|)
operator|.
name|getConstructor
argument_list|(
name|Solver
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|solver
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Failed to create a custom validator: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanValidate
parameter_list|()
block|{
name|String
name|validatorClass
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.CustomValidator"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|validatorClass
operator|!=
literal|null
operator|&&
operator|!
name|validatorClass
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|StudentSectioningModel
name|createModel
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
return|return
operator|new
name|StudentSectioningModel
argument_list|(
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInitalSolution
parameter_list|(
name|Model
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|model
parameter_list|)
block|{
name|setInitalSolution
argument_list|(
operator|new
name|Solution
argument_list|(
name|model
argument_list|,
operator|new
name|DefaultSingleAssignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Document
name|createCurrentSolutionBackup
parameter_list|(
name|boolean
name|anonymize
parameter_list|,
name|boolean
name|idconv
parameter_list|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveBest"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveInitial"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveCurrent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|anonymize
condition|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ConvertIds"
argument_list|,
name|idconv
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveOnlineSectioningInfo"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveStudentInfo"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|Document
name|document
init|=
operator|new
name|StudentSectioningXMLSaver
argument_list|(
name|this
argument_list|)
operator|.
name|saveDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|anonymize
condition|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ConvertIds"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveOnlineSectioningInfo"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveStudentInfo"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|saveReports
argument_list|(
name|document
argument_list|)
expr_stmt|;
return|return
name|document
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|restureCurrentSolutionFromBackup
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.LoadBest"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.LoadInitial"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.LoadCurrent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
operator|new
name|StudentSectioningXMLLoader
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|load
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|readReports
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|clearCachedData
parameter_list|()
block|{
name|clearCourseInfoTable
argument_list|()
expr_stmt|;
name|clearOfferingCache
argument_list|()
expr_stmt|;
name|clearInstructedOfferingsCache
argument_list|()
expr_stmt|;
name|clearStudentCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|disposeNoInherit
parameter_list|(
name|boolean
name|unregister
parameter_list|)
block|{
name|super
operator|.
name|disposeNoInherit
argument_list|(
name|unregister
argument_list|)
expr_stmt|;
name|clearCachedData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|afterLoad
parameter_list|()
block|{
name|super
operator|.
name|afterLoad
argument_list|()
expr_stmt|;
name|clearCachedData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInitalSolution
parameter_list|(
name|Solution
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|solution
parameter_list|)
block|{
name|super
operator|.
name|setInitalSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|clearCachedData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Callback
name|getReloadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|ReloadingDoneCallback
argument_list|()
return|;
block|}
specifier|public
class|class
name|ReloadingDoneCallback
implements|implements
name|Callback
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|iCurrentAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|iBestAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|iInitialAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|iSolutionId
init|=
literal|null
decl_stmt|;
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|public
name|ReloadingDoneCallback
parameter_list|()
block|{
name|iSolutionId
operator|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.SolutionId"
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|assignments
init|=
name|iCurrentAssignmentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
condition|)
block|{
name|assignments
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iCurrentAssignmentTable
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getBestAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|assignments
init|=
name|iBestAssignmentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
condition|)
block|{
name|assignments
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iBestAssignmentTable
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getBestAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|assignments
init|=
name|iInitialAssignmentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
condition|)
block|{
name|assignments
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Enrollment
name|getEnrollment
parameter_list|(
name|Request
name|request
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
return|return
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|request
operator|)
operator|.
name|createEnrollment
argument_list|()
return|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|s
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Section "
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|cr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
return|return
name|cr
operator|.
name|createEnrollment
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|sections
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|assign
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|,
name|boolean
name|warn
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|enrollment
argument_list|)
condition|)
block|{
if|if
condition|(
name|warn
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"): Student not available."
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|info
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|"): Student not available."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|warn
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|info
argument_list|(
literal|"There is a problem assigning "
operator|+
name|enrollment
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Enrollment
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|vals
control|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"    conflicts with "
operator|+
name|enrl
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|enrl
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
literal|" of a different student ("
operator|+
name|enrl
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|" due to "
operator|+
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|unassignAll
parameter_list|()
block|{
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0l
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
argument_list|()
expr_stmt|;
name|requests
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iBestAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating best assignment ..."
argument_list|,
name|iBestAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|e1
range|:
name|iBestAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Request
name|request
init|=
name|r
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|Enrollment
name|enrollment
init|=
name|getEnrollment
argument_list|(
name|request
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|enrollment
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iInitialAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating initial assignment ..."
argument_list|,
name|iInitialAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|e1
range|:
name|iInitialAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Request
name|request
init|=
name|r
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|Enrollment
name|enrollment
init|=
name|getEnrollment
argument_list|(
name|request
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iCurrentAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating current assignment ..."
argument_list|,
name|iCurrentAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|e1
range|:
name|iCurrentAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Request
name|request
init|=
name|r
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|Enrollment
name|enrollment
init|=
name|getEnrollment
argument_list|(
name|request
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|enrollment
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iCurrentAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iProgress
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSolutionId
operator|!=
literal|null
condition|)
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|iSolutionId
argument_list|)
expr_stmt|;
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|AcademicSessionInfo
name|iSession
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSession
parameter_list|()
block|{
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|iSession
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|iSession
operator|.
name|setSectioningEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iSession
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|getSessionId
argument_list|()
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Year"
argument_list|)
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Term"
argument_list|)
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Initiative"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iSession
return|;
block|}
specifier|private
name|DistanceMetric
name|iDistanceMetric
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DistanceMetric
name|getDistanceMetric
parameter_list|()
block|{
if|if
condition|(
name|iDistanceMetric
operator|==
literal|null
condition|)
name|iDistanceMetric
operator|=
name|getModel
argument_list|()
operator|.
name|getDistanceMetric
argument_list|()
expr_stmt|;
if|if
condition|(
name|iDistanceMetric
operator|==
literal|null
condition|)
block|{
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|iDistanceMetric
argument_list|)
expr_stmt|;
block|}
return|return
name|iDistanceMetric
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataProperties
name|getConfig
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
return|;
block|}
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|XCourse
argument_list|>
name|getCourseInfoTable
parameter_list|()
block|{
if|if
condition|(
name|iCourseInfoCache
operator|==
literal|null
condition|)
block|{
name|iCourseInfoCache
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XCourse
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
name|iCourseInfoCache
operator|.
name|put
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|XCourse
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iCourseInfoCache
return|;
block|}
specifier|private
name|void
name|clearCourseInfoTable
parameter_list|()
block|{
name|iCourseInfoCache
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
name|getOfferingCache
parameter_list|()
block|{
if|if
condition|(
name|iOfferingCache
operator|==
literal|null
condition|)
block|{
name|iOfferingCache
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|XOffering
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|LinkedSections
argument_list|>
name|links
init|=
name|getModel
argument_list|()
operator|.
name|getLinkedSections
argument_list|()
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
name|iOfferingCache
operator|.
name|put
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|XOffering
argument_list|(
name|offering
argument_list|,
name|links
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|iOfferingCache
return|;
block|}
specifier|private
name|void
name|clearOfferingCache
parameter_list|()
block|{
name|iOfferingCache
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|getInstructedOfferingsCache
parameter_list|()
block|{
if|if
condition|(
name|iInstructedOfferingsCache
operator|==
literal|null
condition|)
block|{
name|iInstructedOfferingsCache
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|hasInstructors
argument_list|()
condition|)
for|for
control|(
name|Instructor
name|instructor
range|:
name|section
operator|.
name|getInstructors
argument_list|()
control|)
if|if
condition|(
name|instructor
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|offerings
init|=
name|iInstructedOfferingsCache
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offerings
operator|==
literal|null
condition|)
block|{
name|offerings
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|iInstructedOfferingsCache
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
block|}
name|offerings
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|isDummy
argument_list|()
operator|||
name|student
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|unavailbilities
label|:
for|for
control|(
name|Unavailability
name|unavailability
range|:
name|student
operator|.
name|getUnavailabilities
argument_list|()
control|)
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getId
argument_list|()
operator|==
name|unavailability
operator|.
name|getId
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|offerings
init|=
name|iInstructedOfferingsCache
operator|.
name|get
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|offerings
operator|==
literal|null
condition|)
block|{
name|offerings
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|iInstructedOfferingsCache
operator|.
name|put
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
block|}
name|offerings
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
continue|continue
name|unavailbilities
continue|;
block|}
block|}
block|}
block|}
return|return
name|iInstructedOfferingsCache
return|;
block|}
specifier|private
name|void
name|clearInstructedOfferingsCache
parameter_list|()
block|{
name|iInstructedOfferingsCache
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|getStudentCache
parameter_list|()
block|{
if|if
condition|(
name|iStudentCache
operator|==
literal|null
condition|)
block|{
name|iStudentCache
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
condition|)
name|iStudentCache
operator|.
name|put
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
return|return
name|iStudentCache
return|;
block|}
specifier|private
name|void
name|clearStudentCache
parameter_list|()
block|{
name|iStudentCache
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|,
name|CourseMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseId
argument_list|>
argument_list|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|0
condition|?
literal|100
else|:
name|limit
argument_list|)
decl_stmt|;
name|String
name|queryInLowerCase
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourse
name|c
range|:
name|getCourseInfoTable
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchCourseName
argument_list|(
name|queryInLowerCase
argument_list|)
operator|&&
operator|(
name|matcher
operator|==
literal|null
operator|||
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|limit
operator|>
literal|0
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
return|return
name|ret
return|;
block|}
if|if
condition|(
name|queryInLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|XCourse
name|c
range|:
name|getCourseInfoTable
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchTitle
argument_list|(
name|queryInLowerCase
argument_list|)
operator|&&
operator|(
name|matcher
operator|==
literal|null
operator|||
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|limit
operator|>
literal|0
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
return|return
name|ret
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseId
argument_list|>
name|findCourses
parameter_list|(
name|CourseMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XCourseId
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XCourse
name|c
range|:
name|getCourseInfoTable
argument_list|()
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XStudentId
argument_list|>
name|findStudents
parameter_list|(
name|StudentMatcher
name|matcher
parameter_list|)
block|{
if|if
condition|(
name|matcher
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setServer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|XStudentId
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XStudentId
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|XStudentId
name|s
init|=
operator|new
name|XStudentId
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
operator|&&
name|matcher
operator|.
name|match
argument_list|(
name|s
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|XCourse
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
return|return
name|getCourseInfoTable
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|XCourse
name|getCourse
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|courseName
argument_list|)
condition|)
return|return
name|getCourse
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|XStudent
name|getStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|Student
name|student
init|=
name|getStudentCache
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
return|return
operator|(
name|student
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|XStudent
argument_list|(
name|student
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|XOffering
name|getOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
name|getOfferingCache
argument_list|()
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|X
extends|extends
name|OnlineSectioningAction
parameter_list|>
name|X
name|createAction
parameter_list|(
name|Class
argument_list|<
name|X
argument_list|>
name|clazz
parameter_list|)
block|{
try|try
block|{
return|return
name|clazz
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|Entity
name|user
parameter_list|)
throws|throws
name|SectioningException
block|{
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|OnlineSectioningHelper
name|h
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|h
operator|.
name|addMessageHandler
argument_list|(
operator|new
name|OnlineSectioningHelper
operator|.
name|DefaultMessageLogger
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|action
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|"["
operator|+
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|.
name|addAction
argument_list|(
name|action
argument_list|,
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|E
name|ret
init|=
name|action
operator|.
name|execute
argument_list|(
name|this
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|hasResult
argument_list|()
condition|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|NULL
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ret
operator|instanceof
name|Boolean
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
operator|(
name|Boolean
operator|)
name|ret
condition|?
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
else|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|.
name|info
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|h
operator|.
name|warn
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|h
operator|.
name|error
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|instanceof
name|SectioningException
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SCT_MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Executed: "
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|+
literal|" ("
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|Entity
name|user
parameter_list|,
name|ServerCallback
argument_list|<
name|E
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SectioningException
block|{
try|try
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAllStudents
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|readLock
parameter_list|()
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockAll
parameter_list|()
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|String
name|actionName
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseAllOfferingLocks
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getOfferingsToPersistExpectedSpaces
parameter_list|(
name|long
name|minimalAge
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unload
parameter_list|()
block|{
block|}
specifier|public
specifier|static
class|class
name|NoLock
implements|implements
name|Lock
block|{
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|needPersistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMaster
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseMasterLockIfHeld
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|XCourseRequest
argument_list|>
name|getRequests
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|List
argument_list|<
name|XCourseRequest
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|XCourseRequest
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|reqIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
if|if
condition|(
name|offering
operator|.
name|getId
argument_list|()
operator|==
name|offeringId
condition|)
block|{
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
for|for
control|(
name|CourseRequest
name|req
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|req
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
operator|&&
name|reqIds
operator|.
name|add
argument_list|(
name|req
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|XCourseRequest
argument_list|(
name|req
argument_list|,
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|req
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|XEnrollments
name|getEnrollments
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
operator|new
name|XEnrollments
argument_list|(
name|offeringId
argument_list|,
name|getRequests
argument_list|(
name|offeringId
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|XExpectations
name|getExpectations
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
if|if
condition|(
name|offering
operator|.
name|getId
argument_list|()
operator|==
name|offeringId
condition|)
return|return
operator|new
name|XExpectations
argument_list|(
name|offering
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XExpectations
name|expectations
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|XStudent
name|student
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XStudent
name|student
parameter_list|,
name|boolean
name|updateRequests
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|XOffering
name|offering
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|XCourseRequest
name|assign
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|XEnrollment
name|enrollment
parameter_list|)
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|XCourseRequest
name|waitlist
parameter_list|(
name|XCourseRequest
name|request
parameter_list|,
name|boolean
name|waitlist
parameter_list|)
block|{
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkDeadline
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|XTime
name|sectionTime
parameter_list|,
name|Deadline
name|type
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCourseDetails
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|CourseDetailsProvider
name|provider
parameter_list|)
block|{
name|XCourse
name|course
init|=
name|getCourse
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
return|return
name|course
operator|==
literal|null
condition|?
literal|null
else|:
name|course
operator|.
name|getDetails
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|provider
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getMemUsage
parameter_list|()
block|{
return|return
operator|new
name|MemoryCounter
argument_list|()
operator|.
name|estimate
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|E
name|defaultValue
parameter_list|)
block|{
name|E
name|ret
init|=
operator|(
name|E
operator|)
name|iOnlineProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|ret
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|E
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|iOnlineProperties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
else|else
name|iOnlineProperties
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CSVFile
name|getReport
parameter_list|(
name|DataProperties
name|parameters
parameter_list|)
block|{
try|try
block|{
name|String
name|name
init|=
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"report"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|String
name|reference
init|=
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reference
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|else if
condition|(
name|iReports
operator|.
name|containsKey
argument_list|(
name|reference
argument_list|)
condition|)
return|return
name|iReports
operator|.
name|get
argument_list|(
name|reference
argument_list|)
return|;
else|else
name|name
operator|=
name|ReportType
operator|.
name|valueOf
argument_list|(
name|reference
argument_list|)
operator|.
name|getImplementation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|StudentSolver
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|String
name|reference
init|=
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"reference"
argument_list|)
decl_stmt|;
return|return
operator|(
name|reference
operator|==
literal|null
condition|?
literal|null
else|:
name|iReports
operator|.
name|get
argument_list|(
name|reference
argument_list|)
operator|)
return|;
block|}
name|Class
argument_list|<
name|StudentSectioningReport
argument_list|>
name|clazz
init|=
operator|(
name|Class
argument_list|<
name|StudentSectioningReport
argument_list|>
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|StudentSectioningReport
name|report
init|=
name|clazz
operator|.
name|getConstructor
argument_list|(
name|StudentSectioningModel
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|report
operator|.
name|create
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|,
name|parameters
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|OverExpectedCriterion
name|getOverExpectedCriterion
parameter_list|()
block|{
return|return
operator|new
name|NeverOverExpected
argument_list|(
name|getConfig
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SolverType
name|getType
parameter_list|()
block|{
return|return
name|SolverType
operator|.
name|STUDENT
return|;
block|}
annotation|@
name|Override
specifier|public
name|XCourseId
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|!=
literal|null
condition|)
return|return
name|getCourse
argument_list|(
name|courseId
argument_list|)
return|;
if|if
condition|(
name|courseName
operator|!=
literal|null
condition|)
return|return
name|getCourse
argument_list|(
name|courseName
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getInstructedOfferings
parameter_list|(
name|String
name|instructorExternalId
parameter_list|)
block|{
return|return
name|getInstructedOfferingsCache
argument_list|()
operator|.
name|get
argument_list|(
name|instructorExternalId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getRequestedCourseIds
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
operator|&&
name|student
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
control|)
name|courseIds
operator|.
name|add
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|courseIds
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|isRunning
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iWorking
operator|&&
name|iWorkThread
operator|!=
literal|null
operator|&&
name|iWorkThread
operator|instanceof
name|InterruptibleThread
operator|&&
name|iWorkThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iWorkThread
operator|.
name|isInterrupted
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stopSolver
parameter_list|()
block|{
if|if
condition|(
name|super
operator|.
name|isRunning
argument_list|()
condition|)
name|super
operator|.
name|stopSolver
argument_list|()
expr_stmt|;
if|if
condition|(
name|iWorking
operator|&&
name|iWorkThread
operator|!=
literal|null
operator|&&
name|iWorkThread
operator|instanceof
name|InterruptibleThread
operator|&&
name|iWorkThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iWorkThread
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
try|try
block|{
name|iWorkThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|iWorkThread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|ReportTypeInterface
argument_list|>
name|getReportTypes
parameter_list|()
block|{
name|List
argument_list|<
name|ReportTypeInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ReportTypeInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InMemoryReport
name|report
range|:
operator|new
name|TreeSet
argument_list|<
name|InMemoryReport
argument_list|>
argument_list|(
name|iReports
operator|.
name|values
argument_list|()
argument_list|)
control|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|ReportTypeInterface
argument_list|(
name|report
operator|.
name|getReference
argument_list|()
argument_list|,
name|report
operator|.
name|getName
argument_list|()
argument_list|,
name|StudentSolver
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"reference"
argument_list|,
name|report
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|setReport
parameter_list|(
name|InMemoryReport
name|report
parameter_list|)
block|{
name|iReports
operator|.
name|put
argument_list|(
name|report
operator|.
name|getReference
argument_list|()
argument_list|,
name|report
argument_list|)
expr_stmt|;
block|}
specifier|public
name|InMemoryReport
name|getReport
parameter_list|(
name|String
name|reference
parameter_list|)
block|{
return|return
name|iReports
operator|.
name|get
argument_list|(
name|reference
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|backupXml
parameter_list|()
block|{
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ByteArrayOutputStream
name|ret
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|GZIPOutputStream
name|gz
init|=
operator|new
name|GZIPOutputStream
argument_list|(
name|ret
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
name|createCurrentSolutionBackup
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|saveProperties
argument_list|(
name|document
argument_list|)
expr_stmt|;
operator|new
name|XMLWriter
argument_list|(
name|gz
argument_list|,
name|OutputFormat
operator|.
name|createCompactFormat
argument_list|()
argument_list|)
operator|.
name|write
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|gz
operator|.
name|flush
argument_list|()
expr_stmt|;
name|gz
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
operator|.
name|toByteArray
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|restoreXml
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|StudentSectioningModel
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
name|stopSolver
argument_list|()
expr_stmt|;
name|disposeNoInherit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|model
operator|=
name|createModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// readProperties(document);
name|restureCurrentSolutionFromBackup
argument_list|(
name|document
argument_list|)
expr_stmt|;
if|if
condition|(
name|isPublished
argument_list|()
condition|)
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|setStatus
argument_list|(
name|SCT_MSG
operator|.
name|statusPublished
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|.
name|clearBest
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|setStatus
argument_list|(
name|MSG
operator|.
name|statusReady
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPublished
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSct.Published"
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentSolutionInfo
parameter_list|()
block|{
name|String
name|published
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSct.Published"
argument_list|)
decl_stmt|;
if|if
condition|(
name|published
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getExtendedInfo
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|info
operator|.
name|put
argument_list|(
literal|" "
operator|+
name|SCT_MSG
operator|.
name|infoPublished
argument_list|()
argument_list|,
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|published
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|info
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|currentSolutionInfo
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|canPassivate
parameter_list|()
block|{
return|return
name|super
operator|.
name|canPassivate
argument_list|()
operator|&&
operator|!
name|isPublished
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|,
name|boolean
name|removeFiles
parameter_list|)
block|{
if|if
condition|(
name|super
operator|.
name|restore
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|,
name|removeFiles
argument_list|)
condition|)
block|{
if|if
condition|(
name|isPublished
argument_list|()
condition|)
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
name|SCT_MSG
operator|.
name|statusPublished
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|Gson
name|getGson
parameter_list|()
block|{
name|GsonBuilder
name|builder
init|=
operator|new
name|GsonBuilder
argument_list|()
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|DateTime
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
name|src
operator|.
name|toString
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|DateTime
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|DateTime
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DateTime
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
return|return
operator|new
name|DateTime
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|,
name|DateTimeZone
operator|.
name|UTC
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonSerializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|JsonElement
name|serialize
parameter_list|(
name|Date
name|src
parameter_list|,
name|Type
name|typeOfSrc
parameter_list|,
name|JsonSerializationContext
name|context
parameter_list|)
block|{
return|return
operator|new
name|JsonPrimitive
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|)
operator|.
name|format
argument_list|(
name|src
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
operator|.
name|registerTypeAdapter
argument_list|(
name|Date
operator|.
name|class
argument_list|,
operator|new
name|JsonDeserializer
argument_list|<
name|Date
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Date
name|deserialize
parameter_list|(
name|JsonElement
name|json
parameter_list|,
name|Type
name|typeOfT
parameter_list|,
name|JsonDeserializationContext
name|context
parameter_list|)
throws|throws
name|JsonParseException
block|{
try|try
block|{
return|return
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
operator|.
name|parse
argument_list|(
name|json
operator|.
name|getAsJsonPrimitive
argument_list|()
operator|.
name|getAsString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JsonParseException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setPrettyPrinting
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|create
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finishBeforeSave
parameter_list|()
block|{
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Validate"
argument_list|,
literal|false
argument_list|)
operator|&&
name|isCanValidate
argument_list|()
condition|)
block|{
name|ProblemSaver
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|,
name|StudentSectioningModel
argument_list|>
name|saver
init|=
name|getCustomValidator
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
name|lock
init|=
name|currentSolution
argument_list|()
operator|.
name|getLock
argument_list|()
operator|.
name|readLock
argument_list|()
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|saver
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to validate the problem: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Publish"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|byte
index|[]
name|data
init|=
name|backupXml
argument_list|()
decl_stmt|;
name|SectioningSolutionLog
name|log
init|=
operator|new
name|SectioningSolutionLog
argument_list|()
decl_stmt|;
name|log
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|log
operator|.
name|setInfo
argument_list|(
name|getGson
argument_list|()
operator|.
name|toJson
argument_list|(
name|currentSolutionInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|mgrId
init|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
decl_stmt|;
name|log
operator|.
name|setOwner
argument_list|(
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|mgrId
argument_list|)
argument_list|)
expr_stmt|;
name|Long
name|configId
init|=
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SettingsId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|configId
operator|!=
literal|null
condition|)
block|{
name|SolverPredefinedSetting
name|config
init|=
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|configId
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
name|log
operator|.
name|setConfig
argument_list|(
name|config
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Long
name|publishId
init|=
name|SectioningSolutionLogDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|save
argument_list|(
name|log
argument_list|)
decl_stmt|;
if|if
condition|(
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|.
name|unloadSolver
argument_list|(
name|getType
argument_list|()
argument_list|,
literal|"PUBLISHED_"
operator|+
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|DataProperties
name|config
init|=
operator|new
name|DataProperties
argument_list|(
name|getProperties
argument_list|()
operator|.
name|toMap
argument_list|()
argument_list|)
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"StudentSct.Published"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"StudentSct.PublishId"
argument_list|,
name|publishId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
literal|"PUBLISHED_"
operator|+
name|config
operator|.
name|getProperty
argument_list|(
literal|"General.SessionId"
argument_list|)
argument_list|)
expr_stmt|;
name|StudentSolverProxy
name|solver
init|=
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|.
name|getStudentSolverContainer
argument_list|()
operator|.
name|createSolver
argument_list|(
literal|"PUBLISHED_"
operator|+
name|config
operator|.
name|getProperty
argument_list|(
literal|"General.SessionId"
argument_list|)
argument_list|,
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solver
operator|.
name|restoreXml
argument_list|(
name|data
argument_list|)
condition|)
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|saveReports
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|Element
name|reports
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|addElement
argument_list|(
literal|"reports"
argument_list|)
decl_stmt|;
for|for
control|(
name|InMemoryReport
name|r
range|:
name|iReports
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|r
operator|.
name|save
argument_list|(
name|sw
argument_list|)
expr_stmt|;
name|reports
operator|.
name|addElement
argument_list|(
literal|"report"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"reference"
argument_list|,
name|r
operator|.
name|getReference
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|DOMCDATA
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
specifier|protected
name|void
name|readReports
parameter_list|(
name|Document
name|document
parameter_list|)
block|{
name|iReports
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Element
name|reports
init|=
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|element
argument_list|(
literal|"reports"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reports
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|reports
operator|.
name|elementIterator
argument_list|(
literal|"report"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|InMemoryReport
name|r
init|=
operator|new
name|InMemoryReport
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"reference"
argument_list|)
argument_list|,
name|e
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|r
operator|.
name|load
argument_list|(
operator|new
name|StringReader
argument_list|(
name|e
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iReports
operator|.
name|put
argument_list|(
name|r
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

