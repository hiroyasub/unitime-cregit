begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ConcurrentModificationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerImpl
operator|.
name|EnrollmentSectionComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|SectionUrlProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|BackupFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ProgressWriter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningSaver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningXMLSaver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AcademicAreaCode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSolver
extends|extends
name|Solver
implements|implements
name|StudentSolverProxy
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CFG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StudentSolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|int
name|iDebugLevel
init|=
name|Progress
operator|.
name|MSGLEVEL_INFO
decl_stmt|;
specifier|private
name|boolean
name|iWorking
init|=
literal|false
decl_stmt|;
specifier|private
name|Date
name|iLoadedDate
init|=
literal|null
decl_stmt|;
specifier|private
name|StudentSolverDisposeListener
name|iDisposeListener
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iLastTimeStamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iIsPassivated
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
name|iProgressBeforePassivation
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iCurrentSolutionInfoBeforePassivation
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iBestSolutionInfoBeforePassivation
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|iPassivationFolder
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPassivationPuid
init|=
literal|null
decl_stmt|;
specifier|private
name|Thread
name|iWorkThread
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|StudentSolverDisposeListener
name|disposeListener
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iDisposeListener
operator|=
name|disposeListener
expr_stmt|;
block|}
specifier|public
name|Date
name|getLoadedDate
parameter_list|()
block|{
if|if
condition|(
name|iLoadedDate
operator|==
literal|null
operator|&&
operator|!
name|isPassivated
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Progress
operator|.
name|Message
argument_list|>
name|log
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
operator|&&
operator|!
name|log
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iLoadedDate
operator|=
name|log
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|iLoadedDate
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|()
block|{
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|iDebugLevel
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|(
name|int
name|level
parameter_list|,
name|boolean
name|includeDate
parameter_list|)
block|{
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|level
argument_list|,
name|includeDate
argument_list|)
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|(
name|int
name|level
parameter_list|,
name|boolean
name|includeDate
parameter_list|,
name|String
name|fromStage
parameter_list|)
block|{
return|return
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|getHtmlLog
argument_list|(
name|level
argument_list|,
name|includeDate
argument_list|,
name|fromStage
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDebugLevel
parameter_list|(
name|int
name|level
parameter_list|)
block|{
name|iDebugLevel
operator|=
name|level
expr_stmt|;
block|}
specifier|public
name|int
name|getDebugLevel
parameter_list|()
block|{
return|return
name|iDebugLevel
return|;
block|}
specifier|public
name|boolean
name|isWorking
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
name|iWorking
return|;
block|}
specifier|public
name|void
name|restoreBest
parameter_list|()
block|{
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|saveBest
parameter_list|()
block|{
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|.
name|putAll
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
name|getProgress
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
name|iProgressBeforePassivation
return|;
try|try
block|{
name|Hashtable
name|ret
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|Progress
name|p
init|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"STATUS"
argument_list|,
name|p
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"PHASE"
argument_list|,
name|p
operator|.
name|getPhase
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"PROGRESS"
argument_list|,
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getProgress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"MAX_PROGRESS"
argument_list|,
operator|new
name|Long
argument_list|(
name|p
operator|.
name|getProgressMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"VERSION"
argument_list|,
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
name|this
operator|.
name|getProperties
argument_list|()
operator|.
name|putAll
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|disposeNoInherit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|disposeNoInherit
parameter_list|(
name|boolean
name|unregister
parameter_list|)
block|{
name|super
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|!=
literal|null
operator|&&
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
operator|(
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|unregister
operator|&&
name|iDisposeListener
operator|!=
literal|null
condition|)
name|iDisposeListener
operator|.
name|onDispose
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getHost
parameter_list|()
block|{
return|return
literal|"local"
return|;
block|}
specifier|public
name|String
name|getHostLabel
parameter_list|()
block|{
return|return
name|getHost
argument_list|()
return|;
block|}
specifier|public
name|Object
name|exec
parameter_list|(
name|Object
index|[]
name|cmd
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
index|[]
name|types
init|=
operator|new
name|Class
index|[
operator|(
name|cmd
operator|.
name|length
operator|-
literal|3
operator|)
operator|/
literal|2
index|]
decl_stmt|;
name|Object
index|[]
name|args
init|=
operator|new
name|Object
index|[
operator|(
name|cmd
operator|.
name|length
operator|-
literal|3
operator|)
operator|/
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|types
index|[
name|i
index|]
operator|=
operator|(
name|Class
operator|)
name|cmd
index|[
literal|2
operator|*
name|i
operator|+
literal|3
index|]
expr_stmt|;
name|args
index|[
name|i
index|]
operator|=
name|cmd
index|[
literal|2
operator|*
name|i
operator|+
literal|4
index|]
expr_stmt|;
block|}
return|return
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
operator|(
name|String
operator|)
name|cmd
index|[
literal|0
index|]
argument_list|,
name|types
argument_list|)
operator|.
name|invoke
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentSolutionInfo
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
name|iCurrentSolutionInfoBeforePassivation
return|;
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
return|return
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getExtendedInfo
argument_list|()
return|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|bestSolutionInfo
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
name|iBestSolutionInfoBeforePassivation
return|;
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
return|return
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
return|;
block|}
block|}
specifier|protected
name|void
name|onFinish
parameter_list|()
block|{
name|super
operator|.
name|onFinish
argument_list|()
expr_stmt|;
try|try
block|{
name|iWorking
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Save"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|StudentSectioningSaver
name|saver
init|=
operator|new
name|StudentSectioningDatabaseSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
try|try
block|{
name|saver
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Unload"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|dispose
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iWorking
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|onStop
parameter_list|()
block|{
name|super
operator|.
name|onStop
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
operator|!=
literal|null
condition|)
name|currentSolution
argument_list|()
operator|.
name|restoreBest
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|()
block|{
name|iWorking
operator|=
literal|true
expr_stmt|;
name|StudentSectioningSaver
name|saver
init|=
operator|new
name|StudentSectioningDatabaseSaver
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|saver
operator|.
name|setCallback
argument_list|(
name|getSavingDoneCallback
argument_list|()
argument_list|)
expr_stmt|;
name|iWorkThread
operator|=
operator|new
name|Thread
argument_list|(
name|saver
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|StudentSectioningModel
name|model
init|=
operator|new
name|StudentSectioningModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|StudentSectioningLoader
name|loader
init|=
operator|new
name|StudentSectioningDatabaseLoader
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
name|getLoadingDoneCallback
argument_list|()
argument_list|)
expr_stmt|;
name|iWorkThread
operator|=
operator|new
name|Thread
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|setPriority
argument_list|(
name|THREAD_PRIORITY
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reload
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|currentSolution
argument_list|()
operator|==
literal|null
operator|||
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
block|{
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return;
block|}
name|Callback
name|callBack
init|=
name|getReloadingDoneCallback
argument_list|()
decl_stmt|;
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|StudentSectioningModel
name|model
init|=
operator|new
name|StudentSectioningModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|iWorking
operator|=
literal|true
expr_stmt|;
name|Progress
operator|.
name|changeInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|StudentSectioningLoader
name|loader
init|=
operator|new
name|StudentSectioningDatabaseLoader
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
name|callBack
argument_list|)
expr_stmt|;
name|iWorkThread
operator|=
operator|new
name|Thread
argument_list|(
name|loader
argument_list|)
expr_stmt|;
name|iWorkThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Callback
name|getLoadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|LoadingDoneCallback
argument_list|()
return|;
block|}
specifier|public
name|Callback
name|getReloadingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|ReloadingDoneCallback
argument_list|()
return|;
block|}
specifier|public
name|Callback
name|getSavingDoneCallback
parameter_list|()
block|{
return|return
operator|new
name|SavingDoneCallback
argument_list|()
return|;
block|}
specifier|protected
name|void
name|afterSave
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|afterLoad
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|afterFinalSectioning
parameter_list|()
block|{
block|}
specifier|public
class|class
name|ReloadingDoneCallback
implements|implements
name|Callback
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|iCurrentAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|iBestAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|iInitialAssignmentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|iSolutionId
init|=
literal|null
decl_stmt|;
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|public
name|ReloadingDoneCallback
parameter_list|()
block|{
name|iSolutionId
operator|=
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.SolutionId"
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|assignments
init|=
name|iCurrentAssignmentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
condition|)
block|{
name|assignments
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iCurrentAssignmentTable
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getBestAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|assignments
init|=
name|iBestAssignmentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
condition|)
block|{
name|assignments
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iBestAssignmentTable
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getBestAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|assignments
init|=
name|iInitialAssignmentTable
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignments
operator|==
literal|null
condition|)
block|{
name|assignments
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|assignments
argument_list|)
expr_stmt|;
block|}
name|assignments
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Enrollment
name|getEnrollment
parameter_list|(
name|Request
name|request
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
return|return
operator|(
operator|(
name|FreeTimeRequest
operator|)
name|request
operator|)
operator|.
name|createEnrollment
argument_list|()
return|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|s
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"WARNING: Section "
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|" is not available for "
operator|+
name|cr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
return|return
name|cr
operator|.
name|createEnrollment
argument_list|(
name|sections
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|assign
parameter_list|(
name|Enrollment
name|enrollment
parameter_list|)
block|{
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|enrollment
operator|.
name|variable
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Unable to assign "
operator|+
name|enrollment
operator|.
name|variable
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" := "
operator|+
name|enrollment
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;Reason:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Enrollment
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrl
range|:
name|vals
control|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|enrl
operator|.
name|getRequest
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" = "
operator|+
name|enrl
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;in constraint "
operator|+
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|unassignAll
parameter_list|()
block|{
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
argument_list|>
name|requests
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
argument_list|()
expr_stmt|;
name|requests
operator|.
name|put
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|put
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iBestAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating best assignment ..."
argument_list|,
name|iBestAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|e1
range|:
name|iBestAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Request
name|request
init|=
name|r
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|Enrollment
name|enrollment
init|=
name|getEnrollment
argument_list|(
name|request
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
name|currentSolution
argument_list|()
operator|.
name|saveBest
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iInitialAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating initial assignment ..."
argument_list|,
name|iInitialAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|e1
range|:
name|iInitialAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Request
name|request
init|=
name|r
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|Enrollment
name|enrollment
init|=
name|getEnrollment
argument_list|(
name|request
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iCurrentAssignmentTable
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Creating current assignment ..."
argument_list|,
name|iCurrentAssignmentTable
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|unassignAll
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
argument_list|>
name|e1
range|:
name|iCurrentAssignmentTable
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Request
argument_list|>
name|r
init|=
name|requests
operator|.
name|get
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Enrollment
argument_list|>
name|e2
range|:
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Request
name|request
init|=
name|r
operator|.
name|get
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|Enrollment
name|enrollment
init|=
name|getEnrollment
argument_list|(
name|request
argument_list|,
name|e2
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|assign
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iCurrentAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iBestAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInitialAssignmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iProgress
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSolutionId
operator|!=
literal|null
condition|)
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|iSolutionId
argument_list|)
expr_stmt|;
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|LoadingDoneCallback
implements|implements
name|Callback
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLoadedDate
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterLoad
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.StartSolver"
argument_list|,
literal|false
argument_list|)
condition|)
name|start
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|SavingDoneCallback
implements|implements
name|Callback
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iWorking
operator|=
literal|false
expr_stmt|;
name|afterSave
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|StudentSolverDisposeListener
block|{
specifier|public
name|void
name|onDispose
parameter_list|()
function_decl|;
block|}
specifier|public
name|boolean
name|backup
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
name|folder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentSolution
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveBest"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveInitial"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.SaveCurrent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|File
name|outXmlFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"sct_"
operator|+
name|puid
operator|+
name|BackupFileFilter
operator|.
name|sXmlExtension
argument_list|)
decl_stmt|;
name|File
name|outPropertiesFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"sct_"
operator|+
name|puid
operator|+
name|BackupFileFilter
operator|.
name|sPropertiesExtension
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|StudentSectioningXMLSaver
argument_list|(
name|this
argument_list|)
operator|.
name|save
argument_list|(
name|outXmlFile
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|instanceof
name|String
operator|)
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Configuration key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" is not of type String ("
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|String
operator|)
condition|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Value of configuration key "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" is not of type String ("
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|+
literal|" is of type "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getClass
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|FileOutputStream
name|fos
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fos
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outPropertiesFile
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|"Backup file"
argument_list|)
expr_stmt|;
name|fos
operator|.
name|flush
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|fos
operator|!=
literal|null
condition|)
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|outXmlFile
operator|.
name|exists
argument_list|()
condition|)
name|outXmlFile
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|outPropertiesFile
operator|.
name|exists
argument_list|()
condition|)
name|outPropertiesFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
return|return
name|restore
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|,
name|boolean
name|removeFiles
parameter_list|)
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"restore(folder="
operator|+
name|folder
operator|+
literal|","
operator|+
name|puid
operator|+
literal|",sct)"
argument_list|)
expr_stmt|;
name|File
name|inXmlFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"sct_"
operator|+
name|puid
operator|+
name|BackupFileFilter
operator|.
name|sXmlExtension
argument_list|)
decl_stmt|;
name|File
name|inPropertiesFile
init|=
operator|new
name|File
argument_list|(
name|folder
argument_list|,
literal|"sct_"
operator|+
name|puid
operator|+
name|BackupFileFilter
operator|.
name|sPropertiesExtension
argument_list|)
decl_stmt|;
name|StudentSectioningModel
name|model
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
name|stopSolver
argument_list|()
expr_stmt|;
name|disposeNoInherit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|inPropertiesFile
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|model
operator|=
operator|new
name|StudentSectioningModel
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|addProgressListener
argument_list|(
operator|new
name|ProgressWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|setInitalSolution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|initSolver
argument_list|()
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.LoadBest"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.LoadInitial"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Xml.LoadCurrent"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|StudentSectioningXMLLoader
name|loader
init|=
operator|new
name|StudentSectioningXMLLoader
argument_list|(
name|model
argument_list|)
decl_stmt|;
name|loader
operator|.
name|setInputFile
argument_list|(
name|inXmlFile
argument_list|)
expr_stmt|;
name|loader
operator|.
name|setCallback
argument_list|(
operator|new
name|Callback
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|saveBest
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|loader
operator|.
name|load
argument_list|()
expr_stmt|;
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
operator|.
name|setStatus
argument_list|(
literal|"Awaiting commands ..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeFiles
condition|)
block|{
name|inXmlFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|inPropertiesFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
name|Progress
operator|.
name|removeInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
synchronized|synchronized
init|(
name|currentSolution
argument_list|()
init|)
block|{
for|for
control|(
name|Request
name|request
range|:
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|currentSolution
argument_list|()
operator|.
name|clearBest
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Solution
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|currentSolution
parameter_list|()
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|currentSolution
argument_list|()
return|;
block|}
specifier|public
name|void
name|start
parameter_list|()
block|{
name|activateIfNeeded
argument_list|()
expr_stmt|;
name|super
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|isPassivated
parameter_list|()
block|{
return|return
name|iIsPassivated
return|;
block|}
specifier|public
specifier|synchronized
name|long
name|timeFromLastUsed
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|iLastTimeStamp
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|activateIfNeeded
parameter_list|()
block|{
name|iLastTimeStamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isPassivated
argument_list|()
condition|)
return|return
literal|false
return|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"<activate "
operator|+
name|iPassivationPuid
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|iIsPassivated
operator|=
literal|false
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage before activation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|restore
argument_list|(
name|iPassivationFolder
argument_list|,
name|iPassivationPuid
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage after activation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|passivate
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
if|if
condition|(
name|isPassivated
argument_list|()
operator|||
name|super
operator|.
name|currentSolution
argument_list|()
operator|==
literal|null
operator|||
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"<passivate "
operator|+
name|puid
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage before passivation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|iProgressBeforePassivation
operator|=
name|getProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|iProgressBeforePassivation
operator|!=
literal|null
condition|)
name|iProgressBeforePassivation
operator|.
name|put
argument_list|(
literal|"STATUS"
argument_list|,
literal|"Pasivated"
argument_list|)
expr_stmt|;
name|iCurrentSolutionInfoBeforePassivation
operator|=
name|currentSolutionInfo
argument_list|()
expr_stmt|;
name|iBestSolutionInfoBeforePassivation
operator|=
name|bestSolutionInfo
argument_list|()
expr_stmt|;
name|iPassivationFolder
operator|=
name|folder
expr_stmt|;
name|iPassivationPuid
operator|=
name|puid
expr_stmt|;
name|backup
argument_list|(
name|iPassivationFolder
argument_list|,
name|iPassivationPuid
argument_list|)
expr_stmt|;
name|disposeNoInherit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|" -- memory usage after passivation:"
operator|+
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
operator|.
name|getMem
argument_list|()
argument_list|)
expr_stmt|;
name|iIsPassivated
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|passivateIfNeeded
parameter_list|(
name|File
name|folder
parameter_list|,
name|String
name|puid
parameter_list|)
block|{
name|long
name|inactiveTimeToPassivate
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.solver.passivation.time"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
operator|*
literal|60000l
decl_stmt|;
if|if
condition|(
name|isPassivated
argument_list|()
operator|||
name|inactiveTimeToPassivate
operator|<=
literal|0
operator|||
name|timeFromLastUsed
argument_list|()
operator|<
name|inactiveTimeToPassivate
operator|||
name|isWorking
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|passivate
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
return|;
block|}
specifier|public
name|Date
name|getLastUsed
parameter_list|()
block|{
return|return
operator|new
name|Date
argument_list|(
name|iLastTimeStamp
argument_list|)
return|;
block|}
specifier|public
name|void
name|interrupt
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|iSolverThread
operator|!=
literal|null
condition|)
block|{
name|iStop
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iSolverThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iSolverThread
operator|.
name|isInterrupted
argument_list|()
condition|)
name|iSolverThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iWorkThread
operator|!=
literal|null
operator|&&
name|iWorkThread
operator|.
name|isAlive
argument_list|()
operator|&&
operator|!
name|iWorkThread
operator|.
name|isInterrupted
argument_list|()
condition|)
block|{
name|iWorkThread
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to interrupt the solver, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|statusSolutionInfo
parameter_list|()
block|{
if|if
condition|(
name|isPassivated
argument_list|()
condition|)
return|return
operator|(
name|iBestSolutionInfoBeforePassivation
operator|==
literal|null
condition|?
name|iCurrentSolutionInfoBeforePassivation
else|:
name|iBestSolutionInfoBeforePassivation
operator|)
return|;
synchronized|synchronized
init|(
name|super
operator|.
name|currentSolution
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getBestInfo
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|getSolutionComparator
argument_list|()
operator|.
name|isBetterThanBestSolution
argument_list|(
name|super
operator|.
name|currentSolution
argument_list|()
argument_list|)
condition|)
name|info
operator|=
name|super
operator|.
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|.
name|getInfo
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConcurrentModificationException
name|e
parameter_list|)
block|{
block|}
return|return
name|info
return|;
block|}
block|}
specifier|private
name|AcademicSessionInfo
name|iSession
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSession
parameter_list|()
block|{
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|iSession
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|iSession
operator|.
name|setSectioningEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|iSession
return|;
block|}
specifier|private
name|DistanceMetric
name|iDistanceMetric
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DistanceMetric
name|getDistanceMetric
parameter_list|()
block|{
if|if
condition|(
name|iDistanceMetric
operator|==
literal|null
condition|)
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|iDistanceMetric
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataProperties
name|getConfig
parameter_list|()
block|{
return|return
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|getAssignment
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|CFG
operator|.
name|requestDateFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|int
name|nrUnassignedCourses
init|=
literal|0
decl_stmt|;
name|int
name|nrAssignedAlt
init|=
literal|0
decl_stmt|;
name|boolean
name|assigned
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|assigned
operator|=
literal|true
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|?
name|r
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|isOfferingLocked
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|ca
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getRequest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
name|overlapingSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|avEnrls
init|=
name|r
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|avEnrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|overlaps
label|:
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|enrl
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|ss
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|ss
operator|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|overlapingSections
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add
argument_list|(
operator|(
name|Section
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
break|break
name|overlaps
break|;
block|}
block|}
block|}
for|for
control|(
name|Enrollment
name|q
range|:
name|overlap
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|ca
operator|.
name|addOverlap
argument_list|(
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|o
init|=
name|q
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|String
name|ov
init|=
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ov
operator|+=
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ov
operator|+=
literal|","
expr_stmt|;
block|}
name|ca
operator|.
name|addOverlap
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
block|}
name|nrUnassignedCourses
operator|++
expr_stmt|;
name|int
name|alt
init|=
name|nrUnassignedCourses
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
operator|--
name|alt
operator|==
literal|0
condition|)
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setInstead
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|avEnrls
operator|.
name|isEmpty
argument_list|()
condition|)
name|ca
operator|.
name|setNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|isAssigned
argument_list|()
condition|)
name|nrAssignedAlt
operator|++
expr_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|EnrollmentSectionComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasAlt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|i
init|=
operator|(
operator|(
name|Config
operator|)
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|sections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|e
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHasAlternatives
argument_list|(
name|hasAlt
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|x
init|=
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
name|x
operator|.
name|isCourseRequest
argument_list|()
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|x
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|section
operator|||
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|distance
argument_list|(
name|s
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|k
init|=
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|overlap
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|note
operator|=
name|MSG
operator|.
name|noteAllowedOverlapFirst
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|else if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapMiddle
argument_list|(
name|n
argument_list|)
expr_stmt|;
else|else
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapLast
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|addNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSaved
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|consent
init|=
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsent
argument_list|()
decl_stmt|;
if|if
condition|(
name|consent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|approval
init|=
name|r
operator|.
name|getAssignment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setParentSection
argument_list|(
name|MSG
operator|.
name|consentApproved
argument_list|(
name|df
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|approval
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|a
operator|.
name|setParentSection
argument_list|(
name|MSG
operator|.
name|consentWaiting
argument_list|(
name|consent
operator|.
name|toLowerCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|setExpected
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|overlaps
label|:
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|Enrollment
name|x
init|=
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isOverlapping
argument_list|(
name|a
argument_list|)
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|OnlineSectioningHelper
operator|.
name|toString
argument_list|(
operator|(
name|FreeTimeRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|a
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break
name|overlaps
break|;
block|}
block|}
block|}
if|if
condition|(
name|ca
operator|.
name|getOverlaps
argument_list|()
operator|==
literal|null
condition|)
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assigned
condition|)
return|return
literal|null
return|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|Student
name|student
init|=
name|getStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|Request
argument_list|>
name|requests
init|=
operator|new
name|TreeSet
argument_list|<
name|Request
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Request
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Request
name|d1
parameter_list|,
name|Request
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|d1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Long
argument_list|(
name|d1
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|requests
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestInterface
operator|.
name|Request
name|lastRequest
init|=
literal|null
decl_stmt|;
name|int
name|lastRequestPriority
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Request
name|cd
range|:
name|requests
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ftr
init|=
operator|(
name|FreeTimeRequest
operator|)
name|cd
decl_stmt|;
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStart
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|day
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|ftr
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ft
operator|.
name|addDay
argument_list|(
name|day
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
operator|&&
name|lastRequestPriority
operator|==
name|cd
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|r
operator|=
name|lastRequest
expr_stmt|;
name|lastRequest
operator|.
name|addRequestedFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|lastRequest
operator|.
name|setRequestedCourse
argument_list|(
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|()
operator|+
literal|", "
operator|+
name|ft
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|r
operator|.
name|addRequestedFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRequestedCourse
argument_list|(
name|ft
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cd
operator|instanceof
name|CourseRequest
condition|)
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|cd
operator|)
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseInfo
name|c
init|=
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
switch|switch
condition|(
name|order
condition|)
block|{
case|case
literal|0
case|:
name|r
operator|.
name|setRequestedCourse
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|r
operator|.
name|setFirstAlternative
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|r
operator|.
name|setSecondAlternative
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|order
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|listEnrollments
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|enrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|Offering
name|offering
init|=
operator|(
name|offeringId
operator|>=
literal|0
condition|?
name|getOffering
argument_list|(
name|offeringId
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|Section
name|clazz
init|=
operator|(
name|offeringId
operator|<
literal|0
condition|?
name|getSection
argument_list|(
operator|-
name|offeringId
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicAreaCode
name|ac
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|ac
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicAreaCode
name|ac
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addMajor
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicAreaCode
name|ac
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getMinors
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
decl_stmt|;
name|e
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|CourseAssignment
name|c
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourse
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
name|e
operator|.
name|setAlternative
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|e
operator|.
name|setAlternative
argument_list|(
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setRequestedDate
argument_list|(
operator|new
name|Date
argument_list|(
name|request
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Reservation
name|r
init|=
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getReservation
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|GroupReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationIndividual
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationCurriculum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setEnrolledDate
argument_list|(
operator|new
name|Date
argument_list|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|approval
init|=
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getApproval
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|e
operator|.
name|setApprovedDate
argument_list|(
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|approval
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|setApprovedBy
argument_list|(
name|approval
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Section
name|section
range|:
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|i
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|x
init|=
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
name|x
operator|.
name|isCourseRequest
argument_list|()
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|x
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|section
operator|||
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|distance
argument_list|(
name|s
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|k
init|=
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|overlap
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|note
operator|=
name|MSG
operator|.
name|noteAllowedOverlapFirst
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|else if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapMiddle
argument_list|(
name|n
argument_list|)
expr_stmt|;
else|else
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapLast
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|addNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSaved
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|clazz
operator|.
name|getEnrollments
argument_list|()
control|)
block|{
name|Course
name|course
init|=
name|enrollment
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|CourseRequest
name|request
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|canAssign
argument_list|(
name|request
argument_list|)
condition|)
continue|continue;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicAreaCode
name|ac
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getAcademicAreaClasiffications
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|ac
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicAreaCode
name|ac
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addMajor
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicAreaCode
name|ac
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getMinors
argument_list|()
control|)
block|{
name|st
operator|.
name|addGroup
argument_list|(
name|ac
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
decl_stmt|;
name|e
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|CourseAssignment
name|c
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourse
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
name|e
operator|.
name|setAlternative
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|e
operator|.
name|setAlternative
argument_list|(
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setRequestedDate
argument_list|(
operator|new
name|Date
argument_list|(
name|request
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Reservation
name|r
init|=
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getReservation
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|GroupReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationIndividual
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|e
operator|.
name|setReservation
argument_list|(
name|MSG
operator|.
name|reservationCurriculum
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
operator|!=
literal|null
condition|)
name|e
operator|.
name|setEnrolledDate
argument_list|(
operator|new
name|Date
argument_list|(
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|request
operator|.
name|getAssignment
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|i
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|String
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|q
range|:
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|x
init|=
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
name|x
operator|.
name|isCourseRequest
argument_list|()
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|x
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|section
operator|||
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|distance
argument_list|(
name|s
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|k
init|=
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|MSG
operator|.
name|clazz
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getName
argument_list|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|overlap
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|note
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|j
init|=
name|overlap
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|n
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|note
operator|=
name|MSG
operator|.
name|noteAllowedOverlapFirst
argument_list|(
name|n
argument_list|)
expr_stmt|;
if|else if
condition|(
name|j
operator|.
name|hasNext
argument_list|()
condition|)
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapMiddle
argument_list|(
name|n
argument_list|)
expr_stmt|;
else|else
name|note
operator|+=
name|MSG
operator|.
name|noteAllowedOverlapLast
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|addNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSaved
argument_list|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|enrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|enrollments
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|CourseInfo
argument_list|>
name|findCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|CourseInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseInfo
argument_list|>
argument_list|(
name|limit
operator|==
literal|null
condition|?
literal|100
else|:
name|limit
argument_list|)
decl_stmt|;
name|String
name|queryInLowerCase
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering x where x.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|CourseInfo
name|c
init|=
operator|new
name|CourseInfo
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|matchCourseName
argument_list|(
name|queryInLowerCase
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
return|return
name|ret
return|;
block|}
if|if
condition|(
name|queryInLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|CourseInfo
name|c
init|=
operator|new
name|CourseInfo
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|matchTitle
argument_list|(
name|queryInLowerCase
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
return|return
name|ret
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|CourseInfo
argument_list|>
name|findCourses
parameter_list|(
name|CourseInfoMatcher
name|matcher
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|CourseInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering x where x.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|CourseInfo
name|c
init|=
operator|new
name|CourseInfo
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
name|c
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Section
argument_list|>
name|getSections
parameter_list|(
name|CourseInfo
name|courseInfo
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|getCourse
argument_list|(
name|courseInfo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
name|sections
return|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|cfg
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|cfg
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sections
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Student
argument_list|>
name|findStudents
parameter_list|(
name|StudentMatcher
name|matcher
parameter_list|)
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getStudents
argument_list|()
control|)
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
operator|&&
name|matcher
operator|.
name|match
argument_list|(
name|student
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CourseInfo
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|courseName
argument_list|)
condition|)
return|return
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Student
name|getStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|Student
name|student
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getStudents
argument_list|()
control|)
if|if
condition|(
operator|!
name|student
operator|.
name|isDummy
argument_list|()
operator|&&
name|student
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
return|return
name|student
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Section
name|getSection
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getId
argument_list|()
operator|==
name|classId
condition|)
return|return
name|section
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Course
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getOfferings
argument_list|()
control|)
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getId
argument_list|()
operator|==
name|courseId
condition|)
return|return
name|course
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Offering
name|getOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
for|for
control|(
name|Offering
name|offering
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getOfferings
argument_list|()
control|)
if|if
condition|(
name|offering
operator|.
name|getId
argument_list|()
operator|==
name|offeringId
condition|)
return|return
name|offering
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|URL
name|getSectionUrl
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|Section
name|section
parameter_list|)
block|{
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|SectionUrlProvider
name|provider
init|=
operator|(
name|SectionUrlProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|provider
operator|.
name|getSectionUrl
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|courseId
argument_list|,
name|section
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|checkCourses
parameter_list|(
name|CourseRequestInterface
name|req
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notFound
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|req
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cr
operator|.
name|hasRequestedFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasFirstAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasSecondAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|req
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasFirstAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasSecondAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|notFound
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|E
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|Entity
name|user
parameter_list|)
throws|throws
name|SectioningException
block|{
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
name|OnlineSectioningHelper
name|h
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|user
argument_list|)
decl_stmt|;
try|try
block|{
name|h
operator|.
name|addMessageHandler
argument_list|(
operator|new
name|OnlineSectioningHelper
operator|.
name|DefaultMessageLogger
argument_list|(
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OnlineSectioningServer
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|action
operator|.
name|name
argument_list|()
operator|+
literal|"["
operator|+
name|getAcademicSession
argument_list|()
operator|.
name|toCompactString
argument_list|()
operator|+
literal|"]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|h
operator|.
name|addAction
argument_list|(
name|action
argument_list|,
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
name|E
name|ret
init|=
name|action
operator|.
name|execute
argument_list|(
name|this
argument_list|,
name|h
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|NULL
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ret
operator|instanceof
name|Boolean
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
operator|(
name|Boolean
operator|)
name|ret
condition|?
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
else|:
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|SUCCESS
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|h
operator|.
name|error
argument_list|(
literal|"Execution failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|instanceof
name|SectioningException
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|h
operator|.
name|getAction
argument_list|()
operator|!=
literal|null
condition|)
name|h
operator|.
name|getAction
argument_list|()
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Executed: "
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|+
literal|" ("
operator|+
name|h
operator|.
name|getLog
argument_list|()
operator|.
name|toByteArray
argument_list|()
operator|.
name|length
operator|+
literal|" bytes)"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|E
parameter_list|>
name|void
name|execute
parameter_list|(
name|OnlineSectioningAction
argument_list|<
name|E
argument_list|>
name|action
parameter_list|,
name|Entity
name|user
parameter_list|,
name|ServerCallback
argument_list|<
name|E
argument_list|>
name|callback
parameter_list|)
throws|throws
name|SectioningException
block|{
try|try
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|execute
argument_list|(
name|action
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Offering
name|offering
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|Offering
name|offering
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|CourseInfo
name|info
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearAllStudents
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|addLinkedSections
parameter_list|(
name|LinkedSections
name|link
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|LinkedSections
argument_list|>
name|getLinkedSections
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|Offering
name|offering
init|=
name|getOffering
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LinkedSections
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|LinkedSections
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|LinkedSections
name|link
range|:
operator|(
operator|(
name|StudentSectioningModel
operator|)
name|currentSolution
argument_list|()
operator|.
name|getModel
argument_list|()
operator|)
operator|.
name|getLinkedSections
argument_list|()
control|)
if|if
condition|(
name|link
operator|.
name|getOfferings
argument_list|()
operator|.
name|contains
argument_list|(
name|offering
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeLinkedSections
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyStudentChanged
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|List
argument_list|<
name|Request
argument_list|>
name|oldRequests
parameter_list|,
name|List
argument_list|<
name|Request
argument_list|>
name|newRequests
parameter_list|,
name|Entity
name|user
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyStudentChanged
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Request
name|request
parameter_list|,
name|Enrollment
name|oldEnrollment
parameter_list|,
name|Entity
name|user
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|readLock
parameter_list|()
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|writeLock
parameter_list|()
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockAll
parameter_list|()
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockStudent
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|offeringIds
parameter_list|,
name|boolean
name|excludeLockedOfferings
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|boolean
name|excludeLockedOffering
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockClass
parameter_list|(
name|Long
name|classId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Lock
name|lockRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
return|return
operator|new
name|NoLock
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOfferingLocked
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|lockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlockOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Long
argument_list|>
name|getLockedOfferings
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|releaseAllOfferingLocks
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|distance
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
operator|||
name|s2
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|TimeLocation
name|t1
init|=
name|s1
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TimeLocation
name|t2
init|=
name|s2
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
block|{
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|getDistanceMetric
argument_list|()
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|persistExpectedSpaces
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getOfferingsToPersistExpectedSpaces
parameter_list|(
name|long
name|minimalAge
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkDeadline
parameter_list|(
name|Section
name|section
parameter_list|,
name|Deadline
name|type
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unload
parameter_list|()
block|{
block|}
specifier|public
specifier|static
class|class
name|NoLock
implements|implements
name|Lock
block|{
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
block|}
block|}
block|}
end_class

end_unit

