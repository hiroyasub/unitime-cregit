begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningSaver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|WaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningDatabaseSaver
extends|extends
name|StudentSectioningSaver
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StudentSectioningDatabaseSaver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iIncludeCourseDemands
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iInitiative
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTerm
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iYear
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|iStudents
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
name|iCourses
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
name|iClasses
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
name|iRequests
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iTimeStamp
init|=
literal|null
decl_stmt|;
specifier|private
name|StudentSectioningStatus
name|iStatusToSet
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iResetStatus
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iUpdateCourseRequests
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iOwnerId
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iInsert
init|=
literal|0
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iProjections
init|=
literal|false
decl_stmt|;
specifier|public
name|StudentSectioningDatabaseSaver
parameter_list|(
name|Solver
name|solver
parameter_list|)
block|{
name|super
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|iIncludeCourseDemands
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeCourseDemands"
argument_list|,
name|iIncludeCourseDemands
argument_list|)
expr_stmt|;
name|iInitiative
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Initiative"
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Year"
argument_list|)
expr_stmt|;
name|iTerm
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Term"
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|iProjections
operator|=
literal|"Projection"
operator|.
name|equals
argument_list|(
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
argument_list|)
expr_stmt|;
name|iUpdateCourseRequests
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Interactive.UpdateCourseRequests"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iOwnerId
operator|=
name|solver
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|()
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Saving solution ..."
argument_list|)
expr_stmt|;
name|iTimeStamp
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|iInitiative
argument_list|,
name|iYear
argument_list|,
name|iTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|" not found!"
argument_list|)
throw|;
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|save
argument_list|(
name|session
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|StudentSectioningQueue
operator|.
name|sessionStatusChanged
argument_list|(
name|hibSession
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to save student schedule, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|tx
operator|!=
literal|null
condition|)
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flushIfNeeded
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iInsert
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|iInsert
operator|%
literal|1000
operator|)
operator|==
literal|0
condition|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInsert
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|saveStudent
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Student
name|student
parameter_list|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
name|iStudents
operator|.
name|get
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|iStatusToSet
operator|!=
literal|null
condition|)
name|s
operator|.
name|setSectioningStatus
argument_list|(
name|iStatusToSet
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iResetStatus
condition|)
name|s
operator|.
name|setSectioningStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|WaitList
argument_list|>
name|i
init|=
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|WaitList
name|wl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|wl
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iUpdateCourseRequests
operator|&&
name|BatchEnrollStudent
operator|.
name|sRequestsChangedStatus
operator|.
name|equals
argument_list|(
name|student
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|CourseDemand
argument_list|>
name|remaining
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
name|s
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|cd
operator|!=
literal|null
condition|)
block|{
name|cd
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
name|request
operator|instanceof
name|CourseRequest
operator|&&
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setChangedBy
argument_list|(
name|iOwnerId
argument_list|)
expr_stmt|;
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setAlternative
argument_list|(
name|request
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|request
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|request
decl_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|FreeTime
name|free
init|=
operator|new
name|FreeTime
argument_list|()
decl_stmt|;
name|cd
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|free
operator|.
name|setCategory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
literal|"Free "
operator|+
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayHeader
argument_list|()
operator|+
literal|" "
operator|+
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|(
literal|true
argument_list|)
operator|+
literal|" - "
operator|+
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
name|cr
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|(
name|cr
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|cr
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseOffering
name|co
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
continue|continue;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|crq
init|=
operator|new
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|()
decl_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|crq
argument_list|)
expr_stmt|;
name|crq
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|crq
operator|.
name|setAllowOverlap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|crq
operator|.
name|setCredit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|crq
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
name|crq
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
name|Long
name|demandId
init|=
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|cd
argument_list|)
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|iRequests
operator|.
name|put
argument_list|(
name|demandId
operator|+
literal|":"
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseDemand
name|cd
range|:
name|remaining
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|iRequests
operator|.
name|remove
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|remove
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|request
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|Enrollment
name|enrollment
init|=
operator|(
name|Enrollment
operator|)
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|courseRequest
init|=
operator|(
name|CourseRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|courseRequest
operator|.
name|isWaitlist
argument_list|()
operator|&&
name|student
operator|.
name|canAssign
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|courseRequest
argument_list|)
condition|)
block|{
name|CourseOffering
name|co
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Course offering "
operator|+
name|courseRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|WaitList
name|wl
init|=
operator|new
name|WaitList
argument_list|()
decl_stmt|;
name|wl
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|wl
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|wl
operator|.
name|setTimestamp
argument_list|(
name|iTimeStamp
argument_list|)
expr_stmt|;
name|wl
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|add
argument_list|(
name|wl
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|wl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
init|=
name|iRequests
operator|.
name|get
argument_list|(
name|request
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|enrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Class "
operator|+
name|section
operator|.
name|getId
argument_list|()
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentClassEnrollment
name|sce
init|=
operator|new
name|StudentClassEnrollment
argument_list|()
decl_stmt|;
name|sce
operator|.
name|setChangedBy
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|BATCH
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sce
operator|.
name|setStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sce
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|CourseOffering
name|co
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
name|co
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
expr_stmt|;
name|sce
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sce
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|sce
operator|.
name|setCourseOffering
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sce
operator|.
name|setTimestamp
argument_list|(
name|iTimeStamp
argument_list|)
expr_stmt|;
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|sce
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|sce
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|!=
literal|null
condition|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|save
parameter_list|(
name|Session
name|session
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iClasses
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Loading classes..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ c where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iClasses
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|iIncludeCourseDemands
operator|&&
operator|!
name|iProjections
condition|)
block|{
name|iCourses
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Loading courses..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from CourseOffering c where c.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iCourses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|incProgress
argument_list|()
expr_stmt|;
name|iStudents
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Loading students..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch s.waitlists as w "
operator|+
literal|"where s.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iStudents
operator|.
name|put
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|incProgress
argument_list|()
expr_stmt|;
name|iRequests
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Loading course demands..."
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|demand
range|:
operator|(
name|List
argument_list|<
name|CourseDemand
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from CourseDemand c "
operator|+
literal|"left join fetch c.courseRequests r "
operator|+
literal|"left join fetch r.courseOffering as co "
operator|+
literal|"left join fetch co.instructionalOffering as io "
operator|+
literal|"where c.student.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|request
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|iRequests
operator|.
name|put
argument_list|(
name|demand
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|":"
operator|+
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
literal|"Saving student enrollments..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|statusToSet
init|=
name|getSolver
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Save.StudentSectioningStatusToSet"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"Default"
operator|.
name|equalsIgnoreCase
argument_list|(
name|statusToSet
argument_list|)
condition|)
block|{
name|iStatusToSet
operator|=
literal|null
expr_stmt|;
name|iResetStatus
operator|=
literal|true
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Setting student sectioning status to "
operator|+
operator|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|"System Default (All Enabled)"
else|:
literal|"Session Default ("
operator|+
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|statusToSet
operator|!=
literal|null
operator|&&
operator|!
name|statusToSet
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|statusToSet
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
condition|)
block|{
name|iStatusToSet
operator|=
name|StudentSectioningStatus
operator|.
name|getStatus
argument_list|(
name|statusToSet
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStatusToSet
operator|==
literal|null
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student sectioning status "
operator|+
name|statusToSet
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|info
argument_list|(
literal|"Setting student sectioning status to "
operator|+
name|iStatusToSet
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iStatusToSet
operator|==
literal|null
operator|&&
operator|!
name|iResetStatus
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Keeping student sectioning status unchanged."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|saveStudent
argument_list|(
name|hibSession
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|flush
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getNrLastLikeRequests
argument_list|(
literal|false
argument_list|)
operator|>
literal|0
operator|||
name|iProjections
condition|)
block|{
name|setPhase
argument_list|(
literal|"Computing expected/held space for online sectioning..."
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|computeOnlineSectioningInfos
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SectioningInfo
argument_list|>
name|infoTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SectioningInfo
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SectioningInfo
argument_list|>
name|infos
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SectioningInfo
name|info
range|:
name|infos
control|)
name|infoTable
operator|.
name|put
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
literal|"Saving expected/held space for online sectioning..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|e
init|=
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Offering
name|offering
init|=
operator|(
name|Offering
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|f
init|=
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
operator|(
name|Config
operator|)
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|g
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
operator|(
name|Subpart
operator|)
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|h
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|h
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|h
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|SectioningInfo
name|info
init|=
name|infoTable
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|SectioningInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|info
operator|.
name|setNbrExpectedStudents
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNbrHoldingStudents
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|flushIfNeeded
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Update class enrollments
comment|/*         if (!iProjections) {             setPhase("Updating enrollment counts...", getModel().getOfferings().size());             for (Offering offering: getModel().getOfferings()) {                 incProgress();                 for (Config config: offering.getConfigs()) {                     for (Subpart subpart: config.getSubparts()) {                         for (Section section: subpart.getSections()) {                             Class_ clazz = iClasses.get(section.getId());                             if (clazz==null) continue;                             int enrl = 0;                             for (Enrollment en: section.getEnrollments())                             	if (!en.getStudent().isDummy()) enrl++;                             clazz.setEnrollment(enrl);                             hibSession.saveOrUpdate(clazz);                             flushIfNeeded(hibSession);                         }                     }                 }                 for (Course course: offering.getCourses()) {                 	CourseOffering co = iCourses.get(course.getId());                 	if (co == null) continue;                     int enrl = 0;                     for (Enrollment en: course.getEnrollments())                     	if (!en.getStudent().isDummy()) enrl++;                     co.setEnrollment(enrl);                     hibSession.saveOrUpdate(co);                     flushIfNeeded(hibSession);                 }             }         }         */
name|flush
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
literal|"Done"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|checkTermination
parameter_list|()
block|{
if|if
condition|(
name|getTerminationCondition
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getTerminationCondition
argument_list|()
operator|.
name|canContinue
argument_list|(
name|getSolution
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The save was interrupted."
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setPhase
parameter_list|(
name|String
name|phase
parameter_list|,
name|long
name|progressMax
parameter_list|)
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|,
name|progressMax
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|incProgress
parameter_list|()
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

