begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|IgnoreStudentConflictsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|FixedAssignments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|LinkedSections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AcademicAreaCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Instructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|RequestGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Unavailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
operator|.
name|RequestPriority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|DummyReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|ReservationOverride
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|Days
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|LocalDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|Query
operator|.
name|TermMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|OverrideType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumOverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GroupOverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualOverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LearningCommunityReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OverrideReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
operator|.
name|AllowDisabledSection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentInstrMthPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingClassRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingResponsibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|WaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLogger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseRequestsValidationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
operator|.
name|CriticalCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindEnrollmentInfoAction
operator|.
name|DbStudentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|TimetableDatabaseLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|LastLikeStudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|ProjectedStudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|AreaClasfMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|WeightedStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningDatabaseLoader
extends|extends
name|StudentSectioningLoader
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StudentSectioningDatabaseLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iIncludeCourseDemands
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iIncludeUseCommittedAssignments
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMakeupAssignmentsFromRequiredPrefs
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iLoadStudentInfo
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iInitiative
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTerm
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iYear
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iOwnerId
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iMakeupAssignmentId
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|iFreeTimePattern
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iDatePatternFirstDate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iTweakLimits
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iAllowToKeepCurrentEnrollment
init|=
literal|false
decl_stmt|;
specifier|private
name|long
name|iMakeupReservationId
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iLoadSectioningInfos
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iProjections
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iFixWeights
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iCheckForNoBatchStatus
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iCheckEnabledForScheduling
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iLoadRequestGroups
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iRequestGroupRegExp
init|=
literal|null
decl_stmt|;
specifier|private
name|Query
name|iStudentQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iNoUnlimitedGroupReservations
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iLinkedClassesMustBeUsed
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iAllowDefaultCourseAlternatives
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iIncludeUnavailabilities
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iShortDistanceAccomodationReference
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCheckOverrideStatus
init|=
literal|false
decl_stmt|,
name|iValidateOverrides
init|=
literal|false
decl_stmt|;
specifier|private
name|CourseRequestsValidationProvider
name|iValidationProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|iUpdatedStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|NameFormat
name|iStudentNameFormat
init|=
literal|null
decl_stmt|,
name|iInstructorNameFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|StudentSolver
name|iValidator
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCheckRequestStatusSkipCancelled
init|=
literal|false
decl_stmt|,
name|iCheckRequestStatusSkipPending
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iNrValidationThreads
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iCanContinue
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iCheckCriticalCourses
init|=
literal|false
decl_stmt|;
specifier|private
name|CriticalCoursesProvider
name|iCriticalCoursesProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iNrCheckCriticalThreads
init|=
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iMoveCriticalCoursesUp
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMoveFreeTimesDown
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iCorrectConfigLimit
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iUseSnapShotLimits
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iPriorityStudentGroupReference
init|=
literal|null
decl_stmt|;
specifier|private
name|Query
name|iPriorityStudentsQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|Query
name|iProjectedStudentQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|StudentCourseDemands
name|iStudentCourseDemands
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iUseAmPm
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iDatePatternFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iShowClassSuffix
init|=
literal|false
decl_stmt|,
name|iShowConfigName
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMaxCreditChecking
init|=
literal|false
decl_stmt|;
specifier|private
name|float
name|iMaxDefaultCredit
init|=
operator|-
literal|1f
decl_stmt|;
specifier|private
name|float
name|iMinDefaultCredit
init|=
operator|-
literal|1f
decl_stmt|;
specifier|private
name|Date
name|iClassesFixedDate
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iClassesFixedDateIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iDayOfWeekOffset
init|=
literal|0
decl_stmt|;
specifier|private
name|Query
name|iOnlineOnlyStudentQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iOnlineOnlyCourseNameRegExp
decl_stmt|;
specifier|private
name|String
name|iOnlineOnlyInstructionalModeRegExp
decl_stmt|;
specifier|private
name|String
name|iResidentialInstructionalModeRegExp
decl_stmt|;
specifier|private
name|String
name|iMPPCoursesRegExp
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iOnlineOnlyExclusiveCourses
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|IgnoreNotAssigned
block|{
name|all
block|,
name|other
block|,
name|none
block|}
specifier|private
name|IgnoreNotAssigned
name|iIgnoreNotAssigned
init|=
name|IgnoreNotAssigned
operator|.
name|other
decl_stmt|;
specifier|private
name|boolean
name|iFixAssignedEnrollments
init|=
literal|false
decl_stmt|;
specifier|public
name|StudentSectioningDatabaseLoader
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
name|assignment
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|iIncludeCourseDemands
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeCourseDemands"
argument_list|,
name|iIncludeCourseDemands
argument_list|)
expr_stmt|;
name|iIncludeUseCommittedAssignments
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeUseCommittedAssignments"
argument_list|,
name|iIncludeUseCommittedAssignments
argument_list|)
expr_stmt|;
name|iLoadStudentInfo
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.LoadStudentInfo"
argument_list|,
name|iLoadStudentInfo
argument_list|)
expr_stmt|;
name|iMakeupAssignmentsFromRequiredPrefs
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.MakeupAssignmentsFromRequiredPrefs"
argument_list|,
name|iMakeupAssignmentsFromRequiredPrefs
argument_list|)
expr_stmt|;
name|iInitiative
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Initiative"
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Year"
argument_list|)
expr_stmt|;
name|iTerm
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Term"
argument_list|)
expr_stmt|;
name|iOwnerId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iTweakLimits
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.TweakLimits"
argument_list|,
name|iTweakLimits
argument_list|)
expr_stmt|;
name|iAllowToKeepCurrentEnrollment
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.AllowToKeepCurrentEnrollment"
argument_list|,
name|iAllowToKeepCurrentEnrollment
argument_list|)
expr_stmt|;
name|iLoadSectioningInfos
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.LoadSectioningInfos"
argument_list|,
name|iLoadSectioningInfos
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
name|iFixWeights
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.FixWeights"
argument_list|,
name|iFixWeights
argument_list|)
expr_stmt|;
name|iCheckForNoBatchStatus
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CheckForNoBatchStatus"
argument_list|,
name|iCheckForNoBatchStatus
argument_list|)
expr_stmt|;
name|iCheckEnabledForScheduling
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CheckEnabledForScheduling"
argument_list|,
name|iCheckEnabledForScheduling
argument_list|)
expr_stmt|;
name|iLoadRequestGroups
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.RequestGroups"
argument_list|,
name|iLoadRequestGroups
argument_list|)
expr_stmt|;
name|iRequestGroupRegExp
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.RequestGroupRegExp"
argument_list|)
expr_stmt|;
name|iDatePatternFormat
operator|=
name|ApplicationProperty
operator|.
name|DatePatternFormatUseDates
operator|.
name|value
argument_list|()
expr_stmt|;
name|iNoUnlimitedGroupReservations
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.NoUnlimitedGroupReservations"
argument_list|,
name|iNoUnlimitedGroupReservations
argument_list|)
expr_stmt|;
name|iUseSnapShotLimits
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.UseSnapShotLimits"
argument_list|,
name|iUseSnapShotLimits
argument_list|)
expr_stmt|;
name|iCorrectConfigLimit
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CorrectConfigLimit"
argument_list|,
name|iCorrectConfigLimit
argument_list|)
expr_stmt|;
name|iLinkedClassesMustBeUsed
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"LinkedClasses.mustBeUsed"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iAllowDefaultCourseAlternatives
operator|=
name|ApplicationProperty
operator|.
name|StudentSchedulingAlternativeCourse
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iIncludeUnavailabilities
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeUnavailabilities"
argument_list|,
name|iIncludeUnavailabilities
argument_list|)
expr_stmt|;
name|iShortDistanceAccomodationReference
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Distances.ShortDistanceAccommodationReference"
argument_list|,
literal|"SD"
argument_list|)
expr_stmt|;
name|iPriorityStudentGroupReference
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.PriorityStudentGroupReference"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|priorityStudentFilter
init|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.PriorityStudentFilter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|priorityStudentFilter
operator|!=
literal|null
operator|&&
operator|!
name|priorityStudentFilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iPriorityStudentsQuery
operator|=
operator|new
name|Query
argument_list|(
name|priorityStudentFilter
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Priority student filter: "
operator|+
name|iPriorityStudentsQuery
argument_list|)
expr_stmt|;
block|}
name|iCheckOverrideStatus
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CheckOverrideStatus"
argument_list|,
name|iCheckOverrideStatus
argument_list|)
expr_stmt|;
name|iValidateOverrides
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.ValidateOverrides"
argument_list|,
name|iValidateOverrides
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|iValidateOverrides
operator|||
name|iCheckOverrideStatus
operator|)
operator|&&
name|ApplicationProperty
operator|.
name|CustomizationCourseRequestsValidation
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iValidationProvider
operator|=
operator|(
operator|(
name|CourseRequestsValidationProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperty
operator|.
name|CustomizationCourseRequestsValidation
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Failed to create course request validation provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iNrValidationThreads
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"CourseRequestsValidation.NrThreads"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
name|iCheckCriticalCourses
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CheckCriticalCourses"
argument_list|,
name|iCheckCriticalCourses
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCheckCriticalCourses
operator|&&
name|ApplicationProperty
operator|.
name|CustomizationCriticalCourses
operator|.
name|value
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iCriticalCoursesProvider
operator|=
operator|(
operator|(
name|CriticalCoursesProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperty
operator|.
name|CustomizationCriticalCourses
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|newInstance
argument_list|()
operator|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Failed to create critical courses provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iNrCheckCriticalThreads
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"CheckCriticalCourses.NrThreads"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|studentCourseDemandsClassName
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSct.ProjectedCourseDemadsClass"
argument_list|,
name|LastLikeStudentCourseDemands
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentCourseDemandsClassName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|studentCourseDemandsClassName
operator|=
name|studentCourseDemandsClassName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentCourseDemandsClassName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|studentCourseDemandsClassName
operator|=
literal|"org.unitime.timetable.solver.curricula."
operator|+
name|studentCourseDemandsClassName
expr_stmt|;
name|Class
name|studentCourseDemandsClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|studentCourseDemandsClassName
argument_list|)
decl_stmt|;
name|iStudentCourseDemands
operator|=
operator|(
name|StudentCourseDemands
operator|)
name|studentCourseDemandsClass
operator|.
name|getConstructor
argument_list|(
name|DataProperties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected demands: "
operator|+
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSct.ProjectedCourseDemadsClass"
argument_list|,
name|LastLikeStudentCourseDemands
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeLastLikeStudents"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|iStudentCourseDemands
operator|=
operator|new
name|ProjectedStudentCourseDemands
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected demands: Projected Student Course Demands"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected demands: None"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iStudentCourseDemands
operator|!=
literal|null
operator|&&
name|iStudentCourseDemands
operator|instanceof
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
condition|)
block|{
operator|(
operator|(
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
operator|)
name|iStudentCourseDemands
operator|)
operator|.
name|setStudentIdGenerator
argument_list|(
operator|new
name|IdGenerator
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|query
init|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.StudentQuery"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iStudentQuery
operator|=
operator|new
name|Query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Student filter: "
operator|+
name|iStudentQuery
argument_list|)
expr_stmt|;
block|}
name|iProjections
operator|=
literal|"Projection"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
argument_list|)
expr_stmt|;
name|iUseAmPm
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
name|iUseAmPm
argument_list|)
expr_stmt|;
name|iShowClassSuffix
operator|=
name|ApplicationProperty
operator|.
name|SolverShowClassSufix
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iShowConfigName
operator|=
name|ApplicationProperty
operator|.
name|SolverShowConfiguratioName
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iStudentNameFormat
operator|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructorNameFormat
operator|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|iCheckRequestStatusSkipCancelled
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CheckRequestStatusSkipCancelled"
argument_list|,
name|iCheckRequestStatusSkipCancelled
argument_list|)
expr_stmt|;
name|iCheckRequestStatusSkipPending
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.CheckRequestStatusSkipPending"
argument_list|,
name|iCheckRequestStatusSkipPending
argument_list|)
expr_stmt|;
name|iMaxCreditChecking
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.MaxCreditChecking"
argument_list|,
name|iMaxCreditChecking
argument_list|)
expr_stmt|;
name|iMaxDefaultCredit
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyFloat
argument_list|(
literal|"Load.DefaultMaxCredit"
argument_list|,
name|iMaxDefaultCredit
argument_list|)
expr_stmt|;
name|iMinDefaultCredit
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyFloat
argument_list|(
literal|"Load.DefaultMinCredit"
argument_list|,
name|iMinDefaultCredit
argument_list|)
expr_stmt|;
name|iMoveCriticalCoursesUp
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.MoveCriticalCoursesUp"
argument_list|,
name|iMoveCriticalCoursesUp
argument_list|)
expr_stmt|;
name|iMoveFreeTimesDown
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.MoveFreeTimesDown"
argument_list|,
name|iMoveFreeTimesDown
argument_list|)
expr_stmt|;
name|String
name|onlineOnlyStudentFilter
init|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyStudentFilter"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|iOnlineOnlyInstructionalModeRegExp
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyInstructionalModeRegExp"
argument_list|)
expr_stmt|;
name|iResidentialInstructionalModeRegExp
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.ResidentialInstructionalModeRegExp"
argument_list|)
expr_stmt|;
name|iOnlineOnlyCourseNameRegExp
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.OnlineOnlyCourseNameRegExp"
argument_list|)
expr_stmt|;
name|iOnlineOnlyExclusiveCourses
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.OnlineOnlyExclusiveCourses"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|onlineOnlyStudentFilter
operator|!=
literal|null
operator|&&
operator|!
name|onlineOnlyStudentFilter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iOnlineOnlyStudentQuery
operator|=
operator|new
name|Query
argument_list|(
name|onlineOnlyStudentFilter
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Online-only student filter: "
operator|+
name|iOnlineOnlyStudentQuery
argument_list|)
expr_stmt|;
block|}
name|String
name|classesFixedDate
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.ClassesFixedDate"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|classesFixedDate
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|iClassesFixedDate
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
operator|.
name|parse
argument_list|(
name|classesFixedDate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Failed to parse classes fixed date "
operator|+
name|classesFixedDate
operator|+
literal|". The date must be in the yyyy-mm-dd format."
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|projQuery
init|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.ProjectedStudentQuery"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|projQuery
operator|!=
literal|null
operator|&&
operator|!
name|projQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProjectedStudentQuery
operator|=
operator|new
name|Query
argument_list|(
name|projQuery
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected students filter: "
operator|+
name|iProjectedStudentQuery
argument_list|)
expr_stmt|;
block|}
name|iMPPCoursesRegExp
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.MPPCoursesRegExp"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iIgnoreNotAssigned
operator|=
name|IgnoreNotAssigned
operator|.
name|valueOf
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Load.IgnoreNotAssigned"
argument_list|,
name|iIgnoreNotAssigned
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"MPP courses: "
operator|+
name|iMPPCoursesRegExp
operator|+
literal|" (ignoring "
operator|+
name|iIgnoreNotAssigned
operator|+
literal|" not assigned)"
argument_list|)
expr_stmt|;
block|}
name|iFixAssignedEnrollments
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.FixAssignedEnrollments"
argument_list|,
name|iFixAssignedEnrollments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Loading input data ..."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSessionId
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|iYear
operator|=
name|session
operator|.
name|getAcademicYear
argument_list|()
expr_stmt|;
name|iTerm
operator|=
name|session
operator|.
name|getAcademicTerm
argument_list|()
expr_stmt|;
name|iInitiative
operator|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Year"
argument_list|,
name|iYear
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Term"
argument_list|,
name|iTerm
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Initiative"
argument_list|,
name|iInitiative
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|session
operator|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|iInitiative
argument_list|,
name|iYear
argument_list|,
name|iTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|iSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iSessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|" not found!"
argument_list|)
throw|;
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iClassesFixedDate
operator|!=
literal|null
condition|)
block|{
name|Date
name|firstDay
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|session
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|iClassesFixedDateIndex
operator|=
name|Days
operator|.
name|daysBetween
argument_list|(
operator|new
name|LocalDate
argument_list|(
name|firstDay
argument_list|)
argument_list|,
operator|new
name|LocalDate
argument_list|(
name|iClassesFixedDate
argument_list|)
argument_list|)
operator|.
name|getDays
argument_list|()
expr_stmt|;
name|iDayOfWeekOffset
operator|=
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|firstDay
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Classes Fixed Date: "
operator|+
name|iClassesFixedDate
operator|+
literal|" (date pattern index: "
operator|+
name|iClassesFixedDateIndex
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|info
argument_list|(
literal|"Loading data for "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|"..."
argument_list|)
expr_stmt|;
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|!=
literal|null
condition|)
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|getModel
argument_list|()
operator|.
name|getDistanceConflict
argument_list|()
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|iSessionId
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|session
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iUpdatedStudents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|studentChanged
argument_list|(
name|hibSession
argument_list|,
literal|null
argument_list|,
name|iSessionId
argument_list|,
name|iUpdatedStudents
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to load sectioning problem, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|iValidationProvider
operator|!=
literal|null
condition|)
name|iValidationProvider
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCriticalCoursesProvider
operator|!=
literal|null
condition|)
name|iCriticalCoursesProvider
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Instructor
argument_list|>
name|getInstructors
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|Instructor
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Instructor
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|!=
literal|null
operator|&&
name|ci
operator|.
name|getResponsibility
argument_list|()
operator|.
name|hasOption
argument_list|(
name|TeachingResponsibility
operator|.
name|Option
operator|.
name|auxiliary
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|Instructor
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|iInstructorNameFormat
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|,
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|TimeLocation
name|makeupTime
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|DatePattern
name|datePattern
init|=
name|c
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|": no date pattern set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|DurationModel
name|dm
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|c
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
literal|0
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|breakTime
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|time
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|String
name|pref
init|=
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|pattern
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
literal|0.77
argument_list|)
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|c
operator|.
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|": no time preference set"
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|": no required time set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Vector
name|makeupRooms
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|Vector
name|rooms
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getEffectiveRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup room for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|": preference for "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not required"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|rp
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|RoomLocation
name|roomLocation
init|=
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
else|:
literal|null
operator|)
argument_list|,
literal|0
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rooms
operator|.
name|addElement
argument_list|(
name|roomLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Placement
name|makeupPlacement
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|TimeLocation
name|time
init|=
name|makeupTime
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
name|rooms
init|=
name|makeupRooms
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Vector
name|times
init|=
operator|new
name|Vector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|times
operator|.
name|addElement
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
argument_list|,
name|times
argument_list|,
name|rooms
argument_list|,
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Placement
argument_list|(
literal|null
argument_list|,
name|time
argument_list|,
name|rooms
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|p
operator|.
name|setAssignmentId
argument_list|(
operator|new
name|Long
argument_list|(
name|iMakeupAssignmentId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setBestAssignment
argument_list|(
name|p
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"makup placement for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|": "
operator|+
name|p
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|int
name|getCourseLimit
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iCorrectConfigLimit
condition|)
block|{
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|j
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|configLimit
init|=
name|ioc
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|iUseSnapShotLimits
condition|)
block|{
name|Integer
name|snapShotLimit
init|=
name|ioc
operator|.
name|getSnapShotLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapShotLimit
operator|!=
literal|null
operator|&&
name|snapShotLimit
operator|>
name|configLimit
condition|)
name|configLimit
operator|=
name|snapShotLimit
expr_stmt|;
block|}
name|limit
operator|+=
name|configLimit
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|limit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|9999
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|limit
return|;
block|}
name|int
name|reservedDisabledSpace
init|=
literal|0
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
name|r
range|:
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|LearningCommunityReservation
operator|&&
operator|!
operator|(
operator|(
name|LearningCommunityReservation
operator|)
name|r
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|co
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|r
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|needDisabled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|r
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
name|needDisabled
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|needDisabled
condition|)
continue|continue;
block|}
name|StudentGroup
name|gr
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|r
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|gr
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|gr
operator|.
name|getType
argument_list|()
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|AllowDisabledSection
operator|.
name|WithGroupReservation
condition|)
block|{
name|int
name|reservationLimit
init|=
operator|(
name|r
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|iNoUnlimitedGroupReservations
condition|?
name|gr
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1
else|:
name|r
operator|.
name|getLimit
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|reservationLimit
operator|>=
literal|0
condition|)
block|{
name|reservedDisabledSpace
operator|+=
name|reservationLimit
expr_stmt|;
block|}
else|else
block|{
name|reservedDisabledSpace
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|int
name|limit
init|=
literal|0
decl_stmt|,
name|limitDisabled
init|=
literal|0
decl_stmt|;
name|boolean
name|updated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|j
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|configLimit
init|=
name|ioc
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|iUseSnapShotLimits
condition|)
block|{
name|Integer
name|snapShotLimit
init|=
name|ioc
operator|.
name|getSnapShotLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapShotLimit
operator|!=
literal|null
operator|&&
name|snapShotLimit
operator|>
name|configLimit
condition|)
block|{
name|configLimit
operator|=
name|snapShotLimit
expr_stmt|;
block|}
block|}
name|int
name|configEnabled
init|=
name|configLimit
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|int
name|subpartEnabled
init|=
literal|0
decl_stmt|;
name|int
name|subpartDisabled
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|int
name|classLimit
init|=
name|getSectionLimit
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|classLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|c
operator|.
name|getStudentEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|iCheckForNoBatchStatus
operator|&&
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
operator|)
operator|||
operator|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|classLimit
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
name|subpartEnabled
operator|+=
name|classLimit
expr_stmt|;
else|else
block|{
name|subpartDisabled
operator|+=
name|classLimit
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|c
operator|.
name|getStudentEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|iCheckForNoBatchStatus
operator|&&
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
operator|)
operator|||
operator|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|subpartEnabled
operator|++
expr_stmt|;
name|subpartDisabled
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|subpartLimit
init|=
name|subpartEnabled
operator|+
name|subpartDisabled
decl_stmt|;
if|if
condition|(
name|subpartLimit
operator|<
name|configLimit
condition|)
block|{
name|configLimit
operator|=
name|subpartLimit
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|subpartEnabled
operator|<
name|configEnabled
condition|)
block|{
name|configEnabled
operator|=
name|subpartEnabled
expr_stmt|;
name|updated
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|limit
operator|+=
name|configEnabled
expr_stmt|;
name|limitDisabled
operator|+=
operator|(
name|configLimit
operator|-
name|configEnabled
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|limitDisabled
operator|>
literal|0
condition|)
if|if
condition|(
name|reservedDisabledSpace
operator|<
literal|0
condition|)
name|limit
operator|+=
name|limitDisabled
expr_stmt|;
else|else
name|limit
operator|+=
name|Math
operator|.
name|min
argument_list|(
name|limitDisabled
argument_list|,
name|reservedDisabledSpace
argument_list|)
expr_stmt|;
if|if
condition|(
name|updated
operator|&&
name|co
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Course limit of "
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" decreased to "
operator|+
name|limit
operator|+
literal|" (disabled: "
operator|+
name|limitDisabled
operator|+
literal|", reserved: "
operator|+
name|reservedDisabledSpace
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|limit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|9999
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|limit
return|;
block|}
specifier|private
name|int
name|getConfigLimit
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|)
block|{
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|configLimit
init|=
name|ioc
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|configLimit
operator|>=
literal|9999
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|iUseSnapShotLimits
condition|)
block|{
name|Integer
name|snapShotLimit
init|=
name|ioc
operator|.
name|getSnapShotLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapShotLimit
operator|!=
literal|null
operator|&&
name|snapShotLimit
operator|>
name|configLimit
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Using snapshot limit for "
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"] (limit: "
operator|+
name|configLimit
operator|+
literal|", snapshot: "
operator|+
name|snapShotLimit
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|configLimit
operator|=
name|snapShotLimit
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iCorrectConfigLimit
condition|)
return|return
name|configLimit
return|;
name|int
name|reservedDisabledSpace
init|=
literal|0
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
name|r
range|:
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getConfigurations
argument_list|()
operator|.
name|contains
argument_list|(
name|ioc
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|thisConfig
init|=
literal|false
decl_stmt|;
name|boolean
name|needDisabled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|r
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|equals
argument_list|(
name|ioc
argument_list|)
condition|)
name|thisConfig
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
name|needDisabled
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|thisConfig
operator|||
operator|!
name|needDisabled
condition|)
continue|continue;
block|}
name|StudentGroup
name|gr
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|r
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|gr
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|gr
operator|.
name|getType
argument_list|()
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|AllowDisabledSection
operator|.
name|WithGroupReservation
condition|)
block|{
name|int
name|reservationLimit
init|=
operator|(
name|r
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|iNoUnlimitedGroupReservations
condition|?
name|gr
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1
else|:
name|r
operator|.
name|getLimit
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|reservationLimit
operator|>=
literal|0
condition|)
block|{
name|reservedDisabledSpace
operator|+=
name|reservationLimit
expr_stmt|;
block|}
else|else
block|{
name|reservedDisabledSpace
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|int
name|subpartEnabled
init|=
literal|0
decl_stmt|;
name|int
name|subpartDisabled
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|int
name|classLimit
init|=
name|getSectionLimit
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|classLimit
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|c
operator|.
name|getStudentEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|iCheckForNoBatchStatus
operator|&&
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
operator|)
operator|||
operator|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|classLimit
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
block|{
name|subpartEnabled
operator|+=
name|classLimit
expr_stmt|;
block|}
else|else
block|{
name|subpartDisabled
operator|+=
name|classLimit
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|c
operator|.
name|getStudentEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|iCheckForNoBatchStatus
operator|&&
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
operator|)
operator|||
operator|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|e
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|subpartEnabled
operator|++
expr_stmt|;
name|subpartDisabled
operator|--
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|subpartLimit
init|=
name|subpartEnabled
operator|+
operator|(
name|reservedDisabledSpace
operator|<
literal|0
condition|?
name|subpartDisabled
else|:
name|Math
operator|.
name|min
argument_list|(
name|subpartDisabled
argument_list|,
name|reservedDisabledSpace
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|subpartLimit
operator|<
name|configLimit
condition|)
block|{
name|configLimit
operator|=
name|subpartLimit
expr_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Configuration limit of "
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"] decreased to "
operator|+
name|configLimit
operator|+
literal|" ("
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|)
operator|+
literal|" enabled: "
operator|+
name|subpartEnabled
operator|+
literal|", disabled: "
operator|+
name|subpartDisabled
operator|+
literal|", reserved: "
operator|+
name|reservedDisabledSpace
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|configLimit
return|;
block|}
specifier|public
name|int
name|getSectionLimit
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|boolean
name|infinityCheck
parameter_list|)
block|{
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
if|if
condition|(
name|iUseSnapShotLimits
operator|&&
name|clazz
operator|.
name|getSnapshotLimit
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minLimit
operator|<
name|clazz
operator|.
name|getSnapshotLimit
argument_list|()
condition|)
block|{
if|if
condition|(
name|infinityCheck
condition|)
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Using snapshot limit for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" (limit: "
operator|+
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|+
literal|", snapshot: "
operator|+
name|clazz
operator|.
name|getSnapshotLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|minLimit
operator|=
name|clazz
operator|.
name|getSnapshotLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maxLimit
operator|<
name|clazz
operator|.
name|getSnapshotLimit
argument_list|()
condition|)
block|{
name|maxLimit
operator|=
name|clazz
operator|.
name|getSnapshotLimit
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|classLimit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
condition|)
block|{
name|Assignment
name|a
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iMakeupAssignmentsFromRequiredPrefs
condition|)
block|{
name|p
operator|=
name|makeupPlacement
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|a
operator|.
name|getPlacement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|p
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|classLimit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|infinityCheck
operator|&&
operator|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|classLimit
operator|>=
literal|9999
operator|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|classLimit
return|;
block|}
specifier|private
name|Offering
name|loadOffering
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|courseName
init|=
name|io
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|Offering
name|offering
init|=
operator|new
name|Offering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|courseName
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|co
operator|.
name|isAllowStudentScheduling
argument_list|()
condition|)
continue|continue;
name|int
name|projected
init|=
operator|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|Course
name|course
init|=
operator|new
name|Course
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|offering
argument_list|,
name|getCourseLimit
argument_list|(
name|co
argument_list|)
argument_list|,
name|projected
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
name|course
operator|.
name|setCredit
argument_list|(
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|co
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|courseTable
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|class2section
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
name|ss2subpart
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getConfigLimit
argument_list|(
name|ioc
argument_list|)
argument_list|,
name|courseName
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|offering
argument_list|)
decl_stmt|;
name|InstructionalMethod
name|im
init|=
name|ioc
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
decl_stmt|;
if|if
condition|(
name|im
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setInstructionalMethodId
argument_list|(
name|im
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInstructionalMethodName
argument_list|(
name|im
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setInstructionalMethodReference
argument_list|(
name|im
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|subparts
control|)
block|{
name|String
name|sufix
init|=
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
name|Subpart
name|parentSubpart
init|=
operator|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Subpart
operator|)
name|ss2subpart
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSubpart
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Subpart "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|", but the appropriate parent subpart is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Subpart
name|subpart
init|=
operator|new
name|Subpart
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
operator|+
name|sufix
argument_list|,
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|ioc
operator|.
name|getInstructionalMethod
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|ioc
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
operator|)
argument_list|,
name|config
argument_list|,
name|parentSubpart
argument_list|)
decl_stmt|;
name|subpart
operator|.
name|setAllowOverlap
argument_list|(
name|ss
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
name|subpart
operator|.
name|setCredit
argument_list|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|ss
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|ss2subpart
operator|.
name|put
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|j
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|parentSection
init|=
operator|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Section
operator|)
name|class2section
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSection
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" has parent "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|", but the appropriate parent section is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iMakeupAssignmentsFromRequiredPrefs
condition|)
block|{
name|p
operator|=
name|makeupPlacement
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|a
operator|.
name|getPlacement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|datePatternName
argument_list|(
name|a
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Section
name|section
init|=
operator|new
name|Section
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|getSectionLimit
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
argument_list|,
operator|(
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getSectionNumberString
argument_list|()
else|:
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|)
argument_list|,
name|subpart
argument_list|,
name|p
argument_list|,
name|getInstructors
argument_list|(
name|c
argument_list|)
argument_list|,
name|parentSection
argument_list|)
decl_stmt|;
if|if
condition|(
name|iCheckEnabledForScheduling
operator|&&
operator|!
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
name|section
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iClassesFixedDateIndex
operator|>
literal|0
operator|&&
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getFirstMeeting
argument_list|(
name|iDayOfWeekOffset
argument_list|)
operator|<
name|iClassesFixedDateIndex
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" "
operator|+
name|p
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
operator|+
literal|" starts before the fixed date, it is marked as disabled for student scheduling."
argument_list|)
expr_stmt|;
name|section
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iClassesFixedDateIndex
operator|>
literal|0
operator|&&
name|a
operator|==
literal|null
operator|&&
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|firstMeeting
init|=
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstMeeting
operator|>=
literal|0
operator|&&
name|firstMeeting
operator|<
name|iClassesFixedDateIndex
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" Arranged Hours "
operator|+
name|c
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" starts before the fixed date, it is marked as disabled for student scheduling."
argument_list|)
expr_stmt|;
name|section
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|section
operator|.
name|setOnline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|boolean
name|hasRoom
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Location
name|loc
range|:
name|a
operator|.
name|getRooms
argument_list|()
control|)
if|if
condition|(
operator|!
name|loc
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
name|hasRoom
operator|=
literal|true
expr_stmt|;
name|section
operator|.
name|setOnline
argument_list|(
operator|!
name|hasRoom
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|String
name|suffix
init|=
name|c
operator|.
name|getClassSuffix
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
name|section
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|suffix
argument_list|)
expr_stmt|;
block|}
name|section
operator|.
name|setCancelled
argument_list|(
name|c
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
operator|&&
name|iAllowToKeepCurrentEnrollment
operator|&&
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|courseName
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
operator|&&
operator|!
name|c
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" is cancelled but has enrollments, the class will be treated as disabled."
argument_list|)
expr_stmt|;
name|section
operator|.
name|setCancelled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|section
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|class2section
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|classTable
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
name|reservation
range|:
name|io
operator|.
name|getReservations
argument_list|()
control|)
block|{
name|Reservation
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|OverrideReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isAlwaysExpired
argument_list|()
condition|)
name|r
operator|=
operator|new
name|ReservationOverride
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
operator|new
name|IndividualReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|OverrideType
name|type
init|=
operator|(
operator|(
name|OverrideReservation
operator|)
name|reservation
operator|)
operator|.
name|getOverrideType
argument_list|()
decl_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityOverride
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|type
operator|.
name|isMustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|type
operator|.
name|isAllowTimeConflict
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|type
operator|.
name|isAllowOverLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setBreakLinkedSections
argument_list|(
name|type
operator|.
name|isBreakLinkedSections
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualOverrideReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isAlwaysExpired
argument_list|()
condition|)
name|r
operator|=
operator|new
name|ReservationOverride
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
operator|new
name|IndividualReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|reservation
operator|.
name|isCanAssignOverLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|IndividualReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityIndividual
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapIndividual
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitIndividual
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedIndividual
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|GroupOverrideReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|isAlwaysExpired
argument_list|()
condition|)
name|r
operator|=
operator|new
name|ReservationOverride
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
operator|new
name|GroupReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|iNoUnlimitedGroupReservations
condition|?
name|studentIds
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|reservation
operator|.
name|isCanAssignOverLimit
argument_list|()
argument_list|)
expr_stmt|;
name|StudentGroupType
name|type
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|WithGroupReservation
condition|)
name|r
operator|.
name|setAllowDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|LearningCommunityReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|LearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|CourseOffering
name|co
init|=
operator|(
operator|(
name|LearningCommunityReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|r
operator|=
operator|new
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|iNoUnlimitedGroupReservations
condition|?
name|studentIds
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|course
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityLearningCommunity
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapLearningCommunity
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitLearningCommunity
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedLearningCommunity
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|StudentGroupType
name|type
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|WithGroupReservation
condition|)
name|r
operator|.
name|setAllowDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|GroupReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
name|iNoUnlimitedGroupReservations
condition|?
name|studentIds
operator|.
name|size
argument_list|()
else|:
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityGroup
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapGroup
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitGroup
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedGroup
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|StudentGroupType
name|type
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|WithGroupReservation
condition|)
name|r
operator|.
name|setAllowDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumOverrideReservation
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
name|cr
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|classifications
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
name|classifications
operator|.
name|add
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|majors
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|CurriculumOverrideReservation
operator|)
name|reservation
operator|)
operator|.
name|isAlwaysExpired
argument_list|()
condition|)
name|r
operator|=
operator|new
name|CurriculumOverride
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|classifications
argument_list|,
name|majors
argument_list|)
expr_stmt|;
else|else
name|r
operator|=
operator|new
name|CurriculumReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|classifications
argument_list|,
name|majors
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|reservation
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|reservation
operator|.
name|isCanAssignOverLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
name|cr
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|classifications
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
name|classifications
operator|.
name|add
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|majors
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|CurriculumReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|classifications
argument_list|,
name|majors
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityCurriculum
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapCurriculum
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitCurriculum
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedCurriculum
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
condition|)
block|{
name|CourseOffering
name|co
init|=
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|r
operator|=
operator|new
name|CourseReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setPriority
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationPriorityCourse
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAllowOverlap
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationAllowOverlapCourse
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setCanAssignOverLimit
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationCanOverLimitCourse
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMustBeUsed
argument_list|(
name|ApplicationProperty
operator|.
name|ReservationMustBeUsedCourse
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Failed to load reservation "
operator|+
name|reservation
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|r
operator|.
name|setExpired
argument_list|(
name|reservation
operator|.
name|isExpired
argument_list|()
argument_list|)
expr_stmt|;
name|configs
label|:
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|addConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
block|}
block|}
name|classes
label|:
for|for
control|(
name|Class_
name|c
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|addSection
argument_list|(
name|section
argument_list|,
name|reservation
operator|.
name|isReservationInclusive
argument_list|()
argument_list|)
expr_stmt|;
continue|continue
name|classes
continue|;
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|io
operator|.
name|isByReservationOnly
argument_list|()
condition|)
operator|new
name|DummyReservation
argument_list|(
name|offering
argument_list|)
expr_stmt|;
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|match
condition|)
for|for
control|(
name|Reservation
name|r
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
name|r
operator|.
name|setExpired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|offering
return|;
block|}
specifier|public
name|void
name|skipStudent
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Skipping student "
operator|+
name|s
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (id="
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|", name="
operator|+
name|NameFormat
operator|.
name|defaultFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|// If the student is enrolled in some classes, decrease the space in these classes accordingly
name|Map
argument_list|<
name|Course
argument_list|,
name|List
argument_list|<
name|Section
argument_list|>
argument_list|>
name|assignment
init|=
operator|new
name|HashMap
argument_list|<
name|Course
argument_list|,
name|List
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|s
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
operator|||
name|course
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|assignment
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|sections
operator|==
literal|null
condition|)
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|assignment
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|sections
argument_list|)
expr_stmt|;
comment|// If there is space in the course, decrease it by one
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|course
operator|.
name|setLimit
argument_list|(
name|course
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// If there is space in the configuration, decrease it by one
name|Config
name|config
init|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|config
operator|.
name|setLimit
argument_list|(
name|config
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// If there is space in the section, decrease it by one
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
block|{
name|section
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
comment|// For each offering the student is enrolled in
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Course
argument_list|,
name|List
argument_list|<
name|Section
argument_list|>
argument_list|>
name|entry
range|:
name|assignment
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Course
name|course
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// Look for a matching reservation
name|Reservation
name|reservation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Reservation
name|r
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
comment|// Skip reservations with no space that can be skipped
if|if
condition|(
name|r
operator|.
name|getReservationLimit
argument_list|()
operator|>=
literal|0.0
operator|&&
name|r
operator|.
name|getReservationLimit
argument_list|()
operator|<
literal|1.0
operator|&&
operator|!
name|r
operator|.
name|mustBeUsed
argument_list|()
condition|)
continue|continue;
comment|// Check applicability
name|boolean
name|applicable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
condition|)
block|{
name|applicable
operator|=
operator|(
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
operator|)
name|r
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|course
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
operator|)
name|r
operator|)
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|GroupReservation
condition|)
block|{
name|applicable
operator|=
operator|(
operator|(
name|GroupReservation
operator|)
name|r
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|applicable
operator|=
operator|(
operator|(
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseReservation
condition|)
block|{
name|applicable
operator|=
name|course
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CourseReservation
operator|)
name|r
operator|)
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|c
init|=
operator|(
name|CurriculumReservation
operator|)
name|r
decl_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|aac
range|:
name|s
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|equals
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|&&
operator|(
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|contains
argument_list|(
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|contains
argument_list|(
name|aac
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|applicable
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|applicable
condition|)
continue|continue;
comment|// If it does not need to be used, check if actually used
if|if
condition|(
operator|!
name|r
operator|.
name|mustBeUsed
argument_list|()
condition|)
block|{
name|boolean
name|included
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|getConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|getConfigs
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
name|included
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|Set
argument_list|<
name|Section
argument_list|>
name|sectionsThisSubpart
init|=
name|r
operator|.
name|getSections
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectionsThisSubpart
operator|!=
literal|null
operator|&&
operator|!
name|sectionsThisSubpart
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|included
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|included
condition|)
continue|continue;
block|}
if|if
condition|(
name|reservation
operator|==
literal|null
operator|||
name|r
operator|.
name|compareTo
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|reservation
argument_list|)
operator|<
literal|0
condition|)
name|reservation
operator|=
name|r
expr_stmt|;
block|}
comment|// Update reservation
if|if
condition|(
name|reservation
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
condition|)
block|{
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
name|g
init|=
operator|(
name|org
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|LearningCommunityReservation
operator|)
name|reservation
decl_stmt|;
name|g
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getReservationLimit
argument_list|()
operator|>=
literal|1.0
operator|&&
name|g
operator|.
name|getReservationLimit
argument_list|()
operator|!=
name|g
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
condition|)
name|g
operator|.
name|setReservationLimit
argument_list|(
name|g
operator|.
name|getReservationLimit
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|GroupReservation
condition|)
block|{
name|GroupReservation
name|g
init|=
operator|(
name|GroupReservation
operator|)
name|reservation
decl_stmt|;
name|g
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getReservationLimit
argument_list|()
operator|>=
literal|1.0
condition|)
name|g
operator|.
name|setReservationLimit
argument_list|(
name|g
operator|.
name|getReservationLimit
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|IndividualReservation
name|i
init|=
operator|(
name|IndividualReservation
operator|)
name|reservation
decl_stmt|;
name|i
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
comment|// nothing to do here
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|c
init|=
operator|(
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getReservationLimit
argument_list|()
operator|>=
literal|1.0
condition|)
name|c
operator|.
name|setReservationLimit
argument_list|(
name|c
operator|.
name|getReservationLimit
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Update curriculum counts
name|updateCurriculumCounts
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|checkOverrideStatuses
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|filteredStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
name|students
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iCheckForNoBatchStatus
operator|&&
name|s
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
continue|continue;
name|filteredStudents
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
literal|"Checking override statuses..."
argument_list|,
name|filteredStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|iOwnerId
argument_list|)
operator|.
name|setType
argument_list|(
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Long
argument_list|>
name|updatedStudentIds
init|=
name|iValidationProvider
operator|.
name|updateStudents
argument_list|(
literal|null
argument_list|,
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|,
name|user
argument_list|)
argument_list|,
name|filteredStudents
argument_list|)
decl_stmt|;
if|if
condition|(
name|updatedStudentIds
operator|!=
literal|null
condition|)
name|iUpdatedStudents
operator|.
name|addAll
argument_list|(
name|updatedStudentIds
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|validateOverrides
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
parameter_list|)
block|{
if|if
condition|(
name|iNrValidationThreads
operator|<=
literal|1
condition|)
block|{
name|setPhase
argument_list|(
literal|"Validate overrides..."
argument_list|,
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
name|students
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iCheckForNoBatchStatus
operator|&&
name|s
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
continue|continue;
name|validateOverrides
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|filteredStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
name|students
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iCheckForNoBatchStatus
operator|&&
name|s
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
continue|continue;
name|filteredStudents
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
literal|"Validate overrides..."
argument_list|,
name|filteredStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Worker
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<
name|Worker
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|iterator
init|=
name|filteredStudents
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrValidationThreads
condition|;
name|i
operator|++
control|)
name|workers
operator|.
name|add
argument_list|(
operator|new
name|Worker
argument_list|(
name|hibSession
argument_list|,
name|i
argument_list|,
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Worker
name|worker
range|:
name|workers
control|)
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|Worker
name|worker
range|:
name|workers
control|)
block|{
try|try
block|{
name|worker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|iCanContinue
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|worker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iCanContinue
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The validate was interrupted."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|validateOverrides
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
if|if
condition|(
name|iValidator
operator|==
literal|null
condition|)
block|{
name|iValidator
operator|=
operator|new
name|StudentSolver
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iValidator
operator|.
name|setInitalSolution
argument_list|(
operator|new
name|Solution
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|action
operator|.
name|setOperation
argument_list|(
literal|"validate-overrides"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setSession
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|iSessionId
argument_list|)
operator|.
name|setName
argument_list|(
name|iTerm
operator|+
name|iYear
operator|+
name|iInitiative
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|iOwnerId
argument_list|)
operator|.
name|setType
argument_list|(
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|action
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iValidationProvider
operator|.
name|revalidateStudent
argument_list|(
name|iValidator
argument_list|,
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|,
name|user
argument_list|)
argument_list|,
name|s
argument_list|,
name|action
argument_list|)
condition|)
block|{
name|iUpdatedStudents
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|action
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|record
argument_list|(
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAction
argument_list|(
name|action
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Student
name|loadStudent
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
comment|// Check for nobatch sectioning status
if|if
condition|(
name|iCheckForNoBatchStatus
operator|&&
name|s
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
condition|)
block|{
name|skipStudent
argument_list|(
name|s
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Check student query, if present
if|if
condition|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
block|{
name|skipStudent
argument_list|(
name|s
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|s
operator|.
name|getCourseDemands
argument_list|()
control|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
block|{
if|if
condition|(
name|iIgnoreNotAssigned
operator|==
name|IgnoreNotAssigned
operator|.
name|all
operator|&&
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|match
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|match
condition|)
block|{
name|skipStudent
argument_list|(
name|s
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Loading student "
operator|+
name|s
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (id="
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|", name="
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|student
operator|.
name|setExternalId
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setName
argument_list|(
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setStatus
argument_list|(
name|s
operator|.
name|getSectioningStatus
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|s
operator|.
name|getSectioningStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iPriorityStudentsQuery
operator|!=
literal|null
operator|&&
name|iPriorityStudentsQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
block|{
name|student
operator|.
name|setPriority
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iPriorityStudentGroupReference
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StudentGroup
name|g
range|:
name|s
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|iPriorityStudentGroupReference
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
condition|)
name|student
operator|.
name|setPriority
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iLoadStudentInfo
condition|)
name|loadStudentInfo
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShortDistanceAccomodationReference
operator|!=
literal|null
condition|)
for|for
control|(
name|StudentAccomodation
name|ac
range|:
name|s
operator|.
name|getAccomodations
argument_list|()
control|)
if|if
condition|(
name|iShortDistanceAccomodationReference
operator|.
name|equals
argument_list|(
name|ac
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
condition|)
name|student
operator|.
name|setNeedShortDistances
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentGroup
name|g
range|:
name|s
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|StudentGroupType
name|type
init|=
name|g
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|AlwaysAllowed
condition|)
block|{
name|student
operator|.
name|setAllowDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|float
name|maxCredit
init|=
name|iMaxDefaultCredit
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getMaxCredit
argument_list|()
operator|!=
literal|null
condition|)
name|maxCredit
operator|=
name|s
operator|.
name|getMaxCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|isRequestApproved
argument_list|()
condition|)
name|maxCredit
operator|=
name|s
operator|.
name|getOverrideMaxCredit
argument_list|()
expr_stmt|;
if|else if
condition|(
name|s
operator|.
name|isRequestCancelled
argument_list|()
operator|&&
operator|!
name|iCheckRequestStatusSkipCancelled
condition|)
name|maxCredit
operator|=
name|s
operator|.
name|getOverrideMaxCredit
argument_list|()
expr_stmt|;
if|else if
condition|(
name|s
operator|.
name|isRequestPending
argument_list|()
operator|&&
operator|!
name|iCheckRequestStatusSkipPending
condition|)
name|maxCredit
operator|=
name|s
operator|.
name|getOverrideMaxCredit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|maxCredit
operator|>
literal|0f
condition|)
name|student
operator|.
name|setMaxCredit
argument_list|(
name|maxCredit
argument_list|)
expr_stmt|;
name|float
name|minCredit
init|=
name|iMinDefaultCredit
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getMinCredit
argument_list|()
operator|!=
literal|null
condition|)
name|minCredit
operator|=
name|s
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|minCredit
operator|>=
literal|0
operator|&&
name|minCredit
operator|<=
name|maxCredit
condition|)
name|student
operator|.
name|setMinCredit
argument_list|(
name|minCredit
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|CourseOffering
argument_list|>
name|alternatives
init|=
operator|new
name|HashSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|credit
init|=
literal|0f
decl_stmt|,
name|assignedCredit
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|ft
init|=
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|""
argument_list|,
name|iFreeTimePattern
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
operator|.
name|getPriority
argument_list|()
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Choice
argument_list|>
name|selChoices
init|=
operator|new
name|HashSet
argument_list|<
name|Choice
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Choice
argument_list|>
name|reqChoices
init|=
operator|new
name|HashSet
argument_list|<
name|Choice
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Choice
argument_list|>
name|wlChoices
init|=
operator|new
name|HashSet
argument_list|<
name|Choice
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
name|crs
init|=
operator|new
name|TreeSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r1
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getOrder
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|crs
operator|.
name|addAll
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
expr_stmt|;
name|float
name|creditThisRequest
init|=
literal|0
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|crs
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|isRequestRejected
argument_list|()
operator|&&
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Requested course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has rejected override for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|iCheckRequestStatusSkipCancelled
operator|&&
name|cr
operator|.
name|isRequestCancelled
argument_list|()
operator|&&
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Requested course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has cancelled override for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|iCheckRequestStatusSkipPending
operator|&&
name|cr
operator|.
name|isRequestPending
argument_list|()
operator|&&
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Requested course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has pending override for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|iIgnoreNotAssigned
operator|==
name|IgnoreNotAssigned
operator|.
name|all
operator|&&
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Requested course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" is not assigned for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|iIgnoreNotAssigned
operator|==
name|IgnoreNotAssigned
operator|.
name|other
operator|&&
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Requested course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" is not assigned for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CourseCreditUnitConfig
name|creditCfg
init|=
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|creditCfg
operator|!=
literal|null
operator|&&
name|creditThisRequest
operator|<
name|creditCfg
operator|.
name|getMinCredit
argument_list|()
condition|)
name|creditThisRequest
operator|=
name|creditCfg
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassWaitList
argument_list|>
name|k
init|=
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassWaitList
name|cwl
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|cwl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
operator|&&
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|Type
operator|.
name|LOCKED
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
name|wlChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StudentSectioningPref
name|p
range|:
name|cr
operator|.
name|getPreferences
argument_list|()
control|)
block|{
name|boolean
name|required
init|=
name|p
operator|.
name|isRequired
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|instanceof
name|StudentClassPref
condition|)
block|{
name|StudentClassPref
name|scp
init|=
operator|(
name|StudentClassPref
operator|)
name|p
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
operator|(
name|required
condition|?
name|reqChoices
else|:
name|selChoices
operator|)
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|p
operator|instanceof
name|StudentInstrMthPref
condition|)
block|{
name|StudentInstrMthPref
name|imp
init|=
operator|(
name|StudentInstrMthPref
operator|)
name|p
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
if|if
condition|(
name|config
operator|.
name|getInstructionalMethodId
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethodId
argument_list|()
operator|.
name|equals
argument_list|(
name|imp
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
operator|(
name|required
condition|?
name|reqChoices
else|:
name|selChoices
operator|)
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|==
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
condition|)
block|{
name|selChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
operator|&&
operator|!
name|reqChoices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reqChoices
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|reqChoices
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iAllowDefaultCourseAlternatives
operator|&&
name|crs
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|CourseOffering
name|co
init|=
name|crs
operator|.
name|first
argument_list|()
operator|.
name|getCourseOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|alt
init|=
name|co
operator|.
name|getAlternativeOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|alt
operator|!=
literal|null
condition|)
block|{
comment|// there is an alternative, but it is already requested -> do nothing
name|demands
label|:
for|for
control|(
name|CourseDemand
name|d
range|:
name|demands
control|)
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r
range|:
name|d
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|alt
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
name|alt
operator|=
literal|null
expr_stmt|;
break|break
name|demands
break|;
block|}
block|}
if|if
condition|(
name|alt
operator|!=
literal|null
operator|&&
name|alternatives
operator|.
name|add
argument_list|(
name|alt
argument_list|)
condition|)
block|{
comment|// there is an alternative, not requested -> add the alternative
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|alt
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Course "
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"has an alternative course "
operator|+
name|alt
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseCreditUnitConfig
name|creditCfg
init|=
name|alt
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|creditCfg
operator|!=
literal|null
operator|&&
name|creditThisRequest
operator|<
name|creditCfg
operator|.
name|getMinCredit
argument_list|()
condition|)
name|creditThisRequest
operator|=
name|creditCfg
operator|.
name|getMinCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|==
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrl
range|:
name|alt
operator|.
name|getClassEnrollments
argument_list|(
name|s
argument_list|)
control|)
block|{
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
condition|)
block|{
name|selChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
operator|&&
operator|!
name|reqChoices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|reqChoices
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|reqChoices
operator|.
name|add
argument_list|(
operator|new
name|Choice
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|credit
operator|+=
name|creditThisRequest
expr_stmt|;
name|boolean
name|alternative
init|=
name|cd
operator|.
name|isAlternative
argument_list|()
operator|||
operator|(
name|iMaxCreditChecking
operator|&&
name|maxCredit
operator|>
literal|0
operator|&&
name|credit
operator|>
name|maxCredit
operator|)
decl_stmt|;
if|if
condition|(
name|alternative
operator|&&
name|iIgnoreNotAssigned
operator|==
name|IgnoreNotAssigned
operator|.
name|all
condition|)
name|alternative
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|alternative
operator|&&
name|iIgnoreNotAssigned
operator|==
name|IgnoreNotAssigned
operator|.
name|other
operator|&&
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
name|alternative
operator|=
literal|false
expr_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
operator|.
name|getPriority
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|,
name|cd
operator|.
name|getEffectiveCritical
argument_list|()
operator|.
name|toRequestPriority
argument_list|()
argument_list|,
name|cd
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|selChoices
argument_list|)
expr_stmt|;
name|request
operator|.
name|getRequiredChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|reqChoices
argument_list|)
expr_stmt|;
name|request
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|wlChoices
argument_list|)
expr_stmt|;
name|Course
name|assignedCourse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
condition|)
for|for
control|(
name|Course
name|c
range|:
name|assignedConfig
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assignedCourse
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
operator|(
name|assignedSections
operator|.
name|size
argument_list|()
operator|==
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
operator|&&
name|getModel
argument_list|()
operator|.
name|getKeepInitialAssignments
argument_list|()
operator|)
operator|||
operator|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|assignedCourse
operator|!=
literal|null
operator|&&
operator|!
name|assignedCourse
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
operator|)
operator|)
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|assignedCredit
operator|+=
name|enrollment
operator|.
name|getCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|assignedCourse
operator|!=
literal|null
operator|&&
operator|!
name|assignedCourse
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
block|{
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
condition|)
name|request
operator|.
name|setFixedValue
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|cancelled
condition|)
name|request
operator|.
name|setFixedValue
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iFixAssignedEnrollments
condition|)
block|{
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|cancelled
condition|)
name|request
operator|.
name|setFixedValue
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
operator|&&
name|maxCredit
operator|>
literal|0
operator|&&
name|credit
operator|>
name|maxCredit
condition|)
block|{
if|if
condition|(
name|iMaxCreditChecking
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Request "
operator|+
name|request
operator|+
literal|" is treated as alternative ("
operator|+
name|credit
operator|+
literal|"> "
operator|+
name|maxCredit
operator|+
literal|") for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|info
argument_list|(
literal|"Request "
operator|+
name|request
operator|+
literal|" is over the max credit limit for "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|!=
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") wrong number of classes ("
operator|+
literal|"has "
operator|+
name|assignedSections
operator|.
name|size
argument_list|()
operator|+
literal|", expected "
operator|+
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|Course
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Course
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Course
name|c1
parameter_list|,
name|Course
name|c2
parameter_list|)
block|{
return|return
operator|(
name|c1
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c1
operator|.
name|getCourseNumber
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c2
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|timeStamp
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrl
range|:
name|s
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|enrl
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
operator|||
name|alternatives
operator|.
name|contains
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// already loaded
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
name|timeStamp
operator|.
name|put
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WaitList
name|w
range|:
name|s
operator|.
name|getWaitlists
argument_list|()
control|)
block|{
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|w
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|w
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|w
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
name|timeStamp
operator|.
name|put
argument_list|(
name|w
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|w
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
literal|0
decl_stmt|;
name|courses
label|:
for|for
control|(
name|Course
name|course
range|:
name|courses
control|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|cx
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|cx
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r
argument_list|)
operator|==
literal|null
operator|&&
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|contains
argument_list|(
name|course
argument_list|)
condition|)
block|{
name|request
operator|=
operator|(
name|CourseRequest
operator|)
name|r
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|request
operator|=
operator|new
name|CourseRequest
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|cx
argument_list|,
literal|true
argument_list|,
name|timeStamp
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|Section
argument_list|>
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getId
argument_list|()
operator|!=
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
continue|continue;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  but a class with the same id is loaded, but under offering "
operator|+
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id is "
operator|+
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|", expected "
operator|+
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
block|}
name|Course
name|assignedCourse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
condition|)
for|for
control|(
name|Course
name|c
range|:
name|assignedConfig
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|contains
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|assignedCourse
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
operator|(
name|assignedSections
operator|.
name|size
argument_list|()
operator|==
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
operator|&&
name|getModel
argument_list|()
operator|.
name|getKeepInitialAssignments
argument_list|()
operator|)
operator|||
operator|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|assignedCourse
operator|!=
literal|null
operator|&&
operator|!
name|assignedCourse
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
operator|)
operator|)
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|assignedCredit
operator|+=
name|enrollment
operator|.
name|getCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|assignedCourse
operator|!=
literal|null
operator|&&
operator|!
name|assignedCourse
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
condition|)
name|request
operator|.
name|setFixedValue
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
else|else
block|{
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|cancelled
condition|)
name|request
operator|.
name|setFixedValue
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iFixAssignedEnrollments
condition|)
block|{
name|boolean
name|cancelled
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|cancelled
condition|)
name|request
operator|.
name|setFixedValue
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|!=
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): wrong number of classes ("
operator|+
literal|"has "
operator|+
name|assignedSections
operator|.
name|size
argument_list|()
operator|+
literal|", expected "
operator|+
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
operator|&&
name|assignedCredit
operator|>
name|student
operator|.
name|getMaxCredit
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") has "
operator|+
name|assignedCredit
operator|+
literal|" credits assigned but his/her maximum is "
operator|+
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMaxCredit
argument_list|(
name|assignedCredit
argument_list|)
expr_stmt|;
block|}
return|return
name|student
return|;
block|}
specifier|public
name|void
name|assignStudent
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|isAvailable
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|&&
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|r
operator|instanceof
name|CourseRequest
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
continue|continue;
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|checkForConflicts
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|float
name|credit
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
operator|||
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|student
operator|.
name|isAvailable
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|&&
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|enrl
init|=
operator|(
name|Enrollment
operator|)
name|r
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrl
operator|!=
literal|null
condition|)
name|credit
operator|+=
name|enrl
operator|.
name|getCredit
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|iAllowToKeepCurrentEnrollment
operator|||
name|iTweakLimits
operator|)
operator|&&
name|student
operator|.
name|getId
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"There was a problem assigning "
operator|+
name|cr
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|") "
argument_list|)
expr_stmt|;
name|boolean
name|hasMustUse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|enrl
operator|.
name|getOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|)
operator|&&
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
name|hasMustUse
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|hasLimit
init|=
literal|false
decl_stmt|,
name|hasOverlap
init|=
literal|false
decl_stmt|,
name|hasDisabled
init|=
literal|false
decl_stmt|,
name|hasLinked
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|isAvailable
argument_list|(
name|enrl
argument_list|)
condition|)
block|{
name|hasOverlap
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|enrl
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrlx
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrlx
operator|==
literal|null
operator|||
operator|!
operator|(
name|q
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|enrlx
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|sectionx
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionx
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sectionx
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|hasOverlap
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|section
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|iTweakLimits
condition|)
block|{
name|section
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|section
operator|.
name|clearReservationCache
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Limit of "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" section "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" increased to "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|section
operator|.
name|isEnabled
argument_list|()
condition|)
name|hasDisabled
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|iTweakLimits
condition|)
block|{
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|clearReservationCache
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Limit of "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" configuration "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" increased to "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enrl
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|iTweakLimits
condition|)
block|{
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Limit of "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" course increased to "
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
operator|&&
name|student
operator|.
name|hasMaxCredit
argument_list|()
operator|&&
name|credit
operator|>
name|student
operator|.
name|getMaxCredit
argument_list|()
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Max credit increased to "
operator|+
name|credit
operator|+
literal|" for "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|") "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|isNotAllowed
argument_list|(
name|enrl
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Created an override restriction for "
operator|+
name|cr
operator|.
name|getName
argument_list|()
operator|+
literal|" of "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|") "
argument_list|)
expr_stmt|;
name|IndividualRestriction
name|restriction
init|=
operator|new
name|IndividualRestriction
argument_list|(
operator|--
name|iMakeupReservationId
argument_list|,
name|enrl
operator|.
name|getOffering
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrl
operator|.
name|getSections
argument_list|()
control|)
name|restriction
operator|.
name|addSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrl
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getReservation
argument_list|()
operator|.
name|canBreakLinkedSections
argument_list|()
condition|)
block|{
name|hasLinked
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|LinkedSections
name|ls
range|:
name|enrl
operator|.
name|getStudent
argument_list|()
operator|.
name|getLinkedSections
argument_list|()
control|)
block|{
if|if
condition|(
name|ls
operator|.
name|inConflict
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|enrl
argument_list|)
operator|!=
literal|null
condition|)
name|hasLinked
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iAllowToKeepCurrentEnrollment
condition|)
block|{
name|Reservation
name|reservation
init|=
operator|new
name|ReservationOverride
argument_list|(
operator|--
name|iMakeupReservationId
argument_list|,
name|enrl
operator|.
name|getOffering
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|reservation
operator|.
name|setPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// top priority -- use this reservation to get in!
if|if
condition|(
name|hasLimit
condition|)
name|reservation
operator|.
name|setCanAssignOverLimit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasOverlap
condition|)
name|reservation
operator|.
name|setAllowOverlap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDisabled
condition|)
name|reservation
operator|.
name|setAllowDisabled
argument_list|(
name|hasDisabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMustUse
condition|)
block|{
name|reservation
operator|.
name|setMustBeUsed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|setExpired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasLinked
condition|)
block|{
name|reservation
operator|.
name|setBreakLinkedSections
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reservation
operator|.
name|setExpired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|props
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|mustBeUsed
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"mustBeUsed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isAllowOverlap
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"allowOverlap"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|canAssignOverLimit
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"allowOverLimit"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isAllowDisabled
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"allowDisabled"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|isExpired
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"expired"
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|canBreakLinkedSections
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
literal|"canBreakLinkedSections"
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Created an override reservation for "
operator|+
name|cr
operator|.
name|getName
argument_list|()
operator|+
literal|" of "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|") "
operator|+
name|props
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrl
operator|.
name|getSections
argument_list|()
control|)
name|reservation
operator|.
name|addSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
name|enrl
operator|.
name|guessReservation
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|enrl
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|cr
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|student
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|boolean
name|hasLimit
init|=
literal|false
decl_stmt|,
name|hasOverlap
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|enrl
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|student
operator|.
name|isAvailable
argument_list|(
name|section
argument_list|)
condition|)
block|{
for|for
control|(
name|Unavailability
name|unavailability
range|:
name|student
operator|.
name|getUnavailabilities
argument_list|()
control|)
if|if
condition|(
name|unavailability
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|Section
name|sectionx
init|=
name|unavailability
operator|.
name|getSection
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"    student is not available due to "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hasOverlap
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|Enrollment
name|enrlx
init|=
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|q
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrlx
operator|==
literal|null
operator|||
operator|!
operator|(
name|q
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|enrlx
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|sectionx
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionx
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sectionx
operator|.
name|isOverlapping
argument_list|(
name|section
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"    overlaps with "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
name|hasOverlap
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|section
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"    has no space available (limit is "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  config "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" has no space available (limit is "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|enrl
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  course "
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" has no space available (limit is "
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasLimit
operator|&&
operator|!
name|hasOverlap
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Constraint
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
name|e
range|:
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrlx
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|enrlx
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|sectionx
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"    conflicts with "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|sectionx
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|sectionx
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
operator|)
operator|+
literal|" due to "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrlx
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|student
operator|.
name|getId
argument_list|()
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"    of a different student ("
operator|+
name|enrlx
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|reorderStudentRequests
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|int
name|assigned
init|=
literal|0
decl_stmt|,
name|critical
init|=
literal|0
decl_stmt|,
name|freetime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
condition|)
name|assigned
operator|++
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isCritical
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|isAlternative
argument_list|()
condition|)
name|critical
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|freetime
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
operator|&&
name|getModel
argument_list|()
operator|.
name|getKeepInitialAssignments
argument_list|()
operator|&&
name|assigned
operator|>
literal|0
operator|)
operator|||
operator|(
name|iMoveCriticalCoursesUp
operator|&&
name|critical
operator|>
literal|0
operator|)
operator|||
operator|(
name|iMoveFreeTimesDown
operator|&&
name|freetime
operator|>
literal|0
operator|)
operator|||
operator|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Request
name|r1
parameter_list|,
name|Request
name|r2
parameter_list|)
block|{
if|if
condition|(
name|r1
operator|.
name|isAlternative
argument_list|()
operator|!=
name|r2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
name|r1
operator|.
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
return|;
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|a1
init|=
operator|(
name|r1
operator|instanceof
name|CourseRequest
operator|&&
name|r1
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r1
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|r1
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|a2
init|=
operator|(
name|r2
operator|instanceof
name|CourseRequest
operator|&&
name|r2
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r2
argument_list|)
operator|!=
literal|null
operator|&&
operator|!
name|r2
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|a1
operator|!=
name|a2
condition|)
block|{
return|return
name|a1
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
if|else if
condition|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
operator|&&
name|getModel
argument_list|()
operator|.
name|getKeepInitialAssignments
argument_list|()
condition|)
block|{
name|boolean
name|a1
init|=
operator|(
name|r1
operator|instanceof
name|CourseRequest
operator|&&
name|r1
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r1
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|a2
init|=
operator|(
name|r2
operator|instanceof
name|CourseRequest
operator|&&
name|r2
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|r2
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|a1
operator|!=
name|a2
condition|)
return|return
name|a1
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
if|if
condition|(
name|iMoveCriticalCoursesUp
condition|)
block|{
name|RequestPriority
name|p1
init|=
name|r1
operator|.
name|getRequestPriority
argument_list|()
decl_stmt|;
name|RequestPriority
name|p2
init|=
name|r2
operator|.
name|getRequestPriority
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|!=
name|p2
condition|)
block|{
return|return
operator|(
name|p1
operator|==
literal|null
condition|?
name|RequestPriority
operator|.
name|Normal
else|:
name|p1
operator|)
operator|.
name|compareTo
argument_list|(
name|p2
operator|==
literal|null
condition|?
name|RequestPriority
operator|.
name|Normal
else|:
name|p2
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|iMoveFreeTimesDown
condition|)
block|{
name|boolean
name|f1
init|=
operator|(
name|r1
operator|instanceof
name|FreeTimeRequest
operator|)
decl_stmt|;
name|boolean
name|f2
init|=
operator|(
name|r2
operator|instanceof
name|FreeTimeRequest
operator|)
decl_stmt|;
if|if
condition|(
name|f1
operator|!=
name|f2
condition|)
return|return
name|f1
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
return|return
name|r1
operator|.
name|getPriority
argument_list|()
operator|<
name|r2
operator|.
name|getPriority
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
name|r
operator|.
name|setPriority
argument_list|(
name|p
operator|++
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|curriculum
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
if|if
condition|(
operator|!
name|student
operator|.
name|getAreaClassificationMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AreaClassificationMajor
name|acm
init|=
name|student
operator|.
name|getAreaClassificationMajors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|acm
operator|.
name|getArea
argument_list|()
operator|+
literal|":"
operator|+
name|acm
operator|.
name|getClassification
argument_list|()
operator|+
literal|":"
operator|+
name|acm
operator|.
name|getMajor
argument_list|()
return|;
block|}
return|return
operator|(
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArea
argument_list|()
operator|+
literal|":"
operator|+
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCode
argument_list|()
operator|)
operator|+
literal|":"
operator|+
operator|(
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCode
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|curriculum
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
name|String
name|curriculum
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|aac
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
return|return
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|":"
operator|+
name|aac
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
return|;
block|}
return|return
name|curriculum
return|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|iCourse2Curricula2Weight
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|void
name|updateCurriculumCounts
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|String
name|curriculum
init|=
name|curriculum
argument_list|(
name|student
argument_list|)
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Course
name|course
init|=
operator|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
else|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|c2w
init|=
name|iCourse2Curricula2Weight
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2w
operator|==
literal|null
condition|)
block|{
name|c2w
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2Curricula2Weight
operator|.
name|put
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|c2w
argument_list|)
expr_stmt|;
block|}
name|Integer
name|cx
init|=
name|c2w
operator|.
name|get
argument_list|(
name|curriculum
argument_list|)
decl_stmt|;
name|c2w
operator|.
name|put
argument_list|(
name|curriculum
argument_list|,
literal|1
operator|+
operator|(
name|cx
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|updateCurriculumCounts
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
parameter_list|)
block|{
name|String
name|curriculum
init|=
name|curriculum
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
name|Long
name|courseId
init|=
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|add
argument_list|(
name|courseId
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|c2w
init|=
name|iCourse2Curricula2Weight
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2w
operator|==
literal|null
condition|)
block|{
name|c2w
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2Curricula2Weight
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|c2w
argument_list|)
expr_stmt|;
block|}
name|Integer
name|cx
init|=
name|c2w
operator|.
name|get
argument_list|(
name|curriculum
argument_list|)
decl_stmt|;
name|c2w
operator|.
name|put
argument_list|(
name|curriculum
argument_list|,
literal|1
operator|+
operator|(
name|cx
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|demands
label|:
for|for
control|(
name|CourseDemand
name|demand
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|courses
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue
name|demands
continue|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|<
name|request
operator|.
name|getOrder
argument_list|()
condition|)
name|request
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|Long
name|courseId
init|=
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|c2w
init|=
name|iCourse2Curricula2Weight
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2w
operator|==
literal|null
condition|)
block|{
name|c2w
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2Curricula2Weight
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|c2w
argument_list|)
expr_stmt|;
block|}
name|Integer
name|cx
init|=
name|c2w
operator|.
name|get
argument_list|(
name|curriculum
argument_list|)
decl_stmt|;
name|c2w
operator|.
name|put
argument_list|(
name|curriculum
argument_list|,
literal|1
operator|+
operator|(
name|cx
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fixWeights
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
argument_list|<
name|Course
argument_list|>
name|courses
parameter_list|)
block|{
name|setPhase
argument_list|(
literal|"Computing projected request weights..."
argument_list|,
name|courses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|courses
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cur2real
init|=
name|iCourse2Curricula2Weight
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur2real
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|cur2proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
operator|||
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|Double
name|proj
init|=
name|cur2proj
operator|.
name|get
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cur2proj
operator|.
name|put
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getWeight
argument_list|()
operator|+
operator|(
name|proj
operator|==
literal|null
condition|?
literal|0.0
else|:
name|proj
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|cur
range|:
name|cur2proj
operator|.
name|keySet
argument_list|()
control|)
block|{
name|double
name|proj
init|=
name|cur2proj
operator|.
name|get
argument_list|(
name|cur
argument_list|)
decl_stmt|;
name|Integer
name|real
init|=
name|cur2real
operator|.
name|get
argument_list|(
name|cur
argument_list|)
decl_stmt|;
if|if
condition|(
name|real
operator|==
literal|null
condition|)
continue|continue;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Projected demands for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|cur
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|' '
argument_list|)
operator|+
literal|" multiplies by "
operator|+
operator|(
name|real
operator|>=
name|proj
condition|?
literal|0.0
else|:
operator|(
name|proj
operator|-
name|real
operator|)
operator|/
name|proj
operator|)
operator|+
literal|" (projected="
operator|+
name|proj
operator|+
literal|", real="
operator|+
name|real
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
operator|||
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|double
name|proj
init|=
name|cur2proj
operator|.
name|get
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|real
init|=
name|cur2real
operator|.
name|get
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|real
operator|==
literal|null
condition|)
continue|continue;
name|request
operator|.
name|setWeight
argument_list|(
name|request
operator|.
name|getWeight
argument_list|()
operator|*
operator|(
name|real
operator|>=
name|proj
condition|?
literal|0.0
else|:
operator|(
name|proj
operator|-
name|real
operator|)
operator|/
name|proj
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|nrStudents
init|=
literal|0.0
decl_stmt|;
name|double
name|nrLastLike
init|=
literal|0.0
decl_stmt|;
name|int
name|lastLikeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
continue|continue;
name|nrStudents
operator|+=
name|request
operator|.
name|getWeight
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
block|{
name|nrLastLike
operator|+=
name|request
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|lastLikeCount
operator|++
expr_stmt|;
block|}
block|}
name|double
name|projected
init|=
name|course
operator|.
name|getProjected
argument_list|()
decl_stmt|;
name|double
name|limit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|configLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
operator|||
name|config
operator|.
name|getLimit
argument_list|()
operator|>=
literal|9999
condition|)
block|{
name|configLimit
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
name|int
name|cLimit
init|=
name|config
operator|.
name|getLimit
argument_list|()
decl_stmt|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|int
name|subpartLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
operator|||
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|9999
condition|)
block|{
name|subpartLimit
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
name|subpartLimit
operator|+=
name|section
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subpartLimit
operator|>=
literal|0
operator|&&
name|subpartLimit
operator|<
name|cLimit
condition|)
block|{
name|cLimit
operator|=
name|subpartLimit
expr_stmt|;
block|}
block|}
name|configLimit
operator|+=
name|cLimit
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|offeringLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
operator|||
name|c
operator|.
name|getLimit
argument_list|()
operator|>=
literal|9999
condition|)
block|{
name|offeringLimit
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
name|offeringLimit
operator|+=
name|c
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|configLimit
operator|>=
literal|0
operator|&&
name|configLimit
operator|<
name|offeringLimit
condition|)
name|limit
operator|=
operator|(
name|limit
operator|*
name|configLimit
operator|)
operator|/
name|offeringLimit
expr_stmt|;
if|else if
condition|(
name|configLimit
operator|>=
literal|0
operator|&&
name|offeringLimit
operator|<
literal|0
condition|)
name|limit
operator|=
name|configLimit
operator|/
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|configLimit
operator|>=
literal|0
operator|&&
operator|(
name|configLimit
operator|<
name|limit
operator|||
name|limit
operator|<
literal|0
operator|)
condition|)
name|limit
operator|=
name|configLimit
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|<
literal|0
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" is unlimited."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|projected
operator|<=
literal|0
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"No projected demand for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|", using course limit ("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|limit
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|projected
operator|=
name|limit
expr_stmt|;
block|}
if|else if
condition|(
name|limit
operator|<
name|projected
condition|)
block|{
if|if
condition|(
operator|!
name|iProjections
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected number of students is over course limit for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|projected
argument_list|)
operator|+
literal|">"
operator|+
name|Math
operator|.
name|round
argument_list|(
name|limit
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|projected
operator|=
name|limit
expr_stmt|;
block|}
if|if
condition|(
name|lastLikeCount
operator|<=
literal|0
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"No projected course demands for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|double
name|weight
init|=
operator|(
name|nrLastLike
operator|<=
literal|0
condition|?
literal|0.0
else|:
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|projected
operator|-
operator|(
name|nrStudents
operator|-
name|nrLastLike
operator|)
argument_list|)
operator|/
name|nrLastLike
operator|)
decl_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Projected student weight for "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|weight
operator|+
literal|" (projected="
operator|+
name|nrLastLike
operator|+
literal|", real="
operator|+
operator|(
name|nrStudents
operator|-
name|nrLastLike
operator|)
operator|+
literal|", limit="
operator|+
name|projected
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|int
name|left
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|course
operator|.
name|getRequests
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
block|{
name|request
operator|.
name|setWeight
argument_list|(
name|weight
operator|*
name|request
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getWeight
argument_list|()
operator|<=
literal|0.0
condition|)
block|{
name|Student
name|student
init|=
name|request
operator|.
name|getStudent
argument_list|()
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|removeVariable
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
name|c
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|getModel
argument_list|()
operator|.
name|removeStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|left
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|left
operator|<=
literal|0
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"No projected course demands needed for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getModel
argument_list|()
operator|.
name|requestWeightsChanged
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadStudentInfo
parameter_list|(
name|Student
name|student
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|s
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
comment|// student.getAcademicAreaClasiffications().add(new AcademicAreaCode(acm.getAcademicArea().getAcademicAreaAbbreviation(),acm.getAcademicClassification().getCode()));
comment|// student.getMajors().add(new AcademicAreaCode(acm.getAcademicArea().getAcademicAreaAbbreviation(),acm.getMajor().getCode()));
name|student
operator|.
name|getAreaClassificationMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AreaClassificationMajor
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|s
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|student
operator|.
name|getMinors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|s
operator|.
name|getAccomodations
argument_list|()
control|)
name|student
operator|.
name|getMinors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
literal|"A"
argument_list|,
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|a
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Advisor
name|a
range|:
name|s
operator|.
name|getAdvisors
argument_list|()
control|)
name|student
operator|.
name|getAdvisors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Instructor
argument_list|(
literal|0
argument_list|,
name|a
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|a
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|iInstructorNameFormat
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|,
name|a
operator|.
name|getEmail
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadRequestGroups
parameter_list|(
name|Student
name|student
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
for|for
control|(
name|StudentGroup
name|g
range|:
name|s
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|iRequestGroupRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iRequestGroupRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|g
operator|.
name|getGroupName
argument_list|()
operator|.
name|matches
argument_list|(
name|iRequestGroupRegExp
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|g
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|g
operator|.
name|getType
argument_list|()
operator|.
name|isKeepTogether
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Course
name|course
init|=
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RequestGroup
name|group
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestGroup
name|rg
range|:
name|course
operator|.
name|getRequestGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|rg
operator|.
name|getId
argument_list|()
operator|==
name|g
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|group
operator|=
name|rg
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|group
operator|==
literal|null
condition|)
name|group
operator|=
operator|new
name|RequestGroup
argument_list|(
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|cr
operator|.
name|addRequestGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
name|BitSet
name|getFreeTimeBitSet
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|session
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|session
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|endMonth
operator|+
literal|1
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
operator|-
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|ret
init|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|datePatternName
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|TimeLocation
name|time
parameter_list|)
block|{
if|if
condition|(
literal|"never"
operator|.
name|equals
argument_list|(
name|iDatePatternFormat
argument_list|)
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
if|if
condition|(
literal|"extended"
operator|.
name|equals
argument_list|(
name|iDatePatternFormat
argument_list|)
operator|&&
name|dp
operator|.
name|getType
argument_list|()
operator|!=
name|DatePattern
operator|.
name|sTypeExtended
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
if|if
condition|(
literal|"alternate"
operator|.
name|equals
argument_list|(
name|iDatePatternFormat
argument_list|)
operator|&&
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypeAlternate
condition|)
return|return
name|dp
operator|.
name|getName
argument_list|()
return|;
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iDatePatternFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iDatePatternFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dpf
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_PATTERN
argument_list|)
decl_stmt|;
return|return
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
operator|(
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|Date
name|getDatePatternFirstDay
parameter_list|(
name|Session
name|s
parameter_list|)
block|{
return|return
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|s
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
interface|interface
name|SectionProvider
block|{
specifier|public
name|Section
name|get
parameter_list|(
name|Long
name|classId
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Collection
argument_list|<
name|Section
argument_list|>
argument_list|>
name|getSections
parameter_list|(
name|DistributionPref
name|pref
parameter_list|,
name|SectionProvider
name|classTable
parameter_list|)
block|{
name|List
argument_list|<
name|Collection
argument_list|<
name|Section
argument_list|>
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Collection
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|DistributionPref
operator|.
name|Structure
name|structure
init|=
name|pref
operator|.
name|getStructure
argument_list|()
decl_stmt|;
if|if
condition|(
name|structure
operator|==
literal|null
condition|)
name|structure
operator|=
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
expr_stmt|;
if|if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|Progressive
condition|)
block|{
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Section
argument_list|>
name|sections
index|[]
init|=
operator|new
name|Set
index|[
name|maxSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sections
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|sections
index|[
name|i
index|]
operator|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|DistributionObject
argument_list|>
name|distributionObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|distributionObjects
argument_list|,
operator|new
name|TimetableDatabaseLoader
operator|.
name|ChildrenFirstDistributionObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DistributionObject
name|distributionObject
range|:
name|distributionObjects
control|)
block|{
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sections
operator|.
name|length
condition|;
name|j
operator|++
control|)
name|sections
index|[
name|j
index|]
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sections
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Section
name|section
init|=
literal|null
decl_stmt|;
name|sections
label|:
for|for
control|(
name|Section
name|s
range|:
name|sections
index|[
name|j
index|]
control|)
block|{
name|Section
name|p
init|=
name|s
operator|.
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|subpart
operator|.
name|getUniqueId
argument_list|()
condition|)
block|{
name|section
operator|=
name|s
expr_stmt|;
break|break
name|sections
break|;
block|}
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|==
literal|null
condition|)
name|section
operator|=
name|classTable
operator|.
name|get
argument_list|(
name|classes
operator|.
name|get
argument_list|(
name|j
operator|%
name|classes
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|sections
index|[
name|j
index|]
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Set
argument_list|<
name|Section
argument_list|>
name|s
range|:
name|sections
control|)
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|OneOfEach
condition|)
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|counts
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|List
argument_list|<
name|Section
argument_list|>
argument_list|>
name|e
init|=
name|DistributionPref
operator|.
name|permutations
argument_list|(
name|sections
argument_list|,
name|counts
argument_list|)
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
name|ret
operator|.
name|add
argument_list|(
name|e
operator|.
name|nextElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|Pairwise
condition|)
block|{
if|if
condition|(
name|sections
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
for|for
control|(
name|int
name|idx1
init|=
literal|0
init|;
name|idx1
operator|<
name|sections
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|idx1
operator|++
control|)
block|{
name|Section
name|s1
init|=
name|sections
operator|.
name|get
argument_list|(
name|idx1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx2
init|=
name|idx1
operator|+
literal|1
init|;
name|idx2
operator|<
name|sections
operator|.
name|size
argument_list|()
condition|;
name|idx2
operator|++
control|)
block|{
name|Section
name|s2
init|=
name|sections
operator|.
name|get
argument_list|(
name|idx2
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|s
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|s1
argument_list|)
expr_stmt|;
name|s
operator|.
name|add
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|sections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|grouping
init|=
literal|2
decl_stmt|;
switch|switch
condition|(
name|structure
condition|)
block|{
case|case
name|GroupsOfTwo
case|:
name|grouping
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|GroupsOfThree
case|:
name|grouping
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|GroupsOfFour
case|:
name|grouping
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|GroupsOfFive
case|:
name|grouping
operator|=
literal|5
expr_stmt|;
break|break;
block|}
name|List
argument_list|<
name|Section
argument_list|>
name|s
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
block|{
name|s
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|==
name|grouping
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|s
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Session
name|session
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iFreeTimePattern
operator|=
name|getFreeTimeBitSet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iDatePatternFirstDate
operator|=
name|getDatePatternFirstDay
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io "
operator|+
literal|"left join io.courseOfferings as co "
operator|+
literal|"left join fetch io.instrOfferingConfigs as ioc "
operator|+
literal|"left join fetch ioc.schedulingSubparts as ss "
operator|+
literal|"left join fetch ss.classes as c "
operator|+
literal|"left join fetch io.reservations as r "
operator|+
literal|"where "
operator|+
literal|"io.session.uniqueId = :sessionId and io.notOffered = false and co.subjectArea.department.allowStudentScheduling = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|setPhase
argument_list|(
literal|"Loading course offerings..."
argument_list|,
name|offerings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|Offering
name|offering
init|=
name|loadOffering
argument_list|(
name|io
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|getModel
argument_list|()
operator|.
name|addOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|ext2student
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|onlineOnlyStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iIncludeCourseDemands
operator|||
name|iProjections
condition|)
block|{
name|List
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch cr.classWaitLists as cw "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"left join fetch s.waitlists as w "
operator|+
operator|(
name|iLoadStudentInfo
condition|?
literal|"left join fetch s.areaClasfMajors as a left join fetch s.groups as g "
else|:
literal|""
operator|)
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|iValidateOverrides
operator|&&
name|iValidationProvider
operator|!=
literal|null
condition|)
block|{
name|validateOverrides
argument_list|(
name|hibSession
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iCheckOverrideStatus
operator|&&
name|iValidationProvider
operator|!=
literal|null
condition|)
block|{
name|checkOverrideStatuses
argument_list|(
name|hibSession
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iCheckCriticalCourses
condition|)
name|checkCriticalCourses
argument_list|(
name|hibSession
argument_list|,
name|students
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
literal|"Loading student requests..."
argument_list|,
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|loadStudent
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|iOnlineOnlyStudentQuery
operator|!=
literal|null
operator|&&
name|iOnlineOnlyStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
name|onlineOnlyStudents
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|updateCurriculumCounts
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProjections
condition|)
block|{
comment|// Decrease the limits accordingly
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Enrollment
name|enrollment
init|=
name|request
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|enrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|section
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|instanceof
name|GroupReservation
operator|&&
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getReservationLimit
argument_list|()
operator|>=
literal|1.0
condition|)
block|{
operator|(
operator|(
name|GroupReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|GroupReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|setReservationLimit
argument_list|(
operator|(
operator|(
name|GroupReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|getReservationLimit
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|instanceof
name|IndividualReservation
condition|)
block|{
operator|(
operator|(
name|IndividualReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|instanceof
name|CurriculumReservation
operator|&&
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getReservationLimit
argument_list|()
operator|>=
literal|1.0
condition|)
block|{
operator|(
operator|(
name|CurriculumReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|setReservationLimit
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getReservationLimit
argument_list|()
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|course
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|iLoadRequestGroups
condition|)
name|loadRequestGroups
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getExternalId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|student
operator|.
name|getExternalId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|ext2student
operator|.
name|put
argument_list|(
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
comment|// assignStudent(student);
block|}
block|}
block|}
if|if
condition|(
name|iIncludeUnavailabilities
condition|)
block|{
name|setPhase
argument_list|(
literal|"Loading unavailabilities..."
argument_list|,
name|offerings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|offering
range|:
name|offerings
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
operator|||
name|section
operator|.
name|isCancelled
argument_list|()
operator|||
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|ext2student
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|boolean
name|canOverlap
init|=
operator|!
name|ci
operator|.
name|isLead
argument_list|()
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getTeachingRequest
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|ci
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getClassRequests
argument_list|()
control|)
if|if
condition|(
name|tcr
operator|.
name|getTeachingClass
argument_list|()
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
condition|)
block|{
name|canOverlap
operator|=
name|tcr
operator|.
name|isCanOverlap
argument_list|()
expr_stmt|;
break|break;
block|}
operator|new
name|Unavailability
argument_list|(
name|student
argument_list|,
name|section
argument_list|,
name|canOverlap
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TeachingClassRequest
name|tcr
range|:
name|clazz
operator|.
name|getTeachingRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|tcr
operator|.
name|isAssignInstructor
argument_list|()
operator|&&
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|tcr
operator|.
name|getTeachingRequest
argument_list|()
operator|.
name|getAssignedInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|||
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|ext2student
operator|.
name|get
argument_list|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
operator|new
name|Unavailability
argument_list|(
name|student
argument_list|,
name|section
argument_list|,
name|tcr
operator|.
name|isCanOverlap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|onlineOnlyStudents
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|Course
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2students
init|=
operator|new
name|HashMap
argument_list|<
name|Course
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|onlineOnlyStudents
control|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|s
operator|.
name|getRequests
argument_list|()
control|)
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
for|for
control|(
name|Course
name|c
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set
init|=
name|course2students
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|==
literal|null
condition|)
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2students
operator|.
name|put
argument_list|(
name|c
argument_list|,
name|set
argument_list|)
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|setPhase
argument_list|(
literal|"Creating online-only restrictions..."
argument_list|,
name|course2students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Course
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|e
range|:
name|course2students
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|Course
name|course
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|iOnlineOnlyCourseNameRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iOnlineOnlyCourseNameRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iOnlineOnlyCourseNameRegExp
argument_list|)
condition|)
block|{
operator|new
name|IndividualRestriction
argument_list|(
operator|--
name|iMakeupReservationId
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iOnlineOnlyInstructionalModeRegExp
operator|!=
literal|null
condition|)
block|{
name|Offering
name|offering
init|=
name|course
operator|.
name|getOffering
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Config
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|Config
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|iOnlineOnlyInstructionalModeRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|configs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|.
name|matches
argument_list|(
name|iOnlineOnlyInstructionalModeRegExp
argument_list|)
condition|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|configs
operator|.
name|size
argument_list|()
operator|==
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// student can take any configuration -> no need for an override
continue|continue;
block|}
name|Restriction
name|r
init|=
operator|new
name|IndividualRestriction
argument_list|(
operator|--
name|iMakeupReservationId
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|configs
control|)
name|r
operator|.
name|addConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iOnlineOnlyStudentQuery
operator|!=
literal|null
operator|&&
name|iOnlineOnlyExclusiveCourses
operator|&&
name|iOnlineOnlyCourseNameRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iOnlineOnlyCourseNameRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setPhase
argument_list|(
literal|"Creating inverse online-only restrictions..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iOnlineOnlyCourseNameRegExp
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|onlineOnlyStudents
operator|.
name|contains
argument_list|(
name|cr
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|studentIds
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|new
name|IndividualRestriction
argument_list|(
operator|--
name|iMakeupReservationId
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|iOnlineOnlyStudentQuery
operator|!=
literal|null
operator|&&
name|iOnlineOnlyExclusiveCourses
operator|&&
name|iResidentialInstructionalModeRegExp
operator|!=
literal|null
condition|)
block|{
name|setPhase
argument_list|(
literal|"Creating residential restrictions..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Offering
name|offering
range|:
name|getModel
argument_list|()
operator|.
name|getOfferings
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Config
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|Config
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|iResidentialInstructionalModeRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|==
literal|null
operator|||
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|configs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|!=
literal|null
operator|&&
name|config
operator|.
name|getInstructionalMethodReference
argument_list|()
operator|.
name|matches
argument_list|(
name|iResidentialInstructionalModeRegExp
argument_list|)
condition|)
block|{
name|configs
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|configs
operator|.
name|size
argument_list|()
operator|==
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// student can take any configuration -> no need for an override
continue|continue;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|onlineOnlyStudents
operator|.
name|contains
argument_list|(
name|cr
operator|.
name|getStudent
argument_list|()
argument_list|)
condition|)
name|studentIds
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Restriction
name|r
init|=
operator|new
name|IndividualRestriction
argument_list|(
operator|--
name|iMakeupReservationId
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|configs
control|)
name|r
operator|.
name|addConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|distPrefs
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select p from DistributionPref p, Department d where p.distributionType.reference in (:ref1, :ref2) and d.session.uniqueId = :sessionId"
operator|+
literal|" and p.owner = d and p.prefLevel.prefProlog = :pref"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref1"
argument_list|,
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|LINKED_SECTIONS
operator|.
name|reference
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"ref2"
argument_list|,
name|IgnoreStudentConflictsConstraint
operator|.
name|REFERENCE
argument_list|)
operator|.
name|setString
argument_list|(
literal|"pref"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|distPrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setPhase
argument_list|(
literal|"Loading distribution preferences..."
argument_list|,
name|distPrefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SectionProvider
name|p
init|=
operator|new
name|SectionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Section
name|get
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
name|classTable
operator|.
name|get
argument_list|(
name|classId
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|DistributionPref
name|pref
range|:
name|distPrefs
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|Collection
argument_list|<
name|Section
argument_list|>
name|sections
range|:
name|getSections
argument_list|(
name|pref
argument_list|,
name|p
argument_list|)
control|)
block|{
if|if
condition|(
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|LINKED_SECTIONS
operator|.
name|reference
argument_list|()
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|addLinkedSections
argument_list|(
name|iLinkedClassesMustBeUsed
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Section
name|s1
range|:
name|sections
control|)
for|for
control|(
name|Section
name|s2
range|:
name|sections
control|)
if|if
condition|(
operator|!
name|s1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
name|s1
operator|.
name|addIgnoreConflictWith
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|setPhase
argument_list|(
literal|"Assigning students..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|assignStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
literal|"Checking for student conflicts..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|checkForConflicts
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|&&
name|getModel
argument_list|()
operator|.
name|getKeepInitialAssignments
argument_list|()
condition|)
block|{
name|setPhase
argument_list|(
literal|"Removing initial assignment for matching course(s) ..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|matches
argument_list|(
name|iMPPCoursesRegExp
argument_list|)
condition|)
block|{
name|request
operator|.
name|setInitialAssignment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|isMPP
argument_list|()
operator|&&
name|getModel
argument_list|()
operator|.
name|getKeepInitialAssignments
argument_list|()
condition|)
block|{
name|setPhase
argument_list|(
literal|"Moving assigned requests first..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|reorderStudentRequests
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iMoveCriticalCoursesUp
condition|)
block|{
name|setPhase
argument_list|(
literal|"Moving critical requests first..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|reorderStudentRequests
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iMoveFreeTimesDown
condition|)
block|{
name|setPhase
argument_list|(
literal|"Moving free times last..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|reorderStudentRequests
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setPhase
argument_list|(
literal|"Moving assigned requests not matching the course(s) first..."
argument_list|,
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|getModel
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|reorderStudentRequests
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iStudentCourseDemands
operator|!=
literal|null
condition|)
block|{
name|iStudentCourseDemands
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|iProgress
argument_list|,
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|classAssignments
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iIncludeUseCommittedAssignments
operator|&&
operator|!
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|)
block|{
name|classAssignments
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|List
name|enrollments
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct se.studentId, se.clazz.uniqueId from StudentEnrollment se where "
operator|+
literal|"se.solution.commited=true and se.solution.owner.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|setPhase
argument_list|(
literal|"Loading projected class assignments..."
argument_list|,
name|enrollments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|enrollments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|classAssignments
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|classAssignments
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
block|}
name|setPhase
argument_list|(
literal|"Loading projected course requests..."
argument_list|,
name|offerings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|requestId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|demands
init|=
name|iStudentCourseDemands
operator|.
name|getDemands
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|demands
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|WeightedStudentId
name|demand
range|:
name|demands
control|)
block|{
if|if
condition|(
name|iProjectedStudentQuery
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|demand
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iProjectedStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|demand
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|demand
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|iProjectedStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|ProjectedStudentMatcher
argument_list|(
name|demand
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
continue|continue;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|students
operator|.
name|get
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|AreaClasfMajor
name|acm
range|:
name|demand
operator|.
name|getMajors
argument_list|()
control|)
name|student
operator|.
name|getAreaClassificationMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AreaClassificationMajor
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|,
name|acm
operator|.
name|getClasf
argument_list|()
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|requestId
operator|--
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|setWeight
argument_list|(
name|demand
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classAssignments
operator|!=
literal|null
operator|&&
operator|!
name|classAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|classAssignments
operator|.
name|get
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|!=
literal|null
condition|)
block|{
name|enrollments
label|:
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|request
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
operator|!
name|classIds
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
name|students
operator|.
name|values
argument_list|()
control|)
block|{
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|assignStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Student
name|student
range|:
name|students
operator|.
name|values
argument_list|()
control|)
block|{
name|checkForConflicts
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iFixWeights
condition|)
name|fixWeights
argument_list|(
name|hibSession
argument_list|,
name|courseTable
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|iMPPCoursesRegExp
operator|!=
literal|null
operator|&&
operator|!
name|iMPPCoursesRegExp
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|iFixAssignedEnrollments
condition|)
block|{
name|boolean
name|hasFixed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|isFixed
argument_list|()
condition|)
block|{
name|hasFixed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasFixed
condition|)
name|getModel
argument_list|()
operator|.
name|addGlobalConstraint
argument_list|(
operator|new
name|FixedAssignments
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getModel
argument_list|()
operator|.
name|createAssignmentContexts
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/*         if (iIncludeLastLikeStudents) {             Hashtable<Long, Set<Long>> classAssignments = null;             if (iIncludeUseCommittedAssignments) {                 classAssignments = new Hashtable();                 List enrollments = hibSession.createQuery("select distinct se.studentId, se.clazz.uniqueId from StudentEnrollment se where "+                     "se.solution.commited=true and se.solution.owner.session.uniqueId=:sessionId").                     setLong("sessionId",session.getUniqueId().longValue()).setFetchSize(1000).list();                 setPhase("Loading last-like class assignments...", enrollments.size());                 for (Iterator i=enrollments.iterator();i.hasNext();) {                     Object[] o = (Object[])i.next(); incProgress();                     Long studentId = (Long)o[0];                     Long classId = (Long)o[1];                     Set<Long> classIds = classAssignments.get(studentId);                     if (classIds==null) {                         classIds = new HashSet<Long>();                         classAssignments.put(studentId, classIds);                     }                     classIds.add(classId);                 }             }                      Hashtable<Long, org.unitime.timetable.model.Student> students = new Hashtable<Long, org.unitime.timetable.model.Student>();             List enrollments = hibSession.createQuery(                     "select d, c.uniqueId from LastLikeCourseDemand d left join fetch d.student s, CourseOffering c left join c.demandOffering cx " +                     "where d.subjectArea.session.uniqueId=:sessionId and c.subjectArea.session.uniqueId=:sessionId and " +                     "((c.permId=null and d.subjectArea=c.subjectArea and d.courseNbr=c.courseNbr ) or "+                     " (c.permId!=null and c.permId=d.coursePermId) or "+                     " (cx.permId=null and d.subjectArea=cx.subjectArea and d.courseNbr=cx.courseNbr) or "+                     " (cx.permId!=null and cx.permId=d.coursePermId)) "+                     "order by s.uniqueId, d.priority, d.uniqueId").                     setLong("sessionId",session.getUniqueId().longValue()).setFetchSize(1000).list();             setPhase("Loading last-like course requests...", enrollments.size());             Hashtable lastLikeStudentTable = new Hashtable();             for (Iterator i=enrollments.iterator();i.hasNext();) {                 Object[] o = (Object[])i.next();incProgress();                 LastLikeCourseDemand d = (LastLikeCourseDemand)o[0];                 org.unitime.timetable.model.Student s = (org.unitime.timetable.model.Student)d.getStudent();                 Long courseOfferingId = (Long)o[1];                 if (s.getExternalUniqueId()!=null&& loadedStudentIds.contains(s.getExternalUniqueId())) continue;                 loadLastLikeStudent(hibSession, d, s, courseOfferingId, lastLikeStudentTable, courseTable, classTable, classAssignments);                 students.put(s.getUniqueId(), s);             }             for (Enumeration e=lastLikeStudentTable.elements();e.hasMoreElements();) {                 Student student = (Student)e.nextElement();                 getModel().addStudent(student);             	assignStudent(student, students.get(student.getId()));             }         } 		*/
if|if
condition|(
name|iLoadSectioningInfos
condition|)
block|{
name|List
argument_list|<
name|SectioningInfo
argument_list|>
name|infos
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|setPhase
argument_list|(
literal|"Loading sectioning infos..."
argument_list|,
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SectioningInfo
name|info
range|:
name|infos
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|info
operator|.
name|getNbrHoldingStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|section
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|)
operator|<=
name|section
operator|.
name|getSpaceExpected
argument_list|()
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Section "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" has high demand (limit: "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
operator|+
literal|", enrollment: "
operator|+
name|section
operator|.
name|getEnrollments
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|+
literal|", expected: "
operator|+
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|setPhase
argument_list|(
literal|"Done"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|checkTermination
parameter_list|()
block|{
if|if
condition|(
name|getTerminationCondition
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getTerminationCondition
argument_list|()
operator|.
name|canContinue
argument_list|(
operator|new
name|Solution
argument_list|<
name|Request
argument_list|,
name|Enrollment
argument_list|>
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The load was interrupted."
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setPhase
parameter_list|(
name|String
name|phase
parameter_list|,
name|long
name|progressMax
parameter_list|)
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|,
name|progressMax
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|incProgress
parameter_list|()
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|protected
class|class
name|Worker
extends|extends
name|Thread
block|{
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|iStudents
decl_stmt|;
specifier|public
name|Worker
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|index
parameter_list|,
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|setName
argument_list|(
literal|"OverrideValidator-"
operator|+
operator|(
literal|1
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
name|iStudents
operator|=
name|students
expr_stmt|;
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has started."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|iStudents
init|)
block|{
if|if
condition|(
operator|!
name|iCanContinue
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has stopped."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|iStudents
operator|.
name|hasNext
argument_list|()
condition|)
break|break;
name|student
operator|=
name|iStudents
operator|.
name|next
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|newStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|validateOverrides
argument_list|(
name|hibSession
argument_list|,
name|newStudent
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|iStudents
init|)
block|{
name|iHibSession
operator|.
name|merge
argument_list|(
name|newStudent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has finished."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|checkCriticalCourses
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
parameter_list|)
block|{
if|if
condition|(
name|iNrCheckCriticalThreads
operator|<=
literal|1
condition|)
block|{
name|setPhase
argument_list|(
literal|"Checking critical courses..."
argument_list|,
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
name|students
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iCheckForNoBatchStatus
operator|&&
name|s
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
continue|continue;
name|checkCriticalCourses
argument_list|(
name|hibSession
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|filteredStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
name|students
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getWaitlists
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|iCheckForNoBatchStatus
operator|&&
name|s
operator|.
name|hasSectioningStatusOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|nobatch
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iStudentQuery
operator|!=
literal|null
operator|&&
operator|!
name|iStudentQuery
operator|.
name|match
argument_list|(
operator|new
name|DbStudentMatcher
argument_list|(
name|s
argument_list|)
argument_list|)
condition|)
continue|continue;
name|filteredStudents
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
literal|"Checking critical courses..."
argument_list|,
name|filteredStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CriticalCoursesWorker
argument_list|>
name|workers
init|=
operator|new
name|ArrayList
argument_list|<
name|CriticalCoursesWorker
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|iterator
init|=
name|filteredStudents
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrCheckCriticalThreads
condition|;
name|i
operator|++
control|)
name|workers
operator|.
name|add
argument_list|(
operator|new
name|CriticalCoursesWorker
argument_list|(
name|hibSession
argument_list|,
name|i
argument_list|,
name|iterator
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CriticalCoursesWorker
name|worker
range|:
name|workers
control|)
name|worker
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|CriticalCoursesWorker
name|worker
range|:
name|workers
control|)
block|{
try|try
block|{
name|worker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|iCanContinue
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|worker
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|x
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
operator|!
name|iCanContinue
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The critical course check was interrupted."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|int
name|isCritical
parameter_list|(
name|CourseDemand
name|cd
parameter_list|,
name|CriticalCourses
name|critical
parameter_list|)
block|{
if|if
condition|(
name|critical
operator|==
literal|null
operator|||
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|0
return|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|getOrder
argument_list|()
operator|==
literal|0
operator|&&
name|critical
operator|.
name|isCritical
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
return|return
name|critical
operator|.
name|isCritical
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|protected
name|void
name|checkCriticalCourses
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
if|if
condition|(
name|iValidator
operator|==
literal|null
condition|)
block|{
name|iValidator
operator|=
operator|new
name|StudentSolver
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iValidator
operator|.
name|setInitalSolution
argument_list|(
operator|new
name|Solution
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|OnlineSectioningLog
operator|.
name|Entity
name|user
init|=
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|iOwnerId
argument_list|)
operator|.
name|setType
argument_list|(
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|OnlineSectioningHelper
name|helper
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|,
name|user
argument_list|)
decl_stmt|;
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|Builder
name|action
init|=
name|helper
operator|.
name|getAction
argument_list|()
decl_stmt|;
name|action
operator|.
name|setOperation
argument_list|(
literal|"critical-courses"
argument_list|)
expr_stmt|;
name|action
operator|.
name|setSession
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|iSessionId
argument_list|)
operator|.
name|setName
argument_list|(
name|iTerm
operator|+
name|iYear
operator|+
name|iInitiative
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStartTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|action
operator|.
name|setStudent
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUniqueId
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setExternalId
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|iStudentNameFormat
operator|.
name|format
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|c0
init|=
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
decl_stmt|;
try|try
block|{
name|CriticalCourses
name|critical
init|=
name|iCriticalCoursesProvider
operator|.
name|getCriticalCourses
argument_list|(
name|iValidator
argument_list|,
name|helper
argument_list|,
operator|new
name|XStudent
argument_list|(
name|s
argument_list|,
name|helper
argument_list|,
name|iFreeTimePattern
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|s
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
name|int
name|crit
init|=
name|isCritical
argument_list|(
name|cd
argument_list|,
name|critical
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getCritical
argument_list|()
operator|==
literal|null
operator|||
name|cd
operator|.
name|getCritical
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|crit
condition|)
block|{
name|cd
operator|.
name|setCritical
argument_list|(
name|crit
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|AdvisorCourseRequest
name|acr
range|:
name|s
operator|.
name|getAdvisorCourseRequests
argument_list|()
control|)
block|{
name|int
name|crit
init|=
name|acr
operator|.
name|isCritical
argument_list|(
name|critical
argument_list|)
decl_stmt|;
if|if
condition|(
name|acr
operator|.
name|getCritical
argument_list|()
operator|==
literal|null
operator|||
name|acr
operator|.
name|getCritical
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
name|crit
condition|)
block|{
name|acr
operator|.
name|setCritical
argument_list|(
name|crit
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|iUpdatedStudents
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|TRUE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FALSE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|action
operator|.
name|setResult
argument_list|(
name|OnlineSectioningLog
operator|.
name|Action
operator|.
name|ResultType
operator|.
name|FAILURE
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|.
name|addMessage
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLevel
argument_list|(
name|OnlineSectioningLog
operator|.
name|Message
operator|.
name|Level
operator|.
name|FATAL
argument_list|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|"null"
else|:
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|action
operator|.
name|setCpuTime
argument_list|(
name|OnlineSectioningHelper
operator|.
name|getCpuTime
argument_list|()
operator|-
name|c0
argument_list|)
expr_stmt|;
name|action
operator|.
name|setEndTime
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|OnlineSectioningLogger
operator|.
name|getInstance
argument_list|()
operator|.
name|record
argument_list|(
name|OnlineSectioningLog
operator|.
name|Log
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAction
argument_list|(
name|action
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|CriticalCoursesWorker
extends|extends
name|Thread
block|{
specifier|private
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
decl_stmt|;
specifier|private
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|iStudents
decl_stmt|;
specifier|public
name|CriticalCoursesWorker
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|int
name|index
parameter_list|,
name|Iterator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
parameter_list|)
block|{
name|setName
argument_list|(
literal|"CriticalCourses-"
operator|+
operator|(
literal|1
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
name|iStudents
operator|=
name|students
expr_stmt|;
name|iHibSession
operator|=
name|hibSession
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has started."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
init|=
literal|null
decl_stmt|;
synchronized|synchronized
init|(
name|iStudents
init|)
block|{
if|if
condition|(
operator|!
name|iCanContinue
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has stopped."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|iStudents
operator|.
name|hasNext
argument_list|()
condition|)
break|break;
name|student
operator|=
name|iStudents
operator|.
name|next
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|newStudent
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|checkCriticalCourses
argument_list|(
name|hibSession
argument_list|,
name|newStudent
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|iStudents
init|)
block|{
name|iHibSession
operator|.
name|merge
argument_list|(
name|newStudent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
name|getName
argument_list|()
operator|+
literal|" has finished."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ProjectedStudentMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|WeightedStudentId
name|iStudent
decl_stmt|;
specifier|public
name|ProjectedStudentMatcher
parameter_list|(
name|WeightedStudentId
name|student
parameter_list|)
block|{
name|iStudent
operator|=
name|student
expr_stmt|;
block|}
specifier|public
name|WeightedStudentId
name|student
parameter_list|()
block|{
return|return
name|iStudent
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|attr
operator|==
literal|null
operator|&&
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|AreaClasfMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"clasf"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"classification"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|AreaClasfMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getClasf
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"major"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|AreaClasfMajor
name|acm
range|:
name|student
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|Group
name|group
range|:
name|student
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
if|if
condition|(
name|eq
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

