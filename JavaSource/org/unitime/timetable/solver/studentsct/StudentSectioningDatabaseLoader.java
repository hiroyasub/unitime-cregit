begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2008 - 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassWaitList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LastLikeCourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SectioningInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|LastLikeStudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|ProjectedStudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|WeightedStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningLoader
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|AcademicAreaCode
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Choice
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|GroupReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|reservation
operator|.
name|Reservation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningDatabaseLoader
extends|extends
name|StudentSectioningLoader
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|StudentSectioningDatabaseLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iIncludeCourseDemands
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iIncludeUseCommittedAssignments
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMakeupAssignmentsFromRequiredPrefs
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iLoadStudentInfo
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iInitiative
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTerm
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iYear
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|iMakeupAssignmentId
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|iFreeTimePattern
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iDatePatternFirstDate
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iTweakLimits
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iLoadSectioningInfos
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iProjections
init|=
literal|false
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|StudentCourseDemands
name|iStudentCourseDemands
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentSectioningDatabaseLoader
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iIncludeCourseDemands
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeCourseDemands"
argument_list|,
name|iIncludeCourseDemands
argument_list|)
expr_stmt|;
name|iIncludeUseCommittedAssignments
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeUseCommittedAssignments"
argument_list|,
name|iIncludeUseCommittedAssignments
argument_list|)
expr_stmt|;
name|iLoadStudentInfo
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.LoadStudentInfo"
argument_list|,
name|iLoadStudentInfo
argument_list|)
expr_stmt|;
name|iMakeupAssignmentsFromRequiredPrefs
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.MakeupAssignmentsFromRequiredPrefs"
argument_list|,
name|iMakeupAssignmentsFromRequiredPrefs
argument_list|)
expr_stmt|;
name|iInitiative
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Initiative"
argument_list|)
expr_stmt|;
name|iYear
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Year"
argument_list|)
expr_stmt|;
name|iTerm
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Data.Term"
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iTweakLimits
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.TweakLimits"
argument_list|,
name|iTweakLimits
argument_list|)
expr_stmt|;
name|iLoadSectioningInfos
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.LoadSectioningInfos"
argument_list|,
name|iLoadSectioningInfos
argument_list|)
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|getModel
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|studentCourseDemandsClassName
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSct.ProjectedCourseDemadsClass"
argument_list|,
name|LastLikeStudentCourseDemands
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentCourseDemandsClassName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|studentCourseDemandsClassName
operator|=
name|studentCourseDemandsClassName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentCourseDemandsClassName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|studentCourseDemandsClassName
operator|=
literal|"org.unitime.timetable.solver.curricula."
operator|+
name|studentCourseDemandsClassName
expr_stmt|;
name|Class
name|studentCourseDemandsClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|studentCourseDemandsClassName
argument_list|)
decl_stmt|;
name|iStudentCourseDemands
operator|=
operator|(
name|StudentCourseDemands
operator|)
name|studentCourseDemandsClass
operator|.
name|getConstructor
argument_list|(
name|DataProperties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected demands: "
operator|+
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSct.ProjectedCourseDemadsClass"
argument_list|,
name|LastLikeStudentCourseDemands
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Load.IncludeLastLikeStudents"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|iStudentCourseDemands
operator|=
operator|new
name|ProjectedStudentCourseDemands
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected demands: Projected Student Course Demands"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected demands: None"
argument_list|)
expr_stmt|;
block|}
block|}
name|iProjections
operator|=
literal|"Projection"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"StudentSctBasic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|load
parameter_list|()
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
literal|"Loading input data ..."
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSessionId
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|iYear
operator|=
name|session
operator|.
name|getAcademicYear
argument_list|()
expr_stmt|;
name|iTerm
operator|=
name|session
operator|.
name|getAcademicTerm
argument_list|()
expr_stmt|;
name|iInitiative
operator|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Year"
argument_list|,
name|iYear
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Term"
argument_list|,
name|iTerm
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Initiative"
argument_list|,
name|iInitiative
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|session
operator|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|iInitiative
argument_list|,
name|iYear
argument_list|,
name|iTerm
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|iSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|iSessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|" not found!"
argument_list|)
throw|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"Loading data for "
operator|+
name|iInitiative
operator|+
literal|" "
operator|+
name|iTerm
operator|+
name|iYear
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|session
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|fatal
argument_list|(
literal|"Unable to load sectioning problem, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getInstructorIds
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
literal|":"
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|getInstructorNames
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|TreeSet
name|ts
init|=
operator|new
name|TreeSet
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|ts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|nameShort
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
literal|":"
operator|+
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|nameShort
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|TimeLocation
name|makeupTime
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|DatePattern
name|datePattern
init|=
name|c
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": no date pattern set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|tp
init|=
operator|(
name|TimePref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
literal|0
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|breakTime
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|time
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|String
name|pref
init|=
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|pattern
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
literal|0.77
argument_list|)
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|c
operator|.
name|getEffectiveTimePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": no time preference set"
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup time for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": no required time set"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|Vector
name|makeupRooms
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|Vector
name|rooms
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|c
operator|.
name|getEffectiveRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"        -- makup room for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": preference for "
operator|+
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not required"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|rp
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|RoomLocation
name|roomLocation
init|=
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
else|:
literal|null
operator|)
argument_list|,
literal|0
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|rooms
operator|.
name|addElement
argument_list|(
name|roomLocation
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
block|}
specifier|public
name|Placement
name|makeupPlacement
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|TimeLocation
name|time
init|=
name|makeupTime
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Vector
name|rooms
init|=
name|makeupRooms
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Vector
name|times
init|=
operator|new
name|Vector
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|times
operator|.
name|addElement
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|times
argument_list|,
name|rooms
argument_list|,
name|rooms
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|Placement
argument_list|(
literal|null
argument_list|,
name|time
argument_list|,
name|rooms
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|p
operator|.
name|setAssignmentId
argument_list|(
operator|new
name|Long
argument_list|(
name|iMakeupAssignmentId
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setBestAssignment
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"makup placement for "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|": "
operator|+
name|p
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
specifier|private
name|Offering
name|loadOffering
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|courseName
init|=
name|io
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|Offering
name|offering
init|=
operator|new
name|Offering
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|courseName
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|projected
init|=
operator|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|co
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|j
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|limit
operator|+=
name|ioc
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|limit
operator|=
name|co
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|limit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|unlimited
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|Course
name|course
init|=
operator|new
name|Course
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|offering
argument_list|,
name|limit
argument_list|,
name|projected
argument_list|)
decl_stmt|;
name|courseTable
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|class2section
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
name|ss2subpart
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Config
name|config
init|=
operator|new
name|Config
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
operator|-
literal|1
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|courseName
operator|+
literal|" ["
operator|+
name|ioc
operator|.
name|getName
argument_list|()
operator|+
literal|"]"
argument_list|,
name|offering
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|subparts
control|)
block|{
name|String
name|sufix
init|=
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
name|Subpart
name|parentSubpart
init|=
operator|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Subpart
operator|)
name|ss2subpart
operator|.
name|get
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSubpart
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Subpart "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
operator|+
literal|", but the appropriate parent subpart is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Subpart
name|subpart
init|=
operator|new
name|Subpart
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
operator|+
name|sufix
argument_list|,
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|config
argument_list|,
name|parentSubpart
argument_list|)
decl_stmt|;
name|subpart
operator|.
name|setAllowOverlap
argument_list|(
name|ss
operator|.
name|isStudentAllowOverlap
argument_list|()
argument_list|)
expr_stmt|;
name|ss2subpart
operator|.
name|put
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|j
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|parentSection
init|=
operator|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Section
operator|)
name|class2section
operator|.
name|get
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|parentSection
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"Class "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" has parent "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|", but the appropriate parent section is not loaded."
argument_list|)
expr_stmt|;
block|}
name|Assignment
name|a
init|=
name|c
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iMakeupAssignmentsFromRequiredPrefs
condition|)
block|{
name|p
operator|=
name|makeupPlacement
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|p
operator|=
name|a
operator|.
name|getPlacement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|datePatternName
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|minLimit
init|=
name|c
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|p
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|c
operator|.
name|getRoomRatio
argument_list|()
operator|)
operator|*
name|p
operator|.
name|getRoomSize
argument_list|()
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|Section
name|section
init|=
operator|new
name|Section
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|limit
argument_list|,
operator|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getClassSuffix
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getSectionNumberString
argument_list|()
else|:
name|c
operator|.
name|getClassSuffix
argument_list|()
else|:
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|,
name|subpart
argument_list|,
name|p
argument_list|,
name|getInstructorIds
argument_list|(
name|c
argument_list|)
argument_list|,
name|getInstructorNames
argument_list|(
name|c
argument_list|)
argument_list|,
name|parentSection
argument_list|)
decl_stmt|;
name|class2section
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
name|classTable
operator|.
name|put
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
name|reservation
range|:
name|io
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isExpired
argument_list|()
condition|)
continue|continue;
name|Reservation
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|IndividualReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
range|:
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
name|studentIds
operator|.
name|add
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|GroupReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
condition|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
name|cr
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|classifications
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
name|classifications
operator|.
name|add
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|majors
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
name|majors
operator|.
name|add
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|CurriculumReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
operator|(
name|reservation
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1.0
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
operator|)
argument_list|,
name|offering
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|classifications
argument_list|,
name|majors
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
condition|)
block|{
name|CourseOffering
name|co
init|=
operator|(
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|offering
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|r
operator|=
operator|new
name|CourseReservation
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Failed to load reservation "
operator|+
name|reservation
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|configs
label|:
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|addConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
continue|continue
name|configs
continue|;
block|}
block|}
block|}
name|classes
label|:
for|for
control|(
name|Class_
name|c
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
for|for
control|(
name|Config
name|config
range|:
name|offering
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|subpart
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|r
operator|.
name|addSection
argument_list|(
name|section
argument_list|)
expr_stmt|;
continue|continue
name|classes
continue|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
name|offering
return|;
block|}
specifier|public
name|Student
name|loadStudent
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
parameter_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
parameter_list|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Loading student "
operator|+
name|s
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (id="
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|", name="
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iLoadStudentInfo
condition|)
name|loadStudentInfo
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|s
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TimeLocation
name|ft
init|=
operator|new
name|TimeLocation
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|""
argument_list|,
name|iFreeTimePattern
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
operator|.
name|getPriority
argument_list|()
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Choice
argument_list|>
name|selChoices
init|=
operator|new
name|HashSet
argument_list|<
name|Choice
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Choice
argument_list|>
name|wlChoices
init|=
operator|new
name|HashSet
argument_list|<
name|Choice
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
name|TreeSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
name|crs
init|=
operator|new
name|TreeSet
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r1
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getOrder
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|crs
operator|.
name|addAll
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
name|cr
range|:
name|crs
control|)
block|{
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|k
init|=
name|cr
operator|.
name|getClassWaitLists
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassWaitList
name|cwl
init|=
operator|(
name|ClassWaitList
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|cwl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_SELECTION
argument_list|)
condition|)
name|selChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|cwl
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|ClassWaitList
operator|.
name|TYPE_WAITLIST
argument_list|)
condition|)
name|wlChoices
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|==
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
operator|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|==
literal|null
condition|?
name|s
operator|.
name|getClassEnrollments
argument_list|()
else|:
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|cd
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cd
operator|.
name|getPriority
argument_list|()
argument_list|,
name|cd
operator|.
name|isAlternative
argument_list|()
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
name|cd
operator|.
name|isWaitlist
argument_list|()
argument_list|,
name|cd
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|request
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|selChoices
argument_list|)
expr_stmt|;
name|request
operator|.
name|getWaitlistedChoices
argument_list|()
operator|.
name|addAll
argument_list|(
name|wlChoices
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|==
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|)
decl_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|!=
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") wrong number of classes ("
operator|+
literal|"has "
operator|+
name|assignedSections
operator|.
name|size
argument_list|()
operator|+
literal|", expected "
operator|+
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|Course
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Course
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Course
name|c1
parameter_list|,
name|Course
name|c2
parameter_list|)
block|{
return|return
operator|(
name|c1
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c1
operator|.
name|getCourseNumber
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c2
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|timeStamp
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Student "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") requests course "
operator|+
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" that is not loaded."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|!=
literal|null
condition|)
name|timeStamp
operator|.
name|put
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrl
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
literal|0
decl_stmt|;
name|courses
label|:
for|for
control|(
name|Course
name|course
range|:
name|courses
control|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|cx
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|cx
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|cx
argument_list|,
literal|true
argument_list|,
name|timeStamp
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Config
name|assignedConfig
init|=
literal|null
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getId
argument_list|()
operator|!=
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
condition|)
continue|continue;
name|Section
name|section
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getSection
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedConfig
operator|.
name|getId
argument_list|()
operator|!=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): classes from different configurations."
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
name|assignedConfig
operator|=
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|add
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): two or more classes of the same subpart."
argument_list|)
expr_stmt|;
continue|continue
name|courses
continue|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): class "
operator|+
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
name|Section
name|x
init|=
name|classTable
operator|.
name|get
argument_list|(
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  but a class with the same id is loaded, but under offering "
operator|+
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" (id is "
operator|+
name|x
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|", expected "
operator|+
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
continue|continue
name|courses
continue|;
block|}
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|==
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|Enrollment
name|enrollment
init|=
operator|new
name|Enrollment
argument_list|(
name|request
argument_list|,
literal|0
argument_list|,
name|assignedConfig
argument_list|,
name|assignedSections
argument_list|)
decl_stmt|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|assignedConfig
operator|!=
literal|null
operator|&&
name|assignedSections
operator|.
name|size
argument_list|()
operator|!=
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|request
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|"): wrong number of classes ("
operator|+
literal|"has "
operator|+
name|assignedSections
operator|.
name|size
argument_list|()
operator|+
literal|", expected "
operator|+
name|assignedConfig
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|student
return|;
block|}
specifier|public
name|void
name|assignStudent
parameter_list|(
name|Student
name|student
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
operator|&&
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|enrl
init|=
operator|(
name|Enrollment
operator|)
name|r
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|error
argument_list|(
literal|"There is a problem assigning "
operator|+
name|cr
operator|.
name|getName
argument_list|()
operator|+
literal|" to "
operator|+
operator|(
name|s
operator|==
literal|null
condition|?
name|student
operator|.
name|getId
argument_list|()
else|:
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatInitialLast
argument_list|)
operator|+
literal|" ("
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
expr_stmt|;
name|boolean
name|hasLimit
init|=
literal|false
decl_stmt|,
name|hasOverlap
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|enrl
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Request
name|q
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getAssignment
argument_list|()
operator|==
literal|null
operator|||
operator|!
operator|(
name|q
operator|instanceof
name|CourseRequest
operator|)
condition|)
continue|continue;
name|Enrollment
name|enrlx
init|=
operator|(
name|Enrollment
operator|)
name|q
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|enrlx
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|sectionx
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectionx
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sectionx
operator|.
name|getTime
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|+
literal|" overlaps with "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|hasOverlap
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|section
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
operator|+
literal|" has no space available (limit is "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTweakLimits
condition|)
block|{
name|section
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"    limit increased to "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
name|iProgress
operator|.
name|info
argument_list|(
literal|"  "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  config "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" has no space available (limit is "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTweakLimits
condition|)
block|{
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"    limit increased to "
operator|+
name|enrl
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|enrl
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|<
literal|1
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"  course "
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" has no space available (limit is "
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTweakLimits
condition|)
block|{
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"    limit increased to "
operator|+
name|enrl
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hasLimit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasLimit
operator|&&
operator|!
name|hasOverlap
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrlx
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|enrlx
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|sectionx
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|info
argument_list|(
literal|"    conflicts with "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|sectionx
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|sectionx
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|sectionx
operator|.
name|getTime
argument_list|()
operator|.
name|getLongName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrlx
operator|.
name|getRequest
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|student
operator|.
name|getId
argument_list|()
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"    of a different student"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasLimit
operator|&&
operator|!
name|hasOverlap
operator|&&
name|iTweakLimits
operator|&&
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getInitialAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
name|Enrollment
name|enrollment
init|=
name|ft
operator|.
name|createEnrollment
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|enrollment
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ft
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|ft
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/*     private void fixWeights(org.hibernate.Session hibSession) {         Hashtable<Course, Integer> lastLike = new Hashtable<Course, Integer>();         Hashtable<Course, Integer> real = new Hashtable<Course, Integer>();         iProgress.setPhase("Computing last-like request weights...", 2*getModel().getStudents().size());         for (Student student: getModel().getStudents()) {         	iProgress.incProgress();             for (Request request: student.getRequests()) {                 if (request instanceof CourseRequest) {                     CourseRequest courseRequest = (CourseRequest)request;                     Course course = courseRequest.getCourses().get(0);                     Integer cnt = (student.isDummy()?lastLike:real).get(course);                     (student.isDummy()?lastLike:real).put(course, new Integer((cnt==null?0:cnt.intValue())+1));                 }             }         }         for (Enumeration e=new Vector(getModel().getStudents()).elements();e.hasMoreElements();) {             Student student = (Student)e.nextElement(); iProgress.incProgress();             for (Enumeration f=new Vector(student.getRequests()).elements();f.hasMoreElements();) {                 Request request = (Request)f.nextElement();                 if (!student.isDummy()) {                     request.setWeight(1.0); continue;                 }                 if (request instanceof CourseRequest) {                     CourseRequest courseRequest = (CourseRequest)request;                     Course course = (Course)courseRequest.getCourses().get(0);                     Integer lastLikeCnt = (Integer)lastLike.get(course);                     Integer realCnt = (Integer)real.get(course);                     courseRequest.setWeight(Test.getLastLikeStudentWeight(course, realCnt==null?0:realCnt.intValue(), lastLikeCnt==null?0:lastLikeCnt.intValue()));                 } else request.setWeight(1.0);                  if (request.getWeight()<=0.0) {                     getModel().removeVariable(request);                     student.getRequests().remove(request);                 }             }             if (student.getRequests().isEmpty()) {                 getModel().getStudents().remove(student);             }         }     }     */
specifier|private
name|String
name|curriculum
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
operator|(
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getArea
argument_list|()
operator|+
literal|":"
operator|+
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCode
argument_list|()
operator|)
operator|+
literal|":"
operator|+
operator|(
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|":"
operator|+
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCode
argument_list|()
operator|)
return|;
block|}
name|Map
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|iCourse2Curricula2Weight
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|void
name|updateCurriculumCounts
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|String
name|curriculum
init|=
name|curriculum
argument_list|(
name|student
argument_list|)
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Course
name|course
init|=
operator|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
condition|?
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|getCourse
argument_list|()
else|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|c2w
init|=
name|iCourse2Curricula2Weight
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c2w
operator|==
literal|null
condition|)
block|{
name|c2w
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2Curricula2Weight
operator|.
name|put
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|c2w
argument_list|)
expr_stmt|;
block|}
name|Integer
name|cx
init|=
name|c2w
operator|.
name|get
argument_list|(
name|curriculum
argument_list|)
decl_stmt|;
name|c2w
operator|.
name|put
argument_list|(
name|curriculum
argument_list|,
literal|1
operator|+
operator|(
name|cx
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fixWeights
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Collection
argument_list|<
name|Course
argument_list|>
name|courses
parameter_list|)
block|{
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Computing projected request weights..."
argument_list|,
name|courses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|course
range|:
name|courses
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|cur2real
init|=
name|iCourse2Curricula2Weight
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cur2real
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|cur2proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
operator|||
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|Double
name|proj
init|=
name|cur2proj
operator|.
name|get
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cur2proj
operator|.
name|put
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|,
name|request
operator|.
name|getWeight
argument_list|()
operator|+
operator|(
name|proj
operator|==
literal|null
condition|?
literal|0.0
else|:
name|proj
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|cur
range|:
name|cur2proj
operator|.
name|keySet
argument_list|()
control|)
block|{
name|double
name|proj
init|=
name|cur2proj
operator|.
name|get
argument_list|(
name|cur
argument_list|)
decl_stmt|;
name|Integer
name|real
init|=
name|cur2real
operator|.
name|get
argument_list|(
name|cur
argument_list|)
decl_stmt|;
if|if
condition|(
name|real
operator|==
literal|null
condition|)
continue|continue;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Projected demands for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|cur
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|' '
argument_list|)
operator|+
literal|" multiplies by "
operator|+
operator|(
name|real
operator|>=
name|proj
condition|?
literal|0.0
else|:
operator|(
name|proj
operator|-
name|real
operator|)
operator|/
name|proj
operator|)
operator|+
literal|" (projected="
operator|+
name|proj
operator|+
literal|", real="
operator|+
name|real
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
operator|||
operator|!
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
continue|continue;
name|double
name|proj
init|=
name|cur2proj
operator|.
name|get
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|real
init|=
name|cur2real
operator|.
name|get
argument_list|(
name|curriculum
argument_list|(
name|request
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|real
operator|==
literal|null
condition|)
continue|continue;
name|request
operator|.
name|setWeight
argument_list|(
name|request
operator|.
name|getWeight
argument_list|()
operator|*
operator|(
name|real
operator|>=
name|proj
condition|?
literal|0.0
else|:
operator|(
name|proj
operator|-
name|real
operator|)
operator|/
name|proj
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|double
name|nrStudents
init|=
literal|0.0
decl_stmt|;
name|double
name|nrLastLike
init|=
literal|0.0
decl_stmt|;
name|int
name|lastLikeCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
name|course
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
continue|continue;
name|nrStudents
operator|+=
name|request
operator|.
name|getWeight
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
block|{
name|nrLastLike
operator|+=
name|request
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|lastLikeCount
operator|++
expr_stmt|;
block|}
block|}
name|double
name|projected
init|=
name|course
operator|.
name|getProjected
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|course
operator|.
name|getLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" is unlimited."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|projected
operator|<=
literal|0
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"No projected demand for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|", using course limit ("
operator|+
name|limit
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|projected
operator|=
name|limit
expr_stmt|;
block|}
if|else if
condition|(
name|limit
operator|<
name|projected
condition|)
block|{
if|if
condition|(
operator|!
name|iProjections
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Projected number of students is over course limit for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|Math
operator|.
name|round
argument_list|(
name|projected
argument_list|)
operator|+
literal|">"
operator|+
name|limit
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|projected
operator|=
name|limit
expr_stmt|;
block|}
if|if
condition|(
name|lastLikeCount
operator|<=
literal|0
condition|)
block|{
name|iProgress
operator|.
name|info
argument_list|(
literal|"No projected course demands for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|double
name|weight
init|=
operator|(
name|nrLastLike
operator|<=
literal|0
condition|?
literal|0
else|:
name|Math
operator|.
name|max
argument_list|(
literal|0.0
argument_list|,
name|projected
operator|-
operator|(
name|nrStudents
operator|-
name|nrLastLike
operator|)
argument_list|)
operator|/
name|nrLastLike
operator|)
decl_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Projected student weight for "
operator|+
name|course
operator|.
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|weight
operator|+
literal|" (projected="
operator|+
name|nrLastLike
operator|+
literal|", real="
operator|+
operator|(
name|nrStudents
operator|-
name|nrLastLike
operator|)
operator|+
literal|", limit="
operator|+
name|projected
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|int
name|left
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequest
name|request
range|:
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|course
operator|.
name|getRequests
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getStudent
argument_list|()
operator|.
name|isDummy
argument_list|()
condition|)
block|{
name|request
operator|.
name|setWeight
argument_list|(
name|weight
operator|*
name|request
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getWeight
argument_list|()
operator|<=
literal|0.0
condition|)
block|{
name|Student
name|student
init|=
name|request
operator|.
name|getStudent
argument_list|()
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|removeVariable
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
for|for
control|(
name|Course
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
name|c
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|getModel
argument_list|()
operator|.
name|removeStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|left
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|left
operator|<=
literal|0
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"No projected course demands needed for course "
operator|+
name|course
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|loadLastLikeStudent
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|LastLikeCourseDemand
name|d
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|,
name|Long
name|courseOfferingId
parameter_list|,
name|Hashtable
name|studentTable
parameter_list|,
name|Hashtable
name|courseTable
parameter_list|,
name|Hashtable
name|classTable
parameter_list|,
name|Hashtable
name|classAssignments
parameter_list|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Loading projected course demands of student "
operator|+
name|s
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (id="
operator|+
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|", name="
operator|+
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
operator|+
literal|") for "
operator|+
name|courseOfferingId
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|studentTable
operator|.
name|get
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLoadStudentInfo
condition|)
name|loadStudentInfo
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|studentTable
operator|.
name|put
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|Vector
name|courses
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
operator|(
name|Course
operator|)
name|courseTable
operator|.
name|get
argument_list|(
name|courseOfferingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
literal|"Course "
operator|+
name|courseOfferingId
operator|+
literal|" not loaded"
argument_list|)
expr_stmt|;
return|return;
block|}
name|courses
operator|.
name|addElement
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|priority
operator|++
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"added request "
operator|+
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|classAssignments
operator|!=
literal|null
operator|&&
operator|!
name|classAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HashSet
name|assignedSections
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|HashSet
name|classIds
init|=
operator|(
name|HashSet
operator|)
name|classAssignments
operator|.
name|get
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|classIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|request
operator|.
name|getSection
argument_list|(
name|classId
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|assignedSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignedSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"committed assignment: "
operator|+
name|assignedSections
argument_list|)
expr_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|request
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|containsAll
argument_list|(
name|assignedSections
argument_list|)
condition|)
block|{
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"found: "
operator|+
name|enrollment
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|void
name|loadStudentInfo
parameter_list|(
name|Student
name|student
parameter_list|,
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|s
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AcademicAreaClassification
name|aac
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getPosMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
operator|(
name|PosMajor
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getPosMajors
argument_list|()
operator|.
name|contains
argument_list|(
name|major
argument_list|)
condition|)
block|{
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*         HashSet majors = new HashSet();         HashSet minors = new HashSet();         for (Iterator i=s.getAcademicAreaClassifications().iterator();i.hasNext();) {             AcademicAreaClassification aac = (AcademicAreaClassification)i.next();             student.getAcademicAreaClasiffications().add(                     new AcademicAreaCode(aac.getAcademicArea().getAcademicAreaAbbreviation(),aac.getAcademicClassification().getCode()));             iProgress.trace("aac: "+aac.getAcademicArea().getAcademicAreaAbbreviation()+":"+aac.getAcademicClassification().getCode());             for (Iterator j=aac.getAcademicArea().getPosMajors().iterator();j.hasNext();) {                 PosMajor major = (PosMajor)j.next();                 if (s.getPosMajors().contains(major)) {                     student.getMajors().add(                             new AcademicAreaCode(aac.getAcademicArea().getAcademicAreaAbbreviation(),major.getCode()));                     majors.add(major);                     iProgress.trace("mj: "+aac.getAcademicArea().getAcademicAreaAbbreviation()+":"+major.getCode());                 }                                  }             for (Iterator j=aac.getAcademicArea().getPosMinors().iterator();j.hasNext();) {                 PosMinor minor = (PosMinor)j.next();                 if (s.getPosMinors().contains(minor)) {                     student.getMinors().add(                             new AcademicAreaCode(aac.getAcademicArea().getAcademicAreaAbbreviation(),minor.getCode()));                     minors.add(minor);                     iProgress.trace("mn: "+aac.getAcademicArea().getAcademicAreaAbbreviation()+":"+minor.getCode());                 }             }         }         for (Iterator i=s.getPosMajors().iterator();i.hasNext();) {             PosMajor major = (PosMajor)i.next();             if (!majors.contains(major)) {                 student.getMajors().add(new AcademicAreaCode(null,major.getCode()));                 iProgress.trace("mj: "+major.getCode());             }         }         for (Iterator i=s.getPosMinors().iterator();i.hasNext();) {             PosMinor minor = (PosMinor)i.next();             if (!minors.contains(minor)) {                 student.getMajors().add(new AcademicAreaCode(null,minor.getCode()));                 iProgress.trace("mn: "+minor.getCode());             }         }         */
block|}
specifier|public
specifier|static
name|BitSet
name|getFreeTimeBitSet
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|session
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|session
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|endMonth
operator|+
literal|1
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
operator|-
name|DateUtils
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|ret
init|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|datePatternName
parameter_list|(
name|TimeLocation
name|time
parameter_list|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|iDatePatternFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|cal
operator|.
name|setTime
argument_list|(
name|iDatePatternFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return
name|time
operator|.
name|getDatePatternName
argument_list|()
return|;
name|SimpleDateFormat
name|dpf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
return|return
name|dpf
operator|.
name|format
argument_list|(
name|first
argument_list|)
operator|+
operator|(
name|first
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|?
literal|""
else|:
literal|" - "
operator|+
name|dpf
operator|.
name|format
argument_list|(
name|last
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|Date
name|getDatePatternFirstDay
parameter_list|(
name|Session
name|s
parameter_list|)
block|{
return|return
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|s
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|s
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|load
parameter_list|(
name|Session
name|session
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|iFreeTimePattern
operator|=
name|getFreeTimeBitSet
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iDatePatternFirstDate
operator|=
name|getDatePatternFirstDay
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|courseTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io "
operator|+
literal|"left join fetch io.courseOfferings as co "
operator|+
literal|"left join fetch io.instrOfferingConfigs as ioc "
operator|+
literal|"left join fetch ioc.schedulingSubparts as ss "
operator|+
literal|"left join fetch ss.classes as c "
operator|+
literal|"left join fetch io.reservations as r "
operator|+
literal|"where "
operator|+
literal|"io.session.uniqueId = :sessionId and io.notOffered = false"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading course offerings..."
argument_list|,
name|offerings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Offering
name|offering
init|=
name|loadOffering
argument_list|(
name|io
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
name|getModel
argument_list|()
operator|.
name|addOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iIncludeCourseDemands
operator|||
name|iProjections
condition|)
block|{
name|List
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
operator|(
name|iLoadStudentInfo
condition|?
literal|"left join fetch s.academicAreaClassifications as a left join fetch s.posMajors as mj "
else|:
literal|""
operator|)
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading student requests..."
argument_list|,
name|students
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
operator|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|s
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|loadStudent
argument_list|(
name|s
argument_list|,
name|courseTable
argument_list|,
name|classTable
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|updateCurriculumCounts
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProjections
condition|)
block|{
comment|// Decrease the limits accordingly
for|for
control|(
name|Request
name|request
range|:
name|student
operator|.
name|getRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getInitialAssignment
argument_list|()
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Enrollment
name|enrollment
init|=
name|request
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|enrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrollment
operator|.
name|getConfig
argument_list|()
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|section
operator|.
name|setLimit
argument_list|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|setLimit
argument_list|(
name|enrollment
operator|.
name|getCourse
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|instanceof
name|IndividualReservation
condition|)
operator|(
operator|(
name|IndividualReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|instanceof
name|GroupReservation
condition|)
operator|(
operator|(
name|GroupReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|getStudentIds
argument_list|()
operator|.
name|remove
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|instanceof
name|CurriculumReservation
operator|&&
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|>
literal|0
condition|)
operator|(
operator|(
name|CurriculumReservation
operator|)
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|setLimit
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|.
name|getLimit
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
for|for
control|(
name|Course
name|course
range|:
operator|(
operator|(
name|CourseRequest
operator|)
name|request
operator|)
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|course
operator|.
name|getRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|assignStudent
argument_list|(
name|student
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iStudentCourseDemands
operator|!=
literal|null
condition|)
block|{
name|iStudentCourseDemands
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|iProgress
argument_list|,
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|,
name|offerings
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|classAssignments
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iIncludeUseCommittedAssignments
operator|&&
operator|!
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|)
block|{
name|classAssignments
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|List
name|enrollments
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct se.studentId, se.clazz.uniqueId from StudentEnrollment se where "
operator|+
literal|"se.solution.commited=true and se.solution.owner.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading projected class assignments..."
argument_list|,
name|enrollments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|enrollments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|o
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|classId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|classAssignments
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|==
literal|null
condition|)
block|{
name|classIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|classAssignments
operator|.
name|put
argument_list|(
name|studentId
argument_list|,
name|classIds
argument_list|)
expr_stmt|;
block|}
name|classIds
operator|.
name|add
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading projected course requests..."
argument_list|,
name|offerings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|requestId
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|Course
name|course
init|=
name|courseTable
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|demands
init|=
name|iStudentCourseDemands
operator|.
name|getDemands
argument_list|(
name|co
argument_list|)
decl_stmt|;
if|if
condition|(
name|demands
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|WeightedStudentId
name|demand
range|:
name|demands
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|students
operator|.
name|get
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|demand
operator|.
name|getArea
argument_list|()
operator|!=
literal|null
operator|&&
name|demand
operator|.
name|getClasf
argument_list|()
operator|!=
literal|null
condition|)
name|student
operator|.
name|getAcademicAreaClasiffications
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|demand
operator|.
name|getArea
argument_list|()
argument_list|,
name|demand
operator|.
name|getClasf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|demand
operator|.
name|getArea
argument_list|()
operator|!=
literal|null
operator|&&
name|demand
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|demand
operator|.
name|getMajor
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|String
name|mj
range|:
name|demand
operator|.
name|getMajor
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
control|)
name|student
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|AcademicAreaCode
argument_list|(
name|demand
operator|.
name|getArea
argument_list|()
argument_list|,
name|mj
argument_list|)
argument_list|)
expr_stmt|;
name|students
operator|.
name|put
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Course
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|(
name|requestId
operator|--
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
name|student
argument_list|,
name|courses
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|request
operator|.
name|setWeight
argument_list|(
name|demand
operator|.
name|getWeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|classAssignments
operator|!=
literal|null
operator|&&
operator|!
name|classAssignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
name|classAssignments
operator|.
name|get
argument_list|(
name|demand
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classIds
operator|!=
literal|null
condition|)
block|{
name|enrollments
label|:
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|request
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Section
name|section
range|:
name|enrollment
operator|.
name|getSections
argument_list|()
control|)
if|if
condition|(
operator|!
name|classIds
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue
name|enrollments
continue|;
name|request
operator|.
name|setInitialAssignment
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
name|students
operator|.
name|values
argument_list|()
control|)
block|{
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|assignStudent
argument_list|(
name|student
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|fixWeights
argument_list|(
name|hibSession
argument_list|,
name|courseTable
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/*         if (iIncludeLastLikeStudents) {             Hashtable<Long, Set<Long>> classAssignments = null;             if (iIncludeUseCommittedAssignments) {                 classAssignments = new Hashtable();                 List enrollments = hibSession.createQuery("select distinct se.studentId, se.clazz.uniqueId from StudentEnrollment se where "+                     "se.solution.commited=true and se.solution.owner.session.uniqueId=:sessionId").                     setLong("sessionId",session.getUniqueId().longValue()).setFetchSize(1000).list();                 iProgress.setPhase("Loading last-like class assignments...", enrollments.size());                 for (Iterator i=enrollments.iterator();i.hasNext();) {                     Object[] o = (Object[])i.next(); iProgress.incProgress();                     Long studentId = (Long)o[0];                     Long classId = (Long)o[1];                     Set<Long> classIds = classAssignments.get(studentId);                     if (classIds==null) {                         classIds = new HashSet<Long>();                         classAssignments.put(studentId, classIds);                     }                     classIds.add(classId);                 }             }                      Hashtable<Long, org.unitime.timetable.model.Student> students = new Hashtable<Long, org.unitime.timetable.model.Student>();             List enrollments = hibSession.createQuery(                     "select d, c.uniqueId from LastLikeCourseDemand d left join fetch d.student s, CourseOffering c left join c.demandOffering cx " +                     "where d.subjectArea.session.uniqueId=:sessionId and c.subjectArea.session.uniqueId=:sessionId and " +                     "((c.permId=null and d.subjectArea=c.subjectArea and d.courseNbr=c.courseNbr ) or "+                     " (c.permId!=null and c.permId=d.coursePermId) or "+                     " (cx.permId=null and d.subjectArea=cx.subjectArea and d.courseNbr=cx.courseNbr) or "+                     " (cx.permId!=null and cx.permId=d.coursePermId)) "+                     "order by s.uniqueId, d.priority, d.uniqueId").                     setLong("sessionId",session.getUniqueId().longValue()).setFetchSize(1000).list();             iProgress.setPhase("Loading last-like course requests...", enrollments.size());             Hashtable lastLikeStudentTable = new Hashtable();             for (Iterator i=enrollments.iterator();i.hasNext();) {                 Object[] o = (Object[])i.next();iProgress.incProgress();                 LastLikeCourseDemand d = (LastLikeCourseDemand)o[0];                 org.unitime.timetable.model.Student s = (org.unitime.timetable.model.Student)d.getStudent();                 Long courseOfferingId = (Long)o[1];                 if (s.getExternalUniqueId()!=null&& loadedStudentIds.contains(s.getExternalUniqueId())) continue;                 loadLastLikeStudent(hibSession, d, s, courseOfferingId, lastLikeStudentTable, courseTable, classTable, classAssignments);                 students.put(s.getUniqueId(), s);             }             for (Enumeration e=lastLikeStudentTable.elements();e.hasMoreElements();) {                 Student student = (Student)e.nextElement();                 getModel().addStudent(student);             	assignStudent(student, students.get(student.getId()));             }         } 		*/
if|if
condition|(
name|iLoadSectioningInfos
condition|)
block|{
name|List
argument_list|<
name|SectioningInfo
argument_list|>
name|infos
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from SectioningInfo i where i.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Loading sectioning infos..."
argument_list|,
name|infos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SectioningInfo
name|info
range|:
name|infos
control|)
block|{
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
name|Section
name|section
init|=
name|classTable
operator|.
name|get
argument_list|(
name|info
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
block|{
name|section
operator|.
name|setSpaceExpected
argument_list|(
name|info
operator|.
name|getNbrExpectedStudents
argument_list|()
argument_list|)
expr_stmt|;
name|section
operator|.
name|setSpaceHeld
argument_list|(
name|info
operator|.
name|getNbrHoldingStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getLimit
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|<=
name|section
operator|.
name|getSpaceExpected
argument_list|()
condition|)
name|iProgress
operator|.
name|info
argument_list|(
literal|"Section "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|section
operator|.
name|getName
argument_list|()
operator|+
literal|" has high demand (limit: "
operator|+
name|section
operator|.
name|getLimit
argument_list|()
operator|+
literal|", enrollment: "
operator|+
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|", expected: "
operator|+
name|section
operator|.
name|getSpaceExpected
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|setPhase
argument_list|(
literal|"Done"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

