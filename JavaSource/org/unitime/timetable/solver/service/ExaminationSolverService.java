begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|extension
operator|.
name|ConflictStatistics
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|InitializingBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverParameterGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverPredefinedSetting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverPredefinedSettingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolver
operator|.
name|ExamSolverDisposeListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|BackupFileFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|RemoteSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|RemoteSolverServerProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|remote
operator|.
name|SolverRegisterService
import|;
end_import

begin_class
annotation|@
name|Service
argument_list|(
literal|"examinationSolverService"
argument_list|)
specifier|public
class|class
name|ExaminationSolverService
implements|implements
name|SolverService
argument_list|<
name|ExamSolverProxy
argument_list|>
implements|,
name|InitializingBean
implements|,
name|DisposableBean
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ExaminationSolverService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|iSolvers
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PassivationThread
name|iPassivation
init|=
literal|null
decl_stmt|;
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|DataProperties
name|createConfig
parameter_list|(
name|Long
name|settingsId
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|options
parameter_list|)
block|{
name|DataProperties
name|properties
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
comment|// Load properties
for|for
control|(
name|SolverParameterDef
name|def
range|:
operator|(
name|List
argument_list|<
name|SolverParameterDef
argument_list|>
operator|)
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SolverParameterDef where group.type = :type"
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"type"
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeExam
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|def
operator|.
name|getDefault
argument_list|()
operator|!=
literal|null
condition|)
name|properties
operator|.
name|put
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|def
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
name|options
operator|.
name|containsKey
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|properties
operator|.
name|put
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|def
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolverPredefinedSetting
name|settings
init|=
name|SolverPredefinedSettingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|settingsId
argument_list|)
decl_stmt|;
for|for
control|(
name|SolverParameter
name|param
range|:
name|settings
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|isVisible
argument_list|()
operator|||
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|SolverParameterGroup
operator|.
name|sTypeExam
condition|)
continue|continue;
name|properties
operator|.
name|put
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
operator|&&
name|options
operator|.
name|containsKey
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|properties
operator|.
name|put
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|options
operator|.
name|get
argument_list|(
name|param
operator|.
name|getDefinition
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SettingsId"
argument_list|,
name|settings
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Generate extensions
name|String
name|ext
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"ExamGeneral.CBS"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ext
operator|.
name|isEmpty
argument_list|()
condition|)
name|ext
operator|+=
literal|";"
expr_stmt|;
name|ext
operator|+=
name|ConflictStatistics
operator|.
name|class
operator|.
name|getName
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"ConflictStatistics.Print"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|String
name|mode
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.Mode"
argument_list|,
literal|"Initial"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"MPP"
operator|.
name|equals
argument_list|(
name|mode
argument_list|)
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.MPP"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
name|ext
argument_list|)
expr_stmt|;
comment|// Interactive mode?
if|if
condition|(
name|properties
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Basic.DisobeyHard"
argument_list|,
literal|false
argument_list|)
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InteractiveMode"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// When finished?
if|if
condition|(
literal|"No Action"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Save"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"Save and Unload"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"ExamBasic.WhenFinished"
argument_list|)
argument_list|)
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
comment|// XML save/load properties
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Xml.ShowNames"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Exam.GreatDeluge"
argument_list|,
operator|(
literal|"Great Deluge"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Exam.Algorithm"
argument_list|,
literal|"Great Deluge"
argument_list|)
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
comment|// Distances Matrics
if|if
condition|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
operator|==
literal|null
operator|||
name|properties
operator|.
name|getProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"DEFAULT"
argument_list|)
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Distances.Ellipsoid"
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|ApplicationProperty
operator|.
name|DistanceEllipsoid
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|expand
argument_list|()
expr_stmt|;
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExamSolverProxy
name|createSolver
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|isAuthenticated
argument_list|()
operator|||
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|removeSolver
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|host
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.Host"
argument_list|)
decl_stmt|;
name|String
name|instructorFormat
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|!=
literal|null
condition|)
block|{
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|server
operator|.
name|getAddress
argument_list|()
operator|.
name|getHostName
argument_list|()
operator|+
literal|":"
operator|+
name|server
operator|.
name|getPort
argument_list|()
argument_list|)
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|server
operator|.
name|createExamSolver
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
block|}
block|}
name|int
name|memoryLimit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|ApplicationProperty
operator|.
name|SolverMemoryLimit
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"local"
operator|.
name|equals
argument_list|(
name|host
argument_list|)
operator|&&
operator|!
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RemoteSolverServerProxy
name|bestServer
init|=
literal|null
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|server
operator|.
name|getAvailableMemory
argument_list|()
operator|<
name|memoryLimit
condition|)
continue|continue;
if|if
condition|(
name|bestServer
operator|==
literal|null
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
if|else if
condition|(
name|bestServer
operator|.
name|getUsage
argument_list|()
operator|>
name|server
operator|.
name|getUsage
argument_list|()
condition|)
block|{
name|bestServer
operator|=
name|server
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bestServer
operator|!=
literal|null
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|bestServer
operator|.
name|createExamSolver
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
if|if
condition|(
name|getAvailableMemory
argument_list|()
operator|<
name|memoryLimit
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not enough resources to create a solver instance, please try again later."
argument_list|)
throw|;
name|ExamSolverProxy
name|solver
init|=
operator|new
name|ExamSolver
argument_list|(
name|properties
argument_list|,
operator|new
name|SolverOnDispose
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|solver
operator|.
name|load
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iSolvers
operator|.
name|put
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to start the solver: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|instanceof
name|RuntimeException
condition|?
operator|(
name|RuntimeException
operator|)
name|e
else|:
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|private
name|long
name|getAvailableMemory
parameter_list|()
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
return|return
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
operator|-
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
operator|+
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
return|;
block|}
specifier|public
name|ExamSolverProxy
name|getSolver
parameter_list|(
name|String
name|puid
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
try|try
block|{
name|ExamSolverProxy
name|proxy
init|=
name|iSolvers
operator|.
name|get
argument_list|(
name|puid
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|proxy
return|;
block|}
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
name|proxy
operator|=
name|server
operator|.
name|getExamSolver
argument_list|(
name|puid
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sessionId
operator|!=
literal|null
operator|&&
operator|!
name|sessionId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|proxy
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to retrieve solver, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExamSolverProxy
name|getSolver
parameter_list|()
block|{
name|ExamSolverProxy
name|solver
init|=
operator|(
name|ExamSolverProxy
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|solver
operator|instanceof
name|RemoteSolverProxy
operator|&&
operator|(
operator|(
name|RemoteSolverProxy
operator|)
name|solver
operator|)
operator|.
name|exists
argument_list|()
condition|)
return|return
operator|(
name|ExamSolverProxy
operator|)
name|solver
return|;
else|else
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|isAuthenticated
argument_list|()
condition|)
return|return
literal|null
return|;
name|Long
name|sessionId
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|solver
operator|=
name|getSolver
argument_list|(
name|puid
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
block|}
name|solver
operator|=
name|getSolver
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|,
name|solver
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
annotation|@
name|Override
specifier|public
name|ExamSolverProxy
name|getSolverNoSessionCheck
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|isAuthenticated
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|puid
operator|!=
literal|null
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|getSolver
argument_list|(
name|puid
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
return|return
name|solver
return|;
block|}
return|return
name|getSolver
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeSolver
parameter_list|()
block|{
try|try
block|{
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationSolver
argument_list|)
expr_stmt|;
name|ExamSolverProxy
name|solver
init|=
name|getSolverNoSessionCheck
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|solver
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
name|sessionContext
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|ExaminationUser
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to remove a solver: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ExamSolverProxy
name|reload
parameter_list|(
name|DataProperties
name|properties
parameter_list|)
block|{
try|try
block|{
name|ExamSolverProxy
name|solver
init|=
name|getSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|solver
operator|==
literal|null
condition|)
return|return
name|createSolver
argument_list|(
name|properties
argument_list|)
return|;
name|DataProperties
name|oldProperties
init|=
name|solver
operator|.
name|getProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"Exam.Type"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"Exam.Type"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|oldProperties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.StartTime"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|new
name|Date
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|instructorFormat
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|NameFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorFormat
operator|!=
literal|null
condition|)
name|properties
operator|.
name|setProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|instructorFormat
argument_list|)
expr_stmt|;
name|solver
operator|.
name|reload
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|solver
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to reload the solver: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|(
name|e
operator|instanceof
name|RuntimeException
condition|?
operator|(
name|RuntimeException
operator|)
name|e
else|:
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
operator|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|getSolvers
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|solvers
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
argument_list|(
name|iSolvers
argument_list|)
decl_stmt|;
name|Set
name|servers
init|=
name|SolverRegisterService
operator|.
name|getInstance
argument_list|()
operator|.
name|getServers
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|servers
init|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|servers
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RemoteSolverServerProxy
name|server
init|=
operator|(
name|RemoteSolverServerProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|isActive
argument_list|()
condition|)
continue|continue;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|serverSolvers
init|=
name|server
operator|.
name|getExamSolvers
argument_list|()
decl_stmt|;
if|if
condition|(
name|serverSolvers
operator|!=
literal|null
condition|)
name|solvers
operator|.
name|putAll
argument_list|(
name|serverSolvers
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to retrieve solvers from "
operator|+
name|server
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|solvers
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|getLocalSolvers
parameter_list|()
block|{
return|return
name|iSolvers
return|;
block|}
specifier|private
class|class
name|SolverOnDispose
implements|implements
name|ExamSolverDisposeListener
block|{
name|String
name|iOwnerId
init|=
literal|null
decl_stmt|;
specifier|public
name|SolverOnDispose
parameter_list|(
name|String
name|ownerId
parameter_list|)
block|{
name|iOwnerId
operator|=
name|ownerId
expr_stmt|;
block|}
specifier|public
name|void
name|onDispose
parameter_list|()
block|{
name|iSolvers
operator|.
name|remove
argument_list|(
name|iOwnerId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|backup
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
if|if
condition|(
name|folder
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|folder
operator|.
name|isDirectory
argument_list|()
condition|)
return|return;
name|folder
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
index|[]
name|old
init|=
name|folder
operator|.
name|listFiles
argument_list|(
operator|new
name|BackupFileFilter
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeExam
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|old
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|old
index|[
name|i
index|]
operator|.
name|delete
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|iSolvers
init|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|entry
range|:
name|iSolvers
operator|.
name|entrySet
argument_list|()
control|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|backup
argument_list|(
name|folder
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|restore
parameter_list|(
name|File
name|folder
parameter_list|,
name|File
name|passivateFolder
parameter_list|)
block|{
if|if
condition|(
operator|!
name|folder
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|folder
operator|.
name|isDirectory
argument_list|()
condition|)
return|return;
synchronized|synchronized
init|(
name|iSolvers
init|)
block|{
for|for
control|(
name|ExamSolverProxy
name|solver
range|:
operator|new
name|ArrayList
argument_list|<
name|ExamSolverProxy
argument_list|>
argument_list|(
name|iSolvers
operator|.
name|values
argument_list|()
argument_list|)
control|)
name|solver
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|iSolvers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
index|[]
name|files
init|=
name|folder
operator|.
name|listFiles
argument_list|(
operator|new
name|BackupFileFilter
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
name|SolverParameterGroup
operator|.
name|sTypeExam
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|files
index|[
name|i
index|]
decl_stmt|;
name|String
name|puid
init|=
name|file
operator|.
name|getName
argument_list|()
operator|.
name|substring
argument_list|(
literal|"exam_"
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|getName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|ExamSolverProxy
name|solver
init|=
operator|new
name|ExamSolver
argument_list|(
operator|new
name|DataProperties
argument_list|()
argument_list|,
operator|new
name|SolverOnDispose
argument_list|(
name|puid
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|solver
operator|.
name|restore
argument_list|(
name|folder
argument_list|,
name|puid
argument_list|)
condition|)
block|{
if|if
condition|(
name|passivateFolder
operator|!=
literal|null
condition|)
name|solver
operator|.
name|passivate
argument_list|(
name|passivateFolder
argument_list|,
name|puid
argument_list|)
expr_stmt|;
name|iSolvers
operator|.
name|put
argument_list|(
name|puid
argument_list|,
name|solver
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterPropertiesSet
parameter_list|()
throws|throws
name|Exception
block|{
name|iPassivation
operator|=
operator|new
name|PassivationThread
argument_list|(
name|ApplicationProperties
operator|.
name|getPassivationFolder
argument_list|()
argument_list|)
expr_stmt|;
name|iPassivation
operator|.
name|start
argument_list|()
expr_stmt|;
name|restore
argument_list|(
name|ApplicationProperties
operator|.
name|getRestoreFolder
argument_list|()
argument_list|,
name|ApplicationProperties
operator|.
name|getPassivationFolder
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
name|backup
argument_list|(
name|ApplicationProperties
operator|.
name|getRestoreFolder
argument_list|()
argument_list|)
expr_stmt|;
name|iPassivation
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|PassivationThread
extends|extends
name|Thread
block|{
specifier|private
name|File
name|iFolder
init|=
literal|null
decl_stmt|;
specifier|public
name|long
name|iDelay
init|=
literal|30000
decl_stmt|;
specifier|public
name|boolean
name|iContinue
init|=
literal|true
decl_stmt|;
specifier|public
name|PassivationThread
parameter_list|(
name|File
name|folder
parameter_list|)
block|{
name|iFolder
operator|=
name|folder
expr_stmt|;
name|setName
argument_list|(
literal|"Passivation[Examination]"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setPriority
argument_list|(
name|Thread
operator|.
name|MIN_PRIORITY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver passivation thread started."
argument_list|)
expr_stmt|;
while|while
condition|(
name|iContinue
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ExamSolverProxy
argument_list|>
name|entry
range|:
name|iSolvers
operator|.
name|entrySet
argument_list|()
control|)
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|passivateIfNeeded
argument_list|(
name|iFolder
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sleep
argument_list|(
name|iDelay
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
break|break;
block|}
block|}
name|sLog
operator|.
name|info
argument_list|(
literal|"Solver passivation thread finished."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Solver passivation thread failed, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|iContinue
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isAlive
argument_list|()
condition|)
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

