begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlockComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventDateMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|MeetingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|ui
operator|.
name|ClassTimeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultRoomAvailabilityService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DefaultRoomAvailabilityService
operator|.
name|MeetingTimeBlock
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CommitedClassAssignmentProxy
implements|implements
name|ClassAssignmentProxy
block|{
specifier|private
specifier|static
name|AssignmentPreferenceInfo
name|sCommitedAssignmentPreferenceInfo
init|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
decl_stmt|;
specifier|public
name|CommitedClassAssignmentProxy
parameter_list|()
block|{
block|}
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
name|getAssignment
argument_list|(
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|classId
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
return|;
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
return|return
name|sCommitedAssignmentPreferenceInfo
return|;
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
name|sCommitedAssignmentPreferenceInfo
return|;
block|}
specifier|public
name|Hashtable
name|getAssignmentTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
block|{
name|Hashtable
name|assignments
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classOrClassId
operator|instanceof
name|Object
index|[]
condition|)
name|classOrClassId
operator|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|classOrClassId
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignment
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|assignments
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
specifier|public
name|Hashtable
name|getAssignmentInfoTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
block|{
name|Hashtable
name|infos
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classOrClassId
operator|instanceof
name|Object
index|[]
condition|)
name|classOrClassId
operator|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|classOrClassId
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignmentInfo
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|infos
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasConflicts
parameter_list|(
name|Long
name|offeringId
parameter_list|)
block|{
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
operator|||
name|offering
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
continue|continue;
name|Assignment
name|assignment
init|=
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|room
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|room
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|room
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getParentRoom
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|getParentRoom
argument_list|()
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|r
operator|.
name|getParentRoom
argument_list|()
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|Room
name|p
range|:
name|r
operator|.
name|getPartitions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
for|for
control|(
name|Assignment
name|a
range|:
name|p
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|di
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|equals
argument_list|(
name|instructor
argument_list|)
operator|||
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareInstructor
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.clazz from StudentClassEnrollment e where e.student.externalUniqueId = :externalId and e.student.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
return|return
literal|true
return|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Class_
name|child
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|DefaultRoomAvailabilityService
condition|)
block|{
name|boolean
name|changePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|ignorePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentIgnorePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|changePast
operator|||
name|ignorePast
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|Number
operator|)
name|MeetingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(mx) from ClassEvent e inner join e.meetings m, Meeting mx "
operator|+
literal|"where e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.uniqueId = :offeringId and mx.event.class != ClassEvent and m.approvalStatus = 1 and mx.approvalStatus = 1 and "
operator|+
literal|"m.locationPermanentId = mx.locationPermanentId and m.meetingDate = mx.meetingDate and "
operator|+
literal|"m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod and mx.meetingDate>= :today"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"today"
argument_list|,
name|today
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|Number
operator|)
name|MeetingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(mx) from ClassEvent e inner join e.meetings m, Meeting mx "
operator|+
literal|"where e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.uniqueId = :offeringId and mx.event.class != ClassEvent and m.approvalStatus = 1 and mx.approvalStatus = 1 and "
operator|+
literal|"m.locationPermanentId = mx.locationPermanentId and m.meetingDate = mx.meetingDate and "
operator|+
literal|"m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
if|else if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Date
index|[]
name|bounds
init|=
name|DatePattern
operator|.
name|getBounds
argument_list|(
name|offering
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|ignorePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentIgnorePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Assignment
name|assignment
init|=
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassTimeInfo
name|period
init|=
operator|new
name|ClassTimeInfo
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
operator|!
name|times
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|timesToCheck
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|changePast
operator|||
name|ignorePast
condition|)
block|{
name|timesToCheck
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
if|if
condition|(
operator|!
name|time
operator|.
name|getEndTime
argument_list|()
operator|.
name|before
argument_list|(
name|today
argument_list|)
condition|)
name|timesToCheck
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|timesToCheck
operator|=
name|times
expr_stmt|;
block|}
if|if
condition|(
name|period
operator|.
name|overlaps
argument_list|(
name|timesToCheck
argument_list|)
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Assignment
argument_list|>
name|getConflicts
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|null
return|;
name|Assignment
name|assignment
init|=
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|Assignment
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|<
name|Assignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|room
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|room
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getParentRoom
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|getParentRoom
argument_list|()
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|r
operator|.
name|getParentRoom
argument_list|()
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Room
name|p
range|:
name|r
operator|.
name|getPartitions
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
for|for
control|(
name|Assignment
name|a
range|:
name|p
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|di
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|equals
argument_list|(
name|instructor
argument_list|)
operator|||
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
operator|||
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareInstructor
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
operator|(
name|List
argument_list|<
name|Class_
argument_list|>
operator|)
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select e.clazz from StudentClassEnrollment e where e.student.externalUniqueId = :externalId and e.student.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|Queue
argument_list|<
name|Class_
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|(
name|clazz
operator|.
name|getChildClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Class_
name|child
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|child
operator|=
name|children
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|child
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|children
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getChildClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|child
operator|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conflicts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|TimeBlock
argument_list|>
name|getConflictingTimeBlocks
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|TimeBlock
argument_list|>
name|conflicts
init|=
operator|new
name|TreeSet
argument_list|<
name|TimeBlock
argument_list|>
argument_list|(
operator|new
name|TimeBlockComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Assignment
name|assignment
init|=
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|ignorePermIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
operator|&&
name|assignment
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Date
index|[]
name|bounds
init|=
name|DatePattern
operator|.
name|getBounds
argument_list|(
name|clazz
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|ignorePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentIgnorePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|ClassTimeInfo
name|period
init|=
operator|new
name|ClassTimeInfo
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
name|ignorePermIds
operator|.
name|add
argument_list|(
name|room
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
init|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|bounds
index|[
literal|0
index|]
argument_list|,
name|bounds
index|[
literal|1
index|]
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
operator|!
name|times
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|timesToCheck
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|changePast
operator|||
name|ignorePast
condition|)
block|{
name|timesToCheck
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
if|if
condition|(
operator|!
name|time
operator|.
name|getEndTime
argument_list|()
operator|.
name|before
argument_list|(
name|today
argument_list|)
condition|)
name|timesToCheck
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|timesToCheck
operator|=
name|times
expr_stmt|;
block|}
name|List
argument_list|<
name|TimeBlock
argument_list|>
name|overlaps
init|=
name|period
operator|.
name|allOverlaps
argument_list|(
name|timesToCheck
argument_list|)
decl_stmt|;
if|if
condition|(
name|overlaps
operator|!=
literal|null
condition|)
name|conflicts
operator|.
name|addAll
argument_list|(
name|overlaps
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
operator|&&
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|instanceof
name|DefaultRoomAvailabilityService
condition|)
block|{
name|EventDateMapping
operator|.
name|Class2EventDateMap
name|class2eventDateMap
init|=
name|EventDateMapping
operator|.
name|getMapping
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|changePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|ignorePast
init|=
name|ApplicationProperty
operator|.
name|ClassAssignmentIgnorePastMeetings
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|changePast
operator|||
name|ignorePast
condition|)
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|today
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|meetings
operator|=
name|MeetingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct mx from ClassEvent e inner join e.meetings m, Meeting mx "
operator|+
literal|"where e.clazz.uniqueId = :classId and mx.event.class != ClassEvent and m.approvalStatus = 1 and mx.approvalStatus = 1 and "
operator|+
literal|"m.locationPermanentId = mx.locationPermanentId and m.meetingDate = mx.meetingDate and "
operator|+
literal|"m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod and mx.meetingDate>= :today"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|classId
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"today"
argument_list|,
name|today
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetings
operator|=
name|MeetingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct mx from ClassEvent e inner join e.meetings m, Meeting mx "
operator|+
literal|"where e.clazz.uniqueId = :classId and mx.event.class != ClassEvent and m.approvalStatus = 1 and mx.approvalStatus = 1 and "
operator|+
literal|"m.locationPermanentId = mx.locationPermanentId and m.meetingDate = mx.meetingDate and "
operator|+
literal|"m.startPeriod< mx.stopPeriod and m.stopPeriod> mx.startPeriod"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"classId"
argument_list|,
name|classId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getLocationPermanentId
argument_list|()
operator|!=
literal|null
operator|&&
name|ignorePermIds
operator|.
name|contains
argument_list|(
name|m
operator|.
name|getLocationPermanentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|MeetingTimeBlock
name|block
init|=
operator|new
name|MeetingTimeBlock
argument_list|(
name|m
argument_list|,
name|class2eventDateMap
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|.
name|getStartTime
argument_list|()
operator|!=
literal|null
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|conflicts
return|;
block|}
return|return
name|conflicts
return|;
block|}
block|}
end_class

end_unit

