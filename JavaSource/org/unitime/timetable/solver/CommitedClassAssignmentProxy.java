begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CommitedClassAssignmentProxy
implements|implements
name|ClassAssignmentProxy
block|{
comment|/* 	private HashSet iCachedCommitedSubjectsAndOwners =  new HashSet(); 	private Hashtable iCachedCommitedAssignments = new Hashtable(); 	*/
specifier|private
specifier|static
name|AssignmentPreferenceInfo
name|sCommitedAssignmentPreferenceInfo
init|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
decl_stmt|;
specifier|public
name|CommitedClassAssignmentProxy
parameter_list|()
block|{
block|}
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getAssignment
argument_list|(
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|classId
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
return|;
comment|/* 		Iterator i=null; 		try { 			i = clazz.getAssignments().iterator(); 		} catch (ObjectNotFoundException e) { 			Debug.error("Exception "+e.getMessage()+" seen for "+clazz);     		new _RootDAO().getSession().refresh(clazz);    			i = clazz.getAssignments().iterator(); 		} 		while (i.hasNext()) { 			Assignment a = (Assignment)i.next(); 			if (a.getSolution().isCommited().booleanValue()) return a; 		} 		return null; 		*/
comment|/* 		Department department = clazz.getManagingDept(); 		if (department==null) return null;     	String subjectName = clazz.getSchedulingSubpart().getInstrOfferingConfig().getControllingCourseOffering().getSubjectAreaAbbv();     	if (iCachedCommitedSubjectsAndOwners.add(subjectName+"-"+department.getUniqueId())) {         	Query q = (new AssignmentDAO()).getSession().createQuery(     				"select distinct a from Assignment as a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o where " +     				"a.solution.commited=true and " +     				":departmentId in a.solution.owner.departments.uniqueId and " +     				"o.isControl=true and o.subjectAreaAbbv=:subjectName");         	q.setLong("departmentId",department.getUniqueId().longValue());     		q.setString("subjectName",subjectName);     		for (Iterator i=q.list().iterator();i.hasNext();) {     			Assignment a = (Assignment)i.next();     			iCachedCommitedAssignments.put(a.getClassId(),a);     		}     	} 		return (Assignment)iCachedCommitedAssignments.get(clazz.getUniqueId()); 		*/
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Long
name|classId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sCommitedAssignmentPreferenceInfo
return|;
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sCommitedAssignmentPreferenceInfo
return|;
block|}
specifier|public
name|Hashtable
name|getAssignmentTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
name|assignments
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignment
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|assignments
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
specifier|public
name|Hashtable
name|getAssignmentInfoTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
name|infos
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignmentInfo
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|infos
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
block|}
end_class

end_unit

