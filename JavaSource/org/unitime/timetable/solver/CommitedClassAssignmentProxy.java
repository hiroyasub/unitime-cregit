begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|ui
operator|.
name|AssignmentPreferenceInfo
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CommitedClassAssignmentProxy
implements|implements
name|ClassAssignmentProxy
block|{
comment|/* 	private HashSet iCachedCommitedSubjectsAndOwners =  new HashSet(); 	private Hashtable iCachedCommitedAssignments = new Hashtable(); 	*/
specifier|private
specifier|static
name|AssignmentPreferenceInfo
name|sCommitedAssignmentPreferenceInfo
init|=
operator|new
name|AssignmentPreferenceInfo
argument_list|()
decl_stmt|;
specifier|public
name|CommitedClassAssignmentProxy
parameter_list|()
block|{
block|}
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getAssignment
argument_list|(
operator|(
operator|new
name|Class_DAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|classId
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Assignment
name|getAssignment
parameter_list|(
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
return|;
comment|/* 		Iterator i=null; 		try { 			i = clazz.getAssignments().iterator(); 		} catch (ObjectNotFoundException e) { 			Debug.error("Exception "+e.getMessage()+" seen for "+clazz);     		new _RootDAO().getSession().refresh(clazz);    			i = clazz.getAssignments().iterator(); 		} 		while (i.hasNext()) { 			Assignment a = (Assignment)i.next(); 			if (a.getSolution().isCommited().booleanValue()) return a; 		} 		return null; 		*/
comment|/* 		Department department = clazz.getManagingDept(); 		if (department==null) return null;     	String subjectName = clazz.getSchedulingSubpart().getInstrOfferingConfig().getControllingCourseOffering().getSubjectAreaAbbv();     	if (iCachedCommitedSubjectsAndOwners.add(subjectName+"-"+department.getUniqueId())) {         	Query q = (new AssignmentDAO()).getSession().createQuery(     				"select distinct a from Assignment as a inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as o where " +     				"a.solution.commited=true and " +     				":departmentId in a.solution.owner.departments.uniqueId and " +     				"o.isControl=true and o.subjectAreaAbbv=:subjectName");         	q.setLong("departmentId",department.getUniqueId().longValue());     		q.setString("subjectName",subjectName);     		for (Iterator i=q.list().iterator();i.hasNext();) {     			Assignment a = (Assignment)i.next();     			iCachedCommitedAssignments.put(a.getClassId(),a);     		}     	} 		return (Assignment)iCachedCommitedAssignments.get(clazz.getUniqueId()); 		*/
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Long
name|classId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sCommitedAssignmentPreferenceInfo
return|;
block|}
specifier|public
name|AssignmentPreferenceInfo
name|getAssignmentInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|sCommitedAssignmentPreferenceInfo
return|;
block|}
specifier|public
name|Hashtable
name|getAssignmentTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
name|assignments
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classOrClassId
operator|instanceof
name|Object
index|[]
condition|)
name|classOrClassId
operator|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|classOrClassId
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignment
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignment
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
name|assignments
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
block|}
return|return
name|assignments
return|;
block|}
specifier|public
name|Hashtable
name|getAssignmentInfoTable
parameter_list|(
name|Collection
name|classesOrClassIds
parameter_list|)
throws|throws
name|Exception
block|{
name|Hashtable
name|infos
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classesOrClassIds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|classOrClassId
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|classOrClassId
operator|instanceof
name|Object
index|[]
condition|)
name|classOrClassId
operator|=
operator|(
operator|(
name|Object
index|[]
operator|)
name|classOrClassId
operator|)
index|[
literal|0
index|]
expr_stmt|;
name|AssignmentPreferenceInfo
name|info
init|=
operator|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
name|getAssignmentInfo
argument_list|(
operator|(
name|Class_
operator|)
name|classOrClassId
argument_list|)
else|:
name|getAssignmentInfo
argument_list|(
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
name|infos
operator|.
name|put
argument_list|(
name|classOrClassId
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|classOrClassId
operator|)
operator|.
name|getUniqueId
argument_list|()
else|:
operator|(
name|Long
operator|)
name|classOrClassId
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|infos
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Assignment
argument_list|>
name|getConflicts
parameter_list|(
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
operator|||
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
return|return
literal|null
return|;
name|Assignment
name|assignment
init|=
name|getAssignment
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|Assignment
argument_list|>
name|conflicts
init|=
operator|new
name|HashSet
argument_list|<
name|Assignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|room
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|room
operator|.
name|getCommitedAssignments
argument_list|()
control|)
if|if
condition|(
operator|!
name|assignment
operator|.
name|equals
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareRoom
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|DepartmentalInstructor
name|di
range|:
name|DepartmentalInstructor
operator|.
name|getAllForInstructor
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
control|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|di
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|ci
operator|.
name|equals
argument_list|(
name|instructor
argument_list|)
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
operator|&&
operator|!
name|clazz
operator|.
name|canShareInstructor
argument_list|(
name|a
operator|.
name|getClazz
argument_list|()
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
name|Queue
argument_list|<
name|Class_
argument_list|>
name|children
init|=
operator|new
name|LinkedList
argument_list|(
name|clazz
operator|.
name|getChildClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Class_
name|child
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|child
operator|=
name|children
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|child
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|children
operator|.
name|addAll
argument_list|(
name|child
operator|.
name|getChildClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|child
operator|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
continue|continue;
name|Assignment
name|a
init|=
name|getAssignment
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
operator|&&
name|assignment
operator|.
name|overlaps
argument_list|(
name|a
argument_list|)
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conflicts
return|;
block|}
block|}
end_class

end_unit

