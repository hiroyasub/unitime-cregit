begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|TimetableLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|ClassLimitConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DepartmentSpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|DiscouragedRoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|GroupConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|IgnoreStudentConflictsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|InstructorConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|JenrlConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|MinimizeNumberOfUsedGroupsOfTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|MinimizeNumberOfUsedRoomsConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|RoomConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|SpreadConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|constraint
operator|.
name|FlexibleConstraint
operator|.
name|FlexibleConstraintType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Lecture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimetableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|MinMaxPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|PreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|preference
operator|.
name|SumPreferenceCombination
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|BinaryConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|model
operator|.
name|Constraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|IdGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|Progress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|LazyInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|CPSolverMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|RoomAvailabilityInterface
operator|.
name|TimeBlock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassDurationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExactTimeMins
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TravelTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
operator|.
name|Structure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AssignmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SchedulingSubpartDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolutionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|weights
operator|.
name|ClassWeightProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|course
operator|.
name|weights
operator|.
name|DefaultClassWeights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|LastLikeStudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|AreaClasfMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|WeightedCourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentCourseDemands
operator|.
name|WeightedStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|curricula
operator|.
name|StudentGroupCourseDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|jgroups
operator|.
name|SolverServerImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|duration
operator|.
name|DurationModel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableDatabaseLoader
extends|extends
name|TimetableLoader
block|{
specifier|private
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimetableDatabaseLoader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|CPSolverMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|CPSolverMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Session
name|iSession
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|Long
index|[]
name|iSolverGroupId
decl_stmt|;
specifier|private
name|String
name|iSolverGroupIds
decl_stmt|;
specifier|private
name|String
name|iDepartmentIds
init|=
literal|null
decl_stmt|;
specifier|private
name|SolverGroup
index|[]
name|iSolverGroup
decl_stmt|;
specifier|private
name|Long
index|[]
name|iSolutionId
decl_stmt|;
specifier|private
name|long
name|iFakeLectureId
init|=
literal|0
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|RoomConstraint
argument_list|>
name|iRooms
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|RoomConstraint
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|InstructorConstraint
argument_list|>
name|iInstructors
init|=
operator|new
name|Hashtable
argument_list|<
name|Object
argument_list|,
name|InstructorConstraint
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|InstructorConstraint
argument_list|,
name|List
argument_list|<
name|DistributionType
argument_list|>
argument_list|>
name|iInstructorDistributions
init|=
operator|new
name|Hashtable
argument_list|<
name|InstructorConstraint
argument_list|,
name|List
argument_list|<
name|DistributionType
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Lecture
argument_list|>
name|iLectures
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SchedulingSubpart
argument_list|>
name|iSubparts
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|iStudents
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|WeightedStudentId
argument_list|>
name|iWeightedStudents
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|WeightedStudentId
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|iDeptNames
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
name|iClasses
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|DatePattern
argument_list|>
name|iAllUsedDatePatterns
init|=
operator|new
name|HashSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|StudentGroup
argument_list|>
name|iGroups
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Class_
argument_list|>
name|iAllClasses
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|InstructionalOffering
argument_list|,
name|List
argument_list|<
name|Configuration
argument_list|>
argument_list|>
name|iAltConfigurations
init|=
operator|new
name|Hashtable
argument_list|<
name|InstructionalOffering
argument_list|,
name|List
argument_list|<
name|Configuration
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|InstructionalOffering
argument_list|,
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
argument_list|>
name|iOfferings
init|=
operator|new
name|Hashtable
argument_list|<
name|InstructionalOffering
argument_list|,
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Student
argument_list|>
argument_list|>
name|iCourse2students
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseOffering
argument_list|,
name|Set
argument_list|<
name|Student
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iDeptBalancing
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iSubjectBalancing
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMppAssignment
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iInteractiveMode
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iSpread
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iAutoSameStudents
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iAutoPrecedence
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iLoadCommittedAssignments
init|=
literal|false
decl_stmt|;
specifier|private
name|double
name|iFewerSeatsDisouraged
init|=
literal|0.01
decl_stmt|;
specifier|private
name|double
name|iFewerSeatsStronglyDisouraged
init|=
literal|0.02
decl_stmt|;
specifier|private
name|double
name|iNormalizedPrefDecreaseFactor
init|=
name|TimePatternModel
operator|.
name|sDefaultDecreaseFactor
decl_stmt|;
specifier|private
name|double
name|iAlterTimePatternWeight
init|=
literal|0.0
decl_stmt|;
specifier|private
name|double
name|iAlterDatePatternWeight
init|=
literal|1.0
decl_stmt|;
specifier|private
name|TimePatternModel
name|iAlterTimePatternModel
init|=
operator|(
name|TimePatternModel
operator|)
name|TimePattern
operator|.
name|getDefaultRequiredTimeTable
argument_list|()
operator|.
name|getModel
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iWeakenTimePreferences
init|=
literal|false
decl_stmt|;
specifier|private
name|Progress
name|iProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iLoadStudentEnrlsFromSolution
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iFixMinPerWeek
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iAssignSingleton
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iIgnoreRoomSharing
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iLoadStudentInstructorConflicts
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iMaxRoomCombinations
init|=
literal|100
decl_stmt|;
specifier|private
name|String
name|iAutoSameStudentsConstraint
init|=
literal|"SAME_STUDENTS"
decl_stmt|;
specifier|private
name|String
name|iInstructorFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iRoomAvailabilityTimeStampIsSet
init|=
literal|false
decl_stmt|;
specifier|private
name|CommittedStudentConflictsMode
name|iCommittedStudentConflictsMode
init|=
name|CommittedStudentConflictsMode
operator|.
name|Load
decl_stmt|;
specifier|private
name|StudentCourseDemands
name|iStudentCourseDemands
init|=
literal|null
decl_stmt|;
specifier|private
name|StudentGroupCourseDemands
name|iStudentGroupCourseDemands
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassWeightProvider
name|iClassWeightProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iUseAmPm
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iShowClassSuffix
init|=
literal|false
decl_stmt|,
name|iShowConfigName
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iLoadCommittedReservations
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iInstructorDistributionsAcrossDepartments
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|CommittedStudentConflictsMode
block|{
name|Ignore
block|,
name|Load
block|,
name|Compute
block|}
empty_stmt|;
specifier|public
name|TimetableDatabaseLoader
parameter_list|(
name|TimetableModel
name|model
parameter_list|,
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|assignment
operator|.
name|Assignment
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|assignment
parameter_list|)
block|{
name|super
argument_list|(
name|model
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|Progress
operator|.
name|sTraceEnabled
operator|=
literal|false
expr_stmt|;
name|iProgress
operator|=
name|Progress
operator|.
name|getInstance
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
operator|(
name|Long
operator|)
literal|null
argument_list|)
expr_stmt|;
name|iSolverGroupId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iSolutionId
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolutionId"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|iIgnoreRoomSharing
operator|=
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.IgnoreRoomSharing"
argument_list|,
name|iIgnoreRoomSharing
argument_list|)
expr_stmt|;
name|iSolverGroupIds
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|iSolverGroupId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|iSolverGroupIds
operator|+=
literal|","
expr_stmt|;
name|iSolverGroupIds
operator|+=
name|iSolverGroupId
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|iDeptBalancing
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.DeptBalancing"
argument_list|,
name|iDeptBalancing
argument_list|)
expr_stmt|;
name|iSubjectBalancing
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.SubjectBalancing"
argument_list|,
name|iSubjectBalancing
argument_list|)
expr_stmt|;
name|iSpread
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.Spread"
argument_list|,
name|iSpread
argument_list|)
expr_stmt|;
name|iAutoSameStudents
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.AutoSameStudents"
argument_list|,
name|iAutoSameStudents
argument_list|)
expr_stmt|;
name|iAutoPrecedence
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.AutoPrecedence"
argument_list|)
expr_stmt|;
name|iMppAssignment
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.MPP"
argument_list|,
name|iMppAssignment
argument_list|)
expr_stmt|;
name|iInteractiveMode
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.InteractiveMode"
argument_list|,
name|iInteractiveMode
argument_list|)
expr_stmt|;
name|iAssignSingleton
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.AssignSingleton"
argument_list|,
name|iAssignSingleton
argument_list|)
expr_stmt|;
name|iMaxRoomCombinations
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"General.MaxRoomCombinations"
argument_list|,
name|iMaxRoomCombinations
argument_list|)
expr_stmt|;
name|iFewerSeatsDisouraged
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"Global.FewerSeatsDisouraged"
argument_list|,
name|iFewerSeatsDisouraged
argument_list|)
expr_stmt|;
name|iFewerSeatsStronglyDisouraged
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"Global.FewerSeatsStronglyDisouraged"
argument_list|,
name|iFewerSeatsStronglyDisouraged
argument_list|)
expr_stmt|;
name|iNormalizedPrefDecreaseFactor
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"General.NormalizedPrefDecreaseFactor"
argument_list|,
name|iNormalizedPrefDecreaseFactor
argument_list|)
expr_stmt|;
name|iLoadStudentEnrlsFromSolution
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Global.LoadStudentEnrlsFromSolution"
argument_list|,
name|iLoadStudentEnrlsFromSolution
argument_list|)
expr_stmt|;
name|iLoadStudentInstructorConflicts
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Global.LoadStudentInstructorConflicts"
argument_list|,
name|iLoadStudentInstructorConflicts
argument_list|)
expr_stmt|;
name|iFixMinPerWeek
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Global.FixMinPerWeek"
argument_list|,
name|iFixMinPerWeek
argument_list|)
expr_stmt|;
name|iAlterTimePatternWeight
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"TimePreferences.Weight"
argument_list|,
name|iAlterTimePatternWeight
argument_list|)
expr_stmt|;
name|iAlterDatePatternWeight
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyDouble
argument_list|(
literal|"General.AlternativeDatePatternWeight"
argument_list|,
name|iAlterDatePatternWeight
argument_list|)
expr_stmt|;
name|iAlterTimePatternModel
operator|.
name|setPreferences
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"TimePreferences.Pref"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|iWeakenTimePreferences
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"TimePreferences.Weaken"
argument_list|,
name|iWeakenTimePreferences
argument_list|)
expr_stmt|;
name|iAutoSameStudentsConstraint
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.AutoSameStudentsConstraint"
argument_list|,
name|iAutoSameStudentsConstraint
argument_list|)
expr_stmt|;
name|iInstructorFormat
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.InstructorFormat"
argument_list|,
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFist
argument_list|)
expr_stmt|;
name|iInstructorDistributionsAcrossDepartments
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.ApplyInstructorDistributionsAcrossAllDepartments"
argument_list|,
name|iInstructorDistributionsAcrossDepartments
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|studentCourseDemandsClassName
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"Curriculum.StudentCourseDemadsClass"
argument_list|,
name|LastLikeStudentCourseDemands
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentCourseDemandsClassName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|studentCourseDemandsClassName
operator|=
name|studentCourseDemandsClassName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentCourseDemandsClassName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|studentCourseDemandsClassName
operator|=
literal|"org.unitime.timetable.solver.curricula."
operator|+
name|studentCourseDemandsClassName
expr_stmt|;
name|Class
name|studentCourseDemandsClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|studentCourseDemandsClassName
argument_list|)
decl_stmt|;
name|iStudentCourseDemands
operator|=
operator|(
name|StudentCourseDemands
operator|)
name|studentCourseDemandsClass
operator|.
name|getConstructor
argument_list|(
name|DataProperties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badStudentCourseDemands"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedLoadCustomStudentDemands
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iStudentCourseDemands
operator|=
operator|new
name|LastLikeStudentCourseDemands
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|IdGenerator
name|studentIdGenerator
init|=
operator|new
name|IdGenerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|iStudentCourseDemands
operator|instanceof
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
condition|)
operator|(
operator|(
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
operator|)
name|iStudentCourseDemands
operator|)
operator|.
name|setStudentIdGenerator
argument_list|(
name|studentIdGenerator
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SaveStudentEnrollments"
argument_list|,
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|?
literal|"false"
else|:
literal|"true"
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.WeightStudents"
argument_list|,
name|iStudentCourseDemands
operator|.
name|isWeightStudentsToFillUpOffering
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.StudentGroupCourseDemands"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
name|iStudentGroupCourseDemands
operator|=
operator|new
name|StudentGroupCourseDemands
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStudentGroupCourseDemands
operator|instanceof
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
condition|)
operator|(
operator|(
name|StudentCourseDemands
operator|.
name|NeedsStudentIdGenerator
operator|)
name|iStudentGroupCourseDemands
operator|)
operator|.
name|setStudentIdGenerator
argument_list|(
name|studentIdGenerator
argument_list|)
expr_stmt|;
block|}
name|iCommittedStudentConflictsMode
operator|=
name|CommittedStudentConflictsMode
operator|.
name|valueOf
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.CommittedStudentConflicts"
argument_list|,
name|iCommittedStudentConflictsMode
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iLoadCommittedAssignments
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.LoadCommittedAssignments"
argument_list|,
name|iLoadCommittedAssignments
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCommittedStudentConflictsMode
operator|==
name|CommittedStudentConflictsMode
operator|.
name|Load
operator|&&
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|)
block|{
name|iCommittedStudentConflictsMode
operator|=
name|CommittedStudentConflictsMode
operator|.
name|Compute
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.CommittedStudentConflicts"
argument_list|,
name|iCommittedStudentConflictsMode
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLoadStudentEnrlsFromSolution
operator|&&
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|)
block|{
name|iLoadStudentEnrlsFromSolution
operator|=
literal|false
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Global.LoadStudentEnrlsFromSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLoadStudentInstructorConflicts
operator|&&
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|)
block|{
name|iLoadStudentInstructorConflicts
operator|=
literal|false
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Global.LoadStudentInstructorConflicts"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|String
name|classWeightProviderClassName
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"ClassWeightProvider.Class"
argument_list|,
name|DefaultClassWeights
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classWeightProviderClassName
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|classWeightProviderClassName
operator|=
name|classWeightProviderClassName
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|classWeightProviderClassName
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|<
literal|0
condition|)
name|classWeightProviderClassName
operator|=
literal|"org.unitime.timetable.solver.course.weights."
operator|+
name|classWeightProviderClassName
expr_stmt|;
name|Class
name|classWeightProviderClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|classWeightProviderClassName
argument_list|)
decl_stmt|;
name|iClassWeightProvider
operator|=
operator|(
name|ClassWeightProvider
operator|)
name|classWeightProviderClass
operator|.
name|getConstructor
argument_list|(
name|DataProperties
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badClassWeightProvider"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFauledLoadCustomClassWeights
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iClassWeightProvider
operator|=
operator|new
name|DefaultClassWeights
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iLoadCommittedReservations
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.LoadCommittedReservations"
argument_list|,
name|iLoadCommittedReservations
argument_list|)
expr_stmt|;
name|iUseAmPm
operator|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.UseAmPm"
argument_list|,
name|iUseAmPm
argument_list|)
expr_stmt|;
name|iShowClassSuffix
operator|=
name|ApplicationProperty
operator|.
name|SolverShowClassSufix
operator|.
name|isTrue
argument_list|()
expr_stmt|;
name|iShowConfigName
operator|=
name|ApplicationProperty
operator|.
name|SolverShowConfiguratioName
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|msglevel
parameter_list|(
name|String
name|type
parameter_list|,
name|int
name|defaultLevel
parameter_list|)
block|{
name|String
name|level
init|=
name|ApplicationProperty
operator|.
name|SolverLogLevel
operator|.
name|value
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|==
literal|null
condition|)
return|return
name|defaultLevel
return|;
if|if
condition|(
literal|"warn"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
return|return
name|Progress
operator|.
name|MSGLEVEL_WARN
return|;
if|if
condition|(
literal|"error"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
return|return
name|Progress
operator|.
name|MSGLEVEL_ERROR
return|;
if|if
condition|(
literal|"fatal"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
return|return
name|Progress
operator|.
name|MSGLEVEL_FATAL
return|;
if|if
condition|(
literal|"info"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
return|return
name|Progress
operator|.
name|MSGLEVEL_INFO
return|;
if|if
condition|(
literal|"debug"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
return|return
name|Progress
operator|.
name|MSGLEVEL_DEBUG
return|;
if|if
condition|(
literal|"trace"
operator|.
name|equalsIgnoreCase
argument_list|(
name|level
argument_list|)
condition|)
return|return
name|Progress
operator|.
name|MSGLEVEL_TRACE
return|;
return|return
name|defaultLevel
return|;
block|}
specifier|private
name|String
name|getClassLabel
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
literal|"<A href='classDetail.do?cid="
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|String
name|getClassLabel
parameter_list|(
name|Lecture
name|lecture
parameter_list|)
block|{
return|return
literal|"<A href='classDetail.do?cid="
operator|+
name|lecture
operator|.
name|getClassId
argument_list|()
operator|+
literal|"'>"
operator|+
name|lecture
operator|.
name|getName
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|String
name|getOfferingLabel
parameter_list|(
name|InstructionalOffering
name|offering
parameter_list|)
block|{
return|return
literal|"<A href='instructionalOfferingDetail.do?io="
operator|+
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|String
name|getOfferingLabel
parameter_list|(
name|CourseOffering
name|offering
parameter_list|)
block|{
return|return
literal|"<A href='instructionalOfferingDetail.do?io="
operator|+
name|offering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|String
name|getSubpartLabel
parameter_list|(
name|SchedulingSubpart
name|subpart
parameter_list|)
block|{
name|String
name|suffix
init|=
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
return|return
literal|"<A href='schedulingSubpartDetail.do?ssuid="
operator|+
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|"'>"
operator|+
name|subpart
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
literal|" ("
operator|+
name|suffix
operator|+
literal|")"
operator|)
operator|+
literal|"</A>"
return|;
block|}
specifier|private
name|Hashtable
name|iRoomPreferences
init|=
literal|null
decl_stmt|;
specifier|private
name|PreferenceLevel
name|getRoomPreference
parameter_list|(
name|Long
name|deptId
parameter_list|,
name|Long
name|locationId
parameter_list|)
block|{
if|if
condition|(
name|iRoomPreferences
operator|==
literal|null
condition|)
block|{
name|iRoomPreferences
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|iSolverGroup
index|[
name|i
index|]
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|department
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
name|roomPreferencesThisDept
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|iRoomPreferences
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|roomPreferencesThisDept
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|department
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|pref
init|=
operator|(
name|RoomPref
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|roomPreferencesThisDept
operator|.
name|put
argument_list|(
name|pref
operator|.
name|getRoom
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Hashtable
name|roomPreferencesThisDept
init|=
operator|(
name|Hashtable
operator|)
name|iRoomPreferences
operator|.
name|get
argument_list|(
name|deptId
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomPreferencesThisDept
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|PreferenceLevel
operator|)
name|roomPreferencesThisDept
operator|.
name|get
argument_list|(
name|locationId
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|computeRoomLocations
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
return|return
name|computeRoomLocations
argument_list|(
name|clazz
argument_list|,
literal|false
argument_list|,
literal|0.01
argument_list|,
literal|0.02
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|computeRoomLocations
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|boolean
name|interactiveMode
parameter_list|,
name|double
name|fewerSeatsDisouraged
parameter_list|,
name|double
name|fewerSeatsStronglyDisouraged
parameter_list|)
block|{
name|int
name|minClassLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|maxClassLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxClassLimit
operator|<
name|minClassLimit
condition|)
name|maxClassLimit
operator|=
name|minClassLimit
expr_stmt|;
name|float
name|room2limitRatio
init|=
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|int
name|roomCapacity
init|=
name|Math
operator|.
name|round
argument_list|(
name|minClassLimit
operator|<=
literal|0
condition|?
name|room2limitRatio
else|:
name|room2limitRatio
operator|*
name|minClassLimit
argument_list|)
decl_stmt|;
name|int
name|discouragedCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|1.0
operator|-
name|fewerSeatsStronglyDisouraged
operator|)
operator|*
name|roomCapacity
argument_list|)
decl_stmt|;
name|int
name|stronglyDiscouragedCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|1.0
operator|-
name|fewerSeatsStronglyDisouraged
operator|)
operator|*
name|roomCapacity
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|roomLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|reqRoom
init|=
literal|false
decl_stmt|;
name|boolean
name|reqBldg
init|=
literal|false
decl_stmt|;
name|boolean
name|reqGroup
init|=
literal|false
decl_stmt|;
name|Set
name|allRooms
init|=
name|clazz
operator|.
name|getAvailableRooms
argument_list|()
decl_stmt|;
name|Set
name|groupPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|roomPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|bldgPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|featurePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|allRooms
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|pref
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
comment|// --- group preference ----------
name|PreferenceCombination
name|groupPref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|groupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|groupPref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqGroup
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqGroup
operator|&&
operator|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|interactiveMode
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|setPreference
argument_list|(
name|r
operator|.
name|getPreference
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|roomLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
comment|// --- room preference ------------
name|String
name|roomPref
init|=
literal|null
decl_stmt|;
name|PreferenceLevel
name|roomPreference
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getPreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|x
init|=
operator|(
name|RoomPref
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
name|roomPreference
operator|=
name|x
operator|.
name|getPrefLevel
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomPreference
operator|!=
literal|null
condition|)
block|{
name|roomPref
operator|=
name|roomPreference
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|roomPref
argument_list|)
condition|)
block|{
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|roomPref
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|==
literal|null
operator|||
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqRoom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|interactiveMode
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|setPreference
argument_list|(
name|r
operator|.
name|getPreference
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|roomLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
comment|// --- building preference ------------
name|Building
name|bldg
init|=
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|bldgPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
operator|&&
name|bldg
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|bldgPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|==
literal|null
operator|||
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|reqBldg
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|interactiveMode
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|setPreference
argument_list|(
name|r
operator|.
name|getPreference
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|roomLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|bldgPref
argument_list|)
expr_stmt|;
comment|// --- room features preference --------
name|boolean
name|acceptableFeatures
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|featurePref
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|featurePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|roomFeaturePref
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomFeature
name|feature
init|=
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|hasFeature
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
operator|!
name|hasFeature
condition|)
block|{
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|hasFeature
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|featurePref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|featurePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acceptableFeatures
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
comment|// --- room size -----------------
if|if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|stronglyDiscouragedCapacity
condition|)
block|{
if|if
condition|(
name|interactiveMode
condition|)
name|pref
operator|.
name|addPreferenceInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|discouragedCapacity
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|roomCapacity
condition|)
block|{
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
expr_stmt|;
block|}
name|int
name|prefInt
init|=
name|pref
operator|.
name|getPreferenceInt
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
continue|continue;
name|roomLocations
operator|.
name|add
argument_list|(
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|(
name|bldg
operator|==
literal|null
condition|?
literal|null
else|:
name|bldg
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
name|prefInt
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|roomLocations
return|;
block|}
specifier|private
name|Lecture
name|loadClass
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"cancelledClass"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnCancelledClass
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|timeLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|roomLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"loadingClass"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_DEBUG
argument_list|)
argument_list|,
name|MSG
operator|.
name|debugLoadingClass
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Department
name|dept
init|=
name|clazz
operator|.
name|getControllingDept
argument_list|()
decl_stmt|;
name|iDeptNames
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dept
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"department: "
operator|+
name|dept
operator|.
name|getName
argument_list|()
operator|+
literal|" (id:"
operator|+
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|int
name|minClassLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|maxClassLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxClassLimit
operator|<
name|minClassLimit
condition|)
name|maxClassLimit
operator|=
name|minClassLimit
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|minClassLimit
operator|=
name|maxClassLimit
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|float
name|room2limitRatio
init|=
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|.
name|floatValue
argument_list|()
decl_stmt|;
name|int
name|roomCapacity
init|=
name|Math
operator|.
name|round
argument_list|(
name|minClassLimit
operator|<=
literal|0
condition|?
name|room2limitRatio
else|:
name|room2limitRatio
operator|*
name|minClassLimit
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"class limit: ["
operator|+
name|minClassLimit
operator|+
literal|","
operator|+
name|maxClassLimit
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room2limitRatio: "
operator|+
name|room2limitRatio
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room capacity: "
operator|+
name|roomCapacity
argument_list|)
expr_stmt|;
name|int
name|discouragedCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|1.0
operator|-
name|iFewerSeatsDisouraged
operator|)
operator|*
name|roomCapacity
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"discouraged capacity: "
operator|+
name|discouragedCapacity
argument_list|)
expr_stmt|;
name|int
name|stronglyDiscouragedCapacity
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
literal|1.0
operator|-
name|iFewerSeatsStronglyDisouraged
operator|)
operator|*
name|roomCapacity
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"strongly discouraged capacity: "
operator|+
name|stronglyDiscouragedCapacity
argument_list|)
expr_stmt|;
name|Set
name|timePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|TimePref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|timePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noTimePattern"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoTimePattern
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|dm
operator|.
name|getArrangedHours
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
name|Set
name|patterns
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noDatePattern"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoDatePattern
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|iAllUsedDatePatterns
operator|.
name|add
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|int
name|nrRooms
init|=
operator|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
decl_stmt|;
name|Set
name|groupPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomGroupPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|roomPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|bldgPrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|BuildingPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|Set
name|featurePrefs
init|=
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|RoomFeaturePref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrRooms
operator|>
literal|0
condition|)
block|{
name|boolean
name|reqRoom
init|=
literal|false
decl_stmt|;
name|boolean
name|reqBldg
init|=
literal|false
decl_stmt|;
name|boolean
name|reqGroup
init|=
literal|false
decl_stmt|;
name|Set
name|allRooms
init|=
name|clazz
operator|.
name|getAvailableRooms
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|allRooms
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|room
init|=
operator|(
name|Location
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"checking room "
operator|+
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|pref
init|=
operator|new
name|SumPreferenceCombination
argument_list|()
decl_stmt|;
comment|// --- group preference ----------
name|PreferenceCombination
name|groupPref
init|=
name|PreferenceCombination
operator|.
name|getDefault
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|groupPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomGroupPref
name|p
init|=
operator|(
name|RoomGroupPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getRoomGroup
argument_list|()
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
condition|)
name|groupPref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"group is prohibited :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqGroup
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"building is not required :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqGroup
operator|&&
operator|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"group is required, removing all previous rooms (they are not required)"
argument_list|)
expr_stmt|;
name|reqGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|setPreference
argument_list|(
name|r
operator|.
name|getPreference
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|roomLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|groupPref
operator|.
name|getPreferenceProlog
argument_list|()
argument_list|)
expr_stmt|;
comment|// --- room preference ------------
name|String
name|roomPref
init|=
literal|null
decl_stmt|;
name|PreferenceLevel
name|roomPreference
init|=
name|getRoomPreference
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomPreference
operator|!=
literal|null
condition|)
block|{
name|roomPref
operator|=
name|roomPreference
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iInteractiveMode
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|roomPref
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room is prohibited (on room level) :-("
argument_list|)
expr_stmt|;
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|roomPref
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|PreferenceLevel
operator|.
name|sProhibited
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|roomPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|p
init|=
operator|(
name|RoomPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getRoom
argument_list|()
argument_list|)
condition|)
block|{
name|roomPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room preference is "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room is prohibited :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|==
literal|null
operator|||
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room is not required :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqRoom
operator|&&
operator|(
name|roomPref
operator|!=
literal|null
operator|&&
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room is required, removing all previous rooms (they are not required)"
argument_list|)
expr_stmt|;
name|reqRoom
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|setPreference
argument_list|(
name|r
operator|.
name|getPreference
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|roomLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|roomPref
operator|!=
literal|null
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|roomPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|roomPref
argument_list|)
expr_stmt|;
comment|// --- building preference ------------
name|Building
name|bldg
init|=
operator|(
name|room
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|room
operator|)
operator|.
name|getBuilding
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
name|String
name|bldgPref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|bldgPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|BuildingPref
name|p
init|=
operator|(
name|BuildingPref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|bldg
operator|!=
literal|null
operator|&&
name|bldg
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getBuilding
argument_list|()
argument_list|)
condition|)
block|{
name|bldgPref
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"building preference is "
operator|+
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"building is prohibited :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|==
literal|null
operator|||
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"building is not required :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|reqBldg
operator|&&
operator|(
name|bldgPref
operator|!=
literal|null
operator|&&
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"building is required, removing all previous rooms (they are not required)"
argument_list|)
expr_stmt|;
name|reqBldg
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|setPreference
argument_list|(
name|r
operator|.
name|getPreference
argument_list|()
operator|+
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|roomLocations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|bldgPref
operator|!=
literal|null
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|bldgPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|bldgPref
argument_list|)
expr_stmt|;
comment|// --- room features preference --------
name|boolean
name|acceptableFeatures
init|=
literal|true
decl_stmt|;
name|PreferenceCombination
name|featurePref
init|=
operator|new
name|MinMaxPreferenceCombination
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|featurePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomFeaturePref
name|roomFeaturePref
init|=
operator|(
name|RoomFeaturePref
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|RoomFeature
name|feature
init|=
name|roomFeaturePref
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|String
name|p
init|=
name|roomFeaturePref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
decl_stmt|;
name|boolean
name|hasFeature
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|contains
argument_list|(
name|room
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
name|hasFeature
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"present feature "
operator|+
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is prohibited :-("
argument_list|)
expr_stmt|;
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|&&
operator|!
name|hasFeature
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"not present feature "
operator|+
name|feature
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is required :-("
argument_list|)
expr_stmt|;
name|acceptableFeatures
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|hasFeature
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|&&
operator|!
name|p
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
name|featurePref
operator|.
name|addPreferenceProlog
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|pref
operator|.
name|addPreferenceInt
argument_list|(
name|featurePref
operator|.
name|getPreferenceInt
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|acceptableFeatures
condition|)
block|{
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
comment|// --- room size -----------------
if|if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|stronglyDiscouragedCapacity
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"too small :-("
argument_list|)
expr_stmt|;
if|if
condition|(
name|iInteractiveMode
condition|)
name|pref
operator|.
name|addPreferenceInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
else|else
name|add
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|discouragedCapacity
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room of strongly discouraged size"
argument_list|)
expr_stmt|;
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
operator|<
name|roomCapacity
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room of discouraged size"
argument_list|)
expr_stmt|;
name|pref
operator|.
name|addPreferenceProlog
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
expr_stmt|;
block|}
name|int
name|prefInt
init|=
name|pref
operator|.
name|getPreferenceInt
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"room preference is "
operator|+
name|prefInt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
continue|continue;
name|roomLocations
operator|.
name|add
argument_list|(
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
operator|(
name|bldg
operator|==
literal|null
condition|?
literal|null
else|:
name|bldg
operator|.
name|getUniqueId
argument_list|()
operator|)
argument_list|,
name|prefInt
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|room
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
operator|(
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|,
name|getRoomConstraint
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|,
name|room
argument_list|,
name|hibSession
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roomLocations
operator|.
name|isEmpty
argument_list|()
operator|||
name|roomLocations
operator|.
name|size
argument_list|()
operator|<
operator|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noRoom"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|1
condition|?
name|MSG
operator|.
name|warnNoRooms
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
else|:
name|MSG
operator|.
name|warnNoRoom
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|groupPrefs
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|roomPrefs
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|bldgPrefs
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|featurePrefs
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"zeroRoomsButPref"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnZeroRoomsButPref
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|minPerWeek
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|boolean
name|onlyReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|timePref
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
operator|||
name|pattern
operator|.
name|countPreferences
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
operator|>
literal|0
condition|)
name|onlyReq
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|onlyReq
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"time pattern has requred times"
argument_list|)
expr_stmt|;
block|}
name|ClassDurationType
name|dtype
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getEffectiveDurationType
argument_list|()
decl_stmt|;
name|DurationModel
name|dm
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getDurationModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|timePrefs
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|timePref
init|=
operator|(
name|TimePref
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimePatternModel
name|pattern
init|=
name|timePref
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
name|datePatternPrefs
init|=
operator|(
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|child
argument_list|,
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|String
name|pr
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDatePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
name|pr
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|int
name|prVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|prVal
operator|=
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iInteractiveMode
condition|)
block|{
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
continue|continue;
block|}
name|TimeLocation
name|loc
init|=
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
literal|0
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
argument_list|,
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|breakTime
argument_list|)
decl_stmt|;
name|loc
operator|.
name|setTimePatternId
argument_list|(
name|pattern
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
name|iAlterDatePatternWeight
operator|*
name|prVal
argument_list|)
expr_stmt|;
block|}
name|timeLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|minsPerMeeting
init|=
name|dm
operator|.
name|getExactTimeMinutesPerMeeting
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|ExactTimeMins
operator|.
name|getNrSlotsPerMtg
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|int
name|breakTime
init|=
name|ExactTimeMins
operator|.
name|getBreakTime
argument_list|(
name|minsPerMeeting
argument_list|)
decl_stmt|;
name|TimeLocation
name|loc
init|=
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getExactDays
argument_list|()
argument_list|,
name|pattern
operator|.
name|getExactStartSlot
argument_list|()
argument_list|,
name|length
argument_list|,
name|PreferenceLevel
operator|.
name|sIntLevelNeutral
argument_list|,
literal|0
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|breakTime
argument_list|)
decl_stmt|;
name|loc
operator|.
name|setTimePatternId
argument_list|(
name|pattern
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|timeLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|patterns
operator|.
name|add
argument_list|(
name|pattern
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iWeakenTimePreferences
condition|)
block|{
name|pattern
operator|.
name|weakenHardPreferences
argument_list|()
expr_stmt|;
name|onlyReq
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dm
operator|.
name|isValidCombination
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noTimePattern"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnWrongTimePattern
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
operator|(
name|dtype
operator|==
literal|null
condition|?
name|MSG
operator|.
name|defaultDurationTypeName
argument_list|()
else|:
name|dtype
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
name|pattern
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|minPerWeek
operator|=
name|pattern
operator|.
name|getMinPerMtg
argument_list|()
operator|*
name|pattern
operator|.
name|getNrMeetings
argument_list|()
expr_stmt|;
if|if
condition|(
name|iFixMinPerWeek
condition|)
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|setMinutesPerWk
argument_list|(
operator|new
name|Integer
argument_list|(
name|minPerWeek
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<
name|pattern
operator|.
name|getNrTimes
argument_list|()
condition|;
name|time
operator|++
control|)
block|{
if|if
condition|(
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
operator|+
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
operator|>
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"timeOverMidnight"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnTimeOverMidnight
argument_list|(
name|pattern
operator|.
name|getName
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartTime
argument_list|(
name|time
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|pattern
operator|.
name|getNrDays
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
name|String
name|pref
init|=
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"checking time "
operator|+
name|pattern
operator|.
name|getDayHeader
argument_list|(
name|day
argument_list|)
operator|+
literal|" "
operator|+
name|pattern
operator|.
name|getTimeHeaderShort
argument_list|(
name|time
argument_list|)
operator|+
literal|" ("
operator|+
name|pref
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dm
operator|.
name|isValidSelection
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|,
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"time is not valid :-("
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|iInteractiveMode
operator|&&
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"time is prohibited :-("
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|iInteractiveMode
operator|&&
name|onlyReq
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"time is not required :-("
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
name|datePatternPrefs
init|=
operator|(
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
name|boolean
name|hasReq
init|=
literal|false
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|hasReq
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dm
operator|.
name|isValidSelection
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|child
argument_list|,
name|timePref
operator|.
name|getTimePattern
argument_list|()
argument_list|,
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|)
condition|)
continue|continue;
name|String
name|pr
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getDatePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
name|pr
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
block|}
name|int
name|prVal
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|prVal
operator|=
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iInteractiveMode
condition|)
block|{
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
name|prVal
operator|+=
literal|100
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasReq
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
continue|continue;
block|}
name|TimeLocation
name|loc
init|=
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|pattern
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
name|iNormalizedPrefDecreaseFactor
argument_list|)
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
argument_list|,
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|loc
operator|.
name|setTimePatternId
argument_list|(
name|pattern
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAlterTimePatternWeight
operator|!=
literal|0.0
condition|)
block|{
name|String
name|altPref
init|=
name|iAlterTimePatternModel
operator|.
name|getCombinedPreference
argument_list|(
name|loc
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|loc
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|loc
operator|.
name|getLength
argument_list|()
argument_list|,
name|TimePatternModel
operator|.
name|sMixAlgMinMax
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|altPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
name|loc
operator|.
name|getNormalizedPreference
argument_list|()
operator|+
name|iAlterTimePatternWeight
operator|*
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|altPref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iInteractiveMode
operator|&&
name|onlyReq
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|loc
operator|.
name|setPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sIntLevelProhibited
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sIntLevelProhibited
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pr
argument_list|)
condition|)
block|{
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
name|loc
operator|.
name|getNormalizedPreference
argument_list|()
operator|+
name|iAlterDatePatternWeight
operator|*
name|prVal
argument_list|)
expr_stmt|;
block|}
name|timeLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|TimeLocation
name|loc
init|=
operator|new
name|TimeLocation
argument_list|(
name|pattern
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|pattern
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|pattern
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pattern
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|pattern
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
name|iNormalizedPrefDecreaseFactor
argument_list|)
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|pattern
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|loc
operator|.
name|setTimePatternId
argument_list|(
name|pattern
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAlterTimePatternWeight
operator|!=
literal|0.0
condition|)
block|{
name|String
name|altPref
init|=
name|iAlterTimePatternModel
operator|.
name|getCombinedPreference
argument_list|(
name|loc
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|loc
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|loc
operator|.
name|getLength
argument_list|()
argument_list|,
name|TimePatternModel
operator|.
name|sMixAlgMinMax
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|altPref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
name|loc
operator|.
name|getNormalizedPreference
argument_list|()
operator|+
name|iAlterTimePatternWeight
operator|*
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|altPref
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iInteractiveMode
operator|&&
name|onlyReq
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
condition|)
block|{
name|loc
operator|.
name|setPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sIntLevelProhibited
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
name|PreferenceLevel
operator|.
name|sIntLevelProhibited
argument_list|)
expr_stmt|;
block|}
name|timeLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iInteractiveMode
condition|)
block|{
for|for
control|(
name|TimePattern
name|pattern
range|:
name|TimePattern
operator|.
name|findApplicable
argument_list|(
name|iSession
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|minPerWeek
argument_list|,
name|datePattern
argument_list|,
name|dm
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|patterns
operator|.
name|contains
argument_list|(
name|pattern
argument_list|)
condition|)
continue|continue;
name|TimePatternModel
name|model
init|=
name|pattern
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"adding prohibited pattern "
operator|+
name|model
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|time
init|=
literal|0
init|;
name|time
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|time
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|datePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
name|datePatternPrefs
init|=
operator|(
name|Set
argument_list|<
name|DatePatternPref
argument_list|>
operator|)
name|clazz
operator|.
name|effectivePreferences
argument_list|(
name|DatePatternPref
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|DatePattern
name|child
range|:
name|datePattern
operator|.
name|findChildren
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|dm
operator|.
name|isValidSelection
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|child
argument_list|,
name|pattern
argument_list|,
name|model
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|)
condition|)
continue|continue;
name|String
name|pr
init|=
name|PreferenceLevel
operator|.
name|sNeutral
decl_stmt|;
for|for
control|(
name|DatePatternPref
name|p
range|:
name|datePatternPrefs
control|)
if|if
condition|(
name|p
operator|.
name|getDatePattern
argument_list|()
operator|.
name|equals
argument_list|(
name|child
argument_list|)
condition|)
name|pr
operator|=
name|p
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
expr_stmt|;
name|TimeLocation
name|loc
init|=
operator|new
name|TimeLocation
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|model
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|model
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|model
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|model
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
name|iNormalizedPrefDecreaseFactor
argument_list|)
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|pr
argument_list|)
argument_list|,
name|child
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|child
operator|.
name|getName
argument_list|()
argument_list|,
name|child
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|model
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|loc
operator|.
name|setTimePatternId
argument_list|(
name|model
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setPreference
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
name|timeLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|dm
operator|.
name|isValidSelection
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
argument_list|,
name|datePattern
argument_list|,
name|pattern
argument_list|,
name|model
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|)
condition|)
continue|continue;
name|TimeLocation
name|loc
init|=
operator|new
name|TimeLocation
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|day
argument_list|)
argument_list|,
name|model
operator|.
name|getStartSlot
argument_list|(
name|time
argument_list|)
argument_list|,
name|model
operator|.
name|getSlotsPerMtg
argument_list|()
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2int
argument_list|(
name|model
operator|.
name|getPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|)
argument_list|)
argument_list|,
name|model
operator|.
name|getNormalizedPreference
argument_list|(
name|day
argument_list|,
name|time
argument_list|,
name|iNormalizedPrefDecreaseFactor
argument_list|)
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
name|model
operator|.
name|getBreakTime
argument_list|()
argument_list|)
decl_stmt|;
name|loc
operator|.
name|setTimePatternId
argument_list|(
name|model
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setPreference
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|loc
operator|.
name|setNormalizedPreference
argument_list|(
literal|1000.0
argument_list|)
expr_stmt|;
name|timeLocations
operator|.
name|add
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|timeLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noTime"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoTime
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|clazz
operator|.
name|getLeadInstructors
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|className
argument_list|,
name|timeLocations
argument_list|,
name|roomLocations
argument_list|,
name|nrRooms
argument_list|,
literal|null
argument_list|,
name|minClassLimit
argument_list|,
name|maxClassLimit
argument_list|,
name|room2limitRatio
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|setNote
argument_list|(
name|clazz
operator|.
name|getNotes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setScheduler
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setDepartment
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|instructors
control|)
block|{
name|getInstructorConstraint
argument_list|(
name|instructor
argument_list|,
name|hibSession
argument_list|)
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nrRooms
operator|>
literal|1
condition|)
name|lecture
operator|.
name|setMaxRoomCombinations
argument_list|(
name|iMaxRoomCombinations
argument_list|)
expr_stmt|;
name|long
name|estNrValues
init|=
name|lecture
operator|.
name|nrValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|estNrValues
operator|>
literal|1000000
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hugeDomain"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnHugeDomain
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|estNrValues
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|instructors
control|)
block|{
name|getInstructorConstraint
argument_list|(
name|instructor
argument_list|,
name|hibSession
argument_list|)
operator|.
name|removeVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|estNrValues
operator|>
literal|10000
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"bigDomain"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBigDomain
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|estNrValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lecture
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noPlacement"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoPlacement
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|instructors
control|)
block|{
name|getInstructorConstraint
argument_list|(
name|instructor
argument_list|,
name|hibSession
argument_list|)
operator|.
name|removeVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noPlacement"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoPlacementInteractive
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iClassWeightProvider
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setWeight
argument_list|(
name|iClassWeightProvider
operator|.
name|getWeight
argument_list|(
name|lecture
argument_list|)
argument_list|)
expr_stmt|;
name|iLectures
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomLocation
name|r
range|:
name|roomLocations
control|)
block|{
name|r
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
return|return
name|lecture
return|;
block|}
specifier|private
name|void
name|assignCommited
parameter_list|()
block|{
if|if
condition|(
operator|!
name|getModel
argument_list|()
operator|.
name|hasConstantVariables
argument_list|()
condition|)
return|return;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseAssignCommitted
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|constantVariables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|constantVariables
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
operator|!=
literal|null
condition|)
continue|continue;
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|getModel
argument_list|()
operator|.
name|weaken
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|warn
init|=
name|MSG
operator|.
name|warnCannotAssignCommitted
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|placement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
decl_stmt|;
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonFirstLine
argument_list|()
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|v
range|:
name|vals
control|)
block|{
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonConflict
argument_list|(
name|getClassLabel
argument_list|(
name|v
operator|.
name|variable
argument_list|()
argument_list|)
argument_list|,
name|v
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonConstraint
argument_list|(
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"cannotAssignCommitted"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|warn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|purgeInvalidValues
parameter_list|()
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePurgeInvalidValues
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
argument_list|)
control|)
block|{
name|List
argument_list|<
name|Placement
argument_list|>
name|oldValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Placement
argument_list|>
argument_list|(
name|lecture
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|purgeInvalidValues
argument_list|(
name|iInteractiveMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|warn
init|=
operator|(
name|iInteractiveMode
condition|?
name|MSG
operator|.
name|warnNoPlacementAfterCommitInteractive
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
else|:
name|MSG
operator|.
name|warnNoPlacementAfterCommit
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|oldValues
control|)
block|{
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonNotValid
argument_list|(
name|TimetableSolver
operator|.
name|getNotValidReason
argument_list|(
name|p
argument_list|,
name|getAssignment
argument_list|()
argument_list|,
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noPlacementAfterCommit"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|warn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|removeVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
for|for
control|(
name|Constraint
name|c
range|:
operator|new
name|ArrayList
argument_list|<
name|Constraint
argument_list|>
argument_list|(
name|lecture
operator|.
name|constraints
argument_list|()
argument_list|)
control|)
block|{
name|c
operator|.
name|removeVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|c
operator|instanceof
name|BinaryConstraint
condition|)
name|getModel
argument_list|()
operator|.
name|removeConstraint
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|s
operator|.
name|getLectures
argument_list|()
operator|.
name|remove
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadAssignment
parameter_list|(
name|Assignment
name|assignment
parameter_list|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|assignment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|dayCode
init|=
name|assignment
operator|.
name|getDays
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|startSlot
init|=
name|assignment
operator|.
name|getStartSlot
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Long
name|patternId
init|=
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|DatePattern
name|datePattern
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Location
argument_list|>
name|rooms
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
return|return;
name|Placement
name|initialPlacement
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|lecture
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Placement
name|placement
init|=
operator|(
name|Placement
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|!=
name|dayCode
condition|)
continue|continue;
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|!=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
operator|!
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getTimePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|patternId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|datePattern
operator|!=
literal|null
operator|&&
operator|!
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|rooms
operator|.
name|size
argument_list|()
operator|!=
name|placement
operator|.
name|getNrRooms
argument_list|()
condition|)
continue|continue;
name|boolean
name|sameRooms
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|sameRooms
operator|&&
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|r
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|placement
operator|.
name|hasRoomLocation
argument_list|(
name|r
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|sameRooms
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sameRooms
condition|)
continue|continue;
name|initialPlacement
operator|=
name|placement
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|initialPlacement
operator|==
literal|null
condition|)
block|{
name|TimeLocation
name|timeLocation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TimeLocation
name|t
range|:
name|lecture
operator|.
name|timeLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|t
operator|.
name|getDayCode
argument_list|()
operator|!=
name|dayCode
condition|)
continue|continue;
if|if
condition|(
name|t
operator|.
name|getStartSlot
argument_list|()
operator|!=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
operator|!
name|t
operator|.
name|getTimePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|patternId
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|datePattern
operator|!=
literal|null
operator|&&
operator|!
name|t
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|timeLocation
operator|=
name|t
expr_stmt|;
break|break;
block|}
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|roomLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|room
range|:
name|rooms
control|)
block|{
for|for
control|(
name|RoomLocation
name|r
range|:
name|lecture
operator|.
name|roomLocations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|roomLocations
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|timeLocation
operator|!=
literal|null
operator|&&
name|roomLocations
operator|.
name|size
argument_list|()
operator|==
name|lecture
operator|.
name|getNrRooms
argument_list|()
condition|)
block|{
name|initialPlacement
operator|=
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|timeLocation
argument_list|,
name|roomLocations
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|initialPlacement
operator|==
literal|null
condition|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|(
name|assignment
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
operator|+
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Location
argument_list|>
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"placementNotValid"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnPlacementNotValid
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|initialPlacement
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
literal|""
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ic
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|initialPlacement
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonInstructorNotAvailable
argument_list|(
name|ic
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|initialPlacement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|roomLocation
range|:
name|initialPlacement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|roomLocation
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|initialPlacement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|lecture
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonRoomNotAvailable
argument_list|(
name|roomLocation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|initialPlacement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|initialPlacement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|lecture
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonRoomNotAvailable
argument_list|(
name|initialPlacement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|initialPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|vals
control|)
block|{
name|Lecture
name|l
init|=
name|p
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|isCommitted
argument_list|()
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonConstraintCommitedAssignment
argument_list|(
name|getClassLabel
argument_list|(
name|l
argument_list|)
argument_list|,
name|p
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|initialPlacement
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonConstraint
argument_list|(
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|reason
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"cannotAssign"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnCannotAssignClass
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|initialPlacement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"cannotAssign"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnCannotAssignClassWithReason
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|initialPlacement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|reason
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iMppAssignment
condition|)
name|lecture
operator|.
name|setInitialAssignment
argument_list|(
name|initialPlacement
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|weaken
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|initialPlacement
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|initialPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|initialPlacement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|warn
init|=
name|MSG
operator|.
name|warnCannotAssignClass
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|initialPlacement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
decl_stmt|;
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonFirstLine
argument_list|()
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|v
range|:
name|vals
control|)
block|{
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonConflict
argument_list|(
name|getClassLabel
argument_list|(
name|v
operator|.
name|variable
argument_list|()
argument_list|)
argument_list|,
name|v
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonConstraint
argument_list|(
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"cannotAssign"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|warn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|RoomConstraint
name|getRoomConstraint
parameter_list|(
name|Department
name|dept
parameter_list|,
name|Location
name|location
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|RoomConstraint
name|rc
init|=
operator|(
name|RoomConstraint
operator|)
name|iRooms
operator|.
name|get
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|==
literal|null
condition|)
block|{
name|PreferenceLevel
name|roomPreference
init|=
name|getRoomPreference
argument_list|(
name|dept
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|discouraged
init|=
operator|(
operator|!
name|iInteractiveMode
operator|&&
name|roomPreference
operator|!=
literal|null
operator|&&
operator|(
name|roomPreference
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
operator|||
name|roomPreference
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
argument_list|)
operator|||
name|roomPreference
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sDiscouraged
argument_list|)
operator|)
operator|)
decl_stmt|;
name|RoomSharingModel
name|sharingModel
init|=
name|location
operator|.
name|getRoomSharingModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|sharingModel
operator|!=
literal|null
operator|&&
name|iIgnoreRoomSharing
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|sharingModel
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|sharingModel
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
if|if
condition|(
operator|!
name|String
operator|.
name|valueOf
argument_list|(
name|RoomSharingModel
operator|.
name|sNotAvailablePref
argument_list|)
operator|.
name|equals
argument_list|(
name|sharingModel
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
argument_list|)
condition|)
name|sharingModel
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|RoomSharingModel
operator|.
name|sFreeForAllPref
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sharingModel
operator|!=
literal|null
operator|&&
name|sharingModel
operator|.
name|allAvailable
argument_list|(
literal|null
argument_list|)
condition|)
name|sharingModel
operator|=
literal|null
expr_stmt|;
name|Long
name|buildingId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|buildingId
operator|=
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|rc
operator|=
operator|(
name|discouraged
condition|?
operator|new
name|DiscouragedRoomConstraint
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|buildingId
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|sharingModel
argument_list|,
name|location
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|location
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|,
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
operator|!
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
else|:
operator|new
name|RoomConstraint
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|buildingId
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|,
name|sharingModel
argument_list|,
name|location
operator|.
name|getCoordinateX
argument_list|()
argument_list|,
name|location
operator|.
name|getCoordinateY
argument_list|()
argument_list|,
operator|(
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|location
operator|.
name|isIgnoreTooFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|,
operator|(
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
operator|!
name|location
operator|.
name|isIgnoreRoomCheck
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
argument_list|)
operator|)
expr_stmt|;
name|rc
operator|.
name|setType
argument_list|(
name|location
operator|instanceof
name|Room
condition|?
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
comment|//loadRoomAvailability(location, rc, hibSession);
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|iRooms
operator|.
name|put
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
specifier|private
name|InstructorConstraint
name|getInstructorConstraint
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ic
operator|!=
literal|null
condition|)
return|return
name|ic
return|;
block|}
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ic
operator|==
literal|null
condition|)
block|{
name|boolean
name|ignDist
init|=
operator|(
name|instructor
operator|.
name|isIgnoreToFar
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|isIgnoreToFar
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
name|ic
operator|=
operator|new
name|InstructorConstraint
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|iInstructorFormat
argument_list|)
argument_list|,
name|ignDist
argument_list|)
expr_stmt|;
name|ic
operator|.
name|setType
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
else|:
operator|new
name|Long
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getSortOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//loadInstructorAvailability(instructor, ic, hibSession);
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|ic
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|iInstructors
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|ic
argument_list|)
expr_stmt|;
block|}
return|return
name|ic
return|;
block|}
specifier|private
name|void
name|loadInstructorAvailabilities
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|puids
parameter_list|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i.externalUniqueId, a from ClassInstructor ci inner join ci.instructor i inner join ci.classInstructing.assignments a "
operator|+
literal|"where ci.lead = true and i.externalUniqueId in ("
operator|+
name|puids
operator|+
literal|") and a.solution.owner.session.uniqueId=:sessionId and a.solution.commited=true and a.solution.owner.uniqueId not in ("
operator|+
name|iSolverGroupIds
operator|+
literal|")"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|x
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|x
index|[
literal|0
index|]
decl_stmt|;
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|x
index|[
literal|1
index|]
decl_stmt|;
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|iInstructors
operator|.
name|get
argument_list|(
name|puid
argument_list|)
decl_stmt|;
name|Placement
name|p
init|=
name|a
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|ic
operator|.
name|setNotAvailable
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iLectures
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|iLectures
operator|.
name|put
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadInstructorAvailabilities
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadInstructorAvailabilities
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StringBuffer
name|puids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iInstructors
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|InstructorConstraint
name|ic
init|=
operator|(
name|InstructorConstraint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ic
operator|.
name|getPuid
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|puids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|puids
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|puids
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|ic
operator|.
name|getPuid
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|100
condition|)
block|{
name|loadInstructorAvailabilities
argument_list|(
name|hibSession
argument_list|,
name|puids
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|puids
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|puids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|loadInstructorAvailabilities
argument_list|(
name|hibSession
argument_list|,
name|puids
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadInstructorStudentConflicts
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|puids
parameter_list|)
block|{
for|for
control|(
name|Object
index|[]
name|x
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId, s.externalUniqueId from Student s "
operator|+
literal|"where s.session.uniqueId = :sessionId and s.externalUniqueId in ("
operator|+
name|puids
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|x
index|[
literal|0
index|]
decl_stmt|;
name|String
name|puid
init|=
operator|(
name|String
operator|)
name|x
index|[
literal|1
index|]
decl_stmt|;
name|InstructorConstraint
name|ic
init|=
name|iInstructors
operator|.
name|get
argument_list|(
name|puid
argument_list|)
decl_stmt|;
name|Student
name|s
init|=
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
operator|&&
name|ic
operator|!=
literal|null
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|MSG
operator|.
name|debugStudentInstructorPair
argument_list|(
name|puid
argument_list|,
name|s
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|setInstructor
argument_list|(
name|ic
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
block|{
name|s
operator|.
name|addLecture
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|addStudent
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|loadInstructorStudentConflicts
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadInstructorStudentConflicts
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StringBuffer
name|puids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|iInstructors
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ic
operator|.
name|getPuid
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|puids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|puids
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|puids
operator|.
name|append
argument_list|(
literal|"'"
operator|+
name|ic
operator|.
name|getPuid
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|100
condition|)
block|{
name|loadInstructorStudentConflicts
argument_list|(
name|hibSession
argument_list|,
name|puids
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|puids
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|puids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|loadInstructorStudentConflicts
argument_list|(
name|hibSession
argument_list|,
name|puids
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadRoomAvailabilities
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|roomids
parameter_list|)
block|{
name|Query
name|q
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.uniqueId, a from Location r inner join r.assignments as a "
operator|+
literal|"where r.uniqueId in ("
operator|+
name|roomids
operator|+
literal|") and a.solution.owner.session.uniqueId=:sessionId and a.solution.commited=true and a.solution.owner.uniqueId not in ("
operator|+
name|iSolverGroupIds
operator|+
literal|") and r.ignoreRoomCheck = false"
argument_list|)
decl_stmt|;
name|q
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|q
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|x
init|=
operator|(
name|Object
index|[]
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|roomId
init|=
operator|(
name|Long
operator|)
name|x
index|[
literal|0
index|]
decl_stmt|;
name|Assignment
name|a
init|=
operator|(
name|Assignment
operator|)
name|x
index|[
literal|1
index|]
decl_stmt|;
name|Placement
name|p
init|=
name|a
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|RoomConstraint
name|rc
init|=
operator|(
name|RoomConstraint
operator|)
name|iRooms
operator|.
name|get
argument_list|(
name|roomId
argument_list|)
decl_stmt|;
name|rc
operator|.
name|setNotAvailable
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iLectures
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|iLectures
operator|.
name|put
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|,
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadRoomAvailabilities
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadRoomAvailabilities
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|StringBuffer
name|roomids
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iRooms
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RoomConstraint
name|rc
init|=
operator|(
name|RoomConstraint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|roomids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|roomids
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|roomids
operator|.
name|append
argument_list|(
name|rc
operator|.
name|getResourceId
argument_list|()
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
if|if
condition|(
name|idx
operator|==
literal|100
condition|)
block|{
name|loadRoomAvailabilities
argument_list|(
name|hibSession
argument_list|,
name|roomids
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|roomids
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|idx
operator|=
literal|0
expr_stmt|;
block|}
block|}
if|if
condition|(
name|roomids
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|loadRoomAvailabilities
argument_list|(
name|hibSession
argument_list|,
name|roomids
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Constraint
name|createGroupConstraint
parameter_list|(
name|DistributionPref
name|pref
parameter_list|)
block|{
return|return
name|createGroupConstraint
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|pref
operator|.
name|getDistributionType
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefLevel
argument_list|()
argument_list|,
name|pref
operator|.
name|getOwner
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Constraint
name|createGroupConstraint
parameter_list|(
name|Long
name|id
parameter_list|,
name|DistributionType
name|type
parameter_list|,
name|PreferenceLevel
name|pref
parameter_list|,
name|Object
name|owner
parameter_list|)
block|{
name|Constraint
name|gc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
literal|"_(.+)_"
argument_list|)
condition|)
block|{
for|for
control|(
name|FlexibleConstraintType
name|fcType
range|:
name|FlexibleConstraintType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|fcType
operator|.
name|getPattern
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|gc
operator|=
name|fcType
operator|.
name|create
argument_list|(
name|id
argument_list|,
name|owner
operator|.
name|toString
argument_list|()
argument_list|,
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
name|MSG
operator|.
name|warnFlexibleConstraintNotLoaded
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|warn
argument_list|(
name|MSG
operator|.
name|warnDistributionConstraintNotKnown
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
if|else if
condition|(
literal|"SAME_INSTR"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|gc
operator|=
operator|new
name|InstructorConstraint
argument_list|(
operator|new
name|Long
argument_list|(
operator|-
name|id
argument_list|)
argument_list|,
literal|null
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"SPREAD"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
name|gc
operator|=
operator|new
name|SpreadConstraint
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
name|MSG
operator|.
name|nameSpreadConstraint
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MIN_ROOM_USE"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
name|gc
operator|=
operator|new
name|MinimizeNumberOfUsedRoomsConstraint
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"constraintNotUsed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnMinRoomUseInteractive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MIN_GRUSE(10x1h)"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
name|gc
operator|=
operator|new
name|MinimizeNumberOfUsedGroupsOfTime
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|"10x1h"
argument_list|,
name|MinimizeNumberOfUsedGroupsOfTime
operator|.
name|sGroups10of1h
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"constraintNotUsed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnMinGroupUseInteractive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MIN_GRUSE(5x2h)"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
name|gc
operator|=
operator|new
name|MinimizeNumberOfUsedGroupsOfTime
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|"5x2h"
argument_list|,
name|MinimizeNumberOfUsedGroupsOfTime
operator|.
name|sGroups5of2h
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"constraintNotUsed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnMinGroupUseInteractive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MIN_GRUSE(3x3h)"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
name|gc
operator|=
operator|new
name|MinimizeNumberOfUsedGroupsOfTime
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|"3x3h"
argument_list|,
name|MinimizeNumberOfUsedGroupsOfTime
operator|.
name|sGroups3of3h
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"constraintNotUsed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnMinGroupUseInteractive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"MIN_GRUSE(2x5h)"
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|iInteractiveMode
condition|)
name|gc
operator|=
operator|new
name|MinimizeNumberOfUsedGroupsOfTime
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|"2x5h"
argument_list|,
name|MinimizeNumberOfUsedGroupsOfTime
operator|.
name|sGroups2of5h
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"constraintNotUsed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnMinGroupUseInteractive
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|IgnoreStudentConflictsConstraint
operator|.
name|REFERENCE
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|gc
operator|=
operator|new
name|IgnoreStudentConflictsConstraint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|GroupConstraint
operator|.
name|ConstraintType
name|gcType
init|=
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|get
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gcType
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|error
argument_list|(
name|MSG
operator|.
name|warnDistributionConstraintNotImplemented
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|gc
operator|=
operator|new
name|GroupConstraint
argument_list|(
name|id
argument_list|,
name|gcType
argument_list|,
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|gc
return|;
block|}
specifier|private
name|void
name|errorAddGroupConstraintNotFound
parameter_list|(
name|DistributionPref
name|pref
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|pref
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
operator|&&
name|pref
operator|.
name|getOwner
argument_list|()
operator|instanceof
name|DepartmentalInstructor
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"notLoadedInInstrPref"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnClassNotLoadedButUsedInDistPref
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"notLoadedInDistPref"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnClassNotLoadedButUsedInDistPref
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Lecture
name|getLecture
parameter_list|(
name|Class_
name|clazz
parameter_list|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
return|return
name|lecture
return|;
if|if
condition|(
name|iAllClasses
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
literal|null
return|;
try|try
block|{
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|lecture
operator|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|iLectures
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LazyInitializationException
name|e
parameter_list|)
block|{
name|Assignment
name|assignment
init|=
operator|(
operator|new
name|AssignmentDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|Placement
name|placement
init|=
name|assignment
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|lecture
operator|=
operator|(
name|Lecture
operator|)
name|placement
operator|.
name|variable
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|iLectures
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|lecture
return|;
block|}
specifier|private
name|void
name|addGroupConstraint
parameter_list|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|gc
parameter_list|)
block|{
if|if
condition|(
name|gc
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|boolean
name|allVariablesAreCommitted
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|allVariablesAreCommitted
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allVariablesAreCommitted
condition|)
block|{
name|String
name|vars
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Lecture
name|l
range|:
name|gc
operator|.
name|variables
argument_list|()
control|)
name|vars
operator|+=
operator|(
name|vars
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|getClassLabel
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
name|MSG
operator|.
name|debugDistributionAllCommitted
argument_list|(
name|gc
operator|.
name|getName
argument_list|()
argument_list|,
name|vars
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|(
name|gc
operator|.
name|variables
argument_list|()
argument_list|)
control|)
block|{
name|gc
operator|.
name|removeVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"Added constraint "
operator|+
name|gc
operator|.
name|getName
argument_list|()
operator|+
literal|" between "
operator|+
name|gc
operator|.
name|variables
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadGroupConstraint
parameter_list|(
name|DistributionPref
name|pref
parameter_list|)
block|{
name|Structure
name|structure
init|=
name|pref
operator|.
name|getStructure
argument_list|()
decl_stmt|;
if|if
condition|(
name|structure
operator|==
literal|null
condition|)
name|structure
operator|=
name|DistributionPref
operator|.
name|Structure
operator|.
name|AllClasses
expr_stmt|;
if|if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|Progressive
condition|)
block|{
name|int
name|maxSize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
name|maxSize
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxSize
argument_list|,
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Constraint
name|gc
index|[]
init|=
operator|new
name|Constraint
index|[
name|maxSize
index|]
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|gcClasses
index|[]
init|=
operator|new
name|Set
index|[
name|maxSize
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|gc
index|[
name|i
index|]
operator|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc
index|[
name|i
index|]
operator|==
literal|null
condition|)
return|return;
name|gcClasses
index|[
name|i
index|]
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Lecture
argument_list|>
name|allLectureOfCorrectOrder
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
name|allLectureOfCorrectOrder
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
name|allLectureOfCorrectOrder
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|List
argument_list|<
name|DistributionObject
argument_list|>
name|distributionObjects
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|pref
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|distributionObjects
argument_list|,
operator|new
name|ChildrenFirstDistributionObjectComparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DistributionObject
name|distributionObject
range|:
name|distributionObjects
control|)
block|{
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gc
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|gc
index|[
name|j
index|]
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|gcClasses
index|[
name|j
index|]
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|classes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badDistributionObj"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadDistributionObject
argument_list|(
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|,
name|getSubpartLabel
argument_list|(
name|subpart
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|gc
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|Class_
name|clazz
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|k
init|=
name|gcClasses
index|[
name|j
index|]
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
operator|&&
name|clazz
operator|==
literal|null
condition|;
control|)
block|{
name|clazz
operator|=
name|getParentClass
argument_list|(
name|k
operator|.
name|next
argument_list|()
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// no children in the list, filter out classes with wrong parent (there is a subpart parent but no class parent)
name|List
argument_list|<
name|Class_
argument_list|>
name|adepts
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|adepts
label|:
for|for
control|(
name|Class_
name|adept
range|:
name|classes
control|)
block|{
for|for
control|(
name|Class_
name|other
range|:
name|gcClasses
index|[
name|j
index|]
control|)
if|if
condition|(
name|shareParent
argument_list|(
name|other
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|adept
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
operator|!
name|shareParent
argument_list|(
name|other
argument_list|,
name|adept
argument_list|)
condition|)
continue|continue
name|adepts
continue|;
name|adepts
operator|.
name|add
argument_list|(
name|adept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|adepts
operator|.
name|isEmpty
argument_list|()
operator|&&
name|adepts
operator|.
name|size
argument_list|()
operator|<
name|classes
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// there are adepts, but some classes have been filtered out -> we may need to skip some previous choices in the adept index
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|j
condition|;
name|i
operator|++
control|)
block|{
name|adepts
label|:
for|for
control|(
name|Class_
name|adept
range|:
name|adepts
control|)
block|{
for|for
control|(
name|Class_
name|other
range|:
name|gcClasses
index|[
name|i
index|]
control|)
if|if
condition|(
name|shareParent
argument_list|(
name|other
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|adept
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
operator|&&
operator|!
name|shareParent
argument_list|(
name|other
argument_list|,
name|adept
argument_list|)
condition|)
continue|continue
name|adepts
continue|;
comment|// adept found for group i -> include it in the adept index
name|k
operator|++
expr_stmt|;
break|break;
block|}
block|}
name|clazz
operator|=
name|adepts
operator|.
name|get
argument_list|(
name|k
operator|%
name|adepts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// fallback -> take j-th class
name|clazz
operator|=
operator|(
name|Class_
operator|)
name|classes
operator|.
name|get
argument_list|(
name|j
operator|%
name|classes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gc
index|[
name|j
index|]
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|gcClasses
index|[
name|j
index|]
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badDistributionObj"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadDistributionObjectNotSupported
argument_list|(
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|,
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Comparator
name|cmp
init|=
operator|new
name|ObjectsByGivenOrderComparator
argument_list|(
name|allLectureOfCorrectOrder
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|gc
index|[
name|i
index|]
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|gc
index|[
name|i
index|]
operator|.
name|variables
argument_list|()
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|Pairwise
condition|)
block|{
name|List
argument_list|<
name|Lecture
argument_list|>
name|lectures
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badDistributionObj"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadDistributionObjectNotSupported
argument_list|(
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|,
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lectures
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"distrPrefIncomplete"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadDistributionIncomplete
argument_list|(
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|idx1
init|=
literal|0
init|;
name|idx1
operator|<
name|lectures
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|idx1
operator|++
control|)
block|{
name|Lecture
name|l1
init|=
name|lectures
operator|.
name|get
argument_list|(
name|idx1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx2
init|=
name|idx1
operator|+
literal|1
init|;
name|idx2
operator|<
name|lectures
operator|.
name|size
argument_list|()
condition|;
name|idx2
operator|++
control|)
block|{
name|Lecture
name|l2
init|=
name|lectures
operator|.
name|get
argument_list|(
name|idx2
argument_list|)
decl_stmt|;
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return;
name|gc
operator|.
name|addVariable
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|gc
operator|.
name|addVariable
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|structure
operator|==
name|DistributionPref
operator|.
name|Structure
operator|.
name|OneOfEach
condition|)
block|{
name|List
argument_list|<
name|Lecture
argument_list|>
name|lectures
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badDistributionObj"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadDistributionObjectNotSupported
argument_list|(
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|,
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
literal|0
condition|)
name|counts
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|counts
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|Enumeration
argument_list|<
name|List
argument_list|<
name|Lecture
argument_list|>
argument_list|>
name|e
init|=
name|DistributionPref
operator|.
name|permutations
argument_list|(
name|lectures
argument_list|,
name|counts
argument_list|)
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|Collection
argument_list|<
name|Lecture
argument_list|>
name|perm
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Lecture
name|lecture
range|:
name|perm
control|)
name|gc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Posted "
operator|+
name|gc
operator|.
name|getName
argument_list|()
operator|+
literal|" between "
operator|+
name|gc
operator|.
name|variables
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Integer
name|grouping
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|structure
condition|)
block|{
case|case
name|GroupsOfTwo
case|:
name|grouping
operator|=
literal|2
expr_stmt|;
break|break;
case|case
name|GroupsOfThree
case|:
name|grouping
operator|=
literal|3
expr_stmt|;
break|break;
case|case
name|GroupsOfFour
case|:
name|grouping
operator|=
literal|4
expr_stmt|;
break|break;
case|case
name|GroupsOfFive
case|:
name|grouping
operator|=
literal|5
expr_stmt|;
break|break;
block|}
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|pref
operator|.
name|getOrderedSetOfDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|distributionObject
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|grouping
operator|!=
literal|null
operator|&&
name|gc
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|grouping
condition|)
block|{
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
name|gc
operator|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return;
block|}
block|}
if|else if
condition|(
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|grouping
operator|!=
literal|null
operator|&&
name|gc
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|grouping
condition|)
block|{
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
name|gc
operator|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
expr_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return;
block|}
block|}
block|}
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badDistributionObj"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadDistributionObjectNotSupported
argument_list|(
name|pref
operator|.
name|getLabel
argument_list|()
argument_list|,
name|distributionObject
operator|.
name|getPrefGroup
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadInstructorGroupConstraint
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|DistributionPref
name|pref
parameter_list|)
block|{
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|pref
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return;
name|boolean
name|loadConstraint
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|classInstructor
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|classInstructor
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
if|if
condition|(
name|classInstructor
operator|.
name|isLead
argument_list|()
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|isInheritInstructorPreferences
argument_list|()
condition|)
block|{
name|loadConstraint
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|loadConstraint
condition|)
return|return;
name|InstructorConstraint
name|ic
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|ic
operator|=
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ic
operator|=
name|iInstructors
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ic
operator|!=
literal|null
operator|&&
name|ic
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|iInstructorDistributionsAcrossDepartments
condition|)
block|{
for|for
control|(
name|Lecture
name|lecutre
range|:
name|ic
operator|.
name|variables
argument_list|()
control|)
name|gc
operator|.
name|addVariable
argument_list|(
name|lecutre
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|instructor
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|classInstructor
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|classInstructor
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|classInstructor
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
name|errorAddGroupConstraintNotFound
argument_list|(
name|pref
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|gc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
if|if
condition|(
name|ic
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|DistributionType
argument_list|>
name|distributions
init|=
name|iInstructorDistributions
operator|.
name|get
argument_list|(
name|ic
argument_list|)
decl_stmt|;
if|if
condition|(
name|distributions
operator|==
literal|null
condition|)
block|{
name|distributions
operator|=
operator|new
name|ArrayList
argument_list|<
name|DistributionType
argument_list|>
argument_list|()
expr_stmt|;
name|iInstructorDistributions
operator|.
name|put
argument_list|(
name|ic
argument_list|,
name|distributions
argument_list|)
expr_stmt|;
block|}
name|distributions
operator|.
name|add
argument_list|(
name|pref
operator|.
name|getDistributionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadInstructorGroupConstraints
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|checkedDistPrefIds
parameter_list|)
block|{
name|Set
name|prefs
init|=
name|instructor
operator|.
name|getPreferences
argument_list|(
name|DistributionPref
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefs
operator|==
literal|null
operator|||
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
for|for
control|(
name|Iterator
name|i
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|pref
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkedDistPrefIds
operator|.
name|add
argument_list|(
name|pref
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|loadInstructorGroupConstraint
argument_list|(
name|instructor
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadInstructorGroupConstraints
parameter_list|(
name|Department
name|department
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|checkedDistPrefIds
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isInheritInstructorPreferences
argument_list|()
condition|)
return|return;
name|List
name|instructors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|instructors
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct i.instructor from Class_ as c inner join c.classInstructors i "
operator|+
literal|"where i.lead = true and (c.managingDept=:deptId or (c.managingDept is null and c.controllingDept=:deptId))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|instructors
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct di from DepartmentalInstructor di inner join di.department d where d.uniqueId=:deptId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"deptId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|instructors
operator|==
literal|null
operator|||
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadInstructorGroupConstraints
argument_list|(
name|department
operator|.
name|getShortLabel
argument_list|()
argument_list|)
argument_list|,
name|instructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|loadInstructorGroupConstraints
argument_list|(
name|instructor
argument_list|,
name|checkedDistPrefIds
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Class_
name|getParentClass
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|SchedulingSubpart
name|parentSubpart
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|parentSubpart
operator|.
name|getClasses
argument_list|()
operator|.
name|contains
argument_list|(
name|clazz
argument_list|)
condition|)
return|return
name|clazz
return|;
return|return
name|getParentClass
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|parentSubpart
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|shareParent
parameter_list|(
name|Class_
name|c1
parameter_list|,
name|Class_
name|c2
parameter_list|)
block|{
if|if
condition|(
name|c1
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Class_
name|p
init|=
name|c2
operator|.
name|getParentClass
argument_list|()
init|;
name|p
operator|!=
literal|null
condition|;
name|p
operator|=
name|p
operator|.
name|getParentClass
argument_list|()
control|)
if|if
condition|(
name|c1
operator|.
name|getParentClass
argument_list|()
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|shareParent
argument_list|(
name|c1
operator|.
name|getParentClass
argument_list|()
argument_list|,
name|c2
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|shareParent
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|SchedulingSubpart
name|p
init|=
name|s2
operator|.
name|getParentSubpart
argument_list|()
init|;
name|p
operator|!=
literal|null
condition|;
name|p
operator|=
name|p
operator|.
name|getParentSubpart
argument_list|()
control|)
if|if
condition|(
name|s1
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|shareParent
argument_list|(
name|s1
operator|.
name|getParentSubpart
argument_list|()
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|ChildrenFirstDistributionObjectComparator
implements|implements
name|Comparator
argument_list|<
name|DistributionObject
argument_list|>
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|DistributionObject
name|d1
parameter_list|,
name|DistributionObject
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
if|if
condition|(
name|d2
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
return|return
name|d1
operator|.
name|compareTo
argument_list|(
name|d2
argument_list|)
return|;
else|else
return|return
literal|1
return|;
comment|//classes last
block|}
if|else if
condition|(
name|d2
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
operator|!
operator|(
name|d1
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
operator|)
operator|||
operator|!
operator|(
name|d2
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
operator|)
condition|)
return|return
name|d1
operator|.
name|compareTo
argument_list|(
name|d2
argument_list|)
return|;
comment|//should not happen
name|SchedulingSubpart
name|s1
init|=
operator|(
name|SchedulingSubpart
operator|)
name|d1
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|s2
init|=
operator|(
name|SchedulingSubpart
operator|)
name|d2
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
if|if
condition|(
name|s2
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
name|d1
operator|.
name|compareTo
argument_list|(
name|d2
argument_list|)
return|;
else|else
return|return
literal|1
return|;
comment|//singleton last
block|}
if|else if
condition|(
name|s2
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|getParentClass
argument_list|(
operator|(
name|Class_
operator|)
name|s1
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|s2
argument_list|)
operator|!=
literal|null
condition|)
return|return
operator|-
literal|1
return|;
comment|//c1 is child, c2 is parent
if|if
condition|(
name|getParentClass
argument_list|(
operator|(
name|Class_
operator|)
name|s2
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|,
name|s1
argument_list|)
operator|!=
literal|null
condition|)
return|return
literal|1
return|;
comment|//c2 is child, c1 is parent
comment|// distribution objects share a parent, return the one with more classes first
if|if
condition|(
name|shareParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
block|{
if|if
condition|(
name|s1
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|s2
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|1
return|;
if|else if
condition|(
name|s1
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
name|s2
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
block|}
return|return
name|d1
operator|.
name|compareTo
argument_list|(
name|d2
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|getClassLimitConstraitName
parameter_list|(
name|SchedulingSubpart
name|subpart
parameter_list|)
block|{
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
return|return
name|MSG
operator|.
name|nameClassLimitConstraint
argument_list|()
return|;
name|String
name|name
init|=
name|subpart
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|sufix
init|=
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
name|sufix
operator|!=
literal|null
operator|&&
name|sufix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|name
operator|+=
literal|" ("
operator|+
name|sufix
operator|+
literal|")"
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|private
name|String
name|getClassLimitConstraitName
parameter_list|(
name|Lecture
name|lecture
parameter_list|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|iSubparts
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getSchedulingSubpartId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
name|subpart
operator|=
name|SchedulingSubpartDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getSchedulingSubpartId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|getClassLimitConstraitName
argument_list|(
name|subpart
argument_list|)
return|;
block|}
specifier|private
name|void
name|createChildrenClassLimitConstraits
parameter_list|(
name|Lecture
name|parentLecture
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parentLecture
operator|.
name|hasAnyChildren
argument_list|()
condition|)
return|return;
for|for
control|(
name|Long
name|subpartId
range|:
name|parentLecture
operator|.
name|getChildrenSubpartIds
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Lecture
argument_list|>
name|children
init|=
name|parentLecture
operator|.
name|getChildren
argument_list|(
name|subpartId
argument_list|)
decl_stmt|;
name|ClassLimitConstraint
name|clc
init|=
operator|new
name|ClassLimitConstraint
argument_list|(
name|parentLecture
argument_list|,
name|getClassLimitConstraitName
argument_list|(
name|parentLecture
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|isMakingSense
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|children
control|)
block|{
name|createChildrenClassLimitConstraits
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
operator|&&
name|lecture
operator|.
name|minClassLimit
argument_list|()
operator|!=
name|lecture
operator|.
name|maxClassLimit
argument_list|()
condition|)
name|isMakingSense
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMakingSense
condition|)
continue|continue;
for|for
control|(
name|Lecture
name|lecture
range|:
name|children
control|)
block|{
if|if
condition|(
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
name|clc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
else|else
name|clc
operator|.
name|setClassLimitDelta
argument_list|(
name|clc
operator|.
name|getClassLimitDelta
argument_list|()
operator|-
name|iClasses
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clc
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|SchedulingSubpart
name|subpart
init|=
name|iSubparts
operator|.
name|get
argument_list|(
name|subpartId
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
name|subpart
operator|=
name|SchedulingSubpartDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|subpartId
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|clc
operator|.
name|setClassLimitDelta
argument_list|(
name|clc
operator|.
name|getClassLimitDelta
argument_list|()
operator|-
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|trace
argument_list|(
literal|"Added constraint "
operator|+
name|clc
operator|.
name|getName
argument_list|()
operator|+
literal|" between "
operator|+
name|clc
operator|.
name|variables
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|clc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|load
parameter_list|()
block|{
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|IGNORE
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|COMMIT
argument_list|)
expr_stmt|;
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|load
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"loadFailed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalLoadFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
comment|// here we need to close the session since this code may run in a separate thread
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|postSameStudentConstraint
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|boolean
name|posted
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|postSameStudentConstraint
argument_list|(
name|c
argument_list|,
name|type
argument_list|)
condition|)
name|posted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|posted
condition|)
return|return
literal|true
return|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
name|variables
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|Class_
name|parent
init|=
name|clazz
decl_stmt|;
while|while
condition|(
operator|(
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Lecture
name|parentLecture
init|=
name|getLecture
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentLecture
operator|!=
literal|null
condition|)
name|variables
operator|.
name|add
argument_list|(
name|parentLecture
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
operator|||
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
continue|continue;
name|Class_
name|singleClazz
init|=
operator|(
name|Class_
operator|)
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|singleLecture
init|=
name|getLecture
argument_list|(
name|singleClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|singleLecture
operator|!=
literal|null
operator|&&
operator|!
name|variables
operator|.
name|contains
argument_list|(
name|singleLecture
argument_list|)
condition|)
name|variables
operator|.
name|add
argument_list|(
name|singleLecture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|variables
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
literal|false
return|;
name|GroupConstraint
name|gc
init|=
operator|new
name|GroupConstraint
argument_list|(
literal|null
argument_list|,
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
decl_stmt|;
for|for
control|(
name|Lecture
name|var
range|:
name|variables
control|)
name|gc
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|postPrecedenceConstraint
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|String
name|preference
parameter_list|)
block|{
name|boolean
name|posted
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|postPrecedenceConstraint
argument_list|(
name|c
argument_list|,
name|preference
argument_list|)
condition|)
name|posted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|posted
condition|)
return|return
literal|true
return|;
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
name|variables
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|itypes
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|itypes
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|Class_
name|parent
init|=
name|clazz
decl_stmt|;
while|while
condition|(
operator|(
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Lecture
name|parentLecture
init|=
name|getLecture
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentLecture
operator|!=
literal|null
condition|)
block|{
name|variables
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|parentLecture
argument_list|)
expr_stmt|;
name|itypes
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|variables
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|itypes
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
literal|false
return|;
name|GroupConstraint
name|gc
init|=
operator|new
name|GroupConstraint
argument_list|(
literal|null
argument_list|,
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|PRECEDENCE
argument_list|,
name|preference
argument_list|)
decl_stmt|;
name|String
name|info
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Lecture
name|var
range|:
name|variables
control|)
block|{
name|gc
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isEmpty
argument_list|()
condition|)
name|info
operator|+=
literal|", "
expr_stmt|;
name|info
operator|+=
name|getClassLabel
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|info
argument_list|(
name|MSG
operator|.
name|infoAutomaticPrecedence
argument_list|(
name|info
argument_list|,
name|PreferenceLevel
operator|.
name|prolog2string
argument_list|(
name|preference
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|propagateCommittedAssignment
parameter_list|(
name|HashSet
name|students
parameter_list|,
name|Assignment
name|assignment
parameter_list|)
block|{
name|Class_
name|clazz
init|=
name|assignment
operator|.
name|getClazz
argument_list|()
decl_stmt|;
name|Lecture
name|parentLecture
init|=
literal|null
decl_stmt|;
name|Class_
name|c
init|=
name|clazz
decl_stmt|;
while|while
condition|(
operator|(
name|parentLecture
operator|==
literal|null
operator|||
name|parentLecture
operator|.
name|isCommitted
argument_list|()
operator|)
operator|&&
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
name|parentLecture
operator|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentLecture
operator|!=
literal|null
operator|&&
operator|!
name|parentLecture
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
for|for
control|(
name|Lecture
name|lecture
range|:
name|parentLecture
operator|.
name|sameSubpartLectures
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|lecture
operator|.
name|equals
argument_list|(
name|parentLecture
argument_list|)
operator|&&
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
comment|//iProgress.debug("[A] Students "+students+" cannot enroll "+lecture.getName()+" due to the enrollment of "+clazz.getClassLabel(iShowClassSuffix, iShowConfigName));
for|for
control|(
name|Iterator
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|student
operator|.
name|addCanNotEnroll
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|child
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getParentClass
argument_list|()
argument_list|)
condition|)
name|propagateCommittedAssignment
argument_list|(
name|students
argument_list|,
name|clazz
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|propagateCommittedAssignment
parameter_list|(
name|HashSet
name|students
parameter_list|,
name|Class_
name|parent
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
operator|&&
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
comment|//iProgress.debug("[B] Students "+students+" cannot enroll "+lecture.getName()+" due to the enrollment of "+parent.getClassLabel(iShowClassSuffix, iShowConfigName));
for|for
control|(
name|Iterator
name|i
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|student
operator|.
name|addCanNotEnroll
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|child
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|propagateCommittedAssignment
argument_list|(
name|students
argument_list|,
name|parent
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|loadCommittedStudentConflicts
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|offeringsToAvoid
parameter_list|)
block|{
comment|//Load all committed assignment - student relations that may be relevant
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|assignmentEnrollments
init|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct a, e.studentId, io.uniqueId from "
operator|+
literal|"Solution s inner join s.assignments a inner join s.studentEnrollments e inner join a.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering io "
operator|+
literal|"where "
operator|+
literal|"s.commited=true and s.owner.session.uniqueId=:sessionId and s.owner not in ("
operator|+
name|iSolverGroupIds
operator|+
literal|") and "
operator|+
literal|"a.clazz=e.clazz"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
comment|// Filter out relevant relations (relations that are for loaded students)
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Student
argument_list|>
argument_list|>
name|assignments
init|=
operator|new
name|Hashtable
argument_list|<
name|Assignment
argument_list|,
name|Set
argument_list|<
name|Student
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|result
range|:
name|assignmentEnrollments
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|result
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|result
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|offeringId
init|=
operator|(
name|Long
operator|)
name|result
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|offeringsToAvoid
operator|.
name|contains
argument_list|(
name|offeringId
argument_list|)
condition|)
continue|continue;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|assignments
operator|.
name|get
argument_list|(
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|assignments
operator|.
name|put
argument_list|(
name|assignment
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Ensure no assignment-class relation is got from the cache
for|for
control|(
name|Iterator
name|i1
init|=
name|assignmentEnrollments
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
index|[]
name|result
init|=
operator|(
name|Object
index|[]
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|result
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|assignments
operator|.
name|containsKey
argument_list|(
name|assignment
argument_list|)
condition|)
name|hibSession
operator|.
name|evict
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
comment|// Make up the appropriate committed placements and propagate those through the course structure
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadCommittedStudentConflicts
argument_list|()
argument_list|,
name|assignments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|assignments
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|HashSet
name|students
init|=
operator|(
name|HashSet
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Placement
name|committedPlacement
init|=
name|assignment
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|students
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|student
operator|.
name|addCommitedPlacement
argument_list|(
name|committedPlacement
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iLectures
operator|.
name|containsKey
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
block|{
name|iLectures
operator|.
name|put
argument_list|(
name|assignment
operator|.
name|getClassId
argument_list|()
argument_list|,
name|committedPlacement
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|committedPlacement
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propagateCommittedAssignment
argument_list|(
name|students
argument_list|,
name|assignment
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|somehowEnroll
parameter_list|(
name|Student
name|student
parameter_list|,
name|CourseOffering
name|course
parameter_list|,
name|float
name|weight
parameter_list|,
name|Double
name|priority
parameter_list|)
block|{
if|if
condition|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
condition|)
return|return
literal|false
return|;
name|boolean
name|hasSomethingCommitted
init|=
literal|false
decl_stmt|;
name|config
label|:
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hasSomethingCommitted
operator|=
literal|true
expr_stmt|;
break|break
name|config
break|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hasSomethingCommitted
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|iOfferings
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
condition|)
name|iOfferings
operator|.
name|put
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|loadOffering
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLoadCommittedReservations
condition|)
block|{
name|InstructionalOffering
name|offering
init|=
name|course
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|reservedClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reservation
operator|.
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|CourseReservation
name|cr
init|=
operator|(
name|CourseReservation
operator|)
name|reservation
decl_stmt|;
if|if
condition|(
operator|!
name|course
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|WeightedStudentId
name|studentId
init|=
name|iWeightedStudents
operator|.
name|get
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
continue|continue;
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AreaClasfMajor
name|acm
range|:
name|studentId
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasArea
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
operator|&&
name|cr
operator|.
name|hasClassification
argument_list|(
name|acm
operator|.
name|getClasf
argument_list|()
argument_list|)
operator|&&
name|cr
operator|.
name|hasMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
continue|continue;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|WeightedStudentId
name|studentId
init|=
name|iWeightedStudents
operator|.
name|get
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
continue|continue;
name|StudentGroupReservation
name|gr
init|=
operator|(
name|StudentGroupReservation
operator|)
name|reservation
decl_stmt|;
if|if
condition|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Group
name|g
init|=
name|studentId
operator|.
name|getGroup
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
operator|||
name|g
operator|.
name|getId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
block|}
else|else
continue|continue;
for|for
control|(
name|Class_
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|propagateReservedClasses
argument_list|(
name|clazz
argument_list|,
name|reservedClasses
argument_list|)
expr_stmt|;
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|reservedClasses
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
name|reservedClasses
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|reservedClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" has reserved classes "
operator|+
name|reservedClasses
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Lecture
argument_list|>
name|prohibited
init|=
operator|new
name|HashSet
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|boolean
name|hasConfigReservation
init|=
literal|false
decl_stmt|;
name|subparts
label|:
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|hasConfigReservation
operator|=
literal|true
expr_stmt|;
break|break
name|subparts
break|;
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|boolean
name|hasSubpartReservation
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|hasSubpartReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// !hasConfigReservation>> all lectures are cannot attend (there is a reservation on a different config)
comment|// otherwise if !hasSubpartReservation>> there is reservation on some other subpart --> can attend any of the classes of this subpart
if|if
condition|(
operator|!
name|hasConfigReservation
operator|||
name|hasSubpartReservation
condition|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
name|prohibited
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|debug
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" cannot attend classes "
operator|+
name|prohibited
argument_list|)
expr_stmt|;
name|student
operator|.
name|addCanNotEnroll
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|prohibited
argument_list|)
expr_stmt|;
block|}
block|}
name|student
operator|.
name|addOffering
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|weight
argument_list|,
name|priority
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|iCourse2students
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2students
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|makeupCommittedStudentConflicts
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|offeringsToAvoid
parameter_list|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseMakeupCommittedStudentConflicts
argument_list|()
argument_list|,
name|iStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|iStudents
operator|.
name|values
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|courses
init|=
name|iStudentCourseDemands
operator|.
name|getCourses
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iStudentGroupCourseDemands
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|WeightedCourseOffering
argument_list|>
name|other
init|=
name|iStudentGroupCourseDemands
operator|.
name|getCourses
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
name|courses
operator|=
name|other
expr_stmt|;
else|else
name|courses
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|WeightedCourseOffering
name|course
range|:
name|courses
control|)
block|{
if|if
condition|(
name|offeringsToAvoid
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|somehowEnroll
argument_list|(
name|student
argument_list|,
name|course
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|course
operator|.
name|getWeight
argument_list|()
argument_list|,
name|iStudentCourseDemands
operator|.
name|getEnrollmentPriority
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseOfferingId
argument_list|()
argument_list|)
argument_list|)
condition|)
name|offeringsToAvoid
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|propagateReservedClasses
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|reservedClasses
parameter_list|)
block|{
name|reservedClasses
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|child
range|:
name|clazz
operator|.
name|getChildClasses
argument_list|()
control|)
name|propagateReservedClasses
argument_list|(
name|child
argument_list|,
name|reservedClasses
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|canAttend
parameter_list|(
name|Set
argument_list|<
name|Lecture
argument_list|>
name|cannotAttendLectures
parameter_list|,
name|Collection
argument_list|<
name|Lecture
argument_list|>
name|lectures
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|e
init|=
name|lectures
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cannotAttendLectures
operator|.
name|contains
argument_list|(
name|lecture
argument_list|)
condition|)
continue|continue;
name|boolean
name|canAttend
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|hasAnyChildren
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|subpartId
range|:
name|lecture
operator|.
name|getChildrenSubpartIds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|canAttend
argument_list|(
name|cannotAttendLectures
argument_list|,
name|lecture
operator|.
name|getChildren
argument_list|(
name|subpartId
argument_list|)
argument_list|)
condition|)
block|{
name|canAttend
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|canAttend
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|canAttendConfigurations
parameter_list|(
name|Set
argument_list|<
name|Lecture
argument_list|>
name|cannotAttendLectures
parameter_list|,
name|List
argument_list|<
name|Configuration
argument_list|>
name|configurations
parameter_list|)
block|{
for|for
control|(
name|Configuration
name|cfg
range|:
name|configurations
control|)
block|{
name|boolean
name|canAttend
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Long
name|subpartId
range|:
name|cfg
operator|.
name|getTopSubpartIds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|canAttend
argument_list|(
name|cannotAttendLectures
argument_list|,
name|cfg
operator|.
name|getTopLectures
argument_list|(
name|subpartId
argument_list|)
argument_list|)
condition|)
block|{
name|canAttend
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|canAttend
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|void
name|checkReservation
parameter_list|(
name|CourseOffering
name|course
parameter_list|,
name|Set
argument_list|<
name|Lecture
argument_list|>
name|cannotAttendLectures
parameter_list|,
name|List
argument_list|<
name|Configuration
argument_list|>
name|configurations
parameter_list|)
block|{
if|if
condition|(
name|canAttendConfigurations
argument_list|(
name|cannotAttendLectures
argument_list|,
name|configurations
argument_list|)
condition|)
return|return;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badCourseReservation"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadCourseReservations
argument_list|(
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|sortedConfigs
parameter_list|(
name|InstructionalOffering
name|offering
parameter_list|)
block|{
if|if
condition|(
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
return|;
name|TreeSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|configs
init|=
operator|new
name|TreeSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|(
operator|new
name|InstrOfferingConfigComparator
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|configs
operator|.
name|addAll
argument_list|(
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|configs
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
name|loadOffering
parameter_list|(
name|InstructionalOffering
name|offering
parameter_list|,
name|boolean
name|assignCommitted
parameter_list|)
block|{
comment|// solver group ids for fast check
name|HashSet
argument_list|<
name|Long
argument_list|>
name|solverGroupIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|solverGroupId
range|:
name|iSolverGroupId
control|)
name|solverGroupIds
operator|.
name|add
argument_list|(
name|solverGroupId
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
name|cfg2topSubparts
init|=
operator|new
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|// alternative configurations
name|List
argument_list|<
name|Configuration
argument_list|>
name|altCfgs
init|=
operator|new
name|ArrayList
argument_list|<
name|Configuration
argument_list|>
argument_list|()
decl_stmt|;
name|iAltConfigurations
operator|.
name|put
argument_list|(
name|offering
argument_list|,
name|altCfgs
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|sortedConfigs
argument_list|(
name|offering
argument_list|)
control|)
block|{
comment|// create a configuration, set alternative configurations
name|Configuration
name|cfg
init|=
operator|new
name|Configuration
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|config
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|config
operator|.
name|getLimit
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|topSubparts
init|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noSolverGroup"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoSolverGroup
argument_list|(
name|getClassLabel
argument_list|(
name|clazz
argument_list|)
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getManagingDeptAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|solverGroupIds
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// only classes of other problems
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
comment|// only committed classes
if|if
condition|(
name|iLectures
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// already loaded
name|Placement
name|committedPlacement
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|lecture
operator|=
name|committedPlacement
operator|.
name|variable
argument_list|()
expr_stmt|;
name|iLectures
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|iSubparts
operator|.
name|put
argument_list|(
name|subpart
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignCommitted
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|weaken
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|committedPlacement
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|committedPlacement
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|committedPlacement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|warn
init|=
name|MSG
operator|.
name|warnCannotAssignCommitted
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|committedPlacement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
decl_stmt|;
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonFirstLine
argument_list|()
expr_stmt|;
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|v
range|:
name|vals
control|)
block|{
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonConflict
argument_list|(
name|getClassLabel
argument_list|(
name|v
operator|.
name|variable
argument_list|()
argument_list|)
argument_list|,
name|v
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|warn
operator|+=
name|MSG
operator|.
name|warnReasonConstraint
argument_list|(
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"cannotAssignCommitted"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|warn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Lecture
argument_list|>
name|sameSubpart
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
comment|// set parent lecture
name|Class_
name|parentClazz
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentClazz
operator|!=
literal|null
condition|)
block|{
name|Lecture
name|parentLecture
init|=
literal|null
decl_stmt|;
name|Class_
name|c
init|=
name|clazz
decl_stmt|;
while|while
condition|(
name|parentLecture
operator|==
literal|null
operator|&&
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|c
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
name|parentLecture
operator|=
name|iLectures
operator|.
name|get
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentLecture
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setParent
argument_list|(
name|parentLecture
argument_list|)
expr_stmt|;
block|}
comment|// set same subpart lectures
name|sameSubpart
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setSameSubpartLectures
argument_list|(
name|sameSubpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// set configuration
name|lecture
operator|.
name|setConfiguration
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
comment|// top subparts
name|topSubparts
operator|.
name|add
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cfg
operator|.
name|getTopLectures
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// skip empty configurations
name|altCfgs
operator|.
name|add
argument_list|(
name|cfg
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setAltConfigurations
argument_list|(
name|altCfgs
argument_list|)
expr_stmt|;
name|cfg2topSubparts
operator|.
name|put
argument_list|(
name|config
argument_list|,
name|topSubparts
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cfg2topSubparts
return|;
block|}
specifier|private
name|void
name|load
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|Exception
block|{
name|iProgress
operator|.
name|setStatus
argument_list|(
name|MSG
operator|.
name|statusLoadingInputData
argument_list|()
argument_list|)
expr_stmt|;
name|TravelTime
operator|.
name|populateTravelTimes
argument_list|(
name|getModel
argument_list|()
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|iSessionId
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|iSolverGroup
operator|=
literal|null
expr_stmt|;
name|iSession
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|iSolverGroup
operator|==
literal|null
condition|)
block|{
name|iSolverGroup
operator|=
operator|new
name|SolverGroup
index|[
name|iSolverGroupId
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iSolverGroup
index|[
name|i
index|]
operator|=
name|SolverGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|iSolverGroupId
index|[
name|i
index|]
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSolverGroup
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"loadFailed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalUnableToLoadSolverGroup
argument_list|(
name|iSolverGroupId
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"solver group["
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"]: "
operator|+
name|iSolverGroup
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSolverGroup
operator|==
literal|null
operator|||
name|iSolverGroup
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"loadFailed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalNoSolverGroupLoaded
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|iDepartmentIds
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iSolverGroup
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|iSolverGroup
index|[
name|j
index|]
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|iDepartmentIds
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|iDepartmentIds
operator|+=
literal|","
expr_stmt|;
name|iDepartmentIds
operator|+=
name|d
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.DepartmentIds"
argument_list|,
name|iDepartmentIds
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Solution
argument_list|>
name|solutions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSolutionId
operator|!=
literal|null
operator|&&
name|iSolutionId
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|solutions
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Solution
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|note
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolutionId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
operator|new
name|SolutionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|iSolutionId
index|[
name|i
index|]
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"loadFailed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalUnableToLoadSolution
argument_list|(
name|iSolutionId
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"solution["
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"] version: "
operator|+
name|solution
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|" (created "
operator|+
name|solution
operator|.
name|getCreated
argument_list|()
operator|+
literal|", solver group "
operator|+
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|note
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|note
operator|+=
literal|"\n"
expr_stmt|;
name|note
operator|+=
name|solution
operator|.
name|getNote
argument_list|()
expr_stmt|;
block|}
name|solutions
operator|.
name|put
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|solution
argument_list|)
expr_stmt|;
block|}
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.Note"
argument_list|,
name|note
argument_list|)
expr_stmt|;
name|String
name|solutionIdStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Solution
name|solution
init|=
name|solutions
operator|.
name|get
argument_list|(
name|iSolverGroupId
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|solutionIdStr
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|solutionIdStr
operator|+=
literal|","
expr_stmt|;
name|solutionIdStr
operator|+=
name|solution
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"General.SolutionId"
argument_list|,
name|solutionIdStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
name|iSession
operator|=
operator|(
operator|new
name|SessionDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"loadFailed"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalNoSessionLoaded
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"session: "
operator|+
name|iSession
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Term"
argument_list|,
name|iSession
operator|.
name|getAcademicYearTerm
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Data.Initiative"
argument_list|,
name|iSession
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|setYear
argument_list|(
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"DatePattern.DayOfWeekOffset"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|iSession
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|BitSet
name|pattern
init|=
name|iSession
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
name|String
name|patternStr
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|patternStr
operator|+=
operator|(
name|pattern
operator|.
name|get
argument_list|(
name|i
argument_list|)
condition|?
literal|"1"
else|:
literal|"0"
operator|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"DatePattern.Default"
argument_list|,
name|patternStr
argument_list|)
expr_stmt|;
block|}
name|iAllClasses
operator|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|iSolverGroup
index|[
name|i
index|]
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|iAllClasses
operator|.
name|addAll
argument_list|(
name|d
operator|.
name|getClassesFetchWithStructure
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iAllClasses
operator|==
literal|null
operator|||
name|iAllClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noClasses"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalNoClassesToLoad
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
literal|"classes to load: "
operator|+
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingClasses
argument_list|()
argument_list|,
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
literal|0
decl_stmt|;
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iAllClasses
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
name|loadClass
argument_list|(
name|clazz
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
name|lecture
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|loadInstructorAvailabilities
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|loadRoomAvailabilities
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingOfferings
argument_list|()
argument_list|,
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|loadedOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|iAllClasses
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
comment|//skip classes that were not loaded
name|InstructionalOffering
name|offering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|loadedOfferings
operator|.
name|add
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// already loaded
name|iOfferings
operator|.
name|put
argument_list|(
name|offering
argument_list|,
name|loadOffering
argument_list|(
name|offering
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|DistributionPref
argument_list|>
name|distPrefs
init|=
operator|new
name|ArrayList
argument_list|<
name|DistributionPref
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|distPrefs
operator|.
name|addAll
argument_list|(
name|iSolverGroup
index|[
name|i
index|]
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingDistributions
argument_list|()
argument_list|,
name|distPrefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|distPrefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|distributionPref
init|=
operator|(
name|DistributionPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|distributionPref
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|loadGroupConstraint
argument_list|(
name|distributionPref
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|checkedDistPrefIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverGroup
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|iSolverGroup
index|[
name|i
index|]
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|loadInstructorGroupConstraints
argument_list|(
operator|(
name|Department
operator|)
name|j
operator|.
name|next
argument_list|()
argument_list|,
name|checkedDistPrefIds
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iAutoSameStudents
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingSameStudents
argument_list|()
argument_list|,
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iAllClasses
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|lecture
operator|.
name|hasAnyChildren
argument_list|()
condition|)
name|postSameStudentConstraint
argument_list|(
name|clazz
argument_list|,
name|iAutoSameStudentsConstraint
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iAutoPrecedence
operator|!=
literal|null
condition|)
block|{
name|PreferenceLevel
name|pref
init|=
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|iAutoPrecedence
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
comment|// Lookup preference if needed
for|for
control|(
name|PreferenceLevel
name|p
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
if|if
condition|(
name|iAutoPrecedence
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|||
name|iAutoPrecedence
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
argument_list|)
operator|||
name|iAutoPrecedence
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"autoPrecedence"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnPrecedenceNotRecognized
argument_list|(
name|iAutoPrecedence
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingAutomaticPrecedences
argument_list|()
argument_list|,
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iAllClasses
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|lecture
operator|.
name|hasAnyChildren
argument_list|()
condition|)
name|postPrecedenceConstraint
argument_list|(
name|clazz
argument_list|,
name|pref
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|postAutomaticHierarchicalConstraints
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|postAutomaticInstructorConstraints
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|assignCommited
argument_list|()
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingClassLimits
argument_list|()
argument_list|,
name|iOfferings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|InstructionalOffering
argument_list|,
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
argument_list|>
name|entry
range|:
name|iOfferings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
name|topSubparts
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|InstrOfferingConfig
argument_list|,
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|>
name|subpartEntry
range|:
name|topSubparts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
name|subpartEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|SchedulingSubpart
argument_list|>
name|topSubpartsThisConfig
init|=
name|subpartEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|topSubpartsThisConfig
control|)
block|{
name|boolean
name|isMakingSense
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
name|createChildrenClassLimitConstraits
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
operator|&&
name|lecture
operator|.
name|minClassLimit
argument_list|()
operator|!=
name|lecture
operator|.
name|maxClassLimit
argument_list|()
condition|)
name|isMakingSense
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isMakingSense
condition|)
continue|continue;
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ClassLimitConstraint
name|clc
init|=
operator|new
name|ClassLimitConstraint
argument_list|(
name|config
operator|.
name|getLimit
argument_list|()
argument_list|,
name|getClassLimitConstraitName
argument_list|(
name|subpart
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
operator|||
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|clc
operator|.
name|setClassLimitDelta
argument_list|(
name|clc
operator|.
name|getClassLimitDelta
argument_list|()
operator|-
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|clc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clc
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|iProgress
operator|.
name|trace
argument_list|(
literal|"Added constraint "
operator|+
name|clc
operator|.
name|getName
argument_list|()
operator|+
literal|" between "
operator|+
name|clc
operator|.
name|variables
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|clc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassLimitConstraint
argument_list|>
name|clcs
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassLimitConstraint
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Class_
name|parentClazz
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
name|ClassLimitConstraint
name|clc
init|=
name|clcs
operator|.
name|get
argument_list|(
name|parentClazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clc
operator|==
literal|null
condition|)
block|{
name|clc
operator|=
operator|new
name|ClassLimitConstraint
argument_list|(
name|parentClazz
operator|.
name|getClassLimit
argument_list|()
argument_list|,
name|parentClazz
operator|.
name|getClassLabel
argument_list|(
name|iShowClassSuffix
argument_list|,
name|iShowConfigName
argument_list|)
argument_list|)
expr_stmt|;
name|clcs
operator|.
name|put
argument_list|(
name|parentClazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lecture
operator|==
literal|null
operator|||
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
block|{
name|clc
operator|.
name|setClassLimitDelta
argument_list|(
name|clc
operator|.
name|getClassLimitDelta
argument_list|()
operator|-
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clc
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ClassLimitConstraint
name|clc
range|:
name|clcs
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clc
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|trace
argument_list|(
literal|"Added constraint "
operator|+
name|clc
operator|.
name|getName
argument_list|()
operator|+
literal|" between "
operator|+
name|clc
operator|.
name|variables
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|clc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|iStudentCourseDemands
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|iProgress
argument_list|,
name|iSession
argument_list|,
name|iOfferings
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStudentGroupCourseDemands
operator|!=
literal|null
condition|)
name|iStudentGroupCourseDemands
operator|.
name|init
argument_list|(
name|hibSession
argument_list|,
name|iProgress
argument_list|,
name|iSession
argument_list|,
name|iOfferings
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingStudents
argument_list|()
argument_list|,
name|iOfferings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|offering
range|:
name|iOfferings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|boolean
name|unlimitedOffering
init|=
literal|false
decl_stmt|;
name|int
name|offeringLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimitedOffering
operator|=
literal|true
expr_stmt|;
else|else
name|offeringLimit
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|Double
name|factor
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|unlimitedOffering
condition|)
block|{
name|int
name|totalCourseLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|int
name|courseLimit
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|course
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|courseLimit
operator|=
name|offeringLimit
expr_stmt|;
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"crossListWithoutReservation"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|infoCrosslistNoCourseReservations
argument_list|(
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
operator|&&
name|offering
operator|.
name|getProjectedDemand
argument_list|()
operator|>
literal|0
condition|)
name|courseLimit
operator|=
name|course
operator|.
name|getProjectedDemand
argument_list|()
expr_stmt|;
if|else if
condition|(
name|course
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
operator|&&
name|offering
operator|.
name|getDemand
argument_list|()
operator|>
literal|0
condition|)
name|courseLimit
operator|=
name|course
operator|.
name|getDemand
argument_list|()
expr_stmt|;
else|else
name|courseLimit
operator|=
name|offeringLimit
operator|/
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|totalCourseLimit
operator|+=
name|courseLimit
expr_stmt|;
block|}
if|if
condition|(
name|totalCourseLimit
operator|<
name|offeringLimit
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"courseReservationsBelowLimit"
argument_list|,
name|totalCourseLimit
operator|==
literal|0
condition|?
name|Progress
operator|.
name|MSGLEVEL_INFO
else|:
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnReservationBelowLimit
argument_list|(
name|getOfferingLabel
argument_list|(
name|offering
argument_list|)
argument_list|,
name|totalCourseLimit
argument_list|,
name|offeringLimit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCourseLimit
operator|>
name|offeringLimit
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"courseReservationsOverLimit"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnReservationsOverLimit
argument_list|(
name|getOfferingLabel
argument_list|(
name|offering
argument_list|)
argument_list|,
name|totalCourseLimit
argument_list|,
name|offeringLimit
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCourseLimit
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|totalCourseLimit
operator|!=
name|offeringLimit
condition|)
name|factor
operator|=
operator|new
name|Double
argument_list|(
operator|(
operator|(
name|double
operator|)
name|offeringLimit
operator|)
operator|/
name|totalCourseLimit
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|studentIds
init|=
name|iStudentCourseDemands
operator|.
name|getDemands
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|iStudentGroupCourseDemands
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|WeightedStudentId
argument_list|>
name|other
init|=
name|iStudentGroupCourseDemands
operator|.
name|getDemands
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|other
operator|!=
literal|null
operator|&&
operator|!
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|studentIds
operator|==
literal|null
condition|)
name|studentIds
operator|=
name|other
expr_stmt|;
else|else
name|studentIds
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
block|}
name|float
name|studentWeight
init|=
literal|0.0f
decl_stmt|;
if|if
condition|(
name|studentIds
operator|!=
literal|null
condition|)
for|for
control|(
name|WeightedStudentId
name|studentId
range|:
name|studentIds
control|)
name|studentWeight
operator|+=
name|studentId
operator|.
name|getWeight
argument_list|()
expr_stmt|;
name|int
name|courseLimit
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|course
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|unlimitedOffering
condition|)
name|courseLimit
operator|=
name|offeringLimit
expr_stmt|;
else|else
block|{
name|courseLimit
operator|=
name|Math
operator|.
name|round
argument_list|(
name|studentWeight
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|factor
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|courseLimit
operator|*
name|factor
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentIds
operator|==
literal|null
operator|||
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"offeringWithoutDemand"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|infoNoStudentInCourse
argument_list|(
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|courseLimit
operator|==
literal|0
operator|&&
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"noCourseReservation"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnNoReservedSpaceForCourse
argument_list|(
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|double
name|weight
init|=
operator|(
name|iStudentCourseDemands
operator|.
name|isWeightStudentsToFillUpOffering
argument_list|()
operator|&&
name|courseLimit
operator|!=
literal|0
condition|?
operator|(
name|double
operator|)
name|courseLimit
operator|/
name|studentWeight
else|:
literal|1.0
operator|)
decl_stmt|;
name|Set
argument_list|<
name|Lecture
argument_list|>
name|cannotAttendLectures
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|reservedClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Reservation
name|r
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|CourseReservation
operator|&&
name|course
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|CourseReservation
operator|)
name|r
operator|)
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|clazz
range|:
name|r
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|limit
operator|+=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
expr_stmt|;
name|propagateReservedClasses
argument_list|(
name|clazz
argument_list|,
name|reservedClasses
argument_list|)
expr_stmt|;
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|reservedClasses
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|r
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
else|else
name|limit
operator|+=
name|config
operator|.
name|getLimit
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
name|reservedClasses
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|reservedClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Course requests for course "
operator|+
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
operator|+
literal|" are "
operator|+
name|reservedClasses
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|unlimited
operator|&&
name|courseLimit
operator|>
name|limit
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"insufficientCourseReservation"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnTooLittleSpaceInCourse
argument_list|(
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
argument_list|,
name|limit
argument_list|,
name|courseLimit
argument_list|)
argument_list|)
expr_stmt|;
name|cannotAttendLectures
operator|=
operator|new
name|HashSet
argument_list|<
name|Lecture
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|boolean
name|hasConfigReservation
init|=
literal|false
decl_stmt|;
name|subparts
label|:
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|hasConfigReservation
operator|=
literal|true
expr_stmt|;
break|break
name|subparts
break|;
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|boolean
name|hasSubpartReservation
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|hasSubpartReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// !hasConfigReservation>> all lectures are cannot attend (there is a reservation on a different config)
comment|// otherwise if !hasSubpartReservation>> there is reservation on some other subpart --> can attend any of the classes of this subpart
if|if
condition|(
operator|!
name|hasConfigReservation
operator|||
name|hasSubpartReservation
condition|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
operator|&&
operator|(
name|iLoadCommittedReservations
operator|||
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
operator|)
condition|)
name|cannotAttendLectures
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|cannotAttendLectures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Prohibited lectures for course "
operator|+
name|getOfferingLabel
argument_list|(
name|course
argument_list|)
operator|+
literal|" are "
operator|+
name|cannotAttendLectures
argument_list|)
expr_stmt|;
name|checkReservation
argument_list|(
name|course
argument_list|,
name|cannotAttendLectures
argument_list|,
name|iAltConfigurations
operator|.
name|get
argument_list|(
name|offering
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|WeightedStudentId
name|studentId
range|:
name|studentIds
control|)
block|{
name|Student
name|student
init|=
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAcademicArea
argument_list|(
name|studentId
operator|.
name|getArea
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAcademicClassification
argument_list|(
name|studentId
operator|.
name|getClasf
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMajor
argument_list|(
name|studentId
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setCurriculum
argument_list|(
name|studentId
operator|.
name|getCurriculum
argument_list|()
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|put
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
name|iWeightedStudents
operator|.
name|put
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|g
range|:
name|studentId
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|StudentGroup
name|group
init|=
name|iGroups
operator|.
name|get
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|StudentGroup
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|,
name|g
operator|.
name|getWeight
argument_list|()
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iGroups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addStudentGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
name|student
operator|.
name|addOffering
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|weight
operator|*
name|studentId
operator|.
name|getWeight
argument_list|()
argument_list|,
name|iStudentCourseDemands
operator|.
name|getEnrollmentPriority
argument_list|(
name|studentId
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|iCourse2students
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
expr_stmt|;
name|iCourse2students
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|addCanNotEnroll
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cannotAttendLectures
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|reservedClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|offering
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reservation
operator|.
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
continue|continue;
if|if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|boolean
name|match
init|=
literal|false
decl_stmt|;
for|for
control|(
name|AreaClasfMajor
name|acm
range|:
name|studentId
operator|.
name|getMajors
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasArea
argument_list|(
name|acm
operator|.
name|getArea
argument_list|()
argument_list|)
operator|&&
name|cr
operator|.
name|hasClassification
argument_list|(
name|acm
operator|.
name|getClasf
argument_list|()
argument_list|)
operator|&&
name|cr
operator|.
name|hasMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
condition|)
block|{
name|match
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|match
condition|)
continue|continue;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|StudentGroupReservation
name|gr
init|=
operator|(
name|StudentGroupReservation
operator|)
name|reservation
decl_stmt|;
if|if
condition|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Group
name|g
init|=
name|studentId
operator|.
name|getGroup
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
operator|||
name|g
operator|.
name|getId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
block|}
else|else
continue|continue;
for|for
control|(
name|Class_
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|propagateReservedClasses
argument_list|(
name|clazz
argument_list|,
name|reservedClasses
argument_list|)
expr_stmt|;
name|Class_
name|parent
init|=
name|clazz
operator|.
name|getParentClass
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|reservedClasses
operator|.
name|add
argument_list|(
name|parent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|reservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
name|reservedClasses
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|reservedClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" has reserved classes "
operator|+
name|reservedClasses
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Lecture
argument_list|>
name|prohibited
init|=
operator|new
name|HashSet
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
name|boolean
name|hasConfigReservation
init|=
literal|false
decl_stmt|;
name|subparts
label|:
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|hasConfigReservation
operator|=
literal|true
expr_stmt|;
break|break
name|subparts
break|;
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
name|boolean
name|hasSubpartReservation
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|hasSubpartReservation
operator|=
literal|true
expr_stmt|;
break|break;
block|}
comment|// !hasConfigReservation>> all lectures are cannot attend (there is a reservation on a different config)
comment|// otherwise if !hasSubpartReservation>> there is reservation on some other subpart --> can attend any of the classes of this subpart
if|if
condition|(
operator|!
name|hasConfigReservation
operator|||
name|hasSubpartReservation
condition|)
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|reservedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
operator|&&
operator|(
name|iLoadCommittedReservations
operator|||
operator|!
name|lecture
operator|.
name|isCommitted
argument_list|()
operator|)
condition|)
name|prohibited
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|debug
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Student "
operator|+
name|student
operator|.
name|getId
argument_list|()
operator|+
literal|" cannot attend classes "
operator|+
name|prohibited
argument_list|)
expr_stmt|;
name|student
operator|.
name|addCanNotEnroll
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|prohibited
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|iProgress
operator|.
name|debug
argument_list|(
name|iStudents
operator|.
name|size
argument_list|()
operator|+
literal|" students loaded."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCommittedStudentConflictsMode
operator|==
name|CommittedStudentConflictsMode
operator|.
name|Load
operator|&&
operator|!
name|iStudentCourseDemands
operator|.
name|isMakingUpStudents
argument_list|()
condition|)
name|loadCommittedStudentConflicts
argument_list|(
name|hibSession
argument_list|,
name|loadedOfferings
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iCommittedStudentConflictsMode
operator|!=
name|CommittedStudentConflictsMode
operator|.
name|Ignore
condition|)
name|makeupCommittedStudentConflicts
argument_list|(
name|loadedOfferings
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|Set
argument_list|<
name|Lecture
argument_list|>
argument_list|>
name|iPreEnrollments
init|=
operator|new
name|Hashtable
argument_list|<
name|Student
argument_list|,
name|Set
argument_list|<
name|Lecture
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iLoadStudentEnrlsFromSolution
condition|)
block|{
if|if
condition|(
name|iStudentCourseDemands
operator|.
name|canUseStudentClassEnrollmentsAsSolution
argument_list|()
condition|)
block|{
comment|// Load real student enrollments (not saved last-like)
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|enrollments
init|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.student.uniqueId, e.clazz.uniqueId from "
operator|+
literal|"StudentClassEnrollment e, Class_ c where "
operator|+
literal|"e.courseOffering.instructionalOffering = c.schedulingSubpart.instrOfferingConfig.instructionalOffering and "
operator|+
literal|"c.managingDept.solverGroup.uniqueId in ("
operator|+
name|iSolverGroupIds
operator|+
literal|")"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingStudentEnrollemnts
argument_list|()
argument_list|,
name|enrollments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|totalEnrollments
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
name|enrollments
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|clazzId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazzId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Lecture
argument_list|>
name|preEnrollments
init|=
name|iPreEnrollments
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|preEnrollments
operator|==
literal|null
condition|)
block|{
name|preEnrollments
operator|=
operator|new
name|HashSet
argument_list|<
name|Lecture
argument_list|>
argument_list|()
expr_stmt|;
name|iPreEnrollments
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|preEnrollments
argument_list|)
expr_stmt|;
block|}
name|preEnrollments
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|hasOffering
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|&&
name|student
operator|.
name|canEnroll
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
name|student
operator|.
name|addLecture
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|addStudent
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
name|totalEnrollments
operator|++
expr_stmt|;
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"enrollmentsLoaded"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|infoEnrollmentsLoaded
argument_list|(
name|totalEnrollments
argument_list|,
name|iPreEnrollments
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Load enrollments from selected / committed solutions
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|solutions
operator|==
literal|null
condition|?
literal|null
else|:
name|solutions
operator|.
name|get
argument_list|(
name|iSolverGroupId
index|[
name|idx
index|]
argument_list|)
operator|)
decl_stmt|;
name|List
name|studentEnrls
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solution
operator|!=
literal|null
condition|)
block|{
name|studentEnrls
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.studentId, e.clazz.uniqueId from StudentEnrollment e where e.solution.uniqueId=:solutionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"solutionId"
argument_list|,
name|solution
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|studentEnrls
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.studentId, e.clazz.uniqueId from StudentEnrollment e where e.solution.owner.uniqueId=:sovlerGroupId and e.solution.commited = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sovlerGroupId"
argument_list|,
name|iSolverGroupId
index|[
name|idx
index|]
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingStudentEnrollemntsPhase
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
name|studentEnrls
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|studentEnrls
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
index|[]
init|=
operator|(
name|Object
index|[]
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|clazzId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazzId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
operator|&&
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Lecture
argument_list|>
name|preEnrollments
init|=
name|iPreEnrollments
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|preEnrollments
operator|==
literal|null
condition|)
block|{
name|preEnrollments
operator|=
operator|new
name|HashSet
argument_list|<
name|Lecture
argument_list|>
argument_list|()
expr_stmt|;
name|iPreEnrollments
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|preEnrollments
argument_list|)
expr_stmt|;
block|}
name|preEnrollments
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|hasOffering
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|&&
name|student
operator|.
name|canEnroll
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
name|student
operator|.
name|addLecture
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|addStudent
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"Global.LoadOtherCommittedStudentEnrls"
argument_list|,
literal|true
argument_list|)
condition|)
block|{
comment|// Other committed enrollments
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|enrollments
init|=
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct e.studentId, e.clazz.uniqueId from "
operator|+
literal|"StudentEnrollment e, Class_ c where "
operator|+
literal|"e.solution.commited = true and e.solution.owner.uniqueId not in ("
operator|+
name|iSolverGroupIds
operator|+
literal|") and "
operator|+
literal|"e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering = c.schedulingSubpart.instrOfferingConfig.instructionalOffering and "
operator|+
literal|"c.managingDept.solverGroup.uniqueId in ("
operator|+
name|iSolverGroupIds
operator|+
literal|")"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingOtherStudentEnrollments
argument_list|()
argument_list|,
name|enrollments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
name|enrollments
control|)
block|{
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|clazzId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|iStudents
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazzId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
operator|&&
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Lecture
argument_list|>
name|preEnrollments
init|=
name|iPreEnrollments
operator|.
name|get
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|preEnrollments
operator|==
literal|null
condition|)
block|{
name|preEnrollments
operator|=
operator|new
name|HashSet
argument_list|<
name|Lecture
argument_list|>
argument_list|()
expr_stmt|;
name|iPreEnrollments
operator|.
name|put
argument_list|(
name|student
argument_list|,
name|preEnrollments
argument_list|)
expr_stmt|;
block|}
name|preEnrollments
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|hasOffering
argument_list|(
name|lecture
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getOfferingId
argument_list|()
argument_list|)
operator|&&
name|student
operator|.
name|canEnroll
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
name|student
operator|.
name|addLecture
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|addStudent
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
name|RoomAvailabilityInterface
name|availability
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
name|availability
operator|=
name|SolverServerImplementation
operator|.
name|getInstance
argument_list|()
operator|.
name|getRoomAvailability
argument_list|()
expr_stmt|;
else|else
name|availability
operator|=
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|availability
operator|!=
literal|null
condition|)
block|{
name|Date
index|[]
name|startEnd
init|=
name|initializeRoomAvailability
argument_list|(
name|availability
argument_list|)
decl_stmt|;
if|if
condition|(
name|startEnd
operator|!=
literal|null
condition|)
block|{
name|loadRoomAvailability
argument_list|(
name|availability
argument_list|,
name|startEnd
argument_list|)
expr_stmt|;
name|loadInstructorAvailability
argument_list|(
name|availability
argument_list|,
name|startEnd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseInitialSectioning
argument_list|()
argument_list|,
name|iOfferings
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|offering
range|:
name|iOfferings
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Student
argument_list|>
name|students
init|=
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Student
argument_list|>
name|courseStudents
init|=
name|iCourse2students
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseStudents
operator|!=
literal|null
condition|)
name|students
operator|.
name|addAll
argument_list|(
name|courseStudents
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|getModel
argument_list|()
operator|.
name|getStudentSectioning
argument_list|()
operator|.
name|initialSectioning
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|students
argument_list|,
name|iAltConfigurations
operator|.
name|get
argument_list|(
name|offering
argument_list|)
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Enumeration
name|e
init|=
name|iStudents
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
operator|(
operator|(
name|Student
operator|)
name|e
operator|.
name|nextElement
argument_list|()
operator|)
operator|.
name|clearDistanceCache
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iPreEnrollments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCheckingLoadedEnrollments
argument_list|()
argument_list|,
name|iPreEnrollments
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Student
argument_list|,
name|Set
argument_list|<
name|Lecture
argument_list|>
argument_list|>
name|entry
range|:
name|iPreEnrollments
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|Student
name|student
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Lecture
argument_list|>
name|lectures
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|lectures
control|)
block|{
if|if
condition|(
operator|!
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|contains
argument_list|(
name|student
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"studentNotEnrolled"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnStudentShouldBeInClass
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|lectures
operator|.
name|contains
argument_list|(
name|lecture
argument_list|)
condition|)
block|{
name|Lecture
name|instead
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|lecture
operator|.
name|sameStudentsLectures
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|lecture
operator|.
name|sameStudentsLectures
argument_list|()
control|)
block|{
if|if
condition|(
name|lectures
operator|.
name|contains
argument_list|(
name|other
argument_list|)
condition|)
name|instead
operator|=
name|other
expr_stmt|;
block|}
block|}
if|if
condition|(
name|instead
operator|!=
literal|null
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"studentEnrolled"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnStudentShouldNotBeInClassShouldBeInOther
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|instead
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"studentEnrolled"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnStudentShouldNotBeInClass
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLoadStudentInstructorConflicts
condition|)
name|loadInstructorStudentConflicts
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseComputingJenrl
argument_list|()
argument_list|,
name|iStudents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
name|jenrls
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iStudents
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|st
init|=
operator|(
name|Student
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|st
operator|.
name|getLectures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|l1
init|=
operator|(
name|Lecture
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|st
operator|.
name|getLectures
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Lecture
name|l2
init|=
operator|(
name|Lecture
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l1
operator|.
name|getId
argument_list|()
operator|>=
name|l2
operator|.
name|getId
argument_list|()
condition|)
continue|continue;
name|Hashtable
name|x
init|=
operator|(
name|Hashtable
operator|)
name|jenrls
operator|.
name|get
argument_list|(
name|l1
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
name|x
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|jenrls
operator|.
name|put
argument_list|(
name|l1
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|JenrlConstraint
name|jenrl
init|=
operator|(
name|JenrlConstraint
operator|)
name|x
operator|.
name|get
argument_list|(
name|l2
argument_list|)
decl_stmt|;
if|if
condition|(
name|jenrl
operator|==
literal|null
condition|)
block|{
name|jenrl
operator|=
operator|new
name|JenrlConstraint
argument_list|()
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|jenrl
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|addVariable
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|jenrl
operator|.
name|addVariable
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|x
operator|.
name|put
argument_list|(
name|l2
argument_list|,
name|jenrl
argument_list|)
expr_stmt|;
block|}
name|jenrl
operator|.
name|incJenrl
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|st
argument_list|)
expr_stmt|;
block|}
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getModel
argument_list|()
operator|.
name|getStudentSectioning
argument_list|()
operator|.
name|hasFinalSectioning
argument_list|()
condition|)
name|postAutomaticStudentConstraints
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|solutions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|iSolverGroupId
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|Solution
name|solution
init|=
operator|(
name|Solution
operator|)
name|solutions
operator|.
name|get
argument_list|(
name|iSolverGroupId
index|[
name|idx
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
continue|continue;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCreatingInitialAssignmentPhase
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|,
name|solution
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|solution
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|assignment
init|=
operator|(
name|Assignment
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|loadAssignment
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|iLoadCommittedAssignments
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCreatingCommittedAssignment
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|lecture
operator|.
name|isCommitted
argument_list|()
condition|)
continue|continue;
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|loadAssignment
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"hibernateFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_FATAL
argument_list|)
argument_list|,
name|MSG
operator|.
name|fatalHibernateSessionClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSpread
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingAutoSpreads
argument_list|()
argument_list|,
name|subparts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|subparts
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|subpart
operator|.
name|isAutoSpreadInTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
literal|"Automatic spread constraint disabled for "
operator|+
name|getSubpartLabel
argument_list|(
name|subpart
argument_list|)
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|SpreadConstraint
name|spread
init|=
operator|new
name|SpreadConstraint
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
name|subpart
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|getLecture
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
name|spread
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spread
operator|.
name|variables
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"courseWithNoClasses"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnCourseWithNoClasses
argument_list|(
name|getSubpartLabel
argument_list|(
name|subpart
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|spread
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iDeptBalancing
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingDeptSpreads
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|DepartmentSpreadConstraint
argument_list|>
name|depSpreadConstraints
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|DepartmentSpreadConstraint
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|lecture
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|DepartmentSpreadConstraint
name|deptConstr
init|=
operator|(
name|DepartmentSpreadConstraint
operator|)
name|depSpreadConstraints
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getDepartment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptConstr
operator|==
literal|null
condition|)
block|{
name|deptConstr
operator|=
operator|new
name|DepartmentSpreadConstraint
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
name|lecture
operator|.
name|getDepartment
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|iDeptNames
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|depSpreadConstraints
operator|.
name|put
argument_list|(
name|lecture
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|deptConstr
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|deptConstr
argument_list|)
expr_stmt|;
block|}
name|deptConstr
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSubjectBalancing
condition|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingSubjectSpreads
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SpreadConstraint
argument_list|>
name|subjectSpreadConstraints
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SpreadConstraint
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
name|iClasses
operator|.
name|get
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseOffering
name|co
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|Long
name|subject
init|=
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|SpreadConstraint
name|subjectSpreadConstr
init|=
name|subjectSpreadConstraints
operator|.
name|get
argument_list|(
name|subject
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectSpreadConstr
operator|==
literal|null
condition|)
block|{
name|subjectSpreadConstr
operator|=
operator|new
name|SpreadConstraint
argument_list|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|subjectSpreadConstraints
operator|.
name|put
argument_list|(
name|subject
argument_list|,
name|subjectSpreadConstr
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addConstraint
argument_list|(
name|subjectSpreadConstr
argument_list|)
expr_stmt|;
block|}
name|subjectSpreadConstr
operator|.
name|addVariable
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.PurgeInvalidPlacements"
argument_list|,
literal|true
argument_list|)
condition|)
name|purgeInvalidValues
argument_list|()
expr_stmt|;
comment|/* 		for (Constraint c: getModel().constraints()) { 			if (c instanceof SpreadConstraint) 				((SpreadConstraint)c).init(); 			if (c instanceof DiscouragedRoomConstraint) 				((DiscouragedRoomConstraint)c).setEnabled(true); 			if (c instanceof MinimizeNumberOfUsedRoomsConstraint) 				((MinimizeNumberOfUsedRoomsConstraint)c).setEnabled(true); 			if (c instanceof MinimizeNumberOfUsedGroupsOfTime) 				((MinimizeNumberOfUsedGroupsOfTime)c).setEnabled(true); 		} 		*/
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseCheckingForInconsistencies
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|lecture
operator|.
name|students
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|s
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|canEnroll
argument_list|(
name|lecture
argument_list|)
condition|)
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"badStudentEnrollment"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnBadStudentEnrollment
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//check same instructor constraint
if|if
condition|(
operator|!
name|lecture
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|lecture
operator|.
name|timeLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Lecture
name|other
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
name|other
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
name|other
operator|.
name|timeLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|||
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|Placement
name|p1
init|=
name|lecture
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Placement
name|p2
init|=
name|other
operator|.
name|values
argument_list|(
name|getAssignment
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|other
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|contains
argument_list|(
name|ic
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|p1
operator|.
name|canShareRooms
argument_list|(
name|p2
argument_list|)
operator|&&
name|p1
operator|.
name|sameRooms
argument_list|(
name|p2
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|p2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"reqInstructorOverlap"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnSameInstructorTimeConflict
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|p1
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|other
argument_list|)
argument_list|,
name|p2
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ic
operator|.
name|getDistancePreference
argument_list|(
name|p1
argument_list|,
name|p2
argument_list|)
operator|==
name|PreferenceLevel
operator|.
name|sIntLevelProhibited
operator|&&
name|lecture
operator|.
name|roomLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|other
operator|.
name|roomLocations
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"reqInstructorBackToBack"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnSameInstructorBackToBack
argument_list|(
name|Math
operator|.
name|round
argument_list|(
literal|10.0
operator|*
name|Placement
operator|.
name|getDistanceInMeters
argument_list|(
name|getModel
argument_list|()
operator|.
name|getDistanceMetric
argument_list|()
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|p1
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|other
argument_list|)
argument_list|,
name|p2
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|lecture
operator|.
name|isSingleton
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Lecture
name|other
range|:
name|getModel
argument_list|()
operator|.
name|variables
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|other
operator|.
name|isSingleton
argument_list|()
operator|||
name|lecture
operator|.
name|getClassId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClassId
argument_list|()
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|Placement
name|p1
init|=
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|lecture
operator|.
name|timeLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|lecture
operator|.
name|roomLocations
argument_list|()
argument_list|)
decl_stmt|;
name|Placement
name|p2
init|=
operator|new
name|Placement
argument_list|(
name|other
argument_list|,
name|other
operator|.
name|timeLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|other
operator|.
name|roomLocations
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|shareRooms
argument_list|(
name|p2
argument_list|)
operator|&&
name|p1
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|hasIntersection
argument_list|(
name|p2
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
operator|&&
operator|!
name|p1
operator|.
name|canShareRooms
argument_list|(
name|p2
argument_list|)
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"reqRoomOverlap"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnSameRoomTimeConflict
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|p1
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|getClassLabel
argument_list|(
name|other
argument_list|)
argument_list|,
name|p2
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getAssignment
argument_list|()
operator|.
name|getValue
argument_list|(
name|lecture
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Placement
name|placement
init|=
operator|new
name|Placement
argument_list|(
name|lecture
argument_list|,
name|lecture
operator|.
name|timeLocations
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|lecture
operator|.
name|roomLocations
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|placement
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|String
name|reason
init|=
literal|""
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|lecture
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ic
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|placement
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonInstructorNotAvailable
argument_list|(
name|ic
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lecture
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|isMultiRoom
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomLocation
name|roomLocation
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|roomLocation
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|lecture
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonRoomNotAvailable
argument_list|(
name|roomLocation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getRoomConstraint
argument_list|()
operator|.
name|isAvailable
argument_list|(
name|lecture
argument_list|,
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
name|lecture
operator|.
name|getScheduler
argument_list|()
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonRoomNotAvailable
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
argument_list|,
name|Set
argument_list|<
name|Placement
argument_list|>
argument_list|>
name|conflictConstraints
init|=
name|getModel
argument_list|()
operator|.
name|conflictConstraints
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conflictConstraints
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Constraint
argument_list|<
name|Lecture
argument_list|,
name|Placement
argument_list|>
name|c
range|:
name|conflictConstraints
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|Placement
argument_list|>
name|vals
init|=
name|conflictConstraints
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|Placement
name|p
range|:
name|vals
control|)
block|{
name|Lecture
name|l
init|=
name|p
operator|.
name|variable
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|isCommitted
argument_list|()
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonConstraintCommitedAssignment
argument_list|(
name|getClassLabel
argument_list|(
name|l
argument_list|)
argument_list|,
name|p
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|placement
argument_list|)
condition|)
name|reason
operator|+=
name|MSG
operator|.
name|warnReasonConstraint
argument_list|(
name|TimetableSolver
operator|.
name|getConstraintName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"reqInvalidPlacement"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|reason
operator|.
name|isEmpty
argument_list|()
condition|?
name|MSG
operator|.
name|warnRequiresInvalidPlacement
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|placement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|)
else|:
name|MSG
operator|.
name|warnRequiresInvalidPlacementWithReason
argument_list|(
name|getClassLabel
argument_list|(
name|lecture
argument_list|)
argument_list|,
name|placement
operator|.
name|getLongName
argument_list|(
name|iUseAmPm
argument_list|)
argument_list|,
name|reason
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iAssignSingleton
operator|&&
name|getModel
argument_list|()
operator|.
name|conflictValues
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|placement
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|getAssignment
argument_list|()
operator|.
name|assign
argument_list|(
literal|0
argument_list|,
name|placement
argument_list|)
expr_stmt|;
block|}
block|}
name|getModel
argument_list|()
operator|.
name|createAssignmentContexts
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.EnrollmentCheck"
argument_list|,
literal|true
argument_list|)
condition|)
operator|new
name|EnrollmentCheck
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|getAssignment
argument_list|()
argument_list|,
name|msglevel
argument_list|(
literal|"enrollmentCheck"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|)
operator|.
name|checkStudentEnrollments
argument_list|(
name|iProgress
argument_list|)
expr_stmt|;
if|if
condition|(
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyBoolean
argument_list|(
literal|"General.SwitchStudents"
argument_list|,
literal|true
argument_list|)
operator|&&
name|getAssignment
argument_list|()
operator|.
name|nrAssignedVariables
argument_list|()
operator|!=
literal|0
operator|&&
operator|!
name|iLoadStudentEnrlsFromSolution
condition|)
name|getModel
argument_list|()
operator|.
name|switchStudents
argument_list|(
name|getAssignment
argument_list|()
argument_list|,
name|getTerminationCondition
argument_list|()
argument_list|)
expr_stmt|;
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseDone
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"allDone"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|infoModelLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ObjectsByGivenOrderComparator
implements|implements
name|Comparator
block|{
name|List
argument_list|<
name|?
argument_list|>
name|iOrderedSet
init|=
literal|null
decl_stmt|;
specifier|public
name|ObjectsByGivenOrderComparator
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|orderedSetOfLectures
parameter_list|)
block|{
name|iOrderedSet
operator|=
name|orderedSetOfLectures
expr_stmt|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|int
name|idx1
init|=
name|iOrderedSet
operator|.
name|indexOf
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|int
name|idx2
init|=
name|iOrderedSet
operator|.
name|indexOf
argument_list|(
name|o2
argument_list|)
decl_stmt|;
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|idx1
argument_list|,
name|idx2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
operator|(
name|Comparable
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|roomAvailabilityActivate
parameter_list|(
name|RoomAvailabilityInterface
name|availability
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
try|try
block|{
name|availability
operator|.
name|activate
argument_list|(
operator|new
name|SessionDAO
argument_list|()
operator|.
name|get
argument_list|(
name|iSessionId
argument_list|)
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|,
name|ApplicationProperty
operator|.
name|RoomAvailabilitySolverWaitForSync
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnRoomAvailableServiceFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Date
index|[]
name|initializeRoomAvailability
parameter_list|(
name|RoomAvailabilityInterface
name|availability
parameter_list|)
block|{
name|Date
name|startDate
init|=
literal|null
decl_stmt|,
name|endDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|iAllUsedDatePatterns
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DatePattern
name|dp
init|=
operator|(
name|DatePattern
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|startDate
operator|==
literal|null
operator|||
name|startDate
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|>
literal|0
condition|)
name|startDate
operator|=
name|dp
operator|.
name|getStartDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|endDate
operator|==
literal|null
operator|||
name|endDate
operator|.
name|compareTo
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|endDate
operator|=
name|dp
operator|.
name|getEndDate
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|startDate
operator|==
literal|null
operator|||
name|endDate
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnRoomAvailableServiceNoDates
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Calendar
name|startDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|startDateCal
operator|.
name|setTime
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|startDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Calendar
name|endDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endDateCal
operator|.
name|setTime
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|endDateCal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|roomAvailabilityActivate
argument_list|(
name|availability
argument_list|,
name|startDateCal
operator|.
name|getTime
argument_list|()
argument_list|,
name|endDateCal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|Date
index|[]
block|{
name|startDateCal
operator|.
name|getTime
argument_list|()
block|,
name|endDateCal
operator|.
name|getTime
argument_list|()
block|}
return|;
block|}
specifier|public
name|void
name|loadRoomAvailability
parameter_list|(
name|RoomAvailabilityInterface
name|availability
parameter_list|,
name|Date
index|[]
name|startEnd
parameter_list|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingRoomAvailability
argument_list|()
argument_list|,
name|iRooms
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstDOY
init|=
name|iSession
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|iSession
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastDOY
init|=
name|iSession
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|iSession
operator|.
name|getPatternEndMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|lastDOY
operator|-
name|firstDOY
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_PATTERN
argument_list|)
decl_stmt|;
name|int
name|sessionYear
init|=
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
name|e
init|=
name|iRooms
operator|.
name|elements
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|RoomConstraint
name|room
init|=
operator|(
name|RoomConstraint
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|room
operator|.
name|getConstraint
argument_list|()
condition|)
continue|continue;
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
init|=
name|getRoomAvailability
argument_list|(
name|availability
argument_list|,
name|room
argument_list|,
name|startEnd
index|[
literal|0
index|]
argument_list|,
name|startEnd
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|room
operator|.
name|getName
argument_list|()
operator|+
literal|" not available due to "
operator|+
name|time
argument_list|)
expr_stmt|;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|m
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
name|m
operator|-=
operator|(
literal|12
operator|*
operator|(
name|sessionYear
operator|-
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
name|m
operator|+=
operator|(
literal|12
operator|*
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
name|sessionYear
operator|)
operator|)
expr_stmt|;
name|BitSet
name|weekCode
init|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|iSession
operator|.
name|getDayOfYear
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
operator|-
name|firstDOY
decl_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|offset
operator|>=
name|size
condition|)
continue|continue;
name|weekCode
operator|.
name|set
argument_list|(
name|offset
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
name|int
name|startSlot
init|=
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|*
literal|60
operator|+
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|endSlot
init|=
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|*
literal|60
operator|+
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
if|if
condition|(
name|endSlot
operator|==
literal|0
operator|&&
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|!=
name|d
condition|)
name|endSlot
operator|=
literal|288
expr_stmt|;
comment|// next day midnight
name|int
name|length
init|=
name|endSlot
operator|-
name|startSlot
decl_stmt|;
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
continue|continue;
name|TimeLocation
name|timeLocation
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|,
name|weekCode
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|timeLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|timeLocations
operator|.
name|add
argument_list|(
name|timeLocation
argument_list|)
expr_stmt|;
name|RoomLocation
name|roomLocation
init|=
operator|new
name|RoomLocation
argument_list|(
name|room
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getBuildingId
argument_list|()
argument_list|,
literal|0
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
argument_list|,
name|room
operator|.
name|getPosX
argument_list|()
argument_list|,
name|room
operator|.
name|getPosY
argument_list|()
argument_list|,
name|room
operator|.
name|getIgnoreTooFar
argument_list|()
argument_list|,
name|room
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|roomLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|roomLocations
operator|.
name|add
argument_list|(
name|roomLocation
argument_list|)
expr_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
operator|new
name|Long
argument_list|(
operator|--
name|iFakeLectureId
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|time
operator|.
name|getEventName
argument_list|()
argument_list|,
name|timeLocations
argument_list|,
name|roomLocations
argument_list|,
literal|1
argument_list|,
operator|new
name|Placement
argument_list|(
literal|null
argument_list|,
name|timeLocation
argument_list|,
name|roomLocations
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|setNote
argument_list|(
name|time
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|lecture
operator|.
name|setBestAssignment
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setCommitted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|room
operator|.
name|setNotAvailable
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getRoomAvailability
parameter_list|(
name|RoomAvailabilityInterface
name|availability
parameter_list|,
name|RoomConstraint
name|room
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|String
name|ts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|availability
operator|.
name|getRoomAvailability
argument_list|(
name|room
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
name|ts
operator|=
name|availability
operator|.
name|getTimeStamp
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnRoomAvailableServiceFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
block|{
name|iRoomAvailabilityTimeStampIsSet
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityUpdated"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|infoUsingRoomAvailability
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_ERROR
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnRoomAvailableServiceNotAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|loadInstructorAvailability
parameter_list|(
name|RoomAvailabilityInterface
name|availability
parameter_list|,
name|Date
index|[]
name|startEnd
parameter_list|)
block|{
name|setPhase
argument_list|(
name|MSG
operator|.
name|phaseLoadingInstructorAvailability
argument_list|()
argument_list|,
name|getModel
argument_list|()
operator|.
name|getInstructorConstraints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|firstDOY
init|=
name|iSession
operator|.
name|getDayOfYear
argument_list|(
literal|1
argument_list|,
name|iSession
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|lastDOY
init|=
name|iSession
operator|.
name|getDayOfYear
argument_list|(
literal|0
argument_list|,
name|iSession
operator|.
name|getPatternEndMonth
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|lastDOY
operator|-
name|firstDOY
decl_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_PATTERN
argument_list|)
decl_stmt|;
name|int
name|sessionYear
init|=
name|iSession
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorConstraint
name|instructor
range|:
name|getModel
argument_list|()
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|times
init|=
name|getInstructorAvailability
argument_list|(
name|availability
argument_list|,
name|instructor
argument_list|,
name|startEnd
index|[
literal|0
index|]
argument_list|,
name|startEnd
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|TimeBlock
name|time
range|:
name|times
control|)
block|{
name|iProgress
operator|.
name|debug
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
literal|" not available due to "
operator|+
name|time
argument_list|)
expr_stmt|;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|m
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
name|m
operator|-=
operator|(
literal|12
operator|*
operator|(
name|sessionYear
operator|-
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|)
operator|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
name|m
operator|+=
operator|(
literal|12
operator|*
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|-
name|sessionYear
operator|)
operator|)
expr_stmt|;
name|BitSet
name|weekCode
init|=
operator|new
name|BitSet
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|iSession
operator|.
name|getDayOfYear
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
operator|-
name|firstDOY
decl_stmt|;
if|if
condition|(
name|offset
operator|<
literal|0
operator|||
name|offset
operator|>=
name|size
condition|)
continue|continue;
name|weekCode
operator|.
name|set
argument_list|(
name|offset
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|dayCode
operator|=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
break|break;
block|}
name|int
name|startSlot
init|=
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|*
literal|60
operator|+
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|time
operator|.
name|getEndTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|endSlot
init|=
operator|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|)
operator|*
literal|60
operator|+
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
if|if
condition|(
name|endSlot
operator|==
literal|0
operator|&&
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
operator|!=
name|d
condition|)
name|endSlot
operator|=
literal|288
expr_stmt|;
comment|// next day midnight
name|int
name|length
init|=
name|endSlot
operator|-
name|startSlot
decl_stmt|;
if|if
condition|(
name|length
operator|<=
literal|0
condition|)
continue|continue;
name|TimeLocation
name|timeLocation
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|time
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|,
name|weekCode
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TimeLocation
argument_list|>
name|timeLocations
init|=
operator|new
name|ArrayList
argument_list|<
name|TimeLocation
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|timeLocations
operator|.
name|add
argument_list|(
name|timeLocation
argument_list|)
expr_stmt|;
name|Lecture
name|lecture
init|=
operator|new
name|Lecture
argument_list|(
operator|new
name|Long
argument_list|(
operator|--
name|iFakeLectureId
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|time
operator|.
name|getEventName
argument_list|()
argument_list|,
name|timeLocations
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|new
name|Placement
argument_list|(
literal|null
argument_list|,
name|timeLocation
argument_list|,
operator|(
name|RoomLocation
operator|)
literal|null
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
name|lecture
operator|.
name|setNote
argument_list|(
name|time
operator|.
name|getEventType
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|p
init|=
operator|(
name|Placement
operator|)
name|lecture
operator|.
name|getInitialAssignment
argument_list|()
decl_stmt|;
name|lecture
operator|.
name|setBestAssignment
argument_list|(
name|p
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|lecture
operator|.
name|setCommitted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setNotAvailable
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|getModel
argument_list|()
operator|.
name|addVariable
argument_list|(
name|p
operator|.
name|variable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|getInstructorAvailability
parameter_list|(
name|RoomAvailabilityInterface
name|availability
parameter_list|,
name|InstructorConstraint
name|instructor
parameter_list|,
name|Date
name|startTime
parameter_list|,
name|Date
name|endTime
parameter_list|)
block|{
name|Collection
argument_list|<
name|TimeBlock
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|String
name|ts
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|availability
operator|.
name|getInstructorAvailability
argument_list|(
name|instructor
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
name|ts
operator|=
name|availability
operator|.
name|getTimeStamp
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|RoomAvailabilityInterface
operator|.
name|sClassType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnRoomAvailableServiceFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iRoomAvailabilityTimeStampIsSet
condition|)
block|{
name|iRoomAvailabilityTimeStampIsSet
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"RoomAvailability.TimeStamp"
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityUpdated"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_INFO
argument_list|)
argument_list|,
name|MSG
operator|.
name|infoUsingRoomAvailability
argument_list|(
name|ts
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"roomAvailabilityFailure"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_ERROR
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnRoomAvailableServiceNotAvailable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|void
name|postAutomaticHierarchicalConstraints
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|constraints
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.AutomaticHierarchicalConstraints"
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|List
argument_list|<
name|DistributionType
argument_list|>
name|types
init|=
operator|(
name|List
argument_list|<
name|DistributionType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DistributionType where examPref = false"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DatePattern
argument_list|>
name|patterns
init|=
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DatePattern where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSessionId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|constraints
operator|.
name|split
argument_list|(
literal|"[,;][ ]?(?=([^\"]*\"[^\"]*\")*[^\"]*$)"
argument_list|)
control|)
block|{
name|String
name|constraint
init|=
name|term
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|PreferenceLevel
name|pref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PreferenceLevel
name|p
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"required "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"required:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"required "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly preferred "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly preferred:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"strongly preferred "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sPreferred
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"preferred "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"preferred:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"preferred "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"neutral "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"neutral:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"neutral "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sDiscouraged
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"discouraged "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"discouraged:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"discouraged "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly discouraged "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly discouraged:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"strongly discouraged "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"prohibited "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"prohibited:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"prohibited "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticHierarchicalConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticHierarchicalConstraint
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DistributionType
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DistributionType
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
literal|""
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|GroupConstraint
operator|.
name|ConstraintType
name|t
range|:
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
operator|new
name|DistributionType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setAbbreviation
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|constraint
operator|=
literal|""
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|reference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|reference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
operator|new
name|DistributionType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setAbbreviation
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|reference
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
operator|new
name|DistributionType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setAbbreviation
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticHierarchicalConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticHierarchicalConstraint
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DatePattern
name|pattern
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|constraint
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DatePattern
name|p
range|:
name|patterns
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"\""
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|"\""
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|p
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticHierarchicalConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticHierarchicalConstraintBadDatePattern
argument_list|(
name|constraint
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|setPhase
argument_list|(
name|pattern
operator|==
literal|null
condition|?
name|MSG
operator|.
name|phasePostingAutomaticConstraint
argument_list|(
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
else|:
name|MSG
operator|.
name|phasePostingAutomaticConstraintDatePattern
argument_list|(
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|pattern
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|iAllClasses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|iAllClasses
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|lecture
operator|.
name|hasAnyChildren
argument_list|()
condition|)
name|postAutomaticHierarchicalConstraint
argument_list|(
name|clazz
argument_list|,
name|type
argument_list|,
name|pref
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|incProgress
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|postAutomaticHierarchicalConstraint
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|DistributionType
name|type
parameter_list|,
name|PreferenceLevel
name|preference
parameter_list|,
name|DatePattern
name|pattern
parameter_list|)
block|{
name|boolean
name|posted
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|postAutomaticHierarchicalConstraint
argument_list|(
name|c
argument_list|,
name|type
argument_list|,
name|preference
argument_list|,
name|pattern
argument_list|)
condition|)
name|posted
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|posted
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|getLecture
argument_list|(
name|clazz
argument_list|)
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
operator|!
name|pattern
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
name|Class_
name|parent
init|=
name|clazz
decl_stmt|;
while|while
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
operator|||
name|pattern
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
condition|)
block|{
name|Lecture
name|lecture
init|=
name|getLecture
argument_list|(
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
name|variables
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|lecture
argument_list|)
expr_stmt|;
block|}
name|parent
operator|=
name|parent
operator|.
name|getParentClass
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|variables
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
literal|false
return|;
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
argument_list|,
name|preference
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|String
name|info
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Lecture
name|var
range|:
name|variables
control|)
block|{
name|gc
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isEmpty
argument_list|()
condition|)
name|info
operator|+=
literal|", "
expr_stmt|;
name|info
operator|+=
name|getClassLabel
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|info
argument_list|(
name|MSG
operator|.
name|infoPostedConstraint
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|info
argument_list|,
name|preference
operator|.
name|getPrefName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|postAutomaticStudentConstraints
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|constraints
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.AutomaticStudentConstraints"
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|classes2counts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|firstStudent
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Student
argument_list|>
name|i1
init|=
name|getModel
argument_list|()
operator|.
name|getAllStudents
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|idSet
init|=
operator|new
name|TreeSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Lecture
name|lecture
range|:
name|student
operator|.
name|getLectures
argument_list|()
control|)
name|idSet
operator|.
name|add
argument_list|(
name|lecture
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|ids
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|idSet
control|)
name|ids
operator|+=
operator|(
name|ids
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|id
expr_stmt|;
name|Integer
name|count
init|=
name|classes2counts
operator|.
name|get
argument_list|(
name|ids
argument_list|)
decl_stmt|;
name|classes2counts
operator|.
name|put
argument_list|(
name|ids
argument_list|,
literal|1
operator|+
operator|(
name|count
operator|==
literal|null
condition|?
literal|0
else|:
name|count
operator|.
name|intValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|==
literal|null
condition|)
name|firstStudent
operator|.
name|put
argument_list|(
name|ids
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|int
name|limit
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getPropertyInt
argument_list|(
literal|"General.AutomaticStudentConstraints.StudentLimit"
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DistributionType
argument_list|>
name|types
init|=
operator|(
name|List
argument_list|<
name|DistributionType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DistributionType where examPref = false"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|constraints
operator|.
name|split
argument_list|(
literal|"[,;][ ]?(?=([^\"]*\"[^\"]*\")*[^\"]*$)"
argument_list|)
control|)
block|{
name|String
name|constraint
init|=
name|term
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|PreferenceLevel
name|pref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PreferenceLevel
name|p
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|!=
literal|null
operator|&&
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"required "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"required:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"required "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly preferred "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly preferred:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"strongly preferred "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sPreferred
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"preferred "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"preferred:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"preferred "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"neutral "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"neutral:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"neutral "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sDiscouraged
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"discouraged "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"discouraged:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"discouraged "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly discouraged "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly discouraged:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"strongly discouraged "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"prohibited "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"prohibited:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"prohibited "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticStudentConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticStudentConstraint
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DistributionType
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DistributionType
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
literal|""
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|GroupConstraint
operator|.
name|ConstraintType
name|t
range|:
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
operator|new
name|DistributionType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setAbbreviation
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticStudentConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticStudentConstraint
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingAutomaticStudentConstraints
argument_list|(
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
name|classes2counts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|classes2counts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|>=
name|limit
condition|)
block|{
name|List
argument_list|<
name|Lecture
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<
name|Lecture
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|Lecture
name|lecture
init|=
operator|(
name|Lecture
operator|)
name|iLectures
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|lecture
operator|!=
literal|null
condition|)
name|variables
operator|.
name|add
argument_list|(
name|lecture
argument_list|)
expr_stmt|;
block|}
name|Student
name|student
init|=
name|firstStudent
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|variables
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|type
argument_list|,
name|pref
argument_list|,
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
continue|continue;
name|String
name|info
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Lecture
name|var
range|:
name|variables
control|)
block|{
name|gc
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isEmpty
argument_list|()
condition|)
name|info
operator|+=
literal|", "
expr_stmt|;
name|info
operator|+=
name|getClassLabel
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|info
argument_list|(
name|MSG
operator|.
name|infoPostedConstraint
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|info
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|checkTermination
parameter_list|()
block|{
if|if
condition|(
name|getTerminationCondition
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|getTerminationCondition
argument_list|()
operator|.
name|canContinue
argument_list|(
operator|new
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
argument_list|(
name|getModel
argument_list|()
argument_list|,
name|getAssignment
argument_list|()
argument_list|)
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|MSG
operator|.
name|fatalLoadInterrupted
argument_list|()
argument_list|)
throw|;
block|}
specifier|protected
name|void
name|setPhase
parameter_list|(
name|String
name|phase
parameter_list|,
name|long
name|progressMax
parameter_list|)
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|setPhase
argument_list|(
name|phase
argument_list|,
name|progressMax
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|incProgress
parameter_list|()
block|{
name|checkTermination
argument_list|()
expr_stmt|;
name|iProgress
operator|.
name|incProgress
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isSameType
parameter_list|(
name|DistributionType
name|t1
parameter_list|,
name|DistributionType
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|t2
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|t1
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
literal|"_(.+)_"
argument_list|)
condition|)
block|{
for|for
control|(
name|FlexibleConstraintType
name|fcType
range|:
name|FlexibleConstraintType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|t1
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|fcType
operator|.
name|getPattern
argument_list|()
argument_list|)
operator|&&
name|t2
operator|.
name|getReference
argument_list|()
operator|.
name|matches
argument_list|(
name|fcType
operator|.
name|getPattern
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
name|t1
operator|.
name|getReference
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"\\([a-z0-9\\.]+\\)"
argument_list|,
literal|""
argument_list|)
operator|.
name|equals
argument_list|(
name|t2
operator|.
name|getReference
argument_list|()
operator|.
name|replaceFirst
argument_list|(
literal|"\\([a-z0-9\\.]+\\)"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|void
name|postAutomaticInstructorConstraints
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|String
name|constraints
init|=
name|getModel
argument_list|()
operator|.
name|getProperties
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"General.AutomaticInstructorConstraints"
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|List
argument_list|<
name|DistributionType
argument_list|>
name|types
init|=
operator|(
name|List
argument_list|<
name|DistributionType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DistributionType where examPref = false"
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|constraints
operator|.
name|split
argument_list|(
literal|"[,;][ ]?(?=([^\"]*\"[^\"]*\")*[^\"]*$)"
argument_list|)
control|)
block|{
name|String
name|constraint
init|=
name|term
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraint
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|PreferenceLevel
name|pref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|PreferenceLevel
name|p
range|:
name|PreferenceLevel
operator|.
name|getPreferenceLevelList
argument_list|()
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefName
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|":"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
name|p
operator|.
name|getPrefAbbv
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"required "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"required:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"required "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyPreferred
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly preferred "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly preferred:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"strongly preferred "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sPreferred
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"preferred "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"preferred:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"preferred "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"neutral "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"neutral:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"neutral "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sDiscouraged
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"discouraged "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"discouraged:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"discouraged "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sStronglyDiscouraged
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly discouraged "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"strongly discouraged:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"strongly discouraged "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
operator|&&
operator|(
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"prohibited "
argument_list|)
operator|||
name|constraint
operator|.
name|startsWith
argument_list|(
literal|"prohibited:"
argument_list|)
operator|)
condition|)
block|{
name|pref
operator|=
name|p
expr_stmt|;
name|constraint
operator|=
name|constraint
operator|.
name|substring
argument_list|(
literal|"prohibited "
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticHierarchicalConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticInstructorConstraint
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|DistributionType
name|type
init|=
literal|null
decl_stmt|;
for|for
control|(
name|DistributionType
name|t
range|:
name|types
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getReference
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
name|t
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|GroupConstraint
operator|.
name|ConstraintType
name|t
range|:
name|GroupConstraint
operator|.
name|ConstraintType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
operator|||
name|constraint
operator|.
name|equalsIgnoreCase
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|type
operator|=
operator|new
name|DistributionType
argument_list|()
expr_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|t
operator|.
name|reference
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|type
operator|.
name|setAbbreviation
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|iProgress
operator|.
name|message
argument_list|(
name|msglevel
argument_list|(
literal|"automaticHierarchicalConstraints"
argument_list|,
name|Progress
operator|.
name|MSGLEVEL_WARN
argument_list|)
argument_list|,
name|MSG
operator|.
name|warnFailedToParseAutomaticInstructorConstraint
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|setPhase
argument_list|(
name|MSG
operator|.
name|phasePostingAutomaticConstraint
argument_list|(
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
name|iInstructors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ic
label|:
for|for
control|(
name|InstructorConstraint
name|ic
range|:
name|getModel
argument_list|()
operator|.
name|getInstructorConstraints
argument_list|()
control|)
block|{
name|incProgress
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Lecture
argument_list|>
name|variables
init|=
name|ic
operator|.
name|variables
argument_list|()
decl_stmt|;
if|if
condition|(
name|variables
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
continue|continue;
name|List
argument_list|<
name|DistributionType
argument_list|>
name|distributions
init|=
name|iInstructorDistributions
operator|.
name|get
argument_list|(
name|ic
argument_list|)
decl_stmt|;
if|if
condition|(
name|distributions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DistributionType
name|other
range|:
name|distributions
control|)
if|if
condition|(
name|isSameType
argument_list|(
name|type
argument_list|,
name|other
argument_list|)
condition|)
continue|continue
name|ic
continue|;
block|}
name|Constraint
name|gc
init|=
name|createGroupConstraint
argument_list|(
name|ic
operator|.
name|getId
argument_list|()
argument_list|,
name|type
argument_list|,
name|pref
argument_list|,
name|ic
argument_list|)
decl_stmt|;
if|if
condition|(
name|gc
operator|==
literal|null
condition|)
continue|continue;
name|String
name|info
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Lecture
name|var
range|:
name|variables
control|)
block|{
name|gc
operator|.
name|addVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|isEmpty
argument_list|()
condition|)
name|info
operator|+=
literal|", "
expr_stmt|;
name|info
operator|+=
name|getClassLabel
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
name|iProgress
operator|.
name|info
argument_list|(
name|MSG
operator|.
name|infoPostedConstraint
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|info
argument_list|,
name|pref
operator|.
name|getPrefName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addGroupConstraint
argument_list|(
name|gc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

