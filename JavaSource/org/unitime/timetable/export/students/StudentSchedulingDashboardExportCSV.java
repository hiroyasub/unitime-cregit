begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|students
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusFilterBox
operator|.
name|SectioningStatusFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusPage
operator|.
name|ChangeLogComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusPage
operator|.
name|EnrollmentComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusPage
operator|.
name|StudentComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|SectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|StudentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:student-dashboard.csv"
argument_list|)
specifier|public
class|class
name|StudentSchedulingDashboardExportCSV
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DecimalFormat
name|sCreditFormat
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.#"
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"student-dashboard.csv"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|online
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"online"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|tab
init|=
literal|0
decl_stmt|;
try|try
block|{
name|tab
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"tab"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|String
name|query
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
name|int
name|sort
init|=
literal|0
decl_stmt|;
try|try
block|{
name|sort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|SectioningStatusFilterRpcRequest
name|filter
init|=
operator|new
name|SectioningStatusFilterRpcRequest
argument_list|()
decl_stmt|;
comment|// filter.setSessionId(helper.getAcademicSessionId());
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"f:text"
argument_list|)
condition|)
block|{
name|filter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"e:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"f:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|filter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|SectioningService
name|service
init|=
operator|(
name|SectioningService
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
literal|"sectioning.gwt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|==
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"c"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
literal|"c"
argument_list|)
control|)
name|courseIds
operator|.
name|add
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|enrollments
init|=
name|service
operator|.
name|findEnrollmentInfos
argument_list|(
name|online
argument_list|,
name|query
argument_list|,
name|filter
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollments
operator|!=
literal|null
operator|&&
name|sort
operator|!=
literal|0
condition|)
block|{
name|boolean
name|asc
init|=
operator|(
name|sort
operator|>
literal|0
operator|)
decl_stmt|;
name|EnrollmentComparator
operator|.
name|SortBy
name|sortBy
init|=
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|values
argument_list|()
index|[
name|Math
operator|.
name|abs
argument_list|(
name|sort
argument_list|)
operator|-
literal|1
index|]
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|enrollments
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|sortBy
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|asc
condition|)
name|Collections
operator|.
name|reverse
argument_list|(
name|enrollments
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|courseIds
operator|.
name|isEmpty
argument_list|()
operator|&&
name|enrollments
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|allEnrollments
init|=
operator|new
name|ArrayList
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|EnrollmentInfo
name|e
range|:
name|enrollments
control|)
block|{
name|allEnrollments
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
operator|&&
name|courseIds
operator|.
name|contains
argument_list|(
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|classEnrollments
init|=
name|service
operator|.
name|findEnrollmentInfos
argument_list|(
name|online
argument_list|,
name|query
argument_list|,
name|filter
argument_list|,
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classEnrollments
operator|!=
literal|null
condition|)
name|allEnrollments
operator|.
name|addAll
argument_list|(
name|classEnrollments
argument_list|)
expr_stmt|;
block|}
block|}
name|populateCourseTable
argument_list|(
name|helper
argument_list|,
name|allEnrollments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populateCourseTable
argument_list|(
name|helper
argument_list|,
name|enrollments
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|tab
operator|==
literal|1
condition|)
block|{
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|students
init|=
name|service
operator|.
name|findStudentInfos
argument_list|(
name|online
argument_list|,
name|query
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
operator|&&
name|sort
operator|!=
literal|0
condition|)
block|{
name|boolean
name|asc
init|=
operator|(
name|sort
operator|>
literal|0
operator|)
decl_stmt|;
name|StudentComparator
operator|.
name|SortBy
name|sortBy
init|=
name|StudentComparator
operator|.
name|SortBy
operator|.
name|values
argument_list|()
index|[
name|Math
operator|.
name|abs
argument_list|(
name|sort
argument_list|)
operator|-
literal|1
index|]
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|students
argument_list|,
operator|new
name|StudentComparator
argument_list|(
name|sortBy
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|asc
condition|)
name|Collections
operator|.
name|reverse
argument_list|(
name|students
argument_list|)
expr_stmt|;
block|}
name|populateStudentTable
argument_list|(
name|helper
argument_list|,
name|online
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|online
condition|)
block|{
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|changelog
init|=
name|service
operator|.
name|changeLog
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|changelog
operator|!=
literal|null
operator|&&
name|sort
operator|!=
literal|0
condition|)
block|{
name|boolean
name|asc
init|=
operator|(
name|sort
operator|>
literal|0
operator|)
decl_stmt|;
name|ChangeLogComparator
operator|.
name|SortBy
name|sortBy
init|=
name|ChangeLogComparator
operator|.
name|SortBy
operator|.
name|values
argument_list|()
index|[
name|Math
operator|.
name|abs
argument_list|(
name|sort
argument_list|)
operator|-
literal|1
index|]
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|changelog
argument_list|,
operator|new
name|ChangeLogComparator
argument_list|(
name|sortBy
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|asc
condition|)
name|Collections
operator|.
name|reverse
argument_list|(
name|changelog
argument_list|)
expr_stmt|;
block|}
name|populateChangeLogTable
argument_list|(
name|helper
argument_list|,
name|changelog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Wrong tab and online parameter combination."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|populateCourseTable
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|enrollments
parameter_list|)
throws|throws
name|IOException
block|{
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
operator|+
literal|"\n  "
operator|+
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colCourse
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colTitle
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|,
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colConsent
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAvailable
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colProjection
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colWaitListed
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colReserved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colNeedConsent
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|enrollments
operator|!=
literal|null
condition|)
for|for
control|(
name|EnrollmentInfo
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|printLine
argument_list|(
name|e
operator|.
name|getSubject
argument_list|()
argument_list|,
name|e
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|e
operator|.
name|getTitle
argument_list|()
argument_list|,
literal|""
argument_list|,
name|e
operator|.
name|getConsent
argument_list|()
argument_list|,
operator|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|?
name|number
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
else|:
name|available
argument_list|(
name|e
argument_list|)
operator|)
argument_list|,
name|number
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|getProjection
argument_list|()
argument_list|)
argument_list|,
name|number
argument_list|(
name|e
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
argument_list|,
name|waitlist
argument_list|(
name|e
argument_list|)
argument_list|,
name|number
argument_list|(
name|e
operator|.
name|getReservation
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
argument_list|,
name|number
argument_list|(
name|e
operator|.
name|getConsentNeeded
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|printLine
argument_list|(
literal|"  "
operator|+
operator|(
name|e
operator|.
name|getSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getIndent
argument_list|(
literal|"  "
argument_list|)
operator|+
name|e
operator|.
name|getSubpart
argument_list|()
operator|)
argument_list|,
operator|(
name|e
operator|.
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getIndent
argument_list|(
literal|"  "
argument_list|)
operator|+
name|e
operator|.
name|getClazz
argument_list|()
operator|)
argument_list|,
operator|(
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|)
argument_list|,
operator|(
operator|!
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|hasDatePattern
argument_list|()
condition|?
literal|""
else|:
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getDatePattern
argument_list|()
operator|)
argument_list|,
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
argument_list|,
operator|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|?
name|number
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
else|:
name|available
argument_list|(
name|e
argument_list|)
operator|)
argument_list|,
name|number
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|getProjection
argument_list|()
argument_list|)
argument_list|,
name|number
argument_list|(
name|e
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
argument_list|,
name|waitlist
argument_list|(
name|e
argument_list|)
argument_list|,
name|number
argument_list|(
name|e
operator|.
name|getReservation
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
argument_list|,
name|number
argument_list|(
name|e
operator|.
name|getConsentNeeded
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|populateStudentTable
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|boolean
name|online
parameter_list|,
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|students
parameter_list|)
throws|throws
name|IOException
block|{
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|hasExtId
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e
range|:
name|students
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|isCanShowExternalId
argument_list|()
condition|)
block|{
name|hasExtId
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasExtId
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|hasEnrollment
init|=
literal|false
decl_stmt|,
name|hasWaitList
init|=
literal|false
decl_stmt|,
name|hasArea
init|=
literal|false
decl_stmt|,
name|hasMajor
init|=
literal|false
decl_stmt|,
name|hasGroup
init|=
literal|false
decl_stmt|,
name|hasAcmd
init|=
literal|false
decl_stmt|,
name|hasReservation
init|=
literal|false
decl_stmt|,
name|hasRequestedDate
init|=
literal|false
decl_stmt|,
name|hasEnrolledDate
init|=
literal|false
decl_stmt|,
name|hasConsent
init|=
literal|false
decl_stmt|,
name|hasCredit
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e
range|:
name|students
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|>
literal|0
condition|)
name|hasEnrollment
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getTotalUnassigned
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalUnassigned
argument_list|()
operator|>
literal|0
condition|)
name|hasWaitList
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasArea
argument_list|()
condition|)
name|hasArea
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasMajor
argument_list|()
condition|)
name|hasMajor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasGroup
argument_list|()
condition|)
name|hasGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasAccommodation
argument_list|()
condition|)
name|hasAcmd
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getTotalReservation
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalReservation
argument_list|()
operator|>
literal|0
condition|)
name|hasReservation
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getRequestedDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasRequestedDate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getEnrolledDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasEnrolledDate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|>
literal|0
condition|)
name|hasConsent
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasTotalCredit
argument_list|()
condition|)
name|hasCredit
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasArea
condition|)
block|{
name|out
operator|.
name|hideColumn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|out
operator|.
name|hideColumn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasMajor
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasGroup
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasAcmd
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|6
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasEnrollment
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasWaitList
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasReservation
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasConsent
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|11
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasCredit
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|12
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasRequestedDate
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|13
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasEnrolledDate
condition|)
name|out
operator|.
name|hideColumn
argument_list|(
literal|14
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|out
operator|.
name|hideColumn
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|out
operator|.
name|hideColumn
argument_list|(
literal|16
argument_list|)
expr_stmt|;
block|}
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_REQUEST
argument_list|)
decl_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudentExternalId
argument_list|()
argument_list|,
comment|// 0
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|,
comment|// 1
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|,
comment|// 2
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|,
comment|// 3
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|,
comment|// 4
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|,
comment|// 5
name|MESSAGES
operator|.
name|colAccommodation
argument_list|()
argument_list|,
comment|// 6
name|MESSAGES
operator|.
name|colStatus
argument_list|()
argument_list|,
comment|// 7
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|,
comment|// 8
name|MESSAGES
operator|.
name|colWaitListed
argument_list|()
argument_list|,
comment|// 9
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|,
comment|// 10
name|MESSAGES
operator|.
name|colConsent
argument_list|()
argument_list|,
comment|// 11
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|,
comment|// 12
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|,
comment|// 13
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|,
comment|// 14
name|MESSAGES
operator|.
name|colStudentNote
argument_list|()
argument_list|,
comment|// 15
name|MESSAGES
operator|.
name|colEmailTimeStamp
argument_list|()
comment|// 16
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|students
operator|!=
literal|null
condition|)
for|for
control|(
name|StudentInfo
name|info
range|:
name|students
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|out
operator|.
name|printLine
argument_list|(
operator|(
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|isCanShowExternalId
argument_list|()
condition|?
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
operator|)
argument_list|,
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccommodation
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
name|info
operator|.
name|getStatus
argument_list|()
argument_list|,
name|number
argument_list|(
name|info
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
argument_list|,
name|waitlist
argument_list|(
name|info
argument_list|)
argument_list|,
name|number
argument_list|(
name|info
operator|.
name|getReservation
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
argument_list|,
name|number
argument_list|(
name|info
operator|.
name|getConsentNeeded
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
argument_list|,
name|credit
argument_list|(
name|info
operator|.
name|getCredit
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalCredit
argument_list|()
argument_list|)
argument_list|,
operator|(
name|info
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|df
operator|.
name|format
argument_list|(
name|info
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
operator|)
argument_list|,
operator|(
name|info
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|df
operator|.
name|format
argument_list|(
name|info
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
operator|)
argument_list|,
operator|(
name|info
operator|.
name|hasNote
argument_list|()
condition|?
name|info
operator|.
name|getNote
argument_list|()
else|:
literal|""
operator|)
argument_list|,
operator|(
name|info
operator|.
name|getEmailDate
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|df
operator|.
name|format
argument_list|(
name|info
operator|.
name|getEmailDate
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|printLine
argument_list|(
name|MESSAGES
operator|.
name|total
argument_list|()
argument_list|,
operator|(
name|hasExtId
condition|?
literal|null
else|:
name|MESSAGES
operator|.
name|total
argument_list|()
operator|)
argument_list|,
name|number
argument_list|(
literal|null
argument_list|,
name|students
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|number
argument_list|(
name|info
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
argument_list|,
name|waitlist
argument_list|(
name|info
argument_list|)
argument_list|,
name|number
argument_list|(
name|info
operator|.
name|getReservation
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
argument_list|,
name|number
argument_list|(
name|info
operator|.
name|getConsentNeeded
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
argument_list|,
name|credit
argument_list|(
name|info
operator|.
name|getCredit
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalCredit
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|populateChangeLogTable
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|changelog
parameter_list|)
throws|throws
name|IOException
block|{
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colOperation
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colTimeStamp
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colExecutionTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colResult
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colUser
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colMessage
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_TIME_STAMP
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|nf
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|executionTimeFormat
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|changelog
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|SectioningAction
name|log
range|:
name|changelog
control|)
block|{
name|out
operator|.
name|printLine
argument_list|(
name|log
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|log
operator|.
name|getOperation
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|,
operator|(
name|log
operator|.
name|getWallTime
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|nf
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|log
operator|.
name|getWallTime
argument_list|()
argument_list|)
operator|)
argument_list|,
name|log
operator|.
name|getResult
argument_list|()
argument_list|,
name|log
operator|.
name|getUser
argument_list|()
argument_list|,
operator|(
name|log
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|log
operator|.
name|getMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|number
parameter_list|(
name|Integer
name|value
parameter_list|,
name|Integer
name|total
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|total
operator|!=
literal|null
condition|)
return|return
operator|(
name|total
operator|==
literal|0
condition|?
literal|"-"
else|:
name|total
operator|<
literal|0
condition|?
literal|"\u221e"
else|:
name|total
operator|.
name|toString
argument_list|()
operator|)
return|;
else|else
return|return
literal|null
return|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|total
argument_list|)
condition|)
return|return
operator|(
name|total
operator|==
literal|0
condition|?
literal|"-"
else|:
name|total
operator|<
literal|0
condition|?
literal|"\u221e"
else|:
name|total
operator|.
name|toString
argument_list|()
operator|)
return|;
else|else
return|return
operator|(
operator|(
name|value
operator|<
literal|0
condition|?
literal|"\u221e"
else|:
name|value
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|total
operator|<
literal|0
condition|?
literal|"\u221e"
else|:
name|total
operator|.
name|toString
argument_list|()
operator|)
operator|)
return|;
block|}
block|}
specifier|public
name|String
name|available
parameter_list|(
name|EnrollmentInfo
name|e
parameter_list|)
block|{
name|int
name|other
init|=
operator|(
name|e
operator|.
name|getOther
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e
operator|.
name|getOther
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"-"
return|;
block|}
if|else if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"\u221e"
operator|+
name|MESSAGES
operator|.
name|csvReservationSign
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|"\u221e"
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|other
condition|)
block|{
return|return
name|e
operator|.
name|getAvailable
argument_list|()
operator|+
literal|" / "
operator|+
name|e
operator|.
name|getLimit
argument_list|()
return|;
block|}
if|else if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
literal|0
operator|&&
name|e
operator|.
name|getLimit
argument_list|()
operator|>
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|+
name|other
condition|)
block|{
return|return
operator|(
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|other
operator|)
operator|+
name|MESSAGES
operator|.
name|csvReservationSign
argument_list|()
operator|+
literal|" / "
operator|+
name|e
operator|.
name|getLimit
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|e
operator|.
name|getAvailable
argument_list|()
operator|+
literal|" + "
operator|+
operator|(
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|e
operator|.
name|getAvailable
argument_list|()
operator|-
name|other
operator|)
operator|+
name|MESSAGES
operator|.
name|csvReservationSign
argument_list|()
operator|+
literal|" / "
operator|+
name|e
operator|.
name|getLimit
argument_list|()
return|;
block|}
block|}
block|}
specifier|public
name|String
name|waitlist
parameter_list|(
name|int
name|wait
parameter_list|,
name|int
name|tWait
parameter_list|,
name|int
name|unasg
parameter_list|,
name|int
name|tUnasg
parameter_list|,
name|Integer
name|topWaitingPriority
parameter_list|)
block|{
if|if
condition|(
name|tWait
operator|==
literal|0
operator|||
name|tWait
operator|==
name|tUnasg
condition|)
block|{
comment|// no wait-list or all wait-listed
if|if
condition|(
name|unasg
operator|==
name|tUnasg
condition|)
block|{
return|return
operator|(
name|unasg
operator|==
literal|0
condition|?
literal|"-"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|unasg
argument_list|)
operator|)
operator|+
operator|(
name|tWait
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|csvWaitListSign
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|topWaitingPriority
operator|!=
literal|null
condition|?
name|MESSAGES
operator|.
name|csvFirstWaitListedPrioritySign
argument_list|(
name|topWaitingPriority
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|unasg
operator|+
literal|" / "
operator|+
name|tUnasg
operator|)
operator|+
operator|(
name|tWait
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|csvWaitListSign
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|topWaitingPriority
operator|!=
literal|null
condition|?
name|MESSAGES
operator|.
name|csvFirstWaitListedPrioritySign
argument_list|(
name|topWaitingPriority
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|wait
operator|==
name|tWait
operator|&&
name|unasg
operator|==
name|tUnasg
condition|)
block|{
return|return
operator|(
name|wait
operator|==
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|unasg
argument_list|)
else|:
name|wait
operator|==
name|unasg
condition|?
name|wait
operator|+
name|MESSAGES
operator|.
name|csvWaitListSign
argument_list|()
else|:
operator|(
name|unasg
operator|-
name|wait
operator|)
operator|+
literal|" + "
operator|+
name|wait
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
operator|)
operator|+
operator|(
name|topWaitingPriority
operator|!=
literal|null
condition|?
name|MESSAGES
operator|.
name|csvFirstWaitListedPrioritySign
argument_list|(
name|topWaitingPriority
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|wait
operator|==
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|unasg
argument_list|)
else|:
name|wait
operator|==
name|unasg
condition|?
name|wait
operator|+
name|MESSAGES
operator|.
name|csvWaitListSign
argument_list|()
else|:
operator|(
name|unasg
operator|-
name|wait
operator|)
operator|+
literal|" + "
operator|+
name|wait
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
name|tUnasg
operator|)
operator|+
operator|(
name|topWaitingPriority
operator|!=
literal|null
condition|?
name|MESSAGES
operator|.
name|csvFirstWaitListedPrioritySign
argument_list|(
name|topWaitingPriority
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
block|}
block|}
specifier|public
name|String
name|waitlist
parameter_list|(
name|StudentInfo
name|e
parameter_list|)
block|{
return|return
name|waitlist
argument_list|(
name|e
operator|.
name|hasWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getTotalWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getUnassigned
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getTotalUnassigned
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|getTopWaitingPriority
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|waitlist
parameter_list|(
name|EnrollmentInfo
name|e
parameter_list|)
block|{
return|return
name|waitlist
argument_list|(
name|e
operator|.
name|hasWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getTotalWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getUnassigned
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getTotalUnassigned
argument_list|()
else|:
literal|0
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|String
name|credit
parameter_list|(
name|Float
name|value
parameter_list|,
name|Float
name|total
parameter_list|)
block|{
if|if
condition|(
name|total
operator|!=
literal|null
operator|&&
name|total
operator|>
literal|0f
condition|)
block|{
if|if
condition|(
name|total
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
return|return
operator|(
name|sCreditFormat
operator|.
name|format
argument_list|(
name|total
argument_list|)
operator|)
return|;
else|else
return|return
operator|(
name|sCreditFormat
operator|.
name|format
argument_list|(
name|value
argument_list|)
operator|+
literal|" / "
operator|+
name|sCreditFormat
operator|.
name|format
argument_list|(
name|total
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

