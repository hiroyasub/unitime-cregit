begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|ApplicationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|server
operator|.
name|GwtRpcImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|FilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridBackground
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridFilterRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridFilterResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Phrase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|ColumnText
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfContentByte
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:timetable.pdf"
argument_list|)
specifier|public
class|class
name|ExportTimetablePDF
extends|extends
name|TableExporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Date
argument_list|>
name|sDateFormatMeeting
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|TIMETABLE_GRID_DATE
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Format
argument_list|<
name|Number
argument_list|>
name|sUtilizationFormat
init|=
name|Formats
operator|.
name|getConcurrentNumberFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|UTILIZATION
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|int
name|sHeaderWidth
init|=
literal|100
decl_stmt|;
specifier|protected
specifier|static
name|int
name|sLineHeight
init|=
literal|13
decl_stmt|;
annotation|@
name|Autowired
specifier|private
name|ApplicationContext
name|applicationContext
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"timetable.pdf"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|GwtRpcImplementation
argument_list|<
name|TimetableGridFilterRequest
argument_list|,
name|TimetableGridFilterResponse
argument_list|>
name|filterService
init|=
operator|(
name|GwtRpcImplementation
argument_list|<
name|TimetableGridFilterRequest
argument_list|,
name|TimetableGridFilterResponse
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|TimetableGridFilterRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TimetableGridFilterResponse
name|filter
init|=
name|filterService
operator|.
name|execute
argument_list|(
operator|new
name|TimetableGridFilterRequest
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|)
decl_stmt|;
name|fillInFilter
argument_list|(
name|filter
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|GwtRpcImplementation
argument_list|<
name|TimetableGridRequest
argument_list|,
name|TimetableGridResponse
argument_list|>
name|service
init|=
operator|(
name|GwtRpcImplementation
argument_list|<
name|TimetableGridRequest
argument_list|,
name|TimetableGridResponse
argument_list|>
operator|)
name|applicationContext
operator|.
name|getBean
argument_list|(
name|TimetableGridRequest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TimetableGridRequest
name|request
init|=
operator|new
name|TimetableGridRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|TimetableGridResponse
name|response
init|=
name|service
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|)
decl_stmt|;
name|printTables
argument_list|(
name|filter
argument_list|,
name|response
argument_list|,
name|helper
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printTables
parameter_list|(
name|FilterInterface
name|filter
parameter_list|,
name|TimetableGridResponse
name|response
parameter_list|,
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|helper
operator|.
name|setup
argument_list|(
literal|"application/pdf"
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|Document
name|document
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|PdfWriter
name|writer
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|document
argument_list|,
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|int
name|margin
init|=
literal|50
decl_stmt|;
name|int
name|width
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|response
operator|.
name|getModels
argument_list|()
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|pageWidth
argument_list|(
name|filter
argument_list|,
name|model
argument_list|,
name|response
operator|.
name|getWeekOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|displayMode
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|height
init|=
operator|(
name|displayMode
operator|==
literal|2
condition|?
operator|(
literal|2
operator|*
name|margin
operator|+
name|width
operator|)
operator|*
literal|22
operator|/
literal|17
operator|-
literal|2
operator|*
name|margin
else|:
operator|(
literal|2
operator|*
name|margin
operator|+
name|width
operator|)
operator|*
literal|17
operator|/
literal|22
operator|-
literal|2
operator|*
name|margin
operator|)
decl_stmt|;
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|response
operator|.
name|getModels
argument_list|()
control|)
name|height
operator|=
name|Math
operator|.
name|max
argument_list|(
name|height
argument_list|,
name|pageHeight
argument_list|(
name|filter
argument_list|,
name|model
argument_list|,
name|response
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|setPageSize
argument_list|(
operator|new
name|Rectangle
argument_list|(
name|width
operator|+
literal|2
operator|*
name|margin
argument_list|,
name|height
operator|+
literal|2
operator|*
name|margin
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|setMargins
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
name|document
operator|.
name|open
argument_list|()
expr_stmt|;
name|int
name|used
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|boolean
name|hasDay
index|[]
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
name|days
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
if|if
condition|(
name|days
operator|!=
literal|null
operator|&&
name|days
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|days
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
name|hasDay
index|[
name|i
index|]
operator|=
operator|(
name|days
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
operator|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|i
index|]
condition|)
continue|continue;
name|String
name|d
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|7
condition|;
name|j
operator|++
control|)
name|d
operator|+=
operator|(
name|i
operator|==
name|j
condition|?
literal|"1"
else|:
literal|"0"
operator|)
expr_stmt|;
name|filter
operator|.
name|getParameter
argument_list|(
literal|"days"
argument_list|)
operator|.
name|setValue
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|response
operator|.
name|getModels
argument_list|()
control|)
block|{
if|if
condition|(
name|used
operator|>
literal|0
operator|&&
name|pageHeight
argument_list|(
name|filter
argument_list|,
name|model
argument_list|,
name|response
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
name|first
argument_list|)
operator|>
name|height
operator|-
name|used
condition|)
block|{
name|document
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|used
operator|=
literal|0
expr_stmt|;
block|}
name|TimetableGrid
name|tg
init|=
operator|new
name|TimetableGrid
argument_list|(
name|filter
argument_list|,
name|model
argument_list|,
name|index
operator|++
argument_list|,
name|width
argument_list|,
name|response
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
name|used
operator|==
literal|0
operator|||
name|first
argument_list|)
decl_stmt|;
name|PdfContentByte
name|canvas
init|=
name|writer
operator|.
name|getDirectContent
argument_list|()
decl_stmt|;
name|tg
operator|.
name|print
argument_list|(
name|canvas
argument_list|,
name|margin
argument_list|,
name|margin
operator|+
name|used
argument_list|,
name|height
operator|+
literal|2
operator|*
name|margin
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|used
operator|+=
name|tg
operator|.
name|getHeight
argument_list|()
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|used
operator|+=
literal|25
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|TimetableGridModel
name|model
range|:
name|response
operator|.
name|getModels
argument_list|()
control|)
block|{
if|if
condition|(
name|used
operator|>
literal|0
operator|&&
name|pageHeight
argument_list|(
name|filter
argument_list|,
name|model
argument_list|,
name|response
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|>
name|height
operator|-
name|used
condition|)
block|{
name|document
operator|.
name|newPage
argument_list|()
expr_stmt|;
name|used
operator|=
literal|0
expr_stmt|;
block|}
name|TimetableGrid
name|tg
init|=
operator|new
name|TimetableGrid
argument_list|(
name|filter
argument_list|,
name|model
argument_list|,
name|index
operator|++
argument_list|,
name|width
argument_list|,
name|response
operator|.
name|getWeekOffset
argument_list|()
argument_list|,
name|used
operator|==
literal|0
argument_list|)
decl_stmt|;
name|PdfContentByte
name|canvas
init|=
name|writer
operator|.
name|getDirectContent
argument_list|()
decl_stmt|;
name|tg
operator|.
name|print
argument_list|(
name|canvas
argument_list|,
name|margin
argument_list|,
name|margin
operator|+
name|used
argument_list|,
name|height
operator|+
literal|2
operator|*
name|margin
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|used
operator|+=
name|tg
operator|.
name|getHeight
argument_list|()
operator|+
literal|25
expr_stmt|;
block|}
block|}
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|P
block|{
specifier|private
name|Integer
name|iLeft
decl_stmt|,
name|iTop
decl_stmt|,
name|iRight
decl_stmt|,
name|iBottom
decl_stmt|,
name|iWidth
decl_stmt|,
name|iHeight
decl_stmt|;
specifier|private
name|String
name|iText
decl_stmt|,
name|iStyle
decl_stmt|;
specifier|private
name|boolean
name|iItalics
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iColor
decl_stmt|,
name|iBgColor
decl_stmt|;
specifier|private
name|List
argument_list|<
name|P
argument_list|>
name|iContent
init|=
operator|new
name|ArrayList
argument_list|<
name|P
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|P
parameter_list|(
name|String
name|style
parameter_list|)
block|{
name|iStyle
operator|=
name|style
expr_stmt|;
block|}
specifier|public
name|void
name|setWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|iWidth
operator|=
name|width
expr_stmt|;
block|}
specifier|public
name|void
name|setHeight
parameter_list|(
name|int
name|height
parameter_list|)
block|{
name|iHeight
operator|=
name|height
expr_stmt|;
block|}
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iText
operator|=
name|text
expr_stmt|;
block|}
specifier|public
name|void
name|setLeft
parameter_list|(
name|int
name|left
parameter_list|)
block|{
name|iLeft
operator|=
name|left
expr_stmt|;
block|}
specifier|public
name|void
name|setRight
parameter_list|(
name|int
name|right
parameter_list|)
block|{
name|iRight
operator|=
name|right
expr_stmt|;
block|}
specifier|public
name|void
name|setBottom
parameter_list|(
name|int
name|bottom
parameter_list|)
block|{
name|iBottom
operator|=
name|bottom
expr_stmt|;
block|}
specifier|public
name|void
name|setTop
parameter_list|(
name|int
name|top
parameter_list|)
block|{
name|iTop
operator|=
name|top
expr_stmt|;
block|}
specifier|public
name|void
name|setColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|iColor
operator|=
name|color
expr_stmt|;
block|}
specifier|public
name|void
name|setBackgroundColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|iBgColor
operator|=
name|color
expr_stmt|;
block|}
specifier|public
name|void
name|setItalics
parameter_list|(
name|boolean
name|italics
parameter_list|)
block|{
name|iItalics
operator|=
name|italics
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|P
name|p
parameter_list|)
block|{
name|iContent
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|P
name|p
parameter_list|,
name|int
name|left
parameter_list|,
name|int
name|top
parameter_list|)
block|{
name|p
operator|.
name|iTop
operator|=
name|top
expr_stmt|;
name|p
operator|.
name|iLeft
operator|=
name|left
expr_stmt|;
name|iContent
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLeft
parameter_list|()
block|{
if|if
condition|(
name|iLeft
operator|!=
literal|null
condition|)
return|return
name|iLeft
return|;
if|if
condition|(
name|iRight
operator|!=
literal|null
condition|)
return|return
name|getWidth
argument_list|()
operator|-
name|iRight
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getTop
parameter_list|()
block|{
if|if
condition|(
name|iTop
operator|!=
literal|null
condition|)
return|return
name|iTop
return|;
if|if
condition|(
name|iBottom
operator|!=
literal|null
condition|)
return|return
name|getHeight
argument_list|()
operator|-
name|iBottom
return|;
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
if|if
condition|(
name|iWidth
operator|!=
literal|null
condition|)
return|return
name|iWidth
return|;
name|int
name|width
init|=
literal|0
decl_stmt|;
for|for
control|(
name|P
name|p
range|:
name|iContent
control|)
block|{
name|int
name|w
init|=
name|p
operator|.
name|getLeft
argument_list|()
operator|+
name|p
operator|.
name|getWidth
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
operator|>
name|width
condition|)
name|width
operator|=
name|w
expr_stmt|;
block|}
return|return
name|width
return|;
block|}
specifier|public
name|int
name|getHeight
parameter_list|()
block|{
if|if
condition|(
name|iHeight
operator|!=
literal|null
condition|)
return|return
name|iHeight
return|;
name|int
name|height
init|=
literal|0
decl_stmt|;
for|for
control|(
name|P
name|p
range|:
name|iContent
control|)
block|{
name|int
name|h
init|=
name|p
operator|.
name|getTop
argument_list|()
operator|+
name|p
operator|.
name|getHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|h
operator|>
name|height
condition|)
name|height
operator|=
name|h
expr_stmt|;
block|}
return|return
name|height
return|;
block|}
specifier|public
name|boolean
name|hasText
parameter_list|()
block|{
return|return
name|iText
operator|!=
literal|null
operator|&&
operator|!
name|iText
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
specifier|public
name|String
name|getStyle
parameter_list|()
block|{
return|return
name|iStyle
return|;
block|}
specifier|public
name|boolean
name|isStyle
parameter_list|(
name|String
modifier|...
name|style
parameter_list|)
block|{
for|for
control|(
name|String
name|s
range|:
name|style
control|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|iStyle
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|PdfContentByte
name|canvas
parameter_list|,
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|,
name|int
name|pageHeight
parameter_list|,
name|P
name|parent
parameter_list|)
throws|throws
name|DocumentException
block|{
if|if
condition|(
name|isStyle
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
condition|)
block|{
name|setHeight
argument_list|(
name|getHeight
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"vertical-separator"
argument_list|)
condition|)
block|{
name|setHeight
argument_list|(
name|parent
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
name|setHeight
argument_list|(
name|getHeight
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"horizontal-separator"
argument_list|)
condition|)
block|{
name|setWidth
argument_list|(
name|parent
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Rectangle
name|rect
init|=
operator|new
name|Rectangle
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|,
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|isStyle
argument_list|(
literal|"meeting"
argument_list|)
condition|)
block|{
name|rect
operator|.
name|setBackgroundColor
argument_list|(
name|Color
operator|.
name|WHITE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iBgColor
operator|!=
literal|null
condition|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|iBgColor
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|rect
operator|.
name|setBackgroundColor
argument_list|(
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|isStyle
argument_list|(
literal|"meeting"
argument_list|)
condition|)
block|{
if|if
condition|(
name|parent
operator|.
name|iBgColor
operator|!=
literal|null
condition|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|parent
operator|.
name|iBgColor
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|Color
name|color
init|=
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStyle
argument_list|(
literal|"header"
argument_list|)
condition|)
name|rect
operator|.
name|setBackgroundColor
argument_list|(
name|color
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setBackgroundColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Color
name|color
init|=
operator|new
name|Color
argument_list|(
literal|240
argument_list|,
literal|240
argument_list|,
literal|240
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStyle
argument_list|(
literal|"header"
argument_list|)
condition|)
name|rect
operator|.
name|setBackgroundColor
argument_list|(
name|color
operator|.
name|darker
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|rect
operator|.
name|setBackgroundColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rect
operator|.
name|getBackgroundColor
argument_list|()
operator|!=
literal|null
condition|)
name|canvas
operator|.
name|rectangle
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasText
argument_list|()
condition|)
block|{
name|boolean
name|bold
init|=
name|isStyle
argument_list|(
literal|"grid-name"
argument_list|,
literal|"horizontal-header"
argument_list|,
literal|"vertical-header"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isStyle
argument_list|(
literal|"header"
argument_list|)
operator|&&
name|parent
operator|.
name|isStyle
argument_list|(
literal|"meeting"
argument_list|)
condition|)
name|bold
operator|=
literal|true
expr_stmt|;
name|boolean
name|italics
init|=
name|iItalics
decl_stmt|;
name|int
name|alignment
init|=
name|Element
operator|.
name|ALIGN_CENTER
decl_stmt|;
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getSmallFont
argument_list|(
name|bold
argument_list|,
name|italics
argument_list|)
decl_stmt|;
if|if
condition|(
name|iColor
operator|!=
literal|null
condition|)
block|{
name|Pattern
name|p
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)"
argument_list|)
decl_stmt|;
name|Matcher
name|m
init|=
name|p
operator|.
name|matcher
argument_list|(
name|iColor
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|font
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|getText
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
control|)
block|{
name|Phrase
name|p
init|=
operator|new
name|Phrase
argument_list|(
name|line
argument_list|,
name|font
argument_list|)
decl_stmt|;
name|ColumnText
name|ct
init|=
operator|new
name|ColumnText
argument_list|(
name|canvas
argument_list|)
decl_stmt|;
name|ct
operator|.
name|setSimpleColumn
argument_list|(
name|p
argument_list|,
name|x
operator|+
name|getLeft
argument_list|()
operator|+
literal|2
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
literal|2
operator|+
name|sLineHeight
operator|*
name|idx
operator|)
argument_list|,
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|4
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
literal|2
operator|+
name|sLineHeight
operator|*
name|idx
operator|+
literal|15f
operator|)
argument_list|,
literal|8f
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
name|ct
operator|.
name|go
argument_list|()
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"footer"
argument_list|)
operator|&&
name|parent
operator|.
name|isStyle
argument_list|(
literal|"meeting"
argument_list|)
condition|)
block|{
name|canvas
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"header"
argument_list|)
operator|&&
name|parent
operator|.
name|isStyle
argument_list|(
literal|"meeting"
argument_list|)
condition|)
block|{
name|canvas
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|BLACK
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"vertical-separator"
argument_list|)
condition|)
block|{
name|canvas
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"horizontal-separator"
argument_list|)
condition|)
block|{
name|canvas
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"header-interval"
argument_list|)
condition|)
block|{
name|canvas
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isStyle
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
condition|)
block|{
name|canvas
operator|.
name|setColorStroke
argument_list|(
name|Color
operator|.
name|GRAY
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|moveTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
operator|+
name|getWidth
argument_list|()
operator|-
literal|1
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|lineTo
argument_list|(
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|pageHeight
operator|-
operator|(
name|y
operator|+
name|getTop
argument_list|()
operator|+
name|getHeight
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|canvas
operator|.
name|closePathStroke
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|P
name|p
range|:
name|iContent
control|)
block|{
name|p
operator|.
name|print
argument_list|(
name|canvas
argument_list|,
name|x
operator|+
name|getLeft
argument_list|()
argument_list|,
name|y
operator|+
name|getTop
argument_list|()
argument_list|,
name|pageHeight
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
class|class
name|TimetableGrid
extends|extends
name|P
block|{
specifier|private
name|List
argument_list|<
name|Meeting
argument_list|>
name|iMeetings
init|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Background
argument_list|>
name|iBackbrounds
init|=
operator|new
name|ArrayList
argument_list|<
name|Background
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iCellWidth
decl_stmt|;
specifier|public
name|TimetableGrid
parameter_list|(
name|FilterInterface
name|filter
parameter_list|,
specifier|final
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|pageWidth
parameter_list|,
name|int
name|weekOffset
parameter_list|,
name|boolean
name|showHeader
parameter_list|)
block|{
name|super
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
expr_stmt|;
name|int
name|displayMode
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|hasDay
index|[]
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
name|days
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|days
operator|!=
literal|null
operator|&&
name|days
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|days
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|days
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|nrDays
operator|++
expr_stmt|;
block|}
else|else
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|int
name|nrTimes
init|=
literal|20
decl_stmt|;
name|int
name|startSlot
init|=
literal|90
decl_stmt|;
name|int
name|step
init|=
literal|6
decl_stmt|;
name|String
index|[]
name|times
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"times"
argument_list|,
literal|"90|222|6"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
name|times
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|startSlot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|step
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|nrTimes
operator|=
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|1
index|]
argument_list|)
operator|-
name|startSlot
operator|)
operator|/
name|step
expr_stmt|;
block|}
name|int
name|endSlot
init|=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
decl_stmt|;
name|boolean
name|showPreferences
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showPreferences"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showInstructors
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showInstructors"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showTimes
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showTimes"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showRoom
init|=
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"resource"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showDate
init|=
literal|"-100"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"weeks"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|comment
init|=
name|getComment
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayMode
operator|==
literal|0
condition|)
block|{
name|int
name|headerLines
init|=
operator|(
name|showHeader
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayIndex
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayLines
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|dayLines
index|[
name|d
index|]
operator|=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
operator|&&
name|nrLines
operator|<
name|dayLines
index|[
name|d
index|]
condition|)
name|nrLines
operator|=
name|dayLines
index|[
name|d
index|]
expr_stmt|;
name|dayIndex
index|[
name|d
index|]
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|x
operator|++
expr_stmt|;
block|}
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
expr_stmt|;
if|if
condition|(
name|iCellWidth
operator|<
literal|50
condition|)
name|iCellWidth
operator|=
literal|50
expr_stmt|;
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|nrDays
argument_list|,
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerLines
operator|>
literal|0
condition|)
block|{
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
name|name
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|d
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|nrDays
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerLines
operator|>
literal|0
condition|)
block|{
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|nrDays
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|nrTimes
condition|;
name|t
operator|++
control|)
block|{
name|int
name|j
init|=
name|dayIndex
index|[
name|d
index|]
operator|*
name|nrTimes
operator|+
name|t
decl_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|slot2time
argument_list|(
name|startSlot
operator|+
name|t
operator|*
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|0
operator|&&
name|dayIndex
index|[
name|d
index|]
operator|>
literal|0
condition|)
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-double-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs2
init|=
operator|new
name|P
argument_list|(
literal|"vertical-double-separator"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|vs2
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|nrTimes
condition|;
name|t
operator|++
control|)
block|{
name|int
name|i
init|=
name|dayIndex
index|[
name|d
index|]
operator|*
name|nrTimes
operator|+
name|t
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|0
operator|&&
name|dayIndex
index|[
name|d
index|]
operator|>
literal|0
condition|)
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-double-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|hi
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|.
name|setHeight
argument_list|(
name|nrLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|setWidth
argument_list|(
name|stop
operator|*
name|iCellWidth
operator|/
name|step
operator|-
name|start
operator|*
name|iCellWidth
operator|/
name|step
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|*
name|nrTimes
operator|*
name|iCellWidth
operator|+
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|int
name|lines
init|=
name|cell
operator|.
name|getNrLines
argument_list|()
decl_stmt|;
if|if
condition|(
name|dayLines
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|<
name|nrLines
operator|&&
operator|(
name|cell
operator|.
name|getIndex
argument_list|()
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|==
name|dayLines
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|)
condition|)
block|{
name|lines
operator|+=
name|nrLines
operator|-
name|dayLines
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
expr_stmt|;
block|}
name|m
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
name|lines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|*
name|nrTimes
operator|*
name|iCellWidth
operator|+
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
argument_list|,
name|cell
operator|.
name|getIndex
argument_list|()
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|1
condition|)
block|{
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayIndex
init|=
operator|new
name|int
index|[
literal|8
index|]
decl_stmt|;
name|int
index|[]
name|toDayIdx
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|dayIndex
index|[
name|i
index|]
operator|=
name|nrLines
expr_stmt|;
name|toDayIdx
index|[
name|d
index|]
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|nrLines
operator|+=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|dayIndex
index|[
literal|7
index|]
operator|=
name|nrLines
expr_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
name|nrTimes
expr_stmt|;
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|2
argument_list|,
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|name
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|name
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrTimes
condition|;
name|i
operator|++
control|)
block|{
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|slot2time
argument_list|(
name|startSlot
operator|+
name|i
operator|*
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
operator|(
name|dayIndex
index|[
literal|1
operator|+
name|i
index|]
operator|-
name|dayIndex
index|[
name|i
index|]
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|d
index|]
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
decl_stmt|;
name|b
operator|.
name|setHeight
argument_list|(
operator|(
name|dayIndex
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|dayIndex
index|[
name|i
index|]
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|setWidth
argument_list|(
name|stop
operator|*
name|iCellWidth
operator|/
name|step
operator|-
name|start
operator|*
name|iCellWidth
operator|/
name|step
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|dayIndex
index|[
name|i
index|]
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
operator|(
name|dayIndex
index|[
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
index|]
operator|+
name|cell
operator|.
name|getIndex
argument_list|()
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|2
condition|)
block|{
name|int
name|nrColumns
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|colIndex
init|=
operator|new
name|int
index|[
literal|8
index|]
decl_stmt|;
name|int
index|[]
name|toDayIdx
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|colIndex
index|[
name|i
index|]
operator|=
name|nrColumns
expr_stmt|;
name|toDayIdx
index|[
name|d
index|]
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|nrColumns
operator|+=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|colIndex
index|[
literal|7
index|]
operator|=
name|nrColumns
expr_stmt|;
name|int
name|linesPerTime
init|=
literal|2
decl_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
name|nrColumns
expr_stmt|;
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
name|nrColumns
operator|*
name|iCellWidth
operator|+
literal|2
argument_list|,
operator|(
name|headerLines
operator|+
name|linesPerTime
operator|*
name|nrTimes
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|name
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|name
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|linesPerTime
operator|*
name|nrTimes
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
name|nrColumns
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
name|nrColumns
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|linesPerTime
operator|*
name|nrTimes
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
operator|*
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|d
index|]
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|colIndex
index|[
name|i
index|]
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|colIndex
index|[
name|i
index|]
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrTimes
condition|;
name|i
operator|++
control|)
block|{
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|linesPerTime
operator|*
name|i
argument_list|)
expr_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|linesPerTime
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|slot2time
argument_list|(
name|startSlot
operator|+
name|step
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|linesPerTime
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|setHeight
argument_list|(
name|stop
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
operator|-
name|start
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
decl_stmt|;
name|b
operator|.
name|setWidth
argument_list|(
operator|(
name|colIndex
index|[
literal|1
operator|+
name|i
index|]
operator|-
name|colIndex
index|[
name|i
index|]
operator|)
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|colIndex
index|[
name|i
index|]
operator|*
name|iCellWidth
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|)
expr_stmt|;
name|m
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
name|iCellWidth
operator|*
name|cell
operator|.
name|getNrLines
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
operator|(
name|colIndex
index|[
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
index|]
operator|+
name|cell
operator|.
name|getIndex
argument_list|()
operator|)
operator|*
name|iCellWidth
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|3
condition|)
block|{
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayIndex
init|=
operator|new
name|int
index|[
literal|366
index|]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|dayIndex
index|[
name|d
index|]
operator|=
name|nrLines
expr_stmt|;
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|hasDay
index|[
name|day
index|]
operator|&&
name|model
operator|.
name|hasDate
argument_list|(
name|day
argument_list|,
name|date
argument_list|)
condition|)
block|{
name|nrLines
operator|+=
name|model
operator|.
name|getNrDateLines
argument_list|(
name|day
argument_list|,
name|date
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
name|dayIndex
index|[
literal|365
index|]
operator|=
name|nrLines
expr_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
name|nrTimes
expr_stmt|;
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|2
argument_list|,
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|name
operator|.
name|setText
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|name
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrTimes
condition|;
name|i
operator|++
control|)
block|{
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|slot2time
argument_list|(
name|startSlot
operator|+
name|i
operator|*
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|setRight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|setTop
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|day
index|]
operator|||
operator|!
name|model
operator|.
name|hasDate
argument_list|(
name|day
argument_list|,
name|date
argument_list|)
condition|)
continue|continue;
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|)
expr_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
operator|(
name|dayIndex
index|[
literal|1
operator|+
name|d
index|]
operator|-
name|dayIndex
index|[
name|d
index|]
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|sDateFormatMeeting
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|model
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|)
expr_stmt|;
block|}
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
condition|)
block|{
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|.
name|setHeight
argument_list|(
operator|(
name|dayIndex
index|[
literal|1
operator|+
name|d
index|]
operator|-
name|dayIndex
index|[
name|d
index|]
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|setWidth
argument_list|(
name|stop
operator|*
name|iCellWidth
operator|/
name|step
operator|-
name|start
operator|*
name|iCellWidth
operator|/
name|step
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|dayIndex
index|[
name|d
index|]
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
operator|&&
name|cell
operator|.
name|hasDate
argument_list|(
name|date
argument_list|)
condition|)
block|{
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
name|cell
operator|.
name|getNrLines
argument_list|(
name|date
argument_list|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
operator|(
name|dayIndex
index|[
name|d
index|]
operator|+
name|cell
operator|.
name|getIndex
argument_list|(
name|date
argument_list|)
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
specifier|protected
specifier|static
name|float
name|textWidth
parameter_list|(
name|Font
name|font
parameter_list|,
name|TimetableGridCell
name|cell
parameter_list|,
name|boolean
name|showRoom
parameter_list|,
name|boolean
name|showInstructor
parameter_list|,
name|boolean
name|showTime
parameter_list|,
name|boolean
name|showPreference
parameter_list|,
name|boolean
name|showDate
parameter_list|)
block|{
name|float
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getNrNames
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|cell
operator|.
name|getNames
argument_list|()
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|name
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showTime
operator|&&
name|cell
operator|.
name|hasTime
argument_list|()
condition|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|cell
operator|.
name|getTime
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showDate
operator|&&
name|cell
operator|.
name|hasDate
argument_list|()
condition|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|cell
operator|.
name|getDate
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showRoom
operator|&&
name|cell
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|String
name|room
range|:
name|cell
operator|.
name|getRooms
argument_list|()
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|room
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showInstructor
operator|&&
name|cell
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|String
name|instructor
range|:
name|cell
operator|.
name|getInstructors
argument_list|()
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|instructor
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showPreference
operator|&&
name|cell
operator|.
name|hasPreference
argument_list|()
condition|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|cell
operator|.
name|getPreference
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\<[^>]*>"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|width
return|;
block|}
specifier|protected
name|int
name|pageWidth
parameter_list|(
name|FilterInterface
name|filter
parameter_list|,
specifier|final
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|weekOffset
parameter_list|)
block|{
name|int
name|displayMode
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|hasDay
index|[]
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
name|days
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
if|if
condition|(
name|days
operator|!=
literal|null
operator|&&
name|days
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|days
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|days
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|int
name|nrTimes
init|=
literal|20
decl_stmt|;
name|int
name|startSlot
init|=
literal|90
decl_stmt|;
name|int
name|step
init|=
literal|6
decl_stmt|;
name|String
index|[]
name|times
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"times"
argument_list|,
literal|"90|222|6"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
name|times
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|startSlot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|step
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|nrTimes
operator|=
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|1
index|]
argument_list|)
operator|-
name|startSlot
operator|)
operator|/
name|step
expr_stmt|;
block|}
name|int
name|endSlot
init|=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
decl_stmt|;
name|boolean
name|showPreferences
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showPreferences"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showInstructors
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showInstructors"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showTimes
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showTimes"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showRoom
init|=
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"resource"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showDate
init|=
literal|"-100"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"weeks"
argument_list|)
argument_list|)
decl_stmt|;
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getSmallFont
argument_list|()
decl_stmt|;
name|int
name|nrColumns
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|nrColumns
operator|+=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|float
name|widthPerSlot
init|=
literal|50f
operator|/
name|step
decl_stmt|;
name|float
name|widthPerColumn
init|=
literal|50f
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|float
name|textWidth
init|=
name|textWidth
argument_list|(
name|font
argument_list|,
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
operator|+
literal|10f
decl_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|widthPerSlot
operator|=
name|Math
operator|.
name|max
argument_list|(
name|widthPerSlot
argument_list|,
name|textWidth
operator|/
operator|(
name|stop
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|widthPerColumn
operator|=
name|Math
operator|.
name|max
argument_list|(
name|widthPerColumn
argument_list|,
name|textWidth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|displayMode
operator|==
literal|0
condition|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|sHeaderWidth
operator|+
name|step
operator|*
name|nrTimes
operator|*
name|widthPerSlot
argument_list|)
return|;
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|2
condition|)
block|{
return|return
name|Math
operator|.
name|round
argument_list|(
name|sHeaderWidth
operator|+
name|nrColumns
operator|*
name|widthPerColumn
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
literal|1500
argument_list|,
name|Math
operator|.
name|round
argument_list|(
name|sHeaderWidth
operator|+
name|step
operator|*
name|nrTimes
operator|*
name|widthPerSlot
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|pageHeight
parameter_list|(
name|FilterInterface
name|filter
parameter_list|,
specifier|final
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|weekOffset
parameter_list|,
name|boolean
name|showHeader
parameter_list|)
block|{
name|int
name|displayMode
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|hasDay
index|[]
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
name|days
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
if|if
condition|(
name|days
operator|!=
literal|null
operator|&&
name|days
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|days
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|days
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|int
name|nrTimes
init|=
literal|20
decl_stmt|;
name|int
name|startSlot
init|=
literal|90
decl_stmt|;
name|int
name|step
init|=
literal|6
decl_stmt|;
name|String
index|[]
name|times
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"times"
argument_list|,
literal|"90|222|6"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
name|times
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|startSlot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|step
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|nrTimes
operator|=
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|1
index|]
argument_list|)
operator|-
name|startSlot
operator|)
operator|/
name|step
expr_stmt|;
block|}
name|String
name|comment
init|=
name|getComment
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayMode
operator|==
literal|0
condition|)
block|{
name|int
name|headerLines
init|=
operator|(
name|showHeader
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|int
name|dayLines
init|=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
operator|&&
name|nrLines
operator|<
name|dayLines
condition|)
name|nrLines
operator|=
name|dayLines
expr_stmt|;
block|}
return|return
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|1
return|;
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|1
condition|)
block|{
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|nrLines
operator|+=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
return|return
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
return|;
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|2
condition|)
block|{
name|int
name|linesPerTime
init|=
literal|2
decl_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
return|return
operator|(
name|headerLines
operator|+
name|linesPerTime
operator|*
name|nrTimes
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
return|;
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|3
condition|)
block|{
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|hasDay
index|[
name|day
index|]
operator|&&
name|model
operator|.
name|hasDate
argument_list|(
name|day
argument_list|,
name|date
argument_list|)
condition|)
block|{
name|nrLines
operator|+=
name|model
operator|.
name|getNrDateLines
argument_list|(
name|day
argument_list|,
name|date
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
return|return
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
return|;
block|}
return|return
literal|0
return|;
block|}
specifier|protected
specifier|static
class|class
name|Meeting
extends|extends
name|P
block|{
specifier|private
name|TimetableGridCell
name|iCell
decl_stmt|;
specifier|private
name|P
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|;
specifier|private
name|Meeting
parameter_list|(
name|TimetableGridCell
name|cell
parameter_list|,
name|boolean
name|showRoom
parameter_list|,
name|boolean
name|showInstructor
parameter_list|,
name|boolean
name|showTime
parameter_list|,
name|boolean
name|showPreference
parameter_list|,
name|boolean
name|showDate
parameter_list|)
block|{
name|super
argument_list|(
literal|"meeting"
argument_list|)
expr_stmt|;
name|iCell
operator|=
name|cell
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasBackground
argument_list|()
condition|)
name|setBackgroundColor
argument_list|(
name|cell
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|P
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setHeight
argument_list|(
name|sLineHeight
operator|*
name|cell
operator|.
name|getNrNames
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setText
argument_list|(
name|cell
operator|.
name|getName
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|isItalics
argument_list|()
condition|)
name|iHeader
operator|.
name|setItalics
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iHeader
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iFooter
operator|=
operator|new
name|P
argument_list|(
literal|"footer"
argument_list|)
expr_stmt|;
name|String
name|notes
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|showTime
operator|&&
name|cell
operator|.
name|hasTime
argument_list|()
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|cell
operator|.
name|getTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|showDate
operator|&&
name|cell
operator|.
name|hasDate
argument_list|()
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|cell
operator|.
name|getDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|showRoom
operator|&&
name|cell
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|cell
operator|.
name|getRoom
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showInstructor
operator|&&
name|cell
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|cell
operator|.
name|getInstructor
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showPreference
operator|&&
name|cell
operator|.
name|hasPreference
argument_list|()
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|cell
operator|.
name|getPreference
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\\<[^>]*>"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setText
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iFooter
argument_list|,
literal|0
argument_list|,
name|iHeader
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
comment|// setText(cell.getName("\n") + "\n" + notes);
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHeight
parameter_list|(
name|int
name|height
parameter_list|)
block|{
name|super
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setHeight
argument_list|(
name|height
operator|-
name|iHeader
operator|.
name|getHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWidth
parameter_list|(
name|int
name|width
parameter_list|)
block|{
name|super
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setWidth
argument_list|(
name|width
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimetableGridCell
name|getCell
parameter_list|()
block|{
return|return
name|iCell
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|Background
extends|extends
name|P
block|{
specifier|private
name|TimetableGridBackground
name|iBackground
decl_stmt|;
specifier|public
name|Background
parameter_list|(
name|TimetableGridBackground
name|background
parameter_list|)
block|{
name|super
argument_list|(
literal|"background"
argument_list|)
expr_stmt|;
name|iBackground
operator|=
name|background
expr_stmt|;
if|if
condition|(
name|background
operator|.
name|hasBackground
argument_list|()
condition|)
name|setBackgroundColor
argument_list|(
name|background
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimetableGridBackground
name|getBackground
parameter_list|()
block|{
return|return
name|iBackground
return|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|getComment
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|", "
operator|+
name|sUtilizationFormat
operator|.
name|format
argument_list|(
name|model
operator|.
name|getUtilization
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
if|else if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|>=
literal|2
condition|)
block|{
return|return
literal|"("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|protected
specifier|static
name|Date
name|getDate
parameter_list|(
name|Date
name|firstDate
parameter_list|,
name|int
name|date
parameter_list|)
block|{
name|Date
name|ret
init|=
operator|new
name|Date
argument_list|(
name|firstDate
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setDate
argument_list|(
name|ret
operator|.
name|getDate
argument_list|()
operator|+
name|date
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
name|String
name|slot2time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
block|{
if|if
condition|(
name|slot
operator|==
literal|0
condition|)
return|return
name|CONSTANTS
operator|.
name|timeMidnight
argument_list|()
return|;
if|if
condition|(
name|slot
operator|==
literal|144
condition|)
return|return
name|CONSTANTS
operator|.
name|timeNoon
argument_list|()
return|;
if|if
condition|(
name|slot
operator|==
literal|288
condition|)
return|return
name|CONSTANTS
operator|.
name|timeMidnightEnd
argument_list|()
return|;
block|}
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
literal|" "
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
name|CONSTANTS
operator|.
name|timeAm
argument_list|()
else|:
name|h
operator|>=
literal|12
condition|?
name|CONSTANTS
operator|.
name|timePm
argument_list|()
else|:
name|CONSTANTS
operator|.
name|timeAm
argument_list|()
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
block|}
end_class

end_unit

