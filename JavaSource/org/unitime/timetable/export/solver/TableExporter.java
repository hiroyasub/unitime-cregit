begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|F
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|FilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|FilterInterface
operator|.
name|FilterParameterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TableExporter
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|void
name|fillInFilter
parameter_list|(
name|FilterInterface
name|filter
parameter_list|,
name|ExportHelper
name|helper
parameter_list|)
block|{
for|for
control|(
name|FilterParameterInterface
name|parameter
range|:
name|filter
operator|.
name|getParameters
argument_list|()
control|)
block|{
if|if
condition|(
name|parameter
operator|.
name|isMultiSelect
argument_list|()
condition|)
block|{
name|parameter
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
index|[]
name|values
init|=
name|helper
operator|.
name|getParameterValues
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|v
range|:
name|values
control|)
name|parameter
operator|.
name|setValue
argument_list|(
operator|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|v
argument_list|)
expr_stmt|;
else|else
name|parameter
operator|.
name|setValue
argument_list|(
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|value
init|=
name|helper
operator|.
name|getParameter
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
name|parameter
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
name|parameter
operator|.
name|setValue
argument_list|(
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|sort
parameter_list|(
name|TableInterface
name|table
parameter_list|,
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|sortParameter
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortParameter
operator|==
literal|null
operator|||
name|sortParameter
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|int
name|sort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortParameter
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|==
literal|0
condition|)
return|return;
specifier|final
name|int
name|column
init|=
operator|(
name|sort
operator|>
literal|0
condition|?
name|sort
operator|-
literal|1
else|:
operator|-
name|sort
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|boolean
name|asc
init|=
operator|(
name|sort
operator|>
literal|0
operator|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getRows
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableInterface
operator|.
name|TableRowInterface
name|r1
parameter_list|,
name|TableInterface
operator|.
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
operator|(
name|asc
condition|?
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
name|column
argument_list|,
literal|true
argument_list|)
else|:
name|r2
operator|.
name|compareTo
argument_list|(
name|r1
argument_list|,
name|column
argument_list|,
literal|true
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printTableCSV
parameter_list|(
name|TableInterface
name|table
parameter_list|,
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|sort
argument_list|(
name|table
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|hasName
argument_list|()
condition|)
name|out
operator|.
name|printLine
argument_list|(
name|table
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|table
operator|.
name|getHeader
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|header
index|[
name|i
index|]
operator|=
name|table
operator|.
name|getHeader
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|TableInterface
operator|.
name|TableRowInterface
name|row
range|:
name|table
operator|.
name|getRows
argument_list|()
control|)
block|{
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
name|row
operator|.
name|getNrCells
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row
operator|.
name|getNrCells
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|line
index|[
name|i
index|]
operator|=
name|convertCSV
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|hasColumnDescriptions
argument_list|()
condition|)
block|{
name|out
operator|.
name|printLine
argument_list|()
expr_stmt|;
for|for
control|(
name|TableInterface
operator|.
name|TableHeaderIterface
name|h
range|:
name|table
operator|.
name|getHeader
argument_list|()
control|)
if|if
condition|(
name|h
operator|.
name|hasDescription
argument_list|()
condition|)
name|out
operator|.
name|printLine
argument_list|(
name|h
operator|.
name|getName
argument_list|()
argument_list|,
name|h
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|String
name|convertCSV
parameter_list|(
name|TableInterface
operator|.
name|TableCellInterface
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellMultiLine
condition|)
block|{
name|TableInterface
operator|.
name|TableCellMultiLine
name|history
init|=
operator|(
name|TableInterface
operator|.
name|TableCellMultiLine
operator|)
name|cell
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|history
operator|.
name|getNrChunks
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|"\n"
expr_stmt|;
name|ret
operator|+=
name|convertCSV
argument_list|(
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellItems
condition|)
block|{
name|TableInterface
operator|.
name|TableCellItems
name|items
init|=
operator|(
name|TableInterface
operator|.
name|TableCellItems
operator|)
name|cell
decl_stmt|;
return|return
name|items
operator|.
name|getFormattedValue
argument_list|(
literal|"\n"
argument_list|)
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|cell
decl_stmt|;
return|return
name|rooms
operator|.
name|getValue
argument_list|(
literal|"\n"
argument_list|)
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellClassName
condition|)
block|{
name|TableInterface
operator|.
name|TableCellClassName
name|names
init|=
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|cell
decl_stmt|;
name|String
name|ret
init|=
name|cell
operator|.
name|getFormattedValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|hasAlternatives
argument_list|()
condition|)
for|for
control|(
name|String
name|alternative
range|:
name|names
operator|.
name|getAlternatives
argument_list|()
control|)
name|ret
operator|+=
literal|"\n"
operator|+
name|alternative
expr_stmt|;
return|return
name|ret
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellChange
condition|)
block|{
name|TableInterface
operator|.
name|TableCellChange
name|change
init|=
operator|(
name|TableInterface
operator|.
name|TableCellChange
operator|)
name|cell
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|compareTo
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|+=
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
expr_stmt|;
name|ret
operator|+=
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|getFormattedValue
argument_list|()
return|;
block|}
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ret
operator|+=
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|+=
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
expr_stmt|;
name|ret
operator|+=
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
name|ret
operator|+=
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|getFormattedValue
argument_list|()
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|" \u2192 "
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ret
operator|+=
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getSecond
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ret
operator|+=
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
expr_stmt|;
name|ret
operator|+=
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
name|ret
operator|+=
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|change
operator|.
name|getSecond
argument_list|()
operator|.
name|getFormattedValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
return|return
name|cell
operator|.
name|getFormattedValue
argument_list|()
return|;
block|}
specifier|protected
name|void
name|printTablePDF
parameter_list|(
name|TableInterface
name|table
parameter_list|,
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|sort
argument_list|(
name|table
argument_list|,
name|helper
argument_list|)
expr_stmt|;
name|PDFPrinter
name|out
init|=
operator|new
name|PDFPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|table
operator|.
name|getHeader
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getHeader
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|header
index|[
name|i
index|]
operator|=
name|table
operator|.
name|getHeader
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|TableInterface
operator|.
name|TableRowInterface
name|row
range|:
name|table
operator|.
name|getRows
argument_list|()
control|)
block|{
name|PDFPrinter
operator|.
name|A
index|[]
name|line
init|=
operator|new
name|PDFPrinter
operator|.
name|A
index|[
name|row
operator|.
name|getNrCells
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row
operator|.
name|getNrCells
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|line
index|[
name|i
index|]
operator|=
name|convertPDF
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|PDFPrinter
operator|.
name|A
name|convertPDF
parameter_list|(
name|TableInterface
operator|.
name|TableCellInterface
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellMultiLine
condition|)
block|{
name|TableInterface
operator|.
name|TableCellMultiLine
name|history
init|=
operator|(
name|TableInterface
operator|.
name|TableCellMultiLine
operator|)
name|cell
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|history
operator|.
name|getNrChunks
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|TableInterface
operator|.
name|TableCellInterface
name|chunk
init|=
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunk
operator|instanceof
name|TableInterface
operator|.
name|TableCellChange
condition|)
block|{
name|TableInterface
operator|.
name|TableCellChange
name|change
init|=
operator|(
name|TableInterface
operator|.
name|TableCellChange
operator|)
name|chunk
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|compareTo
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
name|b
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|INLINE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
name|b
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|hasColor
argument_list|()
condition|)
name|b
operator|.
name|setColor
argument_list|(
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
name|b
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|INLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
condition|)
block|{
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColor
argument_list|(
literal|"ff0000"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
name|b
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
name|b
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|,
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|hasColor
argument_list|()
condition|)
name|c
operator|.
name|setColor
argument_list|(
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|b
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
literal|" \u2192 "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColor
argument_list|(
literal|"ff0000"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getSecond
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|j
operator|>
literal|0
condition|)
name|b
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
name|b
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|,
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|.
name|hasColor
argument_list|()
condition|)
name|c
operator|.
name|setColor
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|chunk
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|chunk
operator|.
name|hasColor
argument_list|()
condition|)
name|b
operator|.
name|setColor
argument_list|(
name|chunk
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|chunk
operator|.
name|isUnderlined
argument_list|()
condition|)
name|b
operator|.
name|set
argument_list|(
name|F
operator|.
name|UNDERLINE
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|a
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellMulti
condition|)
block|{
name|TableInterface
operator|.
name|TableCellMulti
name|multi
init|=
operator|(
name|TableInterface
operator|.
name|TableCellMulti
operator|)
name|cell
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
name|a
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|INLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasColor
argument_list|()
condition|)
name|a
operator|.
name|setColor
argument_list|(
name|cell
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|multi
operator|.
name|getNrChunks
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|multi
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|multi
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|hasColor
argument_list|()
condition|)
name|b
operator|.
name|setColor
argument_list|(
name|multi
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellItems
condition|)
block|{
name|TableInterface
operator|.
name|TableCellItems
name|items
init|=
operator|(
name|TableInterface
operator|.
name|TableCellItems
operator|)
name|cell
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasColor
argument_list|()
condition|)
name|a
operator|.
name|setColor
argument_list|(
name|cell
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|getNrItems
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|items
operator|.
name|getFormattedValue
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|setColor
argument_list|(
name|items
operator|.
name|getColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|cell
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasColor
argument_list|()
condition|)
name|a
operator|.
name|setColor
argument_list|(
name|cell
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellClassName
condition|)
block|{
name|TableInterface
operator|.
name|TableCellClassName
name|names
init|=
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|cell
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|cell
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasColor
argument_list|()
condition|)
name|b
operator|.
name|setColor
argument_list|(
name|cell
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|names
operator|.
name|hasAlternatives
argument_list|()
condition|)
for|for
control|(
name|String
name|name
range|:
name|names
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
name|PDFPrinter
operator|.
name|A
name|alternative
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
literal|"  "
operator|+
name|name
argument_list|)
decl_stmt|;
name|alternative
operator|.
name|setColor
argument_list|(
literal|"777777"
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|alternative
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellChange
condition|)
block|{
name|TableInterface
operator|.
name|TableCellChange
name|change
init|=
operator|(
name|TableInterface
operator|.
name|TableCellChange
operator|)
name|cell
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|compareTo
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getFirst
argument_list|()
decl_stmt|;
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
name|a
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|INLINE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
else|else
block|{
return|return
name|convertPDF
argument_list|(
name|change
operator|.
name|getFirst
argument_list|()
argument_list|)
return|;
block|}
block|}
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|()
decl_stmt|;
name|a
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|INLINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
condition|)
block|{
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|setColor
argument_list|(
literal|"ff0000"
argument_list|)
expr_stmt|;
name|b
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getFirst
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|,
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a
operator|.
name|add
argument_list|(
name|convertPDF
argument_list|(
name|change
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|a
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
literal|" \u2192 "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
name|PDFPrinter
operator|.
name|A
name|c
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setColor
argument_list|(
literal|"ff0000"
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|change
operator|.
name|getSecond
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PDFPrinter
operator|.
name|A
name|b
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|b
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rooms
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|0
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
argument_list|,
name|PDFPrinter
operator|.
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|a
operator|.
name|add
argument_list|(
name|convertPDF
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|a
return|;
block|}
name|PDFPrinter
operator|.
name|A
name|a
init|=
operator|new
name|PDFPrinter
operator|.
name|A
argument_list|(
name|cell
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasColor
argument_list|()
condition|)
name|a
operator|.
name|setColor
argument_list|(
name|cell
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
end_class

end_unit

