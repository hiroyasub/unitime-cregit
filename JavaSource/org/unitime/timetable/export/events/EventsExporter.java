begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|ResourceLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventComparator
operator|.
name|EventMeetingSortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|EventsExporter
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|EventLookupRpcRequest
name|request
init|=
operator|new
name|EventLookupRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ext
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceExternalId
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Resource type not provided, please set the type parameter."
argument_list|)
throw|;
name|request
operator|.
name|setResourceType
argument_list|(
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilterRpcRequest
name|eventFilter
init|=
operator|new
name|EventFilterRpcRequest
argument_list|()
decl_stmt|;
name|eventFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEventFilter
argument_list|(
name|eventFilter
argument_list|)
expr_stmt|;
name|RoomFilterRpcRequest
name|roomFilter
init|=
operator|new
name|RoomFilterRpcRequest
argument_list|()
decl_stmt|;
name|roomFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"e:text"
argument_list|)
condition|)
block|{
name|eventFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"e:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"e:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|eventFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|roomFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|roomFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setRoomFilter
argument_list|(
name|roomFilter
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Events
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
operator|&&
operator|!
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
condition|)
block|{
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|EventLookupSchedule
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|==
literal|null
condition|)
block|{
name|roles
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStudents
argument_list|)
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
literal|"Student"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupInstructors
argument_list|)
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
literal|"Instructor"
argument_list|)
expr_stmt|;
name|roles
operator|.
name|add
argument_list|(
literal|"Coordinator"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupEventContacts
argument_list|)
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
literal|"Contact"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|roles
operator|.
name|size
argument_list|()
operator|<
literal|4
condition|)
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|setOptions
argument_list|(
literal|"role"
argument_list|,
name|roles
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStudents
argument_list|)
condition|)
block|{
name|roles
operator|.
name|remove
argument_list|(
literal|"Student"
argument_list|)
expr_stmt|;
name|roles
operator|.
name|remove
argument_list|(
literal|"student"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupInstructors
argument_list|)
condition|)
block|{
name|roles
operator|.
name|remove
argument_list|(
literal|"Instructor"
argument_list|)
expr_stmt|;
name|roles
operator|.
name|remove
argument_list|(
literal|"instructor"
argument_list|)
expr_stmt|;
name|roles
operator|.
name|remove
argument_list|(
literal|"Coordinator"
argument_list|)
expr_stmt|;
name|roles
operator|.
name|remove
argument_list|(
literal|"coordinator"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CanLookupStudents
argument_list|)
condition|)
block|{
name|roles
operator|.
name|remove
argument_list|(
literal|"Contact"
argument_list|)
expr_stmt|;
name|roles
operator|.
name|remove
argument_list|(
literal|"contact"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|ROOM
operator|&&
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|PERSON
operator|&&
name|request
operator|.
name|getResourceId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|resource
init|=
operator|new
name|ResourceLookupBackend
argument_list|()
operator|.
name|findResource
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getResourceType
argument_list|()
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceId
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
init|=
operator|new
name|EventLookupBackend
argument_list|()
operator|.
name|findEvents
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|String
name|sortBy
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
name|EventMeetingSortBy
name|sort
init|=
literal|null
decl_stmt|;
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|sortBy
operator|==
literal|null
operator|||
name|sortBy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sort
operator|=
literal|null
expr_stmt|;
name|asc
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|asc
operator|=
literal|true
expr_stmt|;
name|sort
operator|=
name|EventMeetingSortBy
operator|.
name|values
argument_list|()
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortBy
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|asc
operator|=
literal|false
expr_stmt|;
name|sort
operator|=
name|EventMeetingSortBy
operator|.
name|values
argument_list|()
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortBy
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
index|]
expr_stmt|;
block|}
else|else
block|{
name|asc
operator|=
literal|true
expr_stmt|;
name|sort
operator|=
operator|(
name|sortBy
operator|==
literal|null
condition|?
literal|null
else|:
name|EventMeetingSortBy
operator|.
name|values
argument_list|()
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|sortBy
argument_list|)
index|]
operator|)
expr_stmt|;
block|}
name|int
name|eventCookieFlags
init|=
operator|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"flags"
argument_list|)
operator|==
literal|null
condition|?
name|EventInterface
operator|.
name|sDefaultEventFlags
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventLookupContact
argument_list|)
condition|)
block|{
name|eventCookieFlags
operator|=
name|EventFlag
operator|.
name|SHOW_MAIN_CONTACT
operator|.
name|clear
argument_list|(
name|eventCookieFlags
argument_list|)
expr_stmt|;
name|eventCookieFlags
operator|=
name|EventFlag
operator|.
name|SHOW_LAST_CHANGE
operator|.
name|clear
argument_list|(
name|eventCookieFlags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|context
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EventCanViewMeetingContacts
argument_list|)
condition|)
block|{
name|eventCookieFlags
operator|=
name|EventFlag
operator|.
name|SHOW_MEETING_CONTACTS
operator|.
name|clear
argument_list|(
name|eventCookieFlags
argument_list|)
expr_stmt|;
block|}
name|eventCookieFlags
operator|=
name|EventFlag
operator|.
name|SHOW_SECTION
operator|.
name|set
argument_list|(
name|eventCookieFlags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"1"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"ua"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|EventInterface
argument_list|>
name|i
init|=
name|events
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EventInterface
name|event
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|print
argument_list|(
name|helper
argument_list|,
name|request
argument_list|,
name|events
argument_list|,
name|eventCookieFlags
argument_list|,
name|sort
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|EventLookupRpcRequest
name|request
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|int
name|eventCookieFlags
parameter_list|,
name|EventMeetingSortBy
name|sort
parameter_list|,
name|boolean
name|asc
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
name|void
name|hideColumns
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|int
name|eventCookieFlags
parameter_list|)
block|{
for|for
control|(
name|EventFlag
name|flag
range|:
name|EventFlag
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|flag
operator|.
name|in
argument_list|(
name|eventCookieFlags
argument_list|)
condition|)
name|hideColumn
argument_list|(
name|out
argument_list|,
name|events
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasSection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|getSection
argument_list|(
name|event
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasSection
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasSection
condition|)
name|hideColumn
argument_list|(
name|out
argument_list|,
name|events
argument_list|,
name|EventFlag
operator|.
name|SHOW_SECTION
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hideColumn
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|EventFlag
name|flag
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|sort
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
specifier|final
name|EventMeetingSortBy
name|sort
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|events
argument_list|,
operator|new
name|ReverseComparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|e1
parameter_list|,
name|EventInterface
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareEvents
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|sort
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i1
init|=
name|e1
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|e2
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|,
name|sort
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|i1
operator|=
name|e1
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|i2
operator|=
name|e2
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
operator|!
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|!
name|asc
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|EventMeeting
argument_list|>
name|meetings
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
specifier|final
name|EventMeetingSortBy
name|sort
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|EventMeeting
argument_list|>
name|meetings
init|=
operator|new
name|TreeSet
argument_list|<
name|EventMeeting
argument_list|>
argument_list|(
operator|new
name|ReverseComparator
argument_list|<
name|EventMeeting
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventMeeting
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventMeeting
name|m1
parameter_list|,
name|EventMeeting
name|m2
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareEvents
argument_list|(
name|m1
operator|.
name|getEvent
argument_list|()
argument_list|,
name|m2
operator|.
name|getEvent
argument_list|()
argument_list|,
name|sort
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|m1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|m2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|sort
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|m1
operator|.
name|getEvent
argument_list|()
argument_list|,
name|m2
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|m1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|m2
operator|.
name|getMeeting
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
return|;
block|}
block|}
argument_list|,
operator|!
name|asc
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
name|meetings
operator|.
name|add
argument_list|(
operator|new
name|EventMeeting
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|meetings
return|;
block|}
specifier|public
specifier|static
class|class
name|EventMeeting
implements|implements
name|Comparable
argument_list|<
name|EventMeeting
argument_list|>
block|{
specifier|private
name|EventInterface
name|iEvent
decl_stmt|;
specifier|private
name|MeetingInterface
name|iMeeting
decl_stmt|;
specifier|private
name|EventMeeting
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|MeetingInterface
name|getMeeting
parameter_list|()
block|{
return|return
name|iMeeting
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|EventMeeting
name|m
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getEvent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|getMeeting
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getMeeting
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|=
name|event
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|cn
range|:
name|event
operator|.
name|getCourseNames
argument_list|()
control|)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
name|cn
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|+=
literal|"\n  "
operator|+
name|cn
expr_stmt|;
block|}
else|else
block|{
name|name
operator|+=
literal|"\n"
operator|+
name|cn
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
else|else
block|{
return|return
name|event
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getTitle
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|hasCourseTitles
argument_list|()
condition|)
block|{
name|String
name|title
init|=
literal|""
decl_stmt|;
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|ct
range|:
name|event
operator|.
name|getCourseTitles
argument_list|()
control|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|!
name|last
operator|.
name|isEmpty
argument_list|()
operator|&&
name|last
operator|.
name|equals
argument_list|(
name|ct
argument_list|)
condition|)
name|ct
operator|=
literal|""
expr_stmt|;
else|else
name|last
operator|=
name|ct
expr_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|title
operator|+=
name|ct
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|title
operator|+=
literal|"\n  "
operator|+
name|ct
expr_stmt|;
block|}
else|else
block|{
name|title
operator|+=
literal|"\n"
operator|+
name|ct
expr_stmt|;
block|}
block|}
return|return
name|title
return|;
block|}
else|else
block|{
return|return
literal|""
return|;
block|}
block|}
specifier|public
name|String
name|getSection
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
for|for
control|(
name|String
name|ex
range|:
name|event
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|+=
name|ex
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|section
operator|+=
literal|"\n  "
operator|+
name|ex
expr_stmt|;
block|}
else|else
block|{
name|section
operator|+=
literal|"\n"
operator|+
name|ex
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|event
operator|.
name|hasSectionNumber
argument_list|()
condition|)
block|{
name|section
operator|=
name|event
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
else|else
block|{
return|return
name|event
operator|.
name|getSectionNumber
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReverseComparator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|T
argument_list|>
block|{
specifier|private
name|Comparator
argument_list|<
name|T
argument_list|>
name|iComparator
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iReverse
decl_stmt|;
specifier|public
name|ReverseComparator
parameter_list|(
name|Comparator
argument_list|<
name|T
argument_list|>
name|comparator
parameter_list|,
name|boolean
name|reverse
parameter_list|)
block|{
name|iComparator
operator|=
name|comparator
expr_stmt|;
name|iReverse
operator|=
name|reverse
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
if|if
condition|(
name|iReverse
condition|)
return|return
name|iComparator
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|o1
argument_list|)
return|;
else|else
return|return
name|iComparator
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

