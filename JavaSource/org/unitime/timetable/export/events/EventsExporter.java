begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventRights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|SimpleEventRights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventComparator
operator|.
name|EventMeetingSortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|EventsExporter
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No academic session provided."
argument_list|)
throw|;
name|EventLookupRpcRequest
name|request
init|=
operator|new
name|EventLookupRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ext
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceExternalId
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setResourceType
argument_list|(
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilterRpcRequest
name|eventFilter
init|=
operator|new
name|EventFilterRpcRequest
argument_list|()
decl_stmt|;
name|eventFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEventFilter
argument_list|(
name|eventFilter
argument_list|)
expr_stmt|;
name|RoomFilterRpcRequest
name|roomFilter
init|=
operator|new
name|RoomFilterRpcRequest
argument_list|()
decl_stmt|;
name|roomFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|boolean
name|hasRoomFilter
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"e:text"
argument_list|)
condition|)
block|{
name|eventFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"e:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"e:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|eventFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|hasRoomFilter
operator|=
literal|true
expr_stmt|;
name|roomFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
name|hasRoomFilter
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|roomFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasRoomFilter
condition|)
name|request
operator|.
name|setRoomFilter
argument_list|(
name|roomFilter
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
operator|new
name|User
argument_list|()
expr_stmt|;
name|u
operator|.
name|setId
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|eventFilter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|roomFilter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|String
name|role
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|eventFilter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|roomFilter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
block|}
name|EventRights
name|rights
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|checkRights
argument_list|()
condition|)
block|{
name|rights
operator|=
operator|new
name|SimpleEventRights
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
literal|false
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|rights
operator|.
name|checkAccess
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
operator|&&
operator|!
name|rights
operator|.
name|canSeeSchedule
argument_list|(
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
condition|)
throw|throw
name|rights
operator|.
name|getException
argument_list|()
throw|;
block|}
else|else
block|{
name|rights
operator|=
operator|new
name|SimpleEventRights
argument_list|(
name|u
argument_list|,
literal|false
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
init|=
operator|new
name|EventLookupBackend
argument_list|()
operator|.
name|findEvents
argument_list|(
name|request
argument_list|,
name|rights
argument_list|)
decl_stmt|;
name|EventMeetingSortBy
name|sort
init|=
operator|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
operator|==
literal|null
condition|?
literal|null
else|:
name|EventMeetingSortBy
operator|.
name|values
argument_list|()
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
argument_list|)
index|]
operator|)
decl_stmt|;
name|int
name|eventCookieFlags
init|=
operator|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"flags"
argument_list|)
operator|==
literal|null
condition|?
name|EventInterface
operator|.
name|sDefaultEventFlags
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|rights
operator|.
name|canLookupContacts
argument_list|()
condition|)
name|eventCookieFlags
operator|=
name|EventFlag
operator|.
name|SHOW_MAIN_CONTACT
operator|.
name|clear
argument_list|(
name|eventCookieFlags
argument_list|)
expr_stmt|;
name|eventCookieFlags
operator|=
name|EventFlag
operator|.
name|SHOW_SECTION
operator|.
name|set
argument_list|(
name|eventCookieFlags
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|helper
argument_list|,
name|events
argument_list|,
name|eventCookieFlags
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|int
name|eventCookieFlags
parameter_list|,
name|EventMeetingSortBy
name|sort
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
name|boolean
name|checkRights
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|hideColumns
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|int
name|eventCookieFlags
parameter_list|)
block|{
for|for
control|(
name|EventFlag
name|flag
range|:
name|EventFlag
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|flag
operator|.
name|in
argument_list|(
name|eventCookieFlags
argument_list|)
condition|)
name|hideColumn
argument_list|(
name|out
argument_list|,
name|events
argument_list|,
name|flag
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasSection
init|=
literal|false
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
block|{
if|if
condition|(
name|getSection
argument_list|(
name|event
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|hasSection
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|hasSection
condition|)
name|hideColumn
argument_list|(
name|out
argument_list|,
name|events
argument_list|,
name|EventFlag
operator|.
name|SHOW_SECTION
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hideColumn
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|EventFlag
name|flag
parameter_list|)
block|{
block|}
specifier|protected
name|void
name|sort
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
specifier|final
name|EventMeetingSortBy
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
block|{
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|meetings
init|=
name|event
operator|.
name|getMeetings
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
name|sorted
init|=
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MeetingInterface
name|m1
parameter_list|,
name|MeetingInterface
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|,
name|sort
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
expr_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
else|:
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|m1
argument_list|,
name|m2
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|sorted
operator|.
name|addAll
argument_list|(
name|meetings
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMeetings
argument_list|(
name|sorted
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|events
argument_list|,
operator|new
name|Comparator
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventInterface
name|e1
parameter_list|,
name|EventInterface
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareEvents
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|,
name|sort
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|Iterator
argument_list|<
name|MeetingInterface
argument_list|>
name|i1
init|=
name|e1
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|,
name|i2
init|=
name|e2
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|,
name|i2
operator|.
name|next
argument_list|()
argument_list|,
name|sort
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
operator|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|?
name|i2
operator|.
name|hasNext
argument_list|()
condition|?
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
else|:
literal|1
else|:
name|i2
operator|.
name|hasNext
argument_list|()
condition|?
operator|-
literal|1
else|:
name|e1
operator|.
name|compareTo
argument_list|(
name|e2
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|events
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|EventMeeting
argument_list|>
name|meetings
parameter_list|(
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
specifier|final
name|EventMeetingSortBy
name|sort
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|EventMeeting
argument_list|>
name|meetings
init|=
operator|new
name|TreeSet
argument_list|<
name|EventMeeting
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|EventMeeting
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EventMeeting
name|m1
parameter_list|,
name|EventMeeting
name|m2
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|EventComparator
operator|.
name|compareEvents
argument_list|(
name|m1
operator|.
name|getEvent
argument_list|()
argument_list|,
name|m2
operator|.
name|getEvent
argument_list|()
argument_list|,
name|sort
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareMeetings
argument_list|(
name|m1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|m2
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|sort
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|m1
operator|.
name|getEvent
argument_list|()
argument_list|,
name|m2
operator|.
name|getEvent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|EventComparator
operator|.
name|compareFallback
argument_list|(
name|m1
operator|.
name|getMeeting
argument_list|()
argument_list|,
name|m2
operator|.
name|getMeeting
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
for|for
control|(
name|MeetingInterface
name|meeting
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
name|meetings
operator|.
name|add
argument_list|(
operator|new
name|EventMeeting
argument_list|(
name|event
argument_list|,
name|meeting
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|meetings
return|;
block|}
specifier|public
specifier|static
class|class
name|EventMeeting
implements|implements
name|Comparable
argument_list|<
name|EventMeeting
argument_list|>
block|{
specifier|private
name|EventInterface
name|iEvent
decl_stmt|;
specifier|private
name|MeetingInterface
name|iMeeting
decl_stmt|;
specifier|private
name|EventMeeting
parameter_list|(
name|EventInterface
name|event
parameter_list|,
name|MeetingInterface
name|meeting
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|EventInterface
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|MeetingInterface
name|getMeeting
parameter_list|()
block|{
return|return
name|iMeeting
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|EventMeeting
name|m
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getEvent
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|cmp
operator|==
literal|0
condition|?
name|getMeeting
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getMeeting
argument_list|()
argument_list|)
else|:
name|cmp
operator|)
return|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|=
name|event
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|cn
range|:
name|event
operator|.
name|getCourseNames
argument_list|()
control|)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
name|cn
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|name
operator|+=
literal|"\n  "
operator|+
name|cn
expr_stmt|;
block|}
else|else
block|{
name|name
operator|+=
literal|"\n"
operator|+
name|cn
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
else|else
block|{
return|return
name|event
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getSection
parameter_list|(
name|EventInterface
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|section
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
for|for
control|(
name|String
name|ex
range|:
name|event
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|+=
name|ex
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getInstruction
argument_list|()
operator|!=
literal|null
operator|||
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Course
condition|)
block|{
name|section
operator|+=
literal|"\n  "
operator|+
name|ex
expr_stmt|;
block|}
else|else
block|{
name|section
operator|+=
literal|"\n"
operator|+
name|ex
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|event
operator|.
name|hasSectionNumber
argument_list|()
condition|)
block|{
name|section
operator|=
name|event
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
else|else
block|{
return|return
name|event
operator|.
name|getSectionNumber
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

