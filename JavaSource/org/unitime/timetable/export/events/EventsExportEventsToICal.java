begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|events
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTimeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|EventComparator
operator|.
name|EventMeetingSortBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ApprovalStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SubjectAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|ICalVersion
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|ICalendar
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|component
operator|.
name|VEvent
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|io
operator|.
name|text
operator|.
name|ICalWriter
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|parameter
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Attendee
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|CalendarScale
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateEnd
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateStart
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateTimeStamp
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|ExceptionDates
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Organizer
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|RecurrenceId
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
operator|.
name|DayOfWeek
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
operator|.
name|Frequency
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:events.ics"
argument_list|)
specifier|public
class|class
name|EventsExportEventsToICal
extends|extends
name|EventsExporter
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"events.ics"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|EventLookupRpcRequest
name|request
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|,
name|int
name|eventCookieFlags
parameter_list|,
name|EventMeetingSortBy
name|sort
parameter_list|,
name|boolean
name|asc
parameter_list|)
throws|throws
name|IOException
block|{
name|helper
operator|.
name|setup
argument_list|(
literal|"text/calendar"
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ICalendar
name|ical
init|=
operator|new
name|ICalendar
argument_list|()
decl_stmt|;
name|ical
operator|.
name|setVersion
argument_list|(
name|ICalVersion
operator|.
name|V2_0
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setCalendarScale
argument_list|(
name|CalendarScale
operator|.
name|gregorian
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setMethod
argument_list|(
operator|new
name|Method
argument_list|(
literal|"PUBLISH"
argument_list|)
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-CALNAME"
argument_list|,
name|guessScheduleName
argument_list|(
name|helper
argument_list|,
name|request
argument_list|)
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-TIMEZONE"
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setProductId
argument_list|(
literal|"-//UniTime LLC/UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" Events//EN"
argument_list|)
expr_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
name|print
argument_list|(
name|ical
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|ICalWriter
name|writer
init|=
operator|new
name|ICalWriter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
name|ICalVersion
operator|.
name|V2_0
argument_list|)
decl_stmt|;
name|writer
operator|.
name|getTimezoneInfo
argument_list|()
operator|.
name|setDefaultTimeZone
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
name|ical
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|print
parameter_list|(
name|ICalendar
name|ical
parameter_list|,
name|EventInterface
name|event
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|print
argument_list|(
name|ical
argument_list|,
name|event
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|String
name|guessScheduleName
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|EventLookupRpcRequest
name|request
parameter_list|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|MESSAGES
operator|.
name|scheduleNameDefault
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
condition|)
block|{
name|name
operator|=
name|MESSAGES
operator|.
name|pagePersonalTimetable
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|MESSAGES
operator|.
name|scheduleNameForResource
argument_list|(
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|resource
init|=
name|getResourceName
argument_list|(
name|request
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|name
operator|=
name|MESSAGES
operator|.
name|scheduleNameForResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|else if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
name|ResourceType
operator|.
name|ROOM
condition|)
name|name
operator|=
name|CONSTANTS
operator|.
name|resourceType
argument_list|()
index|[
name|request
operator|.
name|getResourceType
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
expr_stmt|;
block|}
name|boolean
name|allSessions
init|=
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOption
argument_list|(
literal|"flag"
argument_list|)
operator|&&
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOptions
argument_list|(
literal|"flag"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"All Sessions"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allSessions
operator|&&
name|request
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|name
operator|=
name|MESSAGES
operator|.
name|scheduleNameForSession
argument_list|(
name|name
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getResourceName
parameter_list|(
name|EventLookupRpcRequest
name|request
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|ROOM
case|:
name|Location
name|location
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
return|return
name|location
operator|.
name|getDisplayName
argument_list|()
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabel
argument_list|()
else|:
name|location
operator|.
name|getDisplayName
argument_list|()
return|;
break|break;
case|case
name|SUBJECT
case|:
name|SubjectArea
name|subject
init|=
name|SubjectAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
return|return
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
return|;
break|break;
case|case
name|COURSE
case|:
name|CourseOffering
name|course
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
return|return
name|course
operator|.
name|getCourseName
argument_list|()
return|;
break|break;
case|case
name|CURRICULUM
case|:
name|Curriculum
name|curriculum
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculum
operator|!=
literal|null
condition|)
return|return
operator|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
operator|==
literal|null
condition|?
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
else|:
name|curriculum
operator|.
name|getAbbv
argument_list|()
operator|)
return|;
name|CurriculumClassification
name|clasf
init|=
name|CurriculumClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|!=
literal|null
condition|)
return|return
operator|(
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|==
literal|null
condition|?
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
else|:
name|clasf
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|)
operator|+
literal|" "
operator|+
operator|(
name|clasf
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
name|clasf
operator|.
name|getName
argument_list|()
operator|)
return|;
break|break;
case|case
name|DEPARTMENT
case|:
name|Department
name|department
init|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|!=
literal|null
condition|)
return|return
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
return|;
break|break;
case|case
name|GROUP
case|:
name|StudentGroup
name|group
init|=
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getResourceId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
return|return
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
return|;
break|break;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|hasOption
argument_list|(
literal|"room"
argument_list|)
condition|)
block|{
name|Location
name|location
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|request
operator|.
name|getEventFilter
argument_list|()
operator|.
name|getOption
argument_list|(
literal|"room"
argument_list|)
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
return|return
name|location
operator|.
name|getDisplayName
argument_list|()
operator|==
literal|null
condition|?
name|location
operator|.
name|getLabel
argument_list|()
else|:
name|location
operator|.
name|getDisplayName
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|print
parameter_list|(
name|ICalendar
name|ical
parameter_list|,
name|EventInterface
name|event
parameter_list|,
name|Status
name|status
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Unavailabile
condition|)
return|return
literal|false
return|;
name|TreeSet
argument_list|<
name|ICalendarMeeting
argument_list|>
name|meetings
init|=
operator|new
name|TreeSet
argument_list|<
name|ICalendarMeeting
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|days
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|hasMeetings
argument_list|()
condition|)
name|meetings
label|:
for|for
control|(
name|MeetingInterface
name|m
range|:
name|event
operator|.
name|getMeetings
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isArrangeHours
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|m
operator|.
name|getApprovalStatus
argument_list|()
operator|!=
name|ApprovalStatus
operator|.
name|Approved
operator|&&
name|m
operator|.
name|getApprovalStatus
argument_list|()
operator|!=
name|ApprovalStatus
operator|.
name|Pending
condition|)
continue|continue;
name|ICalendarMeeting
name|x
init|=
operator|new
name|ICalendarMeeting
argument_list|(
name|m
argument_list|,
name|status
argument_list|)
decl_stmt|;
for|for
control|(
name|ICalendarMeeting
name|icm
range|:
name|meetings
control|)
if|if
condition|(
name|icm
operator|.
name|merge
argument_list|(
name|x
argument_list|)
condition|)
continue|continue
name|meetings
continue|;
name|meetings
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|days
operator|.
name|add
argument_list|(
name|x
operator|.
name|getStart
argument_list|()
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meetings
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|ICalendarMeeting
name|first
init|=
name|meetings
operator|.
name|first
argument_list|()
decl_stmt|;
name|VEvent
name|master
init|=
operator|new
name|VEvent
argument_list|()
decl_stmt|;
name|master
operator|.
name|setDateStart
argument_list|(
name|first
operator|.
name|getDateStart
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|setDateEnd
argument_list|(
name|first
operator|.
name|getDateEnd
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|setLocation
argument_list|(
name|first
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|setStatus
argument_list|(
name|first
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|VEvent
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|VEvent
argument_list|>
argument_list|()
decl_stmt|;
name|events
operator|.
name|add
argument_list|(
name|master
argument_list|)
expr_stmt|;
if|if
condition|(
name|meetings
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// last day of the recurrence
name|DateTime
name|until
init|=
operator|new
name|DateTime
argument_list|(
name|meetings
operator|.
name|last
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|getYear
argument_list|()
argument_list|,
name|meetings
operator|.
name|last
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|getMonthOfYear
argument_list|()
argument_list|,
name|meetings
operator|.
name|last
argument_list|()
operator|.
name|getStart
argument_list|()
operator|.
name|getDayOfMonth
argument_list|()
argument_list|,
name|first
operator|.
name|getEnd
argument_list|()
operator|.
name|getHourOfDay
argument_list|()
argument_list|,
name|first
operator|.
name|getEnd
argument_list|()
operator|.
name|getMinuteOfHour
argument_list|()
argument_list|,
name|first
operator|.
name|getEnd
argument_list|()
operator|.
name|getSecondOfMinute
argument_list|()
argument_list|)
decl_stmt|;
comment|// count meeting days
name|int
name|nrMeetingDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DateTime
name|date
init|=
name|first
operator|.
name|getStart
argument_list|()
init|;
operator|!
name|date
operator|.
name|isAfter
argument_list|(
name|until
argument_list|)
condition|;
name|date
operator|=
name|date
operator|.
name|plusDays
argument_list|(
literal|1
argument_list|)
control|)
block|{
comment|// skip days of week with no meeting
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|date
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
condition|)
name|nrMeetingDays
operator|++
expr_stmt|;
block|}
comment|// make sure that there is enough meeting days to cover all meetings
while|while
condition|(
name|nrMeetingDays
operator|<
name|meetings
operator|.
name|size
argument_list|()
condition|)
block|{
name|until
operator|=
name|until
operator|.
name|plusDays
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|until
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
condition|)
name|nrMeetingDays
operator|++
expr_stmt|;
block|}
name|Recurrence
operator|.
name|Builder
name|recur
init|=
operator|new
name|Recurrence
operator|.
name|Builder
argument_list|(
name|Frequency
operator|.
name|WEEKLY
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|days
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|i
operator|.
name|next
argument_list|()
condition|)
block|{
case|case
name|DateTimeConstants
operator|.
name|MONDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|MONDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DateTimeConstants
operator|.
name|TUESDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|TUESDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DateTimeConstants
operator|.
name|WEDNESDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|WEDNESDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DateTimeConstants
operator|.
name|THURSDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|THURSDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DateTimeConstants
operator|.
name|FRIDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|FRIDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DateTimeConstants
operator|.
name|SATURDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|SATURDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|DateTimeConstants
operator|.
name|SUNDAY
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|SUNDAY
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|recur
operator|.
name|workweekStarts
argument_list|(
name|DayOfWeek
operator|.
name|MONDAY
argument_list|)
operator|.
name|until
argument_list|(
name|until
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
name|master
operator|.
name|setRecurrenceRule
argument_list|(
name|recur
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ExceptionDates
name|exdates
init|=
operator|new
name|ExceptionDates
argument_list|()
decl_stmt|;
comment|// for all dates till the last date
name|dates
label|:
for|for
control|(
name|DateTime
name|date
init|=
name|first
operator|.
name|getStart
argument_list|()
init|;
operator|!
name|date
operator|.
name|isAfter
argument_list|(
name|until
argument_list|)
condition|;
name|date
operator|=
name|date
operator|.
name|plusDays
argument_list|(
literal|1
argument_list|)
control|)
block|{
comment|// skip days of week with no meeting
if|if
condition|(
operator|!
name|days
operator|.
name|contains
argument_list|(
name|date
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// try to find a fully matching meeting
for|for
control|(
name|Iterator
argument_list|<
name|ICalendarMeeting
argument_list|>
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ICalendarMeeting
name|ics
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|getYear
argument_list|()
operator|==
name|ics
operator|.
name|getStart
argument_list|()
operator|.
name|getYear
argument_list|()
operator|&&
name|date
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|ics
operator|.
name|getStart
argument_list|()
operator|.
name|getDayOfYear
argument_list|()
operator|&&
name|first
operator|.
name|same
argument_list|(
name|ics
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|dates
continue|;
block|}
block|}
comment|// try to find a meeting that is on the same day
for|for
control|(
name|Iterator
argument_list|<
name|ICalendarMeeting
argument_list|>
name|i
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ICalendarMeeting
name|ics
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|.
name|getYear
argument_list|()
operator|==
name|ics
operator|.
name|getStart
argument_list|()
operator|.
name|getYear
argument_list|()
operator|&&
name|date
operator|.
name|getDayOfYear
argument_list|()
operator|==
name|ics
operator|.
name|getStart
argument_list|()
operator|.
name|getDayOfYear
argument_list|()
condition|)
block|{
name|VEvent
name|x
init|=
operator|new
name|VEvent
argument_list|()
decl_stmt|;
name|RecurrenceId
name|id
init|=
operator|new
name|RecurrenceId
argument_list|(
name|date
operator|.
name|toDate
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|x
operator|.
name|setRecurrenceId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|x
operator|.
name|setDateStart
argument_list|(
name|ics
operator|.
name|getDateStart
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setDateEnd
argument_list|(
name|ics
operator|.
name|getDateEnd
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setLocation
argument_list|(
name|ics
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setStatus
argument_list|(
name|ics
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue
name|dates
continue|;
block|}
block|}
comment|// add exception
name|exdates
operator|.
name|addValue
argument_list|(
name|date
operator|.
name|toDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// process remaining meetings
for|for
control|(
name|ICalendarMeeting
name|ics
range|:
name|meetings
control|)
block|{
name|VEvent
name|x
init|=
operator|new
name|VEvent
argument_list|()
decl_stmt|;
name|x
operator|.
name|setDateStart
argument_list|(
name|ics
operator|.
name|getDateStart
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setDateEnd
argument_list|(
name|ics
operator|.
name|getDateEnd
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setLocation
argument_list|(
name|ics
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|x
operator|.
name|setStatus
argument_list|(
name|ics
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
comment|// use exception as recurrence if there is one available
if|if
condition|(
operator|!
name|exdates
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RecurrenceId
name|id
init|=
operator|new
name|RecurrenceId
argument_list|(
name|exdates
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|x
operator|.
name|setRecurrenceId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|exdates
operator|.
name|getValues
argument_list|()
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|events
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exdates
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|master
operator|.
name|addExceptionDates
argument_list|(
name|exdates
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|VEvent
name|vevent
range|:
name|events
control|)
block|{
name|vevent
operator|.
name|setSequence
argument_list|(
name|event
operator|.
name|getSequence
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setUid
argument_list|(
name|event
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|event
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|description
init|=
operator|(
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|(
name|CONSTANTS
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|hasCourseTitles
argument_list|()
operator|&&
name|event
operator|.
name|getType
argument_list|()
operator|==
name|EventType
operator|.
name|Class
operator|&&
name|ApplicationProperty
operator|.
name|EventGridDisplayTitle
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|name
operator|=
name|event
operator|.
name|getCourseTitles
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasInstruction
argument_list|()
operator|&&
name|event
operator|.
name|hasExternalIds
argument_list|()
condition|)
name|description
operator|=
name|event
operator|.
name|getInstruction
argument_list|()
operator|+
literal|" "
operator|+
name|event
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|else if
condition|(
name|event
operator|.
name|hasInstruction
argument_list|()
operator|&&
name|event
operator|.
name|hasSectionNumber
argument_list|()
condition|)
name|description
operator|=
name|event
operator|.
name|getInstruction
argument_list|()
operator|+
literal|" "
operator|+
name|event
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasInstructors
argument_list|()
operator|&&
name|ApplicationProperty
operator|.
name|EventCalendarDisplayInstructorsInDescription
operator|.
name|isTrue
argument_list|()
condition|)
block|{
for|for
control|(
name|ContactInterface
name|instructor
range|:
name|event
operator|.
name|getInstructors
argument_list|()
control|)
name|description
operator|+=
literal|"\n"
operator|+
name|instructor
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
expr_stmt|;
block|}
name|vevent
operator|.
name|setSummary
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|hasTimeStamp
argument_list|()
condition|)
block|{
name|DateTimeStamp
name|ts
init|=
operator|new
name|DateTimeStamp
argument_list|(
name|event
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
name|vevent
operator|.
name|setDateTimeStamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ContactInterface
name|instructor
range|:
name|event
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|idx
operator|++
operator|==
literal|0
condition|)
block|{
name|Organizer
name|organizer
init|=
operator|new
name|Organizer
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|,
operator|(
name|instructor
operator|.
name|hasEmail
argument_list|()
condition|?
name|instructor
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|vevent
operator|.
name|setOrganizer
argument_list|(
name|organizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Attendee
name|attendee
init|=
operator|new
name|Attendee
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|,
operator|(
name|instructor
operator|.
name|hasEmail
argument_list|()
condition|?
name|instructor
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|attendee
operator|.
name|setRole
argument_list|(
name|Role
operator|.
name|CHAIR
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|addAttendee
argument_list|(
name|attendee
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|event
operator|.
name|hasSponsor
argument_list|()
condition|)
block|{
name|Organizer
name|organizer
init|=
operator|new
name|Organizer
argument_list|(
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|hasEmail
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|vevent
operator|.
name|setOrganizer
argument_list|(
name|organizer
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|hasContact
argument_list|()
condition|)
block|{
name|Organizer
name|organizer
init|=
operator|new
name|Organizer
argument_list|(
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|(
name|MESSAGES
argument_list|)
argument_list|,
operator|(
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|hasEmail
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|vevent
operator|.
name|setOrganizer
argument_list|(
name|organizer
argument_list|)
expr_stmt|;
block|}
name|ical
operator|.
name|addEvent
argument_list|(
name|vevent
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|checkRights
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
class|class
name|ICalendarMeeting
implements|implements
name|Comparable
argument_list|<
name|ICalendarMeeting
argument_list|>
block|{
specifier|private
name|DateTime
name|iStart
decl_stmt|,
name|iEnd
decl_stmt|;
specifier|private
name|String
name|iLocation
decl_stmt|;
specifier|private
name|Status
name|iStatus
decl_stmt|;
specifier|public
name|ICalendarMeeting
parameter_list|(
name|MeetingInterface
name|meeting
parameter_list|,
name|Status
name|status
parameter_list|)
block|{
if|if
condition|(
name|meeting
operator|.
name|getStartTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iStart
operator|=
operator|new
name|DateTime
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStart
operator|=
operator|new
name|DateTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|plusMinutes
argument_list|(
operator|(
literal|5
operator|*
name|meeting
operator|.
name|getStartSlot
argument_list|()
operator|)
operator|+
name|meeting
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meeting
operator|.
name|getStartTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|iEnd
operator|=
operator|new
name|DateTime
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iEnd
operator|=
operator|new
name|DateTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|plusMinutes
argument_list|(
operator|(
literal|5
operator|*
name|meeting
operator|.
name|getEndSlot
argument_list|()
operator|)
operator|+
name|meeting
operator|.
name|getEndOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iStart
operator|.
name|getSecondOfMinute
argument_list|()
operator|!=
literal|0
condition|)
name|iStart
operator|=
name|iStart
operator|.
name|minusSeconds
argument_list|(
name|iStart
operator|.
name|getSecondOfMinute
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnd
operator|.
name|getSecondOfMinute
argument_list|()
operator|!=
literal|0
condition|)
name|iEnd
operator|=
name|iEnd
operator|.
name|minusSeconds
argument_list|(
name|iEnd
operator|.
name|getSecondOfMinute
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStart
operator|.
name|getMillisOfSecond
argument_list|()
operator|!=
literal|0
condition|)
name|iStart
operator|=
name|iStart
operator|.
name|minusMillis
argument_list|(
name|iStart
operator|.
name|getMillisOfSecond
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnd
operator|.
name|getMillisOfSecond
argument_list|()
operator|!=
literal|0
condition|)
name|iEnd
operator|=
name|iEnd
operator|.
name|minusMillis
argument_list|(
name|iEnd
operator|.
name|getMillisOfSecond
argument_list|()
argument_list|)
expr_stmt|;
name|iLocation
operator|=
name|meeting
operator|.
name|getLocationName
argument_list|()
expr_stmt|;
name|iStatus
operator|=
operator|(
name|status
operator|!=
literal|null
condition|?
name|status
else|:
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
name|Status
operator|.
name|confirmed
argument_list|()
else|:
name|Status
operator|.
name|tentative
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|DateTime
name|getStart
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|DateStart
name|getDateStart
parameter_list|()
block|{
name|DateStart
name|ds
init|=
operator|new
name|DateStart
argument_list|(
name|iStart
operator|.
name|toDate
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|ds
return|;
block|}
specifier|public
name|DateTime
name|getEnd
parameter_list|()
block|{
return|return
name|iEnd
return|;
block|}
specifier|public
name|DateEnd
name|getDateEnd
parameter_list|()
block|{
name|DateEnd
name|de
init|=
operator|new
name|DateEnd
argument_list|(
name|iEnd
operator|.
name|toDate
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|de
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|iLocation
return|;
block|}
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|ICalendarMeeting
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getStart
argument_list|()
operator|.
name|equals
argument_list|(
name|getStart
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getEnd
argument_list|()
operator|.
name|equals
argument_list|(
name|getEnd
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getStatus
argument_list|()
operator|.
name|isTentative
argument_list|()
condition|)
name|iStatus
operator|=
name|Status
operator|.
name|tentative
argument_list|()
expr_stmt|;
name|iLocation
operator|+=
literal|", "
operator|+
name|m
operator|.
name|getLocation
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|same
parameter_list|(
name|ICalendarMeeting
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|getStart
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|==
name|getStart
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|&&
name|m
operator|.
name|getEnd
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|==
name|getEnd
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|&&
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|&&
name|getStatus
argument_list|()
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getStatus
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ICalendarMeeting
name|m
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getStart
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getStart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getEnd
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getEnd
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

