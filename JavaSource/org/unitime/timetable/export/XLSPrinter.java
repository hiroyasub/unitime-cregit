begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Color
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFClientAnchor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFPalette
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFPatriarch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFRichTextString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFSheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|usermodel
operator|.
name|HSSFWorkbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|hssf
operator|.
name|util
operator|.
name|HSSFColor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|BorderStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|CellStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|ClientAnchor
operator|.
name|AnchorType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|FillPatternType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|HorizontalAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|IndexedColors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|PrintSetup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Sheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|VerticalAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Workbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
operator|.
name|Printer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|A
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|F
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|XLSPrinter
implements|implements
name|Printer
block|{
specifier|private
specifier|static
name|Pattern
name|sNumber
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[+-]?[0-9]*\\.?[0-9]*[a-z]?"
argument_list|)
decl_stmt|;
specifier|private
name|OutputStream
name|iOutput
decl_stmt|;
specifier|private
name|Workbook
name|iWorkbook
decl_stmt|;
specifier|private
name|Object
index|[]
name|iLastLine
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCheckLast
init|=
literal|false
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|iHiddenColumns
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Sheet
name|iSheet
decl_stmt|;
specifier|private
name|int
name|iRowNum
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CellStyle
argument_list|>
name|iStyles
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
name|iFonts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Font
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
name|iColors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Short
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|XLSPrinter
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|boolean
name|checkLast
parameter_list|)
block|{
name|iOutput
operator|=
name|output
expr_stmt|;
name|iCheckLast
operator|=
name|checkLast
expr_stmt|;
name|iWorkbook
operator|=
operator|new
name|HSSFWorkbook
argument_list|()
expr_stmt|;
name|iSheet
operator|=
name|iWorkbook
operator|.
name|createSheet
argument_list|()
expr_stmt|;
name|iSheet
operator|.
name|setDisplayGridlines
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setPrintGridlines
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setFitToPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setHorizontallyCenter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrintSetup
name|printSetup
init|=
name|iSheet
operator|.
name|getPrintSetup
argument_list|()
decl_stmt|;
name|printSetup
operator|.
name|setLandscape
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSheet
operator|.
name|setAutobreaks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|printSetup
operator|.
name|setFitHeight
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|printSetup
operator|.
name|setFitWidth
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|iStyles
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CellStyle
argument_list|>
argument_list|()
expr_stmt|;
name|CellStyle
name|style
decl_stmt|;
name|style
operator|=
name|iWorkbook
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|style
operator|.
name|setBorderBottom
argument_list|(
name|BorderStyle
operator|.
name|THIN
argument_list|)
expr_stmt|;
name|style
operator|.
name|setBottomBorderColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|style
operator|.
name|setAlignment
argument_list|(
name|HorizontalAlignment
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|style
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFont
argument_list|(
name|getFont
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFillForegroundColor
argument_list|(
name|IndexedColors
operator|.
name|LIGHT_CORNFLOWER_BLUE
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFillPattern
argument_list|(
name|FillPatternType
operator|.
name|SOLID_FOREGROUND
argument_list|)
expr_stmt|;
name|style
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iStyles
operator|.
name|put
argument_list|(
literal|"header"
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|style
operator|=
name|iWorkbook
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|style
operator|.
name|setAlignment
argument_list|(
name|HorizontalAlignment
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|style
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFont
argument_list|(
name|getFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iStyles
operator|.
name|put
argument_list|(
literal|"plain"
argument_list|,
name|style
argument_list|)
expr_stmt|;
name|style
operator|=
name|iWorkbook
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|style
operator|.
name|setAlignment
argument_list|(
name|HorizontalAlignment
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|style
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFont
argument_list|(
name|getFont
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|Color
operator|.
name|BLACK
argument_list|)
argument_list|)
expr_stmt|;
name|iStyles
operator|.
name|put
argument_list|(
literal|"number"
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"application/vnd.ms-excel"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hideColumn
parameter_list|(
name|int
name|col
parameter_list|)
block|{
name|iHiddenColumns
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printHeader
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|Row
name|headerRow
init|=
name|iSheet
operator|.
name|createRow
argument_list|(
name|iRowNum
operator|++
argument_list|)
decl_stmt|;
name|int
name|cellIdx
init|=
literal|0
decl_stmt|;
name|int
name|nrLines
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fields
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
name|Cell
name|cell
init|=
name|headerRow
operator|.
name|createCell
argument_list|(
name|cellIdx
operator|++
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setCellStyle
argument_list|(
name|iStyles
operator|.
name|get
argument_list|(
literal|"header"
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCellValue
argument_list|(
name|fields
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|fields
index|[
name|idx
index|]
operator|!=
literal|null
condition|)
name|nrLines
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nrLines
argument_list|,
name|fields
index|[
name|idx
index|]
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nrLines
operator|>
literal|1
condition|)
name|headerRow
operator|.
name|setHeightInPoints
argument_list|(
name|nrLines
operator|*
name|iSheet
operator|.
name|getDefaultRowHeightInPoints
argument_list|()
operator|+
literal|1f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printLine
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|int
name|cellIdx
init|=
literal|0
decl_stmt|;
name|Row
name|row
init|=
name|iSheet
operator|.
name|createRow
argument_list|(
name|iRowNum
operator|++
argument_list|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fields
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
name|Cell
name|cell
init|=
name|row
operator|.
name|createCell
argument_list|(
name|cellIdx
operator|++
argument_list|)
decl_stmt|;
name|String
name|f
init|=
name|fields
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
operator|||
name|f
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|iCheckLast
operator|&&
name|f
operator|.
name|equals
argument_list|(
name|iLastLine
operator|==
literal|null
operator|||
name|idx
operator|>=
name|iLastLine
operator|.
name|length
condition|?
literal|null
else|:
name|iLastLine
index|[
name|idx
index|]
argument_list|)
operator|)
condition|)
name|f
operator|=
literal|""
expr_stmt|;
name|boolean
name|number
init|=
name|sNumber
operator|.
name|matcher
argument_list|(
name|f
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setCellStyle
argument_list|(
name|iStyles
operator|.
name|get
argument_list|(
name|number
condition|?
literal|"number"
else|:
literal|"plain"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
operator|||
name|f
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
block|}
if|else if
condition|(
name|number
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nrLines
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nrLines
argument_list|,
name|f
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCellValue
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrLines
operator|>
literal|1
condition|)
name|row
operator|.
name|setHeightInPoints
argument_list|(
name|nrLines
operator|*
name|iSheet
operator|.
name|getDefaultRowHeightInPoints
argument_list|()
operator|+
literal|1f
argument_list|)
expr_stmt|;
name|iLastLine
operator|=
name|fields
expr_stmt|;
block|}
specifier|public
name|void
name|printLine
parameter_list|(
name|A
modifier|...
name|fields
parameter_list|)
block|{
name|int
name|cellIdx
init|=
literal|0
decl_stmt|;
name|Row
name|row
init|=
name|iSheet
operator|.
name|createRow
argument_list|(
name|iRowNum
operator|++
argument_list|)
decl_stmt|;
name|int
name|nrLines
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fields
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
name|Cell
name|cell
init|=
name|row
operator|.
name|createCell
argument_list|(
name|cellIdx
operator|++
argument_list|)
decl_stmt|;
name|A
name|f
init|=
name|fields
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
operator|||
name|f
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|iCheckLast
operator|&&
name|f
operator|.
name|equals
argument_list|(
name|iLastLine
operator|==
literal|null
operator|||
name|idx
operator|>=
name|iLastLine
operator|.
name|length
condition|?
literal|null
else|:
name|iLastLine
index|[
name|idx
index|]
argument_list|)
operator|)
condition|)
block|{
name|f
operator|=
operator|new
name|A
argument_list|()
expr_stmt|;
if|if
condition|(
name|fields
index|[
name|idx
index|]
operator|!=
literal|null
operator|&&
name|fields
index|[
name|idx
index|]
operator|.
name|has
argument_list|(
name|F
operator|.
name|NOSEPARATOR
argument_list|)
condition|)
name|f
operator|.
name|set
argument_list|(
name|F
operator|.
name|NOSEPARATOR
argument_list|)
expr_stmt|;
block|}
name|cell
operator|.
name|setCellStyle
argument_list|(
name|getStyle
argument_list|(
name|f
argument_list|,
name|iLastLine
operator|==
literal|null
operator|&&
operator|!
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|NOSEPARATOR
argument_list|)
argument_list|,
name|f
operator|.
name|getPattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|hasBufferedImage
argument_list|()
condition|)
block|{
try|try
block|{
name|addImageToSheet
argument_list|(
name|cellIdx
operator|-
literal|1
argument_list|,
name|iRowNum
operator|-
literal|1
argument_list|,
operator|(
name|HSSFSheet
operator|)
name|iSheet
argument_list|,
name|f
operator|.
name|getBufferedImage
argument_list|()
argument_list|,
name|EXPAND_ROW_AND_COLUMN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|f
operator|.
name|isNumber
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|f
operator|.
name|getNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|f
operator|.
name|isDate
argument_list|()
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|f
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|f
operator|.
name|hasText
argument_list|()
condition|)
block|{
name|boolean
name|number
init|=
name|sNumber
operator|.
name|matcher
argument_list|(
name|f
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
name|number
operator|&&
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|RIGHT
argument_list|)
condition|)
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|f
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cell
operator|.
name|setCellValue
argument_list|(
name|f
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|nrLines
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nrLines
argument_list|,
name|f
operator|.
name|getText
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|f
operator|.
name|hasChunks
argument_list|()
condition|)
block|{
name|StringBuffer
name|text
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|font
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|A
name|g
range|:
name|f
operator|.
name|getChunks
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|hasText
argument_list|()
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
operator|.
name|append
argument_list|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|INLINE
argument_list|)
condition|?
literal|" "
else|:
literal|"\n"
argument_list|)
expr_stmt|;
name|font
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|text
operator|.
name|length
argument_list|()
block|,
name|getFont
argument_list|(
name|g
operator|.
name|has
argument_list|(
name|F
operator|.
name|BOLD
argument_list|)
argument_list|,
name|g
operator|.
name|has
argument_list|(
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|,
name|g
operator|.
name|has
argument_list|(
name|F
operator|.
name|UNDERLINE
argument_list|)
argument_list|,
name|g
operator|.
name|getColor
argument_list|()
argument_list|)
operator|.
name|getIndex
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|g
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|g
operator|.
name|hasChunks
argument_list|()
condition|)
block|{
for|for
control|(
name|A
name|h
range|:
name|g
operator|.
name|getChunks
argument_list|()
control|)
block|{
if|if
condition|(
name|h
operator|.
name|hasText
argument_list|()
condition|)
block|{
if|if
condition|(
name|text
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|text
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|font
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|text
operator|.
name|length
argument_list|()
block|,
name|getFont
argument_list|(
name|h
operator|.
name|has
argument_list|(
name|F
operator|.
name|BOLD
argument_list|)
argument_list|,
name|h
operator|.
name|has
argument_list|(
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|,
name|h
operator|.
name|has
argument_list|(
name|F
operator|.
name|UNDERLINE
argument_list|)
argument_list|,
name|h
operator|.
name|getColor
argument_list|()
argument_list|)
operator|.
name|getIndex
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|h
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|nrLines
operator|=
name|Math
operator|.
name|max
argument_list|(
name|nrLines
argument_list|,
name|text
operator|.
name|toString
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|font
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|text
operator|.
name|length
argument_list|()
block|,
operator|(
name|short
operator|)
literal|0
block|}
argument_list|)
expr_stmt|;
name|HSSFRichTextString
name|value
init|=
operator|new
name|HSSFRichTextString
argument_list|(
name|text
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|font
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|value
operator|.
name|applyFont
argument_list|(
operator|(
name|Integer
operator|)
name|font
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|[
literal|0
index|]
argument_list|,
operator|(
name|Integer
operator|)
name|font
operator|.
name|get
argument_list|(
literal|1
operator|+
name|i
argument_list|)
index|[
literal|0
index|]
argument_list|,
operator|(
name|Short
operator|)
name|font
operator|.
name|get
argument_list|(
name|i
argument_list|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCellValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|nrLines
operator|>
literal|1
condition|)
name|row
operator|.
name|setHeightInPoints
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|nrLines
operator|*
name|iSheet
operator|.
name|getDefaultRowHeightInPoints
argument_list|()
operator|+
literal|1f
argument_list|,
name|row
operator|.
name|getHeightInPoints
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iLastLine
operator|=
name|fields
expr_stmt|;
block|}
specifier|protected
name|Font
name|getFont
parameter_list|(
name|boolean
name|bold
parameter_list|,
name|boolean
name|italic
parameter_list|,
name|boolean
name|underline
parameter_list|,
name|Color
name|c
parameter_list|)
block|{
name|Short
name|color
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
name|c
operator|=
name|Color
operator|.
name|BLACK
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|String
name|colorId
init|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|c
operator|.
name|getRGB
argument_list|()
argument_list|)
decl_stmt|;
name|color
operator|=
name|iColors
operator|.
name|get
argument_list|(
name|colorId
argument_list|)
expr_stmt|;
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
name|HSSFPalette
name|palette
init|=
operator|(
operator|(
name|HSSFWorkbook
operator|)
name|iWorkbook
operator|)
operator|.
name|getCustomPalette
argument_list|()
decl_stmt|;
name|HSSFColor
name|clr
init|=
name|palette
operator|.
name|findSimilarColor
argument_list|(
name|c
operator|.
name|getRed
argument_list|()
argument_list|,
name|c
operator|.
name|getGreen
argument_list|()
argument_list|,
name|c
operator|.
name|getBlue
argument_list|()
argument_list|)
decl_stmt|;
name|color
operator|=
operator|(
name|clr
operator|==
literal|null
condition|?
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
else|:
name|clr
operator|.
name|getIndex
argument_list|()
operator|)
expr_stmt|;
name|iColors
operator|.
name|put
argument_list|(
name|colorId
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|fontId
init|=
operator|(
name|bold
condition|?
literal|"b"
else|:
literal|""
operator|)
operator|+
operator|(
name|italic
condition|?
literal|"i"
else|:
literal|""
operator|)
operator|+
operator|(
name|underline
condition|?
literal|"u"
else|:
literal|""
operator|)
operator|+
operator|(
name|color
operator|==
literal|null
condition|?
literal|""
else|:
name|color
operator|)
decl_stmt|;
name|Font
name|font
init|=
name|iFonts
operator|.
name|get
argument_list|(
name|fontId
argument_list|)
decl_stmt|;
if|if
condition|(
name|font
operator|==
literal|null
condition|)
block|{
name|font
operator|=
name|iWorkbook
operator|.
name|createFont
argument_list|()
expr_stmt|;
name|font
operator|.
name|setBold
argument_list|(
name|bold
argument_list|)
expr_stmt|;
name|font
operator|.
name|setItalic
argument_list|(
name|italic
argument_list|)
expr_stmt|;
name|font
operator|.
name|setUnderline
argument_list|(
name|underline
condition|?
name|Font
operator|.
name|U_SINGLE
else|:
name|Font
operator|.
name|U_NONE
argument_list|)
expr_stmt|;
name|font
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|font
operator|.
name|setFontHeightInPoints
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|)
expr_stmt|;
name|font
operator|.
name|setFontName
argument_list|(
literal|"Arial"
argument_list|)
expr_stmt|;
name|iFonts
operator|.
name|put
argument_list|(
name|fontId
argument_list|,
name|font
argument_list|)
expr_stmt|;
block|}
return|return
name|font
return|;
block|}
specifier|protected
name|CellStyle
name|getStyle
parameter_list|(
name|A
name|f
parameter_list|,
name|boolean
name|dashed
parameter_list|,
name|String
name|format
parameter_list|)
block|{
name|String
name|styleId
init|=
operator|(
name|dashed
condition|?
literal|"D"
else|:
literal|""
operator|)
operator|+
operator|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|BOLD
argument_list|)
condition|?
literal|"b"
else|:
literal|""
operator|)
operator|+
operator|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|ITALIC
argument_list|)
condition|?
literal|"i"
else|:
literal|""
operator|)
operator|+
operator|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|UNDERLINE
argument_list|)
condition|?
literal|"u"
else|:
literal|""
operator|)
operator|+
operator|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|RIGHT
argument_list|)
condition|?
literal|"R"
else|:
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|CENTER
argument_list|)
condition|?
literal|"C"
else|:
literal|"L"
operator|)
operator|+
operator|(
name|f
operator|.
name|hasColor
argument_list|()
condition|?
literal|"#"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|f
operator|.
name|getColor
argument_list|()
operator|.
name|getRGB
argument_list|()
argument_list|)
else|:
literal|""
operator|)
operator|+
operator|(
name|format
operator|==
literal|null
condition|?
literal|""
else|:
literal|"|"
operator|+
name|format
operator|)
decl_stmt|;
name|CellStyle
name|style
init|=
name|iStyles
operator|.
name|get
argument_list|(
name|styleId
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|==
literal|null
condition|)
block|{
name|style
operator|=
name|iWorkbook
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
if|if
condition|(
name|dashed
condition|)
block|{
name|style
operator|.
name|setBorderTop
argument_list|(
name|BorderStyle
operator|.
name|DASHED
argument_list|)
expr_stmt|;
name|style
operator|.
name|setTopBorderColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|style
operator|.
name|setAlignment
argument_list|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|RIGHT
argument_list|)
condition|?
name|HorizontalAlignment
operator|.
name|RIGHT
else|:
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|CENTER
argument_list|)
condition|?
name|HorizontalAlignment
operator|.
name|CENTER
else|:
name|HorizontalAlignment
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|style
operator|.
name|setVerticalAlignment
argument_list|(
name|VerticalAlignment
operator|.
name|TOP
argument_list|)
expr_stmt|;
name|style
operator|.
name|setFont
argument_list|(
name|getFont
argument_list|(
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|BOLD
argument_list|)
argument_list|,
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|,
name|f
operator|.
name|has
argument_list|(
name|F
operator|.
name|UNDERLINE
argument_list|)
argument_list|,
name|f
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|.
name|setWrapText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|!=
literal|null
condition|)
name|style
operator|.
name|setDataFormat
argument_list|(
name|iWorkbook
operator|.
name|createDataFormat
argument_list|()
operator|.
name|getFormat
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|iStyles
operator|.
name|put
argument_list|(
name|styleId
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
return|return
name|style
return|;
block|}
specifier|public
specifier|static
specifier|final
name|int
name|EXPAND_ROW
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EXPAND_COLUMN
init|=
literal|2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|EXPAND_ROW_AND_COLUMN
init|=
literal|3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OVERLAY_ROW_AND_COLUMN
init|=
literal|7
decl_stmt|;
specifier|protected
name|void
name|addImageToSheet
parameter_list|(
name|int
name|colNumber
parameter_list|,
name|int
name|rowNumber
parameter_list|,
name|HSSFSheet
name|sheet
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|int
name|resizeBehaviour
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|reqImageWidthMM
init|=
name|image
operator|.
name|getWidth
argument_list|()
operator|/
name|ConvertImageUnits
operator|.
name|PIXELS_PER_MILLIMETRES
decl_stmt|;
name|double
name|reqImageHeightMM
init|=
name|image
operator|.
name|getHeight
argument_list|()
operator|/
name|ConvertImageUnits
operator|.
name|PIXELS_PER_MILLIMETRES
decl_stmt|;
name|addImageToSheet
argument_list|(
name|colNumber
argument_list|,
name|rowNumber
argument_list|,
name|sheet
argument_list|,
name|image
argument_list|,
name|reqImageWidthMM
argument_list|,
name|reqImageHeightMM
argument_list|,
name|resizeBehaviour
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addImageToSheet
parameter_list|(
name|int
name|colNumber
parameter_list|,
name|int
name|rowNumber
parameter_list|,
name|HSSFSheet
name|sheet
parameter_list|,
name|BufferedImage
name|image
parameter_list|,
name|double
name|reqImageWidthMM
parameter_list|,
name|double
name|reqImageHeightMM
parameter_list|,
name|int
name|resizeBehaviour
parameter_list|)
throws|throws
name|IOException
block|{
name|ClientAnchorDetail
name|colClientAnchorDetail
init|=
name|fitImageToColumns
argument_list|(
name|sheet
argument_list|,
name|colNumber
argument_list|,
name|reqImageWidthMM
argument_list|,
name|resizeBehaviour
argument_list|)
decl_stmt|;
name|ClientAnchorDetail
name|rowClientAnchorDetail
init|=
name|fitImageToRows
argument_list|(
name|sheet
argument_list|,
name|rowNumber
argument_list|,
name|reqImageHeightMM
argument_list|,
name|resizeBehaviour
argument_list|)
decl_stmt|;
name|HSSFClientAnchor
name|anchor
init|=
operator|new
name|HSSFClientAnchor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|colClientAnchorDetail
operator|.
name|getInset
argument_list|()
argument_list|,
name|rowClientAnchorDetail
operator|.
name|getInset
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|colClientAnchorDetail
operator|.
name|getFromIndex
argument_list|()
argument_list|,
name|rowClientAnchorDetail
operator|.
name|getFromIndex
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|colClientAnchorDetail
operator|.
name|getToIndex
argument_list|()
argument_list|,
name|rowClientAnchorDetail
operator|.
name|getToIndex
argument_list|()
argument_list|)
decl_stmt|;
name|anchor
operator|.
name|setAnchorType
argument_list|(
name|AnchorType
operator|.
name|MOVE_AND_RESIZE
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|bytes
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|ImageIO
operator|.
name|write
argument_list|(
name|image
argument_list|,
literal|"PNG"
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|sheet
operator|.
name|getWorkbook
argument_list|()
operator|.
name|addPicture
argument_list|(
name|bytes
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|HSSFWorkbook
operator|.
name|PICTURE_TYPE_PNG
argument_list|)
decl_stmt|;
name|HSSFPatriarch
name|patriarch
init|=
name|sheet
operator|.
name|createDrawingPatriarch
argument_list|()
decl_stmt|;
name|patriarch
operator|.
name|createPicture
argument_list|(
name|anchor
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ClientAnchorDetail
name|fitImageToColumns
parameter_list|(
name|HSSFSheet
name|sheet
parameter_list|,
name|int
name|colNumber
parameter_list|,
name|double
name|reqImageWidthMM
parameter_list|,
name|int
name|resizeBehaviour
parameter_list|)
block|{
name|double
name|colWidthMM
decl_stmt|;
name|double
name|colCoordinatesPerMM
decl_stmt|;
name|int
name|pictureWidthCoordinates
decl_stmt|;
name|ClientAnchorDetail
name|colClientAnchorDetail
init|=
literal|null
decl_stmt|;
name|colWidthMM
operator|=
name|ConvertImageUnits
operator|.
name|widthUnits2Millimetres
argument_list|(
operator|(
name|short
operator|)
name|sheet
operator|.
name|getColumnWidth
argument_list|(
name|colNumber
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|colWidthMM
operator|<
name|reqImageWidthMM
condition|)
block|{
if|if
condition|(
name|resizeBehaviour
operator|==
name|EXPAND_COLUMN
operator|||
name|resizeBehaviour
operator|==
name|EXPAND_ROW_AND_COLUMN
condition|)
block|{
name|sheet
operator|.
name|setColumnWidth
argument_list|(
name|colNumber
argument_list|,
name|ConvertImageUnits
operator|.
name|millimetres2WidthUnits
argument_list|(
name|reqImageWidthMM
argument_list|)
argument_list|)
expr_stmt|;
name|colWidthMM
operator|=
name|reqImageWidthMM
expr_stmt|;
name|colCoordinatesPerMM
operator|=
name|ConvertImageUnits
operator|.
name|TOTAL_COLUMN_COORDINATE_POSITIONS
operator|/
name|colWidthMM
expr_stmt|;
name|pictureWidthCoordinates
operator|=
operator|(
name|int
operator|)
operator|(
name|reqImageWidthMM
operator|*
name|colCoordinatesPerMM
operator|)
expr_stmt|;
name|colClientAnchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|colNumber
argument_list|,
name|colNumber
argument_list|,
name|pictureWidthCoordinates
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|resizeBehaviour
operator|==
name|OVERLAY_ROW_AND_COLUMN
operator|||
name|resizeBehaviour
operator|==
name|EXPAND_ROW
condition|)
block|{
name|colClientAnchorDetail
operator|=
name|calculateColumnLocation
argument_list|(
name|sheet
argument_list|,
name|colNumber
argument_list|,
name|reqImageWidthMM
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|colCoordinatesPerMM
operator|=
name|ConvertImageUnits
operator|.
name|TOTAL_COLUMN_COORDINATE_POSITIONS
operator|/
name|colWidthMM
expr_stmt|;
name|pictureWidthCoordinates
operator|=
operator|(
name|int
operator|)
operator|(
name|reqImageWidthMM
operator|*
name|colCoordinatesPerMM
operator|)
expr_stmt|;
name|colClientAnchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|colNumber
argument_list|,
name|colNumber
argument_list|,
name|pictureWidthCoordinates
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|colClientAnchorDetail
operator|)
return|;
block|}
specifier|private
name|ClientAnchorDetail
name|calculateColumnLocation
parameter_list|(
name|HSSFSheet
name|sheet
parameter_list|,
name|int
name|startingColumn
parameter_list|,
name|double
name|reqImageWidthMM
parameter_list|)
block|{
name|ClientAnchorDetail
name|anchorDetail
decl_stmt|;
name|double
name|totalWidthMM
init|=
literal|0.0D
decl_stmt|;
name|double
name|colWidthMM
init|=
literal|0.0D
decl_stmt|;
name|double
name|overlapMM
decl_stmt|;
name|double
name|coordinatePositionsPerMM
decl_stmt|;
name|int
name|toColumn
init|=
name|startingColumn
decl_stmt|;
name|int
name|inset
decl_stmt|;
while|while
condition|(
name|totalWidthMM
operator|<
name|reqImageWidthMM
condition|)
block|{
name|colWidthMM
operator|=
name|ConvertImageUnits
operator|.
name|widthUnits2Millimetres
argument_list|(
operator|(
name|short
operator|)
operator|(
name|sheet
operator|.
name|getColumnWidth
argument_list|(
name|toColumn
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|totalWidthMM
operator|+=
operator|(
name|colWidthMM
operator|+
name|ConvertImageUnits
operator|.
name|CELL_BORDER_WIDTH_MILLIMETRES
operator|)
expr_stmt|;
name|toColumn
operator|++
expr_stmt|;
block|}
name|toColumn
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|totalWidthMM
operator|==
operator|(
name|int
operator|)
name|reqImageWidthMM
condition|)
block|{
name|anchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|startingColumn
argument_list|,
name|toColumn
argument_list|,
name|ConvertImageUnits
operator|.
name|TOTAL_COLUMN_COORDINATE_POSITIONS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overlapMM
operator|=
name|reqImageWidthMM
operator|-
operator|(
name|totalWidthMM
operator|-
name|colWidthMM
operator|)
expr_stmt|;
if|if
condition|(
name|overlapMM
operator|<
literal|0
condition|)
block|{
name|overlapMM
operator|=
literal|0.0D
expr_stmt|;
block|}
name|coordinatePositionsPerMM
operator|=
name|ConvertImageUnits
operator|.
name|TOTAL_COLUMN_COORDINATE_POSITIONS
operator|/
name|colWidthMM
expr_stmt|;
name|inset
operator|=
operator|(
name|int
operator|)
operator|(
name|coordinatePositionsPerMM
operator|*
name|overlapMM
operator|)
expr_stmt|;
name|anchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|startingColumn
argument_list|,
name|toColumn
argument_list|,
name|inset
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|anchorDetail
operator|)
return|;
block|}
specifier|private
name|ClientAnchorDetail
name|fitImageToRows
parameter_list|(
name|HSSFSheet
name|sheet
parameter_list|,
name|int
name|rowNumber
parameter_list|,
name|double
name|reqImageHeightMM
parameter_list|,
name|int
name|resizeBehaviour
parameter_list|)
block|{
name|double
name|rowCoordinatesPerMM
decl_stmt|;
name|int
name|pictureHeightCoordinates
decl_stmt|;
name|ClientAnchorDetail
name|rowClientAnchorDetail
init|=
literal|null
decl_stmt|;
name|HSSFRow
name|row
init|=
name|sheet
operator|.
name|getRow
argument_list|(
name|rowNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|row
operator|=
name|sheet
operator|.
name|createRow
argument_list|(
name|rowNumber
argument_list|)
expr_stmt|;
block|}
name|double
name|rowHeightMM
init|=
name|row
operator|.
name|getHeightInPoints
argument_list|()
operator|/
name|ConvertImageUnits
operator|.
name|POINTS_PER_MILLIMETRE
decl_stmt|;
if|if
condition|(
name|rowHeightMM
operator|<
name|reqImageHeightMM
condition|)
block|{
if|if
condition|(
name|resizeBehaviour
operator|==
name|EXPAND_ROW
operator|||
name|resizeBehaviour
operator|==
name|EXPAND_ROW_AND_COLUMN
condition|)
block|{
name|row
operator|.
name|setHeightInPoints
argument_list|(
operator|(
name|float
operator|)
operator|(
name|reqImageHeightMM
operator|*
name|ConvertImageUnits
operator|.
name|POINTS_PER_MILLIMETRE
operator|)
argument_list|)
expr_stmt|;
name|rowHeightMM
operator|=
name|reqImageHeightMM
expr_stmt|;
name|rowCoordinatesPerMM
operator|=
name|ConvertImageUnits
operator|.
name|TOTAL_ROW_COORDINATE_POSITIONS
operator|/
name|rowHeightMM
expr_stmt|;
name|pictureHeightCoordinates
operator|=
operator|(
name|int
operator|)
operator|(
name|reqImageHeightMM
operator|*
name|rowCoordinatesPerMM
operator|)
expr_stmt|;
name|rowClientAnchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|rowNumber
argument_list|,
name|rowNumber
argument_list|,
name|pictureHeightCoordinates
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|resizeBehaviour
operator|==
name|OVERLAY_ROW_AND_COLUMN
operator|||
name|resizeBehaviour
operator|==
name|EXPAND_COLUMN
condition|)
block|{
name|rowClientAnchorDetail
operator|=
name|calculateRowLocation
argument_list|(
name|sheet
argument_list|,
name|rowNumber
argument_list|,
name|reqImageHeightMM
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|rowCoordinatesPerMM
operator|=
name|ConvertImageUnits
operator|.
name|TOTAL_ROW_COORDINATE_POSITIONS
operator|/
name|rowHeightMM
expr_stmt|;
name|pictureHeightCoordinates
operator|=
operator|(
name|int
operator|)
operator|(
name|reqImageHeightMM
operator|*
name|rowCoordinatesPerMM
operator|)
expr_stmt|;
name|rowClientAnchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|rowNumber
argument_list|,
name|rowNumber
argument_list|,
name|pictureHeightCoordinates
argument_list|)
expr_stmt|;
block|}
return|return
name|rowClientAnchorDetail
return|;
block|}
specifier|private
name|ClientAnchorDetail
name|calculateRowLocation
parameter_list|(
name|HSSFSheet
name|sheet
parameter_list|,
name|int
name|startingRow
parameter_list|,
name|double
name|reqImageHeightMM
parameter_list|)
block|{
name|ClientAnchorDetail
name|clientAnchorDetail
decl_stmt|;
name|HSSFRow
name|row
decl_stmt|;
name|double
name|rowHeightMM
init|=
literal|0.0D
decl_stmt|;
name|double
name|totalRowHeightMM
init|=
literal|0.0D
decl_stmt|;
name|double
name|overlapMM
decl_stmt|;
name|double
name|rowCoordinatesPerMM
decl_stmt|;
name|int
name|toRow
init|=
name|startingRow
decl_stmt|;
name|int
name|inset
decl_stmt|;
while|while
condition|(
name|totalRowHeightMM
operator|<
name|reqImageHeightMM
condition|)
block|{
name|row
operator|=
name|sheet
operator|.
name|getRow
argument_list|(
name|toRow
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|row
operator|=
name|sheet
operator|.
name|createRow
argument_list|(
name|toRow
argument_list|)
expr_stmt|;
block|}
name|rowHeightMM
operator|=
name|row
operator|.
name|getHeightInPoints
argument_list|()
operator|/
name|ConvertImageUnits
operator|.
name|POINTS_PER_MILLIMETRE
expr_stmt|;
name|totalRowHeightMM
operator|+=
name|rowHeightMM
expr_stmt|;
name|toRow
operator|++
expr_stmt|;
block|}
name|toRow
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|totalRowHeightMM
operator|==
operator|(
name|int
operator|)
name|reqImageHeightMM
condition|)
block|{
name|clientAnchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|startingRow
argument_list|,
name|toRow
argument_list|,
name|ConvertImageUnits
operator|.
name|TOTAL_ROW_COORDINATE_POSITIONS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|overlapMM
operator|=
name|reqImageHeightMM
operator|-
operator|(
name|totalRowHeightMM
operator|-
name|rowHeightMM
operator|)
expr_stmt|;
if|if
condition|(
name|overlapMM
operator|<
literal|0
condition|)
block|{
name|overlapMM
operator|=
literal|0.0D
expr_stmt|;
block|}
name|rowCoordinatesPerMM
operator|=
name|ConvertImageUnits
operator|.
name|TOTAL_ROW_COORDINATE_POSITIONS
operator|/
name|rowHeightMM
expr_stmt|;
name|inset
operator|=
operator|(
name|int
operator|)
operator|(
name|overlapMM
operator|*
name|rowCoordinatesPerMM
operator|)
expr_stmt|;
name|clientAnchorDetail
operator|=
operator|new
name|ClientAnchorDetail
argument_list|(
name|startingRow
argument_list|,
name|toRow
argument_list|,
name|inset
argument_list|)
expr_stmt|;
block|}
return|return
name|clientAnchorDetail
return|;
block|}
specifier|public
specifier|static
class|class
name|ClientAnchorDetail
block|{
specifier|public
name|int
name|iFromIndex
decl_stmt|;
specifier|public
name|int
name|iToIndex
decl_stmt|;
specifier|public
name|int
name|iInset
decl_stmt|;
specifier|public
name|ClientAnchorDetail
parameter_list|(
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|,
name|int
name|inset
parameter_list|)
block|{
name|iFromIndex
operator|=
name|fromIndex
expr_stmt|;
name|iToIndex
operator|=
name|toIndex
expr_stmt|;
name|iInset
operator|=
name|inset
expr_stmt|;
block|}
specifier|public
name|int
name|getFromIndex
parameter_list|()
block|{
return|return
name|iFromIndex
return|;
block|}
specifier|public
name|int
name|getToIndex
parameter_list|()
block|{
return|return
name|iToIndex
return|;
block|}
specifier|public
name|int
name|getInset
parameter_list|()
block|{
return|return
name|iInset
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ConvertImageUnits
block|{
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_COLUMN_COORDINATE_POSITIONS
init|=
literal|1023
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TOTAL_ROW_COORDINATE_POSITIONS
init|=
literal|255
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PIXELS_PER_INCH
init|=
literal|96
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|PIXELS_PER_MILLIMETRES
init|=
literal|3.78
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|POINTS_PER_MILLIMETRE
init|=
literal|2.83
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|double
name|CELL_BORDER_WIDTH_MILLIMETRES
init|=
literal|2.0d
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|short
name|EXCEL_COLUMN_WIDTH_FACTOR
init|=
literal|256
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|UNIT_OFFSET_LENGTH
init|=
literal|7
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
index|[]
name|UNIT_OFFSET_MAP
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|36
block|,
literal|73
block|,
literal|109
block|,
literal|146
block|,
literal|182
block|,
literal|219
block|}
decl_stmt|;
specifier|public
specifier|static
name|short
name|pixel2WidthUnits
parameter_list|(
name|int
name|pxs
parameter_list|)
block|{
name|short
name|widthUnits
init|=
operator|(
name|short
operator|)
operator|(
name|EXCEL_COLUMN_WIDTH_FACTOR
operator|*
operator|(
name|pxs
operator|/
name|UNIT_OFFSET_LENGTH
operator|)
operator|)
decl_stmt|;
name|widthUnits
operator|+=
name|UNIT_OFFSET_MAP
index|[
operator|(
name|pxs
operator|%
name|UNIT_OFFSET_LENGTH
operator|)
index|]
expr_stmt|;
return|return
name|widthUnits
return|;
block|}
specifier|public
specifier|static
name|int
name|widthUnits2Pixel
parameter_list|(
name|short
name|widthUnits
parameter_list|)
block|{
name|int
name|pixels
init|=
operator|(
name|widthUnits
operator|/
name|EXCEL_COLUMN_WIDTH_FACTOR
operator|)
operator|*
name|UNIT_OFFSET_LENGTH
decl_stmt|;
name|int
name|offsetWidthUnits
init|=
name|widthUnits
operator|%
name|EXCEL_COLUMN_WIDTH_FACTOR
decl_stmt|;
name|pixels
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|offsetWidthUnits
operator|/
operator|(
operator|(
name|float
operator|)
name|EXCEL_COLUMN_WIDTH_FACTOR
operator|/
name|UNIT_OFFSET_LENGTH
operator|)
argument_list|)
expr_stmt|;
return|return
name|pixels
return|;
block|}
specifier|public
specifier|static
name|double
name|widthUnits2Millimetres
parameter_list|(
name|short
name|widthUnits
parameter_list|)
block|{
return|return
name|ConvertImageUnits
operator|.
name|widthUnits2Pixel
argument_list|(
name|widthUnits
argument_list|)
operator|/
name|ConvertImageUnits
operator|.
name|PIXELS_PER_MILLIMETRES
return|;
block|}
specifier|public
specifier|static
name|int
name|millimetres2WidthUnits
parameter_list|(
name|double
name|millimetres
parameter_list|)
block|{
return|return
name|ConvertImageUnits
operator|.
name|pixel2WidthUnits
argument_list|(
operator|(
name|int
operator|)
operator|(
name|millimetres
operator|*
name|ConvertImageUnits
operator|.
name|PIXELS_PER_MILLIMETRES
operator|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|iLastLine
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|short
name|col
init|=
literal|0
init|;
name|col
operator|<=
name|iSheet
operator|.
name|getRow
argument_list|(
literal|0
argument_list|)
operator|.
name|getLastCellNum
argument_list|()
condition|;
name|col
operator|++
control|)
if|if
condition|(
name|iSheet
operator|.
name|getColumnWidth
argument_list|(
name|col
argument_list|)
operator|==
literal|256
operator|*
name|iSheet
operator|.
name|getDefaultColumnWidth
argument_list|()
condition|)
name|iSheet
operator|.
name|autoSizeColumn
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|iWorkbook
operator|.
name|write
argument_list|(
name|iOutput
argument_list|)
expr_stmt|;
name|iWorkbook
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

