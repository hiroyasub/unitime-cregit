begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_class
specifier|public
class|class
name|EventsExportMeetingsToCSV
extends|extends
name|EventsExportEventsToCSV
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"meetings.csv"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|print
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colPublishedStartTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colPublishedEndTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAllocatedStartTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAllocatedEndTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEmail
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEmail
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
expr_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|,
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
block|{
for|for
control|(
name|MeetingInterface
name|meeting
range|:
operator|new
name|TreeSet
argument_list|<
name|MeetingInterface
argument_list|>
argument_list|(
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|)
control|)
block|{
name|out
operator|.
name|print
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getSectionNumber
argument_list|()
argument_list|,
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|,
name|meeting
operator|.
name|getStartTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|true
argument_list|)
argument_list|,
name|meeting
operator|.
name|getEndTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|true
argument_list|)
argument_list|,
name|meeting
operator|.
name|getStartTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|false
argument_list|)
argument_list|,
name|meeting
operator|.
name|getEndTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|false
argument_list|)
argument_list|,
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|,
name|meeting
operator|.
name|hasLocation
argument_list|()
operator|&&
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|hasSize
argument_list|()
condition|?
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasInstructors
argument_list|()
condition|?
name|event
operator|.
name|getInstructorNames
argument_list|(
literal|"\n"
argument_list|)
else|:
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasInstructors
argument_list|()
condition|?
name|event
operator|.
name|getInstructorEmails
argument_list|(
literal|"\n"
argument_list|)
else|:
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasMaxCapacity
argument_list|()
condition|?
name|event
operator|.
name|getMaxCapacity
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|null
argument_list|,
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
name|df
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

