begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_class
specifier|public
class|class
name|ExportServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Exporter
argument_list|>
name|iExporters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Exporter
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|registerDefaultExporters
argument_list|()
expr_stmt|;
name|registerCustomExporters
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|register
parameter_list|(
name|Exporter
name|exporter
parameter_list|)
block|{
if|if
condition|(
name|exporter
operator|!=
literal|null
condition|)
name|iExporters
operator|.
name|put
argument_list|(
name|exporter
operator|.
name|reference
argument_list|()
argument_list|,
name|exporter
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerDefaultExporters
parameter_list|()
block|{
name|register
argument_list|(
operator|new
name|EventsExportEventsToCSV
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|EventsExportMeetingsToCSV
argument_list|()
argument_list|)
expr_stmt|;
name|register
argument_list|(
operator|new
name|EventsExportEventsToICal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|registerCustomExporters
parameter_list|()
block|{
name|String
name|customExports
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.exporters"
argument_list|)
decl_stmt|;
if|if
condition|(
name|customExports
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|exporterName
range|:
name|customExports
operator|.
name|split
argument_list|(
literal|"\\;"
argument_list|)
control|)
block|{
try|try
block|{
name|register
argument_list|(
operator|(
name|Exporter
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|exporterName
argument_list|)
operator|.
name|newInstance
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|ExportServletHelper
name|helper
init|=
operator|new
name|ExportServletHelper
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|String
name|ref
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"output"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No exporter provided."
argument_list|)
throw|;
name|Exporter
name|exporter
init|=
name|iExporters
operator|.
name|get
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|exporter
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Exporter "
operator|+
name|ref
operator|+
literal|" not known."
argument_list|)
throw|;
try|try
block|{
name|exporter
operator|.
name|export
argument_list|(
name|helper
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|helper
operator|.
name|hasOutputStream
argument_list|()
condition|)
block|{
name|helper
operator|.
name|getOutputStream
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|helper
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|hasWriter
argument_list|()
condition|)
block|{
name|helper
operator|.
name|getWriter
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|helper
operator|.
name|getWriter
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

