begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventLookupBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventRights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|SimpleEventRights
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventLookupRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MultiMeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_class
specifier|public
class|class
name|EventsExportEventsToCSV
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"events.csv"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"No academic session provided."
argument_list|)
throw|;
name|EventLookupRpcRequest
name|request
init|=
operator|new
name|EventLookupRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ext
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"ext"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
literal|null
condition|)
name|request
operator|.
name|setResourceExternalId
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|request
operator|.
name|setResourceType
argument_list|(
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilterRpcRequest
name|eventFilter
init|=
operator|new
name|EventFilterRpcRequest
argument_list|()
decl_stmt|;
name|eventFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setEventFilter
argument_list|(
name|eventFilter
argument_list|)
expr_stmt|;
name|RoomFilterRpcRequest
name|roomFilter
init|=
operator|new
name|RoomFilterRpcRequest
argument_list|()
decl_stmt|;
name|roomFilter
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|boolean
name|hasRoomFilter
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"e:text"
argument_list|)
condition|)
block|{
name|eventFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"e:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"e:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|eventFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|hasRoomFilter
operator|=
literal|true
expr_stmt|;
name|roomFilter
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
name|hasRoomFilter
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|roomFilter
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasRoomFilter
condition|)
name|request
operator|.
name|setRoomFilter
argument_list|(
name|roomFilter
argument_list|)
expr_stmt|;
name|String
name|user
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|u
operator|=
operator|new
name|User
argument_list|()
expr_stmt|;
name|u
operator|.
name|setId
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|eventFilter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|roomFilter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|String
name|role
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|!=
literal|null
condition|)
block|{
name|eventFilter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|roomFilter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|role
argument_list|)
expr_stmt|;
name|u
operator|.
name|setRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
block|}
name|EventRights
name|rights
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|checkRights
argument_list|()
condition|)
block|{
name|rights
operator|=
operator|new
name|SimpleEventRights
argument_list|(
name|helper
operator|.
name|getUser
argument_list|()
argument_list|,
literal|false
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|rights
operator|.
name|checkAccess
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getResourceType
argument_list|()
operator|==
name|ResourceType
operator|.
name|PERSON
operator|&&
operator|!
name|rights
operator|.
name|canSeeSchedule
argument_list|(
name|request
operator|.
name|getResourceExternalId
argument_list|()
argument_list|)
condition|)
throw|throw
name|rights
operator|.
name|getException
argument_list|()
throw|;
block|}
else|else
block|{
name|rights
operator|=
operator|new
name|SimpleEventRights
argument_list|(
name|u
argument_list|,
literal|false
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
name|print
argument_list|(
name|helper
argument_list|,
operator|new
name|EventLookupBackend
argument_list|()
operator|.
name|findEvents
argument_list|(
name|request
argument_list|,
name|rights
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|checkRights
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|)
throws|throws
name|IOException
block|{
name|helper
operator|.
name|setup
argument_list|(
literal|"text/csv"
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|print
argument_list|(
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
operator|!
literal|"false"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"smart"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|events
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|EventInterface
argument_list|>
name|events
parameter_list|)
block|{
name|out
operator|.
name|println
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colDayOfWeek
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colFirstDate
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colLastDate
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colPublishedStartTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colPublishedEndTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAllocatedStartTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAllocatedEndTime
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colSponsorOrInstructor
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEmail
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colMainContact
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colEmail
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colApproval
argument_list|()
argument_list|)
expr_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|CONSTANTS
operator|.
name|eventDateFormat
argument_list|()
argument_list|,
name|Localization
operator|.
name|getJavaLocale
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|EventInterface
name|event
range|:
name|events
control|)
block|{
for|for
control|(
name|MultiMeetingInterface
name|multi
range|:
name|EventInterface
operator|.
name|getMultiMeetings
argument_list|(
name|event
operator|.
name|getMeetings
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
control|)
block|{
name|MeetingInterface
name|meeting
init|=
name|multi
operator|.
name|getMeetings
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|out
operator|.
name|print
argument_list|(
name|event
operator|.
name|getName
argument_list|()
argument_list|,
name|event
operator|.
name|getSectionNumber
argument_list|()
argument_list|,
name|event
operator|.
name|hasInstruction
argument_list|()
condition|?
name|event
operator|.
name|getInstruction
argument_list|()
else|:
name|event
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|multi
operator|.
name|getDays
argument_list|(
name|CONSTANTS
argument_list|)
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|multi
operator|.
name|getFirstMeetingDate
argument_list|()
argument_list|)
argument_list|,
name|multi
operator|.
name|getNrMeetings
argument_list|()
operator|==
literal|1
condition|?
literal|null
else|:
name|df
operator|.
name|format
argument_list|(
name|multi
operator|.
name|getLastMeetingDate
argument_list|()
argument_list|)
argument_list|,
name|meeting
operator|.
name|getStartTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|true
argument_list|)
argument_list|,
name|meeting
operator|.
name|getEndTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|true
argument_list|)
argument_list|,
name|meeting
operator|.
name|getStartTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|false
argument_list|)
argument_list|,
name|meeting
operator|.
name|getEndTime
argument_list|(
name|CONSTANTS
argument_list|,
literal|false
argument_list|)
argument_list|,
name|meeting
operator|.
name|getLocationName
argument_list|()
argument_list|,
name|meeting
operator|.
name|hasLocation
argument_list|()
operator|&&
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|hasSize
argument_list|()
condition|?
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getSize
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasInstructors
argument_list|()
condition|?
name|event
operator|.
name|getInstructorNames
argument_list|(
literal|"\n"
argument_list|)
else|:
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasInstructors
argument_list|()
condition|?
name|event
operator|.
name|getInstructorEmails
argument_list|(
literal|"\n"
argument_list|)
else|:
name|event
operator|.
name|hasSponsor
argument_list|()
condition|?
name|event
operator|.
name|getSponsor
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasMaxCapacity
argument_list|()
condition|?
name|event
operator|.
name|getMaxCapacity
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|null
argument_list|,
name|event
operator|.
name|hasContact
argument_list|()
condition|?
name|event
operator|.
name|getContact
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|null
argument_list|,
name|multi
operator|.
name|isApproved
argument_list|()
condition|?
name|df
operator|.
name|format
argument_list|(
name|multi
operator|.
name|getApprovalDate
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|approvalNotApproved
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Printer
block|{
specifier|public
name|void
name|print
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
function_decl|;
specifier|public
name|void
name|println
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|CSVPrinter
implements|implements
name|Printer
block|{
specifier|private
name|PrintWriter
name|iOut
decl_stmt|;
specifier|private
name|String
index|[]
name|iLastLine
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCheckLast
init|=
literal|false
decl_stmt|;
specifier|public
name|CSVPrinter
parameter_list|(
name|PrintWriter
name|writer
parameter_list|,
name|boolean
name|checkLast
parameter_list|)
block|{
name|iOut
operator|=
name|writer
expr_stmt|;
name|iCheckLast
operator|=
name|checkLast
expr_stmt|;
block|}
specifier|public
name|void
name|print
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|f
operator|!=
literal|null
operator|&&
operator|!
name|f
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|iCheckLast
operator|||
operator|!
name|f
operator|.
name|equals
argument_list|(
name|iLastLine
operator|==
literal|null
operator|||
name|idx
operator|>=
name|iLastLine
operator|.
name|length
condition|?
literal|null
else|:
name|iLastLine
index|[
name|idx
index|]
argument_list|)
condition|)
name|iOut
operator|.
name|print
argument_list|(
literal|"\""
operator|+
name|f
operator|.
name|replace
argument_list|(
literal|"\""
argument_list|,
literal|"\"\""
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|iOut
operator|.
name|print
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|iOut
operator|.
name|println
argument_list|()
expr_stmt|;
name|iLastLine
operator|=
name|fields
expr_stmt|;
block|}
specifier|public
name|void
name|println
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
if|if
condition|(
name|fields
operator|!=
literal|null
operator|&&
name|fields
operator|.
name|length
operator|>
literal|0
condition|)
name|print
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|iLastLine
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

