begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|instructors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingAssignmentsPage
operator|.
name|SingleTeachingAssingment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingRequestsTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingRequestsTable
operator|.
name|COLUMN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsPageRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|instructor
operator|.
name|TeachingRequestsPageBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:teaching-requests.csv"
argument_list|)
specifier|public
class|class
name|TeachingRequestsExportCSV
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|SECTMSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"teaching-requests.csv"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|TeachingRequestsPageRequest
name|request
init|=
operator|new
name|TeachingRequestsPageRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"subjectId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"subjectId"
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
literal|"subjectId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|SubjectArea
name|subject
init|=
name|SubjectArea
operator|.
name|findByAbbv
argument_list|(
name|sessionId
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Subject area "
operator|+
name|helper
operator|.
name|getParameter
argument_list|(
literal|"subject"
argument_list|)
operator|+
literal|" does not exist."
argument_list|)
throw|;
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"subjectId"
argument_list|,
name|subject
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"offeringId"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"offeringId"
argument_list|,
name|helper
operator|.
name|getParameter
argument_list|(
literal|"offeringId"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"course"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|CourseOffering
name|course
init|=
name|CourseOffering
operator|.
name|findByName
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"course"
argument_list|)
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Course offering "
operator|+
name|helper
operator|.
name|getParameter
argument_list|(
literal|"course"
argument_list|)
operator|+
literal|" does not exist."
argument_list|)
throw|;
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"offeringId"
argument_list|,
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"assigned"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
literal|"assigned"
argument_list|,
operator|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"assigned"
argument_list|)
argument_list|)
operator|||
literal|"1"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"assigned"
argument_list|)
argument_list|)
operator|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|SingleTeachingAssingment
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|SingleTeachingAssingment
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasInstructors
init|=
literal|false
decl_stmt|;
for|for
control|(
name|TeachingRequestInfo
name|req
range|:
operator|new
name|TeachingRequestsPageBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|hasOption
argument_list|(
literal|"assigned"
argument_list|)
condition|)
block|{
if|if
condition|(
name|req
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|instructor
range|:
name|req
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|SingleTeachingAssingment
argument_list|(
name|instructor
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|hasInstructors
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|SingleTeachingAssingment
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getOption
argument_list|(
literal|"assigned"
argument_list|)
argument_list|)
operator|&&
name|req
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|instructor
range|:
name|req
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isMatchingFilter
argument_list|()
condition|)
continue|continue;
name|list
operator|.
name|add
argument_list|(
operator|new
name|SingleTeachingAssingment
argument_list|(
name|instructor
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|hasInstructors
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getOption
argument_list|(
literal|"assigned"
argument_list|)
argument_list|)
operator|&&
name|req
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|<
name|req
operator|.
name|getNrInstructors
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
operator|new
name|SingleTeachingAssingment
argument_list|(
literal|null
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|int
name|sort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|0
condition|)
block|{
name|TeachingRequestsTable
operator|.
name|TableComparator
name|cmp
init|=
operator|new
name|TeachingRequestsTable
operator|.
name|TableComparator
argument_list|(
name|COLUMN
operator|.
name|values
argument_list|()
index|[
name|Math
operator|.
name|abs
argument_list|(
name|sort
argument_list|)
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
name|sort
operator|<
literal|0
condition|?
name|Collections
operator|.
name|reverseOrder
argument_list|(
name|cmp
argument_list|)
else|:
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|cookie
init|=
literal|0xffff
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"columns"
argument_list|)
operator|!=
literal|null
condition|)
name|cookie
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"columns"
argument_list|)
argument_list|)
expr_stmt|;
name|export
argument_list|(
name|request
argument_list|,
name|list
argument_list|,
name|helper
argument_list|,
name|hasInstructors
argument_list|,
name|cookie
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|export
parameter_list|(
name|TeachingRequestsPageRequest
name|request
parameter_list|,
name|List
argument_list|<
name|SingleTeachingAssingment
argument_list|>
name|list
parameter_list|,
name|ExportHelper
name|helper
parameter_list|,
name|boolean
name|hasInstructors
parameter_list|,
name|int
name|cookie
parameter_list|)
throws|throws
name|IOException
block|{
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Column
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|Column
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Column
name|c
init|=
operator|new
name|Column
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|isColumnVisible
argument_list|(
name|c
argument_list|,
name|hasInstructors
argument_list|,
name|cookie
argument_list|)
condition|)
name|columns
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|header
index|[
name|i
index|]
operator|=
name|getColumnName
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|TeachingRequestInfo
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SingleTeachingAssingment
name|a
range|:
name|list
control|)
block|{
name|String
index|[]
name|row
init|=
operator|new
name|String
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn
argument_list|()
operator|.
name|isHasInstructor
argument_list|()
condition|)
name|row
index|[
name|i
index|]
operator|=
name|getCell
argument_list|(
name|a
operator|.
name|getRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getInstructor
argument_list|()
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|row
index|[
name|i
index|]
operator|=
name|getCell
argument_list|(
name|a
operator|.
name|getRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getInstructor
argument_list|()
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printLine
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|last
operator|=
name|a
operator|.
name|getRequest
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|getNbrCells
parameter_list|(
name|COLUMN
name|column
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|boolean
name|isColumnVisible
parameter_list|(
name|Column
name|column
parameter_list|,
name|boolean
name|hasInstructors
parameter_list|,
name|int
name|cookie
parameter_list|)
block|{
name|boolean
name|visible
init|=
operator|!
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|isCanHide
argument_list|()
operator|||
operator|(
name|cookie
operator|&
operator|(
literal|1
operator|<<
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|)
operator|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|hasInstructors
operator|&&
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|isCanHide
argument_list|()
operator|&&
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|isHasInstructor
argument_list|()
condition|)
name|visible
operator|=
literal|false
expr_stmt|;
return|return
name|visible
return|;
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|Column
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
operator|.
name|getColumn
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
return|return
name|MESSAGES
operator|.
name|colCourse
argument_list|()
return|;
case|case
name|SECTION
case|:
return|return
name|MESSAGES
operator|.
name|colSection
argument_list|()
return|;
case|case
name|TIME
case|:
return|return
name|MESSAGES
operator|.
name|colTime
argument_list|()
return|;
case|case
name|DATE
case|:
return|return
name|MESSAGES
operator|.
name|colDate
argument_list|()
return|;
case|case
name|ROOM
case|:
return|return
name|MESSAGES
operator|.
name|colRoom
argument_list|()
return|;
case|case
name|LOAD
case|:
return|return
name|MESSAGES
operator|.
name|colTeachingLoad
argument_list|()
return|;
case|case
name|ATTRIBUTE_PREFS
case|:
return|return
name|MESSAGES
operator|.
name|colAttributePreferences
argument_list|()
return|;
case|case
name|INSTRUCTOR_PREFS
case|:
return|return
name|MESSAGES
operator|.
name|colInstructorPreferences
argument_list|()
return|;
case|case
name|EXTERNAL_ID
case|:
return|return
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|MESSAGES
operator|.
name|colAttributes
argument_list|()
return|;
case|case
name|COURSE_PREF
case|:
return|return
name|MESSAGES
operator|.
name|colCoursePreferences
argument_list|()
return|;
case|case
name|DISTRIBUTION_PREF
case|:
return|return
name|MESSAGES
operator|.
name|colDistributionPreferences
argument_list|()
return|;
case|case
name|TIME_PREF
case|:
return|return
name|MESSAGES
operator|.
name|colTimePreferences
argument_list|()
return|;
case|case
name|ASSIGNED_LOAD
case|:
return|return
name|MESSAGES
operator|.
name|colAssignedLoad
argument_list|()
return|;
case|case
name|OBJECTIVES
case|:
return|return
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
return|;
case|case
name|ASSIGNED_INSTRUCTORS
case|:
return|return
name|MESSAGES
operator|.
name|colAssignedInstructors
argument_list|()
return|;
default|default:
return|return
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|getCell
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
specifier|final
name|InstructorInfo
name|instructor
parameter_list|,
name|Column
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
operator|.
name|getColumn
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
return|return
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
return|;
case|case
name|SECTION
case|:
name|String
name|sections
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|sections
operator|+=
operator|(
name|sections
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|sections
return|;
case|case
name|TIME
case|:
name|String
name|times
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|times
operator|+=
operator|(
name|times
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
operator|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|s
operator|.
name|getTime
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|times
return|;
case|case
name|DATE
case|:
name|String
name|dates
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|dates
operator|+=
operator|(
name|dates
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
operator|(
name|s
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|s
operator|.
name|getDate
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|dates
return|;
case|case
name|ROOM
case|:
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|rooms
operator|+=
operator|(
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
operator|(
name|s
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|s
operator|.
name|getRoom
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
case|case
name|LOAD
case|:
return|return
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|request
operator|.
name|getLoad
argument_list|()
argument_list|)
return|;
case|case
name|EXTERNAL_ID
case|:
return|return
operator|(
name|instructor
operator|==
literal|null
condition|?
literal|null
else|:
name|instructor
operator|.
name|getExternalId
argument_list|()
operator|)
return|;
case|case
name|NAME
case|:
return|return
operator|(
name|instructor
operator|==
literal|null
condition|?
literal|null
else|:
name|instructor
operator|.
name|getInstructorName
argument_list|()
operator|)
return|;
case|case
name|ATTRIBUTE_PREFS
case|:
return|return
name|preferences
argument_list|(
name|request
operator|.
name|getAttributePreferences
argument_list|()
argument_list|)
return|;
case|case
name|INSTRUCTOR_PREFS
case|:
return|return
name|preferences
argument_list|(
name|request
operator|.
name|getInstructorPreferences
argument_list|()
argument_list|)
return|;
case|case
name|COURSE_PREF
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|preferences
argument_list|(
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
return|;
case|case
name|DISTRIBUTION_PREF
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|preferences
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
return|;
case|case
name|TIME_PREF
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|preferences
argument_list|(
name|instructor
operator|.
name|getTimePreferences
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|attributes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|attribute
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|attributes
operator|+=
operator|(
name|attributes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|attribute
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|attribute
operator|.
name|hasType
argument_list|()
condition|?
literal|" ("
operator|+
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
case|case
name|ASSIGNED_LOAD
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
operator|+
literal|" / "
operator|+
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
return|;
case|case
name|OBJECTIVES
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|objectives
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|instructor
operator|.
name|getValues
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|Double
name|value
init|=
name|instructor
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|value
argument_list|)
operator|<
literal|0.001
condition|)
continue|continue;
name|objectives
operator|+=
operator|(
name|objectives
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|key
operator|+
literal|": "
operator|+
operator|(
name|value
operator|>
literal|0.0
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|objectives
return|;
case|case
name|ASSIGNED_INSTRUCTORS
case|:
return|return
name|request
operator|.
name|getNrAssignedInstructors
argument_list|()
operator|+
literal|" / "
operator|+
name|request
operator|.
name|getNrInstructors
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|preferences
parameter_list|(
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PreferenceInfo
name|pref
range|:
name|list
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|)
operator|+
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
operator|.
name|getPreference
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|pref
operator|.
name|getOwnerName
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
specifier|static
class|class
name|Column
block|{
specifier|private
name|COLUMN
name|iColumn
decl_stmt|;
specifier|private
name|int
name|iIndex
decl_stmt|;
name|Column
parameter_list|(
name|COLUMN
name|column
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|iIndex
return|;
block|}
specifier|public
name|COLUMN
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
block|}
block|}
end_class

end_unit

