begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|instructors
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|A
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|F
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingAssignmentsTable
operator|.
name|COLUMN
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingAssignmentsPage
operator|.
name|SingleTeachingAssingment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingAssignmentsPageRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:teaching-assignments.pdf"
argument_list|)
specifier|public
class|class
name|TeachingAssignmentsExportPDF
extends|extends
name|TeachingAssignmentsExportCSV
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"teaching-assignments.pdf"
return|;
block|}
specifier|protected
name|void
name|export
parameter_list|(
name|TeachingAssignmentsPageRequest
name|request
parameter_list|,
name|List
argument_list|<
name|SingleTeachingAssingment
argument_list|>
name|list
parameter_list|,
name|ExportHelper
name|helper
parameter_list|,
name|boolean
name|hasRequests
parameter_list|,
name|int
name|cookie
parameter_list|)
throws|throws
name|IOException
block|{
name|PDFPrinter
name|out
init|=
operator|new
name|PDFPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Column
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|Column
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Column
name|c
init|=
operator|new
name|Column
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|isColumnVisible
argument_list|(
name|c
argument_list|,
name|hasRequests
argument_list|,
name|cookie
argument_list|)
condition|)
name|columns
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|header
index|[
name|i
index|]
operator|=
name|getColumnName
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|out
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|boolean
name|vertical
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"vertical"
argument_list|)
operator|!=
literal|null
condition|)
name|vertical
operator|=
literal|"1"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"vertical"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|vertical
operator|=
name|RequiredTimeTable
operator|.
name|getTimeGridVertical
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|mode
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"mode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
literal|null
condition|)
name|mode
operator|=
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|grid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"grid"
argument_list|)
operator|!=
literal|null
condition|)
name|grid
operator|=
literal|"1"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"grid"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|grid
operator|=
operator|!
name|RequiredTimeTable
operator|.
name|getTimeGridAsText
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|InstructorInfo
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SingleTeachingAssingment
name|a
range|:
name|list
control|)
block|{
name|A
index|[]
name|row
init|=
operator|new
name|A
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getColumn
argument_list|()
operator|.
name|isHasRequest
argument_list|()
condition|)
block|{
name|row
index|[
name|i
index|]
operator|=
name|getPdfCell
argument_list|(
name|a
operator|.
name|getRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getInstructor
argument_list|()
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|grid
argument_list|,
name|vertical
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
index|[
name|i
index|]
operator|==
literal|null
condition|)
name|row
index|[
name|i
index|]
operator|=
operator|new
name|A
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|row
index|[
name|i
index|]
operator|=
operator|new
name|A
argument_list|()
expr_stmt|;
block|}
name|row
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|F
operator|.
name|NOSEPARATOR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|row
index|[
name|i
index|]
operator|=
name|getPdfCell
argument_list|(
name|a
operator|.
name|getRequest
argument_list|()
argument_list|,
name|a
operator|.
name|getInstructor
argument_list|()
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|grid
argument_list|,
name|vertical
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|printLine
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|last
operator|=
name|a
operator|.
name|getInstructor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|printLine
argument_list|(
operator|new
name|A
index|[]
block|{
operator|new
name|A
argument_list|(
name|MESSAGES
operator|.
name|errorNoData
argument_list|()
argument_list|,
name|F
operator|.
name|ITALIC
argument_list|)
operator|.
name|color
argument_list|(
literal|"#FF0000"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|public
name|A
name|getPdfCell
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
specifier|final
name|InstructorInfo
name|instructor
parameter_list|,
name|Column
name|column
parameter_list|,
name|boolean
name|grid
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|String
name|mode
parameter_list|)
block|{
switch|switch
condition|(
name|column
operator|.
name|getColumn
argument_list|()
condition|)
block|{
case|case
name|COURSE
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|A
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
return|;
case|case
name|SECTION
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|sections
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|sections
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|,
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|sections
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sections
return|;
case|case
name|TIME
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|times
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|times
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|s
operator|.
name|getTime
argument_list|()
argument_list|,
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|times
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|times
return|;
case|case
name|DATE
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|dates
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|dates
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|s
operator|.
name|getDate
argument_list|()
argument_list|,
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|dates
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|s
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dates
return|;
case|case
name|ROOM
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|rooms
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|rooms
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|s
operator|.
name|getRoom
argument_list|()
argument_list|,
name|F
operator|.
name|ITALIC
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|rooms
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|s
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|s
operator|.
name|getRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|rooms
return|;
case|case
name|EXTERNAL_ID
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
operator|||
name|instructor
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|extId
init|=
operator|new
name|A
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
name|extId
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|extId
return|;
case|case
name|NAME
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
operator|||
name|instructor
operator|.
name|getInstructorName
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|name
init|=
operator|new
name|A
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
name|name
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|name
return|;
case|case
name|ATTRIBUTE_PREFS
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|pdfPreferences
argument_list|(
name|request
operator|.
name|getAttributePreferences
argument_list|()
argument_list|)
return|;
case|case
name|INSTRUCTOR_PREFS
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|pdfPreferences
argument_list|(
name|request
operator|.
name|getInstructorPreferences
argument_list|()
argument_list|)
return|;
case|case
name|COURSE_PREF
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|pdfPreferences
argument_list|(
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
return|;
case|case
name|DISTRIBUTION_PREF
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|pdfPreferences
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
return|;
case|case
name|TIME_PREF
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|grid
operator|&&
name|instructor
operator|.
name|getAvailability
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|instructor
operator|.
name|getAvailability
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RequiredTimeTable
name|rtt
init|=
operator|new
name|RequiredTimeTable
argument_list|(
operator|new
name|TimePattern
argument_list|()
operator|.
name|getTimePatternModel
argument_list|()
argument_list|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setPreferences
argument_list|(
name|instructor
operator|.
name|getAvailability
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|A
argument_list|(
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|vertical
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|pdfPreferences
argument_list|(
name|instructor
operator|.
name|getTimePreferences
argument_list|()
argument_list|)
return|;
block|}
case|case
name|ATTRIBUTES
case|:
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|attributes
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|attribute
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|attributes
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|attribute
operator|.
name|hasType
argument_list|()
condition|?
literal|" ("
operator|+
name|attribute
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|attributes
return|;
case|case
name|OBJECTIVES
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|A
name|objectives
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|request
operator|.
name|getValues
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|Double
name|value
init|=
name|request
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|value
argument_list|)
operator|<
literal|0.001
condition|)
continue|continue;
name|A
name|obj
init|=
operator|new
name|A
argument_list|(
name|key
operator|+
literal|": "
operator|+
operator|(
name|value
operator|>
literal|0.0
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
literal|" Preferences"
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|<=
operator|-
literal|50.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"R"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|<=
operator|-
literal|2.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"-2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|<
literal|0.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>=
literal|50.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"P"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>=
literal|2.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|<
literal|0.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
literal|"#0f821e"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|obj
operator|.
name|setColor
argument_list|(
literal|"#c81e14"
argument_list|)
expr_stmt|;
block|}
name|objectives
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
return|return
name|objectives
return|;
default|default:
return|return
operator|new
name|A
argument_list|(
name|getCell
argument_list|(
name|request
argument_list|,
name|instructor
argument_list|,
name|column
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|A
name|pdfPreferences
parameter_list|(
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|A
name|ret
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|PreferenceInfo
name|pref
range|:
name|list
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|pref
operator|.
name|getOwnerName
argument_list|()
argument_list|)
operator|.
name|color
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
operator|.
name|getPreference
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

