begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|hql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|BufferedPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|XLSPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SavedHQLInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SavedHQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SavedHQLParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SavedHQLDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|AccessDeniedException
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:hql-report.xls"
argument_list|)
specifier|public
class|class
name|SavedHqlExportToXLS
extends|extends
name|SavedHqlExportToCSV
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"hql-report.xls"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
comment|// Check rights
name|SessionContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|HQLReports
argument_list|)
expr_stmt|;
comment|// Retrive report
name|String
name|report
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"report"
argument_list|)
decl_stmt|;
if|if
condition|(
name|report
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No report provided, please set the report parameter."
argument_list|)
throw|;
name|SavedHQL
name|hql
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hql
operator|=
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|report
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|hql
operator|==
literal|null
condition|)
name|hql
operator|=
operator|(
name|SavedHQL
operator|)
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SavedHQL where name = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|report
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|hql
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Report "
operator|+
name|report
operator|+
literal|" does not exist."
argument_list|)
throw|;
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"params"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|p
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"params"
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SavedHQL
operator|.
name|Option
name|o
range|:
name|SavedHQL
operator|.
name|Option
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|o
operator|.
name|allowSingleSelection
argument_list|()
operator|&&
operator|!
name|o
operator|.
name|allowMultiSelection
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|hql
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
literal|"%"
operator|+
name|o
operator|.
name|name
argument_list|()
operator|+
literal|"%"
argument_list|)
condition|)
block|{
name|SavedHQLInterface
operator|.
name|IdValue
name|v
init|=
operator|new
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|()
decl_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|o
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setText
argument_list|(
name|i
operator|<
name|p
operator|.
name|length
condition|?
name|p
index|[
name|i
index|]
else|:
literal|""
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|SavedHQL
operator|.
name|Option
name|option
range|:
name|SavedHQL
operator|.
name|Option
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hql
operator|.
name|getQuery
argument_list|()
operator|.
name|contains
argument_list|(
literal|"%"
operator|+
name|option
operator|.
name|name
argument_list|()
operator|+
literal|"%"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|option
operator|.
name|allowMultiSelection
argument_list|()
condition|)
block|{
name|String
index|[]
name|values
init|=
name|helper
operator|.
name|getParameterValues
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
operator|&&
name|values
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SavedHQLInterface
operator|.
name|IdValue
name|v
init|=
operator|new
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|()
decl_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|text
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|Long
name|id
init|=
name|option
operator|.
name|lookupValue
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|id
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
name|text
operator|+=
operator|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|id
expr_stmt|;
block|}
name|v
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|value
init|=
name|helper
operator|.
name|getParameter
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|SavedHQLInterface
operator|.
name|IdValue
name|v
init|=
operator|new
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|()
decl_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|option
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|id
init|=
name|option
operator|.
name|lookupValue
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|id
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
name|v
operator|.
name|setText
argument_list|(
name|id
operator|==
literal|null
condition|?
literal|""
else|:
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|SavedHQLParameter
name|p
range|:
name|hql
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|SavedHQLInterface
operator|.
name|IdValue
name|v
init|=
operator|new
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|()
decl_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|value
init|=
name|helper
operator|.
name|getParameter
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|v
operator|.
name|setText
argument_list|(
name|value
operator|==
literal|null
condition|?
name|p
operator|.
name|getDefaultValue
argument_list|()
else|:
name|value
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasAppearancePermission
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SavedHQL
operator|.
name|Flag
name|flag
range|:
name|SavedHQL
operator|.
name|Flag
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|hql
operator|.
name|isSet
argument_list|(
name|flag
argument_list|)
condition|)
block|{
if|if
condition|(
name|flag
operator|.
name|getAppearance
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|hasAppearancePermission
operator|&&
operator|(
name|flag
operator|.
name|getPermission
argument_list|()
operator|==
literal|null
operator|||
name|context
operator|.
name|hasPermission
argument_list|(
name|flag
operator|.
name|getPermission
argument_list|()
argument_list|)
operator|)
condition|)
name|hasAppearancePermission
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|flag
operator|.
name|getAppearance
argument_list|()
operator|==
literal|null
operator|&&
name|flag
operator|.
name|getPermission
argument_list|()
operator|!=
literal|null
condition|)
name|context
operator|.
name|checkPermission
argument_list|(
name|flag
operator|.
name|getPermission
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasAppearancePermission
condition|)
throw|throw
operator|new
name|AccessDeniedException
argument_list|()
throw|;
name|BufferedPrinter
name|out
init|=
operator|new
name|BufferedPrinter
argument_list|(
operator|new
name|XLSPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|hql
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'-'
argument_list|)
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'-'
argument_list|)
operator|+
literal|".xls"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|,
name|out
argument_list|,
name|hql
operator|.
name|getQuery
argument_list|()
argument_list|,
name|params
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
name|hql
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|sort
init|=
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|sort
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|asc
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sort
argument_list|)
operator|>
literal|0
decl_stmt|;
specifier|final
name|int
name|col
init|=
name|Math
operator|.
name|abs
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|sort
argument_list|)
argument_list|)
operator|-
literal|1
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|out
operator|.
name|getBuffer
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
block|{
name|int
name|compare
parameter_list|(
name|String
index|[]
name|a
parameter_list|,
name|String
index|[]
name|b
parameter_list|,
name|int
name|col
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|c
init|=
operator|(
name|col
operator|+
name|i
operator|)
operator|%
name|a
operator|.
name|length
decl_stmt|;
try|try
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|a
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|"0"
else|:
name|a
index|[
name|c
index|]
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|b
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|"0"
else|:
name|b
index|[
name|c
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|a
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|a
index|[
name|c
index|]
operator|)
operator|.
name|compareTo
argument_list|(
name|b
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|""
else|:
name|b
index|[
name|c
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|String
index|[]
name|a
parameter_list|,
name|String
index|[]
name|b
parameter_list|)
block|{
return|return
name|asc
condition|?
name|compare
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|col
argument_list|)
else|:
name|compare
argument_list|(
name|b
argument_list|,
name|a
argument_list|,
name|col
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

