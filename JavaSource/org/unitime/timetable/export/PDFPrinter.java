begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
operator|.
name|Printer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Chunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Phrase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfContentByte
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPCellEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfPTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|pdf
operator|.
name|PdfWriter
import|;
end_import

begin_class
specifier|public
class|class
name|PDFPrinter
implements|implements
name|Printer
block|{
specifier|private
name|OutputStream
name|iOutput
decl_stmt|;
specifier|private
name|String
index|[]
name|iLastLine
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCheckLast
init|=
literal|false
decl_stmt|;
specifier|private
name|PdfPTable
name|iTable
init|=
literal|null
decl_stmt|;
specifier|private
name|float
index|[]
name|iMaxWidth
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|iHiddenColumns
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|iElements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|PDFPrinter
parameter_list|(
name|OutputStream
name|output
parameter_list|,
name|boolean
name|checkLast
parameter_list|)
block|{
name|iOutput
operator|=
name|output
expr_stmt|;
name|iCheckLast
operator|=
name|checkLast
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"application/pdf"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hideColumn
parameter_list|(
name|int
name|col
parameter_list|)
block|{
name|iHiddenColumns
operator|.
name|add
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printHeader
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|iTable
operator|=
operator|new
name|PdfPTable
argument_list|(
name|fields
operator|.
name|length
operator|-
name|iHiddenColumns
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iMaxWidth
operator|=
operator|new
name|float
index|[
name|fields
operator|.
name|length
index|]
expr_stmt|;
name|iTable
operator|.
name|setHeaderRows
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidthPercentage
argument_list|(
literal|100
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fields
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
name|String
name|f
init|=
name|fields
index|[
name|idx
index|]
decl_stmt|;
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|()
decl_stmt|;
name|cell
operator|.
name|setBorder
argument_list|(
name|Rectangle
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getFont
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|cell
operator|.
name|addElement
argument_list|(
operator|new
name|Chunk
argument_list|(
name|f
argument_list|,
name|font
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|float
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|f
argument_list|,
literal|"\n"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|f
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iMaxWidth
index|[
name|idx
index|]
operator|=
name|width
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|printLine
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|PdfPCellEvent
name|setLineDashEvent
init|=
operator|new
name|PdfPCellEvent
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|cellLayout
parameter_list|(
name|PdfPCell
name|cell
parameter_list|,
name|Rectangle
name|rect
parameter_list|,
name|PdfContentByte
index|[]
name|canvas
parameter_list|)
block|{
name|PdfContentByte
name|cb
init|=
name|canvas
index|[
name|PdfPTable
operator|.
name|LINECANVAS
index|]
decl_stmt|;
name|cb
operator|.
name|setLineDash
argument_list|(
operator|new
name|float
index|[]
block|{
literal|2
block|,
literal|2
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|fields
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|idx
argument_list|)
condition|)
continue|continue;
name|String
name|f
init|=
name|fields
index|[
name|idx
index|]
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
operator|||
name|f
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|iCheckLast
operator|&&
name|f
operator|.
name|equals
argument_list|(
name|iLastLine
operator|==
literal|null
operator|||
name|idx
operator|>=
name|iLastLine
operator|.
name|length
condition|?
literal|null
else|:
name|iLastLine
index|[
name|idx
index|]
argument_list|)
operator|)
condition|)
name|f
operator|=
literal|""
expr_stmt|;
name|boolean
name|number
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|number
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getFont
argument_list|()
decl_stmt|;
name|Phrase
name|p
init|=
operator|new
name|Phrase
argument_list|(
name|f
argument_list|,
name|PdfFont
operator|.
name|getSmallFont
argument_list|()
argument_list|)
decl_stmt|;
name|PdfPCell
name|cell
init|=
operator|new
name|PdfPCell
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setBorder
argument_list|(
name|iLastLine
operator|==
literal|null
condition|?
name|Rectangle
operator|.
name|TOP
else|:
name|Rectangle
operator|.
name|NO_BORDER
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setVerticalAlignment
argument_list|(
name|Element
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setHorizontalAlignment
argument_list|(
name|number
condition|?
name|Element
operator|.
name|ALIGN_RIGHT
else|:
name|Element
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setPaddingBottom
argument_list|(
literal|4f
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setCellEvent
argument_list|(
name|setLineDashEvent
argument_list|)
expr_stmt|;
if|if
condition|(
name|number
condition|)
name|cell
operator|.
name|setPaddingRight
argument_list|(
literal|10f
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addCell
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|float
name|width
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|StringTokenizer
name|s
init|=
operator|new
name|StringTokenizer
argument_list|(
name|f
argument_list|,
literal|"\n"
argument_list|)
init|;
name|s
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|s
operator|.
name|nextToken
argument_list|()
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|width
operator|=
name|Math
operator|.
name|max
argument_list|(
name|width
argument_list|,
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|f
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iMaxWidth
index|[
name|idx
index|]
operator|=
name|Math
operator|.
name|max
argument_list|(
name|iMaxWidth
index|[
name|idx
index|]
argument_list|,
name|width
argument_list|)
expr_stmt|;
block|}
name|iLastLine
operator|=
name|fields
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|iLastLine
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|float
name|width
init|=
literal|0
decl_stmt|;
name|float
index|[]
name|w
init|=
operator|new
name|float
index|[
name|iMaxWidth
operator|.
name|length
operator|-
name|iHiddenColumns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|wi
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iMaxWidth
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|iHiddenColumns
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|width
operator|+=
literal|15f
operator|+
name|iMaxWidth
index|[
name|i
index|]
expr_stmt|;
name|w
index|[
name|wi
operator|++
index|]
operator|=
name|iMaxWidth
index|[
name|i
index|]
expr_stmt|;
block|}
name|Document
name|document
init|=
operator|new
name|Document
argument_list|(
operator|new
name|Rectangle
argument_list|(
literal|60f
operator|+
name|width
argument_list|,
literal|60f
operator|+
name|width
operator|*
literal|0.75f
argument_list|)
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|,
literal|30f
argument_list|)
decl_stmt|;
name|PdfWriter
name|writer
init|=
name|PdfWriter
operator|.
name|getInstance
argument_list|(
name|document
argument_list|,
name|iOutput
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setPageEvent
argument_list|(
operator|new
name|PdfEventHandler
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|open
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setWidths
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|document
operator|.
name|add
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|document
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

