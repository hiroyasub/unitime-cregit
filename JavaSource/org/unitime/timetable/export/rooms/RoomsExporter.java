begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|CommonValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|UserProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomsComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|AttachmentTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AttachementType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AttachementType
operator|.
name|VisibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeatureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|RoomDetailsBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|RoomPicturesBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|RoomsExporter
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|RoomFilterRpcRequest
name|request
init|=
operator|new
name|RoomFilterRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCommand
argument_list|(
name|FilterRpcRequest
operator|.
name|Command
operator|.
name|ENUMERATE
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|request
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|request
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|setOption
argument_list|(
literal|"flag"
argument_list|,
literal|"plain"
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isAuthenticated
argument_list|()
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|Rooms
argument_list|)
expr_stmt|;
name|ExportContext
name|ec
init|=
operator|new
name|ExportContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"dm"
argument_list|)
operator|!=
literal|null
condition|)
name|ec
operator|.
name|setDepartmentMode
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"dm"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|FilterRpcResponse
name|response
init|=
operator|new
name|FilterRpcResponse
argument_list|()
decl_stmt|;
operator|new
name|RoomDetailsBackend
argument_list|()
operator|.
name|enumarate
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomDetailInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasResults
argument_list|()
condition|)
block|{
for|for
control|(
name|Entity
name|e
range|:
name|response
operator|.
name|getResults
argument_list|()
control|)
name|rooms
operator|.
name|add
argument_list|(
operator|(
name|RoomDetailInterface
operator|)
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|RoomsComparator
name|cmp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|sort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|>
literal|0
condition|)
block|{
name|cmp
operator|=
operator|new
name|RoomsComparator
argument_list|(
name|RoomsColumn
operator|.
name|values
argument_list|()
index|[
name|sort
operator|-
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sort
operator|<
literal|0
condition|)
block|{
name|cmp
operator|=
operator|new
name|RoomsComparator
argument_list|(
name|RoomsColumn
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sort
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|rooms
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
name|ec
operator|.
name|setRoomCookieFlags
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"flags"
argument_list|)
operator|==
literal|null
condition|?
literal|0xffff
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"orientation"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|ec
operator|.
name|setVertical
argument_list|(
literal|"vertical"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"orientation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setGridAsText
argument_list|(
literal|"text"
operator|.
name|equals
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"orientation"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|context
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ec
operator|.
name|setVertical
argument_list|(
name|CommonValues
operator|.
name|VerticalGrid
operator|.
name|eq
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setGridAsText
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|false
else|:
name|CommonValues
operator|.
name|TextGrid
operator|.
name|eq
argument_list|(
name|UserProperty
operator|.
name|GridOrientation
operator|.
name|get
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ec
operator|.
name|setMode
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ec
operator|.
name|getMode
argument_list|()
operator|==
literal|null
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
name|ec
operator|.
name|setMode
argument_list|(
name|RequiredTimeTable
operator|.
name|getTimeGridSize
argument_list|(
name|context
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomFeatureType
name|type
range|:
operator|new
name|TreeSet
argument_list|<
name|RoomFeatureType
argument_list|>
argument_list|(
name|RoomFeatureTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
argument_list|)
control|)
name|ec
operator|.
name|addRoomFeatureType
argument_list|(
operator|new
name|FeatureTypeInterface
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|type
operator|.
name|isShowInEventManagement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AttachementType
name|type
range|:
name|AttachementType
operator|.
name|listTypes
argument_list|(
name|AttachementType
operator|.
name|VisibilityFlag
operator|.
name|ROOM_PICTURE_TYPE
argument_list|,
name|VisibilityFlag
operator|.
name|SHOW_ROOMS_TABLE
argument_list|)
control|)
name|ec
operator|.
name|addPictureType
argument_list|(
name|RoomPicturesBackend
operator|.
name|getPictureType
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setDepartment
argument_list|(
name|request
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|helper
argument_list|,
name|rooms
argument_list|,
name|ec
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|hasShowHideOperation
parameter_list|(
name|RoomsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|NAME
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
specifier|protected
name|int
name|getWebTableNbrCells
parameter_list|(
name|RoomsColumn
name|column
parameter_list|,
name|ExportContext
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|PICTURES
case|:
return|return
literal|1
operator|+
name|context
operator|.
name|getPictureTypes
argument_list|()
operator|.
name|size
argument_list|()
return|;
case|case
name|FEATURES
case|:
return|return
literal|1
operator|+
name|context
operator|.
name|getRoomFeatureTypes
argument_list|()
operator|.
name|size
argument_list|()
return|;
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|protected
name|int
name|getNbrCells
parameter_list|(
name|RoomsColumn
name|column
parameter_list|,
name|ExportContext
name|context
parameter_list|)
block|{
return|return
name|getWebTableNbrCells
argument_list|(
name|column
argument_list|,
name|context
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isColumnVisible
parameter_list|(
name|Column
name|column
parameter_list|,
name|ExportContext
name|context
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasShowHideOperation
argument_list|(
name|column
operator|.
name|getColumn
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|colIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|RoomsColumn
name|c
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|ordinal
argument_list|()
operator|<
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|ordinal
argument_list|()
condition|)
name|colIndex
operator|+=
name|getWebTableNbrCells
argument_list|(
name|c
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|column
operator|.
name|getIndex
argument_list|()
operator|<
name|getWebTableNbrCells
argument_list|(
name|column
operator|.
name|getColumn
argument_list|()
argument_list|,
name|context
argument_list|)
condition|)
name|colIndex
operator|+=
name|column
operator|.
name|getIndex
argument_list|()
expr_stmt|;
return|return
operator|(
name|context
operator|.
name|getRoomCookieFlags
argument_list|()
operator|&
operator|(
literal|1
operator|<<
name|colIndex
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
specifier|protected
name|String
name|getColumnName
parameter_list|(
name|Column
name|column
parameter_list|,
name|ExportContext
name|ec
parameter_list|)
block|{
switch|switch
condition|(
name|column
operator|.
name|getColumn
argument_list|()
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|MESSAGES
operator|.
name|colName
argument_list|()
return|;
case|case
name|TYPE
case|:
return|return
name|MESSAGES
operator|.
name|colType
argument_list|()
return|;
case|case
name|EXTERNAL_ID
case|:
return|return
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
return|;
case|case
name|CAPACITY
case|:
return|return
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
return|;
case|case
name|EXAM_CAPACITY
case|:
return|return
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
return|;
case|case
name|AREA
case|:
return|return
name|MESSAGES
operator|.
name|colArea
argument_list|(
name|ApplicationProperty
operator|.
name|RoomAreaUnitsMetric
operator|.
name|isTrue
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|roomAreaMetricUnitsShortPlainText
argument_list|()
else|:
name|CONSTANTS
operator|.
name|roomAreaUnitsShortPlainText
argument_list|()
argument_list|)
return|;
case|case
name|COORDINATES
case|:
return|return
name|MESSAGES
operator|.
name|colCoordinates
argument_list|()
return|;
case|case
name|DISTANCE_CHECK
case|:
return|return
name|MESSAGES
operator|.
name|colDistances
argument_list|()
return|;
case|case
name|ROOM_CHECK
case|:
return|return
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
return|;
case|case
name|MAP
case|:
return|return
name|MESSAGES
operator|.
name|colMap
argument_list|()
return|;
case|case
name|PICTURES
case|:
if|if
condition|(
name|column
operator|.
name|getIndex
argument_list|()
operator|==
literal|0
condition|)
return|return
name|MESSAGES
operator|.
name|colPictures
argument_list|()
return|;
else|else
return|return
name|ec
operator|.
name|getPictureTypes
argument_list|()
operator|.
name|get
argument_list|(
name|column
operator|.
name|getIndex
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getAbbreviation
argument_list|()
return|;
case|case
name|PREFERENCE
case|:
return|return
name|MESSAGES
operator|.
name|colPreference
argument_list|()
return|;
case|case
name|AVAILABILITY
case|:
return|return
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
return|;
case|case
name|DEPARTMENTS
case|:
return|return
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
return|;
case|case
name|CONTROL_DEPT
case|:
return|return
name|MESSAGES
operator|.
name|colControl
argument_list|()
return|;
case|case
name|EXAM_TYPES
case|:
return|return
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
return|;
case|case
name|PERIOD_PREF
case|:
return|return
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
return|;
case|case
name|EVENT_DEPARTMENT
case|:
return|return
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
return|;
case|case
name|EVENT_STATUS
case|:
return|return
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
return|;
case|case
name|EVENT_AVAILABILITY
case|:
return|return
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
return|;
case|case
name|EVENT_MESSAGE
case|:
return|return
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
return|;
case|case
name|BREAK_TIME
case|:
return|return
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
return|;
case|case
name|GROUPS
case|:
return|return
name|MESSAGES
operator|.
name|colGroups
argument_list|()
return|;
case|case
name|FEATURES
case|:
if|if
condition|(
name|column
operator|.
name|getIndex
argument_list|()
operator|==
literal|0
condition|)
return|return
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
return|;
else|else
return|return
name|ec
operator|.
name|getRoomFeatureTypes
argument_list|()
operator|.
name|get
argument_list|(
name|column
operator|.
name|getIndex
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getAbbreviation
argument_list|()
return|;
default|default:
return|return
name|column
operator|.
name|getColumn
argument_list|()
operator|.
name|name
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|ExportContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|protected
specifier|static
class|class
name|ExportContext
block|{
specifier|private
name|String
name|iDepartment
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FeatureTypeInterface
argument_list|>
name|iFeatureTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|FeatureTypeInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AttachmentTypeInterface
argument_list|>
name|iPictureTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|AttachmentTypeInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iDepartmentMode
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iRoomCookieFlags
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iGridAsText
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iVertical
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSeparator
init|=
literal|"\n"
decl_stmt|;
specifier|private
name|Format
argument_list|<
name|Number
argument_list|>
name|iAreaFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|roomAreaFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Format
argument_list|<
name|Number
argument_list|>
name|iCoordinateFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|roomCoordinateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|void
name|setDepartment
parameter_list|(
name|String
name|department
parameter_list|)
block|{
name|iDepartment
operator|=
name|department
expr_stmt|;
block|}
specifier|public
name|String
name|getDepartment
parameter_list|()
block|{
return|return
name|iDepartment
return|;
block|}
specifier|public
name|int
name|getDepartmentMode
parameter_list|()
block|{
return|return
name|iDepartmentMode
return|;
block|}
specifier|public
name|void
name|setDepartmentMode
parameter_list|(
name|int
name|deptMode
parameter_list|)
block|{
name|iDepartmentMode
operator|=
name|deptMode
expr_stmt|;
block|}
specifier|public
name|void
name|addRoomFeatureType
parameter_list|(
name|FeatureTypeInterface
name|type
parameter_list|)
block|{
name|iFeatureTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FeatureTypeInterface
argument_list|>
name|getRoomFeatureTypes
parameter_list|()
block|{
return|return
name|iFeatureTypes
return|;
block|}
specifier|public
name|void
name|addPictureType
parameter_list|(
name|AttachmentTypeInterface
name|type
parameter_list|)
block|{
name|iPictureTypes
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AttachmentTypeInterface
argument_list|>
name|getPictureTypes
parameter_list|()
block|{
return|return
name|iPictureTypes
return|;
block|}
specifier|public
name|void
name|setRoomCookieFlags
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
name|iRoomCookieFlags
operator|=
name|flags
expr_stmt|;
block|}
specifier|public
name|int
name|getRoomCookieFlags
parameter_list|()
block|{
return|return
name|iRoomCookieFlags
return|;
block|}
specifier|public
name|void
name|setGridAsText
parameter_list|(
name|boolean
name|gridAsText
parameter_list|)
block|{
name|iGridAsText
operator|=
name|gridAsText
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGridAsText
parameter_list|()
block|{
return|return
name|iGridAsText
return|;
block|}
specifier|public
name|void
name|setVertical
parameter_list|(
name|boolean
name|vertical
parameter_list|)
block|{
name|iVertical
operator|=
name|vertical
expr_stmt|;
block|}
specifier|public
name|boolean
name|isVertical
parameter_list|()
block|{
return|return
name|iVertical
return|;
block|}
specifier|public
name|void
name|setMode
parameter_list|(
name|String
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|String
name|getMode
parameter_list|()
block|{
return|return
name|iMode
return|;
block|}
specifier|public
name|void
name|setSeparator
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|iSeparator
operator|=
name|separator
expr_stmt|;
block|}
specifier|public
name|String
name|getSeparator
parameter_list|()
block|{
return|return
name|iSeparator
return|;
block|}
specifier|public
name|Format
argument_list|<
name|Number
argument_list|>
name|getAreaFormat
parameter_list|()
block|{
return|return
name|iAreaFormat
return|;
block|}
specifier|public
name|Format
argument_list|<
name|Number
argument_list|>
name|getCoordinateFormat
parameter_list|()
block|{
return|return
name|iCoordinateFormat
return|;
block|}
specifier|protected
name|String
name|dept2string
parameter_list|(
name|DepartmentInterface
name|d
parameter_list|,
name|boolean
name|ext
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
literal|""
return|;
switch|switch
condition|(
name|getDepartmentMode
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
else|:
name|d
operator|.
name|getAbbreviationOrCode
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
else|:
name|d
operator|.
name|getLabel
argument_list|()
return|;
case|case
literal|3
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
else|:
name|d
operator|.
name|getAbbreviationOrCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getLabel
argument_list|()
return|;
case|case
literal|4
case|:
return|return
name|ext
condition|?
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
else|:
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getLabel
argument_list|()
return|;
default|default:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|dept2string
parameter_list|(
name|Collection
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|,
name|boolean
name|ext
parameter_list|)
block|{
if|if
condition|(
name|departments
operator|==
literal|null
operator|||
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|departments
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|dept2string
argument_list|(
name|d
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|pref2string
parameter_list|(
name|Collection
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|)
block|{
if|if
condition|(
name|departments
operator|==
literal|null
operator|||
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|departments
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|dept2string
argument_list|(
name|d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|examTypes2string
parameter_list|(
name|Collection
argument_list|<
name|ExamTypeInterface
argument_list|>
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ExamTypeInterface
name|t
range|:
name|types
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|t
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|features2string
parameter_list|(
name|Collection
argument_list|<
name|FeatureInterface
argument_list|>
name|features
parameter_list|,
name|FeatureTypeInterface
name|type
parameter_list|)
block|{
if|if
condition|(
name|features
operator|==
literal|null
operator|||
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FeatureInterface
name|f
range|:
name|features
control|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
operator|&&
name|f
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|f
operator|.
name|getLabel
argument_list|()
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|f
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|f
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|dept2string
argument_list|(
name|f
operator|.
name|getDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|")"
expr_stmt|;
else|else
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|f
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|String
name|groups2string
parameter_list|(
name|Collection
argument_list|<
name|GroupInterface
argument_list|>
name|groups
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|==
literal|null
operator|||
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|GroupInterface
name|g
range|:
name|groups
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|getSeparator
argument_list|()
operator|)
operator|+
name|g
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|g
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|dept2string
argument_list|(
name|g
operator|.
name|getDepartment
argument_list|()
argument_list|,
literal|true
argument_list|)
operator|+
literal|")"
operator|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|Column
block|{
specifier|private
name|RoomsColumn
name|iColumn
decl_stmt|;
specifier|private
name|int
name|iIndex
decl_stmt|;
name|Column
parameter_list|(
name|RoomsColumn
name|column
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|iIndex
return|;
block|}
specifier|public
name|RoomsColumn
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
block|}
block|}
end_class

end_unit

