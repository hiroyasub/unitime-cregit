begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventAction
operator|.
name|EventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomFeaturesComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RoomFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFeaturesColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|SearchRoomFeaturesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|rooms
operator|.
name|RoomFeaturesBackend
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:roomfeatures.csv"
argument_list|)
specifier|public
class|class
name|RoomFeaturesExportCSV
implements|implements
name|Exporter
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"roomfeatures.csv"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|export
parameter_list|(
name|ExportHelper
name|helper
parameter_list|)
throws|throws
name|IOException
block|{
name|Long
name|sessionId
init|=
name|helper
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Academic session not provided, please set the term parameter."
argument_list|)
throw|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Given academic session no longer exists."
argument_list|)
throw|;
name|SearchRoomFeaturesRequest
name|request
init|=
operator|new
name|SearchRoomFeaturesRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setFilter
argument_list|(
operator|new
name|RoomFilterRpcRequest
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|helper
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|command
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|command
operator|.
name|equals
argument_list|(
literal|"r:text"
argument_list|)
condition|)
block|{
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|setText
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"r:text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|command
operator|.
name|startsWith
argument_list|(
literal|"r:"
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|value
range|:
name|helper
operator|.
name|getParameterValues
argument_list|(
name|command
argument_list|)
control|)
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|addOption
argument_list|(
name|command
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|EventContext
name|context
init|=
operator|new
name|EventContext
argument_list|(
name|helper
operator|.
name|getSessionContext
argument_list|()
argument_list|,
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|isAuthenticated
argument_list|()
operator|&&
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
operator|!=
literal|null
condition|)
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
name|GwtRpcResponseList
argument_list|<
name|FeatureInterface
argument_list|>
name|features
init|=
operator|new
name|RoomFeaturesBackend
argument_list|()
operator|.
name|execute
argument_list|(
name|request
argument_list|,
name|context
argument_list|)
decl_stmt|;
name|int
name|dm
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"dm"
argument_list|)
operator|!=
literal|null
condition|)
name|dm
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"dm"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|RoomFeaturesComparator
name|cmp
init|=
literal|null
decl_stmt|;
try|try
block|{
name|int
name|sort
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|helper
operator|.
name|getParameter
argument_list|(
literal|"sort"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sort
operator|>
literal|0
condition|)
block|{
name|cmp
operator|=
operator|new
name|RoomFeaturesComparator
argument_list|(
name|RoomFeaturesColumn
operator|.
name|values
argument_list|()
index|[
name|sort
operator|-
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sort
operator|<
literal|0
condition|)
block|{
name|cmp
operator|=
operator|new
name|RoomFeaturesComparator
argument_list|(
name|RoomFeaturesColumn
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sort
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|cmp
operator|!=
literal|null
condition|)
name|Collections
operator|.
name|sort
argument_list|(
name|features
argument_list|,
name|cmp
argument_list|)
expr_stmt|;
block|}
name|print
argument_list|(
name|helper
argument_list|,
name|features
argument_list|,
name|dm
argument_list|,
name|request
operator|.
name|getFilter
argument_list|()
operator|.
name|getOption
argument_list|(
literal|"department"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|features
parameter_list|,
name|int
name|dm
parameter_list|,
name|String
name|department
parameter_list|)
throws|throws
name|IOException
block|{
name|Printer
name|out
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|out
argument_list|,
name|features
argument_list|,
name|dm
argument_list|,
name|department
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|printHeader
parameter_list|(
name|Printer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|printHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAbbreviation
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colDepartment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colDescription
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colRooms
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|features
parameter_list|,
name|int
name|dm
parameter_list|,
name|String
name|department
parameter_list|)
throws|throws
name|IOException
block|{
name|printHeader
argument_list|(
name|out
argument_list|)
expr_stmt|;
for|for
control|(
name|FeatureInterface
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
name|feature
operator|.
name|isDepartmental
argument_list|()
condition|)
continue|continue;
name|printLine
argument_list|(
name|out
argument_list|,
name|feature
argument_list|,
name|dm
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FeatureInterface
name|feature
range|:
name|features
control|)
block|{
if|if
condition|(
operator|!
name|feature
operator|.
name|isDepartmental
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|department
operator|!=
literal|null
operator|&&
operator|!
name|department
operator|.
name|equals
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|department
operator|==
literal|null
operator|&&
operator|!
name|feature
operator|.
name|hasRooms
argument_list|()
condition|)
continue|continue;
name|printLine
argument_list|(
name|out
argument_list|,
name|feature
argument_list|,
name|dm
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|printLine
parameter_list|(
name|Printer
name|out
parameter_list|,
name|FeatureInterface
name|feature
parameter_list|,
name|int
name|dm
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|line
init|=
operator|new
name|String
index|[
literal|5
operator|+
operator|(
name|feature
operator|.
name|hasRooms
argument_list|()
condition|?
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|0
operator|)
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|line
index|[
name|idx
operator|++
index|]
operator|=
name|feature
operator|.
name|getLabel
argument_list|()
expr_stmt|;
name|line
index|[
name|idx
operator|++
index|]
operator|=
name|feature
operator|.
name|getAbbreviation
argument_list|()
expr_stmt|;
name|line
index|[
name|idx
operator|++
index|]
operator|=
operator|(
name|feature
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|feature
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|isDepartmental
argument_list|()
condition|)
name|line
index|[
name|idx
operator|++
index|]
operator|=
name|dept2string
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|dm
argument_list|)
expr_stmt|;
else|else
name|line
index|[
name|idx
operator|++
index|]
operator|=
literal|""
expr_stmt|;
name|line
index|[
name|idx
operator|++
index|]
operator|=
name|feature
operator|.
name|getDescription
argument_list|()
expr_stmt|;
if|if
condition|(
name|feature
operator|.
name|hasRooms
argument_list|()
condition|)
for|for
control|(
name|Entity
name|room
range|:
name|feature
operator|.
name|getRooms
argument_list|()
control|)
name|line
index|[
name|idx
operator|++
index|]
operator|=
name|name
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|out
operator|.
name|printLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|String
name|dept2string
parameter_list|(
name|DepartmentInterface
name|d
parameter_list|,
name|int
name|dm
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
return|return
literal|""
return|;
switch|switch
condition|(
name|dm
condition|)
block|{
case|case
literal|0
case|:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
case|case
literal|1
case|:
return|return
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
return|;
case|case
literal|2
case|:
return|return
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
return|;
case|case
literal|3
case|:
return|return
name|d
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
return|;
case|case
literal|4
case|:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" - "
operator|+
name|d
operator|.
name|getExtLabelWhenExist
argument_list|()
return|;
default|default:
return|return
name|d
operator|.
name|getDeptCode
argument_list|()
return|;
block|}
block|}
specifier|protected
name|String
name|name
parameter_list|(
name|Entity
name|room
parameter_list|)
block|{
return|return
operator|(
name|room
operator|.
name|getAbbreviation
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|,
name|room
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
else|:
name|room
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

