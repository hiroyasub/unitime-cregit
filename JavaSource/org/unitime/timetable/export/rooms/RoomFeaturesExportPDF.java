begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|A
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
operator|.
name|Entity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PdfFont
import|;
end_import

begin_import
import|import
name|com
operator|.
name|lowagie
operator|.
name|text
operator|.
name|Font
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:roomfeatures.pdf"
argument_list|)
specifier|public
class|class
name|RoomFeaturesExportPDF
extends|extends
name|RoomFeaturesExportCSV
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"roomfeatures.pdf"
return|;
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|FeatureInterface
argument_list|>
name|features
parameter_list|,
name|int
name|dm
parameter_list|,
name|String
name|department
parameter_list|)
throws|throws
name|IOException
block|{
name|Printer
name|out
init|=
operator|new
name|PDFPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|out
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|out
argument_list|,
name|features
argument_list|,
name|dm
argument_list|,
name|department
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|printHeader
parameter_list|(
name|Printer
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|printHeader
argument_list|(
name|MESSAGES
operator|.
name|colName
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colAbbreviation
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colDepartment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colRooms
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|colDescription
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|printLine
parameter_list|(
name|Printer
name|out
parameter_list|,
name|FeatureInterface
name|feature
parameter_list|,
name|int
name|dm
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|PDFPrinter
operator|)
name|out
operator|)
operator|.
name|printLine
argument_list|(
operator|new
name|A
argument_list|(
name|feature
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|feature
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|feature
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|feature
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|feature
operator|.
name|isDepartmental
argument_list|()
condition|?
name|dept2string
argument_list|(
name|feature
operator|.
name|getDepartment
argument_list|()
argument_list|,
name|dm
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
name|rooms
argument_list|(
name|feature
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|feature
operator|.
name|getDescription
argument_list|()
argument_list|)
operator|.
name|maxWidth
argument_list|(
literal|250f
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|A
name|rooms
parameter_list|(
name|FeatureInterface
name|feature
parameter_list|)
block|{
name|A
name|ret
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
if|if
condition|(
name|feature
operator|.
name|hasRooms
argument_list|()
condition|)
block|{
name|Font
name|font
init|=
name|PdfFont
operator|.
name|getFont
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entity
argument_list|>
name|i
init|=
name|feature
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|chip
init|=
name|name
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
decl_stmt|;
if|if
condition|(
name|font
operator|.
name|getBaseFont
argument_list|()
operator|.
name|getWidthPoint
argument_list|(
name|rooms
operator|+
name|chip
argument_list|,
name|font
operator|.
name|getSize
argument_list|()
argument_list|)
operator|<
literal|500f
condition|)
name|rooms
operator|+=
name|chip
expr_stmt|;
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|rooms
argument_list|)
argument_list|)
expr_stmt|;
name|rooms
operator|=
name|chip
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|rooms
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

