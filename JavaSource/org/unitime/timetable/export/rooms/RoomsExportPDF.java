begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|A
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|ExamTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|FeatureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|GroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|MidtermPeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PeriodPreferenceModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|LocationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|RequiredTimeTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:rooms.pdf"
argument_list|)
specifier|public
class|class
name|RoomsExportPDF
extends|extends
name|RoomsExporter
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"rooms.pdf"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|String
name|department
parameter_list|,
name|int
name|roomCookieFlags
parameter_list|,
name|int
name|deptMode
parameter_list|,
name|boolean
name|gridAsText
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkRights
argument_list|(
name|helper
argument_list|)
condition|)
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|RoomsExportPdf
argument_list|)
expr_stmt|;
name|Printer
name|printer
init|=
operator|new
name|PDFPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|printer
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hideColumns
argument_list|(
name|printer
argument_list|,
name|rooms
argument_list|,
name|roomCookieFlags
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|printer
argument_list|,
name|rooms
argument_list|,
name|department
argument_list|,
name|deptMode
argument_list|,
name|gridAsText
argument_list|,
name|vertical
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|hideColumn
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|RoomFlag
name|flag
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_TYPE
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CAPACITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EXAM_CAPACITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_AREA
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_COORDINATES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_IGNORE_DISTANCES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_IGNORE_ROOM_CHECK
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_PREFERENCE
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_AVAILABILITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_DEPARTMENTS
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CONTROLLING_DEPARTMENT
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EXAM_TYPES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|12
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_PERIOD_PREFERENCES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_DEPARTMENT
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|14
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_STATUS
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_AVAILABILITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_MESSAGE
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_BREAK_TIME
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_GROUPS
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|19
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_FEATURES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|20
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|String
name|department
parameter_list|,
name|int
name|deptMode
parameter_list|,
name|boolean
name|gridAsText
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|printHeader
argument_list|(
comment|/*  0 */
name|MESSAGES
operator|.
name|colName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  1 */
name|MESSAGES
operator|.
name|colType
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  2 */
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  3 */
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  4 */
name|MESSAGES
operator|.
name|colArea
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"&sup2;"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
comment|/*  5 */
name|MESSAGES
operator|.
name|colCoordinates
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  6 */
name|MESSAGES
operator|.
name|colDistances
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  7 */
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  8 */
name|MESSAGES
operator|.
name|colPreference
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  9 */
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 10 */
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 11 */
name|MESSAGES
operator|.
name|colControl
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 12 */
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 13 */
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 14 */
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 15 */
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 16 */
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 17 */
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 18 */
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 19 */
name|MESSAGES
operator|.
name|colGroups
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 20 */
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|Format
argument_list|<
name|Number
argument_list|>
name|af
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|roomAreaFormat
argument_list|()
argument_list|)
decl_stmt|;
name|Format
argument_list|<
name|Number
argument_list|>
name|cf
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
name|CONSTANTS
operator|.
name|roomCoordinateFormat
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RoomDetailInterface
name|room
range|:
name|rooms
control|)
block|{
operator|(
operator|(
name|PDFPrinter
operator|)
name|out
operator|)
operator|.
name|printLine
argument_list|(
name|name
argument_list|(
name|room
argument_list|,
name|department
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|right
argument_list|()
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|right
argument_list|()
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|af
operator|.
name|format
argument_list|(
name|room
operator|.
name|getArea
argument_list|()
argument_list|)
argument_list|)
operator|.
name|right
argument_list|()
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|hasCoordinates
argument_list|()
condition|?
name|cf
operator|.
name|format
argument_list|(
name|room
operator|.
name|getX
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
name|cf
operator|.
name|format
argument_list|(
name|room
operator|.
name|getY
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
argument_list|)
argument_list|,
name|pref2a
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|deptMode
argument_list|)
argument_list|,
name|availability
argument_list|(
name|room
argument_list|,
literal|false
argument_list|,
name|gridAsText
argument_list|,
name|vertical
argument_list|,
name|mode
argument_list|)
argument_list|,
name|dept2a
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|deptMode
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|dept2string
argument_list|(
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|deptMode
argument_list|)
argument_list|)
operator|.
name|color
argument_list|(
name|room
operator|.
name|getControlDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getControlDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|,
name|examTypes2a
argument_list|(
name|room
operator|.
name|getExamTypes
argument_list|()
argument_list|)
argument_list|,
name|periodPreferences
argument_list|(
name|room
argument_list|,
name|department
argument_list|,
name|gridAsText
argument_list|,
name|vertical
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|dept2string
argument_list|(
name|room
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|deptMode
argument_list|)
argument_list|)
operator|.
name|color
argument_list|(
name|room
operator|.
name|getEventDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|room
operator|.
name|getEventDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getEventStatus
argument_list|()
operator|!=
literal|null
condition|?
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|room
operator|.
name|getEventStatus
argument_list|()
index|]
else|:
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
operator|!=
literal|null
condition|?
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
index|]
else|:
literal|""
argument_list|)
operator|.
name|italic
argument_list|()
argument_list|,
name|availability
argument_list|(
name|room
argument_list|,
literal|true
argument_list|,
name|gridAsText
argument_list|,
name|vertical
argument_list|,
name|mode
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getEventNote
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getEventNote
argument_list|()
else|:
name|room
operator|.
name|getDefaultEventNote
argument_list|()
argument_list|)
argument_list|,
operator|new
name|A
argument_list|(
name|room
operator|.
name|getBreakTime
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
name|groups2a
argument_list|(
name|room
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|,
name|features2a
argument_list|(
name|room
operator|.
name|getFeatures
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|A
name|availability
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|boolean
name|events
parameter_list|,
name|boolean
name|gridAsText
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|String
name|mode
parameter_list|)
block|{
name|A
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
block|{
name|ret
operator|=
operator|new
name|A
argument_list|(
name|events
condition|?
name|room
operator|.
name|getEventAvailability
argument_list|()
else|:
name|room
operator|.
name|getAvailability
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Location
name|location
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|RequiredTimeTable
name|rtt
init|=
operator|(
name|events
condition|?
name|location
operator|.
name|getEventAvailabilityTable
argument_list|()
else|:
name|location
operator|.
name|getRoomSharingTable
argument_list|()
operator|)
decl_stmt|;
name|rtt
operator|.
name|getModel
argument_list|()
operator|.
name|setDefaultSelection
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|new
name|A
argument_list|(
name|rtt
operator|.
name|createBufferedImage
argument_list|(
name|vertical
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|events
operator|&&
name|room
operator|.
name|getRoomSharingNote
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|room
operator|.
name|getRoomSharingNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//else if (events&& (room.hasEventNote() || room.hasDefaultEventNote()))
comment|//	ret.add(new A(room.hasEventNote() ? room.getEventNote() : room.getDefaultEventNote()));
return|return
name|ret
return|;
block|}
specifier|protected
name|A
name|periodPreferences
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|String
name|department
parameter_list|,
name|boolean
name|gridAsText
parameter_list|,
name|boolean
name|vertical
parameter_list|)
block|{
name|Location
name|location
init|=
name|LocationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
name|location
operator|.
name|getExamTypes
argument_list|()
control|)
if|if
condition|(
name|type
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|department
argument_list|)
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|getType
argument_list|()
operator|==
name|ExamType
operator|.
name|sExamTypeMidterm
condition|)
block|{
return|return
operator|new
name|PDFMidtermPeriodPreferenceModel
argument_list|(
name|location
argument_list|,
name|type
argument_list|)
operator|.
name|toA
argument_list|()
return|;
block|}
else|else
block|{
name|PDFPeriodPreferenceModel
name|px
init|=
operator|new
name|PDFPeriodPreferenceModel
argument_list|(
name|location
argument_list|,
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|gridAsText
condition|)
return|return
name|px
operator|.
name|toA
argument_list|()
return|;
else|else
return|return
operator|new
name|A
argument_list|(
operator|new
name|RequiredTimeTable
argument_list|(
name|px
argument_list|)
operator|.
name|createBufferedImage
argument_list|(
name|vertical
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|A
argument_list|()
return|;
block|}
specifier|protected
name|A
name|name
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|String
name|department
parameter_list|)
block|{
name|A
name|a
init|=
operator|new
name|A
argument_list|(
name|room
operator|.
name|hasDisplayName
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
else|:
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|room
operator|.
name|getDepartments
argument_list|()
control|)
if|if
condition|(
name|d
operator|.
name|getDeptCode
argument_list|()
operator|.
name|equals
argument_list|(
name|department
argument_list|)
operator|&&
name|d
operator|.
name|getPreference
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setColor
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
specifier|protected
name|A
name|pref2a
parameter_list|(
name|Collection
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|,
name|int
name|deptMode
parameter_list|)
block|{
if|if
condition|(
name|departments
operator|==
literal|null
operator|||
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|A
argument_list|()
return|;
name|A
name|a
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|departments
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getPreference
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|dept2string
argument_list|(
name|d
argument_list|,
name|deptMode
argument_list|)
argument_list|)
operator|.
name|color
argument_list|(
name|d
operator|.
name|getPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|protected
name|A
name|dept2a
parameter_list|(
name|Collection
argument_list|<
name|DepartmentInterface
argument_list|>
name|departments
parameter_list|,
name|DepartmentInterface
name|control
parameter_list|,
name|int
name|deptMode
parameter_list|)
block|{
if|if
condition|(
name|departments
operator|==
literal|null
operator|||
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|A
argument_list|()
return|;
name|A
name|a
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|DepartmentInterface
name|d
range|:
name|departments
control|)
block|{
name|A
name|b
init|=
operator|new
name|A
argument_list|(
name|dept2string
argument_list|(
name|d
argument_list|,
name|deptMode
argument_list|)
argument_list|)
operator|.
name|color
argument_list|(
name|d
operator|.
name|getColor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|equals
argument_list|(
name|control
argument_list|)
condition|)
name|b
operator|.
name|underline
argument_list|()
expr_stmt|;
name|a
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|protected
name|A
name|examTypes2a
parameter_list|(
name|Collection
argument_list|<
name|ExamTypeInterface
argument_list|>
name|types
parameter_list|)
block|{
if|if
condition|(
name|types
operator|==
literal|null
operator|||
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|A
argument_list|()
return|;
name|A
name|a
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamTypeInterface
name|t
range|:
name|types
control|)
block|{
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|t
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|protected
name|A
name|features2a
parameter_list|(
name|Collection
argument_list|<
name|FeatureInterface
argument_list|>
name|features
parameter_list|)
block|{
if|if
condition|(
name|features
operator|==
literal|null
operator|||
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|A
argument_list|()
return|;
name|A
name|a
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|FeatureInterface
name|f
range|:
name|features
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|f
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|color
argument_list|(
name|f
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|f
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|f
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|f
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|f
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|color
argument_list|(
name|f
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|f
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|protected
name|A
name|groups2a
parameter_list|(
name|Collection
argument_list|<
name|GroupInterface
argument_list|>
name|groups
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|==
literal|null
operator|||
name|groups
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|A
argument_list|()
return|;
name|A
name|a
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupInterface
name|g
range|:
name|groups
control|)
block|{
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|g
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|g
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|g
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExtAbbreviationWhenExist
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
operator|.
name|color
argument_list|(
name|g
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|g
operator|.
name|getDepartment
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
specifier|static
class|class
name|PDFMidtermPeriodPreferenceModel
extends|extends
name|MidtermPeriodPreferenceModel
block|{
name|PDFMidtermPeriodPreferenceModel
parameter_list|(
name|Location
name|location
parameter_list|,
name|ExamType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|A
argument_list|>
name|toA
parameter_list|(
name|int
name|fDate
parameter_list|,
name|int
name|lDate
parameter_list|,
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|prefs
parameter_list|)
block|{
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|df
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EXAM_PERIOD
argument_list|)
decl_stmt|;
name|String
name|dates
init|=
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|fDate
argument_list|)
argument_list|)
operator|+
operator|(
name|fDate
operator|==
name|lDate
condition|?
literal|""
else|:
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|lDate
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|String
name|lastPref
init|=
literal|null
decl_stmt|;
name|int
name|fStart
init|=
operator|-
literal|1
decl_stmt|,
name|lStart
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|A
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|A
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|start
range|:
name|iStarts
control|)
block|{
name|String
name|pref
init|=
name|prefs
operator|.
name|get
argument_list|(
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|lastPref
operator|==
literal|null
condition|)
block|{
name|lastPref
operator|=
name|pref
expr_stmt|;
name|fStart
operator|=
name|start
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
if|if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
name|String
name|startTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|fStart
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|lStart
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|lStart
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
operator|(
name|iStarts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|?
literal|"Early"
else|:
literal|"Late"
else|:
name|startTime
operator|)
operator|+
operator|(
name|fStart
operator|==
name|lStart
condition|?
literal|""
else|:
literal|" - "
operator|+
name|endTime
operator|)
argument_list|)
operator|.
name|color
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|lastPref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lastPref
operator|=
name|pref
expr_stmt|;
name|fStart
operator|=
name|start
expr_stmt|;
block|}
name|lStart
operator|=
name|start
expr_stmt|;
block|}
if|if
condition|(
name|lastPref
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
if|else if
condition|(
operator|!
name|iLocation
operator|&&
name|PreferenceLevel
operator|.
name|sProhibited
operator|.
name|equals
argument_list|(
name|lastPref
argument_list|)
condition|)
block|{
comment|//
block|}
else|else
block|{
name|String
name|startTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|fStart
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|Constants
operator|.
name|toTime
argument_list|(
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
operator|(
name|lStart
operator|+
name|iLength
operator|.
name|get
argument_list|(
name|lStart
argument_list|)
operator|)
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
argument_list|)
decl_stmt|;
if|if
condition|(
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
argument_list|)
operator|.
name|color
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|lastPref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|lastPref
argument_list|)
operator|+
literal|" "
operator|+
name|dates
operator|+
literal|" "
operator|+
operator|(
name|iStarts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|?
name|fStart
operator|==
name|iStarts
operator|.
name|first
argument_list|()
condition|?
literal|"Early"
else|:
literal|"Late"
else|:
name|startTime
operator|)
operator|+
operator|(
name|fStart
operator|==
name|lStart
condition|?
literal|""
else|:
literal|" - "
operator|+
name|endTime
operator|)
argument_list|)
operator|.
name|color
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|lastPref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
name|A
name|toA
parameter_list|()
block|{
if|if
condition|(
name|iStarts
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|A
argument_list|()
return|;
name|A
name|ret
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|fPref
init|=
literal|null
decl_stmt|;
name|int
name|fDate
init|=
operator|-
literal|1
decl_stmt|,
name|lDate
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|Integer
name|date
range|:
name|iDates
control|)
block|{
name|Hashtable
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|pref
init|=
name|iPreferences
operator|.
name|get
argument_list|(
name|date
argument_list|)
decl_stmt|;
if|if
condition|(
name|fPref
operator|==
literal|null
condition|)
block|{
name|fPref
operator|=
name|pref
expr_stmt|;
name|fDate
operator|=
name|date
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|fPref
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
for|for
control|(
name|A
name|b
range|:
name|toA
argument_list|(
name|fDate
argument_list|,
name|lDate
argument_list|,
name|fPref
argument_list|)
control|)
name|ret
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|fPref
operator|=
name|pref
expr_stmt|;
name|fDate
operator|=
name|date
expr_stmt|;
block|}
name|lDate
operator|=
name|date
expr_stmt|;
block|}
if|if
condition|(
name|fPref
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|A
name|b
range|:
name|toA
argument_list|(
name|fDate
argument_list|,
name|lDate
argument_list|,
name|fPref
argument_list|)
control|)
name|ret
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
class|class
name|PDFPeriodPreferenceModel
extends|extends
name|PeriodPreferenceModel
block|{
name|PDFPeriodPreferenceModel
parameter_list|(
name|Location
name|location
parameter_list|,
name|ExamType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|location
operator|.
name|getSession
argument_list|()
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|load
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|A
name|toA
parameter_list|()
block|{
name|A
name|ret
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|String
name|pref
init|=
literal|null
decl_stmt|;
name|int
name|a
init|=
literal|0
decl_stmt|,
name|b
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|String
name|p
init|=
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
operator|||
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
argument_list|)
operator|+
literal|" "
operator|+
name|getDayHeader
argument_list|(
name|d
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|(
name|a
argument_list|)
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|color
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pref
operator|=
name|p
expr_stmt|;
name|a
operator|=
name|b
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|b
operator|=
name|t
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
literal|"@"
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|pref
argument_list|)
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2abbv
argument_list|(
name|pref
argument_list|)
operator|+
literal|" "
operator|+
name|getDayHeader
argument_list|(
name|d
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|(
name|a
argument_list|)
operator|+
literal|" - "
operator|+
name|getEndTime
argument_list|(
name|b
argument_list|)
argument_list|)
operator|.
name|color
argument_list|(
name|PreferenceLevel
operator|.
name|prolog2color
argument_list|(
name|pref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

