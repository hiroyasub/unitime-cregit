begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|XLSPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|PDFPrinter
operator|.
name|A
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|AttachmentTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomPictureInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomsColumn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:rooms.xls"
argument_list|)
specifier|public
class|class
name|RoomsExportXLS
extends|extends
name|RoomsExportPDF
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"rooms.xls"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|ExportContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|RoomsExportCsv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Column
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|Column
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomsColumn
name|column
range|:
name|RoomsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|,
name|context
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Column
name|c
init|=
operator|new
name|Column
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|isColumnVisible
argument_list|(
name|c
argument_list|,
name|context
argument_list|)
condition|)
name|columns
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
name|context
operator|.
name|setGridAsText
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|XLSPrinter
name|printer
init|=
operator|new
name|XLSPrinter
argument_list|(
name|helper
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|printer
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
index|[]
name|header
init|=
operator|new
name|String
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|header
index|[
name|i
index|]
operator|=
name|getColumnName
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|context
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
name|printer
operator|.
name|printHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|printer
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomDetailInterface
name|room
range|:
name|rooms
control|)
block|{
name|A
index|[]
name|row
init|=
operator|new
name|A
index|[
name|columns
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|row
index|[
name|i
index|]
operator|=
name|getCell
argument_list|(
name|room
argument_list|,
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|printer
operator|.
name|printLine
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|printer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|printer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|A
name|getCell
parameter_list|(
name|RoomDetailInterface
name|room
parameter_list|,
name|Column
name|column
parameter_list|,
name|ExportContext
name|context
parameter_list|)
block|{
switch|switch
condition|(
name|column
operator|.
name|getColumn
argument_list|()
condition|)
block|{
case|case
name|MAP
case|:
if|if
condition|(
name|room
operator|.
name|hasMiniMapUrl
argument_list|()
condition|)
block|{
try|try
block|{
return|return
operator|new
name|A
argument_list|(
name|ImageIO
operator|.
name|read
argument_list|(
operator|new
name|URL
argument_list|(
name|room
operator|.
name|getMiniMapUrl
argument_list|()
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
operator|new
name|A
argument_list|()
return|;
block|}
block|}
else|else
block|{
return|return
operator|new
name|A
argument_list|()
return|;
block|}
case|case
name|PICTURES
case|:
name|AttachmentTypeInterface
name|type
init|=
operator|(
name|column
operator|.
name|getIndex
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|context
operator|.
name|getPictureTypes
argument_list|()
operator|.
name|get
argument_list|(
name|column
operator|.
name|getIndex
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|hasPictures
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|A
name|a
init|=
operator|new
name|A
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomPictureInterface
name|picture
range|:
name|room
operator|.
name|getPictures
argument_list|(
name|type
argument_list|)
control|)
name|a
operator|.
name|add
argument_list|(
operator|new
name|A
argument_list|(
name|picture
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
else|else
block|{
return|return
operator|new
name|A
argument_list|()
return|;
block|}
default|default:
return|return
name|super
operator|.
name|getCell
argument_list|(
name|room
argument_list|,
name|column
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

