begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|rooms
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|CSVPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|ExportHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomDetailInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"org.unitime.timetable.export.Exporter:rooms.csv"
argument_list|)
specifier|public
class|class
name|RoomsExportCSV
extends|extends
name|RoomsExporter
block|{
annotation|@
name|Override
specifier|public
name|String
name|reference
parameter_list|()
block|{
return|return
literal|"rooms.csv"
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|print
parameter_list|(
name|ExportHelper
name|helper
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|String
name|department
parameter_list|,
name|int
name|roomCookieFlags
parameter_list|,
name|int
name|deptMode
parameter_list|,
name|boolean
name|gridAsText
parameter_list|,
name|boolean
name|vertical
parameter_list|,
name|String
name|mode
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkRights
argument_list|(
name|helper
argument_list|)
condition|)
name|helper
operator|.
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|RoomsExportCsv
argument_list|)
expr_stmt|;
name|Printer
name|printer
init|=
operator|new
name|CSVPrinter
argument_list|(
name|helper
operator|.
name|getWriter
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|helper
operator|.
name|setup
argument_list|(
name|printer
operator|.
name|getContentType
argument_list|()
argument_list|,
name|reference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hideColumns
argument_list|(
name|printer
argument_list|,
name|rooms
argument_list|,
name|roomCookieFlags
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|printer
argument_list|,
name|rooms
argument_list|,
name|deptMode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|hideColumn
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|RoomFlag
name|flag
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|SHOW_TYPE
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CAPACITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EXAM_CAPACITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_AREA
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_COORDINATES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|out
operator|.
name|hideColumn
argument_list|(
literal|6
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_IGNORE_DISTANCES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|7
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_IGNORE_ROOM_CHECK
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|8
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_PREFERENCE
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|9
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_AVAILABILITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|10
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_DEPARTMENTS
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|11
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_CONTROLLING_DEPARTMENT
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|12
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EXAM_TYPES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|13
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_PERIOD_PREFERENCES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|14
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_DEPARTMENT
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|15
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_STATUS
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|16
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_AVAILABILITY
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|17
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_EVENT_MESSAGE
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|18
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_BREAK_TIME
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|19
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_GROUPS
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|20
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHOW_FEATURES
case|:
name|out
operator|.
name|hideColumn
argument_list|(
literal|21
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|protected
name|void
name|print
parameter_list|(
name|Printer
name|out
parameter_list|,
name|List
argument_list|<
name|RoomDetailInterface
argument_list|>
name|rooms
parameter_list|,
name|int
name|deptMode
parameter_list|)
throws|throws
name|IOException
block|{
name|out
operator|.
name|printHeader
argument_list|(
comment|/*  0 */
name|MESSAGES
operator|.
name|colName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  1 */
name|MESSAGES
operator|.
name|colType
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  2 */
name|MESSAGES
operator|.
name|colCapacity
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  3 */
name|MESSAGES
operator|.
name|colExaminationCapacity
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  4 */
name|MESSAGES
operator|.
name|colArea
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"&sup2;"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
comment|/*  5 */
name|MESSAGES
operator|.
name|colCoordinateX
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  6 */
name|MESSAGES
operator|.
name|colCoordinateY
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  7 */
name|MESSAGES
operator|.
name|colDistances
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  8 */
name|MESSAGES
operator|.
name|colRoomCheck
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/*  9 */
name|MESSAGES
operator|.
name|colPreference
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 10 */
name|MESSAGES
operator|.
name|colAvailability
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 11 */
name|MESSAGES
operator|.
name|colDepartments
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 12 */
name|MESSAGES
operator|.
name|colControl
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 13 */
name|MESSAGES
operator|.
name|colExamTypes
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 14 */
name|MESSAGES
operator|.
name|colPeriodPreferences
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 15 */
name|MESSAGES
operator|.
name|colEventDepartment
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 16 */
name|MESSAGES
operator|.
name|colEventStatus
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 17 */
name|MESSAGES
operator|.
name|colEventAvailability
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 18 */
name|MESSAGES
operator|.
name|colEventMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 19 */
name|MESSAGES
operator|.
name|colBreakTime
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 20 */
name|MESSAGES
operator|.
name|colGroups
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
comment|/* 21 */
name|MESSAGES
operator|.
name|colFeatures
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomDetailInterface
name|room
range|:
name|rooms
control|)
block|{
name|out
operator|.
name|printLine
argument_list|(
name|room
operator|.
name|hasDisplayName
argument_list|()
condition|?
name|MESSAGES
operator|.
name|label
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
else|:
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
operator|.
name|getCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|room
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getExamCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|room
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getArea
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|room
operator|.
name|getX
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getX
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|room
operator|.
name|getY
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|room
operator|.
name|getY
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|room
operator|.
name|isIgnoreRoomCheck
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
argument_list|,
name|room
operator|.
name|isIgnoreTooFar
argument_list|()
condition|?
name|MESSAGES
operator|.
name|exportFalse
argument_list|()
else|:
name|MESSAGES
operator|.
name|exportTrue
argument_list|()
argument_list|,
name|pref2string
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|deptMode
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
name|room
operator|.
name|getAvailability
argument_list|()
argument_list|,
name|dept2string
argument_list|(
name|room
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|deptMode
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
name|dept2string
argument_list|(
name|room
operator|.
name|getControlDepartment
argument_list|()
argument_list|,
name|deptMode
argument_list|)
argument_list|,
name|examTypes2string
argument_list|(
name|room
operator|.
name|getExamTypes
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
name|room
operator|.
name|getPeriodPreference
argument_list|()
argument_list|,
name|dept2string
argument_list|(
name|room
operator|.
name|getEventDepartment
argument_list|()
argument_list|,
name|deptMode
argument_list|)
argument_list|,
name|room
operator|.
name|getEventStatus
argument_list|()
operator|!=
literal|null
condition|?
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|room
operator|.
name|getEventStatus
argument_list|()
index|]
else|:
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
operator|!=
literal|null
condition|?
name|CONSTANTS
operator|.
name|eventStatusAbbv
argument_list|()
index|[
name|room
operator|.
name|getDefaultEventStatus
argument_list|()
index|]
else|:
literal|""
argument_list|,
name|room
operator|.
name|getEventAvailability
argument_list|()
argument_list|,
name|room
operator|.
name|getEventNote
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getEventNote
argument_list|()
else|:
name|room
operator|.
name|getDefaultEventNote
argument_list|()
argument_list|,
name|room
operator|.
name|getBreakTime
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
operator|!=
literal|null
condition|?
name|room
operator|.
name|getDefaultBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|""
argument_list|,
name|groups2string
argument_list|(
name|room
operator|.
name|getGroups
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
name|features2string
argument_list|(
name|room
operator|.
name|getFeatures
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

