begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomSharingModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|RoomSharingImport
extends|extends
name|BaseImport
block|{
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sTimeFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
specifier|private
name|String
name|iTimeFormat
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"roomSharing"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a Room Sharing load file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|iTimeFormat
operator|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"timeFormat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTimeFormat
operator|==
literal|null
condition|)
name|iTimeFormat
operator|=
literal|"HHmm"
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"force"
argument_list|)
argument_list|)
operator|&&
name|Solution
operator|.
name|hasTimetable
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"Note: set the attribute force='true' of the root element to override the following import eligibility check."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Room sharing import is disabled: "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
operator|+
literal|" already has a committed timetable."
argument_list|)
throw|;
block|}
name|info
argument_list|(
literal|"Loading rooms..."
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|avoidRoomId
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|avoidRoomName
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|id2location
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|name2location
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Location
name|location
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Location where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|avoidRoomId
operator|.
name|contains
argument_list|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|Location
name|old
init|=
name|id2location
operator|.
name|put
argument_list|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"There are two or more rooms with the same external id "
operator|+
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|": "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" and "
operator|+
name|old
operator|.
name|getLabel
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|avoidRoomId
operator|.
name|add
argument_list|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|avoidRoomName
operator|.
name|contains
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|Location
name|old
init|=
name|name2location
operator|.
name|put
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"There are two or more rooms with the same name "
operator|+
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|avoidRoomName
operator|.
name|add
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|info
argument_list|(
literal|"Loading departments..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|id2department
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|code2department
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Department where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Department
name|old
init|=
name|id2department
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"There are two departments with the same external id "
operator|+
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|": "
operator|+
name|dept
operator|.
name|getLabel
argument_list|()
operator|+
literal|" and "
operator|+
name|old
operator|.
name|getLabel
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
name|Department
name|old
init|=
name|code2department
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dept
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"There are two rooms with the same code "
operator|+
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|": "
operator|+
name|dept
operator|.
name|getName
argument_list|()
operator|+
literal|" and "
operator|+
name|old
operator|.
name|getName
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
name|info
argument_list|(
literal|"Importing room sharing..."
argument_list|)
expr_stmt|;
name|int
name|nrChanged
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"location"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|locEl
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Location
name|location
init|=
literal|null
decl_stmt|;
name|String
name|locId
init|=
name|locEl
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|locId
operator|!=
literal|null
operator|&&
operator|!
name|avoidRoomId
operator|.
name|contains
argument_list|(
name|locId
argument_list|)
condition|)
block|{
name|location
operator|=
name|id2location
operator|.
name|get
argument_list|(
name|locId
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Location of id "
operator|+
name|locId
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|String
name|building
init|=
name|locEl
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
decl_stmt|;
name|String
name|roomNbr
init|=
name|locEl
operator|.
name|attributeValue
argument_list|(
literal|"roomNbr"
argument_list|)
decl_stmt|;
if|if
condition|(
name|building
operator|!=
literal|null
operator|&&
name|roomNbr
operator|!=
literal|null
operator|&&
operator|!
name|avoidRoomName
operator|.
name|contains
argument_list|(
name|building
operator|+
literal|" "
operator|+
name|roomNbr
argument_list|)
condition|)
block|{
name|location
operator|=
name|name2location
operator|.
name|get
argument_list|(
name|building
operator|+
literal|" "
operator|+
name|roomNbr
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Location of building "
operator|+
name|building
operator|+
literal|" and room number "
operator|+
name|roomNbr
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|String
name|name
init|=
name|locEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|avoidRoomName
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|location
operator|=
name|name2location
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Location of name "
operator|+
name|name
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|RoomDept
argument_list|>
name|existing
init|=
operator|new
name|HashSet
argument_list|<
name|RoomDept
argument_list|>
argument_list|(
name|location
operator|.
name|getRoomDepts
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|String
name|note
init|=
name|locEl
operator|.
name|attributeValue
argument_list|(
literal|"note"
argument_list|)
decl_stmt|;
if|if
condition|(
name|note
operator|==
literal|null
operator|&&
name|location
operator|.
name|getShareNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|location
operator|.
name|setShareNote
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": share note removed."
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|note
operator|!=
literal|null
operator|&&
operator|!
name|note
operator|.
name|equals
argument_list|(
name|location
operator|.
name|getShareNote
argument_list|()
argument_list|)
condition|)
block|{
name|location
operator|.
name|setShareNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": share note changed to '"
operator|+
name|note
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|department
label|:
for|for
control|(
name|Iterator
name|j
init|=
name|locEl
operator|.
name|elementIterator
argument_list|(
literal|"department"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|deptEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
name|String
name|deptId
init|=
name|deptEl
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptId
operator|!=
literal|null
condition|)
block|{
name|dept
operator|=
name|id2department
operator|.
name|get
argument_list|(
name|deptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
name|warn
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": Department of id "
operator|+
name|deptId
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
name|String
name|deptCode
init|=
name|deptEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCode
operator|!=
literal|null
condition|)
block|{
name|dept
operator|=
name|code2department
operator|.
name|get
argument_list|(
name|deptCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
name|warn
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": Department of code "
operator|+
name|deptCode
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
continue|continue;
name|Boolean
name|control
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|deptEl
operator|.
name|attributeValue
argument_list|(
literal|"control"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomDept
argument_list|>
name|k
init|=
name|existing
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|dept
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|control
operator|.
name|equals
argument_list|(
name|rd
operator|.
name|getControl
argument_list|()
argument_list|)
condition|)
block|{
name|rd
operator|.
name|setControl
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": "
operator|+
operator|(
name|control
condition|?
literal|" control moved to "
operator|+
name|dept
operator|.
name|getLabel
argument_list|()
else|:
literal|" control removed from "
operator|+
name|dept
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|k
operator|.
name|remove
argument_list|()
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
continue|continue
name|department
continue|;
block|}
block|}
name|RoomDept
name|rd
init|=
operator|new
name|RoomDept
argument_list|()
decl_stmt|;
name|rd
operator|.
name|setControl
argument_list|(
name|control
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setDepartment
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|rd
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|dept
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|add
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|departments
operator|.
name|add
argument_list|(
name|dept
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": added "
operator|+
operator|(
name|control
condition|?
literal|"controlling "
else|:
literal|""
operator|)
operator|+
literal|" department"
operator|+
name|dept
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|RoomDept
name|rd
range|:
name|existing
control|)
block|{
name|info
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": removed "
operator|+
operator|(
name|rd
operator|.
name|isControl
argument_list|()
condition|?
literal|"controlling "
else|:
literal|""
operator|)
operator|+
literal|" department"
operator|+
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|remove
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|rd
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|RoomSharingModel
name|model
init|=
name|location
operator|.
name|getRoomSharingModel
argument_list|()
decl_stmt|;
name|String
name|oldModel
init|=
name|model
operator|.
name|toString
argument_list|()
decl_stmt|;
name|model
operator|.
name|setPreferences
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Element
name|sharingEl
init|=
name|locEl
operator|.
name|element
argument_list|(
literal|"sharing"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharingEl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|sharingEl
operator|.
name|elementIterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimeObject
name|time
init|=
operator|new
name|TimeObject
argument_list|(
name|el
operator|.
name|attributeValue
argument_list|(
literal|"start"
argument_list|)
argument_list|,
name|el
operator|.
name|attributeValue
argument_list|(
literal|"end"
argument_list|)
argument_list|,
name|el
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|pref
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"unavailable"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|pref
operator|=
name|RoomSharingModel
operator|.
name|sNotAvailablePref
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"assigned"
operator|.
name|equals
argument_list|(
name|el
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Department
name|dept
init|=
literal|null
decl_stmt|;
name|String
name|deptId
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptId
operator|!=
literal|null
condition|)
block|{
name|dept
operator|=
name|id2department
operator|.
name|get
argument_list|(
name|deptId
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
name|warn
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": Department of id "
operator|+
name|deptId
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
name|String
name|deptCode
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deptCode
operator|!=
literal|null
condition|)
block|{
name|dept
operator|=
name|code2department
operator|.
name|get
argument_list|(
name|deptCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
name|warn
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": Department of code "
operator|+
name|deptCode
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|departments
operator|.
name|contains
argument_list|(
name|dept
argument_list|)
condition|)
block|{
name|warn
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": Department "
operator|+
name|dept
operator|.
name|getLabel
argument_list|()
operator|+
literal|" is not among the room sharing departments."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|pref
operator|=
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pref
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|time
operator|.
name|hasDays
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|d
range|:
name|time
operator|.
name|getDays
argument_list|()
control|)
for|for
control|(
name|int
name|t
init|=
name|time
operator|.
name|getStartPeriod
argument_list|()
init|;
name|t
operator|<
name|time
operator|.
name|getEndPeriod
argument_list|()
condition|;
name|t
operator|++
control|)
name|model
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|t
init|=
name|time
operator|.
name|getStartPeriod
argument_list|()
init|;
name|t
operator|<
name|time
operator|.
name|getEndPeriod
argument_list|()
condition|;
name|t
operator|++
control|)
name|model
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|pref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|newModel
init|=
name|model
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|oldModel
operator|.
name|equals
argument_list|(
name|newModel
argument_list|)
condition|)
block|{
name|info
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|": room sharing changed to "
operator|+
operator|(
name|newModel
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"free for all"
else|:
name|newModel
operator|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|location
operator|.
name|setRoomSharingModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|nrChanged
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|nrChanged
operator|==
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"No change detected."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
name|nrChanged
operator|+
literal|" locations have changed."
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
class|class
name|TimeObject
block|{
specifier|private
name|Integer
name|iStartPeriod
decl_stmt|;
specifier|private
name|Integer
name|iEndPeriod
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Integer
argument_list|>
name|iDays
init|=
literal|null
decl_stmt|;
name|TimeObject
parameter_list|(
name|String
name|startTime
parameter_list|,
name|String
name|endTime
parameter_list|,
name|String
name|daysOfWeek
parameter_list|)
throws|throws
name|Exception
block|{
name|iStartPeriod
operator|=
operator|(
name|startTime
operator|==
literal|null
condition|?
literal|0
else|:
name|str2Slot
argument_list|(
name|startTime
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|iStartPeriod
operator|<
literal|0
operator|||
name|iStartPeriod
operator|>=
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|)
name|iStartPeriod
operator|=
literal|0
expr_stmt|;
name|iEndPeriod
operator|=
operator|(
name|endTime
operator|==
literal|null
condition|?
name|Constants
operator|.
name|SLOTS_PER_DAY
else|:
name|str2Slot
argument_list|(
name|endTime
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
name|iEndPeriod
operator|<
literal|0
operator|||
name|iEndPeriod
operator|>
name|Constants
operator|.
name|SLOTS_PER_DAY
condition|)
block|{
name|iEndPeriod
operator|=
name|Constants
operator|.
name|SLOTS_PER_DAY
expr_stmt|;
block|}
if|if
condition|(
name|iStartPeriod
operator|>
name|iEndPeriod
condition|)
block|{
name|error
argument_list|(
literal|"Invalid time '"
operator|+
name|startTime
operator|+
literal|"' -- must be before "
operator|+
name|endTime
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|int
name|x
init|=
name|iStartPeriod
decl_stmt|;
name|iStartPeriod
operator|=
name|iEndPeriod
expr_stmt|;
name|iEndPeriod
operator|=
name|x
expr_stmt|;
block|}
if|if
condition|(
name|daysOfWeek
operator|!=
literal|null
condition|)
name|setDaysOfWeek
argument_list|(
name|daysOfWeek
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDaysOfWeek
parameter_list|(
name|String
name|daysOfWeek
parameter_list|)
block|{
name|iDays
operator|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|tmpDays
init|=
name|daysOfWeek
decl_stmt|;
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"Th"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_THU
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"Th"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"R"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_THU
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"R"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"Su"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_SUN
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"Su"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"U"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_SUN
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"U"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"M"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_MON
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"M"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"T"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_TUE
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"T"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"W"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_WED
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"W"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_FRI
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"F"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|Constants
operator|.
name|DAY_SAT
argument_list|)
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"S"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Integer
name|getStartPeriod
parameter_list|()
block|{
return|return
name|iStartPeriod
return|;
block|}
specifier|public
name|Integer
name|getEndPeriod
parameter_list|()
block|{
return|return
name|iEndPeriod
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|boolean
name|hasDays
parameter_list|()
block|{
return|return
name|iDays
operator|!=
literal|null
return|;
block|}
specifier|public
name|Integer
name|str2Slot
parameter_list|(
name|String
name|timeString
parameter_list|)
block|{
try|try
block|{
name|int
name|time
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|"HHmm"
operator|.
name|equals
argument_list|(
name|iTimeFormat
argument_list|)
condition|)
block|{
name|time
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|timeString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Date
name|date
init|=
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|timeString
argument_list|,
name|iTimeFormat
argument_list|)
decl_stmt|;
name|time
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|sTimeFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|hour
init|=
name|time
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|time
operator|%
literal|100
decl_stmt|;
if|if
condition|(
name|hour
operator|>
literal|24
operator|||
operator|(
name|hour
operator|==
literal|24
operator|&&
name|min
operator|>
literal|0
operator|)
condition|)
block|{
name|error
argument_list|(
literal|"Invalid time '"
operator|+
name|timeString
operator|+
literal|"' -- hour ("
operator|+
name|hour
operator|+
literal|") must be between 0 and 23."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|>=
literal|60
condition|)
block|{
name|error
argument_list|(
literal|"Invalid time '"
operator|+
name|timeString
operator|+
literal|"' -- minute ("
operator|+
name|min
operator|+
literal|") must be between 0 and 59."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
block|{
name|warn
argument_list|(
literal|"Invalid time '"
operator|+
name|timeString
operator|+
literal|"' -- minute ("
operator|+
name|min
operator|+
literal|") must be divisible by "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|min
operator|-=
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
name|error
argument_list|(
literal|"Invalid time '"
operator|+
name|timeString
operator|+
literal|"' -- not a number."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Invalid time '"
operator|+
name|timeString
operator|+
literal|"' -- does not meet the format: "
operator|+
name|iTimeFormat
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

