begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|XMLWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|instructor
operator|.
name|InstructorSchedulingProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|spring
operator|.
name|SpringApplicationContextHolder
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverImport
extends|extends
name|BaseImport
block|{
annotation|@
name|Override
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|SolverServerService
name|solverService
init|=
operator|(
name|SolverServerService
operator|)
name|SpringApplicationContextHolder
operator|.
name|getBean
argument_list|(
literal|"solverServerService"
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"timetable"
argument_list|)
operator|||
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"coursett"
argument_list|)
condition|)
block|{
name|root
operator|.
name|setName
argument_list|(
literal|"timetable"
argument_list|)
expr_stmt|;
name|SolverProxy
name|solver
init|=
name|solverService
operator|.
name|getCourseSolverContainer
argument_list|()
operator|.
name|createSolver
argument_list|(
name|getManager
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|getConfig
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|solver
operator|.
name|importXml
argument_list|(
name|toData
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"examtt"
argument_list|)
condition|)
block|{
name|ExamSolverProxy
name|solver
init|=
name|solverService
operator|.
name|getExamSolverContainer
argument_list|()
operator|.
name|createSolver
argument_list|(
name|getManager
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|getConfig
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|solver
operator|.
name|importXml
argument_list|(
name|toData
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sectioning"
argument_list|)
condition|)
block|{
name|StudentSolverProxy
name|solver
init|=
name|solverService
operator|.
name|getStudentSolverContainer
argument_list|()
operator|.
name|createSolver
argument_list|(
name|getManager
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|getConfig
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|solver
operator|.
name|importXml
argument_list|(
name|toData
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"instructor-schedule"
argument_list|)
condition|)
block|{
name|InstructorSchedulingProxy
name|solver
init|=
name|solverService
operator|.
name|getInstructorSchedulingContainer
argument_list|()
operator|.
name|createSolver
argument_list|(
name|getManager
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|getConfig
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|solver
operator|.
name|importXml
argument_list|(
name|toData
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a solver file."
argument_list|)
throw|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|DataProperties
name|getConfig
parameter_list|(
name|Element
name|root
parameter_list|)
block|{
name|DataProperties
name|config
init|=
operator|new
name|DataProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|.
name|element
argument_list|(
literal|"configuration"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|element
argument_list|(
literal|"configuration"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"property"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|e
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
name|getManager
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"initiative"
argument_list|,
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
argument_list|)
argument_list|,
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
argument_list|,
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.SessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Long
name|sessionId
init|=
name|config
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Academic session id not provided."
argument_list|)
throw|;
block|}
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Academic session "
operator|+
name|sessionId
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
block|}
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.Save"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.CreateNewSolution"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"General.Unload"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|config
return|;
block|}
specifier|protected
name|byte
index|[]
name|toData
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|UnsupportedEncodingException
throws|,
name|IOException
block|{
name|Element
name|configEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"configuration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configEl
operator|!=
literal|null
condition|)
name|root
operator|.
name|remove
argument_list|(
name|configEl
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|ret
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
operator|(
operator|new
name|XMLWriter
argument_list|(
name|ret
argument_list|,
name|OutputFormat
operator|.
name|createCompactFormat
argument_list|()
argument_list|)
operator|)
operator|.
name|write
argument_list|(
name|root
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|flush
argument_list|()
expr_stmt|;
name|ret
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|ret
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
end_class

end_unit

