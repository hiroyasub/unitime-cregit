begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Degree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajorConcentration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AcademicSessionSetupExport
extends|extends
name|BaseExport
block|{
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"yyyy/M/d"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sTwoNumbersDF
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sFloatFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"sessionSetup"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"dateFormat"
argument_list|,
name|sDateFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exportSession
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportManagers
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportDepartments
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportSubjectAreas
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportSolverGroups
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportDatePatterns
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportTimePatterns
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportExaminationPeriods
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportAcademicAreas
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportAcademicClassifications
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportMajors
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportMinors
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportDegrees
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportStudentGroups
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportStudentAccomodations
argument_list|(
name|root
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportSession
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|sessionEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
name|sessionEl
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionEl
operator|.
name|addAttribute
argument_list|(
literal|"endDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionEl
operator|.
name|addAttribute
argument_list|(
literal|"classEndDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getClassesEndDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionEl
operator|.
name|addAttribute
argument_list|(
literal|"examStartDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionEl
operator|.
name|addAttribute
argument_list|(
literal|"eventStartDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getEventBeginDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sessionEl
operator|.
name|addAttribute
argument_list|(
literal|"eventEndDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getEventEndDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|holidaysEl
init|=
name|sessionEl
operator|.
name|addElement
argument_list|(
literal|"holidays"
argument_list|)
decl_stmt|;
name|int
name|acadYear
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|int
name|startMonth
init|=
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|session
operator|.
name|getEventBeginDate
argument_list|()
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getEventBeginDate
argument_list|()
operator|.
name|before
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
condition|?
name|session
operator|.
name|getEventBeginDate
argument_list|()
else|:
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|acadYear
argument_list|,
name|ApplicationProperty
operator|.
name|SessionNrExcessDays
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|DateUtils
operator|.
name|getEndMonth
argument_list|(
name|session
operator|.
name|getEventEndDate
argument_list|()
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getEventEndDate
argument_list|()
operator|.
name|after
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
condition|?
name|session
operator|.
name|getEventEndDate
argument_list|()
else|:
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|,
name|acadYear
argument_list|,
name|ApplicationProperty
operator|.
name|SessionNrExcessDays
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|firstBreak
init|=
literal|null
decl_stmt|;
name|Date
name|yesterday
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|acadYear
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|Date
name|today
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|acadYear
argument_list|)
decl_stmt|;
name|int
name|holiday
init|=
name|Session
operator|.
name|getHoliday
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|acadYear
argument_list|,
name|startMonth
argument_list|,
name|session
operator|.
name|getHolidays
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|holiday
operator|==
name|Session
operator|.
name|sHolidayTypeHoliday
condition|)
block|{
name|holidaysEl
operator|.
name|addElement
argument_list|(
literal|"holiday"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|today
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|holiday
operator|==
name|Session
operator|.
name|sHolidayTypeBreak
condition|)
block|{
if|if
condition|(
name|firstBreak
operator|==
literal|null
condition|)
name|firstBreak
operator|=
name|today
expr_stmt|;
block|}
if|if
condition|(
name|firstBreak
operator|!=
literal|null
operator|&&
name|holiday
operator|!=
name|Session
operator|.
name|sHolidayTypeBreak
condition|)
block|{
name|holidaysEl
operator|.
name|addElement
argument_list|(
literal|"break"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|firstBreak
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"endDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|yesterday
argument_list|)
argument_list|)
expr_stmt|;
name|firstBreak
operator|=
literal|null
expr_stmt|;
block|}
name|yesterday
operator|=
name|today
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstBreak
operator|!=
literal|null
condition|)
name|holidaysEl
operator|.
name|addElement
argument_list|(
literal|"break"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|firstBreak
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"endDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|yesterday
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|exportManagers
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|managersEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"managers"
argument_list|)
decl_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
operator|new
name|TreeSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from TimetableManager m inner join m.departments d where d.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|managerEl
init|=
name|managersEl
operator|.
name|addElement
argument_list|(
literal|"manager"
argument_list|)
decl_stmt|;
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|m
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"firstName"
argument_list|,
name|m
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
condition|)
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"middleName"
argument_list|,
name|m
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"lastName"
argument_list|,
name|m
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getAcademicTitle
argument_list|()
operator|!=
literal|null
condition|)
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"acadTitle"
argument_list|,
name|m
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
condition|)
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"email"
argument_list|,
name|m
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
name|managerEl
operator|.
name|addAttribute
argument_list|(
literal|"firstName"
argument_list|,
name|m
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|m
operator|.
name|getDepartments
argument_list|()
control|)
block|{
if|if
condition|(
name|session
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
name|managerEl
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ManagerRole
name|r
range|:
name|m
operator|.
name|getManagerRoles
argument_list|()
control|)
block|{
name|Element
name|roleEl
init|=
name|managerEl
operator|.
name|addElement
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|roleEl
operator|.
name|addAttribute
argument_list|(
literal|"reference"
argument_list|,
name|r
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getPrimary
argument_list|()
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getPrimary
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|roleEl
operator|.
name|addAttribute
argument_list|(
literal|"primary"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getReceiveEmails
argument_list|()
operator|!=
literal|null
condition|)
name|roleEl
operator|.
name|addAttribute
argument_list|(
literal|"emails"
argument_list|,
name|r
operator|.
name|getReceiveEmails
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportDepartments
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|departmentsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"departments"
argument_list|)
decl_stmt|;
for|for
control|(
name|Department
name|d
range|:
operator|new
name|TreeSet
argument_list|<
name|Department
argument_list|>
argument_list|(
name|session
operator|.
name|getDepartments
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|departmentEl
init|=
name|departmentsEl
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
name|departmentEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|departmentEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|d
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getAbbreviation
argument_list|()
operator|!=
literal|null
condition|)
name|departmentEl
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|d
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|departmentEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|external
init|=
operator|(
name|d
operator|.
name|getExternalManager
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getExternalManager
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|external
condition|)
block|{
name|departmentEl
operator|.
name|addElement
argument_list|(
literal|"externalManager"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"enabled"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|d
operator|.
name|getExternalMgrAbbv
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"label"
argument_list|,
name|d
operator|.
name|getExternalMgrLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|.
name|getAllowEvents
argument_list|()
operator|&&
name|d
operator|.
name|getAllowEvents
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|departmentEl
operator|.
name|addElement
argument_list|(
literal|"eventManagement"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getAllowStudentScheduling
argument_list|()
operator|&&
operator|!
name|d
operator|.
name|getAllowStudentScheduling
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
name|departmentEl
operator|.
name|addElement
argument_list|(
literal|"studentScheduling"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"enabled"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|boolean
name|reqTime
init|=
name|d
operator|.
name|getAllowReqTime
argument_list|()
operator|&&
name|d
operator|.
name|getAllowReqTime
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|reqRoom
init|=
name|d
operator|.
name|getAllowReqRoom
argument_list|()
operator|&&
name|d
operator|.
name|getAllowReqRoom
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
name|boolean
name|reqDist
init|=
name|d
operator|.
name|getAllowReqDistribution
argument_list|()
operator|&&
name|d
operator|.
name|getAllowReqDistribution
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|reqTime
operator|||
name|reqRoom
operator|||
name|reqDist
condition|)
block|{
name|departmentEl
operator|.
name|addElement
argument_list|(
literal|"required"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|reqTime
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"room"
argument_list|,
name|reqRoom
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"distribution"
argument_list|,
name|reqDist
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|inheritInstrPref
init|=
name|d
operator|.
name|getInheritInstructorPreferences
argument_list|()
operator|&&
name|d
operator|.
name|getInheritInstructorPreferences
argument_list|()
operator|.
name|booleanValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|external
operator|==
name|inheritInstrPref
condition|)
name|departmentEl
operator|.
name|addElement
argument_list|(
literal|"instructorPreferences"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"inherit"
argument_list|,
name|inheritInstrPref
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|!=
literal|0
condition|)
name|departmentEl
operator|.
name|addElement
argument_list|(
literal|"distributionPreferences"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"priority"
argument_list|,
name|d
operator|.
name|getDistributionPrefPriority
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportSubjectAreas
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|subjectsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"subjectAreas"
argument_list|)
decl_stmt|;
for|for
control|(
name|SubjectArea
name|s
range|:
operator|new
name|TreeSet
argument_list|<
name|SubjectArea
argument_list|>
argument_list|(
name|session
operator|.
name|getSubjectAreas
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|subjectEl
init|=
name|subjectsEl
operator|.
name|addElement
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|subjectEl
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|s
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|subjectEl
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
name|s
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|subjectEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|subjectEl
operator|.
name|addAttribute
argument_list|(
literal|"department"
argument_list|,
name|s
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportSolverGroups
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|groupsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"solverGroups"
argument_list|)
decl_stmt|;
for|for
control|(
name|SolverGroup
name|g
range|:
operator|new
name|TreeSet
argument_list|<
name|SolverGroup
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|SolverGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SolverGroup where session = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|groupEl
init|=
name|groupsEl
operator|.
name|addElement
argument_list|(
literal|"solverGroup"
argument_list|)
decl_stmt|;
name|groupEl
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|g
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|groupEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
name|g
operator|.
name|getTimetableManagers
argument_list|()
control|)
name|groupEl
operator|.
name|addElement
argument_list|(
literal|"manager"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|m
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|g
operator|.
name|getDepartments
argument_list|()
control|)
name|groupEl
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportDatePatterns
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|patternsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"datePatterns"
argument_list|)
decl_stmt|;
for|for
control|(
name|DatePattern
name|dp
range|:
operator|new
name|TreeSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DatePattern where session = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|patternEl
init|=
name|patternsEl
operator|.
name|addElement
argument_list|(
literal|"datePattern"
argument_list|)
decl_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|DatePattern
operator|.
name|sTypes
index|[
name|dp
operator|.
name|getType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"visible"
argument_list|,
name|dp
operator|.
name|getVisible
argument_list|()
operator|!=
literal|null
operator|&&
name|dp
operator|.
name|getVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"default"
argument_list|,
name|dp
operator|.
name|isDefault
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dp
operator|.
name|getNumberOfWeeks
argument_list|()
operator|!=
literal|null
condition|)
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"nbrWeeks"
argument_list|,
name|sFloatFormat
operator|.
name|format
argument_list|(
name|dp
operator|.
name|getNumberOfWeeks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|dp
operator|.
name|getDepartments
argument_list|()
control|)
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dp
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|p
range|:
name|dp
operator|.
name|findChildren
argument_list|(
name|getHibSession
argument_list|()
argument_list|)
control|)
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"datePattern"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|startMonth
init|=
name|session
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|session
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|Date
name|firstDate
init|=
literal|null
decl_stmt|;
name|Date
name|yesterday
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|Date
name|today
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|isOffered
argument_list|(
name|d
argument_list|,
name|m
argument_list|)
condition|)
block|{
if|if
condition|(
name|firstDate
operator|==
literal|null
condition|)
name|firstDate
operator|=
name|today
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|firstDate
operator|!=
literal|null
condition|)
block|{
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"dates"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"fromDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|firstDate
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"toDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|yesterday
argument_list|)
argument_list|)
expr_stmt|;
name|firstDate
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|yesterday
operator|=
name|today
expr_stmt|;
block|}
block|}
if|if
condition|(
name|firstDate
operator|!=
literal|null
condition|)
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"dates"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"fromDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|firstDate
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"toDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|yesterday
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|startSlot2startTime
parameter_list|(
name|int
name|startSlot
parameter_list|)
block|{
name|int
name|minHrs
init|=
name|startSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|/
literal|60
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|%
literal|60
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|dayCode2days
parameter_list|(
name|int
name|dayCode
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|exportTimePatterns
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|patternsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"timePatterns"
argument_list|)
decl_stmt|;
for|for
control|(
name|TimePattern
name|tp
range|:
operator|new
name|TreeSet
argument_list|<
name|TimePattern
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|TimePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimePattern where session = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|patternEl
init|=
name|patternsEl
operator|.
name|addElement
argument_list|(
literal|"timePattern"
argument_list|)
decl_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|tp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"nbrMeetings"
argument_list|,
name|tp
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"minsPerMeeting"
argument_list|,
name|tp
operator|.
name|getMinPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|TimePattern
operator|.
name|sTypes
index|[
name|tp
operator|.
name|getType
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"visible"
argument_list|,
name|tp
operator|.
name|getVisible
argument_list|()
operator|!=
literal|null
operator|&&
name|tp
operator|.
name|getVisible
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"nbrSlotsPerMeeting"
argument_list|,
name|tp
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|patternEl
operator|.
name|addAttribute
argument_list|(
literal|"breakTime"
argument_list|,
name|tp
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|tp
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|d
range|:
name|tp
operator|.
name|getDepartments
argument_list|()
control|)
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimePatternDays
name|days
range|:
operator|new
name|TreeSet
argument_list|<
name|TimePatternDays
argument_list|>
argument_list|(
name|tp
operator|.
name|getDays
argument_list|()
argument_list|)
control|)
block|{
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"days"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|dayCode2days
argument_list|(
name|days
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimePatternTime
name|time
range|:
operator|new
name|TreeSet
argument_list|<
name|TimePatternTime
argument_list|>
argument_list|(
name|tp
operator|.
name|getTimes
argument_list|()
argument_list|)
control|)
block|{
name|patternEl
operator|.
name|addElement
argument_list|(
literal|"time"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"start"
argument_list|,
name|startSlot2startTime
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportExaminationPeriods
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|examinationPeriodsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"examinationPeriods"
argument_list|)
decl_stmt|;
for|for
control|(
name|ExamType
name|type
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamType
argument_list|>
argument_list|(
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct p.examType from ExamPeriod p where p.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|typeEl
init|=
name|examinationPeriodsEl
operator|.
name|addElement
argument_list|(
literal|"periods"
argument_list|)
decl_stmt|;
name|typeEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
operator|new
name|TreeSet
argument_list|<
name|ExamPeriod
argument_list|>
argument_list|(
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ExamPeriod p where p.session.uniqueId = :sessionId and p.examType.uniqueId = :typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|periodEl
init|=
name|typeEl
operator|.
name|addElement
argument_list|(
literal|"period"
argument_list|)
decl_stmt|;
name|periodEl
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|periodEl
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|periodEl
operator|.
name|addAttribute
argument_list|(
literal|"length"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5
operator|*
name|period
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|.
name|getEventStartOffset
argument_list|()
operator|!=
literal|null
operator|&&
name|period
operator|.
name|getEventStartOffset
argument_list|()
operator|!=
literal|0
condition|)
name|periodEl
operator|.
name|addAttribute
argument_list|(
literal|"eventStartOffset"
argument_list|,
name|period
operator|.
name|getEventStartOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|.
name|getEventStopOffset
argument_list|()
operator|!=
literal|null
operator|&&
name|period
operator|.
name|getEventStopOffset
argument_list|()
operator|!=
literal|0
condition|)
name|periodEl
operator|.
name|addAttribute
argument_list|(
literal|"eventStopOffset"
argument_list|,
name|period
operator|.
name|getEventStopOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|PreferenceLevel
operator|.
name|sNeutral
operator|.
name|equals
argument_list|(
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
name|periodEl
operator|.
name|addAttribute
argument_list|(
literal|"preference"
argument_list|,
name|period
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportAcademicAreas
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|areasEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"academicAreas"
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session = :sessionId order by academicAreaAbbreviation"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Element
name|areaEl
init|=
name|areasEl
operator|.
name|addElement
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|areaEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|!=
literal|null
condition|)
name|areaEl
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|areaEl
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
name|area
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportAcademicClassifications
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|clasfsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"academicClassifications"
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicClassification where session = :sessionId order by code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Element
name|clasfEl
init|=
name|clasfsEl
operator|.
name|addElement
argument_list|(
literal|"academicClassification"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|clasfEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|!=
literal|null
condition|)
name|clasfEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clasf
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|clasfEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportMajors
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|majorsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"posMajors"
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session = :sessionId order by academicAreaAbbreviation"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|PosMajor
name|major
range|:
name|area
operator|.
name|getPosMajors
argument_list|()
control|)
block|{
name|Element
name|majorEl
init|=
name|majorsEl
operator|.
name|addElement
argument_list|(
literal|"posMajor"
argument_list|)
decl_stmt|;
name|majorEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|majorEl
operator|.
name|addAttribute
argument_list|(
literal|"academicArea"
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|majorEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|major
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|major
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|majorEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|major
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMajorConcentration
name|conc
range|:
name|major
operator|.
name|getConcentrations
argument_list|()
control|)
block|{
name|Element
name|concEl
init|=
name|majorEl
operator|.
name|addElement
argument_list|(
literal|"concentration"
argument_list|)
decl_stmt|;
name|concEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|conc
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conc
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|concEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|conc
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conc
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|concEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|conc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|exportMinors
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|minorsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"posMinors"
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session = :sessionId order by academicAreaAbbreviation"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|PosMinor
name|minor
range|:
name|area
operator|.
name|getPosMinors
argument_list|()
control|)
block|{
name|Element
name|minorEl
init|=
name|minorsEl
operator|.
name|addElement
argument_list|(
literal|"posMinor"
argument_list|)
decl_stmt|;
name|minorEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|minorEl
operator|.
name|addAttribute
argument_list|(
literal|"academicArea"
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|minorEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|minor
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|minorEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportDegrees
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|degreesEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"degrees"
argument_list|)
decl_stmt|;
for|for
control|(
name|Degree
name|degree
range|:
operator|(
name|List
argument_list|<
name|Degree
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Degree where session = :sessionId order by reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Element
name|degreeEl
init|=
name|degreesEl
operator|.
name|addElement
argument_list|(
literal|"degree"
argument_list|)
decl_stmt|;
name|degreeEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|degree
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|degree
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|degreeEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|degree
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|degree
operator|.
name|getLabel
argument_list|()
operator|!=
literal|null
condition|)
name|degreeEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|degree
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportStudentGroups
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|groupsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"studentGroups"
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup where session = :sessionId order by groupAbbreviation"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Element
name|groupEl
init|=
name|groupsEl
operator|.
name|addElement
argument_list|(
literal|"studentGroup"
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|groupEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|group
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|!=
literal|null
condition|)
name|groupEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getGroupName
argument_list|()
operator|!=
literal|null
condition|)
name|groupEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getType
argument_list|()
operator|!=
literal|null
condition|)
name|groupEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|group
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportStudentAccomodations
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|accomodationsEl
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"studentAccomodations"
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|acc
range|:
operator|(
name|List
argument_list|<
name|StudentAccomodation
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentAccomodation where session = :sessionId order by abbreviation"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Element
name|accomodationEl
init|=
name|accomodationsEl
operator|.
name|addElement
argument_list|(
literal|"studentAccomodation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|acc
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|accomodationEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|acc
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|acc
operator|.
name|getAbbreviation
argument_list|()
operator|!=
literal|null
condition|)
name|accomodationEl
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|acc
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|acc
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|accomodationEl
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|acc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

