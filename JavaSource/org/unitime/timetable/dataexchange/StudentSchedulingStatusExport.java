begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSchedulingStatusExport
extends|extends
name|BaseExport
block|{
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sTwoNumbersDF
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"yyyy/M/d"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sTimeFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"studentStatuses"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"dateFormat"
argument_list|,
name|sDateFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"timeFormat"
argument_list|,
name|sTimeFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"incremental"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|document
operator|.
name|addDocType
argument_list|(
literal|"studentStatuses"
argument_list|,
literal|"-//UniTime//UniTime Student Scheduling Statuses DTD/EN"
argument_list|,
literal|"http://www.unitime.org/interface/StudentStatuses.dtd"
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
operator|(
name|List
argument_list|<
name|StudentSectioningStatus
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentSectioningStatus where session is null or session = :sessionId order by reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Element
name|statusElement
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
name|statusElement
operator|.
name|addAttribute
argument_list|(
literal|"reference"
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|statusElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|statusElement
operator|.
name|addAttribute
argument_list|(
literal|"session"
argument_list|,
name|status
operator|.
name|getSession
argument_list|()
operator|==
literal|null
condition|?
literal|"false"
else|:
literal|"true"
argument_list|)
expr_stmt|;
name|Element
name|permissionsEl
init|=
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"permissions"
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentSectioningStatus
operator|.
name|Option
name|option
range|:
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|values
argument_list|()
control|)
name|permissionsEl
operator|.
name|addAttribute
argument_list|(
name|getAttribute
argument_list|(
name|option
argument_list|)
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|option
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|Element
name|datesEl
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|datesEl
operator|==
literal|null
condition|)
name|datesEl
operator|=
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"effective-dates"
argument_list|)
expr_stmt|;
name|datesEl
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|datesEl
operator|==
literal|null
condition|)
name|datesEl
operator|=
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"effective-dates"
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|/
literal|12
decl_stmt|;
name|int
name|min
init|=
literal|5
operator|*
operator|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|%
literal|12
operator|)
decl_stmt|;
name|datesEl
operator|.
name|addAttribute
argument_list|(
literal|"startPeriod"
argument_list|,
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|hour
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|datesEl
operator|==
literal|null
condition|)
name|datesEl
operator|=
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"effective-dates"
argument_list|)
expr_stmt|;
name|datesEl
operator|.
name|addAttribute
argument_list|(
literal|"stopDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|datesEl
operator|==
literal|null
condition|)
name|datesEl
operator|=
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"effective-dates"
argument_list|)
expr_stmt|;
name|int
name|hour
init|=
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|/
literal|12
decl_stmt|;
name|int
name|min
init|=
literal|5
operator|*
operator|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|%
literal|12
operator|)
decl_stmt|;
name|datesEl
operator|.
name|addAttribute
argument_list|(
literal|"stopPeriod"
argument_list|,
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|hour
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|min
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
condition|)
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"message"
argument_list|)
operator|.
name|setText
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseType
name|type
range|:
name|status
operator|.
name|getTypes
argument_list|()
control|)
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|!=
literal|null
condition|)
name|statusElement
operator|.
name|addElement
argument_list|(
literal|"fallback"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"reference"
argument_list|,
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|getAttribute
parameter_list|(
name|StudentSectioningStatus
operator|.
name|Option
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|enabled
case|:
return|return
literal|"assistantEnabled"
return|;
case|case
name|admin
case|:
return|return
literal|"assistantAdminEdit"
return|;
case|case
name|advisor
case|:
return|return
literal|"assistantAdvisorEdit"
return|;
case|case
name|enrollment
case|:
return|return
literal|"assistantStudentEdit"
return|;
case|case
name|regenabled
case|:
return|return
literal|"requestsEnabled"
return|;
case|case
name|regadmin
case|:
return|return
literal|"requestsAdminEdit"
return|;
case|case
name|regadvisor
case|:
return|return
literal|"requestsAdvisorEdit"
return|;
case|case
name|registration
case|:
return|return
literal|"requestsStudentEdit"
return|;
case|case
name|email
case|:
return|return
literal|"emaiNotifications"
return|;
case|case
name|nobatch
case|:
return|return
literal|"doNotScheduleInBatch"
return|;
case|case
name|notype
case|:
return|return
literal|"mustHaveCourseType"
return|;
case|case
name|waitlist
case|:
return|return
literal|"waitListing"
return|;
case|case
name|advcanset
case|:
return|return
literal|"advisorCanSetStatus"
return|;
case|case
name|specreg
case|:
return|return
literal|"specialRegistration"
return|;
case|case
name|reqval
case|:
return|return
literal|"requestValidation"
return|;
case|case
name|canreq
case|:
return|return
literal|"canRequire"
return|;
case|case
name|noschedule
case|:
return|return
literal|"noSchedule"
return|;
default|default:
return|return
name|option
operator|.
name|name
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

