begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Script
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ScriptParameter
import|;
end_import

begin_class
specifier|public
class|class
name|ScriptImport
extends|extends
name|BaseImport
block|{
annotation|@
name|Override
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"script"
argument_list|)
condition|)
block|{
name|importScript
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"scripts"
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"script"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importScript
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a script file."
argument_list|)
throw|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|importScript
parameter_list|(
name|Element
name|scriptEl
parameter_list|)
block|{
name|String
name|name
init|=
name|scriptEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"String name is not provided."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Script
name|script
init|=
operator|(
name|Script
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Script where name = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|==
literal|null
condition|)
block|{
name|script
operator|=
operator|new
name|Script
argument_list|()
expr_stmt|;
name|script
operator|.
name|setParameters
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ScriptParameter
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|script
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|script
operator|.
name|setEngine
argument_list|(
name|scriptEl
operator|.
name|attributeValue
argument_list|(
literal|"engine"
argument_list|,
literal|"ECMAScript"
argument_list|)
argument_list|)
expr_stmt|;
name|script
operator|.
name|setPermission
argument_list|(
name|scriptEl
operator|.
name|attributeValue
argument_list|(
literal|"permission"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ScriptParameter
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ScriptParameter
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScriptParameter
name|parameter
range|:
name|script
operator|.
name|getParameters
argument_list|()
control|)
name|params
operator|.
name|put
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
argument_list|,
name|parameter
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|scriptEl
operator|.
name|elementIterator
argument_list|(
literal|"parameter"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|paramEl
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|pName
init|=
name|paramEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pName
operator|==
literal|null
condition|)
continue|continue;
name|ScriptParameter
name|parameter
init|=
name|params
operator|.
name|remove
argument_list|(
name|pName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parameter
operator|==
literal|null
condition|)
block|{
name|parameter
operator|=
operator|new
name|ScriptParameter
argument_list|()
expr_stmt|;
name|parameter
operator|.
name|setName
argument_list|(
name|pName
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|script
operator|.
name|getParameters
argument_list|()
operator|.
name|add
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
name|parameter
operator|.
name|setLabel
argument_list|(
name|paramEl
operator|.
name|attributeValue
argument_list|(
literal|"label"
argument_list|)
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setType
argument_list|(
name|paramEl
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
expr_stmt|;
name|parameter
operator|.
name|setDefaultValue
argument_list|(
name|paramEl
operator|.
name|attributeValue
argument_list|(
literal|"default"
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ScriptParameter
name|parameter
range|:
name|params
operator|.
name|values
argument_list|()
control|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
name|script
operator|.
name|getParameters
argument_list|()
operator|.
name|remove
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
name|Element
name|bodyEl
init|=
name|scriptEl
operator|.
name|element
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bodyEl
operator|!=
literal|null
condition|)
name|script
operator|.
name|setScript
argument_list|(
name|bodyEl
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|script
operator|.
name|setScript
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Element
name|descriptionEl
init|=
name|scriptEl
operator|.
name|element
argument_list|(
literal|"description"
argument_list|)
decl_stmt|;
if|if
condition|(
name|descriptionEl
operator|!=
literal|null
condition|)
name|script
operator|.
name|setDescription
argument_list|(
name|descriptionEl
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|script
operator|.
name|setDescription
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

