begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_class
specifier|public
class|class
name|ReservationImport
extends|extends
name|BaseImport
block|{
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"reservations"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not reservations load file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|String
name|created
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
name|String
name|dateFormat
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"dateFormat"
argument_list|,
name|ReservationExport
operator|.
name|sDateFormat
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|session
argument_list|,
name|created
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_RESERVATIONS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"Deleting existing reservations..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Reservation
argument_list|>
name|i
init|=
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from Reservation r where r.instructionalOffering.session=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|flush
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Loading areas, majors, classifications, and student groups..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|areasByAbbv
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|areasByExtId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicArea a where a.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|areasByAbbv
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|areasByExtId
operator|.
name|put
argument_list|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|groupsByCode
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|groupsByExtId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from StudentGroup a where a.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|groupsByCode
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|groupsByExtId
operator|.
name|put
argument_list|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|majorsByCode
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|majorsByExtId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from PosMajor a where a.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|majorsByCode
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|majorsByExtId
operator|.
name|put
argument_list|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|clasfsByCode
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|clasfsByExtId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicClassification a where a.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|clasfsByCode
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
if|if
condition|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|clasfsByExtId
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"Loading courses..."
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
name|corusesByExtId
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
name|corusesBySubjectCourseNbr
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select a from CourseOffering a where a.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|corusesBySubjectCourseNbr
operator|.
name|put
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|corusesByExtId
operator|.
name|put
argument_list|(
name|course
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
name|dateFormat
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Importing reservations..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|reservationElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Reservation
name|reservation
init|=
literal|null
decl_stmt|;
name|String
name|type
init|=
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|,
literal|"course"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"individual"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|reservation
operator|=
operator|new
name|IndividualReservation
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|reservation
operator|=
operator|new
name|StudentGroupReservation
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"curriculum"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|reservation
operator|=
operator|new
name|CurriculumReservation
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
literal|"course"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|reservation
operator|=
operator|new
name|CourseReservation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|warn
argument_list|(
literal|"Unknown reservation type "
operator|+
name|type
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CourseOffering
name|course
init|=
name|corusesBySubjectCourseNbr
operator|.
name|get
argument_list|(
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|)
operator|+
literal|"|"
operator|+
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unknown course "
operator|+
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|)
operator|+
literal|" "
operator|+
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|reservation
operator|.
name|setInstructionalOffering
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|limit
init|=
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"limit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reservation
operator|.
name|setLimit
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Unable to parse reservation limit "
operator|+
name|limit
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|expire
init|=
name|reservationElement
operator|.
name|attributeValue
argument_list|(
literal|"expire"
argument_list|)
decl_stmt|;
if|if
condition|(
name|expire
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reservation
operator|.
name|setExpirationDate
argument_list|(
name|df
operator|.
name|parse
argument_list|(
name|expire
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Unable to parse reservation expiration date "
operator|+
name|expire
argument_list|)
expr_stmt|;
block|}
block|}
name|reservation
operator|.
name|setConfigurations
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"configuration"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|InstrOfferingConfig
name|config
init|=
literal|null
decl_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|c
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|config
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|config
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find configuration "
operator|+
name|name
operator|+
literal|" of course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reservation
operator|.
name|getConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
name|reservation
operator|.
name|setClasses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|itype
init|=
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|classEl
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
literal|null
decl_stmt|;
name|search
label|:
for|for
control|(
name|InstrOfferingConfig
name|c
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|s
range|:
name|c
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|itype
operator|!=
literal|null
operator|&&
operator|!
name|itype
operator|.
name|equals
argument_list|(
name|s
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Class_
name|z
range|:
name|s
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
name|extId
operator|.
name|equals
argument_list|(
name|z
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|z
expr_stmt|;
break|break
name|search
break|;
block|}
if|if
condition|(
name|extId
operator|==
literal|null
operator|&&
name|suffix
operator|.
name|equals
argument_list|(
name|z
operator|.
name|getSectionNumberString
argument_list|(
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|clazz
operator|=
name|z
expr_stmt|;
break|break
name|search
break|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find clazz "
operator|+
operator|(
name|extId
operator|==
literal|null
condition|?
name|itype
operator|+
literal|" "
operator|+
name|suffix
else|:
name|extId
operator|)
operator|+
literal|" of course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"individual"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|IndividualReservation
name|individual
init|=
operator|(
name|IndividualReservation
operator|)
name|reservation
decl_stmt|;
name|individual
operator|.
name|setStudents
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|studentId
init|=
operator|(
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
operator|)
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find student "
operator|+
name|student
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|individual
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|individual
operator|.
name|getStudents
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|warn
argument_list|(
literal|"Individual reservation of course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has no students."
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|else if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|StudentGroupReservation
name|group
init|=
operator|(
name|StudentGroupReservation
operator|)
name|reservation
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"studentGroup"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|groupEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|groupEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|groupEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|StudentGroup
name|sg
init|=
operator|(
name|extId
operator|==
literal|null
condition|?
name|groupsByCode
operator|.
name|get
argument_list|(
name|code
argument_list|)
else|:
name|groupsByExtId
operator|.
name|get
argument_list|(
name|extId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find student group "
operator|+
operator|(
name|extId
operator|==
literal|null
condition|?
name|code
else|:
name|extId
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|group
operator|.
name|setGroup
argument_list|(
name|sg
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|group
operator|.
name|getGroup
argument_list|()
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Group reservation of course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has no student group."
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"curriculum"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|CurriculumReservation
name|curriculum
init|=
operator|(
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"academicArea"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|areaEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|areaEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|abbv
init|=
name|areaEl
operator|.
name|attributeValue
argument_list|(
literal|"abbreviation"
argument_list|)
decl_stmt|;
name|AcademicArea
name|area
init|=
operator|(
name|extId
operator|==
literal|null
condition|?
name|areasByAbbv
operator|.
name|get
argument_list|(
name|abbv
argument_list|)
else|:
name|areasByExtId
operator|.
name|get
argument_list|(
name|extId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find academic area "
operator|+
operator|(
name|extId
operator|==
literal|null
condition|?
name|area
else|:
name|extId
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|curriculum
operator|.
name|setArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|curriculum
operator|.
name|getArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Curriculum reservation of course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" has no academic area."
argument_list|)
expr_stmt|;
block|}
name|curriculum
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicClassification
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"academicClassification"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|clasfEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|clasfEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|clasfEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|AcademicClassification
name|clasf
init|=
operator|(
name|extId
operator|==
literal|null
condition|?
name|clasfsByCode
operator|.
name|get
argument_list|(
name|code
argument_list|)
else|:
name|clasfsByExtId
operator|.
name|get
argument_list|(
name|extId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find academic classification "
operator|+
operator|(
name|extId
operator|==
literal|null
condition|?
name|code
else|:
name|extId
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
block|}
name|curriculum
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|reservationElement
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|majorEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|majorEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|majorEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMajor
name|major
init|=
operator|(
name|extId
operator|==
literal|null
condition|?
name|majorsByCode
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|code
argument_list|)
else|:
name|majorsByExtId
operator|.
name|get
argument_list|(
name|extId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unable to find major "
operator|+
operator|(
name|extId
operator|==
literal|null
condition|?
name|curriculum
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|code
else|:
name|extId
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|course
operator|.
name|setReservation
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|reservation
operator|.
name|setLimit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|course
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|reservation
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

