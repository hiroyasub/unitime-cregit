begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|CommitedClassAssignmentProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PreferencesExport
extends|extends
name|BaseExport
block|{
specifier|public
name|CommitedClassAssignmentProxy
name|proxy
init|=
operator|new
name|CommitedClassAssignmentProxy
argument_list|()
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"yyyy/M/d"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sTimeFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sNumberFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0000"
argument_list|)
decl_stmt|;
specifier|public
name|Comparator
name|ioCmp
init|=
literal|null
decl_stmt|;
specifier|public
name|Comparator
name|subpartCmp
init|=
literal|null
decl_stmt|;
specifier|public
name|Comparator
name|classCmp
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"preferences"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"dateFormat"
argument_list|,
name|sDateFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"timeFormat"
argument_list|,
name|sTimeFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Department
name|department
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from Department d left join fetch d.preferences p where d.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|exportPrefGroup
argument_list|(
name|root
argument_list|,
name|department
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from DepartmentalInstructor i left join fetch i.preferences p where i.department.session.uniqueId = :sessionId "
operator|+
literal|"order by i.department.deptCode, i.lastName, i.firstName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|exportPrefGroup
argument_list|(
name|root
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
operator|(
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct ss from SchedulingSubpart ss "
operator|+
literal|"left join fetch ss.instrOfferingConfig as ioc "
operator|+
literal|"left join fetch ioc.instructionalOffering as io "
operator|+
literal|"left join fetch io.courseOfferings as co "
operator|+
literal|"left join fetch ss.classes c "
operator|+
literal|"left join fetch ss.preferences sp "
operator|+
literal|"left join fetch c.preferences cp "
operator|+
literal|"where ss.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId and co.isControl = true "
operator|+
literal|"order by co.subjectAreaAbbv, co.courseNbr, ioc.uniqueId, ss.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|exportPrefGroup
argument_list|(
name|root
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
name|exportPrefGroup
argument_list|(
name|root
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportPrefGroup
parameter_list|(
name|Element
name|parent
parameter_list|,
name|PreferenceGroup
name|group
parameter_list|)
block|{
name|Element
name|el
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|group
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|group
decl_stmt|;
name|CourseOffering
name|course
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|extId
init|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
operator|!
name|extId
operator|.
name|isEmpty
argument_list|()
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|extId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|group
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|group
decl_stmt|;
name|CourseOffering
name|course
init|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"subpart"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"config"
argument_list|,
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
name|subpart
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|group
operator|instanceof
name|Department
condition|)
block|{
name|Department
name|department
init|=
operator|(
name|Department
operator|)
name|group
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|group
operator|instanceof
name|DepartmentalInstructor
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|group
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"instructor"
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"firstName"
argument_list|,
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"middleName"
argument_list|,
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"lastName"
argument_list|,
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"email"
argument_list|,
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
name|instructor
operator|.
name|getAcademicTitle
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"department"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
operator|!=
literal|null
operator|&&
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addElement
argument_list|(
literal|"teachingPref"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"maxLoad"
argument_list|,
name|instructor
operator|.
name|getMaxLoad
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|el
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Preference
name|preference
range|:
name|group
operator|.
name|getPreferences
argument_list|()
control|)
name|exportPreference
argument_list|(
name|el
argument_list|,
name|preference
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|slot2time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|min
init|=
name|slot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|sNumberFormat
operator|.
name|format
argument_list|(
operator|(
name|min
operator|/
literal|60
operator|)
operator|*
literal|100
operator|+
operator|(
name|min
operator|%
literal|60
operator|)
argument_list|)
return|;
block|}
specifier|protected
name|Element
name|exportPreference
parameter_list|(
name|Element
name|parent
parameter_list|,
name|Preference
name|preference
parameter_list|)
block|{
name|Element
name|el
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|preference
operator|instanceof
name|RoomPref
condition|)
block|{
name|Location
name|location
init|=
operator|(
operator|(
name|RoomPref
operator|)
name|preference
operator|)
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"roomPref"
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|el
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"room"
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|location
operator|)
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|el
operator|.
name|addAttribute
argument_list|(
literal|"location"
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|RoomGroupPref
condition|)
block|{
name|RoomGroup
name|group
init|=
operator|(
operator|(
name|RoomGroupPref
operator|)
name|preference
operator|)
operator|.
name|getRoomGroup
argument_list|()
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"groupPref"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"group"
argument_list|,
name|group
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"department"
argument_list|,
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|RoomFeaturePref
condition|)
block|{
name|RoomFeature
name|feature
init|=
operator|(
operator|(
name|RoomFeaturePref
operator|)
name|preference
operator|)
operator|.
name|getRoomFeature
argument_list|()
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"featurePref"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"feature"
argument_list|,
name|feature
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|feature
operator|instanceof
name|DepartmentRoomFeature
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"department"
argument_list|,
operator|(
operator|(
name|DepartmentRoomFeature
operator|)
name|feature
operator|)
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|BuildingPref
condition|)
block|{
name|Building
name|building
init|=
operator|(
operator|(
name|BuildingPref
operator|)
name|preference
operator|)
operator|.
name|getBuilding
argument_list|()
decl_stmt|;
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"buildingPref"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
name|building
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|TimePref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"timePref"
argument_list|)
expr_stmt|;
name|TimePattern
name|pattern
init|=
operator|(
operator|(
name|TimePref
operator|)
name|preference
operator|)
operator|.
name|getTimePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
name|pattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|TimePatternModel
name|model
init|=
operator|(
operator|(
name|TimePref
operator|)
name|preference
operator|)
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isExactTime
argument_list|()
condition|)
name|el
operator|.
name|addElement
argument_list|(
literal|"pref"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|model
operator|.
name|getExactDays
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|slot2time
argument_list|(
name|model
operator|.
name|getExactStartSlot
argument_list|()
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
expr_stmt|;
if|else if
condition|(
name|model
operator|.
name|getTimePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
name|int
name|start
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|pref
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|String
name|p
init|=
name|model
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|==
literal|null
operator|||
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|p
argument_list|)
condition|)
block|{
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|int
name|end
init|=
name|model
operator|.
name|getStartSlot
argument_list|(
name|t
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Element
name|pe
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"pref"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|pref
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"day"
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"start"
argument_list|,
name|slot2time
argument_list|(
name|start
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|end
condition|)
name|pe
operator|.
name|addAttribute
argument_list|(
literal|"stop"
argument_list|,
name|slot2time
argument_list|(
literal|1
operator|+
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|start
operator|=
name|model
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|pref
operator|=
name|p
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|int
name|end
init|=
name|model
operator|.
name|getStartSlot
argument_list|(
name|model
operator|.
name|getNrTimes
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Element
name|pe
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"pref"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|pref
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"day"
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"start"
argument_list|,
name|slot2time
argument_list|(
name|start
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|end
condition|)
name|pe
operator|.
name|addAttribute
argument_list|(
literal|"stop"
argument_list|,
name|slot2time
argument_list|(
literal|1
operator|+
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
block|{
name|String
name|pref
init|=
name|model
operator|.
name|getPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
operator|&&
operator|!
name|pref
operator|.
name|equals
argument_list|(
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
condition|)
block|{
name|el
operator|.
name|addElement
argument_list|(
literal|"pref"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|pref
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|DayCode
operator|.
name|toString
argument_list|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
argument_list|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"time"
argument_list|,
name|slot2time
argument_list|(
name|model
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|DatePatternPref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"datePref"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"pattern"
argument_list|,
operator|(
operator|(
name|DatePatternPref
operator|)
name|preference
operator|)
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|InstructorPref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"instructorPref"
argument_list|)
expr_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
operator|(
operator|(
name|InstructorPref
operator|)
name|preference
operator|)
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"instructor"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|instructor
operator|.
name|getName
argument_list|(
literal|"first-middle-last"
argument_list|)
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"department"
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|InstructorCoursePref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"coursePref"
argument_list|)
expr_stmt|;
name|CourseOffering
name|course
init|=
operator|(
operator|(
name|InstructorCoursePref
operator|)
name|preference
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|InstructorAttributePref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"attributePref"
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"attribute"
argument_list|,
operator|(
operator|(
name|InstructorAttributePref
operator|)
name|preference
operator|)
operator|.
name|getAttribute
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|ExamPeriodPref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"periodPref"
argument_list|)
expr_stmt|;
name|ExamPeriod
name|period
init|=
operator|(
operator|(
name|ExamPeriodPref
operator|)
name|preference
operator|)
operator|.
name|getExamPeriod
argument_list|()
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"start"
argument_list|,
name|sTimeFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|period
operator|.
name|getExamType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|preference
operator|instanceof
name|DistributionPref
condition|)
block|{
name|el
operator|=
name|parent
operator|.
name|addElement
argument_list|(
literal|"distributionPref"
argument_list|)
expr_stmt|;
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|preference
decl_stmt|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dp
operator|.
name|getStructure
argument_list|()
operator|!=
literal|null
condition|)
name|el
operator|.
name|addAttribute
argument_list|(
literal|"structure"
argument_list|,
name|dp
operator|.
name|getStructure
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DistributionObject
name|distObj
range|:
operator|new
name|TreeSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|(
name|dp
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|distObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|Element
name|clEl
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|extId
init|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
operator|!
name|extId
operator|.
name|isEmpty
argument_list|()
condition|)
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|extId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|SchedulingSubpart
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|distObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|Element
name|clEl
init|=
name|el
operator|.
name|addElement
argument_list|(
literal|"subpart"
argument_list|)
decl_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"config"
argument_list|,
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|clEl
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|el
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|el
operator|.
name|addAttribute
argument_list|(
literal|"level"
argument_list|,
name|preference
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|el
return|;
block|}
block|}
end_class

end_unit

