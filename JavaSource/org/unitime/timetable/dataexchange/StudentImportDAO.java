begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_comment
comment|/**  *   * @author Timothy Almon  *  */
end_comment

begin_class
specifier|public
class|class
name|StudentImportDAO
extends|extends
name|StudentDAO
block|{
specifier|public
name|StudentImportDAO
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|loadFromXML
parameter_list|(
name|String
name|filename
parameter_list|)
throws|throws
name|Exception
block|{
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|loadFromStream
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
specifier|public
name|void
name|loadFromStream
parameter_list|(
name|FileInputStream
name|fis
parameter_list|)
throws|throws
name|Exception
block|{
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|getRootElement
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"students"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a Student load file."
argument_list|)
throw|;
block|}
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
operator|&&
name|externalId
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|student
operator|=
name|findByExternalId
argument_list|(
name|externalId
argument_list|,
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|()
expr_stmt|;
name|student
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
name|student
operator|.
name|setFirstName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"firstName"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMiddleName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"middleName"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"lastName"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setEmail
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setFreeTimeCategory
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setSchedulePreference
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|loadAcadAreaClassifications
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|loadMajors
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|loadMinors
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|saveOrUpdate
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
name|void
name|loadMajors
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentMajors"
argument_list|)
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|it
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentMajors"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Major Code is required."
argument_list|)
throw|;
block|}
name|String
name|academicArea
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|PosMajor
name|major
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|academicArea
operator|!=
literal|null
condition|)
block|{
name|major
operator|=
name|PosMajor
operator|.
name|findByCodeAcadAreaAbbv
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|code
argument_list|,
name|academicArea
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|major
operator|=
name|PosMajor
operator|.
name|findByCode
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Major "
operator|+
name|code
operator|+
literal|" was not found."
argument_list|)
throw|;
block|}
name|student
operator|.
name|addToPosMajors
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadMinors
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentMinors"
argument_list|)
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|it
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentMinors"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Minor Code is required."
argument_list|)
throw|;
block|}
name|String
name|academicArea
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|PosMinor
name|minor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|academicArea
operator|!=
literal|null
condition|)
block|{
name|minor
operator|=
name|PosMinor
operator|.
name|findByCodeAcadAreaAbbv
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|code
argument_list|,
name|academicArea
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minor
operator|=
name|PosMinor
operator|.
name|findByCode
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|code
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Minor "
operator|+
name|code
operator|+
literal|" was not found."
argument_list|)
throw|;
block|}
name|student
operator|.
name|addToPosMinors
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadAcadAreaClassifications
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Session
name|session
parameter_list|)
throws|throws
name|Exception
block|{
name|AcademicAreaDAO
name|acadAreaDAO
init|=
operator|new
name|AcademicAreaDAO
argument_list|()
decl_stmt|;
name|AcademicClassificationDAO
name|acadClassDAO
init|=
operator|new
name|AcademicClassificationDAO
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentAcadAreaClass"
argument_list|)
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|Iterator
name|it
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentAcadAreaClass"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"acadAreaClass"
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|el
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|abbv
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
if|if
condition|(
name|abbv
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Academic Area is required."
argument_list|)
throw|;
block|}
name|AcademicArea
name|acadArea
init|=
literal|null
decl_stmt|;
name|acadArea
operator|=
name|AcademicArea
operator|.
name|findByAbbv
argument_list|(
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|abbv
argument_list|)
expr_stmt|;
if|if
condition|(
name|acadArea
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Academic Area "
operator|+
name|abbv
operator|+
literal|" was not found."
argument_list|)
throw|;
block|}
name|String
name|code
init|=
name|el
operator|.
name|attributeValue
argument_list|(
literal|"academicClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|code
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Academic Classification is required."
argument_list|)
throw|;
block|}
name|AcademicClassification
name|acadClass
init|=
literal|null
decl_stmt|;
name|acadClass
operator|=
name|findAcadClass
argument_list|(
name|acadClassDAO
argument_list|,
name|code
argument_list|,
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|acadClass
operator|==
literal|null
condition|)
block|{
name|acadClass
operator|=
name|findAcadClass
argument_list|(
name|acadClassDAO
argument_list|,
literal|"00"
argument_list|,
name|session
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
comment|//throw new Exception("Academic Classification " + code + " was not found.");
block|}
name|AcademicAreaClassification
name|acadAreaClass
init|=
operator|new
name|AcademicAreaClassification
argument_list|()
decl_stmt|;
name|acadAreaClass
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acadAreaClass
operator|.
name|setAcademicArea
argument_list|(
name|acadArea
argument_list|)
expr_stmt|;
name|acadAreaClass
operator|.
name|setAcademicClassification
argument_list|(
name|acadClass
argument_list|)
expr_stmt|;
name|student
operator|.
name|addToacademicAreaClassifications
argument_list|(
name|acadAreaClass
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Student
name|findByExternalId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|Student
operator|)
name|this
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from Student as a where a.externalUniqueId=:externalId and a.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|AcademicClassification
name|findAcadClass
parameter_list|(
name|AcademicClassificationDAO
name|acadClassDAO
parameter_list|,
name|String
name|code
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|List
name|results
init|=
name|acadClassDAO
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct a from AcademicClassification as a where a.code=:code and a.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"code"
argument_list|,
name|code
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
name|AcademicClassification
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

