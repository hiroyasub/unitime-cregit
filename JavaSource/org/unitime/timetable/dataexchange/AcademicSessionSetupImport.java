begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ManagerRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AcademicSessionSetupImport
extends|extends
name|BaseImport
block|{
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sFloatFormat
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"sessionSetup"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not academic session setup file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"dateFormat"
argument_list|,
literal|"yyyy/M/d"
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|session
operator|=
name|createOrUpdateSession
argument_list|(
name|session
argument_list|,
name|root
argument_list|,
name|dateFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
name|Element
name|departmentsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"departments"
argument_list|)
decl_stmt|;
if|if
condition|(
name|departmentsEl
operator|!=
literal|null
condition|)
name|importDepartments
argument_list|(
name|departmentsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|subjectAreasEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"subjectAreas"
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjectAreasEl
operator|!=
literal|null
condition|)
name|importSubjectAreas
argument_list|(
name|subjectAreasEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|managersEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"managers"
argument_list|)
decl_stmt|;
if|if
condition|(
name|managersEl
operator|!=
literal|null
condition|)
name|importManagers
argument_list|(
name|managersEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|solverGroupsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"solverGroups"
argument_list|)
decl_stmt|;
if|if
condition|(
name|solverGroupsEl
operator|!=
literal|null
condition|)
name|importSolverGroups
argument_list|(
name|solverGroupsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|datePatternsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"datePatterns"
argument_list|)
decl_stmt|;
if|if
condition|(
name|datePatternsEl
operator|!=
literal|null
condition|)
name|importDatePatterns
argument_list|(
name|datePatternsEl
argument_list|,
name|session
argument_list|,
name|dateFormat
argument_list|)
expr_stmt|;
name|Element
name|timePatternsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"timePatterns"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timePatternsEl
operator|!=
literal|null
condition|)
name|importTimePatterns
argument_list|(
name|timePatternsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|examinationPeriodsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"examinationPeriods"
argument_list|)
decl_stmt|;
if|if
condition|(
name|examinationPeriodsEl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|examinationPeriodsEl
operator|.
name|elementIterator
argument_list|(
literal|"periods"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|periodsEl
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|importExaminationPeriods
argument_list|(
name|periodsEl
argument_list|,
name|session
argument_list|,
name|dateFormat
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|academicAreasEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"academicAreas"
argument_list|)
decl_stmt|;
if|if
condition|(
name|academicAreasEl
operator|!=
literal|null
condition|)
name|importAcademicAreas
argument_list|(
name|academicAreasEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|academicClassificationsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"academicClassifications"
argument_list|)
decl_stmt|;
if|if
condition|(
name|academicClassificationsEl
operator|!=
literal|null
condition|)
name|importAcademicClassifications
argument_list|(
name|academicClassificationsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|posMajorsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"posMajors"
argument_list|)
decl_stmt|;
if|if
condition|(
name|posMajorsEl
operator|!=
literal|null
condition|)
name|importMajors
argument_list|(
name|posMajorsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|posMinorsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"posMinors"
argument_list|)
decl_stmt|;
if|if
condition|(
name|posMinorsEl
operator|!=
literal|null
condition|)
name|importMinors
argument_list|(
name|posMinorsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|studentGroupsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"studentGroups"
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentGroupsEl
operator|!=
literal|null
condition|)
name|importStudentGroups
argument_list|(
name|studentGroupsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|studentAccomodationsEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"studentAccomodations"
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentAccomodationsEl
operator|!=
literal|null
condition|)
name|importStudentAccomodations
argument_list|(
name|studentAccomodationsEl
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|clearCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|Session
name|createOrUpdateSession
parameter_list|(
name|Session
name|session
parameter_list|,
name|Element
name|root
parameter_list|,
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
parameter_list|)
throws|throws
name|ParseException
block|{
name|info
argument_list|(
literal|"Importing academic session..."
argument_list|)
expr_stmt|;
name|Element
name|sessionEl
init|=
name|root
operator|.
name|element
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionEl
operator|==
literal|null
condition|)
return|return
name|session
return|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|session
operator|=
operator|new
name|Session
argument_list|()
expr_stmt|;
name|session
operator|.
name|setAcademicInitiative
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAcademicTerm
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAcademicYear
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setStatusType
argument_list|(
name|DepartmentStatusType
operator|.
name|findByRef
argument_list|(
literal|"initial"
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setBuildings
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Building
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setInstructionalOfferings
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setRooms
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setSubjectAreas
argument_list|(
operator|new
name|HashSet
argument_list|<
name|SubjectArea
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setLastWeekToEnroll
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|session
operator|.
name|setLastWeekToChange
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|session
operator|.
name|setLastWeekToDrop
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setSessionBeginDateTime
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"startDate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setSessionEndDateTime
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"endDate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setClassesEndDateTime
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"classEndDate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setExamBeginDate
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"examStartDate"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setEventBeginDate
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"eventStartDate"
argument_list|,
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"startDate"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setEventEndDate
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"eventEndDate"
argument_list|,
name|sessionEl
operator|.
name|attributeValue
argument_list|(
literal|"endDate"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|deadlinesEl
init|=
name|sessionEl
operator|.
name|element
argument_list|(
literal|"deadlines"
argument_list|)
decl_stmt|;
if|if
condition|(
name|deadlinesEl
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|setLastWeekToEnroll
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|deadlinesEl
operator|.
name|attributeValue
argument_list|(
literal|"lastWeekToEnroll"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setLastWeekToChange
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|deadlinesEl
operator|.
name|attributeValue
argument_list|(
literal|"lastWeekToChange"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|session
operator|.
name|setLastWeekToDrop
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|deadlinesEl
operator|.
name|attributeValue
argument_list|(
literal|"lastWeekToDrop"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|holidayEl
init|=
name|sessionEl
operator|.
name|element
argument_list|(
literal|"holidays"
argument_list|)
decl_stmt|;
if|if
condition|(
name|holidayEl
operator|!=
literal|null
condition|)
block|{
name|StringBuffer
name|holiday
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|acadYear
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|int
name|startMonth
init|=
name|DateUtils
operator|.
name|getStartMonth
argument_list|(
name|session
operator|.
name|getEventBeginDate
argument_list|()
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getEventBeginDate
argument_list|()
operator|.
name|before
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
condition|?
name|session
operator|.
name|getEventBeginDate
argument_list|()
else|:
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|,
name|acadYear
argument_list|,
name|ApplicationProperty
operator|.
name|SessionNrExcessDays
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|DateUtils
operator|.
name|getEndMonth
argument_list|(
name|session
operator|.
name|getEventEndDate
argument_list|()
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getEventEndDate
argument_list|()
operator|.
name|after
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
condition|?
name|session
operator|.
name|getEventEndDate
argument_list|()
else|:
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|,
name|acadYear
argument_list|,
name|ApplicationProperty
operator|.
name|SessionNrExcessDays
operator|.
name|intValue
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
name|date2index
init|=
operator|new
name|HashMap
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|acadYear
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|date2index
operator|.
name|put
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|acadYear
argument_list|)
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|holiday
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|holidayEl
operator|.
name|elementIterator
argument_list|(
literal|"holiday"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Date
name|d
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|index
init|=
name|date2index
operator|.
name|get
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
name|holiday
operator|.
name|setCharAt
argument_list|(
name|index
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|holidayEl
operator|.
name|elementIterator
argument_list|(
literal|"break"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Date
name|sd
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"startDate"
argument_list|,
name|e
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|ed
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"endDate"
argument_list|,
name|e
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|i1
init|=
name|date2index
operator|.
name|get
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|Integer
name|i2
init|=
name|date2index
operator|.
name|get
argument_list|(
name|ed
argument_list|)
decl_stmt|;
if|if
condition|(
name|i1
operator|!=
literal|null
operator|&&
name|i2
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
name|i1
init|;
name|j
operator|<=
name|i2
condition|;
name|j
operator|++
control|)
name|holiday
operator|.
name|setCharAt
argument_list|(
name|j
argument_list|,
literal|'2'
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setHolidays
argument_list|(
name|holiday
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|session
return|;
block|}
specifier|public
name|void
name|importDepartments
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing departments..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|id2dept
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|code2dept
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Department where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2dept
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|dept
argument_list|)
expr_stmt|;
name|code2dept
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dept
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|Department
name|dept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|dept
operator|=
name|id2dept
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
name|dept
operator|=
name|code2dept
operator|.
name|get
argument_list|(
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|==
literal|null
condition|)
block|{
name|dept
operator|=
operator|new
name|Department
argument_list|()
expr_stmt|;
name|dept
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setExternalManager
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowEvents
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowStudentScheduling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowReqTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowReqRoom
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowReqDistribution
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setInheritInstructorPreferences
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setDistributionPrefPriority
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setSubjectAreas
argument_list|(
operator|new
name|HashSet
argument_list|<
name|SubjectArea
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Department "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Department "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|dept
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setDeptCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAbbreviation
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"abbreviation"
argument_list|)
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|externalEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"externalManager"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalEl
operator|!=
literal|null
condition|)
block|{
name|dept
operator|.
name|setExternalManager
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|externalEl
operator|.
name|attributeValue
argument_list|(
literal|"enabled"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setExternalMgrAbbv
argument_list|(
name|externalEl
operator|.
name|attributeValue
argument_list|(
literal|"abbreviation"
argument_list|)
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setExternalMgrLabel
argument_list|(
name|externalEl
operator|.
name|attributeValue
argument_list|(
literal|"label"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dept
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
name|dept
operator|.
name|setInheritInstructorPreferences
argument_list|(
operator|!
name|dept
operator|.
name|getExternalManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|eventsEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"eventManagement"
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventsEl
operator|!=
literal|null
condition|)
block|{
name|dept
operator|.
name|setAllowEvents
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|eventsEl
operator|.
name|attributeValue
argument_list|(
literal|"enabled"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|studentsEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentScheduling"
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsEl
operator|!=
literal|null
condition|)
block|{
name|dept
operator|.
name|setAllowStudentScheduling
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|studentsEl
operator|.
name|attributeValue
argument_list|(
literal|"enabled"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|requiredEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"required"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredEl
operator|!=
literal|null
condition|)
block|{
name|dept
operator|.
name|setAllowReqTime
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|requiredEl
operator|.
name|attributeValue
argument_list|(
literal|"time"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowReqTime
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|requiredEl
operator|.
name|attributeValue
argument_list|(
literal|"room"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dept
operator|.
name|setAllowReqTime
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|requiredEl
operator|.
name|attributeValue
argument_list|(
literal|"distribution"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|instructorEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"instructorPreferences"
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructorEl
operator|!=
literal|null
condition|)
block|{
name|dept
operator|.
name|setInheritInstructorPreferences
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|instructorEl
operator|.
name|attributeValue
argument_list|(
literal|"inherit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|distEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"distributionPreferences"
argument_list|)
decl_stmt|;
if|if
condition|(
name|distEl
operator|!=
literal|null
condition|)
block|{
name|dept
operator|.
name|setDistributionPrefPriority
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|distEl
operator|.
name|attributeValue
argument_list|(
literal|"priority"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Department
name|dept
range|:
name|id2dept
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Department "
operator|+
name|dept
operator|.
name|getDeptCode
argument_list|()
operator|+
literal|" ("
operator|+
name|dept
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|dept
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importSubjectAreas
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing subject ares..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SubjectArea
argument_list|>
name|id2subject
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|SubjectArea
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SubjectArea
argument_list|>
name|abbv2subject
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|SubjectArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subject
range|:
operator|(
name|List
argument_list|<
name|SubjectArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SubjectArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2subject
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|subject
argument_list|)
expr_stmt|;
name|abbv2subject
operator|.
name|put
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|subject
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|abbv
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"abbreviation"
argument_list|)
decl_stmt|;
name|SubjectArea
name|subject
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|subject
operator|=
name|id2subject
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
name|subject
operator|=
name|abbv2subject
operator|.
name|get
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
name|subject
operator|=
operator|new
name|SubjectArea
argument_list|()
expr_stmt|;
name|subject
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Subject area "
operator|+
name|abbv
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Subject area "
operator|+
name|abbv
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|subject
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|subject
operator|.
name|setSubjectAreaAbbreviation
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
name|subject
operator|.
name|setTitle
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|subject
operator|.
name|setDepartment
argument_list|(
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|)
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|SubjectArea
name|subject
range|:
name|id2subject
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Subject area "
operator|+
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|subject
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importManagers
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing managers..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TimetableManager
argument_list|>
name|id2manager
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TimetableManager
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
operator|new
name|TreeSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct m from TimetableManager m inner join m.departments d where d.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|id2manager
operator|.
name|put
argument_list|(
name|m
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TimetableManager
argument_list|>
name|allManagers
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TimetableManager
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
operator|new
name|TreeSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager m"
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|allManagers
operator|.
name|put
argument_list|(
name|m
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|code2dept
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Department where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2dept
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dept
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Roles
argument_list|>
name|ref2role
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Roles
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Roles
name|role
range|:
name|Roles
operator|.
name|findAll
argument_list|(
literal|true
argument_list|,
name|getHibSession
argument_list|()
argument_list|)
control|)
block|{
name|ref2role
operator|.
name|put
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|id2manager
operator|.
name|get
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
name|manager
operator|=
name|allManagers
operator|.
name|get
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
block|{
name|manager
operator|=
operator|new
name|TimetableManager
argument_list|()
expr_stmt|;
name|manager
operator|.
name|setSolverGroups
argument_list|(
operator|new
name|HashSet
argument_list|<
name|SolverGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setManagerRoles
argument_list|(
operator|new
name|HashSet
argument_list|<
name|ManagerRole
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Manager "
operator|+
name|externalId
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Manager "
operator|+
name|externalId
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|manager
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setFirstName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"firstName"
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setMiddleName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"middleName"
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setLastName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"lastName"
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setEmailAddress
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setAcademicTitle
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"acadTitle"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|(
name|manager
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|mIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"department"
argument_list|)
init|;
name|mIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|mEl
init|=
operator|(
name|Element
operator|)
name|mIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|department
init|=
name|code2dept
operator|.
name|get
argument_list|(
name|mEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
operator|||
name|departments
operator|.
name|remove
argument_list|(
name|department
argument_list|)
condition|)
continue|continue;
name|manager
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|department
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|add
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
if|if
condition|(
name|session
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
block|{
name|manager
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|department
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|remove
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ManagerRole
argument_list|>
name|roles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ManagerRole
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ManagerRole
name|mr
range|:
name|manager
operator|.
name|getManagerRoles
argument_list|()
control|)
name|roles
operator|.
name|put
argument_list|(
name|mr
operator|.
name|getRole
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|mr
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|rIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"role"
argument_list|)
init|;
name|rIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|rEl
init|=
operator|(
name|Element
operator|)
name|rIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|ManagerRole
name|role
init|=
name|roles
operator|.
name|remove
argument_list|(
name|rEl
operator|.
name|attributeValue
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
name|role
operator|=
operator|new
name|ManagerRole
argument_list|()
expr_stmt|;
name|role
operator|.
name|setRole
argument_list|(
name|ref2role
operator|.
name|get
argument_list|(
name|rEl
operator|.
name|attributeValue
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setTimetableManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|add
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
name|role
operator|.
name|setPrimary
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|rEl
operator|.
name|attributeValue
argument_list|(
literal|"primary"
argument_list|,
name|idx
operator|==
literal|0
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setReceiveEmails
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|rEl
operator|.
name|attributeValue
argument_list|(
literal|"email"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
for|for
control|(
name|ManagerRole
name|mr
range|:
name|roles
operator|.
name|values
argument_list|()
control|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|mr
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getManagerRoles
argument_list|()
operator|.
name|remove
argument_list|(
name|mr
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|TimetableManager
name|manager
range|:
name|id2manager
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Manager "
operator|+
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Department
argument_list|>
name|i
init|=
name|manager
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|manager
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importSolverGroups
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing solver groups..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SolverGroup
argument_list|>
name|abbv2group
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|SolverGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SolverGroup
name|g
range|:
operator|(
name|List
argument_list|<
name|SolverGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from SolverGroup where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|abbv2group
operator|.
name|put
argument_list|(
name|g
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|TimetableManager
argument_list|>
name|id2manager
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TimetableManager
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
operator|new
name|TreeSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|(
operator|(
name|List
argument_list|<
name|TimetableManager
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager m"
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
control|)
block|{
name|id2manager
operator|.
name|put
argument_list|(
name|m
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|code2dept
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Department where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2dept
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dept
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Department
argument_list|>
name|updatedDepartments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|TimetableManager
argument_list|>
name|updatedManagers
init|=
operator|new
name|HashSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|abbv
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"abbreviation"
argument_list|)
decl_stmt|;
name|SolverGroup
name|group
init|=
name|abbv2group
operator|.
name|remove
argument_list|(
name|abbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|SolverGroup
argument_list|()
expr_stmt|;
name|group
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|group
operator|.
name|setSolutions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Solution
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setTimetableManagers
argument_list|(
operator|new
name|HashSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Solver group "
operator|+
name|abbv
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Solver group "
operator|+
name|abbv
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setAbbv
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|(
name|group
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|dIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"department"
argument_list|)
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dEl
init|=
operator|(
name|Element
operator|)
name|dIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|department
init|=
name|code2dept
operator|.
name|get
argument_list|(
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
operator|||
name|departments
operator|.
name|remove
argument_list|(
name|department
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|department
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|department
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
name|department
operator|.
name|setSolverGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|updatedDepartments
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|department
operator|.
name|setSolverGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|updatedDepartments
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|TimetableManager
argument_list|>
name|managers
init|=
operator|new
name|HashSet
argument_list|<
name|TimetableManager
argument_list|>
argument_list|(
name|group
operator|.
name|getTimetableManagers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|mIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"manager"
argument_list|)
init|;
name|mIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|mEl
init|=
operator|(
name|Element
operator|)
name|mIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|id2manager
operator|.
name|get
argument_list|(
name|mEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
operator|||
name|managers
operator|.
name|remove
argument_list|(
name|manager
argument_list|)
condition|)
continue|continue;
name|manager
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|add
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|updatedManagers
operator|.
name|add
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableManager
name|manager
range|:
name|managers
control|)
block|{
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|remove
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|manager
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|updatedManagers
operator|.
name|add
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|boolean
name|incremental
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SolverGroup
name|group
range|:
name|abbv2group
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|incremental
operator|&&
operator|!
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|group
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|debug
argument_list|(
literal|"Solver group "
operator|+
name|group
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Department
argument_list|>
name|i
init|=
name|group
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|d
operator|.
name|setSolverGroup
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|updatedDepartments
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|TimetableManager
argument_list|>
name|i
init|=
name|group
operator|.
name|getTimetableManagers
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|.
name|getSolverGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|updatedManagers
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|d
range|:
name|updatedDepartments
control|)
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableManager
name|m
range|:
name|updatedManagers
control|)
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importAcademicAreas
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing academic areas..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|id2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
name|abbv2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|abbv
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"abbreviation"
argument_list|)
decl_stmt|;
name|AcademicArea
name|area
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|area
operator|=
name|id2area
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
name|area
operator|=
name|abbv2area
operator|.
name|get
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|area
operator|=
operator|new
name|AcademicArea
argument_list|()
expr_stmt|;
name|area
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Academic area "
operator|+
name|abbv
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Academic area "
operator|+
name|abbv
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|area
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|area
operator|.
name|setAcademicAreaAbbreviation
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
name|area
operator|.
name|setTitle
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"longTitle"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|id2area
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Academic area "
operator|+
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|area
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importAcademicClassifications
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing academic classifications..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|id2clasf
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicClassification where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2clasf
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
name|code2clasf
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|AcademicClassification
name|clasf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|clasf
operator|=
name|id2clasf
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
name|clasf
operator|=
name|code2clasf
operator|.
name|get
argument_list|(
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|AcademicClassification
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Academic classification "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Academic classification "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|clasf
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|id2clasf
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importMajors
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing majors..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|id2major
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMajor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2major
operator|.
name|put
argument_list|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2major
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|abbv2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|trim
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
argument_list|,
literal|"code"
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|AcademicArea
name|area
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unknown academic area "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PosMajor
name|major
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|major
operator|=
name|id2major
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
name|major
operator|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
name|major
operator|=
operator|new
name|PosMajor
argument_list|()
expr_stmt|;
name|major
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|major
operator|.
name|setAcademicAreas
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Major "
operator|+
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Major "
operator|+
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|major
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|major
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|major
operator|.
name|setName
argument_list|(
name|trim
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|major
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|PosMajor
name|major
range|:
name|id2major
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|abbv
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|area
operator|.
name|getPosMajors
argument_list|()
operator|.
name|remove
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|abbv
operator|=
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
expr_stmt|;
block|}
name|debug
argument_list|(
literal|"Major "
operator|+
name|abbv
operator|+
literal|" "
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importMinors
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing minors..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|id2minor
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
operator|(
name|List
argument_list|<
name|PosMinor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMinor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2minor
operator|.
name|put
argument_list|(
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2minor
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|abbv2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|AcademicArea
name|area
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unknown academic area "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|PosMinor
name|minor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|minor
operator|=
name|id2minor
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
name|minor
operator|=
name|code2minor
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
block|{
name|minor
operator|=
operator|new
name|PosMinor
argument_list|()
expr_stmt|;
name|minor
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setAcademicAreas
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Minor "
operator|+
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Minor "
operator|+
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|minor
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|minor
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|PosMinor
name|minor
range|:
name|id2minor
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|abbv
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
block|{
name|area
operator|.
name|getPosMinors
argument_list|()
operator|.
name|remove
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|abbv
operator|=
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
expr_stmt|;
block|}
name|debug
argument_list|(
literal|"Minor "
operator|+
name|abbv
operator|+
literal|" "
operator|+
name|minor
operator|.
name|getCode
argument_list|()
operator|+
literal|" ("
operator|+
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importStudentGroups
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing student groups..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|id2group
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|code2group
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2group
operator|.
name|put
argument_list|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|code2group
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|size
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"size"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|StudentGroup
name|group
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|group
operator|=
name|id2group
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
name|group
operator|=
name|code2group
operator|.
name|get
argument_list|(
name|code
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|group
operator|=
operator|new
name|StudentGroup
argument_list|()
expr_stmt|;
name|group
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Group "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Group "
operator|+
name|code
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|group
operator|.
name|setGroupAbbreviation
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|group
operator|.
name|setGroupName
argument_list|(
name|name
argument_list|)
expr_stmt|;
try|try
block|{
name|group
operator|.
name|setExpectedSize
argument_list|(
name|size
operator|==
literal|null
operator|||
name|size
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|group
operator|.
name|setExpectedSize
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|setType
argument_list|(
name|type
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentGroupType
operator|.
name|findByReference
argument_list|(
name|type
argument_list|,
name|getHibSession
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
name|id2group
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Group "
operator|+
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importStudentAccomodations
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing student accomodations..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|id2accomodation
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|code2accomodation
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
operator|(
name|List
argument_list|<
name|StudentAccomodation
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentAccomodation where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|accomodation
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2accomodation
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
name|code2accomodation
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|abbv
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|StudentAccomodation
name|accomodation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
name|accomodation
operator|=
name|id2accomodation
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|accomodation
operator|==
literal|null
condition|)
name|accomodation
operator|=
name|code2accomodation
operator|.
name|get
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
if|if
condition|(
name|accomodation
operator|==
literal|null
condition|)
block|{
name|accomodation
operator|=
operator|new
name|StudentAccomodation
argument_list|()
expr_stmt|;
name|accomodation
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Accomodation "
operator|+
name|abbv
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Accomodation "
operator|+
name|abbv
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|accomodation
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|setAbbreviation
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|id2accomodation
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Accomodation "
operator|+
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
operator|+
literal|" ("
operator|+
name|accomodation
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|") deleted."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importTimePatterns
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|info
argument_list|(
literal|"Importing time patterns..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
name|name2pattern
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimePattern
name|p
range|:
operator|(
name|List
argument_list|<
name|TimePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimePattern where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|name2pattern
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|code2dept
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Department where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2dept
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dept
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|TimePattern
name|pattern
init|=
name|name2pattern
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|pattern
operator|=
operator|new
name|TimePattern
argument_list|()
expr_stmt|;
name|pattern
operator|.
name|setTimes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|TimePatternTime
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setDays
argument_list|(
operator|new
name|HashSet
argument_list|<
name|TimePatternDays
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Time pattern "
operator|+
name|name
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Time pattern "
operator|+
name|name
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setNrMeetings
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"nbrMeetings"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setMinPerMtg
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"minsPerMeeting"
argument_list|,
literal|"50"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setVisible
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"visible"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setSlotsPerMtg
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"nbrSlotsPerMeeting"
argument_list|,
literal|"12"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"breakTime"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|,
name|TimePattern
operator|.
name|sTypes
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tId
init|=
literal|0
init|;
name|tId
operator|<
name|TimePattern
operator|.
name|sTypes
operator|.
name|length
condition|;
name|tId
operator|++
control|)
block|{
if|if
condition|(
name|TimePattern
operator|.
name|sTypes
index|[
name|tId
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
name|pattern
operator|.
name|setType
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|(
name|pattern
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|dIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"department"
argument_list|)
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dEl
init|=
operator|(
name|Element
operator|)
name|dIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|department
init|=
name|code2dept
operator|.
name|get
argument_list|(
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
operator|||
name|departments
operator|.
name|remove
argument_list|(
name|department
argument_list|)
condition|)
continue|continue;
name|pattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
name|pattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|TimePatternTime
argument_list|>
name|times
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|TimePatternTime
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimePatternTime
name|time
range|:
name|pattern
operator|.
name|getTimes
argument_list|()
control|)
name|times
operator|.
name|put
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|time
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|tIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"time"
argument_list|)
init|;
name|tIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|tEl
init|=
operator|(
name|Element
operator|)
name|tIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|slot
init|=
name|time2slot
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|tEl
operator|.
name|attributeValue
argument_list|(
literal|"start"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|.
name|remove
argument_list|(
name|slot
argument_list|)
operator|==
literal|null
condition|)
block|{
name|TimePatternTime
name|time
init|=
operator|new
name|TimePatternTime
argument_list|()
decl_stmt|;
name|time
operator|.
name|setStartSlot
argument_list|(
name|slot
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|getTimes
argument_list|()
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimePatternTime
name|time
range|:
name|times
operator|.
name|values
argument_list|()
control|)
block|{
name|pattern
operator|.
name|getTimes
argument_list|()
operator|.
name|remove
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|Integer
argument_list|,
name|TimePatternDays
argument_list|>
name|days
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|TimePatternDays
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimePatternDays
name|d
range|:
name|pattern
operator|.
name|getDays
argument_list|()
control|)
name|days
operator|.
name|put
argument_list|(
name|d
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|d
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|tIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"days"
argument_list|)
init|;
name|tIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|tEl
init|=
operator|(
name|Element
operator|)
name|tIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|code
init|=
name|days2code
argument_list|(
name|tEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|days
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|TimePatternDays
name|d
init|=
operator|new
name|TimePatternDays
argument_list|()
decl_stmt|;
name|d
operator|.
name|setDayCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|getDays
argument_list|()
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|TimePatternDays
name|d
range|:
name|days
operator|.
name|values
argument_list|()
control|)
block|{
name|pattern
operator|.
name|getDays
argument_list|()
operator|.
name|remove
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|TimePattern
name|tp
range|:
name|name2pattern
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Time pattern "
operator|+
name|tp
operator|.
name|getName
argument_list|()
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|importDatePatterns
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|,
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
parameter_list|)
throws|throws
name|ParseException
block|{
name|info
argument_list|(
literal|"Importing date patterns..."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
name|name2pattern
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DatePattern
name|p
range|:
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DatePattern where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|name2pattern
operator|.
name|put
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
name|code2dept
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Department
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|dept
range|:
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Department where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2dept
operator|.
name|put
argument_list|(
name|dept
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|dept
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
name|updatedPatterns
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|parents
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|DatePattern
name|defaultDatePattern
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|DatePattern
name|pattern
init|=
name|name2pattern
operator|.
name|remove
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|pattern
operator|=
operator|new
name|DatePattern
argument_list|()
expr_stmt|;
name|pattern
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setParents
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setType
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setOffset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setPattern
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Date pattern "
operator|+
name|name
operator|+
literal|" created."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debug
argument_list|(
literal|"Date pattern "
operator|+
name|name
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|pattern
operator|.
name|setVisible
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"visible"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|,
name|DatePattern
operator|.
name|sTypes
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tId
init|=
literal|0
init|;
name|tId
operator|<
name|DatePattern
operator|.
name|sTypes
operator|.
name|length
condition|;
name|tId
operator|++
control|)
block|{
if|if
condition|(
name|DatePattern
operator|.
name|sTypes
index|[
name|tId
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
name|type
argument_list|)
condition|)
name|pattern
operator|.
name|setType
argument_list|(
name|tId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"default"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|defaultDatePattern
operator|=
name|pattern
expr_stmt|;
name|String
name|nbrWeeks
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"nbrWeeks"
argument_list|)
decl_stmt|;
name|pattern
operator|.
name|setNumberOfWeeks
argument_list|(
name|nbrWeeks
operator|==
literal|null
operator|||
name|nbrWeeks
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|sFloatFormat
operator|.
name|parse
argument_list|(
name|nbrWeeks
argument_list|)
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Department
argument_list|>
name|departments
init|=
operator|new
name|HashSet
argument_list|<
name|Department
argument_list|>
argument_list|(
name|pattern
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|dIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"department"
argument_list|)
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dEl
init|=
operator|(
name|Element
operator|)
name|dIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Department
name|department
init|=
name|code2dept
operator|.
name|get
argument_list|(
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
operator|||
name|departments
operator|.
name|remove
argument_list|(
name|department
argument_list|)
condition|)
continue|continue;
name|pattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
name|pattern
operator|.
name|getDepartments
argument_list|()
operator|.
name|remove
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|Iterator
name|dIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"datePattern"
argument_list|)
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dEl
init|=
operator|(
name|Element
operator|)
name|dIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|child
init|=
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|parents
operator|.
name|get
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|parents
operator|.
name|put
argument_list|(
name|child
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|BitSet
name|weekCode
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|int
name|startMonth
init|=
name|session
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|session
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
name|date2index
init|=
operator|new
name|HashMap
argument_list|<
name|Date
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|date2index
operator|.
name|put
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|year
argument_list|)
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|dIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"dates"
argument_list|)
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dEl
init|=
operator|(
name|Element
operator|)
name|dIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Date
name|sd
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"fromDate"
argument_list|,
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|ed
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"toDate"
argument_list|,
name|dEl
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Integer
name|i1
init|=
name|date2index
operator|.
name|get
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|Integer
name|i2
init|=
name|date2index
operator|.
name|get
argument_list|(
name|ed
argument_list|)
decl_stmt|;
if|if
condition|(
name|i1
operator|!=
literal|null
operator|&&
name|i2
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|j
init|=
name|i1
init|;
name|j
operator|<=
name|i2
condition|;
name|j
operator|++
control|)
name|weekCode
operator|.
name|set
argument_list|(
name|j
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pattern
operator|.
name|getType
argument_list|()
operator|!=
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
name|pattern
operator|.
name|setPatternBitSet
argument_list|(
name|weekCode
argument_list|)
expr_stmt|;
name|updatedPatterns
operator|.
name|put
argument_list|(
name|pattern
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatePattern
name|pattern
range|:
name|updatedPatterns
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|parents
operator|.
name|get
argument_list|(
name|pattern
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|DatePattern
argument_list|>
name|patterns
init|=
operator|new
name|HashSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|(
name|pattern
operator|.
name|getParents
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|name
range|:
name|p
control|)
block|{
name|DatePattern
name|dp
init|=
name|updatedPatterns
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
operator|||
name|patterns
operator|.
name|remove
argument_list|(
name|dp
argument_list|)
condition|)
continue|continue;
name|pattern
operator|.
name|getParents
argument_list|()
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|.
name|getParents
argument_list|()
operator|.
name|removeAll
argument_list|(
name|patterns
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|DatePattern
name|pattern
range|:
name|updatedPatterns
operator|.
name|values
argument_list|()
control|)
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|defaultDatePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|getHibSession
argument_list|()
operator|.
name|contains
argument_list|(
name|session
argument_list|)
condition|)
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setDefaultDatePattern
argument_list|(
name|defaultDatePattern
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|DatePattern
name|dp
range|:
name|name2pattern
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Date pattern "
operator|+
name|dp
operator|.
name|getName
argument_list|()
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|time2slot
parameter_list|(
name|int
name|time
parameter_list|)
block|{
name|int
name|hour
init|=
name|time
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|time
operator|%
literal|100
decl_stmt|;
if|if
condition|(
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|!=
literal|0
condition|)
block|{
name|min
operator|=
name|min
operator|-
operator|(
name|min
operator|%
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
expr_stmt|;
block|}
return|return
operator|(
name|hour
operator|*
literal|60
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
return|;
block|}
specifier|public
name|int
name|days2code
parameter_list|(
name|String
name|daysOfWeek
parameter_list|)
block|{
name|int
name|code
init|=
literal|0
decl_stmt|;
name|String
name|tmpDays
init|=
name|daysOfWeek
decl_stmt|;
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"Th"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"Th"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"R"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"R"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"Su"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"Su"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"U"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"U"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"M"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"M"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"T"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"T"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"W"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"W"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"F"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|code
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"S"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
return|return
name|code
return|;
block|}
specifier|public
name|void
name|importExaminationPeriods
parameter_list|(
name|Element
name|root
parameter_list|,
name|Session
name|session
parameter_list|,
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
parameter_list|)
throws|throws
name|ParseException
block|{
name|info
argument_list|(
literal|"Importing "
operator|+
name|root
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" examination periods..."
argument_list|)
expr_stmt|;
name|ExamType
name|type
init|=
name|ExamType
operator|.
name|findByReference
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"Examination type "
operator|+
name|root
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ExamPeriod
argument_list|>
name|periods
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExamPeriod
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
operator|(
name|List
argument_list|<
name|ExamPeriod
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ExamPeriod p where p.session.uniqueId = :sessionId and p.examType.uniqueId = :typeId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"typeId"
argument_list|,
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|periods
operator|.
name|put
argument_list|(
name|period
operator|.
name|getDateOffset
argument_list|()
operator|+
literal|":"
operator|+
name|period
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Date
name|date
init|=
name|dateFormat
operator|.
name|parse
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|diff
init|=
name|date
operator|.
name|getTime
argument_list|()
operator|-
name|session
operator|.
name|getExamBeginDate
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|diff
operator|/
operator|(
literal|1000.0
operator|*
literal|60
operator|*
literal|60
operator|*
literal|24
operator|)
argument_list|)
decl_stmt|;
name|int
name|startSlot
init|=
name|time2slot
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|ExamPeriod
name|period
init|=
name|periods
operator|.
name|remove
argument_list|(
name|offset
operator|+
literal|":"
operator|+
name|startSlot
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
block|{
name|period
operator|=
operator|new
name|ExamPeriod
argument_list|()
expr_stmt|;
name|period
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|period
operator|.
name|setExamType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|period
operator|.
name|setDateOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|period
operator|.
name|setStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
block|}
name|period
operator|.
name|setLength
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
operator|/
literal|5
argument_list|)
expr_stmt|;
name|period
operator|.
name|setEventStartOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"eventStartOffset"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|period
operator|.
name|setEventStopOffset
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"eventStopOffset"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|period
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"preference"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
name|debug
argument_list|(
literal|"Examination period "
operator|+
name|period
operator|.
name|getName
argument_list|()
operator|+
literal|" created."
argument_list|)
expr_stmt|;
else|else
name|debug
argument_list|(
literal|"Examination period "
operator|+
name|period
operator|.
name|getName
argument_list|()
operator|+
literal|" updated."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|period
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|ExamPeriod
name|period
range|:
name|periods
operator|.
name|values
argument_list|()
control|)
block|{
name|debug
argument_list|(
literal|"Examination period "
operator|+
name|period
operator|.
name|getName
argument_list|()
operator|+
literal|" removed."
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|period
argument_list|)
expr_stmt|;
block|}
block|}
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

