begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   * UniTime 3.1 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2009 - 2010, UniTime LLC  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidLookup
operator|.
name|UserInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventNote
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RelatedCourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SpecialEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SponsoringOrganization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_comment
comment|/**  * @author says  *  */
end_comment

begin_class
specifier|public
class|class
name|EventImport
extends|extends
name|EventRelatedImports
block|{
specifier|private
specifier|static
specifier|final
name|String
name|specialEventElementName
init|=
literal|"specialEvent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|courseRelatedEventElementName
init|=
literal|"courseRelatedEvent"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|meetingElementName
init|=
literal|"meeting"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|noteElementName
init|=
literal|"note"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|eventContactElementName
init|=
literal|"eventContact"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|sponsoringOrgElementName
init|=
literal|"sponsoringOrganization"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|courseElementName
init|=
literal|"course"
decl_stmt|;
specifier|private
name|String
name|academicInitiative
init|=
literal|null
decl_stmt|;
specifier|private
name|ExternalUidLookup
name|iLookup
init|=
literal|null
decl_stmt|;
comment|/** 	 *  	 */
specifier|public
name|EventImport
parameter_list|()
block|{
name|String
name|className
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.instructor.external_id.lookup.class"
argument_list|)
decl_stmt|;
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iLookup
operator|=
operator|(
name|ExternalUidLookup
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Unable to instantiate external id lookup: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.unitime.timetable.dataexchange.BaseImport#loadXml(org.dom4j.Element) 	 */
annotation|@
name|Override
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|trimLeadingZeros
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.data.exchange.trim.externalId"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
if|if
condition|(
name|trimLeadingZeros
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|trimLeadingZerosFromExternalId
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|loadedCount
init|=
literal|0
decl_stmt|;
name|int
name|recordCount
init|=
literal|0
decl_stmt|;
try|try
block|{
name|String
name|rootElementName
init|=
literal|"events"
decl_stmt|;
if|if
condition|(
operator|!
name|rootElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|rootElementName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a Events load file."
argument_list|)
throw|;
block|}
name|academicInitiative
operator|=
name|getRequiredStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"academicInitiative"
argument_list|,
name|rootElementName
argument_list|)
expr_stmt|;
name|dateFormat
operator|=
name|getOptionalStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"dateFormat"
argument_list|)
expr_stmt|;
name|timeFormat
operator|=
name|getOptionalStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"timeFormat"
argument_list|)
expr_stmt|;
name|String
name|created
init|=
name|getOptionalStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"created"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeFormat
operator|==
literal|null
condition|)
block|{
name|timeFormat
operator|=
literal|"HHmm"
expr_stmt|;
block|}
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
comment|// Use the session for the academicInitiative that is effective for events now as the session to use for logging changes
name|session
operator|=
name|findDefaultSession
argument_list|(
name|academicInitiative
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|addNote
argument_list|(
literal|"Loading Events XML file created on: "
operator|+
name|created
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|session
argument_list|,
name|created
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_EVENTS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Event
name|event
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|specialEventElementName
argument_list|)
operator|&&
operator|!
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|courseRelatedEventElementName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expecting to find a '"
operator|+
name|specialEventElementName
operator|+
literal|"' or a '"
operator|+
name|courseRelatedEventElementName
operator|+
literal|"' at this level, instead found '"
operator|+
name|element
operator|.
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
if|if
condition|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|specialEventElementName
argument_list|)
condition|)
block|{
name|event
operator|=
name|elementSpecialEvent
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|courseRelatedEventElementName
argument_list|)
condition|)
block|{
name|event
operator|=
name|elementCourseRelatedEvent
argument_list|(
name|element
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
name|loadedCount
operator|++
expr_stmt|;
block|}
name|recordCount
operator|++
expr_stmt|;
name|flushIfNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
name|addNote
argument_list|(
literal|"Events Added: "
operator|+
name|loadedCount
operator|+
literal|" of "
operator|+
name|recordCount
operator|+
literal|" possible events."
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reportMissingLocations
argument_list|()
expr_stmt|;
name|mailLoadResults
argument_list|()
expr_stmt|;
block|}
specifier|private
name|Event
name|elementSpecialEvent
parameter_list|(
name|Element
name|specialEventElement
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|specialEventElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|specialEventElementName
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"Not Loading "
operator|+
name|specialEventElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|specialEventElementName
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|specialEventElement
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|String
name|eventName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|eventName
operator|=
name|getRequiredStringAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"eventName"
argument_list|,
name|specialEventElementName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addNote
argument_list|(
literal|"Not Loading "
operator|+
name|specialEventElementName
operator|+
literal|" Error:  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|specialEventElement
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|Integer
name|minCapacity
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"minCapacity"
argument_list|)
decl_stmt|;
name|Integer
name|maxCapacity
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"maxCapacity"
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|getOptionalStringAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"email"
argument_list|)
decl_stmt|;
name|SpecialEvent
name|event
init|=
operator|new
name|SpecialEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEventName
argument_list|(
name|eventName
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMinCapacity
argument_list|(
name|minCapacity
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|maxCapacity
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
try|try
block|{
name|elementMeetings
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|Element
name|eventContactElement
init|=
name|specialEventElement
operator|.
name|element
argument_list|(
name|eventContactElementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventContactElement
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setMainContact
argument_list|(
name|elementEventContact
argument_list|(
name|eventContactElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|elementAdditionalEventContacts
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|Element
name|sponsoringOrgElement
init|=
name|specialEventElement
operator|.
name|element
argument_list|(
name|sponsoringOrgElementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sponsoringOrgElement
operator|!=
literal|null
condition|)
block|{
name|elementSponsoringOrganization
argument_list|(
name|sponsoringOrgElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
name|elementNotes
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addNote
argument_list|(
literal|"Not Loading "
operator|+
name|specialEventElementName
operator|+
literal|" Error:  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|specialEventElement
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
operator|(
name|event
operator|)
return|;
block|}
specifier|private
name|Event
name|elementCourseRelatedEvent
parameter_list|(
name|Element
name|specialEventElement
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|specialEventElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|courseRelatedEventElementName
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"Not Loading "
operator|+
name|specialEventElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|courseRelatedEventElementName
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|specialEventElement
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|String
name|eventName
init|=
literal|null
decl_stmt|;
try|try
block|{
name|eventName
operator|=
name|getRequiredStringAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"eventName"
argument_list|,
name|courseRelatedEventElementName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addNote
argument_list|(
literal|"Not Loading "
operator|+
name|courseRelatedEventElementName
operator|+
literal|" Error:  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|specialEventElement
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|Integer
name|minCapacity
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"minCapacity"
argument_list|)
decl_stmt|;
name|Integer
name|maxCapacity
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"maxCapacity"
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|getOptionalStringAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"email"
argument_list|)
decl_stmt|;
name|Boolean
name|requiredAttendance
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|specialEventElement
argument_list|,
literal|"attendanceRequired"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredAttendance
operator|==
literal|null
condition|)
block|{
name|requiredAttendance
operator|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|CourseEvent
name|event
init|=
operator|new
name|CourseEvent
argument_list|()
decl_stmt|;
name|event
operator|.
name|setEventName
argument_list|(
name|eventName
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMinCapacity
argument_list|(
name|minCapacity
argument_list|)
expr_stmt|;
name|event
operator|.
name|setMaxCapacity
argument_list|(
name|maxCapacity
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|event
operator|.
name|setReqAttendance
argument_list|(
name|requiredAttendance
argument_list|)
expr_stmt|;
try|try
block|{
name|elementRelatedCourses
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|elementMeetings
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|Element
name|eventContactElement
init|=
name|specialEventElement
operator|.
name|element
argument_list|(
name|eventContactElementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|eventContactElement
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setMainContact
argument_list|(
name|elementEventContact
argument_list|(
name|eventContactElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|elementAdditionalEventContacts
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|Element
name|sponsoringOrgElement
init|=
name|specialEventElement
operator|.
name|element
argument_list|(
name|sponsoringOrgElementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sponsoringOrgElement
operator|!=
literal|null
condition|)
block|{
name|elementSponsoringOrganization
argument_list|(
name|sponsoringOrgElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
name|elementNotes
argument_list|(
name|specialEventElement
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addNote
argument_list|(
literal|"Not Loading "
operator|+
name|courseRelatedEventElementName
operator|+
literal|" Error:  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|specialEventElement
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|event
argument_list|)
expr_stmt|;
return|return
operator|(
name|event
operator|)
return|;
block|}
specifier|private
name|void
name|elementMeetings
parameter_list|(
name|Element
name|element
parameter_list|,
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|meetingsElementName
init|=
literal|"meetings"
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|meetingsElementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|meetingsElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|meetingIt
init|=
name|meetingsElement
operator|.
name|elementIterator
argument_list|(
name|meetingElementName
argument_list|)
init|;
name|meetingIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|elementMeeting
argument_list|(
operator|(
name|Element
operator|)
name|meetingIt
operator|.
name|next
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|==
literal|null
operator|||
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
name|meetingsElementName
operator|+
literal|" element must contain at least one "
operator|+
name|meetingElementName
operator|+
literal|" element"
argument_list|)
operator|)
throw|;
block|}
block|}
specifier|private
name|void
name|elementMeeting
parameter_list|(
name|Element
name|meetingElement
parameter_list|,
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|meetingElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|meetingElementName
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|meetingElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|meetingElementName
argument_list|)
operator|)
throw|;
block|}
name|String
name|meetingDateStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"meetingDate"
argument_list|,
name|meetingElementName
argument_list|)
decl_stmt|;
name|String
name|startTimeStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"startTime"
argument_list|,
name|meetingElementName
argument_list|)
decl_stmt|;
name|String
name|endTimeStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"endTime"
argument_list|,
name|meetingElementName
argument_list|)
decl_stmt|;
name|Integer
name|startOffset
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"startOffset"
argument_list|)
decl_stmt|;
name|Integer
name|endOffset
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"stopOffset"
argument_list|)
decl_stmt|;
name|String
name|buildingAbbv
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"buildingAbbv"
argument_list|)
decl_stmt|;
name|String
name|roomNumber
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"roomNumber"
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"location"
argument_list|)
decl_stmt|;
name|Boolean
name|classCanOverride
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"callCanOverride"
argument_list|)
decl_stmt|;
name|String
name|approvedDateStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"approvedDateTime"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classCanOverride
operator|==
literal|null
condition|)
block|{
name|classCanOverride
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|TimeObject
name|timeObj
init|=
operator|new
name|TimeObject
argument_list|(
name|startTimeStr
argument_list|,
name|endTimeStr
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Meeting
name|meeting
init|=
name|timeObj
operator|.
name|asMeeting
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setStartOffset
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopOffset
argument_list|(
name|endOffset
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocationPermanentId
argument_list|(
name|findMeetingLocationPermId
argument_list|(
name|buildingAbbv
argument_list|,
name|roomNumber
argument_list|,
name|location
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|meetingElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  meeting location not found - "
operator|+
operator|(
name|buildingAbbv
operator|!=
literal|null
condition|?
name|buildingAbbv
operator|+
operator|(
name|roomNumber
operator|!=
literal|null
condition|?
literal|" "
operator|+
name|roomNumber
else|:
literal|""
operator|)
else|:
operator|(
name|location
operator|!=
literal|null
condition|?
name|location
else|:
literal|""
operator|)
operator|)
argument_list|)
operator|)
throw|;
block|}
name|meeting
operator|.
name|setClassCanOverride
argument_list|(
name|classCanOverride
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|meetingDateStr
argument_list|,
name|dateFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|meetingElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  meeting date must not be null"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|approvedDateStr
operator|!=
literal|null
condition|)
block|{
name|Date
name|approvedDate
init|=
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|approvedDateStr
argument_list|,
name|dateFormat
operator|+
literal|" "
operator|+
name|timeFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|approvedDate
operator|==
literal|null
condition|)
block|{
name|approvedDate
operator|=
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|approvedDateStr
argument_list|,
name|dateFormat
argument_list|)
expr_stmt|;
block|}
name|meeting
operator|.
name|setStatus
argument_list|(
name|Meeting
operator|.
name|Status
operator|.
name|APPROVED
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovalDate
argument_list|(
name|approvedDate
argument_list|)
expr_stmt|;
block|}
name|meeting
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|addTomeetings
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|elementRelatedCourses
parameter_list|(
name|Element
name|element
parameter_list|,
name|CourseEvent
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|relatedCoursesElementName
init|=
literal|"relatedCourses"
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|relatedCoursesElementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|relatedCoursesElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|courseIt
init|=
name|relatedCoursesElement
operator|.
name|elementIterator
argument_list|(
name|courseElementName
argument_list|)
init|;
name|courseIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|elementCourse
argument_list|(
operator|(
name|Element
operator|)
name|courseIt
operator|.
name|next
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
comment|//        if (event.getMeetings() == null || event.getMeetings().size() == 0){
comment|//        	throw(new Exception(relatedCoursesElementName + " element must contain at least one " + meetingElementName + " element"));
comment|//        }
block|}
specifier|private
name|void
name|elementCourse
parameter_list|(
name|Element
name|courseElement
parameter_list|,
name|CourseEvent
name|courseEvent
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|courseElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|courseElementName
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|courseElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|courseElementName
argument_list|)
operator|)
throw|;
block|}
name|String
name|relatedExternalIdStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"relatedExternalId"
argument_list|,
name|courseElementName
argument_list|)
decl_stmt|;
name|String
name|relationshipType
init|=
name|getRequiredStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"relationshipType"
argument_list|,
name|courseElementName
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|getRequiredStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"term"
argument_list|,
name|courseElementName
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|getRequiredStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"year"
argument_list|,
name|courseElementName
argument_list|)
decl_stmt|;
name|String
name|courseExternalIdStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"courseExternalId"
argument_list|)
decl_stmt|;
name|CourseOffering
name|courseOffering
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseExternalIdStr
operator|!=
literal|null
condition|)
block|{
name|courseOffering
operator|=
name|findCourseOfferingFromExternalId
argument_list|(
name|courseExternalIdStr
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|academicInitiative
argument_list|)
expr_stmt|;
block|}
name|RelatedCourseInfo
name|rci
init|=
operator|new
name|RelatedCourseInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|relationshipType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"class"
argument_list|)
condition|)
block|{
name|Class_
name|c
init|=
name|findClassFromExternalId
argument_list|(
name|relatedExternalIdStr
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|academicInitiative
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|courseElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error: unable to find a class with an externalId of "
operator|+
name|relatedExternalIdStr
argument_list|)
operator|)
throw|;
block|}
name|rci
operator|.
name|setOwner
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
block|{
name|rci
operator|.
name|setCourse
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rci
operator|.
name|setCourse
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|relationshipType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"instructionalOffering"
argument_list|)
condition|)
block|{
name|InstructionalOffering
name|io
init|=
name|findInstructionalOfferingFromExternalId
argument_list|(
name|relatedExternalIdStr
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|academicInitiative
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|courseElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error: unable to find a instructional offering with an externalId of "
operator|+
name|relatedExternalIdStr
argument_list|)
operator|)
throw|;
block|}
name|rci
operator|.
name|setOwner
argument_list|(
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
block|{
name|rci
operator|.
name|setCourse
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rci
operator|.
name|setCourse
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|relationshipType
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"courseOffering"
argument_list|)
condition|)
block|{
name|CourseOffering
name|co
init|=
name|findCourseOfferingFromExternalId
argument_list|(
name|relatedExternalIdStr
argument_list|,
name|year
argument_list|,
name|term
argument_list|,
name|academicInitiative
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|courseElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error: unable to find a course offering with an externalId of "
operator|+
name|relatedExternalIdStr
argument_list|)
operator|)
throw|;
block|}
name|rci
operator|.
name|setOwner
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|rci
operator|.
name|setCourse
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
name|rci
operator|.
name|setEvent
argument_list|(
name|courseEvent
argument_list|)
expr_stmt|;
name|courseEvent
operator|.
name|addTorelatedCourses
argument_list|(
name|rci
argument_list|)
expr_stmt|;
block|}
specifier|private
name|EventContact
name|elementEventContact
parameter_list|(
name|Element
name|eventContactElement
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|eventContactElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|eventContactElementName
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|eventContactElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|eventContactElementName
argument_list|)
operator|)
throw|;
block|}
name|String
name|externalId
init|=
name|getRequiredStringAttribute
argument_list|(
name|eventContactElement
argument_list|,
literal|"externalId"
argument_list|,
name|eventContactElementName
argument_list|)
decl_stmt|;
name|String
name|firstName
init|=
name|getOptionalStringAttribute
argument_list|(
name|eventContactElement
argument_list|,
literal|"firstName"
argument_list|)
decl_stmt|;
name|String
name|middleName
init|=
name|getOptionalStringAttribute
argument_list|(
name|eventContactElement
argument_list|,
literal|"middleName"
argument_list|)
decl_stmt|;
name|String
name|lastName
init|=
name|getRequiredStringAttribute
argument_list|(
name|eventContactElement
argument_list|,
literal|"lastName"
argument_list|,
name|eventContactElementName
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|getOptionalStringAttribute
argument_list|(
name|eventContactElement
argument_list|,
literal|"email"
argument_list|)
decl_stmt|;
name|String
name|phone
init|=
name|getOptionalStringAttribute
argument_list|(
name|eventContactElement
argument_list|,
literal|"phone"
argument_list|)
decl_stmt|;
try|try
block|{
name|Long
name|numId
init|=
operator|new
name|Long
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|numId
operator|!=
literal|null
operator|&&
name|numId
operator|.
name|longValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|externalId
operator|=
name|numId
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//  leave the externalId alone
block|}
name|EventContact
name|ec
init|=
name|EventContact
operator|.
name|findByExternalUniqueId
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ec
operator|==
literal|null
condition|)
block|{
name|UserInfo
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iLookup
operator|!=
literal|null
condition|)
name|user
operator|=
name|iLookup
operator|.
name|doLookup
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Failed to lookup "
operator|+
name|externalId
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|email
operator|==
literal|null
condition|)
name|email
operator|=
name|user
operator|.
name|getEmail
argument_list|()
expr_stmt|;
if|if
condition|(
name|firstName
operator|==
literal|null
condition|)
name|firstName
operator|=
name|user
operator|.
name|getFirstName
argument_list|()
expr_stmt|;
if|if
condition|(
name|middleName
operator|==
literal|null
condition|)
name|middleName
operator|=
name|user
operator|.
name|getMiddleName
argument_list|()
expr_stmt|;
if|if
condition|(
name|lastName
operator|==
literal|null
condition|)
name|lastName
operator|=
name|user
operator|.
name|getLastName
argument_list|()
expr_stmt|;
if|if
condition|(
name|phone
operator|==
literal|null
condition|)
name|phone
operator|=
name|user
operator|.
name|getLastName
argument_list|()
expr_stmt|;
block|}
name|ec
operator|=
operator|new
name|EventContact
argument_list|()
expr_stmt|;
name|ec
operator|.
name|setFirstName
argument_list|(
name|firstName
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setMiddleName
argument_list|(
name|middleName
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setLastName
argument_list|(
name|lastName
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setEmailAddress
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setPhone
argument_list|(
name|phone
argument_list|)
expr_stmt|;
name|ec
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|ec
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ec
operator|)
return|;
block|}
comment|/* 	 *  The additional event contacts relationship to an event is not currently supported in the user interface so the 	 *  ability to load addition contacts through the xml interface is currently disabled. 	 */
specifier|private
name|void
name|elementAdditionalEventContacts
parameter_list|(
name|Element
name|element
parameter_list|,
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|additionalContactsElementName
init|=
literal|"additionalEventContacts"
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|additionalContactsElementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|additionalContactsElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|EventContact
name|ec
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|eventContactIt
init|=
name|additionalContactsElement
operator|.
name|elementIterator
argument_list|(
name|eventContactElementName
argument_list|)
init|;
name|eventContactIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ec
operator|=
name|elementEventContact
argument_list|(
operator|(
name|Element
operator|)
name|eventContactIt
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ec
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|getAdditionalContacts
argument_list|()
operator|.
name|add
argument_list|(
name|ec
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|elementSponsoringOrganization
parameter_list|(
name|Element
name|sponsoringOrgElement
parameter_list|,
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|sponsoringOrgElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|sponsoringOrgElementName
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|sponsoringOrgElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|sponsoringOrgElementName
argument_list|)
operator|)
throw|;
block|}
name|String
name|name
init|=
name|getRequiredStringAttribute
argument_list|(
name|sponsoringOrgElement
argument_list|,
literal|"name"
argument_list|,
name|sponsoringOrgElementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|SponsoringOrganization
name|sponsoringOrg
init|=
name|findSponsoringOrg
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sponsoringOrg
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setSponsoringOrganization
argument_list|(
name|sponsoringOrg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
name|sponsoringOrgElementName
operator|+
literal|" element matching org not found:  "
operator|+
name|name
argument_list|)
operator|)
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|elementNotes
parameter_list|(
name|Element
name|element
parameter_list|,
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|notesElementName
init|=
literal|"notes"
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|notesElementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|notesElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|noteIt
init|=
name|notesElement
operator|.
name|elementIterator
argument_list|(
name|noteElementName
argument_list|)
init|;
name|noteIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|elementNote
argument_list|(
operator|(
name|Element
operator|)
name|noteIt
operator|.
name|next
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|elementNote
parameter_list|(
name|Element
name|noteElement
parameter_list|,
name|Event
name|event
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|noteElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|noteElementName
argument_list|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"Not Loading "
operator|+
name|noteElement
operator|.
name|getName
argument_list|()
operator|+
literal|" Error:  attempted to load as "
operator|+
name|noteElementName
argument_list|)
operator|)
throw|;
block|}
name|String
name|noteText
init|=
name|getRequiredStringAttribute
argument_list|(
name|noteElement
argument_list|,
literal|"noteText"
argument_list|,
name|noteElementName
argument_list|)
decl_stmt|;
name|String
name|noteTypeStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|noteElement
argument_list|,
literal|"noteType"
argument_list|,
name|noteElementName
argument_list|)
decl_stmt|;
name|String
name|noteTimestampStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|noteElement
argument_list|,
literal|"timestamp"
argument_list|)
decl_stmt|;
name|String
name|userName
init|=
name|getOptionalStringAttribute
argument_list|(
name|noteElement
argument_list|,
literal|"userName"
argument_list|)
decl_stmt|;
name|EventNote
name|note
init|=
operator|new
name|EventNote
argument_list|()
decl_stmt|;
name|note
operator|.
name|setTextNote
argument_list|(
name|noteText
argument_list|)
expr_stmt|;
if|if
condition|(
name|noteTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"create"
argument_list|)
condition|)
block|{
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeCreateEvent
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|noteTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"update"
argument_list|)
condition|)
block|{
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeAddMeetings
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|noteTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"approve"
argument_list|)
condition|)
block|{
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeApproval
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|noteTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"reject"
argument_list|)
condition|)
block|{
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeRejection
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|noteTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeDeletion
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|noteTypeStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
name|note
operator|.
name|setNoteType
argument_list|(
name|EventNote
operator|.
name|sEventNoteTypeEditEvent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|noteTimestampStr
operator|==
literal|null
condition|)
block|{
name|note
operator|.
name|setTimeStamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|note
operator|.
name|setTimeStamp
argument_list|(
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|noteTimestampStr
argument_list|,
name|dateFormat
operator|+
literal|" "
operator|+
name|timeFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|note
operator|.
name|setUser
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|note
operator|.
name|setEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|event
operator|.
name|addTonotes
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getEmailSubject
parameter_list|()
block|{
return|return
operator|(
literal|"Event Import Results"
operator|)
return|;
block|}
specifier|private
name|Session
name|findDefaultSession
parameter_list|(
name|String
name|academicInitiative
parameter_list|,
name|Date
name|aDate
parameter_list|)
block|{
return|return
operator|(
name|Session
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Session as s where s.academicInitiative = :academicInititive and s.eventBeginDate<= :aDate  and s.eventEndDate>= :aDate"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"academicInititive"
argument_list|,
name|academicInitiative
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"aDate"
argument_list|,
name|aDate
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|Room
name|findRoom
parameter_list|(
name|String
name|buildingAbbv
parameter_list|,
name|String
name|roomNumber
parameter_list|)
block|{
name|Room
name|room
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|List
name|rooms
init|=
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room as r where r.roomNumber=:roomNbr and r.building.abbreviation = :building"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"building"
argument_list|,
name|buildingAbbv
argument_list|)
operator|.
name|setString
argument_list|(
literal|"roomNbr"
argument_list|,
name|roomNumber
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|!=
literal|null
operator|&&
name|rooms
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|room
operator|=
operator|(
name|Room
operator|)
name|rooms
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
return|return
operator|(
name|room
operator|)
return|;
block|}
specifier|private
name|SponsoringOrganization
name|findSponsoringOrg
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|SponsoringOrganization
name|sponsoringOrg
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sponsoringOrg
operator|==
literal|null
condition|)
block|{
name|sponsoringOrg
operator|=
operator|(
name|SponsoringOrganization
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct so from SponsoringOrganization as so where so.name = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|sponsoringOrg
operator|)
return|;
block|}
specifier|private
name|NonUniversityLocation
name|findLocation
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
name|locations
init|=
name|findNonUniversityLocationsWithName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|==
literal|null
operator|||
name|locations
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|NonUniversityLocation
operator|)
name|locations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
specifier|private
name|Long
name|findMeetingLocationPermId
parameter_list|(
name|String
name|buildingAbbv
parameter_list|,
name|String
name|roomNumber
parameter_list|,
name|String
name|location
parameter_list|)
block|{
name|Room
name|room
init|=
name|findRoom
argument_list|(
name|buildingAbbv
argument_list|,
name|roomNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|room
operator|.
name|getPermanentId
argument_list|()
operator|)
return|;
block|}
name|NonUniversityLocation
name|nonUnivLocation
init|=
name|findLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|nonUnivLocation
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|nonUnivLocation
operator|.
name|getPermanentId
argument_list|()
operator|)
return|;
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|private
name|Class_
name|findClassFromExternalId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|academicInitiative
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
operator|||
name|year
operator|==
literal|null
operator|||
name|term
operator|==
literal|null
operator|||
name|academicInitiative
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
operator|(
operator|(
name|Class_
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Class_ as c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session as s where s.academicInitiative = :academicInititive and s.academicYear = :aYear and s.academicTerm = :aTerm and c.externalUniqueId = :anExternalId and rownum = 1"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"academicInititive"
argument_list|,
name|academicInitiative
argument_list|)
operator|.
name|setString
argument_list|(
literal|"aYear"
argument_list|,
name|year
argument_list|)
operator|.
name|setString
argument_list|(
literal|"aTerm"
argument_list|,
name|term
argument_list|)
operator|.
name|setString
argument_list|(
literal|"anExternalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
return|;
block|}
specifier|private
name|InstructionalOffering
name|findInstructionalOfferingFromExternalId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|academicInitiative
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
operator|||
name|year
operator|==
literal|null
operator|||
name|term
operator|==
literal|null
operator|||
name|academicInitiative
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
operator|(
operator|(
name|InstructionalOffering
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select io from InstructionalOffering as io inner join io.session as s where s.academicInitiative = :academicInititive and s.academicYear = :aYear and s.academicTerm = :aTerm and io.externalUniqueId = :anExternalId and rownum = 1"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"academicInititive"
argument_list|,
name|academicInitiative
argument_list|)
operator|.
name|setString
argument_list|(
literal|"aYear"
argument_list|,
name|year
argument_list|)
operator|.
name|setString
argument_list|(
literal|"aTerm"
argument_list|,
name|term
argument_list|)
operator|.
name|setString
argument_list|(
literal|"anExternalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
return|;
block|}
specifier|private
name|CourseOffering
name|findCourseOfferingFromExternalId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|year
parameter_list|,
name|String
name|term
parameter_list|,
name|String
name|academicInitiative
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
operator|||
name|year
operator|==
literal|null
operator|||
name|term
operator|==
literal|null
operator|||
name|academicInitiative
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
return|return
operator|(
operator|(
name|CourseOffering
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering as co inner join co.instructionalOffering.session as s where s.academicInitiative = :academicInititive and s.academicYear = :aYear and s.academicTerm = :aTerm and co.externalUniqueId = :anExternalId and rownum = 1"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"academicInititive"
argument_list|,
name|academicInitiative
argument_list|)
operator|.
name|setString
argument_list|(
literal|"aYear"
argument_list|,
name|year
argument_list|)
operator|.
name|setString
argument_list|(
literal|"aTerm"
argument_list|,
name|term
argument_list|)
operator|.
name|setString
argument_list|(
literal|"anExternalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

