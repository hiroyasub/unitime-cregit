begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCatalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseSubpartCredit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  *   * @author Timothy Almon, Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|CourseCatalogImport
extends|extends
name|BaseImport
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MIN_CREDIT
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_CREDIT
init|=
literal|16
decl_stmt|;
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"courseCatalog"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a Course Catalog load file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
name|it
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseCatalog
name|catalog
init|=
operator|new
name|CourseCatalog
argument_list|()
decl_stmt|;
name|catalog
operator|.
name|setCourseNumber
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setApprovalType
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"approvalType"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setExternalUniqueId
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setPermanentId
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"permanentId"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setPreviousCourseNumber
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"previousCourseNumber"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setPreviousSubject
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"previousSubject"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setSubject
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setTitle
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|Element
name|credit
init|=
name|element
operator|.
name|element
argument_list|(
literal|"courseCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|credit
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"Course credit not provided for "
operator|+
name|catalog
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|catalog
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|catalog
operator|.
name|setCreditFormat
argument_list|(
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"creditFormat"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setCreditType
argument_list|(
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"creditType"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setCreditUnitType
argument_list|(
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"creditUnitType"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|setFractionalCreditAllowed
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"fractionalCreditAllowed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|minCredit
init|=
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"fixedCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCredit
operator|!=
literal|null
condition|)
name|catalog
operator|.
name|setFixedMinimumCredit
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCredit
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
name|minCredit
operator|=
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"minimumCredit"
argument_list|)
expr_stmt|;
if|if
condition|(
name|minCredit
operator|!=
literal|null
condition|)
name|catalog
operator|.
name|setFixedMinimumCredit
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCredit
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|catalog
operator|.
name|setFixedMinimumCredit
argument_list|(
operator|new
name|Float
argument_list|(
name|MIN_CREDIT
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|maxCredit
init|=
name|credit
operator|.
name|attributeValue
argument_list|(
literal|"maximumCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
condition|)
name|catalog
operator|.
name|setMaximumCredit
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|catalog
operator|.
name|setMaximumCredit
argument_list|(
operator|new
name|Float
argument_list|(
name|MAX_CREDIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
comment|// to set the uniqueId
name|loadCredits
argument_list|(
name|element
argument_list|,
name|catalog
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
comment|// to save the subparts
name|flushIfNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|loadCredits
parameter_list|(
name|Element
name|course
parameter_list|,
name|CourseCatalog
name|catalog
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|course
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"courseCredit"
argument_list|)
condition|)
continue|continue;
name|CourseSubpartCredit
name|credit
init|=
operator|new
name|CourseSubpartCredit
argument_list|()
decl_stmt|;
name|credit
operator|.
name|setCourseCatalog
argument_list|(
name|catalog
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setCreditFormat
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"creditFormat"
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setCreditType
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"creditType"
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setCreditUnitType
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"creditUnitType"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|minCredit
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"fixedCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCredit
operator|!=
literal|null
condition|)
block|{
name|credit
operator|.
name|setFixedMinimumCredit
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCredit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|minCredit
operator|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"minimumCredit"
argument_list|)
expr_stmt|;
if|if
condition|(
name|minCredit
operator|!=
literal|null
condition|)
block|{
name|credit
operator|.
name|setFixedMinimumCredit
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|minCredit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credit
operator|.
name|setFixedMinimumCredit
argument_list|(
operator|new
name|Float
argument_list|(
name|MIN_CREDIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|maxCredit
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"maximumCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|maxCredit
operator|!=
literal|null
condition|)
block|{
name|credit
operator|.
name|setMaximumCredit
argument_list|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCredit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|credit
operator|.
name|setMaximumCredit
argument_list|(
operator|new
name|Float
argument_list|(
name|MAX_CREDIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|credit
operator|.
name|setFractionalCreditAllowed
argument_list|(
name|Boolean
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"fractionalCreditAllowed"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setSubpartId
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subpartId"
argument_list|)
argument_list|)
expr_stmt|;
name|catalog
operator|.
name|addTosubparts
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

