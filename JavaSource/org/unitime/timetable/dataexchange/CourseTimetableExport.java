begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseTimetableExport
extends|extends
name|CourseOfferingExport
block|{
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|document
operator|.
name|addDocType
argument_list|(
literal|"timetable"
argument_list|,
literal|"-//UniTime//DTD University Course Timetabling/EN"
argument_list|,
literal|"http://www.unitime.org/interface/CourseTimetable.dtd"
argument_list|)
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"timetable"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"action"
argument_list|,
literal|"update"
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"dateFormat"
argument_list|,
name|sDateFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"timeFormat"
argument_list|,
name|sTimeFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|DataExchangeIncludeMeetings
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|iClassEvents
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|ClassEvent
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ClassEvent
name|e
range|:
operator|(
name|List
argument_list|<
name|ClassEvent
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ClassEvent e where e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iClassEvents
operator|.
name|put
argument_list|(
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|iMeetingLocations
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Location
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Location
name|l
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Location l where l.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iMeetingLocations
operator|.
name|put
argument_list|(
name|l
operator|.
name|getPermanentId
argument_list|()
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering as c where "
operator|+
literal|"c.subjectArea.session.uniqueId=:sessionId "
operator|+
literal|"order by c.subjectArea.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|courses
control|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|exportClass
argument_list|(
name|root
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|clazz
argument_list|,
name|course
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportClass
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|CourseOffering
name|course
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
operator|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
literal|"inf"
argument_list|)
expr_stmt|;
else|else
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"scheduleNote"
argument_list|,
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"studentScheduling"
argument_list|,
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"displayInScheduleBook"
argument_list|,
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"controlling"
argument_list|,
name|course
operator|.
name|isIsControl
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"cancelled"
argument_list|,
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"solver"
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|childClazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportClass
argument_list|(
name|classElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|childClazz
argument_list|,
name|course
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|exportAssignment
argument_list|(
name|classElement
argument_list|,
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
if|else if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getCommittedSolution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exportArrHours
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|instructor
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|exportInstructor
argument_list|(
name|classElement
operator|.
name|addElement
argument_list|(
literal|"instructor"
argument_list|)
argument_list|,
name|instructor
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportArrHours
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|exportDatePattern
argument_list|(
name|classElement
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|Element
name|arrangeTimeEl
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"arrangeTime"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|>
literal|0
condition|)
name|arrangeTimeEl
operator|.
name|addAttribute
argument_list|(
literal|"minPerWeek"
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exportRequiredRooms
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"c:\\test\\timetable.xml"
block|,
literal|"puWestLafayetteTrdtn"
block|,
literal|"2007"
block|,
literal|"Fal"
block|}
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|args
index|[
literal|2
index|]
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" not found!"
argument_list|)
throw|;
operator|new
name|CourseTimetableExport
argument_list|()
operator|.
name|saveXml
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|session
argument_list|,
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

