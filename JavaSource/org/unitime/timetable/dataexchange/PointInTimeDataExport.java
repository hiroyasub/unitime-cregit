begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ArrangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassDurationType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingCoordinator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TeachingResponsibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstructionalOfferingComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|PointInTimeDataExport
extends|extends
name|BaseExport
block|{
specifier|private
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"yyyy/M/d"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sTimeFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|departmentElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|studentElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|buildingElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|roomTypeElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|creditTypeElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|creditUnitTypeElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|positionTypeElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|teachingResponsibilityElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|locationElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|subjectElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|departmentalInstructorElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|academicClassificationElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|academicAreaElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|majorElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|minorElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|courseTypeElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|classDurationTypeElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|instructionalMethodElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|timePatternElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|datePatternElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|classElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
name|classEventElements
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Element
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Element
name|departmentsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|roomTypesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|creditTypesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|creditUnitTypesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|positionTypesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|teachingResponsibilitiesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|locationsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|studentsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|offeringsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|courseTypesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|classDurationTypesElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|instructionalMethodsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|timePatternsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|datePatternsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|academicAreasElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|academicClassificationsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|majorsElement
init|=
literal|null
decl_stmt|;
specifier|private
name|Element
name|minorsElement
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|String
name|sRootElementName
init|=
literal|"pointInTimeData"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNameAttribute
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNoteAttribute
init|=
literal|"note"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreatedAttribute
init|=
literal|"created"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDateFormatAttribute
init|=
literal|"dateFormat"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimeFormatAttribute
init|=
literal|"timeFormat"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPointInTimeNameAttribute
init|=
literal|"pointInTimeName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPointInTimeNoteAttribute
init|=
literal|"pointInTimeNote"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicSessionUniqueIdAttribute
init|=
literal|"academicSessionUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicInitiativeAttribute
init|=
literal|"academicInitiativeUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicYearAttribute
init|=
literal|"academicYearUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicTermAttribute
init|=
literal|"academicTermUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSessionBeginDateAttribute
init|=
literal|"sessionBeginDate"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSessionEndDateAttribute
init|=
literal|"sessionEndDate"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassesEndDateAttribute
init|=
literal|"classesEndDate"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDurationTypeAttribute
init|=
literal|"durationType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCourseTypesElementName
init|=
literal|"courseTypes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCourseTypeElementName
init|=
literal|"courseType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPositionTypesElementName
init|=
literal|"positionTypes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPositionTypeElementName
init|=
literal|"positionType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sUniqueIdAttribute
init|=
literal|"uniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sReferenceAttribute
init|=
literal|"reference"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLabelAttribute
init|=
literal|"label"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sRoomTypesElementName
init|=
literal|"roomTypes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sRoomTypeElementName
init|=
literal|"roomType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditTypesElementName
init|=
literal|"creditTypes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditTypeElementName
init|=
literal|"creditType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLegacyCourseMasterCodeAttribute
init|=
literal|"legacyCourseMasterCode"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditUnitTypesElementName
init|=
literal|"creditUnitTypes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditUnitTypeElementName
init|=
literal|"creditUnitType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sIsRoomAttribute
init|=
literal|"isRoom"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sOrderAttribute
init|=
literal|"order"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTeachingResponsibilitiesElementName
init|=
literal|"teachingResponsibilities"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTeachingResponsibilityElementName
init|=
literal|"teachingResponsibility"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sInstructorAttribute
init|=
literal|"instructor"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCoordinatorAttribute
init|=
literal|"coordinator"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sOptionsAttribute
init|=
literal|"options"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sInstructionalMethodsElementName
init|=
literal|"instructionalMethods"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sInstructionalMethodElementName
init|=
literal|"instructionalMethod"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sVisibleAttribute
init|=
literal|"visible"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassDurationTypesElementName
init|=
literal|"classDurationTypes"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassDurationTypeElementName
init|=
literal|"classDurationType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAbbreviationAttribute
init|=
literal|"abbreviation"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sImplementationAttribute
init|=
literal|"implementation"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sParameterAttribute
init|=
literal|"parameter"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDepartmentsElementName
init|=
literal|"departments"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDepartmentElementName
init|=
literal|"department"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDepartmentCode
init|=
literal|"departmentCode"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sExternalIdAttribute
init|=
literal|"externalId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSubjectAreaElementName
init|=
literal|"subjectArea"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSubjectAreaAbbreviationAttribute
init|=
literal|"subjectAreaAbbreviation"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTitleAttribute
init|=
literal|"title"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDeptInstructorElementName
init|=
literal|"departmentalInstructor"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sFirstNameAttribute
init|=
literal|"firstName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMiddleNameAttribute
init|=
literal|"middleName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLastNameAttribute
init|=
literal|"lastName"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sEmailAttribute
init|=
literal|"email"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCareerAcctAttribute
init|=
literal|"careerAcct"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPositionTypeUniqueIdAttribute
init|=
literal|"positionTypeUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicAreasElementName
init|=
literal|"academicAreas"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicAreaElementName
init|=
literal|"academicArea"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicClassificationsElementName
init|=
literal|"academicClassifications"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicClassificationElementName
init|=
literal|"academicClassification"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCodeAttribute
init|=
literal|"code"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMajorsElementName
init|=
literal|"majors"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMajorElementName
init|=
literal|"major"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMinorsElementName
init|=
literal|"minors"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMinorElementName
init|=
literal|"minor"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLocationsElementName
init|=
literal|"locations"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBuildingElementName
init|=
literal|"building"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCoordinateXAttribute
init|=
literal|"coordinateX"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCoordinateYAttribute
init|=
literal|"coordinateY"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sRoomElementName
init|=
literal|"room"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sRoomNumberAttribute
init|=
literal|"roomNbr"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sRoomTypeIdAttribute
init|=
literal|"roomType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCapacityAttribute
init|=
literal|"capacity"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sControllingDepartmentUniqueIdAttribute
init|=
literal|"controllingDepartmentUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNonUniversityLocationElementName
init|=
literal|"nonUniversityLocation"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimePatternsElementName
init|=
literal|"timePatterns"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimePatternElementName
init|=
literal|"timePattern"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMinutesPerMeetingAttribute
init|=
literal|"minutesPerMeeting"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSlotsPerMeetingAttribute
init|=
literal|"slotsPerMeeting"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNumberOfMeetingsPerWeekAttribute
init|=
literal|"numberOfMeetingsPerWeek"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTypeAttribute
init|=
literal|"type"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sBreakTimeAttribute
init|=
literal|"breakTime"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimePatternDaysElementName
init|=
literal|"timePatternDays"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDayCodeAttribute
init|=
literal|"dayCode"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimePatternTimeElementName
init|=
literal|"timePatternTime"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStartSlotAttribute
init|=
literal|"startSlot"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDatePatternsElementName
init|=
literal|"datePatterns"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDatePatternElementName
init|=
literal|"datePattern"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPatternAttribute
init|=
literal|"pattern"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sOffsetAttribute
init|=
literal|"offset"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNumberOfWeeksAttribute
init|=
literal|"numberOfWeeks"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sOfferingsElementName
init|=
literal|"offerings"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sOfferingElementName
init|=
literal|"offering"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPermanentIdAttribute
init|=
literal|"permanentId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLimitAttribute
init|=
literal|"limit"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDemandAttribute
init|=
literal|"demand"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sUniqueIdRolledForwardFromAttribute
init|=
literal|"uniqueIdRolledForwardFrom"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCourseElementName
init|=
literal|"course"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCourseNbrAttribute
init|=
literal|"courseNbr"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sControllingAttribute
init|=
literal|"controlling"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sProjectedDemandAttribute
init|=
literal|"projectDemand"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNumberExpectedStudentsAttribute
init|=
literal|"numberExpectedStudents"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLastlikeDemandAttribute
init|=
literal|"lastlikeDemand"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCourseTypeIdAttribute
init|=
literal|"courseTypeId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sOfferingCoordinatorElementName
init|=
literal|"offeringCoordinator"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sConfigElementName
init|=
literal|"config"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sUnlimitedEnrollmentAttributeName
init|=
literal|"unlimitedEnrollment"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sInstructionalMethodAttribute
init|=
literal|"instructionalMethod"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSubpartElementName
init|=
literal|"subpart"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMinPerWeekAttribute
init|=
literal|"minPerWeek"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSuffixAttribute
init|=
literal|"suffix"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStudentAllowOverlapAttribute
init|=
literal|"studentAllowOverlap"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditTypeAttribute
init|=
literal|"creditType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditUnitTypeAttribute
init|=
literal|"creditUnitType"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCreditAttribute
init|=
literal|"credit"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassElementName
init|=
literal|"class"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sParentClassUniqueIdAttribute
init|=
literal|"parentClassUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDatePatternUniqueIdAttribute
init|=
literal|"datePatternUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimePatternUniqueIdAttribute
init|=
literal|"timePatternUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStudentSchedulingAttribute
init|=
literal|"studentScheduling"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNumberOfRoomsAttribute
init|=
literal|"numberOfRooms"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sManagingDepartmentUniqueIdAttribute
init|=
literal|"managingDepartmentUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassSuffixAttribute
init|=
literal|"classSuffix"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sSectionNumberAttribute
init|=
literal|"sectionNumber"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassInstructorElementName
init|=
literal|"classInstructor"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sNormalizedPercentShareAttribute
init|=
literal|"normalizedPercentShare"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sResponsibilityUniqueIdAttribute
init|=
literal|"responsibilityUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLeadAttribute
init|=
literal|"lead"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sDepartmentalInstructorUniqueIdAttribute
init|=
literal|"departmentalInstructorUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sShareAttribute
init|=
literal|"share"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassEventElementName
init|=
literal|"classEvent"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassMeetingElementName
init|=
literal|"classMeeting"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMeetingDateAttribute
init|=
literal|"meetingDate"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStartPeriodAttribute
init|=
literal|"startPeriod"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStopPeriodAttribute
init|=
literal|"stopPeriod"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStartOffsetAttribute
init|=
literal|"startOffset"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStopOffsetAttribute
init|=
literal|"stopOffset"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLocationUniqueIdAttribute
init|=
literal|"locationUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimePatternMinutesPerMeetingAttribute
init|=
literal|"timePatternMinutesPerMeeting"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCalculatedMinutesPerMeetingAttribute
init|=
literal|"calculatedMinutesPerMeeting"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassMeetingUtilPeriodElementName
init|=
literal|"classMeetingUtilPeriod"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sPeriodAttribute
init|=
literal|"period"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStudentsElementName
init|=
literal|"students"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sStudentElementName
init|=
literal|"student"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcadAreaMajorClassificationElementName
init|=
literal|"acadAreaMajorClassification"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicAreaUniqueIdAttribute
init|=
literal|"academicAreaUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcademicClassificationUniqueIdAttribute
init|=
literal|"academicClassificationUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMajorUniqueIdAttribute
init|=
literal|"majorUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sAcadAreaMinorClassificationElementName
init|=
literal|"acadAreaMinorClassification"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sMinorUniqueIdAttribute
init|=
literal|"minorUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sEnrollmentElementName
init|=
literal|"enrollment"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sClassUniqueIdAttribute
init|=
literal|"classUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sCourseOfferingUniqueIdAttribute
init|=
literal|"courseOfferingUniqueId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sTimestampAttribute
init|=
literal|"timestamp"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sChangedByAttribute
init|=
literal|"changedBy"
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|TreeSet
argument_list|<
name|InstructionalOffering
argument_list|>
name|findOfferingsWithClasses
parameter_list|(
name|Session
name|acadSession
parameter_list|)
block|{
name|StringBuilder
name|querySb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb
operator|.
name|append
argument_list|(
literal|"select io, cco "
argument_list|)
operator|.
name|append
argument_list|(
literal|" from InstructionalOffering io, CourseOffering cco"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch io.courseOfferings as co"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch cco.subjectArea as sa"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch sa.department as sad"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch io.offeringCoordinators as oc"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch oc.instructor as oci"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch oci.department as ocid"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch oci.positionType as ocipt"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch oc.responsibility as tr"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch io.instrOfferingConfigs as ioc"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch ioc.schedulingSubparts as ss"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch ss.itype as it"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch ss.classes as c"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch co.courseType as ct"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ioc.instructionalMethod as cim"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ioc.classDurationType"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ss.childSubparts as cs"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ss.datePattern as sdp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ss.creditConfigs as scc"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch scc.creditType as sct"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch scc.creditUnitType as scut"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.childClasses as cc"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.classInstructors as ci"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.managingDept as md"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.datePattern as cdp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ci.instructor as i"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch i.department as d"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch i.positionType as pt"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ci.responsibility as tr"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.committedAssignment as ca"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.solution as s"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch s.owner as o"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.datePattern as dp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.timePattern as tp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.rooms as r"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where io.session.uniqueId = :sessId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and cco.instructionalOffering.uniqueId = io.uniqueId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and cco.isControl = true"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and sa.uniqueId = :saId "
argument_list|)
operator|.
name|append
argument_list|(
literal|" and c.cancelled is false "
argument_list|)
operator|.
name|append
argument_list|(
literal|" and c.studentEnrollments is not empty"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and io.notOffered is false"
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
init|=
operator|new
name|TreeSet
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|(
operator|new
name|InstructionalOfferingComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|acadSession
operator|.
name|getSubjectAreas
argument_list|()
control|)
block|{
name|info
argument_list|(
literal|"Fetching Instructional Offerings for Subject Area:  "
operator|+
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|objects
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"saId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|offerings
operator|.
name|add
argument_list|(
operator|(
name|InstructionalOffering
operator|)
name|objects
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|offerings
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|AcademicArea
argument_list|>
name|findAcademicAreas
parameter_list|(
name|Session
name|acadSession
parameter_list|)
block|{
name|StringBuilder
name|querySb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb
operator|.
name|append
argument_list|(
literal|"select aa "
argument_list|)
operator|.
name|append
argument_list|(
literal|" from AcademicArea aa"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch aa.posMajors as ama"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch aa.posMinors as ami"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where aa.session.uniqueId = :sessId"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|AcademicArea
argument_list|>
name|academicAreas
init|=
operator|new
name|ArrayList
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Fetching AcademicArea"
argument_list|)
expr_stmt|;
name|academicAreas
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|academicAreas
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|TimePattern
argument_list|>
name|findTimePatterns
parameter_list|(
name|Session
name|acadSession
parameter_list|)
block|{
name|StringBuilder
name|querySb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb
operator|.
name|append
argument_list|(
literal|"select tp "
argument_list|)
operator|.
name|append
argument_list|(
literal|" from TimePattern tp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch tp.days as d"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch tp.times as t"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where tp.session.uniqueId = :sessId"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TimePattern
argument_list|>
name|timePatterns
init|=
operator|new
name|ArrayList
argument_list|<
name|TimePattern
argument_list|>
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Fetching Time Patterns"
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|TimePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|timePatterns
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|Location
argument_list|>
name|findLocations
parameter_list|(
name|Session
name|acadSession
parameter_list|)
block|{
name|StringBuilder
name|querySb1
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb1
operator|.
name|append
argument_list|(
literal|"select r "
argument_list|)
operator|.
name|append
argument_list|(
literal|" from Room r"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch r.building"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch r.roomType as rt"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch r.roomDepts as rd"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch rd.department as rdd"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where r.session.uniqueId = :sessId"
argument_list|)
expr_stmt|;
name|StringBuilder
name|querySb2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb2
operator|.
name|append
argument_list|(
literal|"select n "
argument_list|)
operator|.
name|append
argument_list|(
literal|" from NonUniversityLocation n"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch n.roomType as rt"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch n.roomDepts as rd"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch rd.department as rdd"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where n.session.uniqueId = :sessId"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|ArrayList
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Fetching Rooms"
argument_list|)
expr_stmt|;
name|locations
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Fetching Non Unversity Locations"
argument_list|)
expr_stmt|;
name|locations
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|locations
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|findStudentClassEnrollments
parameter_list|(
name|Session
name|acadSession
parameter_list|)
block|{
name|StringBuilder
name|querySb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb
operator|.
name|append
argument_list|(
literal|"select sce "
argument_list|)
operator|.
name|append
argument_list|(
literal|" from StudentClassEnrollment sce"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch sce.student s"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch sce.clazz as c"
argument_list|)
operator|.
name|append
argument_list|(
literal|" join fetch sce.courseOffering as co"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch co.subjectArea as sa"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch s.areaClasfMajors as acma"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch s.areaClasfMinors as acmi"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch acma.academicArea as acmaaa"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch acma.academicClassification as acmaac"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch acma.major as acmama"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch acmi.academicArea as acmaa"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch acmi.academicClassification as acmiac"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch acmi.minor as acmimi"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where s.session.uniqueId = :sessId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and sa.uniqueId = :saId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and s.classEnrollments is not empty"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and c.cancelled is false "
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|students
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|acadSession
operator|.
name|getSubjectAreas
argument_list|()
control|)
block|{
name|info
argument_list|(
literal|"Fetching Student Class Enrollments for Subject Area:  "
operator|+
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|students
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"saId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|students
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|findClassEvents
parameter_list|(
name|Session
name|acadSession
parameter_list|)
block|{
name|StringBuilder
name|querySb1
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb1
operator|.
name|append
argument_list|(
literal|"select e, m, l"
argument_list|)
operator|.
name|append
argument_list|(
literal|" from ClassEvent e, Room l"
argument_list|)
operator|.
name|append
argument_list|(
literal|" inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co"
argument_list|)
operator|.
name|append
argument_list|(
literal|" inner join e.meetings as m"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch e.clazz as c"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.committedAssignment as ca"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.datePattern as dp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.timePattern as tp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.rooms as r"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.uniqueId = :saId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and co.isControl = true"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and e.clazz.studentEnrollments is not empty"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and e.clazz.cancelled is false"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and l.permanentId = m.locationPermanentId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and l.session.uniqueId = :sessId"
argument_list|)
expr_stmt|;
name|StringBuilder
name|querySb2
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|querySb2
operator|.
name|append
argument_list|(
literal|"select e, m, l"
argument_list|)
operator|.
name|append
argument_list|(
literal|" from ClassEvent e, NonUniversityLocation l"
argument_list|)
operator|.
name|append
argument_list|(
literal|" inner join e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings as co"
argument_list|)
operator|.
name|append
argument_list|(
literal|" inner join e.meetings as m"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch e.clazz as c"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch c.committedAssignment as ca"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.datePattern as dp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.timePattern as tp"
argument_list|)
operator|.
name|append
argument_list|(
literal|" left join fetch ca.rooms as r"
argument_list|)
operator|.
name|append
argument_list|(
literal|" where e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and co.subjectArea.uniqueId = :saId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and co.isControl = true"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and e.clazz.studentEnrollments is not empty"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and e.clazz.cancelled is false"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and l.permanentId = m.locationPermanentId"
argument_list|)
operator|.
name|append
argument_list|(
literal|" and l.session.uniqueId = :sessId"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|events
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|sa
range|:
name|acadSession
operator|.
name|getSubjectAreas
argument_list|()
control|)
block|{
name|info
argument_list|(
literal|"Fetching Class Events for Subject Area:  "
operator|+
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb1
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"saId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|querySb2
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessId"
argument_list|,
name|acadSession
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"saId"
argument_list|,
name|sa
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|events
operator|)
return|;
block|}
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|Date
name|timestamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Data extract for Point in Time Data started at:  "
operator|+
name|timestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
name|sRootElementName
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sAcademicSessionUniqueIdAttribute
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sAcademicInitiativeAttribute
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sAcademicYearAttribute
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sAcademicTermAttribute
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sDateFormatAttribute
argument_list|,
name|sDateFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sTimeFormatAttribute
argument_list|,
name|sTimeFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sCreatedAttribute
argument_list|,
operator|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|timestamp
argument_list|)
operator|+
literal|" "
operator|+
name|sTimeFormat
operator|.
name|format
argument_list|(
name|timestamp
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sSessionBeginDateAttribute
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sSessionEndDateAttribute
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sClassesEndDateAttribute
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|session
operator|.
name|getClassesEndDateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|root
operator|.
name|addAttribute
argument_list|(
name|sDurationTypeAttribute
argument_list|,
name|session
operator|.
name|getDefaultClassDurationType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|timestamp
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|String
name|note
init|=
literal|"This is a point in time data snapshot for session:  "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
operator|+
literal|", taken on:  "
operator|+
name|timestamp
operator|.
name|toString
argument_list|()
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sPointInTimeNameAttribute
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
name|sPointInTimeNoteAttribute
argument_list|,
name|note
argument_list|)
expr_stmt|;
name|document
operator|.
name|addDocType
argument_list|(
name|sRootElementName
argument_list|,
literal|"-//UniTime//DTD University Course Timetabling/EN"
argument_list|,
literal|"http://www.unitime.org/interface/PointInTimeData.dtd"
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Loading Data..."
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|InstructionalOffering
argument_list|>
name|offerings
init|=
name|findOfferingsWithClasses
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Loaded "
operator|+
name|offerings
operator|.
name|size
argument_list|()
operator|+
literal|" Instructional Offerings"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|AcademicArea
argument_list|>
name|academicAreas
init|=
name|findAcademicAreas
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Loaded "
operator|+
name|academicAreas
operator|.
name|size
argument_list|()
operator|+
literal|" Academic Areas"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|studentClassEnrollments
init|=
name|findStudentClassEnrollments
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Loaded "
operator|+
name|studentClassEnrollments
operator|.
name|size
argument_list|()
operator|+
literal|" Student Class Enrollments"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Location
argument_list|>
name|locations
init|=
name|findLocations
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Loaded "
operator|+
name|locations
operator|.
name|size
argument_list|()
operator|+
literal|" Locations"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TimePattern
argument_list|>
name|timePatterns
init|=
name|findTimePatterns
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Loaded "
operator|+
name|timePatterns
operator|.
name|size
argument_list|()
operator|+
literal|" Time Patterns"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|eventMeetings
init|=
name|findClassEvents
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|info
argument_list|(
literal|"Loaded "
operator|+
name|eventMeetings
operator|.
name|size
argument_list|()
operator|+
literal|" Class Events"
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Default Date Pattern:  "
operator|+
name|session
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
argument_list|)
expr_stmt|;
name|timePatterns
operator|.
name|size
argument_list|()
expr_stmt|;
name|locations
operator|.
name|size
argument_list|()
expr_stmt|;
name|Date
name|endTransTimestamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Data extract for Point in Time Data ended at:  "
operator|+
name|endTransTimestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Milliseconds elapsed = "
operator|+
operator|(
name|endTransTimestamp
operator|.
name|getTime
argument_list|()
operator|-
name|timestamp
operator|.
name|getTime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|departmentsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sDepartmentsElementName
argument_list|)
expr_stmt|;
name|roomTypesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sRoomTypesElementName
argument_list|)
expr_stmt|;
name|creditTypesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sCreditTypesElementName
argument_list|)
expr_stmt|;
name|creditUnitTypesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sCreditUnitTypesElementName
argument_list|)
expr_stmt|;
name|positionTypesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sPositionTypesElementName
argument_list|)
expr_stmt|;
name|teachingResponsibilitiesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sTeachingResponsibilitiesElementName
argument_list|)
expr_stmt|;
name|locationsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sLocationsElementName
argument_list|)
expr_stmt|;
name|studentsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sStudentsElementName
argument_list|)
expr_stmt|;
name|courseTypesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sCourseTypesElementName
argument_list|)
expr_stmt|;
name|classDurationTypesElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sClassDurationTypesElementName
argument_list|)
expr_stmt|;
name|instructionalMethodsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sInstructionalMethodsElementName
argument_list|)
expr_stmt|;
name|timePatternsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sTimePatternsElementName
argument_list|)
expr_stmt|;
name|datePatternsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sDatePatternsElementName
argument_list|)
expr_stmt|;
name|academicAreasElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sAcademicAreasElementName
argument_list|)
expr_stmt|;
name|academicClassificationsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sAcademicClassificationsElementName
argument_list|)
expr_stmt|;
name|majorsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sMajorsElementName
argument_list|)
expr_stmt|;
name|minorsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sMinorsElementName
argument_list|)
expr_stmt|;
name|offeringsElement
operator|=
name|root
operator|.
name|addElement
argument_list|(
name|sOfferingsElementName
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Exporting "
operator|+
name|offerings
operator|.
name|size
argument_list|()
operator|+
literal|" offerings ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructionalOffering
name|io
range|:
name|offerings
control|)
block|{
name|info
argument_list|(
literal|"Exporting offering: "
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
expr_stmt|;
name|exportInstructionalOffering
argument_list|(
name|offeringsElement
argument_list|,
name|io
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
name|int
name|numMeetings
init|=
name|eventMeetings
operator|.
name|size
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Exporting student class enrollments ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|sce
range|:
name|studentClassEnrollments
control|)
block|{
name|exportStudentClassEnrollment
argument_list|(
name|sce
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"Exporting "
operator|+
name|numMeetings
operator|+
literal|" class event meetings ..."
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|objs
range|:
name|eventMeetings
control|)
block|{
name|count
operator|++
expr_stmt|;
name|ClassEvent
name|classEvent
init|=
operator|(
name|ClassEvent
operator|)
name|objs
index|[
literal|0
index|]
decl_stmt|;
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|objs
index|[
literal|1
index|]
decl_stmt|;
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|objs
index|[
literal|2
index|]
decl_stmt|;
name|exportClassEvent
argument_list|(
name|classEvent
argument_list|,
name|meeting
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|count
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|info
argument_list|(
literal|"Exported "
operator|+
name|count
operator|+
literal|" of "
operator|+
name|numMeetings
operator|+
literal|" class event meetings, "
operator|+
literal|100
operator|*
name|count
operator|/
name|numMeetings
operator|+
literal|"% complete."
argument_list|)
expr_stmt|;
block|}
block|}
name|info
argument_list|(
literal|"Export of class event meetings complete."
argument_list|)
expr_stmt|;
name|Date
name|endProcessingTimestamp
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"XML creation for Point in Time Data ended at:  "
operator|+
name|endProcessingTimestamp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Milliseconds elapsed since data extract = "
operator|+
operator|(
name|endProcessingTimestamp
operator|.
name|getTime
argument_list|()
operator|-
name|endTransTimestamp
operator|.
name|getTime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|exportInstructionalOffering
parameter_list|(
name|Element
name|offeringsElement
parameter_list|,
name|InstructionalOffering
name|offering
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|offeringElement
init|=
name|offeringsElement
operator|.
name|addElement
argument_list|(
name|sOfferingElementName
argument_list|)
decl_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
name|sPermanentIdAttribute
argument_list|,
name|offering
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
name|sDemandAttribute
argument_list|,
name|offering
operator|.
name|getDemand
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
name|sLimitAttribute
argument_list|,
operator|(
name|offering
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|offering
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdRolledForwardFromAttribute
argument_list|,
operator|(
name|offering
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|offering
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|offering
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|offering
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|exportCourse
argument_list|(
name|offeringElement
operator|.
name|addElement
argument_list|(
name|sCourseElementName
argument_list|)
argument_list|,
name|course
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|offering
operator|.
name|isNotOffered
argument_list|()
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|configHasAtLeastOneStudentEnrolled
argument_list|(
name|config
argument_list|)
condition|)
block|{
name|exportConfig
argument_list|(
name|offeringElement
operator|.
name|addElement
argument_list|(
name|sConfigElementName
argument_list|)
argument_list|,
name|config
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|offering
operator|.
name|getOfferingCoordinators
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OfferingCoordinator
name|oc
range|:
name|offering
operator|.
name|getOfferingCoordinators
argument_list|()
control|)
block|{
name|exportOfferingCoordinator
argument_list|(
name|offeringElement
operator|.
name|addElement
argument_list|(
name|sOfferingCoordinatorElementName
argument_list|)
argument_list|,
name|oc
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|exportOfferingCoordinator
parameter_list|(
name|Element
name|offeringCoordinatorElement
parameter_list|,
name|OfferingCoordinator
name|oc
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|departmentalInstructorElements
operator|.
name|containsKey
argument_list|(
name|oc
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDepartmentalInstructor
argument_list|(
name|oc
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|offeringCoordinatorElement
operator|.
name|addAttribute
argument_list|(
name|sDepartmentalInstructorUniqueIdAttribute
argument_list|,
name|oc
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|oc
operator|.
name|getResponsibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|teachingResponsibilityElements
operator|.
name|containsKey
argument_list|(
name|oc
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportTeachingResponsibility
argument_list|(
name|oc
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|offeringCoordinatorElement
operator|.
name|addAttribute
argument_list|(
name|sResponsibilityUniqueIdAttribute
argument_list|,
name|oc
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oc
operator|.
name|getPercentShare
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|offeringCoordinatorElement
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|oc
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|exportCredit
parameter_list|(
name|Element
name|subpartElement
parameter_list|,
name|CourseCreditUnitConfig
name|credit
parameter_list|)
block|{
comment|/* This only exports the minimum credit number as the credit for variable credit subparts.      	 *    UniTime currently stores no information about the number of credits a student is      	 *    enrolled to received for a sections.  Point in time data will treat all enrollments     	 *    as the minimum amount of credit for the section.  If the credit data known for students     	 *    changes in the future this should be updated to reflect that change. */
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|credit
operator|.
name|getCreditType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|creditTypeElements
operator|.
name|containsKey
argument_list|(
name|credit
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportCreditType
argument_list|(
name|credit
operator|.
name|getCreditType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sCreditTypeAttribute
argument_list|,
name|credit
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|creditUnitTypeElements
operator|.
name|containsKey
argument_list|(
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportCreditUnitType
argument_list|(
name|credit
operator|.
name|getCreditUnitType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sCreditUnitTypeAttribute
argument_list|,
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|instanceof
name|ArrangeCreditUnitConfig
condition|)
block|{
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fixedCredit
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|credit
decl_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sCreditAttribute
argument_list|,
name|fixedCredit
operator|.
name|getFixedUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|variableCredit
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|credit
decl_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sCreditAttribute
argument_list|,
name|variableCredit
operator|.
name|getMinUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|variableCredit
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|credit
decl_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sCreditAttribute
argument_list|,
name|variableCredit
operator|.
name|getMinUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|exportDepartment
parameter_list|(
name|Department
name|department
parameter_list|)
block|{
name|Element
name|departmentElement
init|=
name|departmentsElement
operator|.
name|addElement
argument_list|(
name|sDepartmentElementName
argument_list|)
decl_stmt|;
name|departmentElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|departmentElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|department
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|department
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|departmentElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|departmentElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|departmentElement
operator|.
name|addAttribute
argument_list|(
name|sDepartmentCode
argument_list|,
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|departmentElements
operator|.
name|put
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|departmentElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportSubjectArea
parameter_list|(
name|SubjectArea
name|subjectArea
parameter_list|)
block|{
if|if
condition|(
operator|!
name|departmentElements
operator|.
name|containsKey
argument_list|(
name|subjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDepartment
argument_list|(
name|subjectArea
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|subjectElement
init|=
name|departmentElements
operator|.
name|get
argument_list|(
name|subjectArea
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|addElement
argument_list|(
name|sSubjectAreaElementName
argument_list|)
decl_stmt|;
name|subjectElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|subjectArea
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|subjectElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|subjectArea
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|subjectArea
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|subjectArea
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|subjectElement
operator|.
name|addAttribute
argument_list|(
name|sSubjectAreaAbbreviationAttribute
argument_list|,
name|subjectArea
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|subjectElement
operator|.
name|addAttribute
argument_list|(
name|sTitleAttribute
argument_list|,
name|subjectArea
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|subjectElements
operator|.
name|put
argument_list|(
name|subjectArea
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportCourseType
parameter_list|(
name|CourseType
name|courseType
parameter_list|)
block|{
name|Element
name|courseTypeElement
init|=
name|courseTypesElement
operator|.
name|addElement
argument_list|(
name|sCourseTypeElementName
argument_list|)
decl_stmt|;
name|courseTypeElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|courseType
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|courseTypeElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|courseType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|courseTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|courseType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|courseTypeElements
operator|.
name|put
argument_list|(
name|courseType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|courseTypeElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportCourse
parameter_list|(
name|Element
name|courseElement
parameter_list|,
name|CourseOffering
name|course
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
operator|!
name|subjectElements
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportSubjectArea
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|course
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sSubjectAreaAbbreviationAttribute
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sCourseNbrAttribute
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sControllingAttribute
argument_list|,
name|course
operator|.
name|isIsControl
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sPermanentIdAttribute
argument_list|,
operator|(
name|course
operator|.
name|getPermId
argument_list|()
operator|==
literal|null
condition|?
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|course
operator|.
name|getPermId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sProjectedDemandAttribute
argument_list|,
name|course
operator|.
name|getProjectedDemand
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sTitleAttribute
argument_list|,
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sNumberExpectedStudentsAttribute
argument_list|,
name|course
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getDemand
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sLastlikeDemandAttribute
argument_list|,
name|course
operator|.
name|getDemand
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getCourseType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|courseTypeElements
operator|.
name|containsKey
argument_list|(
name|course
operator|.
name|getCourseType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportCourseType
argument_list|(
name|course
operator|.
name|getCourseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sCourseTypeIdAttribute
argument_list|,
operator|(
name|course
operator|.
name|getCourseType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|courseElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdRolledForwardFromAttribute
argument_list|,
name|course
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|exportClassDurationType
parameter_list|(
name|ClassDurationType
name|classDurationType
parameter_list|)
block|{
name|Element
name|classDurationTypeElement
init|=
name|classDurationTypesElement
operator|.
name|addElement
argument_list|(
name|sClassDurationTypeElementName
argument_list|)
decl_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|classDurationType
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|classDurationType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|classDurationType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|classDurationType
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sImplementationAttribute
argument_list|,
name|classDurationType
operator|.
name|getImplementation
argument_list|()
argument_list|)
expr_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sParameterAttribute
argument_list|,
name|classDurationType
operator|.
name|getParameter
argument_list|()
argument_list|)
expr_stmt|;
name|classDurationTypeElement
operator|.
name|addAttribute
argument_list|(
name|sVisibleAttribute
argument_list|,
operator|(
name|classDurationType
operator|.
name|getVisible
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
name|classDurationTypeElements
operator|.
name|put
argument_list|(
name|classDurationType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|classDurationTypeElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportInstructionalMethod
parameter_list|(
name|InstructionalMethod
name|instructionalMethod
parameter_list|)
block|{
name|Element
name|instructionalMethodElement
init|=
name|instructionalMethodsElement
operator|.
name|addElement
argument_list|(
name|sInstructionalMethodElementName
argument_list|)
decl_stmt|;
name|instructionalMethodElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|instructionalMethod
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|instructionalMethodElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|instructionalMethod
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|instructionalMethodElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|instructionalMethod
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|instructionalMethodElement
operator|.
name|addAttribute
argument_list|(
name|sVisibleAttribute
argument_list|,
operator|(
name|instructionalMethod
operator|.
name|getVisible
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
name|instructionalMethodElements
operator|.
name|put
argument_list|(
name|instructionalMethod
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|instructionalMethodElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|configHasAtLeastOneStudentEnrolled
parameter_list|(
name|InstrOfferingConfig
name|instrOfferingConfig
parameter_list|)
block|{
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|instrOfferingConfig
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|ss
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isCancelled
argument_list|()
operator|.
name|booleanValue
argument_list|()
operator|&&
name|c
operator|.
name|getEnrollment
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
block|}
return|return
operator|(
literal|false
operator|)
return|;
block|}
specifier|private
name|void
name|exportConfig
parameter_list|(
name|Element
name|configElement
parameter_list|,
name|InstrOfferingConfig
name|config
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|configElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|config
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|configElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|configElement
operator|.
name|addAttribute
argument_list|(
name|sUnlimitedEnrollmentAttributeName
argument_list|,
operator|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getClassDurationType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|classDurationTypeElements
operator|.
name|containsKey
argument_list|(
name|config
operator|.
name|getClassDurationType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportClassDurationType
argument_list|(
name|config
operator|.
name|getClassDurationType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configElement
operator|.
name|addAttribute
argument_list|(
name|sDurationTypeAttribute
argument_list|,
name|config
operator|.
name|getClassDurationType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|instructionalMethodElements
operator|.
name|containsKey
argument_list|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportInstructionalMethod
argument_list|(
name|config
operator|.
name|getInstructionalMethod
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|configElement
operator|.
name|addAttribute
argument_list|(
name|sInstructionalMethodAttribute
argument_list|,
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|configElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdRolledForwardFromAttribute
argument_list|,
name|config
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exportSubpart
argument_list|(
name|configElement
operator|.
name|addElement
argument_list|(
name|sSubpartElementName
argument_list|)
argument_list|,
name|subpart
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|exportSubpart
parameter_list|(
name|Element
name|subpartElement
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|subpart
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sTypeAttribute
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sSuffixAttribute
argument_list|,
name|subpart
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
argument_list|)
expr_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sMinPerWeekAttribute
argument_list|,
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sStudentAllowOverlapAttribute
argument_list|,
operator|(
name|subpart
operator|.
name|getStudentAllowOverlap
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
name|subpartElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdRolledForwardFromAttribute
argument_list|,
name|subpart
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseCreditUnitConfig
name|credit
range|:
name|subpart
operator|.
name|getCreditConfigs
argument_list|()
control|)
block|{
name|exportCredit
argument_list|(
name|subpartElement
argument_list|,
name|credit
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|getCancelled
argument_list|()
operator|&&
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|exportClass
argument_list|(
name|subpartElement
operator|.
name|addElement
argument_list|(
name|sClassElementName
argument_list|)
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SchedulingSubpart
name|childSubpart
range|:
name|subpart
operator|.
name|getChildSubparts
argument_list|()
control|)
block|{
name|exportSubpart
argument_list|(
name|subpartElement
operator|.
name|addElement
argument_list|(
name|sSubpartElementName
argument_list|)
argument_list|,
name|childSubpart
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|exportDatePattern
parameter_list|(
name|DatePattern
name|datePattern
parameter_list|)
block|{
name|Element
name|datePatternElement
init|=
name|datePatternsElement
operator|.
name|addElement
argument_list|(
name|sDatePatternElementName
argument_list|)
decl_stmt|;
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|datePattern
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sPatternAttribute
argument_list|,
name|datePattern
operator|.
name|getPattern
argument_list|()
argument_list|)
expr_stmt|;
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sOffsetAttribute
argument_list|,
name|datePattern
operator|.
name|getOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sTypeAttribute
argument_list|,
name|datePattern
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sVisibleAttribute
argument_list|,
name|datePattern
operator|.
name|getVisible
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|datePattern
operator|.
name|getNumberOfWeeks
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|datePatternElement
operator|.
name|addAttribute
argument_list|(
name|sNumberOfWeeksAttribute
argument_list|,
name|datePattern
operator|.
name|getNumberOfWeeks
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|datePatternElements
operator|.
name|put
argument_list|(
name|datePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|datePatternElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportTimePatternDays
parameter_list|(
name|Element
name|timePatternDaysElement
parameter_list|,
name|TimePatternDays
name|timePatternDays
parameter_list|)
block|{
name|timePatternDaysElement
operator|.
name|addAttribute
argument_list|(
name|sDayCodeAttribute
argument_list|,
name|timePatternDays
operator|.
name|getDayCode
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportTimePatternTimes
parameter_list|(
name|Element
name|timePatternTimesElement
parameter_list|,
name|TimePatternTime
name|timePatternTimes
parameter_list|)
block|{
name|timePatternTimesElement
operator|.
name|addAttribute
argument_list|(
name|sStartSlotAttribute
argument_list|,
name|timePatternTimes
operator|.
name|getStartSlot
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportTimePattern
parameter_list|(
name|TimePattern
name|timePattern
parameter_list|)
block|{
name|Element
name|timePatternElement
init|=
name|timePatternsElement
operator|.
name|addElement
argument_list|(
name|sTimePatternElementName
argument_list|)
decl_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|timePattern
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|timePattern
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sMinutesPerMeetingAttribute
argument_list|,
name|timePattern
operator|.
name|getMinPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sSlotsPerMeetingAttribute
argument_list|,
name|timePattern
operator|.
name|getSlotsPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sNumberOfMeetingsPerWeekAttribute
argument_list|,
name|timePattern
operator|.
name|getNrMeetings
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sVisibleAttribute
argument_list|,
name|timePattern
operator|.
name|getVisible
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sTypeAttribute
argument_list|,
name|timePattern
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|timePatternElement
operator|.
name|addAttribute
argument_list|(
name|sBreakTimeAttribute
argument_list|,
name|timePattern
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TimePatternDays
name|day
range|:
name|timePattern
operator|.
name|getDays
argument_list|()
control|)
block|{
name|exportTimePatternDays
argument_list|(
name|timePatternElement
operator|.
name|addElement
argument_list|(
name|sTimePatternDaysElementName
argument_list|)
argument_list|,
name|day
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimePatternTime
name|time
range|:
name|timePattern
operator|.
name|getTimes
argument_list|()
control|)
block|{
name|exportTimePatternTimes
argument_list|(
name|timePatternElement
operator|.
name|addElement
argument_list|(
name|sTimePatternTimeElementName
argument_list|)
argument_list|,
name|time
argument_list|)
expr_stmt|;
block|}
name|timePatternElements
operator|.
name|put
argument_list|(
name|timePattern
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|timePatternElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportClass
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
name|getExternalUniqueId
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sParentClassUniqueIdAttribute
argument_list|,
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sStudentSchedulingAttribute
argument_list|,
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sLimitAttribute
argument_list|,
literal|"inf"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sLimitAttribute
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sNumberOfRoomsAttribute
argument_list|,
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|datePatternElements
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDatePattern
argument_list|(
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sDatePatternUniqueIdAttribute
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|timePatternElements
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportTimePattern
argument_list|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getTimePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sTimePatternUniqueIdAttribute
argument_list|,
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sClassSuffixAttribute
argument_list|,
name|getClassSuffix
argument_list|(
name|clazz
argument_list|)
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sSectionNumberAttribute
argument_list|,
name|clazz
operator|.
name|getSectionNumber
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|departmentElements
operator|.
name|containsKey
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDepartment
argument_list|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sManagingDepartmentUniqueIdAttribute
argument_list|,
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdRolledForwardFromAttribute
argument_list|,
name|clazz
operator|.
name|getUniqueIdRolledForwardFrom
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
name|exportClassInstructor
argument_list|(
name|classElement
operator|.
name|addElement
argument_list|(
name|sClassInstructorElementName
argument_list|)
argument_list|,
name|instructor
argument_list|)
expr_stmt|;
block|}
name|classElements
operator|.
name|put
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|classElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportStudent
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|Element
name|studentElement
init|=
name|studentsElement
operator|.
name|addElement
argument_list|(
name|sStudentElementName
argument_list|)
decl_stmt|;
name|studentElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|student
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|studentElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|student
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|student
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|studentElement
operator|.
name|addAttribute
argument_list|(
name|sFirstNameAttribute
argument_list|,
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|studentElement
operator|.
name|addAttribute
argument_list|(
name|sMiddleNameAttribute
argument_list|,
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|studentElement
operator|.
name|addAttribute
argument_list|(
name|sLastNameAttribute
argument_list|,
name|student
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|studentElements
operator|.
name|put
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentElement
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|major
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
name|exportAcadAreaMajorClassification
argument_list|(
name|studentElement
operator|.
name|addElement
argument_list|(
name|sAcadAreaMajorClassificationElementName
argument_list|)
argument_list|,
name|major
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMinor
name|minor
range|:
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
control|)
name|exportAcadAreaMinorClassification
argument_list|(
name|studentElement
operator|.
name|addElement
argument_list|(
name|sAcadAreaMinorClassificationElementName
argument_list|)
argument_list|,
name|minor
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportAcadAreaMajorClassification
parameter_list|(
name|Element
name|acadAreaMajorClassificationElement
parameter_list|,
name|StudentAreaClassificationMajor
name|acm
parameter_list|)
block|{
if|if
condition|(
operator|!
name|majorElements
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|academicAreaElements
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportAcademicArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|academicClassificationElements
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportAcademicClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|acadAreaMajorClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sAcademicAreaUniqueIdAttribute
argument_list|,
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|acadAreaMajorClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sAcademicClassificationUniqueIdAttribute
argument_list|,
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|acadAreaMajorClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sMajorUniqueIdAttribute
argument_list|,
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportAcadAreaMinorClassification
parameter_list|(
name|Element
name|acadAreaMinorClassificationElement
parameter_list|,
name|StudentAreaClassificationMinor
name|acm
parameter_list|)
block|{
if|if
condition|(
operator|!
name|majorElements
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getMinor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportMinor
argument_list|(
name|acm
operator|.
name|getMinor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|academicAreaElements
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportAcademicArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|academicClassificationElements
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportAcademicClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|acadAreaMinorClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sAcademicAreaUniqueIdAttribute
argument_list|,
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|acadAreaMinorClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sAcademicClassificationUniqueIdAttribute
argument_list|,
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|acadAreaMinorClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sMinorUniqueIdAttribute
argument_list|,
name|acm
operator|.
name|getMinor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportMajor
parameter_list|(
name|PosMajor
name|major
parameter_list|)
block|{
name|Element
name|majorElement
init|=
name|majorsElement
operator|.
name|addElement
argument_list|(
name|sMajorElementName
argument_list|)
decl_stmt|;
name|majorElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|major
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|majorElement
operator|.
name|addAttribute
argument_list|(
name|sCodeAttribute
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|majorElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|major
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|majorElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|major
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|majorElements
operator|.
name|put
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|majorElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportMinor
parameter_list|(
name|PosMinor
name|minor
parameter_list|)
block|{
name|Element
name|minorElement
init|=
name|minorsElement
operator|.
name|addElement
argument_list|(
name|sMinorElementName
argument_list|)
decl_stmt|;
name|minorElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|minor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|minorElement
operator|.
name|addAttribute
argument_list|(
name|sCodeAttribute
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|minorElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|minorElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|minor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|minorElements
operator|.
name|put
argument_list|(
name|minor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|minorElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportAcademicClassification
parameter_list|(
name|AcademicClassification
name|academicClassification
parameter_list|)
block|{
name|Element
name|academicClassificationElement
init|=
name|academicClassificationsElement
operator|.
name|addElement
argument_list|(
name|sAcademicClassificationElementName
argument_list|)
decl_stmt|;
name|academicClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|academicClassification
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|academicClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sCodeAttribute
argument_list|,
name|academicClassification
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|academicClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|academicClassification
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|academicClassificationElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|academicClassification
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|academicClassification
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|academicClassification
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|academicClassificationElements
operator|.
name|put
argument_list|(
name|academicClassification
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|academicClassificationElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportAcademicArea
parameter_list|(
name|AcademicArea
name|academicArea
parameter_list|)
block|{
name|Element
name|academicAreaElement
init|=
name|academicAreasElement
operator|.
name|addElement
argument_list|(
name|sAcademicAreaElementName
argument_list|)
decl_stmt|;
name|academicAreaElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|academicArea
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|academicAreaElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|academicArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|academicAreaElement
operator|.
name|addAttribute
argument_list|(
name|sTitleAttribute
argument_list|,
name|academicArea
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|academicAreaElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|academicArea
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|academicArea
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|academicArea
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|academicAreaElements
operator|.
name|put
argument_list|(
name|academicArea
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|academicAreaElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportStudentClassEnrollment
parameter_list|(
name|StudentClassEnrollment
name|studentClassEnrollment
parameter_list|)
block|{
if|if
condition|(
operator|!
name|studentElements
operator|.
name|containsKey
argument_list|(
name|studentClassEnrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportStudent
argument_list|(
name|studentClassEnrollment
operator|.
name|getStudent
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|studentClassEnrollmentElement
init|=
name|studentElements
operator|.
name|get
argument_list|(
name|studentClassEnrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|addElement
argument_list|(
name|sEnrollmentElementName
argument_list|)
decl_stmt|;
name|studentClassEnrollmentElement
operator|.
name|addAttribute
argument_list|(
name|sClassUniqueIdAttribute
argument_list|,
name|studentClassEnrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|studentClassEnrollmentElement
operator|.
name|addAttribute
argument_list|(
name|sCourseOfferingUniqueIdAttribute
argument_list|,
name|studentClassEnrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|studentClassEnrollmentElement
operator|.
name|addAttribute
argument_list|(
name|sTimestampAttribute
argument_list|,
operator|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|studentClassEnrollment
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|sTimeFormat
operator|.
name|format
argument_list|(
name|studentClassEnrollment
operator|.
name|getTimestamp
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|studentClassEnrollmentElement
operator|.
name|addAttribute
argument_list|(
name|sChangedByAttribute
argument_list|,
name|studentClassEnrollment
operator|.
name|getChangedBy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportClassEvent
parameter_list|(
name|ClassEvent
name|classEvent
parameter_list|,
name|Meeting
name|meeting
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|Element
name|classEventElement
init|=
name|classEventElements
operator|.
name|get
argument_list|(
name|classEvent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classEventElement
operator|==
literal|null
condition|)
block|{
name|classEventElement
operator|=
name|classElements
operator|.
name|get
argument_list|(
name|classEvent
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|addElement
argument_list|(
name|sClassEventElementName
argument_list|)
expr_stmt|;
name|classEventElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|classEvent
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|classEventElements
operator|.
name|put
argument_list|(
name|classEvent
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|classEventElement
argument_list|)
expr_stmt|;
block|}
name|exportClassMeeting
argument_list|(
name|classEventElement
operator|.
name|addElement
argument_list|(
literal|"classMeeting"
argument_list|)
argument_list|,
name|meeting
argument_list|,
name|classEvent
operator|.
name|getClazz
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|calcTotalMinPerMeeting
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
return|return
operator|(
name|meeting
operator|.
name|getStopPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|-
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|-
operator|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|)
operator|+
operator|(
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
specifier|private
name|void
name|exportClassMeetingUtilPeriods
parameter_list|(
name|Element
name|classMeetingElement
parameter_list|,
name|Meeting
name|meeting
parameter_list|,
name|Class_
name|clazz
parameter_list|)
block|{
name|int
name|firstPeriod
init|=
operator|(
operator|(
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|+
operator|(
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|!=
literal|null
condition|?
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|.
name|intValue
argument_list|()
else|:
literal|0
operator|)
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|lastPeriod
init|=
operator|(
operator|new
name|Double
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
operator|(
name|meeting
operator|.
name|getStopPeriod
argument_list|()
operator|.
name|doubleValue
argument_list|()
operator|*
operator|(
name|double
operator|)
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|)
operator|+
operator|(
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|!=
literal|null
condition|?
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|.
name|doubleValue
argument_list|()
else|:
operator|(
name|double
operator|)
literal|0
operator|)
operator|)
operator|/
operator|(
name|double
operator|)
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|totalMinPerMeeting
init|=
name|calcTotalMinPerMeeting
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
name|int
name|timePatMinPerMtg
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|timePatMinPerMtg
operator|=
name|totalMinPerMeeting
expr_stmt|;
block|}
else|else
block|{
name|timePatMinPerMtg
operator|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getMinutesPerMeeting
argument_list|()
expr_stmt|;
block|}
name|int
name|totalTimePeriodsNeeded
init|=
operator|(
operator|new
name|Double
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|timePatMinPerMtg
operator|/
operator|(
name|double
operator|)
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|meetPeriodsCount
init|=
literal|0
decl_stmt|;
name|int
name|extraPeriodsCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|totalMinPerMeeting
operator|<=
name|timePatMinPerMtg
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|firstPeriod
init|;
name|i
operator|<
name|lastPeriod
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|meetPeriodsCount
operator|<
name|totalTimePeriodsNeeded
condition|)
block|{
name|Element
name|classMeetingUtilPeriod
init|=
name|classMeetingElement
operator|.
name|addElement
argument_list|(
name|sClassMeetingUtilPeriodElementName
argument_list|)
decl_stmt|;
name|classMeetingUtilPeriod
operator|.
name|addAttribute
argument_list|(
name|sPeriodAttribute
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|meetPeriodsCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|extraPeriodsCount
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|totalIncorporatedBreakTime
init|=
name|totalMinPerMeeting
operator|-
name|timePatMinPerMtg
decl_stmt|;
name|int
name|numIncorporatedBreaks
init|=
operator|(
operator|new
name|Double
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|double
operator|)
name|timePatMinPerMtg
operator|/
name|ApplicationProperty
operator|.
name|StandardClassMeetingLengthInMinutes
operator|.
name|doubleValue
argument_list|()
argument_list|)
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|minPerHourOfIncorporatedBreaks
init|=
operator|(
name|numIncorporatedBreaks
operator|==
literal|0
condition|?
literal|0
else|:
name|totalIncorporatedBreakTime
operator|/
name|numIncorporatedBreaks
operator|)
decl_stmt|;
name|int
name|numBreakPeriods
init|=
name|minPerHourOfIncorporatedBreaks
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|numPeriodsPerStandardHour
init|=
operator|(
operator|new
name|Double
argument_list|(
name|Math
operator|.
name|ceil
argument_list|(
name|ApplicationProperty
operator|.
name|StandardClassMeetingLengthInMinutes
operator|.
name|doubleValue
argument_list|()
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
argument_list|)
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|boolean
name|markAsMeeting
init|=
literal|true
decl_stmt|;
name|int
name|meetCount
init|=
literal|0
decl_stmt|;
name|int
name|skipCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|(
name|lastPeriod
operator|-
name|firstPeriod
operator|)
operator|<
name|totalTimePeriodsNeeded
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Warning - Not enough "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|" minute periods will be stored for meeting: "
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|firstPeriod
init|;
name|i
operator|<
name|lastPeriod
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|meetPeriodsCount
operator|<
name|totalTimePeriodsNeeded
condition|)
block|{
if|if
condition|(
name|markAsMeeting
condition|)
block|{
name|Element
name|classMeetingUtilPeriod
init|=
name|classMeetingElement
operator|.
name|addElement
argument_list|(
name|sClassMeetingUtilPeriodElementName
argument_list|)
decl_stmt|;
name|classMeetingUtilPeriod
operator|.
name|addAttribute
argument_list|(
name|sPeriodAttribute
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|meetCount
operator|++
expr_stmt|;
name|meetPeriodsCount
operator|++
expr_stmt|;
if|if
condition|(
name|meetCount
operator|>=
name|numPeriodsPerStandardHour
operator|&&
name|numBreakPeriods
operator|>
literal|0
condition|)
block|{
name|markAsMeeting
operator|=
literal|false
expr_stmt|;
name|meetCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
else|else
block|{
name|skipCount
operator|++
expr_stmt|;
if|if
condition|(
name|skipCount
operator|>=
name|numBreakPeriods
condition|)
block|{
name|markAsMeeting
operator|=
literal|true
expr_stmt|;
name|skipCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|extraPeriodsCount
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|extraPeriodsCount
operator|>
literal|0
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Info - More than enough "
operator|+
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
literal|" minute periods for meeting:  "
operator|+
name|meeting
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" the last "
operator|+
name|extraPeriodsCount
operator|+
literal|" were not marked as meeting."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|exportClassMeeting
parameter_list|(
name|Element
name|meetingElement
parameter_list|,
name|Meeting
name|meeting
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|Location
name|location
parameter_list|)
block|{
name|int
name|calcMinutesPerMeeting
init|=
name|calcTotalMinPerMeeting
argument_list|(
name|meeting
argument_list|)
decl_stmt|;
name|int
name|timePatternMinPerMeeting
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|timePatternMinPerMeeting
operator|=
name|calcMinutesPerMeeting
expr_stmt|;
name|Debug
operator|.
name|info
argument_list|(
literal|"Info - class meeting: "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" missing committed assignement.  Using calculated minutes per meeting."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|timePatternMinPerMeeting
operator|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getMinutesPerMeeting
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|calcMinutesPerMeeting
operator|>
name|timePatternMinPerMeeting
condition|)
block|{
name|calcMinutesPerMeeting
operator|=
name|timePatternMinPerMeeting
expr_stmt|;
block|}
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sMeetingDateAttribute
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sStartPeriodAttribute
argument_list|,
name|meeting
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sStopPeriodAttribute
argument_list|,
name|meeting
operator|.
name|getStopPeriod
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sStartOffsetAttribute
argument_list|,
name|meeting
operator|.
name|getStartOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sStopOffsetAttribute
argument_list|,
name|meeting
operator|.
name|getStopOffset
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sTimePatternMinutesPerMeetingAttribute
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|timePatternMinPerMeeting
argument_list|)
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sCalculatedMinutesPerMeetingAttribute
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|calcMinutesPerMeeting
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|locationElements
operator|.
name|containsKey
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|meetingElement
operator|.
name|addAttribute
argument_list|(
name|sLocationUniqueIdAttribute
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|exportClassMeetingUtilPeriods
argument_list|(
name|meetingElement
argument_list|,
name|meeting
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportBuilding
parameter_list|(
name|Building
name|building
parameter_list|)
block|{
name|Element
name|buildingElement
init|=
name|locationsElement
operator|.
name|addElement
argument_list|(
name|sBuildingElementName
argument_list|)
decl_stmt|;
name|buildingElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|building
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buildingElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|building
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|buildingElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|building
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|building
operator|.
name|getCoordinateX
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buildingElement
operator|.
name|addAttribute
argument_list|(
name|sCoordinateXAttribute
argument_list|,
name|building
operator|.
name|getCoordinateX
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|building
operator|.
name|getCoordinateY
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|buildingElement
operator|.
name|addAttribute
argument_list|(
name|sCoordinateYAttribute
argument_list|,
name|building
operator|.
name|getCoordinateY
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buildingElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|building
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|building
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|building
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|buildingElements
operator|.
name|put
argument_list|(
name|building
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|buildingElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportRoomType
parameter_list|(
name|RoomType
name|roomType
parameter_list|)
block|{
name|Element
name|roomTypeElement
init|=
name|roomTypesElement
operator|.
name|addElement
argument_list|(
name|sRoomTypeElementName
argument_list|)
decl_stmt|;
name|roomTypeElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|roomType
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|roomTypeElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|roomType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|roomTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|roomTypeElement
operator|.
name|addAttribute
argument_list|(
name|sOrderAttribute
argument_list|,
name|roomType
operator|.
name|getOrd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|roomTypeElement
operator|.
name|addAttribute
argument_list|(
name|sIsRoomAttribute
argument_list|,
operator|(
name|roomType
operator|.
name|isRoom
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
name|roomTypeElements
operator|.
name|put
argument_list|(
name|roomType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|roomTypeElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportCreditType
parameter_list|(
name|CourseCreditType
name|creditType
parameter_list|)
block|{
name|Element
name|creditTypeElement
init|=
name|creditTypesElement
operator|.
name|addElement
argument_list|(
name|sCreditTypeElementName
argument_list|)
decl_stmt|;
name|creditTypeElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|creditType
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|creditTypeElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|creditType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|creditTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|creditType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|creditTypeElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|creditType
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|creditTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLegacyCourseMasterCodeAttribute
argument_list|,
name|creditType
operator|.
name|getLegacyCourseMasterCode
argument_list|()
argument_list|)
expr_stmt|;
name|creditTypeElements
operator|.
name|put
argument_list|(
name|creditType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|creditTypeElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportCreditUnitType
parameter_list|(
name|CourseCreditUnitType
name|creditUnitType
parameter_list|)
block|{
name|Element
name|creditUnitTypeElement
init|=
name|creditUnitTypesElement
operator|.
name|addElement
argument_list|(
name|sCreditUnitTypeElementName
argument_list|)
decl_stmt|;
name|creditUnitTypeElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|creditUnitType
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|creditUnitTypeElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|creditUnitType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|creditUnitTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|creditUnitType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|creditUnitTypeElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|creditUnitType
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|creditUnitTypeElements
operator|.
name|put
argument_list|(
name|creditUnitType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|creditUnitTypeElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportPositionType
parameter_list|(
name|PositionType
name|positionType
parameter_list|)
block|{
name|Element
name|positionTypeElement
init|=
name|positionTypesElement
operator|.
name|addElement
argument_list|(
name|sPositionTypeElementName
argument_list|)
decl_stmt|;
name|positionTypeElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|positionType
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|positionTypeElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|positionType
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|positionTypeElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|positionType
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|positionTypeElement
operator|.
name|addAttribute
argument_list|(
name|sOrderAttribute
argument_list|,
name|positionType
operator|.
name|getSortOrder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|positionTypeElements
operator|.
name|put
argument_list|(
name|positionType
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|positionTypeElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportLocation
parameter_list|(
name|Location
name|location
parameter_list|)
block|{
if|if
condition|(
operator|!
name|roomTypeElements
operator|.
name|containsKey
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportRoomType
argument_list|(
name|location
operator|.
name|getRoomType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|roomElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|location
decl_stmt|;
if|if
condition|(
operator|!
name|buildingElements
operator|.
name|containsKey
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportBuilding
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|roomElement
operator|=
name|buildingElements
operator|.
name|get
argument_list|(
name|room
operator|.
name|getBuilding
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|addElement
argument_list|(
name|sRoomElementName
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sRoomNumberAttribute
argument_list|,
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|location
operator|instanceof
name|NonUniversityLocation
condition|)
block|{
name|NonUniversityLocation
name|nonUniversityLocation
init|=
operator|(
name|NonUniversityLocation
operator|)
name|location
decl_stmt|;
name|roomElement
operator|=
name|locationsElement
operator|.
name|addElement
argument_list|(
name|sNonUniversityLocationElementName
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sNameAttribute
argument_list|,
name|nonUniversityLocation
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sPermanentIdAttribute
argument_list|,
name|location
operator|.
name|getPermanentId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sRoomTypeIdAttribute
argument_list|,
name|location
operator|.
name|getRoomType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sCapacityAttribute
argument_list|,
name|location
operator|.
name|getCapacity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getControllingDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|departmentElements
operator|.
name|containsKey
argument_list|(
name|location
operator|.
name|getControllingDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDepartment
argument_list|(
name|location
operator|.
name|getControllingDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sControllingDepartmentUniqueIdAttribute
argument_list|,
name|location
operator|.
name|getControllingDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sCoordinateXAttribute
argument_list|,
name|location
operator|.
name|getCoordinateX
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sCoordinateYAttribute
argument_list|,
name|location
operator|.
name|getCoordinateY
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|roomElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
operator|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|location
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|locationElements
operator|.
name|put
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|roomElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportClassInstructor
parameter_list|(
name|Element
name|instructorElement
parameter_list|,
name|ClassInstructor
name|instructor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|departmentalInstructorElements
operator|.
name|containsKey
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDepartmentalInstructor
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|instructorElement
operator|.
name|addAttribute
argument_list|(
name|sDepartmentalInstructorUniqueIdAttribute
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getResponsibility
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|teachingResponsibilityElements
operator|.
name|containsKey
argument_list|(
name|instructor
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportTeachingResponsibility
argument_list|(
name|instructor
operator|.
name|getResponsibility
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|instructorElement
operator|.
name|addAttribute
argument_list|(
name|sResponsibilityUniqueIdAttribute
argument_list|,
name|instructor
operator|.
name|getResponsibility
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|!=
literal|null
condition|)
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"lead"
argument_list|,
name|instructor
operator|.
name|isLead
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportTeachingResponsibility
parameter_list|(
name|TeachingResponsibility
name|responsibility
parameter_list|)
block|{
name|Element
name|responsibilityElement
init|=
name|teachingResponsibilitiesElement
operator|.
name|addElement
argument_list|(
name|sTeachingResponsibilityElementName
argument_list|)
decl_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|responsibility
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sReferenceAttribute
argument_list|,
name|responsibility
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sLabelAttribute
argument_list|,
name|responsibility
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sAbbreviationAttribute
argument_list|,
name|responsibility
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sInstructorAttribute
argument_list|,
operator|(
name|responsibility
operator|.
name|isInstructor
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sCoordinatorAttribute
argument_list|,
operator|(
name|responsibility
operator|.
name|isCoordinator
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
name|responsibilityElement
operator|.
name|addAttribute
argument_list|(
name|sOptionsAttribute
argument_list|,
name|responsibility
operator|.
name|getOptions
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|teachingResponsibilityElements
operator|.
name|put
argument_list|(
name|responsibility
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|responsibilityElement
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|exportDepartmentalInstructor
parameter_list|(
name|DepartmentalInstructor
name|instructor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|departmentElements
operator|.
name|containsKey
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportDepartment
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|departmentalInstructorElement
init|=
name|departmentElements
operator|.
name|get
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|addElement
argument_list|(
name|sDeptInstructorElementName
argument_list|)
decl_stmt|;
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sUniqueIdAttribute
argument_list|,
name|instructor
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sExternalIdAttribute
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sFirstNameAttribute
argument_list|,
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
condition|)
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sMiddleNameAttribute
argument_list|,
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sLastNameAttribute
argument_list|,
operator|(
name|instructor
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|"NULL"
else|:
name|instructor
operator|.
name|getLastName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getCareerAcct
argument_list|()
operator|!=
literal|null
condition|)
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sCareerAcctAttribute
argument_list|,
name|instructor
operator|.
name|getCareerAcct
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sEmailAttribute
argument_list|,
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|positionTypeElements
operator|.
name|containsKey
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|exportPositionType
argument_list|(
name|instructor
operator|.
name|getPositionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|departmentalInstructorElement
operator|.
name|addAttribute
argument_list|(
name|sPositionTypeUniqueIdAttribute
argument_list|,
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|departmentalInstructorElements
operator|.
name|put
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|departmentalInstructorElement
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"c:\\test\\courseOfferings.xml"
block|,
literal|"puWestLafayetteTrdtn"
block|,
literal|"2007"
block|,
literal|"Fal"
block|}
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|args
index|[
literal|2
index|]
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" not found!"
argument_list|)
throw|;
operator|new
name|PointInTimeDataExport
argument_list|()
operator|.
name|saveXml
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|session
argument_list|,
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

