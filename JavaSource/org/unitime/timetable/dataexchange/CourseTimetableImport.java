begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ConstraintInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Staff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseTimetableImport
extends|extends
name|BaseImport
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DateFormat
name|iDateFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|DateFormat
name|iTimeFormat
init|=
literal|null
decl_stmt|;
specifier|private
name|DateFormat
name|iHHmm
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmm"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class_
argument_list|>
name|iExtId2class
decl_stmt|,
name|iName2class
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Solution
argument_list|>
name|iOwnerId2solution
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Room
argument_list|>
name|iExtId2room
decl_stmt|,
name|iName2room
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|iExtId2location
decl_stmt|,
name|iName2location
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
name|iName2dp
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DatePattern
argument_list|>
name|iDatePatterns
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimePattern
argument_list|>
name|iTimePatterns
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
name|iName2tp
decl_stmt|;
specifier|private
name|Date
name|iToday
decl_stmt|;
specifier|private
name|Session
name|iSession
decl_stmt|;
specifier|private
name|boolean
name|iInstructors
decl_stmt|,
name|iPreferExtId
decl_stmt|,
name|iNotes
decl_stmt|;
specifier|public
name|CourseTimetableImport
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|rootElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"timetable"
argument_list|)
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a course timetable import file."
argument_list|)
throw|;
try|try
block|{
name|String
name|campus
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|String
name|action
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"action"
argument_list|)
decl_stmt|;
name|iInstructors
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"instructors"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|iNotes
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"notes"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|iPreferExtId
operator|=
literal|"id"
operator|.
name|equalsIgnoreCase
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"prefer"
argument_list|,
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|iDateFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"dateFormat"
argument_list|,
literal|"yyyy/M/d"
argument_list|)
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|String
name|timeFormat
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"timeFormat"
argument_list|,
literal|"HHmm"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"HHmm"
operator|.
name|equals
argument_list|(
name|timeFormat
argument_list|)
condition|)
name|iTimeFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|timeFormat
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|beginTransaction
argument_list|()
expr_stmt|;
name|iSession
operator|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
name|iExtId2class
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|iName2class
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Loading classes..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|extId
init|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
operator|!
name|extId
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExtId2class
operator|.
name|put
argument_list|(
name|extId
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|String
name|name
init|=
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|iName2class
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
name|iOwnerId2solution
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Solution
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"update"
operator|.
name|equals
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"Loading solutions..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Solution
name|solution
range|:
operator|(
name|List
argument_list|<
name|Solution
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s from Solution s where s.commited = true and s.owner.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iOwnerId2solution
operator|.
name|put
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|solution
argument_list|)
expr_stmt|;
block|}
block|}
name|info
argument_list|(
literal|"Loading rooms..."
argument_list|)
expr_stmt|;
name|iExtId2room
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Room
argument_list|>
argument_list|()
expr_stmt|;
name|iName2room
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Room
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Room
name|room
range|:
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r where r.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExtId2room
operator|.
name|put
argument_list|(
name|room
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|room
argument_list|)
expr_stmt|;
name|iName2room
operator|.
name|put
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|,
name|room
argument_list|)
expr_stmt|;
block|}
name|iExtId2location
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|()
expr_stmt|;
name|iName2location
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select r from Location r where r.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iExtId2location
operator|.
name|put
argument_list|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|iName2location
operator|.
name|put
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|iName2dp
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
argument_list|()
expr_stmt|;
name|iDatePatterns
operator|=
name|DatePattern
operator|.
name|findAll
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|DatePattern
name|dp
range|:
name|iDatePatterns
control|)
name|iName2dp
operator|.
name|put
argument_list|(
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
argument_list|)
expr_stmt|;
name|iTimePatterns
operator|=
name|TimePattern
operator|.
name|findAll
argument_list|(
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iName2tp
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|TimePattern
name|tp
range|:
name|iTimePatterns
control|)
name|iName2tp
operator|.
name|put
argument_list|(
name|tp
operator|.
name|getName
argument_list|()
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iToday
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Importing assignments..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importClassAssignment
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Committing new solutions..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Solution
name|solution
range|:
name|iOwnerId2solution
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|solution
operator|.
name|isCommited
argument_list|()
condition|)
continue|continue;
name|info
argument_list|(
literal|"Committing solution for "
operator|+
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|messages
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|solution
operator|.
name|commitSolution
argument_list|(
name|messages
argument_list|,
name|getHibSession
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|error
argument_list|(
literal|"Failed to commit solution for "
operator|+
name|solution
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", see the following problems:"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|message
range|:
name|messages
control|)
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|importClassAssignment
parameter_list|(
name|Element
name|classElement
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|importClassAssignment
argument_list|(
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|Class_
name|clazz
init|=
name|lookupClass
argument_list|(
name|classElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|iInstructors
condition|)
name|updateInstructors
argument_list|(
name|clazz
argument_list|,
name|classElement
argument_list|)
expr_stmt|;
if|if
condition|(
name|iNotes
condition|)
block|{
name|clazz
operator|.
name|setSchedulePrintNote
argument_list|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"scheduleNote"
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDisplayInstructor
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"displayInScheduleBook"
argument_list|,
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setEnabledForStudentScheduling
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"studentScheduling"
argument_list|,
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Department
name|department
init|=
name|clazz
operator|.
name|getManagingDept
argument_list|()
decl_stmt|;
if|if
condition|(
name|department
operator|==
literal|null
condition|)
name|department
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
expr_stmt|;
name|SolverGroup
name|sg
init|=
name|department
operator|.
name|getSolverGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|sg
operator|==
literal|null
condition|)
block|{
name|sg
operator|=
operator|new
name|SolverGroup
argument_list|()
expr_stmt|;
name|sg
operator|.
name|setDepartments
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|getDepartments
argument_list|()
operator|.
name|add
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|department
operator|.
name|setSolverGroup
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setAbbv
argument_list|(
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setTimetableManagers
argument_list|(
operator|new
name|HashSet
argument_list|(
name|department
operator|.
name|getTimetableManagers
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sg
operator|.
name|setSolutions
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|department
argument_list|)
expr_stmt|;
block|}
name|Solution
name|solution
init|=
name|iOwnerId2solution
operator|.
name|get
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|solution
operator|==
literal|null
condition|)
block|{
name|solution
operator|=
operator|new
name|Solution
argument_list|()
expr_stmt|;
name|solution
operator|.
name|setCreated
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCreator
argument_list|(
literal|"MakeAssignmentsForClassEvents"
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setOwner
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|sg
operator|.
name|getSolutions
argument_list|()
operator|.
name|add
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setAssignments
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCommited
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|solution
operator|.
name|setCommitDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|sg
argument_list|)
expr_stmt|;
name|iOwnerId2solution
operator|.
name|put
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|solution
argument_list|)
expr_stmt|;
block|}
name|Assignment
name|assignment
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Assignment
name|a
range|:
name|solution
operator|.
name|getAssignments
argument_list|()
control|)
if|if
condition|(
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
name|assignment
operator|=
name|a
expr_stmt|;
name|DatePattern
name|datePattern
init|=
literal|null
decl_stmt|;
name|TimePattern
name|timePattern
init|=
literal|null
decl_stmt|;
name|Integer
name|dayCode
init|=
literal|null
decl_stmt|,
name|startSlot
init|=
literal|null
decl_stmt|;
name|String
name|datePatternName
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"time"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|timeElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|startSlot
operator|=
name|parseTime
argument_list|(
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|warn
argument_list|(
literal|"Failed to parse start time "
operator|+
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
operator|+
literal|" for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|dayCode
operator|=
operator|(
name|dayCode
operator|==
literal|null
condition|?
literal|0
else|:
name|dayCode
operator|)
operator||
name|parseDaysOfWeek
argument_list|(
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|datePatternName
operator|=
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
expr_stmt|;
name|datePattern
operator|=
name|iName2dp
operator|.
name|get
argument_list|(
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"timePattern"
argument_list|)
operator|!=
literal|null
condition|)
name|timePattern
operator|=
name|iName2tp
operator|.
name|get
argument_list|(
name|timeElement
operator|.
name|attributeValue
argument_list|(
literal|"timePattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dayCode
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getSolution
argument_list|()
operator|.
name|isCommited
argument_list|()
condition|)
block|{
name|ClassEvent
name|event
init|=
name|clazz
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ApplicationProperty
operator|.
name|ClassAssignmentChangePastMeetings
operator|.
name|isTrue
argument_list|()
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|!
name|j
operator|.
name|next
argument_list|()
operator|.
name|getMeetingDate
argument_list|()
operator|.
name|before
argument_list|(
name|iToday
argument_list|)
condition|)
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|clazz
operator|.
name|setCommittedAssignment
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|assignment
operator|.
name|getSolution
argument_list|()
operator|.
name|getAssignments
argument_list|()
operator|.
name|remove
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getAssignments
argument_list|()
operator|.
name|remove
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
for|for
control|(
name|ConstraintInfo
name|ci
range|:
name|assignment
operator|.
name|getConstraintInfo
argument_list|()
control|)
block|{
for|for
control|(
name|Assignment
name|a
range|:
name|ci
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|assignment
argument_list|)
condition|)
block|{
name|a
operator|.
name|getConstraintInfo
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" := arrange hours"
argument_list|)
expr_stmt|;
return|return;
block|}
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
init|=
name|getLocations
argument_list|(
name|classElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|locations
operator|.
name|size
argument_list|()
operator|!=
name|clazz
operator|.
name|getNbrRooms
argument_list|()
condition|)
block|{
name|warn
argument_list|(
literal|"Changed number of rooms for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" to "
operator|+
name|locations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNbrRooms
argument_list|(
name|locations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DatePattern
name|classDatePattern
init|=
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|classDatePattern
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|classDatePattern
operator|.
name|getType
argument_list|()
operator|==
name|DatePattern
operator|.
name|sTypePatternSet
condition|)
block|{
for|for
control|(
name|DatePattern
name|d
range|:
name|iDatePatterns
control|)
block|{
if|if
condition|(
name|d
operator|.
name|getParents
argument_list|()
operator|.
name|contains
argument_list|(
name|classDatePattern
argument_list|)
operator|&&
name|match
argument_list|(
name|d
argument_list|,
name|classElement
argument_list|,
name|dayCode
argument_list|)
condition|)
block|{
name|datePattern
operator|=
name|classDatePattern
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|match
argument_list|(
name|classDatePattern
argument_list|,
name|classElement
argument_list|,
name|dayCode
argument_list|)
condition|)
name|datePattern
operator|=
name|classDatePattern
expr_stmt|;
block|}
block|}
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|BitSet
name|pattern
init|=
name|parseDatePattern
argument_list|(
name|classElement
argument_list|,
name|iSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|DatePattern
name|dp
range|:
name|iDatePatterns
control|)
block|{
if|if
condition|(
name|dp
operator|.
name|getPatternBitSet
argument_list|()
operator|.
name|equals
argument_list|(
name|pattern
argument_list|)
condition|)
block|{
name|datePattern
operator|=
name|dp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|info
argument_list|(
literal|"No date pattern found for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" -- creating a new one."
argument_list|)
expr_stmt|;
name|datePattern
operator|=
operator|new
name|DatePattern
argument_list|()
expr_stmt|;
name|datePattern
operator|.
name|setName
argument_list|(
name|datePatternName
operator|==
literal|null
condition|?
literal|"import - "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
else|:
name|datePatternName
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setSession
argument_list|(
name|iSession
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setPatternBitSet
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|datePattern
operator|.
name|setParents
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DatePattern
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|iName2dp
operator|.
name|put
argument_list|(
name|datePattern
operator|.
name|getName
argument_list|()
argument_list|,
name|datePattern
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|datePattern
operator|=
name|iSession
operator|.
name|getDefaultDatePattern
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|datePattern
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"No date pattern found for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|classDatePattern
operator|==
literal|null
operator|||
operator|(
operator|!
name|datePattern
operator|.
name|equals
argument_list|(
name|classDatePattern
argument_list|)
operator|&&
operator|!
name|datePattern
operator|.
name|getParents
argument_list|()
operator|.
name|contains
argument_list|(
name|classDatePattern
argument_list|)
operator|)
condition|)
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Changing date pattern for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|datePattern
operator|.
name|getName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimePref
name|tp
range|:
operator|(
name|Set
argument_list|<
name|TimePref
argument_list|>
operator|)
name|clazz
operator|.
name|getEffectiveTimePreferences
argument_list|()
control|)
block|{
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getExactDays
argument_list|()
operator|==
name|dayCode
operator|&&
name|m
operator|.
name|getExactStartSlot
argument_list|()
operator|==
name|startSlot
condition|)
block|{
name|timePattern
operator|=
name|tp
operator|.
name|getTimePattern
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|d
label|:
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|m
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
operator|==
name|dayCode
condition|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|==
name|startSlot
condition|)
block|{
name|timePattern
operator|=
name|tp
operator|.
name|getTimePattern
argument_list|()
expr_stmt|;
break|break
name|d
break|;
block|}
block|}
block|}
if|if
condition|(
name|timePattern
operator|==
literal|null
condition|)
block|{
name|TimePatternModel
name|model
init|=
literal|null
decl_stmt|;
name|tp
label|:
for|for
control|(
name|TimePattern
name|tp
range|:
name|iTimePatterns
control|)
block|{
if|if
condition|(
name|tp
operator|.
name|getMinPerMtg
argument_list|()
operator|*
name|tp
operator|.
name|getNrMeetings
argument_list|()
operator|==
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|||
name|tp
operator|.
name|getType
argument_list|()
operator|==
name|TimePattern
operator|.
name|sTypeExactTime
condition|)
block|{
name|TimePatternModel
name|m
init|=
name|tp
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|m
operator|.
name|setExactDays
argument_list|(
name|dayCode
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExactStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
name|model
operator|=
name|m
expr_stmt|;
name|timePattern
operator|=
name|tp
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|m
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|m
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
operator|==
name|dayCode
condition|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|m
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
if|if
condition|(
name|m
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|==
name|startSlot
condition|)
block|{
name|m
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|PreferenceLevel
operator|.
name|sStronglyPreferred
argument_list|)
expr_stmt|;
name|model
operator|=
name|m
expr_stmt|;
name|timePattern
operator|=
name|tp
expr_stmt|;
break|break
name|tp
break|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
name|TimePref
name|tp
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tp
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
expr_stmt|;
name|tp
operator|.
name|setTimePatternModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|info
argument_list|(
literal|"Time pattern "
operator|+
name|timePattern
operator|.
name|getName
argument_list|()
operator|+
literal|" added to "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|timePattern
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"No time pattern found for "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|assignment
operator|!=
literal|null
condition|)
block|{
name|assignment
operator|.
name|setDatePattern
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setTimePattern
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setSlotsPerMtg
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setBreakTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setDays
argument_list|(
name|dayCode
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setRooms
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|isCommited
argument_list|()
condition|)
block|{
name|Event
name|event
init|=
name|assignment
operator|.
name|generateCommittedEvent
argument_list|(
name|clazz
operator|.
name|getEvent
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|event
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|assignment
operator|=
operator|new
name|Assignment
argument_list|()
expr_stmt|;
name|assignment
operator|.
name|setDatePattern
argument_list|(
name|datePattern
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setTimePattern
argument_list|(
name|timePattern
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setSlotsPerMtg
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setBreakTime
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setDays
argument_list|(
name|dayCode
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setRooms
argument_list|(
name|locations
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setAssignmentInfo
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AssignmentInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setInstructors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DepartmentalInstructor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|assignment
operator|.
name|setClassName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|solution
operator|.
name|getAssignments
argument_list|()
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|getAssignments
argument_list|()
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassInstructor
name|instr
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
if|if
condition|(
name|instr
operator|.
name|isLead
argument_list|()
condition|)
name|assignment
operator|.
name|getInstructors
argument_list|()
operator|.
name|add
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|info
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" := "
operator|+
name|assignment
operator|.
name|getPlacement
argument_list|()
operator|.
name|getLongName
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Class_
name|lookupClass
parameter_list|(
name|Element
name|classElement
parameter_list|)
block|{
name|String
name|externalId
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|,
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
name|iExtId2class
operator|.
name|get
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
name|clazz
operator|=
name|iName2class
operator|.
name|get
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
name|String
name|className
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|className
operator|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|className
operator|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|)
operator|+
literal|" "
operator|+
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNbr"
argument_list|)
operator|+
literal|" "
operator|+
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" "
operator|+
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|className
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
block|{
name|clazz
operator|=
name|iName2class
operator|.
name|get
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Class_
name|clazzByName
init|=
name|iName2class
operator|.
name|get
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazzByName
operator|!=
literal|null
operator|&&
operator|!
name|clazzByName
operator|.
name|equals
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
name|warn
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|" has a different external id "
operator|+
operator|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|" != "
operator|+
name|externalId
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iPreferExtId
condition|)
name|clazz
operator|=
name|clazzByName
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Class "
operator|+
operator|(
name|className
operator|!=
literal|null
condition|?
name|className
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
operator|)
else|:
name|externalId
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
name|clazz
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Location
argument_list|>
name|getLocations
parameter_list|(
name|Element
name|classElement
parameter_list|)
block|{
name|Set
argument_list|<
name|Location
argument_list|>
name|locations
init|=
operator|new
name|HashSet
argument_list|<
name|Location
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"room"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|roomElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|,
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
argument_list|)
decl_stmt|;
name|Room
name|room
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|room
operator|=
name|iExtId2room
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|room
operator|=
name|iName2room
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
operator|!=
literal|null
operator|&&
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"roomNbr"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
operator|+
literal|" "
operator|+
name|roomElement
operator|.
name|attributeValue
argument_list|(
literal|"roomNbr"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|room
operator|=
name|iName2room
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Room
name|roomByName
init|=
name|iName2room
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|roomByName
operator|!=
literal|null
operator|&&
operator|!
name|roomByName
operator|.
name|equals
argument_list|(
name|room
argument_list|)
condition|)
block|{
name|warn
argument_list|(
literal|"Room "
operator|+
name|roomByName
operator|+
literal|" has a different external id "
operator|+
operator|(
name|roomByName
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|" != "
operator|+
name|id
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iPreferExtId
condition|)
name|room
operator|=
name|roomByName
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Room "
operator|+
operator|(
name|name
operator|!=
literal|null
condition|?
name|name
operator|+
operator|(
name|id
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|id
operator|+
literal|")"
operator|)
else|:
name|id
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
name|locations
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"location"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|locationElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|,
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
argument_list|)
decl_stmt|;
name|Location
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|location
operator|=
name|iExtId2location
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|location
operator|=
name|iName2location
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
operator|!=
literal|null
operator|&&
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"roomNbr"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
operator|+
literal|" "
operator|+
name|locationElement
operator|.
name|attributeValue
argument_list|(
literal|"roomNbr"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|location
operator|=
name|iName2location
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Location
name|locationByName
init|=
name|iName2location
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|locationByName
operator|!=
literal|null
operator|&&
operator|!
name|locationByName
operator|.
name|equals
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|warn
argument_list|(
literal|"Location "
operator|+
name|locationByName
operator|+
literal|" has a different external id "
operator|+
operator|(
name|locationByName
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|" != "
operator|+
name|id
operator|)
operator|+
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iPreferExtId
condition|)
name|location
operator|=
name|locationByName
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Location "
operator|+
operator|(
name|name
operator|!=
literal|null
condition|?
name|name
operator|+
operator|(
name|id
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|id
operator|+
literal|")"
operator|)
else|:
name|id
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
return|return
name|locations
return|;
block|}
specifier|protected
name|int
name|parseDaysOfWeek
parameter_list|(
name|String
name|daysOfWeek
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
name|String
name|tmpDays
init|=
name|daysOfWeek
decl_stmt|;
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"Th"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"Th"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"R"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"R"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"Su"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"Su"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"U"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"U"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"M"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"M"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"T"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"T"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"W"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"W"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"F"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmpDays
operator|.
name|contains
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|ret
operator||=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
name|tmpDays
operator|=
name|tmpDays
operator|.
name|replace
argument_list|(
literal|"S"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|protected
name|Integer
name|parseTime
parameter_list|(
name|String
name|timeString
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|time
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iTimeFormat
operator|==
literal|null
condition|?
name|timeString
else|:
name|iHHmm
operator|.
name|format
argument_list|(
name|iTimeFormat
operator|.
name|parse
argument_list|(
name|timeString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|hour
init|=
name|time
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|time
operator|%
literal|100
decl_stmt|;
return|return
operator|(
literal|60
operator|*
name|hour
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
return|;
block|}
specifier|protected
name|BitSet
name|parseDatePattern
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|int
name|startMonth
init|=
name|session
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|session
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|BitSet
name|pattern
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|String
name|endDate
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|date
init|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
name|d
argument_list|,
name|m
argument_list|,
name|year
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|endDate
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"date"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dateElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|startDate
init|=
name|dateElement
operator|.
name|attributeValue
argument_list|(
literal|"startDate"
argument_list|)
decl_stmt|;
try|try
block|{
name|startDate
operator|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|iDateFormat
operator|.
name|parse
argument_list|(
name|startDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|date
operator|.
name|equals
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|endDate
operator|=
name|dateElement
operator|.
name|attributeValue
argument_list|(
literal|"endDate"
argument_list|)
expr_stmt|;
try|try
block|{
name|endDate
operator|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|iDateFormat
operator|.
name|parse
argument_list|(
name|endDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
name|pattern
operator|.
name|set
argument_list|(
name|index
operator|++
argument_list|,
name|endDate
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|.
name|equals
argument_list|(
name|endDate
argument_list|)
condition|)
name|endDate
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|pattern
return|;
block|}
specifier|protected
name|boolean
name|match
parameter_list|(
name|DatePattern
name|datePattern
parameter_list|,
name|Element
name|classElement
parameter_list|,
name|int
name|dayCode
parameter_list|)
block|{
name|BitSet
name|pattern
init|=
name|datePattern
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
name|int
name|startMonth
init|=
name|datePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
decl_stmt|;
name|int
name|endMonth
init|=
name|datePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getPatternEndMonth
argument_list|()
decl_stmt|;
name|int
name|year
init|=
name|datePattern
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|String
name|endDate
init|=
literal|null
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|startMonth
argument_list|,
name|year
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|year
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<=
name|daysOfMonth
condition|;
name|d
operator|++
control|)
block|{
name|String
name|date
init|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|endDate
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"date"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dateElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|startDate
init|=
name|dateElement
operator|.
name|attributeValue
argument_list|(
literal|"startDate"
argument_list|)
decl_stmt|;
try|try
block|{
name|startDate
operator|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|iDateFormat
operator|.
name|parse
argument_list|(
name|startDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|date
operator|.
name|equals
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|endDate
operator|=
name|dateElement
operator|.
name|attributeValue
argument_list|(
literal|"endDate"
argument_list|)
expr_stmt|;
try|try
block|{
name|endDate
operator|=
name|iDateFormat
operator|.
name|format
argument_list|(
name|iDateFormat
operator|.
name|parse
argument_list|(
name|endDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|offered
operator|=
operator|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
operator|)
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offered
operator|&&
name|pattern
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|!=
operator|(
name|endDate
operator|!=
literal|null
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|date
operator|.
name|equals
argument_list|(
name|endDate
argument_list|)
condition|)
name|endDate
operator|=
literal|null
expr_stmt|;
name|index
operator|++
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|protected
name|void
name|updateInstructors
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|Element
name|classElement
parameter_list|)
block|{
name|List
argument_list|<
name|ClassInstructor
argument_list|>
name|instructors
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassInstructor
argument_list|>
argument_list|(
name|clazz
operator|.
name|getClassInstructors
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|classElement
operator|.
name|elementIterator
argument_list|(
literal|"instructor"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|instructorElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassInstructor
name|instructor
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|instructors
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
name|ci
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
if|if
condition|(
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|di
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
condition|)
block|{
name|instructor
operator|=
name|ci
expr_stmt|;
break|break;
block|}
name|String
name|name
init|=
operator|(
name|di
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|di
operator|.
name|getFirstName
argument_list|()
operator|)
operator|+
literal|":"
operator|+
operator|(
name|di
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|di
operator|.
name|getMiddleName
argument_list|()
operator|)
operator|+
literal|":"
operator|+
operator|(
name|di
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|di
operator|.
name|getLastName
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"fname"
argument_list|,
literal|""
argument_list|)
operator|+
literal|":"
operator|+
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"mname"
argument_list|,
literal|""
argument_list|)
operator|+
literal|":"
operator|+
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"lname"
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
name|instructor
operator|=
name|ci
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|instructors
operator|.
name|remove
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLead
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"lead"
argument_list|,
name|instructor
operator|.
name|isLead
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setPercentShare
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"share"
argument_list|,
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|==
literal|null
condition|?
literal|"100"
else|:
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|id
init|=
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
continue|continue;
name|DepartmentalInstructor
name|di
init|=
name|findDepartmentalInstructorWithExternalUniqueId
argument_list|(
name|id
argument_list|,
name|clazz
operator|.
name|getControllingDept
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|di
operator|==
literal|null
condition|)
block|{
name|di
operator|=
operator|new
name|DepartmentalInstructor
argument_list|()
expr_stmt|;
name|di
operator|.
name|setExternalUniqueId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|di
operator|.
name|setDepartment
argument_list|(
name|clazz
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
name|Staff
name|staff
init|=
name|findStaffMember
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|staff
operator|==
literal|null
condition|)
block|{
name|di
operator|.
name|setFirstName
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"fname"
argument_list|,
literal|"Unkwnown"
argument_list|)
argument_list|)
expr_stmt|;
name|di
operator|.
name|setMiddleName
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"mname"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|di
operator|.
name|setLastName
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"lname"
argument_list|,
literal|"Instructor"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|di
operator|.
name|setFirstName
argument_list|(
name|staff
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setMiddleName
argument_list|(
name|staff
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setLastName
argument_list|(
name|staff
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|di
operator|.
name|setIgnoreToFar
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|di
argument_list|)
expr_stmt|;
block|}
name|instructor
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|instructor
operator|.
name|setClassInstructing
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setInstructor
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLead
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"lead"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setPercentShare
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|instructorElement
operator|.
name|attributeValue
argument_list|(
literal|"share"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addToclassInstructors
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|di
operator|.
name|addToclasses
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|di
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|instructors
control|)
block|{
name|DepartmentalInstructor
name|di
init|=
name|instructor
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|di
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|di
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|DepartmentalInstructor
name|findDepartmentalInstructorWithExternalUniqueId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|Department
name|department
parameter_list|)
block|{
return|return
operator|(
name|DepartmentalInstructor
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct di from DepartmentalInstructor di where di.externalUniqueId=:externalId and di.department.uniqueId=:departmentId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|protected
name|Staff
name|findStaffMember
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|(
name|Staff
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Staff s where s.externalUniqueId=:externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|id
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
block|}
end_class

end_unit

