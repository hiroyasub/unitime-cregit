begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.0 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2007, UniTime.org, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|DocumentException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|_RootDAO
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BaseImport
block|{
specifier|protected
specifier|static
name|Log
name|sLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BaseImport
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLogLevelDebug
init|=
literal|"DEBUG"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLogLevelInfo
init|=
literal|"INFO"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLogLevelWarn
init|=
literal|"WARN"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLogLevelError
init|=
literal|"ERROR"
decl_stmt|;
specifier|public
specifier|static
name|String
name|sLogLevelFatal
init|=
literal|"FATAL"
decl_stmt|;
specifier|protected
name|PrintWriter
name|iTextLog
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Session
name|iHibSession
init|=
literal|null
decl_stmt|;
specifier|protected
name|org
operator|.
name|hibernate
operator|.
name|Transaction
name|iTx
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|iFlushIfNeededCounter
init|=
literal|0
decl_stmt|;
specifier|protected
specifier|static
name|int
name|sBatchSize
init|=
literal|100
decl_stmt|;
specifier|public
name|BaseImport
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setLog
parameter_list|(
name|PrintWriter
name|out
parameter_list|)
block|{
name|iTextLog
operator|=
name|out
expr_stmt|;
block|}
specifier|public
name|PrintWriter
name|getLog
parameter_list|()
block|{
return|return
name|iTextLog
return|;
block|}
specifier|public
name|void
name|log
parameter_list|(
name|String
name|level
parameter_list|,
name|String
name|message
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|iTextLog
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|iTextLog
operator|.
name|println
argument_list|(
name|level
operator|+
literal|": "
operator|+
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
name|t
operator|.
name|printStackTrace
argument_list|(
name|iTextLog
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadXml
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
name|debug
argument_list|(
literal|"Loading "
operator|+
name|fileName
argument_list|)
expr_stmt|;
name|FileInputStream
name|fis
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fis
operator|=
operator|new
name|FileInputStream
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|loadXml
argument_list|(
name|fis
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to read file "
operator|+
name|fileName
operator|+
literal|", reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|fis
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
specifier|public
name|void
name|loadXml
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|Document
name|document
init|=
operator|(
operator|new
name|SAXReader
argument_list|()
operator|)
operator|.
name|read
argument_list|(
name|inputStream
argument_list|)
decl_stmt|;
name|loadXml
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DocumentException
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to parse given XML, reason:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelDebug
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelInfo
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelWarn
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelError
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelFatal
argument_list|,
name|msg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|fatal
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelDebug
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelInfo
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warn
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelWarn
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|warn
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|error
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelError
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatal
parameter_list|(
name|String
name|msg
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
argument_list|(
name|sLogLevelFatal
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|fatal
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|hibernate
operator|.
name|Session
name|getHibSession
parameter_list|()
block|{
return|return
name|iHibSession
return|;
block|}
specifier|public
name|boolean
name|beginTransaction
parameter_list|()
block|{
try|try
block|{
name|iHibSession
operator|=
operator|new
name|_RootDAO
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|iHibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction started."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to begin transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
try|try
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Transaction committed."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to commit transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|rollbackTransaction
parameter_list|()
block|{
try|try
block|{
name|iTx
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Transaction rollbacked."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to rollback transaction, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|iHibSession
operator|!=
literal|null
operator|&&
name|iHibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|iHibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|flush
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
try|try
block|{
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|commit
operator|&&
name|iTx
operator|!=
literal|null
condition|)
block|{
name|iTx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|iTx
operator|=
name|getHibSession
argument_list|()
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Unable to flush current session, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|flushIfNeeded
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
name|iFlushIfNeededCounter
operator|++
expr_stmt|;
if|if
condition|(
name|iFlushIfNeededCounter
operator|>=
name|sBatchSize
condition|)
block|{
name|iFlushIfNeededCounter
operator|=
literal|0
expr_stmt|;
return|return
name|flush
argument_list|(
name|commit
argument_list|)
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

