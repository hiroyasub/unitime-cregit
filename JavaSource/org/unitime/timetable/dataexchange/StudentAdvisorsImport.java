begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentAdvisorsImport
extends|extends
name|BaseImport
block|{
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"studentAdvisors"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not student groups load file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|boolean
name|incremental
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|incremental
condition|)
name|info
argument_list|(
literal|"Incremental mode."
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Advisor
argument_list|>
name|id2advisor
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Advisor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Advisor
name|advisor
range|:
operator|(
name|List
argument_list|<
name|Advisor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Advisor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|id2advisor
operator|.
name|put
argument_list|(
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|advisor
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Roles
argument_list|>
name|ref2role
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Roles
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Roles
name|role
range|:
name|Roles
operator|.
name|findAll
argument_list|(
literal|true
argument_list|,
name|getHibSession
argument_list|()
argument_list|)
control|)
block|{
name|ref2role
operator|.
name|put
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|,
name|role
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|id2student
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|id2student
operator|.
name|put
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"studentAdvisor"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|Advisor
name|advisor
init|=
name|id2advisor
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|advisor
operator|==
literal|null
condition|)
block|{
name|advisor
operator|=
operator|new
name|Advisor
argument_list|()
expr_stmt|;
name|advisor
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
name|advisor
operator|.
name|setStudents
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setFirstName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"firstName"
argument_list|)
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setMiddleName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"middleName"
argument_list|)
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setLastName
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"lastName"
argument_list|)
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setEmail
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setAcademicTitle
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"acadTitle"
argument_list|)
argument_list|)
expr_stmt|;
name|advisor
operator|.
name|setRole
argument_list|(
name|ref2role
operator|.
name|get
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"role"
argument_list|,
literal|"Advisor"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|advisor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Advisor role "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"role"
argument_list|,
literal|"Advisor"
argument_list|)
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|info
argument_list|(
literal|"Advisor "
operator|+
operator|(
name|advisor
operator|.
name|hasName
argument_list|()
condition|?
name|advisor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
operator|+
literal|" ("
operator|+
name|externalId
operator|+
literal|")"
else|:
name|externalId
operator|)
operator|+
operator|(
name|advisor
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|?
literal|" created."
else|:
literal|" updated."
operator|)
argument_list|)
expr_stmt|;
name|Element
name|updateStudentsEl
init|=
name|element
operator|.
name|element
argument_list|(
literal|"updateStudents"
argument_list|)
decl_stmt|;
if|if
condition|(
name|updateStudentsEl
operator|!=
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|advisor
operator|.
name|getStudents
argument_list|()
control|)
name|students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|updateStudentsEl
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|studentEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|extId
init|=
name|studentEl
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"A student has no external id."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|students
operator|.
name|remove
argument_list|(
name|extId
argument_list|)
operator|!=
literal|null
condition|)
continue|continue;
name|Student
name|student
init|=
name|id2student
operator|.
name|get
argument_list|(
name|extId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student "
operator|+
name|extId
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|advisor
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAdvisors
argument_list|()
operator|.
name|add
argument_list|(
name|advisor
argument_list|)
expr_stmt|;
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Student
name|student
range|:
name|students
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAdvisors
argument_list|()
operator|.
name|remove
argument_list|(
name|advisor
argument_list|)
expr_stmt|;
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|advisor
operator|.
name|getStudents
argument_list|()
operator|.
name|removeAll
argument_list|(
name|students
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|advisor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incremental
condition|)
for|for
control|(
name|Advisor
name|advisor
range|:
name|id2advisor
operator|.
name|values
argument_list|()
control|)
block|{
name|info
argument_list|(
literal|"Advisor "
operator|+
operator|(
name|advisor
operator|.
name|hasName
argument_list|()
condition|?
name|advisor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
operator|+
literal|" ("
operator|+
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|")"
else|:
name|advisor
operator|.
name|getExternalUniqueId
argument_list|()
operator|)
operator|+
literal|" deleted."
argument_list|)
expr_stmt|;
if|if
condition|(
name|advisor
operator|.
name|getStudents
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Student
name|student
range|:
name|advisor
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|studentIds
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAdvisors
argument_list|()
operator|.
name|remove
argument_list|(
name|advisor
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|advisor
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|studentIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|StudentSectioningQueue
operator|.
name|studentChanged
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentIds
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

