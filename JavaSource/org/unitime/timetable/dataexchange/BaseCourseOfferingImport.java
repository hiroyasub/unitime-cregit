begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*   * UniTime 3.1 (University Course Timetabling& Student Sectioning Application)  * Copyright (C) 2008-2009, UniTime LLC  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|FlushMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|impl
operator|.
name|SessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOfferingReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ItypeDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Staff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternDays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
operator|.
name|MakeAssignmentsForClassEvents
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|CalendarUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|InstrOfferingPermIdGenerator
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BaseCourseOfferingImport
extends|extends
name|EventRelatedImports
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|existingInstructionalOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|existingCourseOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|existingClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|SubjectArea
argument_list|>
name|subjectAreas
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SubjectArea
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
name|timePatterns
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ItypeDesc
argument_list|>
name|itypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ItypeDesc
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ItypeDesc
argument_list|>
name|itypesBySisRef
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ItypeDesc
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
name|DistributionType
name|meetsWithType
init|=
literal|null
decl_stmt|;
specifier|protected
name|DistributionType
name|canShareRoomType
init|=
literal|null
decl_stmt|;
name|boolean
name|useMeetsWithElement
init|=
literal|false
decl_stmt|;
name|boolean
name|useCanShareRoomElement
init|=
literal|false
decl_stmt|;
name|boolean
name|incremental
init|=
literal|false
decl_stmt|;
name|PreferenceLevel
name|requiredPrefLevel
init|=
literal|null
decl_stmt|;
name|MakeAssignmentsForClassEvents
name|assignmentHelper
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|rootElementName
decl_stmt|;
name|int
name|changeCount
decl_stmt|;
specifier|protected
name|boolean
name|courseNumbersMustBeUnique
decl_stmt|;
specifier|public
name|BaseCourseOfferingImport
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|changeCount
operator|=
literal|0
expr_stmt|;
name|String
name|courseNumbersMustBeUniqueStr
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.courseNumber.unique"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|courseNumbersMustBeUnique
operator|=
name|courseNumbersMustBeUniqueStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
throws|throws
name|Exception
block|{
name|initializeTrimLeadingZeros
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|rootElement
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|rootElementName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a Course Offerings load file."
argument_list|)
throw|;
block|}
name|beginTransaction
argument_list|()
expr_stmt|;
name|incremental
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|incremental
condition|)
name|info
argument_list|(
literal|"Incremental mode."
argument_list|)
expr_stmt|;
name|initializeLoad
argument_list|(
name|rootElement
argument_list|,
name|rootElementName
argument_list|)
expr_stmt|;
name|preLoadAction
argument_list|()
expr_stmt|;
name|loadOfferings
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|incremental
condition|)
block|{
name|deleteUnmatchedInstructionalOfferings
argument_list|()
expr_stmt|;
name|deleteUnmatchedCourseOfferings
argument_list|()
expr_stmt|;
block|}
name|deleteUnmatchedClasses
argument_list|()
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|postLoadAction
argument_list|()
expr_stmt|;
block|}
name|addNote
argument_list|(
literal|"Records Changed: "
operator|+
name|changeCount
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reportMissingLocations
argument_list|()
expr_stmt|;
name|mailLoadResults
argument_list|()
expr_stmt|;
block|}
comment|// If a setup action needs to take place before the data is loaded override this method
specifier|protected
specifier|abstract
name|void
name|preLoadAction
parameter_list|()
function_decl|;
comment|// If a post load action needs to take place before the data is loaded override this method
specifier|protected
specifier|abstract
name|void
name|postLoadAction
parameter_list|()
function_decl|;
specifier|protected
name|void
name|loadOfferings
parameter_list|(
name|Element
name|rootElement
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|elementOffering
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|addNote
argument_list|(
literal|"Not Loading 'offering' Error:  "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|addNote
argument_list|(
literal|"\t "
operator|+
name|element
operator|.
name|asXML
argument_list|()
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|elementOffering
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|offeringElementName
init|=
literal|"offering"
decl_stmt|;
if|if
condition|(
operator|!
name|element
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|offeringElementName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expecting to find an '"
operator|+
name|offeringElementName
operator|+
literal|"' at this level, instead found '"
operator|+
name|element
operator|.
name|getName
argument_list|()
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|String
name|externalId
init|=
name|getOptionalStringAttribute
argument_list|(
name|element
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|action
init|=
name|getOptionalStringAttribute
argument_list|(
name|element
argument_list|,
literal|"action"
argument_list|)
decl_stmt|;
name|InstructionalOffering
name|io
init|=
literal|null
decl_stmt|;
name|boolean
name|existingIo
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
block|{
name|io
operator|=
name|findInstrOffrForExternalId
argument_list|(
name|externalId
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|io
operator|!=
literal|null
condition|)
block|{
name|existingIo
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|ImportCourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|==
literal|null
operator|||
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected an 'offering' to have at least one course."
argument_list|)
throw|;
block|}
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ImportCourseOffering
name|ico
init|=
operator|(
name|ImportCourseOffering
operator|)
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CourseOffering
name|co
init|=
name|ico
operator|.
name|getCourseOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|existingCourseOffering
init|=
name|findExistingCourseOffering
argument_list|(
name|co
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCourseOffering
operator|==
literal|null
condition|)
block|{
name|io
operator|=
operator|new
name|InstructionalOffering
argument_list|()
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|io
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|io
operator|=
name|existingCourseOffering
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
name|existingIo
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|HashSet
argument_list|<
name|InstructionalOffering
argument_list|>
name|possibleOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ImportCourseOffering
argument_list|>
name|coIt
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ImportCourseOffering
name|ico
init|=
operator|(
name|ImportCourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|ico
operator|.
name|getCourseOffering
argument_list|()
decl_stmt|;
name|CourseOffering
name|existingCourseOffering
init|=
name|findExistingCourseOffering
argument_list|(
name|co
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingCourseOffering
operator|!=
literal|null
condition|)
block|{
name|possibleOfferings
operator|.
name|add
argument_list|(
name|existingCourseOffering
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|possibleOfferings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|io
operator|=
operator|new
name|InstructionalOffering
argument_list|()
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|io
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|possibleOfferings
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|io
operator|=
operator|(
name|InstructionalOffering
operator|)
name|possibleOfferings
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|existingIo
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|control
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ImportCourseOffering
argument_list|>
name|coIt
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ImportCourseOffering
name|ico
init|=
operator|(
name|ImportCourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|ico
operator|.
name|getCourseOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|control
operator|=
name|co
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|control
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected an 'offering' to have a controlling course."
argument_list|)
throw|;
block|}
name|InstructionalOffering
name|offeringForControllingCourse
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstructionalOffering
argument_list|>
name|ioIt
init|=
name|possibleOfferings
operator|.
name|iterator
argument_list|()
init|;
name|ioIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|possibleIntructionalOffering
init|=
operator|(
name|InstructionalOffering
operator|)
name|ioIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameCourseOffering
argument_list|(
name|possibleIntructionalOffering
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|control
argument_list|)
condition|)
block|{
name|offeringForControllingCourse
operator|=
name|possibleIntructionalOffering
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|offeringForControllingCourse
operator|!=
literal|null
condition|)
block|{
name|io
operator|=
name|offeringForControllingCourse
expr_stmt|;
name|possibleOfferings
operator|.
name|remove
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|existingIo
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstructionalOffering
argument_list|>
name|ioIt
init|=
name|possibleOfferings
operator|.
name|iterator
argument_list|()
init|;
name|ioIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|oldIo
init|=
operator|(
name|InstructionalOffering
operator|)
name|ioIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteInstructionalOffering
argument_list|(
name|oldIo
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|io
operator|=
operator|new
name|InstructionalOffering
argument_list|()
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|io
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstructionalOffering
argument_list|>
name|ioIt
init|=
name|possibleOfferings
operator|.
name|iterator
argument_list|()
init|;
name|ioIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|oldIo
init|=
operator|(
name|InstructionalOffering
operator|)
name|ioIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteInstructionalOffering
argument_list|(
name|oldIo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|externalId
operator|!=
literal|null
operator|&&
name|io
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|io
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|externalId
argument_list|)
condition|)
block|{
name|existingIo
operator|=
literal|false
expr_stmt|;
name|deleteInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|io
operator|=
operator|new
name|InstructionalOffering
argument_list|()
expr_stmt|;
name|io
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|io
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existingIo
operator|&&
name|action
operator|!=
literal|null
operator|&&
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"Deleted instructional offering: "
operator|+
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|deleteInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|changeCount
operator|++
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|existingIo
operator|&&
name|action
operator|!=
literal|null
operator|&&
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"delete"
argument_list|)
condition|)
block|{
return|return;
block|}
if|else if
condition|(
name|io
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|existingIo
condition|)
block|{
if|if
condition|(
operator|!
name|existingInstructionalOfferings
operator|.
name|remove
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"could not remove io uniqueid from existing"
argument_list|)
throw|;
block|}
name|action
operator|=
literal|"update"
expr_stmt|;
name|addNote
argument_list|(
literal|"Changes for instructional offering: "
operator|+
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|action
operator|=
literal|"insert"
expr_stmt|;
block|}
if|if
condition|(
name|doAddUpdate
argument_list|(
name|element
argument_list|,
name|io
argument_list|,
name|action
argument_list|)
operator|||
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert"
argument_list|)
condition|)
block|{
name|changeCount
operator|++
expr_stmt|;
if|if
condition|(
name|action
operator|.
name|equals
argument_list|(
literal|"insert"
argument_list|)
condition|)
block|{
name|clearNotes
argument_list|()
expr_stmt|;
name|addNote
argument_list|(
literal|"Added instructional offering: "
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|updateChangeList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
return|return;
block|}
block|}
specifier|protected
name|void
name|deleteUnmatchedInstructionalOfferings
parameter_list|()
block|{
if|if
condition|(
name|existingInstructionalOfferings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|deleteOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|deleteOfferings
operator|.
name|addAll
argument_list|(
name|existingInstructionalOfferings
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"Deleted Instructional Offerings that were not in the input file:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|ioIt
init|=
name|deleteOfferings
operator|.
name|iterator
argument_list|()
init|;
name|ioIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|uniqueId
init|=
operator|(
name|Long
operator|)
name|ioIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|unusedIo
init|=
name|findInstrOffrForUniqueId
argument_list|(
name|uniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|unusedIo
operator|!=
literal|null
condition|)
block|{
name|addNote
argument_list|(
literal|"\tdeleted: "
operator|+
name|unusedIo
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|deleteInstructionalOffering
argument_list|(
name|unusedIo
argument_list|)
expr_stmt|;
name|changeCount
operator|++
expr_stmt|;
block|}
block|}
name|flushIfNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteUnmatchedCourseOfferings
parameter_list|()
block|{
if|if
condition|(
name|existingCourseOfferings
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|deleteOfferings
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|deleteOfferings
operator|.
name|addAll
argument_list|(
name|existingCourseOfferings
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"Deleted Course Offerings that were not in the input file:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|coIt
init|=
name|deleteOfferings
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|uniqueId
init|=
operator|(
name|Long
operator|)
name|coIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|unusedCo
init|=
name|findCourseOffrForUniqueId
argument_list|(
name|uniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|unusedCo
operator|!=
literal|null
condition|)
block|{
name|addNote
argument_list|(
literal|"\tDeleted: "
operator|+
name|unusedCo
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|deleteCourseOffering
argument_list|(
name|unusedCo
argument_list|)
expr_stmt|;
name|changeCount
operator|++
expr_stmt|;
block|}
block|}
name|flushIfNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|deleteUnmatchedClasses
parameter_list|()
block|{
if|if
condition|(
name|existingClasses
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HashSet
argument_list|<
name|Long
argument_list|>
name|deleteClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|deleteClasses
operator|.
name|addAll
argument_list|(
name|existingClasses
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"Deleted Classes that were not in the input file:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|cIt
init|=
name|deleteClasses
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Long
name|uniqueId
init|=
operator|(
name|Long
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class_
name|unusedC
init|=
name|findClassForUniqueId
argument_list|(
name|uniqueId
argument_list|)
decl_stmt|;
if|if
condition|(
name|unusedC
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|incremental
condition|)
block|{
try|try
block|{
if|if
condition|(
name|existingInstructionalOfferings
operator|.
name|contains
argument_list|(
name|unusedC
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|||
name|existingCourseOfferings
operator|.
name|contains
argument_list|(
name|unusedC
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
block|}
block|}
name|addNote
argument_list|(
literal|"\tDeleted: "
operator|+
name|unusedC
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|deleteClass
argument_list|(
name|unusedC
argument_list|)
expr_stmt|;
name|changeCount
operator|++
expr_stmt|;
block|}
block|}
name|flushIfNeeded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeLoad
parameter_list|(
name|Element
name|rootElement
parameter_list|,
name|String
name|rootElementName
parameter_list|)
throws|throws
name|Exception
block|{
name|initializeDateTimeFormats
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
name|initializeSessionData
argument_list|(
name|rootElement
argument_list|,
name|rootElementName
argument_list|)
expr_stmt|;
name|initializeMeetsWith
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
name|initializeCanShareRoom
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
name|initializeAssignmentHelper
argument_list|()
expr_stmt|;
name|loadSetupData
argument_list|()
expr_stmt|;
name|logXmlFileCreateInformation
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|logXmlFileCreateInformation
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
name|String
name|created
init|=
name|getOptionalStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"created"
argument_list|)
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|addNote
argument_list|(
literal|"Loading offerings XML file created on: "
operator|+
name|created
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|session
argument_list|,
name|created
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|updateChangeList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeAssignmentHelper
parameter_list|()
block|{
name|assignmentHelper
operator|=
operator|new
name|MakeAssignmentsForClassEvents
argument_list|(
name|session
argument_list|,
name|getHibSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|initializeMeetsWith
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
name|Boolean
name|useMeetsWith
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"useMeetsWith"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useMeetsWith
operator|!=
literal|null
operator|&&
name|useMeetsWith
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|useMeetsWithElement
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeCanShareRoom
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
name|Boolean
name|useCanShareRoom
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"useCanShareRoom"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useCanShareRoom
operator|!=
literal|null
operator|&&
name|useCanShareRoom
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|useCanShareRoomElement
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeSessionData
parameter_list|(
name|Element
name|rootElement
parameter_list|,
name|String
name|rootElementName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|campus
init|=
name|getRequiredStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"campus"
argument_list|,
name|rootElementName
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|getRequiredStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"year"
argument_list|,
name|rootElementName
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|getRequiredStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"term"
argument_list|,
name|rootElementName
argument_list|)
decl_stmt|;
name|session
operator|=
name|findSession
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|initializeDateTimeFormats
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
name|dateFormat
operator|=
name|getOptionalStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"dateFormat"
argument_list|)
expr_stmt|;
name|timeFormat
operator|=
name|getOptionalStringAttribute
argument_list|(
name|rootElement
argument_list|,
literal|"timeFormat"
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeFormat
operator|==
literal|null
condition|)
block|{
name|timeFormat
operator|=
literal|"HHmm"
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|initializeTrimLeadingZeros
parameter_list|()
block|{
name|String
name|trimLeadingZeros
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.data.exchange.trim.externalId"
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
if|if
condition|(
name|trimLeadingZeros
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
block|{
name|trimLeadingZerosFromExternalId
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|loadSetupData
parameter_list|()
throws|throws
name|Exception
block|{
name|loadItypes
argument_list|()
expr_stmt|;
name|loadSubjectAreas
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loadTimePatterns
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loadExistingInstructionalOfferings
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loadExistingCourseOfferings
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loadExistingClasses
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|loadRequiredPrefLevel
argument_list|()
expr_stmt|;
name|loadMeetsWithDistributionType
argument_list|()
expr_stmt|;
name|loadCanShareRoomDistributionType
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadTimePatterns
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|patterns
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|patterns
operator|=
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct tp from TimePattern as tp where tp.session.uniqueId=:sessionId and ( tp.type = :standard or tp.type = :evening )"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"standard"
argument_list|,
name|TimePattern
operator|.
name|sTypeStandard
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"evening"
argument_list|,
name|TimePattern
operator|.
name|sTypeEvening
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|tpIt
init|=
name|patterns
operator|.
name|iterator
argument_list|()
init|;
name|tpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePattern
name|tp
init|=
operator|(
name|TimePattern
operator|)
name|tpIt
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|dIt
init|=
name|tp
operator|.
name|getDays
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternDays
name|tpd
init|=
operator|(
name|TimePatternDays
operator|)
name|dIt
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|timesIt
init|=
name|tp
operator|.
name|getTimes
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|timesIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePatternTime
name|tpt
init|=
operator|(
name|TimePatternTime
operator|)
name|timesIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|timePatterns
operator|.
name|put
argument_list|(
operator|(
name|tpd
operator|.
name|getDayCode
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"x"
operator|+
name|tp
operator|.
name|getMinPerMtg
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"x"
operator|+
name|tpt
operator|.
name|getStartSlot
argument_list|()
operator|)
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|isSameCourseOffering
parameter_list|(
name|CourseOffering
name|originalCourseOffering
parameter_list|,
name|CourseOffering
name|newCourseOffering
parameter_list|)
block|{
name|boolean
name|isSame
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|originalCourseOffering
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|originalCourseOffering
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|newCourseOffering
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|isSame
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|courseNumbersMustBeUnique
condition|)
block|{
if|if
condition|(
name|originalCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|newCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|originalCourseOffering
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|newCourseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|isSame
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|originalCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|newCourseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|&&
name|originalCourseOffering
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|newCourseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
operator|&&
name|originalCourseOffering
operator|.
name|getTitle
argument_list|()
operator|.
name|equals
argument_list|(
name|newCourseOffering
operator|.
name|getTitle
argument_list|()
argument_list|)
condition|)
block|{
name|isSame
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|isSame
operator|)
return|;
block|}
specifier|private
name|boolean
name|isSameCreditConfig
parameter_list|(
name|CourseCreditUnitConfig
name|originalCourseCreditUnitConfig
parameter_list|,
name|CourseCreditUnitConfig
name|courseCreditUnitConfig
parameter_list|)
block|{
name|boolean
name|different
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|originalCourseCreditUnitConfig
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
operator|||
name|courseCreditUnitConfig
operator|.
name|getCreditFormat
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|originalCourseCreditUnitConfig
operator|.
name|getCreditFormat
argument_list|()
operator|.
name|equals
argument_list|(
name|courseCreditUnitConfig
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|originalCourseCreditUnitConfig
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseCreditUnitConfig
operator|.
name|getCreditType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|originalCourseCreditUnitConfig
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courseCreditUnitConfig
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|originalCourseCreditUnitConfig
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|originalCourseCreditUnitConfig
decl_stmt|;
name|FixedCreditUnitConfig
name|newFcuc
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|courseCreditUnitConfig
decl_stmt|;
if|if
condition|(
operator|!
name|fcuc
operator|.
name|getFixedUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|newFcuc
operator|.
name|getFixedUnits
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|originalCourseCreditUnitConfig
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|vrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|originalCourseCreditUnitConfig
decl_stmt|;
name|VariableRangeCreditUnitConfig
name|newVrcuc
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|courseCreditUnitConfig
decl_stmt|;
if|if
condition|(
operator|!
name|vrcuc
operator|.
name|getMinUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|newVrcuc
operator|.
name|getMinUnits
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|vrcuc
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|newVrcuc
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|vrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|.
name|equals
argument_list|(
name|newVrcuc
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|originalCourseCreditUnitConfig
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|vfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|originalCourseCreditUnitConfig
decl_stmt|;
name|VariableFixedCreditUnitConfig
name|newVfcuc
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|courseCreditUnitConfig
decl_stmt|;
if|if
condition|(
operator|!
name|vfcuc
operator|.
name|getMinUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|newVfcuc
operator|.
name|getMinUnits
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|vfcuc
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|equals
argument_list|(
name|newVfcuc
operator|.
name|getMaxUnits
argument_list|()
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|different
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|different
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|true
operator|)
return|;
block|}
block|}
specifier|private
name|boolean
name|isSameMeeting
parameter_list|(
name|Meeting
name|originalMeeting
parameter_list|,
name|Meeting
name|newMeeting
parameter_list|)
block|{
name|boolean
name|isSame
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|getDateString
argument_list|(
name|originalMeeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|getDateString
argument_list|(
name|newMeeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
operator|&&
operator|(
operator|(
name|originalMeeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|!=
literal|null
operator|&&
name|newMeeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|!=
literal|null
operator|&&
name|originalMeeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|==
name|newMeeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|.
name|longValue
argument_list|()
operator|)
operator|||
operator|(
name|originalMeeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|==
literal|null
operator|&&
name|newMeeting
operator|.
name|getLocationPermanentId
argument_list|()
operator|==
literal|null
operator|)
operator|)
operator|&&
name|originalMeeting
operator|.
name|getStartOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|newMeeting
operator|.
name|getStartOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&&
name|originalMeeting
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|newMeeting
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&&
name|originalMeeting
operator|.
name|getStopOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|newMeeting
operator|.
name|getStopOffset
argument_list|()
operator|.
name|intValue
argument_list|()
operator|&&
name|originalMeeting
operator|.
name|getStopPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
operator|==
name|newMeeting
operator|.
name|getStopPeriod
argument_list|()
operator|.
name|intValue
argument_list|()
condition|)
block|{
name|isSame
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|(
name|isSame
operator|)
return|;
block|}
specifier|private
name|boolean
name|doAddUpdate
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getInstrOfferingPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|io
operator|.
name|generateInstrOfferingPermId
argument_list|()
expr_stmt|;
block|}
name|Boolean
name|offered
init|=
name|getRequiredBooleanAttribute
argument_list|(
name|element
argument_list|,
literal|"offered"
argument_list|,
literal|"offered"
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|isNotOffered
argument_list|()
operator|==
literal|null
operator|||
name|io
operator|.
name|isNotOffered
argument_list|()
operator|.
name|equals
argument_list|(
name|offered
argument_list|)
condition|)
block|{
name|io
operator|.
name|setNotOffered
argument_list|(
operator|new
name|Boolean
argument_list|(
operator|!
name|offered
operator|.
name|booleanValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\toffered status changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementDesignatorRequired
argument_list|(
name|element
argument_list|,
name|io
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tdesignator status changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementConsent
argument_list|(
name|element
argument_list|,
name|io
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconsent changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementCourse
argument_list|(
name|element
argument_list|,
name|io
argument_list|,
name|action
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tcourses changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementCourseCredit
argument_list|(
name|element
argument_list|,
name|io
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tcourse credit changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementInstrOffrConfig
argument_list|(
name|element
argument_list|,
name|io
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
operator|(
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert"
argument_list|)
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|io
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|DepartmentalInstructor
name|findDepartmentalInstructorWithExternalUniqueId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|Department
name|department
parameter_list|)
block|{
return|return
operator|(
name|DepartmentalInstructor
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct di from DepartmentalInstructor di where di.externalUniqueId=:externalId and di.department.uniqueId=:departmentId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|String
name|createPatternString
parameter_list|(
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|startDates
parameter_list|,
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|endDates
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Calendar
argument_list|>
name|startDateIt
init|=
name|startDates
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Calendar
argument_list|>
name|endDateIt
init|=
name|endDates
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|StringBuffer
name|patternString
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Calendar
name|lastDate
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|startDateIt
operator|.
name|hasNext
argument_list|()
operator|&&
name|endDateIt
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Calendar
name|startDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|startDate
operator|.
name|setTime
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|startDateIt
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|endDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endDate
operator|.
name|setTime
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|endDateIt
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastDate
operator|!=
literal|null
condition|)
block|{
name|lastDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|getCalendarDateString
argument_list|(
name|lastDate
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getCalendarDateString
argument_list|(
name|startDate
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|patternString
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|lastDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|lastDate
operator|=
name|endDate
expr_stmt|;
while|while
condition|(
name|getCalendarDateString
argument_list|(
name|startDate
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getCalendarDateString
argument_list|(
name|endDate
argument_list|)
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|patternString
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|startDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|patternString
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
specifier|private
name|DatePattern
name|findDatePattern
parameter_list|(
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|startDates
parameter_list|,
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|endDates
parameter_list|,
name|Class_
name|c
parameter_list|)
block|{
comment|//Calculate offset from start of session
name|Calendar
name|firstDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|firstDate
operator|.
name|setTime
argument_list|(
operator|(
operator|(
name|Calendar
operator|)
name|startDates
operator|.
name|firstElement
argument_list|()
operator|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|sessionStartDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|sessionStartDate
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|getCalendarDateString
argument_list|(
name|firstDate
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getCalendarDateString
argument_list|(
name|sessionStartDate
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
while|while
condition|(
name|getCalendarDateString
argument_list|(
name|firstDate
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getCalendarDateString
argument_list|(
name|sessionStartDate
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|offset
operator|++
expr_stmt|;
name|firstDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|getCalendarDateString
argument_list|(
name|firstDate
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getCalendarDateString
argument_list|(
name|sessionStartDate
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
block|{
while|while
condition|(
name|getCalendarDateString
argument_list|(
name|firstDate
argument_list|)
operator|.
name|compareTo
argument_list|(
name|getCalendarDateString
argument_list|(
name|sessionStartDate
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
block|{
name|offset
operator|--
expr_stmt|;
name|firstDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|pattern
init|=
name|createPatternString
argument_list|(
name|startDates
argument_list|,
name|endDates
argument_list|)
decl_stmt|;
name|DatePattern
name|dp
init|=
literal|null
decl_stmt|;
name|List
name|patterns
init|=
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DatePattern as d where d.session.uniqueId = :sessionId and d.pattern = :pattern and d.offset = :offset and d.type = (select min(dd.type) from DatePattern as dd where dd.session.uniqueId = :sessionId and dd.pattern = :pattern and dd.offset = :offset)"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"pattern"
argument_list|,
name|pattern
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offset"
argument_list|,
name|offset
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|patterns
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dp
operator|=
operator|(
name|DatePattern
operator|)
name|patterns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dp
operator|=
operator|new
name|DatePattern
argument_list|()
expr_stmt|;
name|dp
operator|.
name|setName
argument_list|(
literal|"import - "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOffset
argument_list|(
operator|new
name|Integer
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setType
argument_list|(
operator|new
name|Integer
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setVisible
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dp
operator|.
name|isDefault
argument_list|()
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|dp
operator|)
return|;
block|}
block|}
specifier|protected
name|ArrayList
argument_list|<
name|ImportCourseOffering
argument_list|>
name|getCourses
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|ImportCourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|ImportCourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|elementName
init|=
literal|"course"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|courseElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalUid
init|=
name|getOptionalStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Boolean
name|controlling
init|=
name|getRequiredBooleanAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"controlling"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|getRequiredStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"courseNbr"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|scheduleBookNote
init|=
name|getOptionalStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"scheduleBookNote"
argument_list|)
decl_stmt|;
name|String
name|subjAbbv
init|=
name|getRequiredStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"subject"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|SubjectArea
name|subjectArea
init|=
name|subjectAreas
operator|.
name|get
argument_list|(
name|subjAbbv
argument_list|)
decl_stmt|;
name|String
name|title
init|=
name|getOptionalStringAttribute
argument_list|(
name|courseElement
argument_list|,
literal|"title"
argument_list|)
decl_stmt|;
name|CourseOffering
name|newCourseOffering
init|=
operator|new
name|CourseOffering
argument_list|()
decl_stmt|;
name|newCourseOffering
operator|.
name|setSubjectArea
argument_list|(
name|subjectArea
argument_list|)
expr_stmt|;
if|if
condition|(
name|courseNbr
operator|!=
literal|null
operator|&&
name|courseNbr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newCourseOffering
operator|.
name|setCourseNbr
argument_list|(
name|courseNbr
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|externalUid
operator|!=
literal|null
operator|&&
name|externalUid
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newCourseOffering
operator|.
name|setExternalUniqueId
argument_list|(
name|externalUid
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|newCourseOffering
operator|.
name|setIsControl
argument_list|(
name|controlling
argument_list|)
expr_stmt|;
if|if
condition|(
name|scheduleBookNote
operator|!=
literal|null
operator|&&
name|scheduleBookNote
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newCourseOffering
operator|.
name|setScheduleBookNote
argument_list|(
name|scheduleBookNote
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|title
operator|!=
literal|null
operator|&&
name|title
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|newCourseOffering
operator|.
name|setTitle
argument_list|(
name|title
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ImportCourseOffering
name|importcourseOffering
init|=
operator|new
name|ImportCourseOffering
argument_list|(
name|newCourseOffering
argument_list|,
name|courseElement
argument_list|)
decl_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|importcourseOffering
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"'course' element is required."
argument_list|)
throw|;
block|}
return|return
operator|(
name|courses
operator|)
return|;
block|}
specifier|private
name|String
name|getDateString
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
return|return
operator|(
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|)
return|;
block|}
specifier|private
name|String
name|getCalendarDateString
parameter_list|(
name|Calendar
name|calendar
parameter_list|)
block|{
return|return
operator|(
name|getDateString
argument_list|(
name|calendar
operator|.
name|getTime
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|Calendar
name|getCalendarForDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|.
name|length
argument_list|()
operator|<
literal|3
operator|||
name|date
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|int
name|index1
init|=
name|date
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|int
name|index2
init|=
name|date
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index2
operator|==
name|index1
condition|)
block|{
name|index2
operator|=
name|date
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|int
name|month
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|date
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|day
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|date
operator|.
name|substring
argument_list|(
name|index1
operator|+
literal|1
argument_list|,
name|index2
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|year
decl_stmt|;
if|if
condition|(
name|index2
operator|==
name|date
operator|.
name|length
argument_list|()
condition|)
block|{
name|year
operator|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|year
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|date
operator|.
name|substring
argument_list|(
name|index2
operator|+
literal|1
argument_list|,
name|date
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cal
operator|.
name|set
argument_list|(
name|year
argument_list|,
operator|(
name|month
operator|-
literal|1
operator|)
argument_list|,
name|day
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|cal
operator|)
return|;
block|}
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|>
name|elementDates
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|startDates
init|=
operator|new
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|endDates
init|=
operator|new
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|elementName
init|=
literal|"date"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|dateElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Calendar
name|startDate
init|=
literal|null
decl_stmt|;
name|Calendar
name|endDate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dateFormat
operator|==
literal|null
condition|)
block|{
name|startDate
operator|=
name|getCalendarForDate
argument_list|(
name|getRequiredStringAttribute
argument_list|(
name|dateElement
argument_list|,
literal|"startDate"
argument_list|,
name|elementName
argument_list|)
argument_list|)
expr_stmt|;
name|endDate
operator|=
name|getCalendarForDate
argument_list|(
name|getRequiredStringAttribute
argument_list|(
name|dateElement
argument_list|,
literal|"endDate"
argument_list|,
name|elementName
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
else|else
block|{
name|startDate
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|startDate
operator|.
name|setTime
argument_list|(
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|getRequiredStringAttribute
argument_list|(
name|dateElement
argument_list|,
literal|"startDate"
argument_list|,
name|elementName
argument_list|)
argument_list|,
name|dateFormat
argument_list|)
argument_list|)
expr_stmt|;
name|endDate
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|endDate
operator|.
name|setTime
argument_list|(
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|getRequiredStringAttribute
argument_list|(
name|dateElement
argument_list|,
literal|"endDate"
argument_list|,
name|elementName
argument_list|)
argument_list|,
name|dateFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|startDate
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"For element 'date' a 'startDate' is required, unable to parse given date"
argument_list|)
throw|;
block|}
if|if
condition|(
name|endDate
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"For element 'date' a 'endDate' is required, unable to parse given date"
argument_list|)
throw|;
block|}
if|if
condition|(
name|endDate
operator|.
name|before
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|endDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|startDates
operator|.
name|add
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|endDates
operator|.
name|add
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startDates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|>
name|dates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|dates
operator|.
name|put
argument_list|(
literal|"startDates"
argument_list|,
name|startDates
argument_list|)
expr_stmt|;
name|dates
operator|.
name|put
argument_list|(
literal|"endDates"
argument_list|,
name|endDates
argument_list|)
expr_stmt|;
return|return
operator|(
name|dates
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
specifier|private
name|TimeObject
name|elementTime
parameter_list|(
name|Element
name|element
parameter_list|)
throws|throws
name|Exception
block|{
name|TimeObject
name|meetingTime
init|=
literal|null
decl_stmt|;
name|String
name|elementName
init|=
literal|"time"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Element
name|timeElement
init|=
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|getRequiredStringAttribute
argument_list|(
name|timeElement
argument_list|,
literal|"startTime"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|getRequiredStringAttribute
argument_list|(
name|timeElement
argument_list|,
literal|"endTime"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|days
init|=
name|getRequiredStringAttribute
argument_list|(
name|timeElement
argument_list|,
literal|"days"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|meetingTime
operator|=
operator|new
name|TimeObject
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|days
argument_list|)
expr_stmt|;
if|if
condition|(
name|meetingTime
operator|.
name|getDays
argument_list|()
operator|==
literal|null
operator|||
name|meetingTime
operator|.
name|getDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|meetingTime
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
operator|(
name|meetingTime
operator|)
return|;
block|}
specifier|private
name|Vector
argument_list|<
name|Room
argument_list|>
name|elementRoom
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|<
name|Room
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|elementName
init|=
literal|"room"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|roomElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|building
init|=
name|getRequiredStringAttribute
argument_list|(
name|roomElement
argument_list|,
literal|"building"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|roomNbr
init|=
name|getRequiredStringAttribute
argument_list|(
name|roomElement
argument_list|,
literal|"roomNbr"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|getOptionalStringAttribute
argument_list|(
name|roomElement
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|Room
name|room
init|=
name|findRoom
argument_list|(
name|id
argument_list|,
name|building
argument_list|,
name|roomNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMissingLocation
argument_list|(
name|building
operator|+
literal|" "
operator|+
name|roomNbr
operator|+
literal|" - "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|rooms
operator|)
return|;
block|}
block|}
specifier|private
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|elementLocation
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
operator|new
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|elementName
init|=
literal|"location"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|roomElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|getRequiredStringAttribute
argument_list|(
name|roomElement
argument_list|,
literal|"name"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|NonUniversityLocation
name|location
init|=
name|findNonUniversityLocation
argument_list|(
name|name
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|locations
operator|.
name|add
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMissingLocation
argument_list|(
name|name
operator|+
literal|" - "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|addMissingLocation
argument_list|(
literal|"\tCould not find location '"
operator|+
name|name
operator|+
literal|"' not adding it to class '"
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
literal|null
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|locations
operator|)
return|;
block|}
block|}
specifier|private
name|boolean
name|elementMeetings
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|elementName
init|=
literal|"meeting"
decl_stmt|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
operator|new
name|Vector
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Calendar
name|sessionStartDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|sessionStartDate
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|sessionClassesEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|sessionClassesEndDate
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getExamBeginDate
argument_list|()
argument_list|)
expr_stmt|;
name|sessionClassesEndDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Calendar
name|sessionEndDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|sessionEndDate
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getSessionEndDateTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|meetingElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|startDateStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"startDate"
argument_list|)
decl_stmt|;
name|String
name|endDateStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"endDate"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|getRequiredStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"startTime"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|getRequiredStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"endTime"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|days
init|=
name|getRequiredStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"days"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|building
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"building"
argument_list|)
decl_stmt|;
name|String
name|roomNbr
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"room"
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|getOptionalStringAttribute
argument_list|(
name|meetingElement
argument_list|,
literal|"location"
argument_list|)
decl_stmt|;
name|Calendar
name|startDate
init|=
literal|null
decl_stmt|;
name|Calendar
name|endDate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|startDateStr
operator|==
literal|null
operator|&&
name|endDateStr
operator|==
literal|null
condition|)
block|{
name|startDate
operator|=
name|sessionStartDate
expr_stmt|;
name|endDate
operator|=
name|sessionClassesEndDate
expr_stmt|;
block|}
if|else if
condition|(
name|dateFormat
operator|!=
literal|null
condition|)
block|{
name|startDate
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|startDate
operator|.
name|setTime
argument_list|(
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|startDateStr
argument_list|,
name|dateFormat
argument_list|)
argument_list|)
expr_stmt|;
name|endDate
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|endDate
operator|.
name|setTime
argument_list|(
name|CalendarUtils
operator|.
name|getDate
argument_list|(
name|endDateStr
argument_list|,
name|dateFormat
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startDate
operator|=
name|getCalendarForDate
argument_list|(
name|startDateStr
argument_list|)
expr_stmt|;
name|endDate
operator|=
name|getCalendarForDate
argument_list|(
name|endDateStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endDate
operator|.
name|before
argument_list|(
name|startDate
argument_list|)
condition|)
block|{
name|endDate
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endDate
operator|.
name|equals
argument_list|(
name|sessionEndDate
argument_list|)
operator|||
operator|(
name|endDate
operator|.
name|before
argument_list|(
name|sessionEndDate
argument_list|)
operator|&&
name|endDate
operator|.
name|after
argument_list|(
name|sessionClassesEndDate
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|startDate
operator|.
name|before
argument_list|(
name|sessionClassesEndDate
argument_list|)
condition|)
block|{
name|endDate
operator|=
name|sessionClassesEndDate
expr_stmt|;
block|}
block|}
name|TimeObject
name|timeObject
init|=
operator|new
name|TimeObject
argument_list|(
name|startTime
argument_list|,
name|endTime
argument_list|,
name|days
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
operator|new
name|Vector
argument_list|<
name|Room
argument_list|>
argument_list|()
decl_stmt|;
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|nonUniversityLocations
init|=
operator|new
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|building
operator|!=
literal|null
operator|&&
name|roomNbr
operator|!=
literal|null
condition|)
block|{
name|Room
name|r
init|=
name|findRoom
argument_list|(
literal|null
argument_list|,
name|building
argument_list|,
name|roomNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|rooms
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMissingLocation
argument_list|(
name|building
operator|+
literal|" "
operator|+
name|roomNbr
operator|+
literal|" - "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
name|NonUniversityLocation
name|nul
init|=
name|findNonUniversityLocation
argument_list|(
name|location
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|nul
operator|!=
literal|null
condition|)
block|{
name|nonUniversityLocations
operator|.
name|add
argument_list|(
name|nul
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addMissingLocation
argument_list|(
name|location
operator|+
literal|" - "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|startDates
init|=
operator|new
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|()
decl_stmt|;
name|startDates
operator|.
name|add
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|Calendar
argument_list|>
name|endDates
init|=
operator|new
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|()
decl_stmt|;
name|endDates
operator|.
name|add
argument_list|(
name|endDate
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|m
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|startDate
operator|.
name|equals
argument_list|(
name|sessionStartDate
argument_list|)
operator|&&
operator|(
name|endDate
operator|.
name|equals
argument_list|(
name|sessionClassesEndDate
argument_list|)
operator|||
name|endDate
operator|.
name|equals
argument_list|(
name|sessionEndDate
argument_list|)
operator|)
condition|)
block|{
name|m
operator|=
name|getMeetings
argument_list|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|timeObject
argument_list|,
name|rooms
argument_list|,
name|nonUniversityLocations
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|=
name|getMeetings
argument_list|(
name|startDate
operator|.
name|getTime
argument_list|()
argument_list|,
name|endDate
operator|.
name|getTime
argument_list|()
argument_list|,
name|createPatternString
argument_list|(
name|startDates
argument_list|,
name|endDates
argument_list|)
argument_list|,
name|timeObject
argument_list|,
name|rooms
argument_list|,
name|nonUniversityLocations
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m
operator|!=
literal|null
operator|&&
operator|!
name|m
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|meetings
operator|.
name|addAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|changed
operator|=
name|addUpdateClassEvent
argument_list|(
name|c
argument_list|,
name|meetings
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|c
operator|.
name|setDatePattern
argument_list|(
name|assignmentHelper
operator|.
name|getDatePattern
argument_list|(
name|c
operator|.
name|getEvent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementInstructor
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|String
name|elementName
init|=
literal|"instructor"
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassInstructor
argument_list|>
name|existingInstructors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ClassInstructor
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|ciIt
init|=
name|c
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingInstructors
operator|.
name|put
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|ci
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|firstNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|middleNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lastNames
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|shares
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|leads
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|instructorElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|getRequiredStringAttribute
argument_list|(
name|instructorElement
argument_list|,
literal|"id"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|trimLeadingZerosFromExternalId
condition|)
block|{
try|try
block|{
name|Integer
name|num
init|=
operator|new
name|Integer
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|id
operator|=
name|num
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|firstNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|getOptionalStringAttribute
argument_list|(
name|instructorElement
argument_list|,
literal|"fname"
argument_list|)
argument_list|)
expr_stmt|;
name|middleNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|getOptionalStringAttribute
argument_list|(
name|instructorElement
argument_list|,
literal|"mname"
argument_list|)
argument_list|)
expr_stmt|;
name|lastNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|getOptionalStringAttribute
argument_list|(
name|instructorElement
argument_list|,
literal|"lname"
argument_list|)
argument_list|)
expr_stmt|;
name|Integer
name|share
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|instructorElement
argument_list|,
literal|"share"
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|share
operator|==
literal|null
condition|)
block|{
name|share
operator|=
operator|new
name|Integer
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|shares
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|share
argument_list|)
expr_stmt|;
name|Boolean
name|lead
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|instructorElement
argument_list|,
literal|"lead"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lead
operator|==
literal|null
condition|)
block|{
name|lead
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|leads
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|lead
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|ids
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|boolean
name|addNew
init|=
literal|false
decl_stmt|;
name|String
name|id
init|=
operator|(
name|String
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassInstructor
name|ci
init|=
name|existingInstructors
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
name|DepartmentalInstructor
name|di
init|=
name|findDepartmentalInstructorWithExternalUniqueId
argument_list|(
name|id
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|di
operator|==
literal|null
condition|)
block|{
name|di
operator|=
operator|new
name|DepartmentalInstructor
argument_list|()
expr_stmt|;
name|di
operator|.
name|setDepartment
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setExternalUniqueId
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastNames
operator|.
name|get
argument_list|(
name|id
argument_list|)
operator|==
literal|null
condition|)
block|{
name|Staff
name|staffData
init|=
name|findStaffMember
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|staffData
operator|!=
literal|null
condition|)
block|{
name|firstNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|staffData
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|middleNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|staffData
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|lastNames
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|staffData
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|di
operator|.
name|setFirstName
argument_list|(
name|firstNames
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|di
operator|.
name|setMiddleName
argument_list|(
name|middleNames
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|lastName
init|=
name|lastNames
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|di
operator|.
name|setLastName
argument_list|(
operator|(
name|lastName
operator|!=
literal|null
condition|?
name|lastName
else|:
literal|"Unknown Name"
operator|)
argument_list|)
expr_stmt|;
name|di
operator|.
name|setIgnoreToFar
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|di
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ci
operator|=
operator|new
name|ClassInstructor
argument_list|()
expr_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|addToclassInstructors
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|di
operator|.
name|addToclasses
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNew
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|existingInstructors
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|Integer
name|share
init|=
name|shares
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ci
operator|.
name|getPercentShare
argument_list|()
operator|.
name|equals
argument_list|(
name|share
argument_list|)
condition|)
block|{
name|ci
operator|.
name|setPercentShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|Boolean
name|lead
init|=
name|leads
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|.
name|isLead
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ci
operator|.
name|isLead
argument_list|()
operator|.
name|equals
argument_list|(
name|lead
argument_list|)
condition|)
block|{
name|ci
operator|.
name|setLead
argument_list|(
name|lead
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ci
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
operator|(
name|addNew
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|existingInstructors
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|ciIt
init|=
name|existingInstructors
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ciIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
operator|(
name|ClassInstructor
operator|)
name|ciIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteClassInstructor
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|Staff
name|findStaffMember
parameter_list|(
name|String
name|id
parameter_list|)
block|{
return|return
operator|(
name|Staff
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Staff s where s.externalUniqueId=:externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|elementCourseCredit
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|String
name|elementName
init|=
literal|"courseCredit"
decl_stmt|;
name|Element
name|credit
init|=
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|String
name|creditFormat
init|=
name|getRequiredStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"creditFormat"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|creditType
init|=
name|getRequiredStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"creditType"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|creditUnitType
init|=
name|getRequiredStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"creditUnitType"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|Boolean
name|fractionalIncrementsAllowed
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|credit
argument_list|,
literal|"fractionalCreditAllowed"
argument_list|)
decl_stmt|;
name|String
name|minCreditStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"fixedCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCreditStr
operator|==
literal|null
condition|)
block|{
name|minCreditStr
operator|=
name|getOptionalStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"minimumCredit"
argument_list|)
expr_stmt|;
block|}
name|Float
name|minCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|minCreditStr
operator|!=
literal|null
condition|)
block|{
name|minCredit
operator|=
operator|new
name|Float
argument_list|(
name|minCreditStr
argument_list|)
expr_stmt|;
block|}
name|String
name|maxCreditStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"maximumCredit"
argument_list|)
decl_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxCreditStr
operator|!=
literal|null
condition|)
block|{
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCreditStr
argument_list|)
expr_stmt|;
block|}
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|creditFormat
argument_list|,
name|creditType
argument_list|,
name|creditUnitType
argument_list|,
name|minCredit
argument_list|,
name|maxCredit
argument_list|,
name|fractionalIncrementsAllowed
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getCredit
argument_list|()
operator|==
literal|null
operator|&&
name|ccuc
operator|!=
literal|null
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tadded offering credit"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|io
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isSameCreditConfig
argument_list|(
name|io
operator|.
name|getCredit
argument_list|()
argument_list|,
name|ccuc
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\toffering credit values changed "
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|io
operator|.
name|setCredit
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|io
operator|.
name|getCredit
argument_list|()
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementSubpartCredit
parameter_list|(
name|Element
name|element
parameter_list|,
name|SchedulingSubpart
name|ss
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|String
name|elementName
init|=
literal|"subpartCredit"
decl_stmt|;
name|Element
name|credit
init|=
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|String
name|creditFormat
init|=
name|getRequiredStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"creditFormat"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|creditType
init|=
name|getRequiredStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"creditType"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|creditUnitType
init|=
name|getRequiredStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"creditUnitType"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|Boolean
name|fractionalIncrementsAllowed
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|credit
argument_list|,
literal|"fractionalCreditAllowed"
argument_list|)
decl_stmt|;
name|String
name|minCreditStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"fixedCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|minCreditStr
operator|==
literal|null
condition|)
block|{
name|minCreditStr
operator|=
name|getOptionalStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"minimumCredit"
argument_list|)
expr_stmt|;
block|}
name|Float
name|minCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|minCreditStr
operator|!=
literal|null
condition|)
block|{
name|minCredit
operator|=
operator|new
name|Float
argument_list|(
name|minCreditStr
argument_list|)
expr_stmt|;
block|}
name|String
name|maxCreditStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|credit
argument_list|,
literal|"maximumCredit"
argument_list|)
decl_stmt|;
name|Float
name|maxCredit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxCreditStr
operator|!=
literal|null
condition|)
block|{
name|maxCredit
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxCreditStr
argument_list|)
expr_stmt|;
block|}
name|CourseCreditUnitConfig
name|ccuc
init|=
name|CourseCreditUnitConfig
operator|.
name|createCreditUnitConfigOfFormat
argument_list|(
name|creditFormat
argument_list|,
name|creditType
argument_list|,
name|creditUnitType
argument_list|,
name|minCredit
argument_list|,
name|maxCredit
argument_list|,
name|fractionalIncrementsAllowed
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|==
literal|null
operator|&&
name|ccuc
operator|!=
literal|null
condition|)
block|{
name|addNote
argument_list|(
literal|"\tadded subpart credit"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|ss
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isSameCreditConfig
argument_list|(
name|ss
operator|.
name|getCredit
argument_list|()
argument_list|,
name|ccuc
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tsubpart credit values changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|ss
operator|.
name|setCredit
argument_list|(
name|ccuc
argument_list|)
expr_stmt|;
name|ccuc
operator|.
name|setOwner
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ss
operator|.
name|getCredit
argument_list|()
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|ss
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ss
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|handleDistributionPrefElement
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|,
name|String
name|elementName
parameter_list|,
name|DistributionType
name|distributionType
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Vector
argument_list|<
name|DistributionPref
argument_list|>
name|existingDistPrefs
init|=
operator|new
name|Vector
argument_list|<
name|DistributionPref
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getDistributionPreferences
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|dpIt
init|=
name|c
operator|.
name|getDistributionPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|dpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|dpIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|.
name|getDistributionType
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|distributionType
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|existingDistPrefs
operator|.
name|add
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Vector
argument_list|<
name|String
argument_list|>
name|classIds
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|classIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|distPrefElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|getRequiredStringAttribute
argument_list|(
name|distPrefElement
argument_list|,
literal|"id"
argument_list|,
name|elementName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|existingDistPrefs
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|existingDistPrefs
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|addNote
argument_list|(
literal|"\tMultiple "
operator|+
name|distributionType
operator|.
name|getLabel
argument_list|()
operator|+
literal|" distribution preferences exist -- deleted them"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|dpIt
init|=
name|existingDistPrefs
operator|.
name|iterator
argument_list|()
init|;
name|dpIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|dpIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|addNote
argument_list|(
literal|"\t\tdeleted '"
operator|+
name|dp
operator|.
name|preferenceText
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|deleteDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|classIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|addDistributionPref
argument_list|(
name|classIds
argument_list|,
name|c
argument_list|,
name|distributionType
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|DistributionPref
name|dp
init|=
operator|(
name|DistributionPref
operator|)
name|existingDistPrefs
operator|.
name|firstElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|classIds
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|isMatchingDistPref
argument_list|(
name|dp
argument_list|,
name|classIds
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|deleteDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|addDistributionPref
argument_list|(
name|classIds
argument_list|,
name|c
argument_list|,
name|distributionType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|addNote
argument_list|(
literal|"Class  "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" is no longer a "
operator|+
name|distributionType
operator|.
name|getLabel
argument_list|()
operator|+
literal|", removed"
operator|+
name|dp
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|deleteDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementCanShareRoom
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|useCanShareRoomElement
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
return|return
operator|(
name|handleDistributionPrefElement
argument_list|(
name|element
argument_list|,
name|c
argument_list|,
literal|"canShareRoom"
argument_list|,
name|canShareRoomType
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementMeetsWith
parameter_list|(
name|Element
name|element
parameter_list|,
name|Class_
name|c
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|useMeetsWithElement
condition|)
block|{
return|return
operator|(
literal|false
operator|)
return|;
block|}
return|return
operator|(
name|handleDistributionPrefElement
argument_list|(
name|element
argument_list|,
name|c
argument_list|,
literal|"meetsWith"
argument_list|,
name|meetsWithType
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|isMatchingDistPref
parameter_list|(
name|DistributionPref
name|dp
parameter_list|,
name|Vector
argument_list|<
name|String
argument_list|>
name|classExternalIds
parameter_list|)
block|{
name|boolean
name|isSame
init|=
literal|false
decl_stmt|;
name|DistributionObject
name|distObj
init|=
literal|null
decl_stmt|;
name|String
name|cei
init|=
literal|null
decl_stmt|;
name|boolean
name|allFound
init|=
literal|true
decl_stmt|;
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
name|existingDistObjs
init|=
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
decl_stmt|;
name|existingDistObjs
operator|.
name|addAll
argument_list|(
name|dp
operator|.
name|getDistributionObjects
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|ceiIt
init|=
name|classExternalIds
operator|.
name|iterator
argument_list|()
init|;
name|ceiIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|cei
operator|=
operator|(
name|String
operator|)
name|ceiIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|doIt
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|doIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|distObj
operator|=
operator|(
name|DistributionObject
operator|)
name|doIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|distObj
operator|.
name|getPrefGroup
argument_list|()
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|distObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|cei
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|existingDistObjs
operator|.
name|remove
argument_list|(
name|distObj
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|allFound
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|allFound
operator|&&
name|existingDistObjs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|isSame
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|(
name|isSame
operator|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|handleCustomCourseChildElements
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|Element
name|courseOfferingElement
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|private
name|boolean
name|elementCourse
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|,
name|String
name|action
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Checking Offering:  "
operator|+
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|ImportCourseOffering
argument_list|>
name|courses
init|=
name|getCourses
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"insert"
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ImportCourseOffering
argument_list|>
name|it
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ImportCourseOffering
name|ico
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|co
init|=
name|ico
operator|.
name|getCourseOffering
argument_list|()
decl_stmt|;
name|co
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|==
literal|null
condition|)
block|{
name|co
operator|.
name|setNbrExpectedStudents
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|co
operator|.
name|getDemand
argument_list|()
operator|==
literal|null
condition|)
block|{
name|co
operator|.
name|setDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|io
operator|.
name|addTocourseOfferings
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|co
operator|.
name|setPermId
argument_list|(
name|InstrOfferingPermIdGenerator
operator|.
name|getGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|(
name|SessionImpl
operator|)
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|co
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tadded course: "
operator|+
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|co
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|co
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|co
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|handleCustomCourseChildElements
argument_list|(
name|co
argument_list|,
name|ico
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|CourseOffering
name|nco
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|oco
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ImportCourseOffering
argument_list|>
name|nit
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|nit
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ImportCourseOffering
name|ico
init|=
operator|(
name|ImportCourseOffering
operator|)
name|nit
operator|.
name|next
argument_list|()
decl_stmt|;
name|nco
operator|=
name|ico
operator|.
name|getCourseOffering
argument_list|()
expr_stmt|;
name|boolean
name|exists
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|oit
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|oit
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|oco
operator|=
operator|(
name|CourseOffering
operator|)
name|oit
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSameCourseOffering
argument_list|(
name|oco
argument_list|,
name|nco
argument_list|)
condition|)
block|{
name|exists
operator|=
literal|true
expr_stmt|;
name|existingCourseOfferings
operator|.
name|remove
argument_list|(
name|oco
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|oco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|oco
operator|.
name|setSubjectArea
argument_list|(
name|nco
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tchanged subject area: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oco
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|equals
argument_list|(
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
name|oco
operator|.
name|setCourseNbr
argument_list|(
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tchanged course number: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|oco
operator|.
name|isIsControl
argument_list|()
operator|.
name|equals
argument_list|(
name|nco
operator|.
name|getIsControl
argument_list|()
argument_list|)
condition|)
block|{
name|oco
operator|.
name|setIsControl
argument_list|(
name|nco
operator|.
name|getIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tchanged control flag: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|oco
operator|.
name|getScheduleBookNote
argument_list|()
operator|==
literal|null
operator|&&
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|oco
operator|.
name|setScheduleBookNote
argument_list|(
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tadded schedule book note: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|oco
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
operator|==
literal|null
operator|||
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|oco
operator|.
name|setScheduleBookNote
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tremoved schedule book note: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|oco
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
operator|&&
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|oco
operator|.
name|getScheduleBookNote
argument_list|()
operator|.
name|equals
argument_list|(
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
condition|)
block|{
name|oco
operator|.
name|setScheduleBookNote
argument_list|(
name|nco
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tchanged schedule book note: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|oco
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
operator|&&
name|nco
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
name|nco
operator|.
name|getTitle
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|oco
operator|.
name|setTitle
argument_list|(
name|nco
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tadded title: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|oco
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
name|nco
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
operator|||
name|nco
operator|.
name|getTitle
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|)
condition|)
block|{
name|oco
operator|.
name|setTitle
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tremoved title: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|oco
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
name|nco
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|oco
operator|.
name|getTitle
argument_list|()
operator|.
name|equals
argument_list|(
name|nco
operator|.
name|getTitle
argument_list|()
argument_list|)
condition|)
block|{
name|oco
operator|.
name|setTitle
argument_list|(
name|nco
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tchanged title: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|oco
operator|.
name|getPermId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|oco
operator|.
name|setPermId
argument_list|(
name|InstrOfferingPermIdGenerator
operator|.
name|getGenerator
argument_list|()
operator|.
name|generate
argument_list|(
operator|(
name|SessionImpl
operator|)
operator|new
name|CourseOfferingDAO
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|this
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tadded missing permId: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|handleCustomCourseChildElements
argument_list|(
name|oco
argument_list|,
name|ico
operator|.
name|getElement
argument_list|()
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|oco
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|oco
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|oco
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
name|addNote
argument_list|(
literal|"\tmatching course offering not found, added new: "
operator|+
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|nco
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nco
operator|.
name|getNbrExpectedStudents
argument_list|()
operator|==
literal|null
condition|)
block|{
name|nco
operator|.
name|setNbrExpectedStudents
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nco
operator|.
name|getDemand
argument_list|()
operator|==
literal|null
condition|)
block|{
name|nco
operator|.
name|setDemand
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|nco
operator|.
name|setSubjectAreaAbbv
argument_list|(
name|nco
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|nco
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|io
operator|.
name|addTocourseOfferings
argument_list|(
name|nco
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|handleCustomCourseChildElements
argument_list|(
name|nco
argument_list|,
name|ico
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|nco
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|nco
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|nco
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|removeCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|removeCourses
operator|.
name|addAll
argument_list|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|coIt
init|=
name|removeCourses
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|existingCourseOfferings
operator|.
name|contains
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tremoved course offering from instructional offering: "
operator|+
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|deleteCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|boolean
name|hasControl
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|coIt
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|coIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|coIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|hasControl
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasControl
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected 'offering' to have a course marked as control."
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementDesignatorRequired
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Element
name|desigElement
init|=
name|element
operator|.
name|element
argument_list|(
literal|"designatorRequired"
argument_list|)
decl_stmt|;
if|if
condition|(
name|desigElement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|io
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tdesignatorRequired element changed"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|==
literal|null
operator|||
name|io
operator|.
name|isDesignatorRequired
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|io
operator|.
name|setDesignatorRequired
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tdesignatorRequired element changed"
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementInstrOffrConfig
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstrOfferingConfig
argument_list|>
name|existingConfigs
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstrOfferingConfig
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingConfigs
operator|.
name|put
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|,
name|ioc
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|elementName
init|=
literal|"config"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|configElement
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|addNew
init|=
literal|false
decl_stmt|;
name|String
name|name
init|=
name|getRequiredStringAttribute
argument_list|(
name|configElement
argument_list|,
literal|"name"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|limitStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|configElement
argument_list|,
literal|"limit"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|Integer
name|limit
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Boolean
name|unlimited
init|=
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|limitStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"inf"
argument_list|)
condition|)
block|{
name|unlimited
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|limit
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|limitStr
argument_list|)
expr_stmt|;
block|}
name|InstrOfferingConfig
name|ioc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|existingConfigs
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|ioc
operator|=
operator|(
name|InstrOfferingConfig
operator|)
name|existingConfigs
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|existingConfigs
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addNote
argument_list|(
literal|"\tdid not find matching config element, adding new config: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|ioc
operator|=
operator|new
name|InstrOfferingConfig
argument_list|()
expr_stmt|;
name|ioc
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|io
operator|.
name|addToinstrOfferingConfigs
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNew
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ioc
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ioc
operator|.
name|getLimit
argument_list|()
operator|.
name|equals
argument_list|(
name|limit
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconfig limit changed"
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|.
name|equals
argument_list|(
name|unlimited
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconfig unlimited changed"
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|setUnlimitedEnrollment
argument_list|(
name|unlimited
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handleCustomInstrOffrConfigChildElements
argument_list|(
name|ioc
argument_list|,
name|configElement
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconfig changed by custom element"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementSubpart
argument_list|(
name|configElement
argument_list|,
name|ioc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconfig subparts changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementClass
argument_list|(
name|configElement
argument_list|,
name|ioc
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconfig classes changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|addNote
argument_list|(
literal|"\tconfig element changed: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ioc
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
operator|(
name|addNew
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|existingConfigs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|cIt
init|=
name|existingConfigs
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteInstrOffrConfig
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementClass
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|Class_
name|parentClass
parameter_list|,
name|HashSet
argument_list|<
name|Class_
argument_list|>
name|allExistingClasses
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class_
argument_list|>
name|possibleClassesAtThisLevel
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
name|possibleSubpartsAtThisLevel
init|=
operator|new
name|ArrayList
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentClass
operator|==
literal|null
condition|)
block|{
name|allExistingClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|ssIt
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|allExistingClasses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|possibleClassesAtThisLevel
operator|.
name|put
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|possibleClassesAtThisLevel
operator|.
name|put
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|possibleSubpartsAtThisLevel
operator|.
name|add
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|parentClass
operator|.
name|getChildClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|parentClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|possibleClassesAtThisLevel
operator|.
name|put
argument_list|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|possibleClassesAtThisLevel
operator|.
name|put
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|parentClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|possibleSubpartsAtThisLevel
operator|.
name|addAll
argument_list|(
name|parentClass
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|elementName
init|=
literal|"class"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentClass
operator|==
literal|null
operator|&&
operator|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|==
literal|null
operator|||
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" - If a 'config' has 'class' elements it must also have matching 'subpart' elements"
argument_list|)
throw|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|cIt
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classElement
init|=
operator|(
name|Element
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|isAdd
init|=
literal|false
decl_stmt|;
name|String
name|id
init|=
name|getOptionalStringAttribute
argument_list|(
name|classElement
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|managingDeptStr
init|=
name|getOptionalStringAttribute
argument_list|(
name|classElement
argument_list|,
literal|"managingDept"
argument_list|)
decl_stmt|;
name|Department
name|managingDept
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|managingDeptStr
operator|!=
literal|null
operator|&&
name|managingDeptStr
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|managingDept
operator|=
name|Department
operator|.
name|findByDeptCode
argument_list|(
name|managingDeptStr
operator|.
name|trim
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|limitStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|classElement
argument_list|,
literal|"limit"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|Integer
name|limit
init|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|limitStr
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"inf"
argument_list|)
condition|)
block|{
name|limit
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|limitStr
argument_list|)
expr_stmt|;
block|}
name|String
name|suffix
init|=
name|getRequiredStringAttribute
argument_list|(
name|classElement
argument_list|,
literal|"suffix"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|getRequiredStringAttribute
argument_list|(
name|classElement
argument_list|,
literal|"type"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|String
name|scheduleNote
init|=
name|getOptionalStringAttribute
argument_list|(
name|classElement
argument_list|,
literal|"scheduleNote"
argument_list|)
decl_stmt|;
name|Boolean
name|displayInScheduleBook
init|=
name|getOptionalBooleanAttribute
argument_list|(
name|classElement
argument_list|,
literal|"displayInScheduleBook"
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayInScheduleBook
operator|==
literal|null
condition|)
block|{
name|displayInScheduleBook
operator|=
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|Integer
name|itypeId
init|=
name|findItypeForString
argument_list|(
name|type
argument_list|)
operator|.
name|getItype
argument_list|()
decl_stmt|;
name|Class_
name|clazz
init|=
literal|null
decl_stmt|;
name|Class_
name|origClass
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|origClass
operator|=
operator|(
name|Class_
operator|)
name|possibleClassesAtThisLevel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|origClass
operator|!=
literal|null
condition|)
block|{
name|possibleClassesAtThisLevel
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|origClass
operator|.
name|getClassSuffix
argument_list|()
operator|.
name|equals
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
name|origClass
operator|.
name|setClassSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|Integer
name|origSectionNbr
init|=
name|origClass
operator|.
name|getSectionNumberCache
argument_list|()
decl_stmt|;
try|try
block|{
name|origClass
operator|.
name|setSectionNumberCache
argument_list|(
operator|new
name|Integer
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|origClass
operator|.
name|setSectionNumberCache
argument_list|(
name|origSectionNbr
argument_list|)
expr_stmt|;
block|}
name|addNote
argument_list|(
literal|"\t suffix for class changed: "
operator|+
name|origClass
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|origClass
operator|==
literal|null
condition|)
block|{
name|origClass
operator|=
operator|(
name|Class_
operator|)
name|possibleClassesAtThisLevel
operator|.
name|get
argument_list|(
name|type
operator|+
name|suffix
argument_list|)
expr_stmt|;
if|if
condition|(
name|origClass
operator|!=
literal|null
operator|&&
name|origClass
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
name|id
operator|!=
literal|null
operator|&&
operator|!
name|origClass
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|origClass
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|origClass
operator|!=
literal|null
condition|)
block|{
name|possibleClassesAtThisLevel
operator|.
name|remove
argument_list|(
name|type
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|origClass
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|=
name|origClass
expr_stmt|;
name|allExistingClasses
operator|.
name|remove
argument_list|(
name|origClass
argument_list|)
expr_stmt|;
name|existingClasses
operator|.
name|remove
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|prevSubpart
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|itypeId
argument_list|)
operator|||
operator|!
name|possibleSubpartsAtThisLevel
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|ssIt
init|=
name|possibleSubpartsAtThisLevel
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|itypeId
argument_list|)
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hSess
init|=
name|this
operator|.
name|getHibSession
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setSchedulingSubpart
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addToclasses
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|hSess
operator|.
name|update
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|hSess
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hSess
operator|.
name|refresh
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|hSess
operator|.
name|refresh
argument_list|(
name|prevSubpart
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|prevSubpart
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' itype changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|.
name|equals
argument_list|(
name|scheduleNote
argument_list|)
operator|)
operator|||
operator|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|==
literal|null
operator|&&
name|scheduleNote
operator|!=
literal|null
operator|)
condition|)
block|{
name|clazz
operator|.
name|setSchedulePrintNote
argument_list|(
name|scheduleNote
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' schedule note changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|limit
argument_list|)
operator|)
operator|||
operator|(
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
operator|==
literal|null
operator|&&
name|limit
operator|!=
literal|null
operator|)
condition|)
block|{
name|clazz
operator|.
name|setExpectedCapacity
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' limit changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|!=
literal|null
operator|&&
name|managingDept
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|managingDept
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|==
literal|null
operator|&&
name|managingDept
operator|!=
literal|null
operator|)
condition|)
block|{
name|clazz
operator|.
name|setManagingDept
argument_list|(
name|managingDept
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' managing department changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|clazz
operator|.
name|isDisplayInScheduleBook
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|isDisplayInScheduleBook
argument_list|()
operator|.
name|equals
argument_list|(
name|displayInScheduleBook
argument_list|)
operator|)
operator|||
operator|(
name|clazz
operator|.
name|isDisplayInScheduleBook
argument_list|()
operator|==
literal|null
operator|&&
name|displayInScheduleBook
operator|!=
literal|null
operator|)
condition|)
block|{
name|clazz
operator|.
name|setDisplayInScheduleBook
argument_list|(
name|displayInScheduleBook
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' display in schedule book changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|isAdd
operator|=
literal|true
expr_stmt|;
name|clazz
operator|=
operator|new
name|Class_
argument_list|()
expr_stmt|;
name|clazz
operator|.
name|setExternalUniqueId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setClassSuffix
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
try|try
block|{
name|clazz
operator|.
name|setSectionNumberCache
argument_list|(
operator|new
name|Integer
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Ignore Exception
block|}
name|clazz
operator|.
name|setExpectedCapacity
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setMaxExpectedCapacity
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setRoomRatio
argument_list|(
operator|new
name|Float
argument_list|(
literal|1.0
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setNbrRooms
argument_list|(
operator|new
name|Integer
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDisplayInScheduleBook
argument_list|(
name|displayInScheduleBook
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSchedulePrintNote
argument_list|(
name|scheduleNote
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDisplayInstructor
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|managingDept
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|setManagingDept
argument_list|(
name|managingDept
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentClass
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|setParentClass
argument_list|(
name|parentClass
argument_list|)
expr_stmt|;
name|parentClass
operator|.
name|addTochildClasses
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|ssIt
init|=
name|possibleSubpartsAtThisLevel
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|equals
argument_list|(
name|itypeId
argument_list|)
condition|)
block|{
name|clazz
operator|.
name|setSchedulingSubpart
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|addToclasses
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' matching class not found adding new class"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' does not have matching 'subpart'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|elementInstructor
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' instructor data changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|DatePattern
name|dp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classElement
operator|.
name|element
argument_list|(
literal|"time"
argument_list|)
operator|!=
literal|null
operator|&&
name|classElement
operator|.
name|element
argument_list|(
literal|"time"
argument_list|)
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|dp
operator|=
name|DatePattern
operator|.
name|findByName
argument_list|(
name|session
argument_list|,
name|classElement
operator|.
name|element
argument_list|(
literal|"time"
argument_list|)
operator|.
name|attributeValue
argument_list|(
literal|"datePattern"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Vector
argument_list|<
name|Calendar
argument_list|>
argument_list|>
name|dates
init|=
name|elementDates
argument_list|(
name|classElement
argument_list|)
decl_stmt|;
if|if
condition|(
name|dp
operator|==
literal|null
operator|&&
name|dates
operator|!=
literal|null
condition|)
block|{
name|dp
operator|=
name|findDatePattern
argument_list|(
name|dates
operator|.
name|get
argument_list|(
literal|"startDates"
argument_list|)
argument_list|,
name|dates
operator|.
name|get
argument_list|(
literal|"endDates"
argument_list|)
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classElement
operator|.
name|element
argument_list|(
literal|"meeting"
argument_list|)
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|dp
operator|==
literal|null
operator|&&
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
name|suffix
operator|+
literal|" 'class' date pattern changed back to default"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|isDefault
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|effectiveDatePattern
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|session
operator|.
name|getDefaultDatePatternNotNull
argument_list|()
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
name|suffix
operator|+
literal|" 'class' date pattern changed to default"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dp
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|==
literal|null
condition|)
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|"'class' date pattern changed from default"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|dp
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getDatePattern
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' date pattern changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementMeetsWith
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' meets with preferences changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementCanShareRoom
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' can share room preferences changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|classElement
operator|.
name|element
argument_list|(
literal|"meeting"
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|elementMeetings
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|numRooms
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|numRooms
argument_list|)
argument_list|)
condition|)
block|{
name|clazz
operator|.
name|setNbrRooms
argument_list|(
operator|new
name|Integer
argument_list|(
name|numRooms
argument_list|)
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" number of rooms changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|classElement
operator|.
name|element
argument_list|(
literal|"time"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|TimeObject
name|meetingTime
init|=
name|elementTime
argument_list|(
name|classElement
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|elementRoom
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|elementLocation
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|int
name|numRooms
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rooms
operator|!=
literal|null
operator|&&
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|numRooms
operator|+=
name|rooms
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
operator|&&
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|numRooms
operator|+=
name|locations
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getNbrRooms
argument_list|()
operator|.
name|equals
argument_list|(
operator|new
name|Integer
argument_list|(
name|numRooms
argument_list|)
argument_list|)
condition|)
block|{
name|clazz
operator|.
name|setNbrRooms
argument_list|(
operator|new
name|Integer
argument_list|(
name|numRooms
argument_list|)
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" number of rooms changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|addUpdateClassEvent
argument_list|(
name|clazz
argument_list|,
name|meetingTime
argument_list|,
name|rooms
argument_list|,
name|locations
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' events for class changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|TimePattern
name|tp
init|=
name|findTimePatternForMeetingInfo
argument_list|(
name|clazz
argument_list|,
name|meetingTime
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getTimePatterns
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|contains
argument_list|(
name|tp
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|pref
init|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
name|TimePref
name|tpref
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tpref
operator|.
name|setTimePattern
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|tpref
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|tpref
operator|.
name|setPrefLevel
argument_list|(
name|requiredPrefLevel
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addTopreferences
argument_list|(
name|tpref
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' time pattern for class changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tp
operator|!=
literal|null
operator|&&
operator|(
name|clazz
operator|.
name|getTimePatterns
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|TimePref
name|tpref
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|tpref
operator|.
name|setTimePattern
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|tpref
operator|.
name|setOwner
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|tpref
operator|.
name|setPrefLevel
argument_list|(
name|requiredPrefLevel
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addTopreferences
argument_list|(
name|tpref
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' time pattern for class added"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tp
operator|==
literal|null
operator|&&
name|clazz
operator|.
name|getTimePatterns
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getTimePatterns
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|it
init|=
name|clazz
operator|.
name|getTimePreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimePref
name|pref
init|=
operator|(
name|TimePref
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|pref
argument_list|)
expr_stmt|;
block|}
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' time pattern for class removed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|handleCustomClassChildElements
argument_list|(
name|classElement
argument_list|,
name|ioc
argument_list|,
name|clazz
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementClass
argument_list|(
name|classElement
argument_list|,
name|ioc
argument_list|,
name|clazz
argument_list|,
name|allExistingClasses
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|type
operator|+
literal|" "
operator|+
name|suffix
operator|+
literal|" 'class' child classes changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|clazz
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
operator|(
name|isAdd
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ioc
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|possibleClassesAtThisLevel
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addNote
argument_list|(
literal|"\t"
operator|+
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" 'class' not all classes at this level had matches"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|cIt
init|=
name|possibleClassesAtThisLevel
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|equals
argument_list|(
name|parentClass
argument_list|)
condition|)
block|{
name|parentClass
operator|.
name|getChildClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|setParentClass
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|parentClass
operator|==
literal|null
operator|&&
name|allExistingClasses
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|info
argument_list|(
name|ioc
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" 'class' not all classes had matches, removing those without matches"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|cIt
init|=
name|allExistingClasses
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteClass
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
specifier|private
name|TimePattern
name|findTimePatternForMeetingInfo
parameter_list|(
name|Class_
name|clazz
parameter_list|,
name|TimeObject
name|timeObject
parameter_list|)
block|{
name|int
name|days
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Integer
name|dayOfWeek
range|:
name|timeObject
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|MONDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|TUESDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|WEDNESDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|THURSDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|FRIDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|SATURDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|dayOfWeek
operator|==
name|Calendar
operator|.
name|SUNDAY
condition|)
block|{
name|days
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
block|}
block|}
name|String
name|timePatternLookupString
init|=
name|days
operator|+
literal|"x"
operator|+
operator|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getMinutesPerWk
argument_list|()
operator|/
name|timeObject
operator|.
name|getDays
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|"x"
operator|+
name|timeObject
operator|.
name|getStartPeriod
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
return|return
operator|(
name|timePatterns
operator|.
name|get
argument_list|(
name|timePatternLookupString
argument_list|)
operator|)
return|;
block|}
specifier|protected
specifier|abstract
name|boolean
name|handleCustomClassChildElements
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|Class_
name|clazz
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|handleCustomInstrOffrConfigChildElements
parameter_list|(
name|InstrOfferingConfig
name|instrOfferingConfig
parameter_list|,
name|Element
name|instrOfferingConfigElement
parameter_list|)
throws|throws
name|Exception
function_decl|;
specifier|private
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|getMeetings
parameter_list|(
name|Date
name|startDate
parameter_list|,
name|Date
name|stopDate
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TimeObject
name|meetingTime
parameter_list|,
name|Vector
argument_list|<
name|Room
argument_list|>
name|rooms
parameter_list|,
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
parameter_list|)
block|{
if|if
condition|(
name|meetingTime
operator|!=
literal|null
condition|)
block|{
name|Meeting
name|meeting
init|=
name|meetingTime
operator|.
name|asMeeting
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setApprovedDate
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|startDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|startDateCal
operator|.
name|setTime
argument_list|(
name|startDate
argument_list|)
expr_stmt|;
name|Calendar
name|stopDateCal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|stopDateCal
operator|.
name|setTime
argument_list|(
name|stopDate
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|meetingsForDates
init|=
operator|new
name|Vector
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|startDateCal
operator|.
name|after
argument_list|(
name|stopDateCal
argument_list|)
condition|)
block|{
if|if
condition|(
name|meetingTime
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
name|startDateCal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
argument_list|)
operator|&&
name|pattern
operator|.
name|charAt
argument_list|(
name|index
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|Meeting
name|dateMeeting
init|=
operator|(
name|Meeting
operator|)
name|meeting
operator|.
name|clone
argument_list|()
decl_stmt|;
name|dateMeeting
operator|.
name|setMeetingDate
argument_list|(
name|startDateCal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meetingsForDates
operator|.
name|add
argument_list|(
name|dateMeeting
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
name|startDateCal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|rooms
operator|==
literal|null
operator|||
name|rooms
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|locations
operator|==
literal|null
operator|||
name|locations
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
return|return
operator|(
name|meetingsForDates
operator|)
return|;
block|}
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|meetingsForLocations
init|=
operator|new
name|Vector
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Room
argument_list|>
name|rIt
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|rIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Room
name|r
init|=
operator|(
name|Room
operator|)
name|rIt
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|dmIt
init|=
name|meetingsForDates
operator|.
name|iterator
argument_list|()
init|;
name|dmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|dateMeeting
init|=
operator|(
name|Meeting
operator|)
name|dmIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|roomMeeting
init|=
operator|(
name|Meeting
operator|)
name|dateMeeting
operator|.
name|clone
argument_list|()
decl_stmt|;
name|roomMeeting
operator|.
name|setLocationPermanentId
argument_list|(
name|r
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|meetingsForLocations
operator|.
name|add
argument_list|(
name|roomMeeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|locations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|NonUniversityLocation
argument_list|>
name|rIt
init|=
name|locations
operator|.
name|iterator
argument_list|()
init|;
name|rIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NonUniversityLocation
name|nul
init|=
operator|(
name|NonUniversityLocation
operator|)
name|rIt
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|dmIt
init|=
name|meetingsForDates
operator|.
name|iterator
argument_list|()
init|;
name|dmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|dateMeeting
init|=
operator|(
name|Meeting
operator|)
name|dmIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|Meeting
name|roomMeeting
init|=
operator|(
name|Meeting
operator|)
name|dateMeeting
operator|.
name|clone
argument_list|()
decl_stmt|;
name|roomMeeting
operator|.
name|setLocationPermanentId
argument_list|(
name|nul
operator|.
name|getPermanentId
argument_list|()
argument_list|)
expr_stmt|;
name|meetingsForLocations
operator|.
name|add
argument_list|(
name|roomMeeting
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|meetingsForLocations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|meetingsForLocations
operator|)
return|;
block|}
block|}
return|return
operator|(
literal|null
operator|)
return|;
block|}
specifier|private
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|getMeetings
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|TimeObject
name|meetingTime
parameter_list|,
name|Vector
argument_list|<
name|Room
argument_list|>
name|rooms
parameter_list|,
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
parameter_list|)
block|{
return|return
operator|(
name|getMeetings
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|,
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|,
name|dp
operator|.
name|getPattern
argument_list|()
argument_list|,
name|meetingTime
argument_list|,
name|rooms
argument_list|,
name|locations
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|addDistributionPref
parameter_list|(
name|Vector
argument_list|<
name|String
argument_list|>
name|classIds
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|DistributionType
name|distributionType
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|classIds
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
block|{
throw|throw
operator|(
operator|new
name|Exception
argument_list|(
literal|"There must be at least two classes to have a meets with distribution preference: "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
operator|)
throw|;
block|}
name|Class_
name|c
init|=
literal|null
decl_stmt|;
name|Vector
argument_list|<
name|String
argument_list|>
name|tmpClassIds
init|=
operator|new
name|Vector
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tmpClassIds
operator|.
name|addAll
argument_list|(
name|classIds
argument_list|)
expr_stmt|;
name|Vector
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|Vector
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|eIt
init|=
name|classIds
operator|.
name|iterator
argument_list|()
init|;
name|eIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|externalId
operator|=
operator|(
name|String
operator|)
name|eIt
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|externalId
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|classes
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|tmpClassIds
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|findClassForExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|classes
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|tmpClassIds
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|tmpClassIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addNote
argument_list|(
literal|"\t not all classes for this meets with pref exist yet, will add it later:"
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DistributionPref
name|dp
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|dp
operator|.
name|setDistributionType
argument_list|(
name|distributionType
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setGrouping
argument_list|(
name|DistributionPref
operator|.
name|sGroupingNone
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setPrefLevel
argument_list|(
name|requiredPrefLevel
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setOwner
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|cIt
init|=
name|classes
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|c
operator|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
expr_stmt|;
name|DistributionObject
name|distObj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|distObj
operator|.
name|setDistributionPref
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|distObj
operator|.
name|setPrefGroup
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|dp
operator|.
name|addTodistributionObjects
argument_list|(
name|distObj
argument_list|)
expr_stmt|;
name|c
operator|.
name|addTodistributionObjects
argument_list|(
name|distObj
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|refresh
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|addUpdateClassEvent
parameter_list|(
name|Class_
name|c
parameter_list|,
name|TimeObject
name|meetingTime
parameter_list|,
name|Vector
argument_list|<
name|Room
argument_list|>
name|rooms
parameter_list|,
name|Vector
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
parameter_list|)
block|{
return|return
operator|(
name|addUpdateClassEvent
argument_list|(
name|c
argument_list|,
name|getMeetings
argument_list|(
name|c
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
name|meetingTime
argument_list|,
name|rooms
argument_list|,
name|locations
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|addUpdateClassEvent
parameter_list|(
name|Class_
name|c
parameter_list|,
name|Vector
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Date
name|approvedTime
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|ClassEvent
name|origEvent
init|=
name|c
operator|.
name|getEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
operator|&&
operator|!
name|meetings
operator|.
name|isEmpty
argument_list|()
operator|&&
name|origEvent
operator|==
literal|null
condition|)
block|{
name|ClassEvent
name|newEvent
init|=
operator|new
name|ClassEvent
argument_list|()
decl_stmt|;
name|newEvent
operator|.
name|setClazz
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|setEvent
argument_list|(
name|newEvent
argument_list|)
expr_stmt|;
name|newEvent
operator|.
name|setMaxCapacity
argument_list|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|newEvent
operator|.
name|setMinCapacity
argument_list|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|newEvent
operator|.
name|setEventName
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|mIt
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|mIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|mIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setEvent
argument_list|(
name|newEvent
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setApprovedDate
argument_list|(
name|approvedTime
argument_list|)
expr_stmt|;
name|newEvent
operator|.
name|addTomeetings
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|newEvent
argument_list|)
expr_stmt|;
name|assignmentHelper
operator|.
name|createAssignment
argument_list|(
name|newEvent
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tdid not find matching event, added new event: "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|newEvent
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|origEvent
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|origEvent
operator|.
name|getEventName
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
condition|)
block|{
name|origEvent
operator|.
name|setEventName
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tevent name changed"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|origEvent
operator|.
name|getMinCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|origEvent
operator|.
name|getMinCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
operator|||
operator|(
name|origEvent
operator|.
name|getMinCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|origEvent
operator|.
name|getMinCapacity
argument_list|()
operator|==
literal|null
operator|&&
name|c
operator|.
name|getExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|origEvent
operator|.
name|setMinCapacity
argument_list|(
name|c
operator|.
name|getExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tevent minimum capacity changed."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|origEvent
operator|.
name|getMaxCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|origEvent
operator|.
name|getMaxCapacity
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
operator|||
operator|(
name|origEvent
operator|.
name|getMaxCapacity
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|origEvent
operator|.
name|getMaxCapacity
argument_list|()
operator|==
literal|null
operator|&&
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|origEvent
operator|.
name|setMaxCapacity
argument_list|(
name|c
operator|.
name|getMaxExpectedCapacity
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tevent maximum capacity changed."
argument_list|)
expr_stmt|;
block|}
name|Set
name|origMeetings
init|=
operator|new
name|TreeSet
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|origMeetings
operator|.
name|addAll
argument_list|(
name|origEvent
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|meetings
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|nmIt
init|=
name|meetings
operator|.
name|iterator
argument_list|()
init|;
name|nmIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|newMeeting
init|=
operator|(
name|Meeting
operator|)
name|nmIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|omIt
init|=
name|origMeetings
operator|.
name|iterator
argument_list|()
init|;
name|omIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|origMeeting
init|=
operator|(
name|Meeting
operator|)
name|omIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSameMeeting
argument_list|(
name|origMeeting
argument_list|,
name|newMeeting
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|origMeetings
operator|.
name|remove
argument_list|(
name|origMeeting
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|addNote
argument_list|(
literal|"\tdid not find matching meeting, adding new meeting to event: "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|newMeeting
operator|.
name|setEvent
argument_list|(
name|origEvent
argument_list|)
expr_stmt|;
name|newMeeting
operator|.
name|setApprovedDate
argument_list|(
name|approvedTime
argument_list|)
expr_stmt|;
name|origEvent
operator|.
name|addTomeetings
argument_list|(
name|newMeeting
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|origMeetings
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addNote
argument_list|(
literal|"\tsome existing meetings did not have matches in input, deleted them: "
operator|+
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|mIt
init|=
name|origMeetings
operator|.
name|iterator
argument_list|()
init|;
name|mIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
operator|(
name|Meeting
operator|)
name|mIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|origEvent
operator|.
name|getMeetings
argument_list|()
operator|.
name|remove
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|setEvent
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|m
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|assignmentHelper
operator|.
name|createAssignment
argument_list|(
name|origEvent
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|origEvent
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|origEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementSubpart
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstrOfferingConfig
name|ioc
parameter_list|,
name|SchedulingSubpart
name|parentSubpart
parameter_list|,
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|allExistingSubparts
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchedulingSubpart
argument_list|>
name|thisLevelSubparts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SchedulingSubpart
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentSubpart
operator|==
literal|null
condition|)
block|{
name|allExistingSubparts
operator|=
operator|new
name|HashSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|allExistingSubparts
operator|.
name|add
argument_list|(
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|thisLevelSubparts
operator|.
name|put
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|ss
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
name|ss
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|?
literal|""
else|:
name|ss
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|)
operator|)
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|parentSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|parentSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|thisLevelSubparts
operator|.
name|put
argument_list|(
name|ss
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
operator|(
name|ss
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
operator|(
name|ss
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|.
name|equals
argument_list|(
literal|"-"
argument_list|)
condition|?
literal|""
else|:
name|ss
operator|.
name|getSchedulingSubpartSuffixCache
argument_list|()
operator|)
operator|)
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|elementName
init|=
literal|"subpart"
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
name|elementName
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|element
operator|.
name|elementIterator
argument_list|(
name|elementName
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|subpart
init|=
operator|(
name|Element
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|boolean
name|isAdd
init|=
literal|false
decl_stmt|;
name|Integer
name|minPerWeek
init|=
name|getOptionalIntegerAttribute
argument_list|(
name|subpart
argument_list|,
literal|"minPerWeek"
argument_list|)
decl_stmt|;
if|if
condition|(
name|minPerWeek
operator|==
literal|null
condition|)
block|{
name|minPerWeek
operator|=
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|typeStr
init|=
name|getRequiredStringAttribute
argument_list|(
name|subpart
argument_list|,
literal|"type"
argument_list|,
name|elementName
argument_list|)
decl_stmt|;
name|ItypeDesc
name|itype
init|=
name|findItypeForString
argument_list|(
name|typeStr
argument_list|)
decl_stmt|;
name|String
name|type
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|itype
operator|!=
literal|null
condition|)
block|{
name|type
operator|=
name|itype
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|suffix
init|=
name|getOptionalStringAttribute
argument_list|(
name|subpart
argument_list|,
literal|"suffix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
name|suffix
operator|=
name|suffix
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|suffix
operator|=
literal|""
expr_stmt|;
block|}
name|SchedulingSubpart
name|ss
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|thisLevelSubparts
operator|.
name|containsKey
argument_list|(
name|type
operator|+
name|suffix
argument_list|)
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|thisLevelSubparts
operator|.
name|get
argument_list|(
name|type
operator|+
name|suffix
argument_list|)
expr_stmt|;
name|allExistingSubparts
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisLevelSubparts
operator|.
name|containsKey
argument_list|(
name|type
operator|+
name|suffix
argument_list|)
condition|)
block|{
name|thisLevelSubparts
operator|.
name|remove
argument_list|(
name|type
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|parentSubpart
operator|!=
literal|null
operator|&&
name|parentSubpart
operator|.
name|getItype
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|suffix
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|&&
name|thisLevelSubparts
operator|.
name|containsKey
argument_list|(
name|type
operator|+
literal|"a"
argument_list|)
condition|)
block|{
name|ss
operator|=
operator|(
name|SchedulingSubpart
operator|)
name|thisLevelSubparts
operator|.
name|get
argument_list|(
name|type
operator|+
literal|"a"
argument_list|)
expr_stmt|;
name|allExistingSubparts
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|thisLevelSubparts
operator|.
name|containsKey
argument_list|(
name|type
operator|+
literal|"a"
argument_list|)
condition|)
block|{
name|thisLevelSubparts
operator|.
name|remove
argument_list|(
name|type
operator|+
literal|"a"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ss
operator|=
operator|new
name|SchedulingSubpart
argument_list|()
expr_stmt|;
name|ss
operator|.
name|setItype
argument_list|(
name|itype
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setSchedulingSubpartSuffixCache
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setInstrOfferingConfig
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setSession
argument_list|(
name|ioc
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setCourseName
argument_list|(
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|ioc
operator|.
name|addToschedulingSubparts
argument_list|(
name|ss
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|setParentSubpart
argument_list|(
name|parentSubpart
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addTochildSubparts
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
name|isAdd
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tdid not find existing matching scheduling subpart, created new one: "
operator|+
name|ss
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|.
name|isAutoSpreadInTime
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ss
operator|.
name|setAutoSpreadInTime
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|.
name|isStudentAllowOverlap
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ss
operator|.
name|setStudentAllowOverlap
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ss
operator|.
name|getMinutesPerWk
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|ss
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|equals
argument_list|(
name|minPerWeek
argument_list|)
condition|)
block|{
name|ss
operator|.
name|setMinutesPerWk
argument_list|(
name|minPerWeek
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tsubpart minutes per week changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
operator|&&
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|ss
operator|.
name|setParentSubpart
argument_list|(
name|parentSubpart
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addTochildSubparts
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tsubpart now has parent"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|parentSubpart
operator|!=
literal|null
operator|&&
operator|!
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|parentSubpart
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setParentSubpart
argument_list|(
name|parentSubpart
argument_list|)
expr_stmt|;
name|parentSubpart
operator|.
name|addTochildSubparts
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tsubpart has different parent"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|parentSubpart
operator|==
literal|null
operator|&&
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setParentSubpart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addNote
argument_list|(
literal|"\tsubpart no longer has parent"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|elementSubpartCredit
argument_list|(
name|subpart
argument_list|,
name|ss
argument_list|)
condition|)
block|{
name|addNote
argument_list|(
literal|"\tsubpart credit changed"
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementSubpart
argument_list|(
name|subpart
argument_list|,
name|ioc
argument_list|,
name|ss
argument_list|,
name|allExistingSubparts
argument_list|)
condition|)
block|{
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|changed
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ss
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
operator|(
name|isAdd
condition|?
name|ChangeLog
operator|.
name|Operation
operator|.
name|CREATE
else|:
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ioc
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|thisLevelSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addNote
argument_list|(
literal|"\tnot all subparts at this level had matches, deleted them"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|thisLevelSubparts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|allExistingSubparts
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|deleteSchedulingSubpart
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|parentSubpart
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|parentSubpart
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ioc
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|parentSubpart
operator|==
literal|null
operator|&&
operator|!
name|allExistingSubparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|addNote
argument_list|(
literal|"\tnot all existing subparts had matches, deleted them"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|allExistingSubparts
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
name|deleteSchedulingSubpart
argument_list|(
name|ss
argument_list|)
expr_stmt|;
block|}
name|changed
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|boolean
name|elementConsent
parameter_list|(
name|Element
name|element
parameter_list|,
name|InstructionalOffering
name|io
parameter_list|)
throws|throws
name|Exception
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
name|Element
name|consentElement
init|=
name|element
operator|.
name|element
argument_list|(
literal|"consent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|consentElement
operator|!=
literal|null
condition|)
block|{
name|String
name|consentType
init|=
name|getRequiredStringAttribute
argument_list|(
name|consentElement
argument_list|,
literal|"type"
argument_list|,
literal|"consent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|io
operator|.
name|getConsentType
argument_list|()
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
name|consentType
argument_list|)
condition|)
block|{
name|io
operator|.
name|setConsentType
argument_list|(
name|OfferingConsentType
operator|.
name|getOfferingConsentTypeForReference
argument_list|(
name|consentType
argument_list|)
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
name|addNote
argument_list|(
literal|"\tconsent changed"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|changed
operator|)
return|;
block|}
specifier|private
name|void
name|deleteDistributionPref
parameter_list|(
name|DistributionPref
name|dp
parameter_list|)
block|{
name|addNote
argument_list|(
literal|"\tdeleting meets with distribution preference:  "
operator|+
name|dp
operator|.
name|preferenceText
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|""
argument_list|,
literal|", "
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|HashSet
name|relatedInstructionalOfferings
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Department
name|dept
init|=
operator|(
name|Department
operator|)
name|dp
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|dept
operator|.
name|getPreferences
argument_list|()
operator|.
name|remove
argument_list|(
name|dp
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|dp
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DistributionObject
name|dObj
init|=
operator|(
name|DistributionObject
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceGroup
name|pg
init|=
name|dObj
operator|.
name|getPrefGroup
argument_list|()
decl_stmt|;
name|relatedInstructionalOfferings
operator|.
name|add
argument_list|(
operator|(
name|pg
operator|instanceof
name|Class_
condition|?
operator|(
operator|(
name|Class_
operator|)
name|pg
operator|)
operator|.
name|getSchedulingSubpart
argument_list|()
else|:
operator|(
name|SchedulingSubpart
operator|)
name|pg
operator|)
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
name|pg
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|remove
argument_list|(
name|dObj
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|pg
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|dp
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|dept
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|dept
argument_list|)
expr_stmt|;
comment|//        for (Iterator i=relatedInstructionalOfferings.iterator();i.hasNext();) {
comment|//            InstructionalOffering io = (InstructionalOffering)i.next();
comment|//            ChangeLog.addChange(getHibSession(), getManager(), session, io, ChangeLog.Source.DATA_IMPORT_OFFERINGS, ChangeLog.Operation.DELETE, io.getControllingCourseOffering().getSubjectArea(), null);
comment|//        }
block|}
specifier|private
name|void
name|deleteCourseOffering
parameter_list|(
name|CourseOffering
name|co
parameter_list|)
block|{
comment|//TODO: may need to add a hook for deleting custom data from the database, could also just add an
comment|// abstract cleanup method that is run at the end and let it take care of any customized things
comment|// that might need to be removed after their corresponding course offering has been deleted
name|InstructionalOffering
name|io
init|=
name|co
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|deleteInstructionalOffering
argument_list|(
name|io
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|size
argument_list|()
operator|<=
literal|2
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|cor
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|remove
argument_list|(
name|cor
argument_list|)
expr_stmt|;
name|co
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|remove
argument_list|(
name|cor
argument_list|)
expr_stmt|;
name|cor
operator|.
name|setCourseOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cor
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOfferingReservation
name|cor
init|=
operator|(
name|CourseOfferingReservation
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cor
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|io
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|remove
argument_list|(
name|cor
argument_list|)
expr_stmt|;
name|co
operator|.
name|getCourseReservations
argument_list|()
operator|.
name|remove
argument_list|(
name|cor
argument_list|)
expr_stmt|;
name|cor
operator|.
name|setCourseOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cor
operator|.
name|setOwner
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|remove
argument_list|(
name|co
argument_list|)
expr_stmt|;
if|if
condition|(
name|co
operator|.
name|isIsControl
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|)
block|{
name|CourseOffering
name|newControl
init|=
operator|(
name|CourseOffering
operator|)
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|newControl
operator|.
name|setIsControl
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|co
operator|.
name|setInstructionalOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|existingCourseOfferings
operator|.
name|remove
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|existingCourseOfferings
operator|.
name|remove
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|co
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|deleteInstructionalOffering
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|)
block|{
comment|// remove the instructionalOffering from the list of existing instructional offerings
name|existingInstructionalOfferings
operator|.
name|remove
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove all course offering uniqueIds from the existing course offerings list
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|io
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingCourseOfferings
operator|.
name|remove
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// remove all class uniqueIds from the existing classes list and get rid of any dependent objects so the
comment|//    class can be deleted
if|if
condition|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|iocIt
init|=
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iocIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|ioc
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|iocIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|ssIt
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingClasses
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|deleteAllDependentObjects
argument_list|(
name|this
operator|.
name|getHibSession
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|io
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
operator|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|)
argument_list|,
operator|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|io
argument_list|)
expr_stmt|;
name|flush
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteInstrOffrConfig
parameter_list|(
name|InstrOfferingConfig
name|ioc
parameter_list|)
block|{
comment|// remove all class uniqueIds from the existing classes list and get rid of any dependent objects so the
comment|//    class can be deleted
if|if
condition|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|ssIt
init|=
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|ssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|ss
init|=
operator|(
name|SchedulingSubpart
operator|)
name|ssIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingClasses
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|deleteAllDependentObjects
argument_list|(
name|this
operator|.
name|getHibSession
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|ioc
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|remove
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ioc
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteSchedulingSubpart
parameter_list|(
name|SchedulingSubpart
name|ss
parameter_list|)
block|{
if|if
condition|(
name|ss
operator|.
name|getChildSubparts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|cssIt
init|=
name|ss
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cssIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|css
init|=
operator|(
name|SchedulingSubpart
operator|)
name|cssIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|deleteSchedulingSubpart
argument_list|(
name|css
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove all class uniqueIds from the existing classes list and get rid of any dependent objects so the
comment|//    class can be deleted
if|if
condition|(
name|ss
operator|.
name|getClasses
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|cIt
init|=
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|cIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|cIt
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingClasses
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|deleteAllDependentObjects
argument_list|(
name|this
operator|.
name|getHibSession
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|InstrOfferingConfig
name|ioc
init|=
name|ss
operator|.
name|getInstrOfferingConfig
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|parentSubpart
init|=
name|ss
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentSubpart
operator|!=
literal|null
condition|)
block|{
name|parentSubpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|ss
operator|.
name|setParentSubpart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|ss
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|ioc
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ss
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ioc
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
comment|//		this.getHibSession().delete(ss);
block|}
specifier|private
name|void
name|deleteClassInstructor
parameter_list|(
name|ClassInstructor
name|ci
parameter_list|)
block|{
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|remove
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|Class_
name|clazz
init|=
name|ci
operator|.
name|getClassInstructing
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setClassInstructing
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setInstructor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|ci
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|deleteClass
parameter_list|(
name|Class_
name|c
parameter_list|)
block|{
name|c
operator|.
name|deleteAllDependentObjects
argument_list|(
name|this
operator|.
name|getHibSession
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|SchedulingSubpart
name|ss
init|=
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
name|ss
operator|.
name|getClasses
argument_list|()
operator|.
name|remove
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|session
argument_list|,
name|c
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_OFFERINGS
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|DELETE
argument_list|,
name|ss
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|ss
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|existingClasses
operator|.
name|remove
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CourseOffering
name|findExistingCourseOffering
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
name|CourseOffering
name|existingCo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existingCo
operator|=
name|findCrsOffrForExternalId
argument_list|(
name|courseOffering
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existingCo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|courseNumbersMustBeUnique
condition|)
block|{
name|existingCo
operator|=
name|findCrsOffrForSubjCrs
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|existingCo
operator|=
name|findCrsOffrForSubjCrsTitle
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getTitle
argument_list|()
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|existingCo
operator|)
return|;
block|}
specifier|private
name|CourseOffering
name|findCrsOffrForExternalId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|CourseOffering
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct co from CourseOffering as co where co.externalUniqueId=:externalId and co.subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|CourseOffering
name|findCrsOffrForSubjCrsTitle
parameter_list|(
name|String
name|subjectAbbv
parameter_list|,
name|String
name|crsNbr
parameter_list|,
name|String
name|title
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|CourseOffering
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct co from CourseOffering as co where co.subjectArea.session.uniqueId=:sessionId and co.subjectArea.subjectAreaAbbreviation=:subjectAbbv and co.courseNbr=:courseNbr and co.title=:title"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAbbv"
argument_list|,
name|subjectAbbv
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|crsNbr
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|CourseOffering
name|findCrsOffrForSubjCrs
parameter_list|(
name|String
name|subjectAbbv
parameter_list|,
name|String
name|crsNbr
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|CourseOffering
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct co from CourseOffering as co where co.subjectArea.session.uniqueId=:sessionId and co.subjectArea.subjectAreaAbbreviation=:subjectAbbv and co.courseNbr=:courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"subjectAbbv"
argument_list|,
name|subjectAbbv
argument_list|)
operator|.
name|setString
argument_list|(
literal|"courseNbr"
argument_list|,
name|crsNbr
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|InstructionalOffering
name|findInstrOffrForExternalId
parameter_list|(
name|String
name|externalId
parameter_list|,
name|Long
name|sessionId
parameter_list|)
block|{
return|return
operator|(
name|InstructionalOffering
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering as io where io.externalUniqueId=:externalId and io.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|externalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setFlushMode
argument_list|(
name|FlushMode
operator|.
name|MANUAL
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|InstructionalOffering
name|findInstrOffrForUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
operator|(
name|InstructionalOffering
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering as io where io.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|CourseOffering
name|findCourseOffrForUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
operator|(
name|CourseOffering
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct co from CourseOffering as co where co.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|Class_
name|findClassForUniqueId
parameter_list|(
name|Long
name|uniqueId
parameter_list|)
block|{
return|return
operator|(
name|Class_
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ as c where c.uniqueId=:uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|uniqueId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|Class_
name|findClassForExternalUniqueId
parameter_list|(
name|String
name|externalUniqueId
parameter_list|)
block|{
return|return
operator|(
name|Class_
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Class_ as c where c.externalUniqueId=:externalUniqueId and c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalUniqueId"
argument_list|,
name|externalUniqueId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
return|;
block|}
specifier|private
name|Room
name|findRoom
parameter_list|(
name|String
name|id
parameter_list|,
name|String
name|building
parameter_list|,
name|String
name|roomNbr
parameter_list|)
block|{
name|Room
name|room
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|room
operator|=
operator|(
name|Room
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room as r where r.externalUniqueId=:externalId and r.building.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|id
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|==
literal|null
condition|)
block|{
name|room
operator|=
operator|(
name|Room
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct r from Room as r where r.roomNumber=:roomNbr and r.building.abbreviation = :building and r.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"building"
argument_list|,
name|building
argument_list|)
operator|.
name|setString
argument_list|(
literal|"roomNbr"
argument_list|,
name|roomNbr
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
name|room
operator|!=
literal|null
operator|&&
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|room
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
operator|(
name|room
operator|)
return|;
block|}
specifier|private
name|NonUniversityLocation
name|findNonUniversityLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|Class_
name|c
parameter_list|)
block|{
name|NonUniversityLocation
name|location
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|possibleLocations
init|=
name|findNonUniversityLocationsWithName
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|possibleLocations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|lIt
init|=
name|possibleLocations
operator|.
name|iterator
argument_list|()
init|;
name|lIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NonUniversityLocation
name|l
init|=
operator|(
name|NonUniversityLocation
operator|)
name|lIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|getRoomDepts
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|rdIt
init|=
name|l
operator|.
name|getRoomDepts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|rdIt
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomDept
name|rd
init|=
operator|(
name|RoomDept
operator|)
name|rdIt
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingDept
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|location
operator|=
name|l
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|location
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
return|return
operator|(
name|location
operator|)
return|;
block|}
specifier|private
name|void
name|loadSubjectAreas
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|List
argument_list|<
name|?
argument_list|>
name|subjects
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|subjects
operator|=
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct sa from SubjectArea as sa where sa.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|subjects
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SubjectArea
name|sa
init|=
operator|(
name|SubjectArea
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|subjectAreas
operator|.
name|put
argument_list|(
name|sa
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|sa
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadItypes
parameter_list|()
block|{
name|Set
argument_list|<
name|?
argument_list|>
name|itypeDescs
init|=
name|ItypeDesc
operator|.
name|findAll
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|itypeDescs
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ItypeDesc
name|itype
init|=
operator|(
name|ItypeDesc
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|itypes
operator|.
name|put
argument_list|(
name|itype
operator|.
name|getAbbv
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
name|itype
argument_list|)
expr_stmt|;
name|itypesBySisRef
operator|.
name|put
argument_list|(
name|itype
operator|.
name|getSis_ref
argument_list|()
argument_list|,
name|itype
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|ItypeDesc
name|findItypeForString
parameter_list|(
name|String
name|itypeRef
parameter_list|)
block|{
name|ItypeDesc
name|itype
init|=
name|itypes
operator|.
name|get
argument_list|(
name|itypeRef
argument_list|)
decl_stmt|;
if|if
condition|(
name|itype
operator|==
literal|null
condition|)
block|{
name|itype
operator|=
name|itypesBySisRef
operator|.
name|get
argument_list|(
name|itypeRef
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|itype
operator|)
return|;
block|}
specifier|private
name|void
name|loadExistingInstructionalOfferings
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|InstructionalOffering
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingInstructionalOfferings
operator|.
name|add
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadExistingCourseOfferings
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|CourseOffering
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|courseOffering
init|=
operator|(
name|CourseOffering
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|existingCourseOfferings
operator|.
name|add
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|loadMeetsWithDistributionType
parameter_list|()
block|{
name|meetsWithType
operator|=
operator|(
name|DistributionType
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DistributionType dt where dt.reference = 'MEET_WITH'"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadCanShareRoomDistributionType
parameter_list|()
block|{
name|canShareRoomType
operator|=
operator|(
name|DistributionType
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DistributionType dt where dt.reference = 'CAN_SHARE_ROOM'"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadRequiredPrefLevel
parameter_list|()
block|{
name|requiredPrefLevel
operator|=
operator|(
name|PreferenceLevel
operator|)
name|this
operator|.
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PreferenceLevel pl where pl.prefName = 'Required'"
argument_list|)
operator|.
name|uniqueResult
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadExistingClasses
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|Class_
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|c
init|=
operator|(
name|Class_
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|existingClasses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|existingClasses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|protected
name|String
name|getEmailSubject
parameter_list|()
block|{
return|return
operator|(
literal|"Course Offering Import Results - "
operator|+
name|session
operator|.
name|getAcademicYearTerm
argument_list|()
operator|)
return|;
block|}
specifier|protected
class|class
name|ImportCourseOffering
block|{
comment|/** 		 *  		 */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5993231932828326663L
decl_stmt|;
specifier|private
name|CourseOffering
name|courseOffering
decl_stmt|;
specifier|private
name|Element
name|element
decl_stmt|;
specifier|public
name|ImportCourseOffering
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
name|this
operator|.
name|courseOffering
operator|=
name|courseOffering
expr_stmt|;
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
block|}
specifier|public
name|CourseOffering
name|getCourseOffering
parameter_list|()
block|{
return|return
name|courseOffering
return|;
block|}
specifier|public
name|void
name|setCourseOffering
parameter_list|(
name|CourseOffering
name|courseOffering
parameter_list|)
block|{
name|this
operator|.
name|courseOffering
operator|=
name|courseOffering
expr_stmt|;
block|}
specifier|public
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
specifier|public
name|void
name|setElement
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
name|this
operator|.
name|element
operator|=
name|element
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

