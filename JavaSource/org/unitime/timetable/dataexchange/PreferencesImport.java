begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|DayCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Building
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|BuildingPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePatternPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DistributionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamPeriodPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|GlobalRoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorAttributePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorCoursePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructorPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomDept
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeaturePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomGroupPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePatternModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimePref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PreferencesImport
extends|extends
name|BaseImport
block|{
specifier|private
name|Session
name|iSession
decl_stmt|;
specifier|private
name|SimpleDateFormat
name|iDateFormat
decl_stmt|,
name|iTimeFormat
decl_stmt|;
specifier|private
name|DateFormat
name|iHHmm
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmm"
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"preferences"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not reservations load file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|String
name|created
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
name|iDateFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"dateFormat"
argument_list|,
literal|"yyyy/M/d"
argument_list|)
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|String
name|timeFormat
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"timeFormat"
argument_list|,
literal|"HHmm"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"HHmm"
operator|.
name|equals
argument_list|(
name|timeFormat
argument_list|)
condition|)
name|iTimeFormat
operator|=
operator|new
name|SimpleDateFormat
argument_list|(
name|timeFormat
argument_list|,
name|Locale
operator|.
name|US
argument_list|)
expr_stmt|;
name|iSession
operator|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSession
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|getManager
argument_list|()
argument_list|,
name|iSession
argument_list|,
name|iSession
argument_list|,
name|created
argument_list|,
name|ChangeLog
operator|.
name|Source
operator|.
name|DATA_IMPORT_PREFERENCES
argument_list|,
name|ChangeLog
operator|.
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|PreferenceGroup
name|group
init|=
name|lookupPrefGroup
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
continue|continue;
name|group
operator|.
name|getPreferences
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|element
operator|.
name|elementIterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|prefElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Preference
name|preference
init|=
name|createPreference
argument_list|(
name|prefElement
argument_list|,
name|group
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|==
literal|null
condition|)
continue|continue;
name|preference
operator|.
name|setOwner
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|preference
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
literal|"All done."
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Department
argument_list|>
name|iDepartments
init|=
literal|null
decl_stmt|;
specifier|protected
name|Department
name|lookupDepartment
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iDepartments
operator|==
literal|null
condition|)
name|iDepartments
operator|=
operator|(
name|List
argument_list|<
name|Department
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct d from Department d left join fetch d.preferences p where d.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|String
name|deptCode
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|,
literal|"not-set"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Department
argument_list|>
name|i
init|=
name|iDepartments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|department
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|deptCode
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|department
return|;
block|}
block|}
name|warn
argument_list|(
literal|"Department "
operator|+
name|deptCode
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|iInstructors
init|=
literal|null
decl_stmt|;
specifier|protected
name|DepartmentalInstructor
name|lookupInstructor
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
name|iInstructors
operator|=
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from DepartmentalInstructor i left join fetch i.preferences p where i.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
name|String
name|deptCode
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|,
literal|"not-set"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|i
init|=
name|iInstructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|externalId
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
name|deptCode
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|instructor
return|;
block|}
block|}
name|warn
argument_list|(
literal|"Instructor "
operator|+
name|externalId
operator|+
literal|" does not exist (department "
operator|+
name|deptCode
operator|+
literal|")."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|fname
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"firstName"
argument_list|)
decl_stmt|;
name|String
name|mname
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"middleName"
argument_list|)
decl_stmt|;
name|String
name|lname
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"lastName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lname
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|i
init|=
name|iInstructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|lname
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
operator|&&
operator|(
name|fname
operator|==
literal|null
operator|||
name|fname
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|mname
operator|==
literal|null
operator|||
name|mname
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
operator|)
operator|&&
name|deptCode
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|instructor
return|;
block|}
block|}
name|warn
argument_list|(
literal|"Instructor "
operator|+
operator|(
name|fname
operator|==
literal|null
condition|?
literal|""
else|:
name|fname
operator|+
literal|" "
operator|)
operator|+
operator|(
name|mname
operator|==
literal|null
condition|?
literal|""
else|:
name|mname
operator|+
literal|" "
operator|)
operator|+
name|lname
operator|+
literal|" does not exist (department "
operator|+
name|deptCode
operator|+
literal|")."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|DepartmentalInstructor
name|lookupInstructor
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|deptCode
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
name|iInstructors
operator|=
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct i from DepartmentalInstructor i left join fetch i.preferences p where i.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|i
init|=
name|iInstructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|externalId
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
operator|&&
name|deptCode
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|instructor
return|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|&&
name|externalId
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
literal|"first-middle-last"
argument_list|)
argument_list|)
operator|&&
name|deptCode
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|instructor
return|;
block|}
block|}
name|warn
argument_list|(
literal|"Instructor "
operator|+
name|externalId
operator|+
literal|" does not exist (department "
operator|+
name|deptCode
operator|+
literal|")."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
name|iDatePatterns
init|=
literal|null
decl_stmt|;
specifier|protected
name|DatePattern
name|lookupDatePattern
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iDatePatterns
operator|==
literal|null
condition|)
block|{
name|iDatePatterns
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DatePattern
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DatePattern
name|pattern
range|:
operator|(
name|List
argument_list|<
name|DatePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DatePattern where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iDatePatterns
operator|.
name|put
argument_list|(
name|pattern
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
return|return
name|iDatePatterns
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
name|iSubparts
init|=
literal|null
decl_stmt|;
specifier|protected
name|SchedulingSubpart
name|lookupSubpart
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iSubparts
operator|==
literal|null
condition|)
block|{
name|iSubparts
operator|=
operator|(
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct ss from SchedulingSubpart ss "
operator|+
literal|"left join fetch ss.instrOfferingConfig as ioc "
operator|+
literal|"left join fetch ioc.instructionalOffering as io "
operator|+
literal|"left join fetch io.courseOfferings as co "
operator|+
literal|"left join fetch ss.classes c "
operator|+
literal|"left join fetch ss.preferences sp "
operator|+
literal|"left join fetch c.preferences cp "
operator|+
literal|"where ss.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId and co.isControl = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|iClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|iSubparts
control|)
name|iClasses
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|subject
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|,
literal|"not-set"
argument_list|)
decl_stmt|;
name|String
name|course
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"course"
argument_list|,
literal|"not-set"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|,
literal|"not-set"
argument_list|)
decl_stmt|;
name|String
name|config
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"config"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|i
init|=
name|iSubparts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suffix
operator|==
literal|null
operator|&&
operator|!
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
operator|!
name|suffix
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|config
operator|!=
literal|null
operator|&&
operator|!
name|config
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|CourseOffering
name|co
range|:
name|subpart
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|subject
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
operator|&&
name|course
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|subpart
return|;
block|}
block|}
block|}
name|warn
argument_list|(
literal|"Scheduling subpart "
operator|+
name|subject
operator|+
literal|" "
operator|+
name|course
operator|+
literal|" "
operator|+
name|type
operator|+
operator|(
name|suffix
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|suffix
operator|)
operator|+
operator|(
name|config
operator|==
literal|null
condition|?
literal|" ("
operator|+
name|config
operator|+
literal|")"
else|:
literal|""
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|Class_
argument_list|>
name|iClasses
init|=
literal|null
decl_stmt|;
specifier|protected
name|Class_
name|lookupClass
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|iClasses
operator|==
literal|null
condition|)
block|{
name|iSubparts
operator|=
operator|(
name|List
argument_list|<
name|SchedulingSubpart
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct ss from SchedulingSubpart ss "
operator|+
literal|"left join fetch ss.instrOfferingConfig as ioc "
operator|+
literal|"left join fetch ioc.instructionalOffering as io "
operator|+
literal|"left join fetch io.courseOfferings as co "
operator|+
literal|"left join fetch ss.classes c "
operator|+
literal|"left join fetch ss.preferences sp "
operator|+
literal|"left join fetch c.preferences cp "
operator|+
literal|"where ss.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId and co.isControl = true"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|iClasses
operator|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|subpart
range|:
name|iSubparts
control|)
name|iClasses
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|subject
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|)
decl_stmt|;
name|String
name|course
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
name|String
name|type
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Class_
argument_list|>
name|i
init|=
name|iClasses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|suffix
operator|!=
literal|null
operator|&&
operator|!
name|suffix
operator|.
name|equals
argument_list|(
name|getClassSuffix
argument_list|(
name|clazz
argument_list|)
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|CourseOffering
name|co
range|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|externalId
operator|!=
literal|null
operator|&&
operator|!
name|externalId
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|co
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|subject
operator|!=
literal|null
operator|&&
operator|!
name|subject
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|equals
argument_list|(
name|co
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
condition|)
continue|continue;
return|return
name|clazz
return|;
block|}
block|}
name|warn
argument_list|(
literal|"Class "
operator|+
operator|(
name|subject
operator|==
literal|null
condition|?
literal|""
else|:
name|subject
operator|+
literal|" "
operator|)
operator|+
operator|(
name|course
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|+
literal|" "
operator|)
operator|+
operator|(
name|type
operator|==
literal|null
condition|?
literal|""
else|:
name|type
operator|+
literal|" "
operator|)
operator|+
operator|(
name|suffix
operator|==
literal|null
condition|?
literal|""
else|:
name|suffix
operator|+
literal|" "
operator|)
operator|+
operator|(
name|externalId
operator|==
literal|null
condition|?
literal|""
else|:
name|externalId
operator|+
literal|" "
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|protected
name|PreferenceGroup
name|lookupPrefGroup
parameter_list|(
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Class_
name|clazz
init|=
name|lookupClass
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|pattern
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|lookupDatePattern
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|clazz
return|;
block|}
if|if
condition|(
literal|"subpart"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|lookupSubpart
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|pattern
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
name|subpart
operator|.
name|setDatePattern
argument_list|(
name|lookupDatePattern
argument_list|(
name|pattern
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|subpart
return|;
block|}
if|if
condition|(
literal|"department"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
return|return
name|lookupDepartment
argument_list|(
name|element
argument_list|)
return|;
if|if
condition|(
literal|"instructor"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|lookupInstructor
argument_list|(
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Element
name|tp
init|=
name|element
operator|.
name|element
argument_list|(
literal|"teachingPref"
argument_list|)
decl_stmt|;
name|instructor
operator|.
name|setMaxLoad
argument_list|(
name|tp
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|parseFloat
argument_list|(
name|tp
operator|.
name|attributeValue
argument_list|(
literal|"maxLoad"
argument_list|,
literal|"0.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setTeachingPreference
argument_list|(
name|tp
operator|==
literal|null
condition|?
literal|null
else|:
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|tp
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sProhibited
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|instructor
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
name|iTimePatterns
init|=
literal|null
decl_stmt|;
specifier|protected
name|TimePattern
name|lookupTimePattern
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iTimePatterns
operator|==
literal|null
condition|)
block|{
name|iTimePatterns
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimePattern
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|TimePattern
name|pattern
range|:
operator|(
name|List
argument_list|<
name|TimePattern
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from TimePattern where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iTimePatterns
operator|.
name|put
argument_list|(
name|pattern
operator|.
name|getName
argument_list|()
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
name|TimePattern
name|tp
init|=
name|iTimePatterns
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Time pattern "
operator|+
name|name
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
name|tp
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Building
argument_list|>
name|iBuildings
init|=
literal|null
decl_stmt|;
specifier|protected
name|Building
name|lookupBuilding
parameter_list|(
name|String
name|abbv
parameter_list|)
block|{
if|if
condition|(
name|iBuildings
operator|==
literal|null
condition|)
block|{
name|iBuildings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Building
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Building
name|building
range|:
operator|(
name|List
argument_list|<
name|Building
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Building where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iBuildings
operator|.
name|put
argument_list|(
name|building
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|building
argument_list|)
expr_stmt|;
block|}
name|Building
name|b
init|=
name|iBuildings
operator|.
name|get
argument_list|(
name|abbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Building "
operator|+
name|abbv
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Room
argument_list|>
name|iRooms
init|=
literal|null
decl_stmt|;
specifier|protected
name|Room
name|lookupRoom
parameter_list|(
name|String
name|buildingAbbv
parameter_list|,
name|String
name|roomNbr
parameter_list|)
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
block|{
name|iRooms
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Room
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Room
name|room
range|:
operator|(
name|List
argument_list|<
name|Room
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Room where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iRooms
operator|.
name|put
argument_list|(
name|room
operator|.
name|getBuildingAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|,
name|room
argument_list|)
expr_stmt|;
block|}
name|Room
name|r
init|=
name|iRooms
operator|.
name|get
argument_list|(
name|buildingAbbv
operator|+
literal|" "
operator|+
name|roomNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Room "
operator|+
name|buildingAbbv
operator|+
literal|" "
operator|+
name|roomNbr
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
name|iLocations
init|=
literal|null
decl_stmt|;
specifier|protected
name|Location
name|lookupLocation
parameter_list|(
name|String
name|label
parameter_list|,
name|String
name|deptCode
parameter_list|)
block|{
if|if
condition|(
name|iLocations
operator|==
literal|null
condition|)
block|{
name|iLocations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Location
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Location
name|location
range|:
operator|(
name|List
argument_list|<
name|Location
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from NonUniversityLocation where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
for|for
control|(
name|RoomDept
name|rd
range|:
name|location
operator|.
name|getRoomDepts
argument_list|()
control|)
block|{
name|iLocations
operator|.
name|put
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|"|"
operator|+
name|rd
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
block|}
name|Location
name|l
init|=
name|iLocations
operator|.
name|get
argument_list|(
name|label
operator|+
literal|"|"
operator|+
name|deptCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Location "
operator|+
name|label
operator|+
literal|" ("
operator|+
name|deptCode
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RoomGroup
argument_list|>
name|iRoomGroups
init|=
literal|null
decl_stmt|;
specifier|protected
name|RoomGroup
name|lookupRoomGroup
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|deptCode
parameter_list|)
block|{
if|if
condition|(
name|iRoomGroups
operator|==
literal|null
condition|)
block|{
name|iRoomGroups
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomGroup
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|RoomGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|RoomGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from RoomGroup where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
if|if
condition|(
name|group
operator|.
name|isGlobal
argument_list|()
condition|)
name|iRoomGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
else|else
name|iRoomGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|group
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|RoomGroup
name|g
init|=
name|iRoomGroups
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
name|g
operator|=
name|iRoomGroups
operator|.
name|get
argument_list|(
name|name
operator|+
literal|"|"
operator|+
name|deptCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Room Group "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|deptCode
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|RoomFeature
argument_list|>
name|iRoomFeatures
init|=
literal|null
decl_stmt|;
specifier|protected
name|RoomFeature
name|lookupRoomFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|deptCode
parameter_list|)
block|{
if|if
condition|(
name|iRoomFeatures
operator|==
literal|null
condition|)
block|{
name|iRoomFeatures
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|RoomFeature
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|GlobalRoomFeature
name|feature
range|:
operator|(
name|List
argument_list|<
name|GlobalRoomFeature
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from GlobalRoomFeature where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iRoomFeatures
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|feature
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentRoomFeature
name|feature
range|:
operator|(
name|List
argument_list|<
name|DepartmentRoomFeature
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentRoomFeature where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iRoomFeatures
operator|.
name|put
argument_list|(
name|feature
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|feature
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
name|RoomFeature
name|f
init|=
name|iRoomFeatures
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
name|f
operator|=
name|iRoomFeatures
operator|.
name|get
argument_list|(
name|name
operator|+
literal|"|"
operator|+
name|deptCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Room Feature "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|deptCode
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DistributionType
argument_list|>
name|iDistributionTypes
init|=
literal|null
decl_stmt|;
specifier|protected
name|DistributionType
name|lookupDistributionType
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iDistributionTypes
operator|==
literal|null
condition|)
block|{
name|iDistributionTypes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DistributionType
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DistributionType
name|type
range|:
operator|(
name|List
argument_list|<
name|DistributionType
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from DistributionType"
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iDistributionTypes
operator|.
name|put
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|DistributionType
name|type
init|=
name|iDistributionTypes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Distribution Type "
operator|+
name|name
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
name|type
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
name|iCourseOfferings
init|=
literal|null
decl_stmt|;
specifier|protected
name|CourseOffering
name|lookupCourse
parameter_list|(
name|String
name|subjectAbbv
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
if|if
condition|(
name|iCourseOfferings
operator|==
literal|null
condition|)
block|{
name|iCourseOfferings
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering co where co.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
name|iCourseOfferings
operator|.
name|put
argument_list|(
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|CourseOffering
name|course
init|=
name|iCourseOfferings
operator|.
name|get
argument_list|(
name|subjectAbbv
operator|+
literal|"|"
operator|+
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course Offering "
operator|+
name|subjectAbbv
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
name|course
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|InstructorAttribute
argument_list|>
name|iInstructorAttributes
init|=
literal|null
decl_stmt|;
specifier|protected
name|InstructorAttribute
name|lookupAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|deptCode
parameter_list|)
block|{
if|if
condition|(
name|iInstructorAttributes
operator|==
literal|null
condition|)
block|{
name|iInstructorAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructorAttribute
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|InstructorAttribute
name|attribute
range|:
operator|(
name|List
argument_list|<
name|InstructorAttribute
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from InstructorAttribute where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
if|if
condition|(
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
name|iInstructorAttributes
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getCode
argument_list|()
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
else|else
name|iInstructorAttributes
operator|.
name|put
argument_list|(
name|attribute
operator|.
name|getCode
argument_list|()
operator|+
literal|"|"
operator|+
name|attribute
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
name|InstructorAttribute
name|attribute
init|=
name|iInstructorAttributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
name|attribute
operator|=
name|iInstructorAttributes
operator|.
name|get
argument_list|(
name|name
operator|+
literal|"|"
operator|+
name|deptCode
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Instructor Attribute "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|deptCode
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
return|return
name|attribute
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ExamPeriod
argument_list|>
name|iExamPeriods
init|=
literal|null
decl_stmt|;
specifier|protected
name|ExamPeriod
name|lookupExamPeriod
parameter_list|(
name|String
name|date
parameter_list|,
name|String
name|start
parameter_list|,
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|iExamPeriods
operator|==
literal|null
condition|)
block|{
name|iExamPeriods
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ExamPeriod
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|ExamPeriod
name|period
range|:
operator|(
name|List
argument_list|<
name|ExamPeriod
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from ExamPeriod where session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|iExamPeriods
operator|.
name|put
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|"|"
operator|+
name|iTimeFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|,
name|period
argument_list|)
expr_stmt|;
name|iExamPeriods
operator|.
name|put
argument_list|(
name|iDateFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartDate
argument_list|()
argument_list|)
operator|+
literal|"|"
operator|+
name|iTimeFormat
operator|.
name|format
argument_list|(
name|period
operator|.
name|getStartTime
argument_list|()
argument_list|)
operator|+
literal|"|"
operator|+
name|period
operator|.
name|getExamType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|period
argument_list|)
expr_stmt|;
block|}
block|}
name|ExamPeriod
name|period
init|=
name|iExamPeriods
operator|.
name|get
argument_list|(
name|date
operator|+
literal|"|"
operator|+
name|start
operator|+
literal|"|"
operator|+
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
name|period
operator|=
name|iExamPeriods
operator|.
name|get
argument_list|(
name|date
operator|+
literal|"|"
operator|+
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Examination Period "
operator|+
name|date
operator|+
literal|" "
operator|+
name|start
operator|+
literal|" ("
operator|+
name|type
operator|+
literal|") does not exist."
argument_list|)
expr_stmt|;
return|return
name|period
return|;
block|}
specifier|protected
name|Integer
name|parseTime
parameter_list|(
name|String
name|timeString
parameter_list|)
throws|throws
name|NumberFormatException
throws|,
name|ParseException
block|{
if|if
condition|(
name|timeString
operator|==
literal|null
operator|||
name|timeString
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|int
name|time
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iTimeFormat
operator|==
literal|null
condition|?
name|timeString
else|:
name|iHHmm
operator|.
name|format
argument_list|(
name|iTimeFormat
operator|.
name|parse
argument_list|(
name|timeString
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|hour
init|=
name|time
operator|/
literal|100
decl_stmt|;
name|int
name|min
init|=
name|time
operator|%
literal|100
decl_stmt|;
return|return
operator|(
literal|60
operator|*
name|hour
operator|+
name|min
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
return|;
block|}
specifier|protected
name|Preference
name|createPreference
parameter_list|(
name|Element
name|element
parameter_list|,
name|PreferenceGroup
name|group
parameter_list|)
throws|throws
name|NumberFormatException
throws|,
name|ParseException
block|{
name|Department
name|ctrDept
init|=
name|group
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
name|Department
name|mngDept
init|=
name|ctrDept
decl_stmt|;
if|if
condition|(
name|group
operator|instanceof
name|Class_
condition|)
name|mngDept
operator|=
operator|(
operator|(
name|Class_
operator|)
name|group
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
name|group
operator|instanceof
name|SchedulingSubpart
condition|)
name|mngDept
operator|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|group
operator|)
operator|.
name|getManagingDept
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"datePref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DatePattern
name|pattern
init|=
name|lookupDatePattern
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Date pattern "
operator|+
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|,
literal|"not-set"
argument_list|)
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DatePatternPref
name|pref
init|=
operator|new
name|DatePatternPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setDatePattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"timePref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|TimePref
name|pref
init|=
operator|new
name|TimePref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|pattern
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
condition|)
block|{
name|TimePattern
name|tp
init|=
name|lookupTimePattern
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|tp
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|pref
operator|.
name|setTimePattern
argument_list|(
name|tp
argument_list|)
expr_stmt|;
block|}
name|TimePatternModel
name|model
init|=
name|pref
operator|.
name|getTimePatternModel
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|element
operator|.
name|elementIterator
argument_list|(
literal|"pref"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|pe
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|dayCode
init|=
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|,
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"day"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|startSlot
init|=
name|parseTime
argument_list|(
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"time"
argument_list|,
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"start"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|level
init|=
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sNeutral
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isExactTime
argument_list|()
condition|)
block|{
name|model
operator|.
name|setExactDays
argument_list|(
name|dayCode
argument_list|)
expr_stmt|;
name|model
operator|.
name|setExactStartSlot
argument_list|(
name|startSlot
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|int
name|endSlot
init|=
name|startSlot
operator|+
name|model
operator|.
name|getSlotsPerMtg
argument_list|()
decl_stmt|;
if|if
condition|(
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"stop"
argument_list|)
operator|!=
literal|null
condition|)
name|endSlot
operator|=
name|parseTime
argument_list|(
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"stop"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"end"
argument_list|)
operator|!=
literal|null
condition|)
name|endSlot
operator|=
name|parseTime
argument_list|(
name|pe
operator|.
name|attributeValue
argument_list|(
literal|"end"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|model
operator|.
name|getNrDays
argument_list|()
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|model
operator|.
name|getDayCode
argument_list|(
name|d
argument_list|)
operator|==
name|dayCode
condition|)
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|model
operator|.
name|getNrTimes
argument_list|()
condition|;
name|t
operator|++
control|)
if|if
condition|(
name|model
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|>=
name|startSlot
operator|&&
name|model
operator|.
name|getStartSlot
argument_list|(
name|t
argument_list|)
operator|+
name|model
operator|.
name|getSlotsPerMtg
argument_list|()
operator|<=
name|endSlot
condition|)
name|model
operator|.
name|setPreference
argument_list|(
name|d
argument_list|,
name|t
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
name|pref
operator|.
name|setPreference
argument_list|(
name|model
operator|.
name|getPreferences
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"buildingPref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Building
name|building
init|=
name|lookupBuilding
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|building
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|BuildingPref
name|pref
init|=
operator|new
name|BuildingPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setBuilding
argument_list|(
name|building
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"roomPref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|buildingAbbv
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"building"
argument_list|)
decl_stmt|;
name|String
name|roomNbr
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|String
name|label
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|buildingAbbv
operator|!=
literal|null
operator|&&
name|roomNbr
operator|!=
literal|null
condition|)
block|{
name|Room
name|room
init|=
name|lookupRoom
argument_list|(
name|buildingAbbv
argument_list|,
name|roomNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RoomPref
name|pref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setRoom
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|else if
condition|(
name|label
operator|!=
literal|null
condition|)
block|{
name|Location
name|location
init|=
name|lookupLocation
argument_list|(
name|label
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|,
name|mngDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RoomPref
name|pref
init|=
operator|new
name|RoomPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setRoom
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
if|if
condition|(
literal|"groupPref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RoomGroup
name|rg
init|=
name|lookupRoomGroup
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"group"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|,
name|mngDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rg
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RoomGroupPref
name|pref
init|=
operator|new
name|RoomGroupPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setRoomGroup
argument_list|(
name|rg
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"featurePref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|RoomFeature
name|feature
init|=
name|lookupRoomFeature
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"feature"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|,
name|mngDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RoomFeaturePref
name|pref
init|=
operator|new
name|RoomFeaturePref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setRoomFeature
argument_list|(
name|feature
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"distributionPref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DistributionType
name|type
init|=
name|lookupDistributionType
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DistributionPref
name|pref
init|=
operator|new
name|DistributionPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setDistributionType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setStructure
argument_list|(
name|DistributionPref
operator|.
name|Structure
operator|.
name|valueOf
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"structure"
argument_list|,
name|DistributionPref
operator|.
name|Structure
operator|.
name|values
argument_list|()
index|[
name|Integer
operator|.
name|parseInt
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"grouping"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
index|]
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setDistributionObjects
argument_list|(
operator|new
name|HashSet
argument_list|<
name|DistributionObject
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|element
operator|.
name|elementIterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|de
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"subpart"
operator|.
name|equals
argument_list|(
name|de
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|lookupSubpart
argument_list|(
name|de
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|!=
literal|null
condition|)
block|{
name|DistributionObject
name|obj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setDistributionPref
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setPrefGroup
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setSequenceNumber
argument_list|(
literal|1
operator|+
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|de
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|Class_
name|clazz
init|=
name|lookupClass
argument_list|(
name|de
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
name|DistributionObject
name|obj
init|=
operator|new
name|DistributionObject
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setDistributionPref
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setPrefGroup
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setSequenceNumber
argument_list|(
literal|1
operator|+
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pref
operator|.
name|getDistributionObjects
argument_list|()
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"instructorPref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|lookupInstructor
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"instructor"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|,
name|ctrDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|InstructorPref
name|pref
init|=
operator|new
name|InstructorPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"coursePref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|CourseOffering
name|course
init|=
name|lookupCourse
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"subject"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"course"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|InstructorCoursePref
name|pref
init|=
operator|new
name|InstructorCoursePref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"attributePref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|InstructorAttribute
name|attribute
init|=
name|lookupAttribute
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"attribute"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"department"
argument_list|,
name|ctrDept
operator|.
name|getDeptCode
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|InstructorAttributePref
name|pref
init|=
operator|new
name|InstructorAttributePref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setAttribute
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
if|if
condition|(
literal|"periodPref"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|ExamPeriod
name|period
init|=
name|lookupExamPeriod
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"date"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"start"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|,
name|element
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|,
literal|"not-set"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|period
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ExamPeriodPref
name|pref
init|=
operator|new
name|ExamPeriodPref
argument_list|()
decl_stmt|;
name|pref
operator|.
name|setExamPeriod
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|pref
operator|.
name|setPrefLevel
argument_list|(
name|PreferenceLevel
operator|.
name|getPreferenceLevel
argument_list|(
name|element
operator|.
name|attributeValue
argument_list|(
literal|"level"
argument_list|,
name|PreferenceLevel
operator|.
name|sRequired
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

