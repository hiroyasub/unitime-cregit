begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourseGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculaExport
extends|extends
name|BaseExport
block|{
specifier|protected
name|DecimalFormat
name|iShareDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0000"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.academicArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|boolean
name|externalIds
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.curricula.externalIds"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|minimalistic
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.curricula.minimalistic"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
literal|"curricula"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|addDocType
argument_list|(
literal|"curricula"
argument_list|,
literal|"-//UniTime//DTD University Course Timetabling/EN"
argument_list|,
literal|"http://www.unitime.org/interface/Curricula_3_2.dtd"
argument_list|)
expr_stmt|;
if|if
condition|(
name|curricula
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No curricula defined for "
operator|+
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
throw|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
operator|new
name|TreeSet
argument_list|<
name|Curriculum
argument_list|>
argument_list|(
name|curricula
argument_list|)
control|)
block|{
name|Element
name|curriculumElement
init|=
name|root
operator|.
name|addElement
argument_list|(
literal|"curriculum"
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|groupId
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|minimalistic
operator|&&
name|curriculum
operator|.
name|getAbbv
argument_list|()
operator|!=
literal|null
condition|)
name|curriculumElement
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|minimalistic
operator|&&
name|curriculum
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|curriculumElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|acadAreaElement
init|=
name|curriculumElement
operator|.
name|addElement
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalIds
operator|&&
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|acadAreaElement
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|acadAreaElement
operator|.
name|addAttribute
argument_list|(
literal|"abbreviation"
argument_list|,
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|minimalistic
operator|&&
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|departmentElement
init|=
name|curriculumElement
operator|.
name|addElement
argument_list|(
literal|"department"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalIds
operator|&&
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|departmentElement
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|departmentElement
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|Collection
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|Element
name|majorElement
init|=
name|curriculumElement
operator|.
name|addElement
argument_list|(
literal|"major"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalIds
operator|&&
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|majorElement
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|major
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|majorElement
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurriculumClassification
name|clasf
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|curriculum
operator|.
name|getClassifications
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|clasfElement
init|=
name|curriculumElement
operator|.
name|addElement
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|minimalistic
operator|&&
name|clasf
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clasfElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|acadClasfElement
init|=
name|clasfElement
operator|.
name|addElement
argument_list|(
literal|"academicClassification"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalIds
operator|&&
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|acadClasfElement
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|acadClasfElement
operator|.
name|addAttribute
argument_list|(
literal|"code"
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|!=
literal|null
condition|)
name|clasfElement
operator|.
name|addAttribute
argument_list|(
literal|"enrollment"
argument_list|,
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|course
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|(
name|clasf
operator|.
name|getCourses
argument_list|()
argument_list|)
control|)
block|{
name|Element
name|courseElement
init|=
name|clasfElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalIds
operator|&&
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"externalId"
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|minimalistic
operator|||
name|course
operator|.
name|getPercShare
argument_list|()
operator|!=
literal|1.0f
condition|)
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|iShareDF
operator|.
name|format
argument_list|(
name|course
operator|.
name|getPercShare
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourseGroup
name|group
range|:
operator|(
name|Collection
argument_list|<
name|CurriculumCourseGroup
argument_list|>
operator|)
name|course
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|Integer
name|gid
init|=
name|groupId
operator|.
name|get
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gid
operator|==
literal|null
condition|)
block|{
name|gid
operator|=
name|groupId
operator|.
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
name|groupId
operator|.
name|put
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|gid
argument_list|)
expr_stmt|;
block|}
name|Element
name|groupElement
init|=
name|courseElement
operator|.
name|addElement
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|groupElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|gid
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|minimalistic
operator|&&
name|group
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
name|groupElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|minimalistic
operator|||
name|group
operator|.
name|getType
argument_list|()
operator|!=
literal|0
condition|)
name|groupElement
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|group
operator|.
name|getType
argument_list|()
operator|==
literal|1
condition|?
literal|"REQ"
else|:
literal|"OPT"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"curricula.xml"
block|,
literal|"PWL"
block|,
literal|"2010"
block|,
literal|"Spring"
block|}
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|args
index|[
literal|2
index|]
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" not found!"
argument_list|)
throw|;
operator|new
name|CurriculaExport
argument_list|()
operator|.
name|saveXml
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|session
argument_list|,
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

