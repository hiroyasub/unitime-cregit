begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSchedulingStatusImport
extends|extends
name|BaseImport
block|{
specifier|protected
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|h24
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
specifier|protected
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|timeFormat
init|=
literal|null
decl_stmt|;
specifier|protected
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|dateFormat
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|root
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"studentStatuses"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Given XML file is not a Student Scheduling Statuses load file."
argument_list|)
throw|;
block|}
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|String
name|campus
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|root
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
if|if
condition|(
name|campus
operator|!=
literal|null
operator|&&
name|year
operator|!=
literal|null
operator|&&
name|term
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
block|}
name|boolean
name|incremental
init|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|dateFormat
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"dateFormat"
argument_list|,
literal|"yyyy/M/d"
argument_list|)
argument_list|)
expr_stmt|;
name|timeFormat
operator|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|root
operator|.
name|attributeValue
argument_list|(
literal|"timeFormat"
argument_list|,
literal|"HHmm"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentSectioningStatus
argument_list|>
name|statuses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StudentSectioningStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|StudentSectioningStatus
operator|.
name|findAll
argument_list|(
name|session
operator|==
literal|null
condition|?
literal|null
else|:
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
block|{
name|statuses
operator|.
name|put
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|CourseType
argument_list|>
name|courseTypes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CourseType
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseType
name|type
range|:
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|getHibSession
argument_list|()
argument_list|)
control|)
block|{
name|courseTypes
operator|.
name|put
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|StudentSectioningStatus
argument_list|,
name|String
argument_list|>
name|fallbacks
init|=
operator|new
name|HashMap
argument_list|<
name|StudentSectioningStatus
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentSectioningStatus
argument_list|>
name|all
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StudentSectioningStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|root
operator|.
name|elementIterator
argument_list|(
literal|"status"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|statusEl
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|ref
init|=
name|statusEl
operator|.
name|attributeValue
argument_list|(
literal|"reference"
argument_list|)
decl_stmt|;
name|StudentSectioningStatus
name|status
init|=
name|statuses
operator|.
name|remove
argument_list|(
name|ref
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|status
operator|=
operator|new
name|StudentSectioningStatus
argument_list|()
expr_stmt|;
name|status
operator|.
name|setReference
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|status
operator|.
name|setTypes
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseType
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|status
operator|.
name|setLabel
argument_list|(
name|statusEl
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setSession
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|statusEl
operator|.
name|attributeValue
argument_list|(
literal|"session"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|?
name|session
else|:
literal|null
argument_list|)
expr_stmt|;
name|Element
name|permissionsEl
init|=
name|statusEl
operator|.
name|element
argument_list|(
literal|"permissions"
argument_list|)
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|permissionsEl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StudentSectioningStatus
operator|.
name|Option
name|option
range|:
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|permissionsEl
operator|.
name|attributeValue
argument_list|(
name|getAttribute
argument_list|(
name|option
argument_list|)
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|status
operator|.
name|addOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
name|Element
name|datesEl
init|=
name|statusEl
operator|.
name|element
argument_list|(
literal|"effective-dates"
argument_list|)
decl_stmt|;
if|if
condition|(
name|datesEl
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|setEffectiveStartDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStartPeriod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStopDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|status
operator|.
name|setEffectiveStopPeriod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|startDate
init|=
name|datesEl
operator|.
name|attributeValue
argument_list|(
literal|"startDate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startDate
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|status
operator|.
name|setEffectiveStartDate
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|startDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|status
operator|.
name|setEffectiveStartDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|warn
argument_list|(
literal|"Failed to parse start date "
operator|+
name|startDate
operator|+
literal|" (status "
operator|+
name|ref
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|startPeriod
init|=
name|datesEl
operator|.
name|attributeValue
argument_list|(
literal|"startPeriod"
argument_list|)
decl_stmt|;
if|if
condition|(
name|startPeriod
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|time
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|h24
operator|.
name|format
argument_list|(
name|timeFormat
operator|.
name|parse
argument_list|(
name|startPeriod
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|status
operator|.
name|setEffectiveStartPeriod
argument_list|(
literal|12
operator|*
operator|(
name|time
operator|/
literal|100
operator|)
operator|+
operator|(
operator|(
name|time
operator|%
literal|100
operator|)
operator|/
literal|5
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|status
operator|.
name|setEffectiveStartPeriod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|warn
argument_list|(
literal|"Failed to parse start period "
operator|+
name|startPeriod
operator|+
literal|" (status "
operator|+
name|ref
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|stopDate
init|=
name|datesEl
operator|.
name|attributeValue
argument_list|(
literal|"stopDate"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopDate
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|status
operator|.
name|setEffectiveStopDate
argument_list|(
name|dateFormat
operator|.
name|parse
argument_list|(
name|stopDate
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|status
operator|.
name|setEffectiveStopDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|warn
argument_list|(
literal|"Failed to parse stop date "
operator|+
name|stopDate
operator|+
literal|" (status "
operator|+
name|ref
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|stopPeriod
init|=
name|datesEl
operator|.
name|attributeValue
argument_list|(
literal|"stopPeriod"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stopPeriod
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|time
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|h24
operator|.
name|format
argument_list|(
name|timeFormat
operator|.
name|parse
argument_list|(
name|stopPeriod
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|status
operator|.
name|setEffectiveStopPeriod
argument_list|(
literal|12
operator|*
operator|(
name|time
operator|/
literal|100
operator|)
operator|+
operator|(
operator|(
name|time
operator|%
literal|100
operator|)
operator|/
literal|5
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|status
operator|.
name|setEffectiveStopPeriod
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|warn
argument_list|(
literal|"Failed to parse stop period "
operator|+
name|stopPeriod
operator|+
literal|" (status "
operator|+
name|ref
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|status
operator|.
name|getTypes
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|statusEl
operator|.
name|elementIterator
argument_list|(
literal|"course"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|courseEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseType
name|type
init|=
name|courseTypes
operator|.
name|get
argument_list|(
name|courseEl
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unknown course type "
operator|+
name|courseEl
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" (status "
operator|+
name|ref
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|status
operator|.
name|getTypes
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|messageEl
init|=
name|statusEl
operator|.
name|element
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
if|if
condition|(
name|messageEl
operator|==
literal|null
condition|)
name|status
operator|.
name|setMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|status
operator|.
name|setMessage
argument_list|(
name|messageEl
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|fallbackEl
init|=
name|statusEl
operator|.
name|element
argument_list|(
literal|"fallback"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallbackEl
operator|==
literal|null
condition|)
block|{
name|status
operator|.
name|setFallBackStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
name|fallbacks
operator|.
name|put
argument_list|(
name|status
argument_list|,
name|fallbackEl
operator|.
name|attributeValue
argument_list|(
literal|"reference"
argument_list|)
argument_list|)
expr_stmt|;
name|all
operator|.
name|put
argument_list|(
name|ref
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incremental
condition|)
block|{
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|statuses
operator|.
name|values
argument_list|()
control|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|statuses
operator|.
name|values
argument_list|()
control|)
name|all
operator|.
name|put
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StudentSectioningStatus
argument_list|,
name|String
argument_list|>
name|e
range|:
name|fallbacks
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StudentSectioningStatus
name|fallback
init|=
name|all
operator|.
name|get
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fallback
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Unknown fallback status "
operator|+
name|e
operator|.
name|getValue
argument_list|()
operator|+
literal|" (status "
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getReference
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|setFallBackStatus
argument_list|(
name|fallback
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|getAttribute
parameter_list|(
name|StudentSectioningStatus
operator|.
name|Option
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|enabled
case|:
return|return
literal|"assistantEnabled"
return|;
case|case
name|admin
case|:
return|return
literal|"assistantAdminEdit"
return|;
case|case
name|advisor
case|:
return|return
literal|"assistantAdvisorEdit"
return|;
case|case
name|enrollment
case|:
return|return
literal|"assistantStudentEdit"
return|;
case|case
name|regenabled
case|:
return|return
literal|"requestsEnabled"
return|;
case|case
name|regadmin
case|:
return|return
literal|"requestsAdminEdit"
return|;
case|case
name|regadvisor
case|:
return|return
literal|"requestsAdvisorEdit"
return|;
case|case
name|registration
case|:
return|return
literal|"requestsStudentEdit"
return|;
case|case
name|email
case|:
return|return
literal|"emaiNotifications"
return|;
case|case
name|nobatch
case|:
return|return
literal|"doNotScheduleInBatch"
return|;
case|case
name|notype
case|:
return|return
literal|"mustHaveCourseType"
return|;
case|case
name|waitlist
case|:
return|return
literal|"waitListing"
return|;
case|case
name|advcanset
case|:
return|return
literal|"advisorCanSetStatus"
return|;
case|case
name|specreg
case|:
return|return
literal|"specialRegistration"
return|;
case|case
name|reqval
case|:
return|return
literal|"requestValidation"
return|;
default|default:
return|return
name|option
operator|.
name|name
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

