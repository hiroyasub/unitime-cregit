begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.1 (University Timetabling Application)  * Copyright (C) 2008, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 2 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program; if not, write to the Free Software Foundation, Inc.,  * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningImport
extends|extends
name|BaseImport
block|{
specifier|public
specifier|static
name|boolean
name|sStudentId10
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|sUseCache
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sDF10
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0000000000"
argument_list|)
decl_stmt|;
specifier|public
name|StudentSectioningImport
parameter_list|()
block|{
block|}
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|String
name|version
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"version"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkVersion
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|fatal
argument_list|(
literal|"Version "
operator|+
name|version
operator|+
literal|" not supported."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rootElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"request"
argument_list|)
condition|)
block|{
name|importRequest
argument_list|(
name|rootElement
argument_list|)
expr_stmt|;
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|checkVersion
parameter_list|(
name|String
name|version
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|importRequest
parameter_list|(
name|Element
name|requestElement
parameter_list|)
block|{
name|String
name|campus
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
if|if
condition|(
name|campus
operator|==
literal|null
condition|)
block|{
name|fatal
argument_list|(
literal|"Campus attribute is missing."
argument_list|)
expr_stmt|;
return|return;
block|}
name|debug
argument_list|(
literal|"Campus: "
operator|+
name|campus
argument_list|)
expr_stmt|;
name|String
name|year
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
if|if
condition|(
name|year
operator|==
literal|null
condition|)
block|{
name|fatal
argument_list|(
literal|"Year attribute is missing."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|term
operator|==
literal|null
condition|)
block|{
name|fatal
argument_list|(
literal|"Term attribute is missing."
argument_list|)
expr_stmt|;
return|return;
block|}
name|debug
argument_list|(
literal|"Year: "
operator|+
name|year
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"Term: "
operator|+
name|term
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|fatal
argument_list|(
literal|"Session "
operator|+
name|year
operator|+
name|term
operator|+
literal|" for "
operator|+
name|campus
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|requestElement
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|importStudent
argument_list|(
name|session
argument_list|,
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|flushIfNeeded
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|importStudent
parameter_list|(
name|Session
name|session
parameter_list|,
name|Element
name|studentElement
parameter_list|)
block|{
name|String
name|studentId
init|=
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"No student id given (attribute key of element student)."
argument_list|)
expr_stmt|;
return|return;
block|}
name|debug
argument_list|(
literal|"Processing student "
operator|+
name|studentId
argument_list|)
expr_stmt|;
name|Element
name|demographicsElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateDemographics"
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sStudentId10
condition|?
name|sDF10
operator|.
name|format
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|studentId
argument_list|)
argument_list|)
else|:
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|debug
argument_list|(
literal|"Student "
operator|+
name|studentId
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
if|if
condition|(
name|demographicsElement
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"Student "
operator|+
name|studentId
operator|+
literal|" not found, but no demographics information provided."
argument_list|)
expr_stmt|;
return|return;
block|}
name|student
operator|=
name|createStudent
argument_list|(
name|session
argument_list|,
name|studentId
argument_list|,
name|demographicsElement
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|demographicsElement
operator|!=
literal|null
condition|)
name|updateStudent
argument_list|(
name|student
argument_list|,
name|demographicsElement
argument_list|)
expr_stmt|;
block|}
name|Element
name|reqCoursesElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateCourseRequests"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqCoursesElement
operator|!=
literal|null
condition|)
block|{
name|importCourseRequests
argument_list|(
name|student
argument_list|,
name|reqCoursesElement
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Student
name|createStudent
parameter_list|(
name|Session
name|session
parameter_list|,
name|String
name|studentId
parameter_list|,
name|Element
name|demographicsElement
parameter_list|)
block|{
name|Student
name|student
init|=
operator|new
name|Student
argument_list|()
decl_stmt|;
name|student
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|student
operator|.
name|setExternalUniqueId
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setFreeTimeCategory
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setSchedulePreference
argument_list|(
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|updateStudent
argument_list|(
name|student
argument_list|,
name|demographicsElement
argument_list|)
expr_stmt|;
return|return
name|student
return|;
block|}
specifier|public
name|void
name|updateStudent
parameter_list|(
name|Student
name|student
parameter_list|,
name|Element
name|demographicsElement
parameter_list|)
block|{
name|Element
name|name
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|student
operator|.
name|setFirstName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMiddleName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"middle"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"last"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Element
name|email
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"email"
argument_list|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
condition|)
block|{
name|student
operator|.
name|setEmail
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"email"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//import majors
if|if
condition|(
name|student
operator|.
name|getPosMajors
argument_list|()
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setPosMajors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|.
name|getPosMajors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|majorElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|majorElement
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMajor
name|major
init|=
name|PosMajor
operator|.
name|findByCode
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
comment|//import minors
if|if
condition|(
name|student
operator|.
name|getPosMinors
argument_list|()
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setPosMinors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|.
name|getPosMinors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|minorElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|minorElement
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMinor
name|minor
init|=
name|PosMinor
operator|.
name|findByCode
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
comment|//Import academic areas and classifications
if|if
condition|(
name|student
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setAcademicAreaClassifications
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AcademicAreaClassification
name|aac
init|=
operator|(
name|AcademicAreaClassification
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|aac
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|acadAreaElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|abbv
init|=
name|acadAreaElement
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|String
name|code
init|=
name|acadAreaElement
operator|.
name|attributeValue
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
name|AcademicArea
name|area
init|=
name|AcademicArea
operator|.
name|findByAbbv
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|abbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|abbv
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|AcademicClassification
name|clasf
init|=
name|AcademicClassification
operator|.
name|findByCode
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|AcademicAreaClassification
name|aac
init|=
operator|new
name|AcademicAreaClassification
argument_list|()
decl_stmt|;
name|aac
operator|.
name|setAcademicArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|aac
operator|.
name|setAcademicClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|aac
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|aac
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|acadAreaElement
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|majorElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|majorCode
init|=
name|majorElement
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMajor
name|major
init|=
name|PosMajor
operator|.
name|findByCodeAcadAreaId
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|majorCode
argument_list|,
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|acadAreaElement
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|minorElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|minorCode
init|=
name|minorElement
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMinor
name|minor
init|=
name|PosMinor
operator|.
name|findByCodeAcadAreaId
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|minorCode
argument_list|,
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
block|}
comment|//import accomodations
if|if
condition|(
name|student
operator|.
name|getAccomodations
argument_list|()
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setAccomodations
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"disability"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|disabilityElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|disabilityElement
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|StudentAccomodation
name|accomodation
init|=
name|StudentAccomodation
operator|.
name|findByAbbv
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|accomodation
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Accomodation "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|add
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
block|}
comment|//import groups
if|if
condition|(
name|student
operator|.
name|getGroups
argument_list|()
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"groupAffiliation"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|disabilityElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|disabilityElement
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|StudentGroup
name|group
init|=
name|StudentGroup
operator|.
name|findByAbbv
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Accomodation "
operator|+
name|code
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|TimeLocation
name|makeTime
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|String
name|days
parameter_list|,
name|String
name|startTime
parameter_list|,
name|String
name|endTime
parameter_list|,
name|String
name|length
parameter_list|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|,
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_SHORT
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|days
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|,
name|idx
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
expr_stmt|;
name|idx
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|startSlot
init|=
operator|(
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|breakTime
init|=
literal|0
decl_stmt|;
name|int
name|nrSlots
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|breakTime
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
operator|-
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|%
literal|100
operator|)
operator|+
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
expr_stmt|;
name|nrSlots
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
else|else
block|{
name|nrSlots
operator|=
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
return|return
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|nrSlots
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|public
name|void
name|importCourseRequests
parameter_list|(
name|Student
name|student
parameter_list|,
name|Element
name|reqCoursesElement
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|reqCoursesElement
operator|.
name|attributeValue
argument_list|(
literal|"commit"
argument_list|)
argument_list|)
condition|)
return|return;
if|if
condition|(
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|setCourseDemands
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|demand
init|=
operator|(
name|CourseDemand
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|demand
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|reqCoursesElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|priority
operator|++
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|waitList
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"waitlist"
argument_list|)
decl_stmt|;
name|String
name|alternative
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"alternative"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"courseOffering"
argument_list|)
condition|)
block|{
name|CourseDemand
name|demand
init|=
operator|new
name|CourseDemand
argument_list|()
decl_stmt|;
name|demand
operator|.
name|setAlternative
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setPriority
argument_list|(
operator|new
name|Integer
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setWaitlist
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|waitList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"  "
operator|+
operator|(
name|priority
operator|+
literal|1
operator|)
operator|+
literal|". demand (wait="
operator|+
name|demand
operator|.
name|isWaitlist
argument_list|()
operator|+
literal|", alt="
operator|+
name|demand
operator|.
name|isAlternative
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|String
name|subjectArea
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|courseNbr
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
decl_stmt|;
name|Integer
name|credit
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|CourseOffering
name|courseOffering
init|=
name|getCourseOffering
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|subjectArea
argument_list|,
name|courseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Course "
operator|+
name|subjectArea
operator|+
literal|" "
operator|+
name|courseNbr
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|ord
init|=
literal|0
decl_stmt|;
name|CourseRequest
name|request
init|=
operator|new
name|CourseRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setCourseOffering
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAllowOverlap
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCredit
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOrder
argument_list|(
operator|new
name|Integer
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCourseDemand
argument_list|(
name|demand
argument_list|)
expr_stmt|;
name|demand
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"    "
operator|+
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|requestElement
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|altElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|altSubjectArea
init|=
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
decl_stmt|;
name|String
name|altCourseNbr
init|=
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
decl_stmt|;
name|CourseOffering
name|altCourseOffering
init|=
name|getCourseOffering
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|altSubjectArea
argument_list|,
name|altCourseNbr
argument_list|)
decl_stmt|;
if|if
condition|(
name|altCourseOffering
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Course "
operator|+
name|altSubjectArea
operator|+
literal|" "
operator|+
name|altCourseNbr
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Integer
name|altCredit
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|ord
operator|++
expr_stmt|;
name|CourseRequest
name|altRequest
init|=
operator|new
name|CourseRequest
argument_list|()
decl_stmt|;
name|altRequest
operator|.
name|setCourseOffering
argument_list|(
name|altCourseOffering
argument_list|)
expr_stmt|;
name|altRequest
operator|.
name|setAllowOverlap
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|)
expr_stmt|;
name|altRequest
operator|.
name|setCredit
argument_list|(
name|altCredit
argument_list|)
expr_stmt|;
name|altRequest
operator|.
name|setOrder
argument_list|(
operator|new
name|Integer
argument_list|(
name|ord
argument_list|)
argument_list|)
expr_stmt|;
name|altRequest
operator|.
name|setCourseDemand
argument_list|(
name|demand
argument_list|)
expr_stmt|;
name|demand
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|altRequest
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"    "
operator|+
name|altCourseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|demand
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|demand
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"freeTime"
argument_list|)
condition|)
block|{
name|String
name|days
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|TimeLocation
name|time
init|=
name|makeTime
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|FreeTime
name|ft
init|=
operator|new
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setCategory
argument_list|(
operator|new
name|Integer
argument_list|(
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setDayCode
argument_list|(
operator|new
name|Integer
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
operator|new
name|Integer
argument_list|(
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setName
argument_list|(
name|time
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStartSlot
argument_list|(
operator|new
name|Integer
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|CourseDemand
name|demand
init|=
operator|new
name|CourseDemand
argument_list|()
decl_stmt|;
name|demand
operator|.
name|setAlternative
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setPriority
argument_list|(
operator|new
name|Integer
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setWaitlist
argument_list|(
operator|new
name|Boolean
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|waitList
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setTimestamp
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|demand
operator|.
name|setFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|demand
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|demand
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"  "
operator|+
operator|(
name|priority
operator|+
literal|1
operator|)
operator|+
literal|". demand (wait="
operator|+
name|demand
operator|.
name|isWaitlist
argument_list|()
operator|+
literal|", alt="
operator|+
name|demand
operator|.
name|isAlternative
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|debug
argument_list|(
literal|"    free "
operator|+
name|time
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|warn
argument_list|(
literal|"Request element "
operator|+
name|requestElement
operator|.
name|getName
argument_list|()
operator|+
literal|" not recognized."
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Hashtable
name|iCourseTable
init|=
literal|null
decl_stmt|;
specifier|protected
name|CourseOffering
name|getCourseOffering
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|subjectArea
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sUseCache
condition|)
return|return
name|CourseOffering
operator|.
name|findBySubjectAreaCourseNbr
argument_list|(
name|sessionId
argument_list|,
name|subjectArea
argument_list|,
name|courseNbr
argument_list|)
return|;
if|if
condition|(
name|iCourseTable
operator|==
literal|null
condition|)
block|{
name|iCourseTable
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|debug
argument_list|(
literal|"Creating course table..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|CourseOffering
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|courseOffering
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
name|subjTable
init|=
operator|(
name|Hashtable
operator|)
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subjTable
operator|==
literal|null
condition|)
block|{
name|subjTable
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|iCourseTable
operator|.
name|put
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|,
name|subjTable
argument_list|)
expr_stmt|;
block|}
name|subjTable
operator|.
name|put
argument_list|(
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|courseOffering
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
name|subjTable
init|=
operator|(
name|Hashtable
operator|)
name|iCourseTable
operator|.
name|get
argument_list|(
name|subjectArea
argument_list|)
decl_stmt|;
return|return
operator|(
name|subjTable
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|CourseOffering
operator|)
name|subjTable
operator|.
name|get
argument_list|(
name|courseNbr
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"jdbc:oracle:thin:@tamarind.smas.purdue.edu:1521:xe"
block|,
literal|"c:\\test\\studentRequests.xml"
block|}
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
operator|new
name|StudentSectioningImport
argument_list|()
operator|.
name|loadXml
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

