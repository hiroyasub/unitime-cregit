begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequestOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningImport
extends|extends
name|BaseImport
block|{
specifier|public
name|StudentSectioningImport
parameter_list|()
block|{
block|}
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|boolean
name|trimLeadingZerosFromExternalId
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.data.exchange.trim.externalId"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|campus
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|boolean
name|keepEnrollments
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"keepEnrollments"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Student s where s.session.uniqueId=:sessionId and s.externalUniqueId is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|students
operator|.
name|put
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|abbv2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicClassification where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2clasf
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMajor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2major
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
operator|(
name|List
argument_list|<
name|PosMinor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMinor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2minor
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|code2group
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2group
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|code2accomodation
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
operator|(
name|List
argument_list|<
name|StudentAccomodation
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentAccomodation where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2accomodation
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
name|name2course
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering where subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|name2course
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|studentElement
init|=
operator|(
name|Element
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalId
operator|==
literal|null
condition|)
continue|continue;
while|while
condition|(
name|trimLeadingZerosFromExternalId
operator|&&
name|externalId
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
name|externalId
operator|=
name|externalId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Element
name|demographicsElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateDemographics"
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
name|students
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|demographicsElement
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"Student "
operator|+
name|externalId
operator|+
literal|" not found, but no demographics information provided."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|=
operator|new
name|Student
argument_list|()
expr_stmt|;
name|student
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|student
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setFreeTimeCategory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|setSchedulePreference
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|setClassEnrollments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setCourseDemands
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|name
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|student
operator|.
name|setFirstName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMiddleName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"middle"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"last"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|.
name|setFirstName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
literal|"Unknown"
argument_list|)
expr_stmt|;
block|}
name|Element
name|email
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"email"
argument_list|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
condition|)
name|student
operator|.
name|setEmail
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAcademicAreaClassifications
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicAreaClassification
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setPosMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setPosMinors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMinor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAccomodations
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAccomodation
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|demographicsElement
operator|!=
literal|null
condition|)
block|{
name|Element
name|name
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|String
name|fName
init|=
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
decl_stmt|;
name|String
name|mName
init|=
name|name
operator|.
name|attributeValue
argument_list|(
literal|"middle"
argument_list|)
decl_stmt|;
name|String
name|lName
init|=
name|name
operator|.
name|attributeValue
argument_list|(
literal|"last"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eq
argument_list|(
name|fName
argument_list|,
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setFirstName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|mName
argument_list|,
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMiddleName
argument_list|(
name|mName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|lName
argument_list|,
name|student
operator|.
name|getLastName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setLastName
argument_list|(
name|lName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|email
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"email"
argument_list|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|eq
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|student
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setEmail
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|demographicsElement
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicAreaClassification
argument_list|>
name|sAreaClasf
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicAreaClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicAreaClassification
name|aac
range|:
name|student
operator|.
name|getAcademicAreaClassifications
argument_list|()
control|)
name|sAreaClasf
operator|.
name|put
argument_list|(
name|aac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|aac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|aac
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|sMajors
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|student
operator|.
name|getPosMajors
argument_list|()
control|)
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|sMajors
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|sMinors
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
name|student
operator|.
name|getPosMinors
argument_list|()
control|)
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|sMinors
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sAreaClasf
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|clasf
argument_list|)
operator|==
literal|null
condition|)
block|{
name|AcademicAreaClassification
name|aac
init|=
operator|new
name|AcademicAreaClassification
argument_list|()
decl_stmt|;
if|if
condition|(
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|area
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|aac
operator|.
name|setAcademicArea
argument_list|(
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|aac
operator|.
name|setAcademicClassification
argument_list|(
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
argument_list|)
expr_stmt|;
name|aac
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|aac
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i3
init|=
name|e
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|f
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|f
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sMajors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|PosMajor
name|major
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|area
operator|+
literal|" "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i3
init|=
name|e
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|f
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|f
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sMinors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|PosMinor
name|minor
init|=
name|code2minor
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Minor "
operator|+
name|area
operator|+
literal|" "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|f
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|f
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|PosMajor
name|major
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|major
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sMajors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|f
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|f
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|PosMinor
name|minor
init|=
name|code2minor
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|minor
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sMinors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|student
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|AcademicAreaClassification
name|aac
range|:
name|sAreaClasf
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAcademicAreaClassifications
argument_list|()
operator|.
name|remove
argument_list|(
name|aac
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|aac
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|major
range|:
name|sMajors
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getPosMajors
argument_list|()
operator|.
name|remove
argument_list|(
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMinor
name|minor
range|:
name|sMinors
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getPosMinors
argument_list|()
operator|.
name|remove
argument_list|(
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|sGroups
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
name|sGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"groupAffiliation"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sGroups
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentGroup
name|group
init|=
name|code2group
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student group "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentGroup
name|group
range|:
name|sGroups
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|sAccomodations
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
name|sAccomodations
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"disability"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sAccomodations
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentAccomodation
name|accomodation
init|=
name|code2accomodation
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|accomodation
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student accomodation "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|add
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|sAccomodations
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|remove
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|updatedStudents
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|Element
name|reqCoursesElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateCourseRequests"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqCoursesElement
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|reqCoursesElement
operator|.
name|attributeValue
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|CourseDemand
argument_list|>
name|remaining
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
literal|0
decl_stmt|;
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|CourseRequest
argument_list|>
name|course2request
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|unusedRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|reqCoursesElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|priority
operator|++
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|waitList
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"waitlist"
argument_list|)
decl_stmt|;
name|String
name|alternative
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"alternative"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"courseOffering"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|credits
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|name2course
operator|.
name|get
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
block|{
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|credits
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|j
init|=
name|requestElement
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|altElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|altCourse
init|=
name|name2course
operator|.
name|get
argument_list|(
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|altCourse
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course "
operator|+
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
block|{
name|courses
operator|.
name|add
argument_list|(
name|altCourse
argument_list|)
expr_stmt|;
name|credits
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
name|adepts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|adept
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break
name|adepts
break|;
block|}
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|waitList
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|CourseRequest
argument_list|>
name|requests
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|CourseRequest
name|cr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cr
operator|=
name|requests
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequestOption
argument_list|>
name|j
init|=
name|cr
operator|.
name|getCourseRequestOptions
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getCourseRequestOptions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cr
operator|=
operator|new
name|CourseRequest
argument_list|()
expr_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseRequestOptions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequestOption
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|setAllowOverlap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCredit
argument_list|(
name|credits
operator|.
name|get
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|course2request
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|unusedRequests
operator|.
name|add
argument_list|(
name|requests
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"freeTime"
argument_list|)
condition|)
block|{
name|String
name|days
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|TimeLocation
name|time
init|=
name|makeTime
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|cd
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|waitList
argument_list|)
argument_list|)
expr_stmt|;
name|FreeTime
name|free
init|=
name|cd
operator|.
name|getFreeTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|free
operator|=
operator|new
name|FreeTime
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
name|free
operator|.
name|setCategory
argument_list|(
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
name|time
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
name|warn
argument_list|(
literal|"Request element "
operator|+
name|requestElement
operator|.
name|getName
argument_list|()
operator|+
literal|" not recognized."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseRequest
name|cr
init|=
name|course2request
operator|.
name|get
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|keepEnrollments
condition|)
block|{
comment|// enrl.getCourseRequest().getClassEnrollments().remove(enrl);
name|enrl
operator|.
name|setCourseRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
comment|/*                 				if (enrl.getCourseRequest() != null)                 					enrl.getCourseRequest().getClassEnrollments().remove(enrl);                 					*/
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|enrl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
comment|/*         					if (cr.getClassEnrollments() == null)         						cr.setClassEnrollments(new HashSet<StudentClassEnrollment>());         					cr.getClassEnrollments().add(enrl);         					*/
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequest
name|cr
range|:
name|unusedRequests
control|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|remaining
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|remove
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
name|updatedStudents
operator|.
name|size
argument_list|()
operator|+
literal|" students changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updatedStudents
operator|.
name|isEmpty
argument_list|()
condition|)
name|StudentSectioningQueue
operator|.
name|studentChanged
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|updatedStudents
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|TimeLocation
name|makeTime
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|String
name|days
parameter_list|,
name|String
name|startTime
parameter_list|,
name|String
name|endTime
parameter_list|,
name|String
name|length
parameter_list|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|,
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_NAMES_SHORT
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|days
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|,
name|idx
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
expr_stmt|;
name|idx
operator|+=
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|startSlot
init|=
operator|(
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|nrSlots
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|nrSlots
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
else|else
block|{
name|nrSlots
operator|=
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
return|return
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|nrSlots
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

