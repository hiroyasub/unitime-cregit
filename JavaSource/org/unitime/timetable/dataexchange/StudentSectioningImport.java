begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
operator|.
name|StudentEnrollmentImport
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorCourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorInstrMthPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AdvisorSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequestOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Degree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajorConcentration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentEnrollmentMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentInstrMthPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalMethodDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  *   * @author Tomas Muller  *  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningImport
extends|extends
name|BaseImport
block|{
specifier|public
name|StudentSectioningImport
parameter_list|()
block|{
block|}
specifier|public
specifier|static
enum|enum
name|EnrollmentMode
block|{
name|DELETE
argument_list|(
literal|"Student enrollments will be deleted."
argument_list|)
block|,
name|IMPORT
argument_list|(
literal|"Student enrollments will be imported."
argument_list|)
block|,
name|NOCHANGE
argument_list|(
literal|"Student enrollments will be left unchanged"
argument_list|)
block|,
name|UPDATE
argument_list|(
literal|"Student enrollments will be updated (only enrollments that are no longer requested will be deleted)"
argument_list|)
block|,     	;
specifier|private
name|String
name|iText
decl_stmt|;
name|EnrollmentMode
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iText
operator|=
name|text
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
block|}
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|boolean
name|trimLeadingZerosFromExternalId
init|=
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|String
name|campus
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|EnrollmentMode
name|mode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"enrollments"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|EnrollmentMode
operator|.
name|valueOf
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"enrollments"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mode
operator|=
name|EnrollmentMode
operator|.
name|UPDATE
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"keepEnrollments"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|mode
operator|=
name|EnrollmentMode
operator|.
name|NOCHANGE
expr_stmt|;
name|mode
label|:
for|for
control|(
name|Iterator
name|i
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|studentElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|reqCoursesElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateCourseRequests"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqCoursesElement
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|reqCoursesElement
operator|.
name|attributeValue
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|Iterator
name|j
init|=
name|reqCoursesElement
operator|.
name|elementIterator
argument_list|(
literal|"courseOffering"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestElement
operator|.
name|element
argument_list|(
literal|"class"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|EnrollmentMode
operator|.
name|IMPORT
expr_stmt|;
break|break
name|mode
break|;
block|}
for|for
control|(
name|Iterator
name|k
init|=
name|requestElement
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|altElement
init|=
operator|(
name|Element
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|altElement
operator|.
name|element
argument_list|(
literal|"class"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|EnrollmentMode
operator|.
name|IMPORT
expr_stmt|;
break|break
name|mode
break|;
block|}
block|}
block|}
name|Element
name|addCoursesElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"addCourseRequests"
argument_list|)
decl_stmt|;
if|if
condition|(
name|addCoursesElement
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|addCoursesElement
operator|.
name|attributeValue
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|Iterator
name|j
init|=
name|addCoursesElement
operator|.
name|elementIterator
argument_list|(
literal|"courseOffering"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestElement
operator|.
name|element
argument_list|(
literal|"class"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|EnrollmentMode
operator|.
name|IMPORT
expr_stmt|;
break|break
name|mode
break|;
block|}
for|for
control|(
name|Iterator
name|k
init|=
name|requestElement
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|altElement
init|=
operator|(
name|Element
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|altElement
operator|.
name|element
argument_list|(
literal|"class"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|mode
operator|=
name|EnrollmentMode
operator|.
name|IMPORT
expr_stmt|;
break|break
name|mode
break|;
block|}
block|}
block|}
block|}
block|}
name|info
argument_list|(
literal|"Enrollment mode set to "
operator|+
name|mode
operator|.
name|name
argument_list|()
operator|+
literal|": "
operator|+
name|mode
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Student s where s.session.uniqueId=:sessionId and s.externalUniqueId is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|students
operator|.
name|put
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|abbv2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicClassification where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2clasf
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMajor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2major
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajorConcentration
argument_list|>
name|code2concentration
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajorConcentration
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajorConcentration
name|conc
range|:
operator|(
name|List
argument_list|<
name|PosMajorConcentration
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMajorConcentration where major.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|conc
operator|.
name|getMajor
argument_list|()
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2concentration
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|conc
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|":"
operator|+
name|conc
operator|.
name|getCode
argument_list|()
argument_list|,
name|conc
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Degree
argument_list|>
name|code2degree
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Degree
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Degree
name|deg
range|:
operator|(
name|List
argument_list|<
name|Degree
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Degree where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2degree
operator|.
name|put
argument_list|(
name|deg
operator|.
name|getReference
argument_list|()
argument_list|,
name|deg
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
operator|(
name|List
argument_list|<
name|PosMinor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMinor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2minor
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|code2group
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2group
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|code2accomodation
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
operator|(
name|List
argument_list|<
name|StudentAccomodation
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentAccomodation where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2accomodation
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
name|name2course
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from CourseOffering where subjectArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|name2course
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|>
name|course2extId2class
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|>
name|course2name2class
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Loading classes..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c, co from Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"c.schedulingSubpart.instrOfferingConfig.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|extId2class
init|=
name|course2extId2class
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId2class
operator|==
literal|null
condition|)
block|{
name|extId2class
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|course2extId2class
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|extId2class
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|name2class
init|=
name|course2name2class
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name2class
operator|==
literal|null
condition|)
block|{
name|name2class
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|course2name2class
operator|.
name|put
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|name2class
argument_list|)
expr_stmt|;
block|}
name|String
name|extId
init|=
name|clazz
operator|.
name|getExternalId
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|extId
operator|!=
literal|null
operator|&&
operator|!
name|extId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Class_
argument_list|>
name|sameExtIdClasses
init|=
name|extId2class
operator|.
name|get
argument_list|(
name|extId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sameExtIdClasses
operator|==
literal|null
condition|)
block|{
name|sameExtIdClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|extId2class
operator|.
name|put
argument_list|(
name|extId
argument_list|,
name|sameExtIdClasses
argument_list|)
expr_stmt|;
block|}
name|sameExtIdClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|getClassSuffix
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|sameNameClasses
init|=
name|name2class
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sameNameClasses
operator|==
literal|null
condition|)
block|{
name|sameNameClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
expr_stmt|;
name|name2class
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|sameNameClasses
argument_list|)
expr_stmt|;
block|}
name|sameNameClasses
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
name|ref2im
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
name|name2im
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructionalMethod
name|meth
range|:
name|InstructionalMethodDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|getHibSession
argument_list|()
argument_list|)
control|)
block|{
name|ref2im
operator|.
name|put
argument_list|(
name|meth
operator|.
name|getReference
argument_list|()
argument_list|,
name|meth
argument_list|)
expr_stmt|;
name|name2im
operator|.
name|put
argument_list|(
name|meth
operator|.
name|getLabel
argument_list|()
argument_list|,
name|meth
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentSectioningStatus
argument_list|>
name|ref2status
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|StudentSectioningStatus
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|StudentSectioningStatus
operator|.
name|findAll
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
control|)
name|ref2status
operator|.
name|put
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|(
literal|"student"
argument_list|)
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|studentElement
init|=
operator|(
name|Element
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"key"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalId
operator|==
literal|null
condition|)
continue|continue;
while|while
condition|(
name|trimLeadingZerosFromExternalId
operator|&&
name|externalId
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
name|externalId
operator|=
name|externalId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Element
name|cancelElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"cancelStudent"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cancelElement
operator|!=
literal|null
condition|)
block|{
name|Student
name|student
init|=
name|students
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|i
init|=
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|cd
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|delete
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|cancelElement
operator|.
name|attributeValue
argument_list|(
literal|"delete"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|delete
condition|)
block|{
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|student
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|Element
name|demographicsElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateDemographics"
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
name|students
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|demographicsElement
operator|==
literal|null
condition|)
block|{
name|error
argument_list|(
literal|"Student "
operator|+
name|externalId
operator|+
literal|" not found, but no demographics information provided."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|=
operator|new
name|Student
argument_list|()
expr_stmt|;
name|student
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|student
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setFreeTimeCategory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|setSchedulePreference
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|setClassEnrollments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setCourseDemands
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAdvisorCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|name
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|student
operator|.
name|setFirstName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMiddleName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"middle"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"last"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|student
operator|.
name|setFirstName
argument_list|(
literal|"Name"
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
literal|"Unknown"
argument_list|)
expr_stmt|;
block|}
name|Element
name|email
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"email"
argument_list|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
condition|)
name|student
operator|.
name|setEmail
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAreaClasfMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAreaClasfMinors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAreaClassificationMinor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAccomodations
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAccomodation
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|minCred
init|=
name|demographicsElement
operator|.
name|attributeValue
argument_list|(
literal|"minCredit"
argument_list|)
decl_stmt|;
name|student
operator|.
name|setMinCredit
argument_list|(
name|minCred
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|minCred
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|maxCred
init|=
name|demographicsElement
operator|.
name|attributeValue
argument_list|(
literal|"maxCredit"
argument_list|)
decl_stmt|;
name|student
operator|.
name|setMaxCredit
argument_list|(
name|maxCred
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|maxCred
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|demographicsElement
operator|!=
literal|null
condition|)
block|{
name|Element
name|name
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|String
name|fName
init|=
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
decl_stmt|;
name|String
name|mName
init|=
name|name
operator|.
name|attributeValue
argument_list|(
literal|"middle"
argument_list|)
decl_stmt|;
name|String
name|lName
init|=
name|name
operator|.
name|attributeValue
argument_list|(
literal|"last"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eq
argument_list|(
name|fName
argument_list|,
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setFirstName
argument_list|(
name|name
operator|.
name|attributeValue
argument_list|(
literal|"first"
argument_list|)
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|mName
argument_list|,
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMiddleName
argument_list|(
name|mName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|lName
argument_list|,
name|student
operator|.
name|getLastName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setLastName
argument_list|(
name|lName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Element
name|email
init|=
name|demographicsElement
operator|.
name|element
argument_list|(
literal|"email"
argument_list|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|eq
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|,
name|student
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setEmail
argument_list|(
name|email
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|minCred
init|=
name|demographicsElement
operator|.
name|attributeValue
argument_list|(
literal|"minCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eq
argument_list|(
name|minCred
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|minCred
argument_list|)
argument_list|,
name|student
operator|.
name|getMinCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMinCredit
argument_list|(
name|minCred
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|minCred
argument_list|)
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|maxCred
init|=
name|demographicsElement
operator|.
name|attributeValue
argument_list|(
literal|"maxCredit"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eq
argument_list|(
name|maxCred
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|maxCred
argument_list|)
argument_list|,
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMaxCredit
argument_list|(
name|maxCred
operator|==
literal|null
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|maxCred
argument_list|)
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|demographicsElement
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMajor
argument_list|>
name|sMajors
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|major
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
name|sMajors
operator|.
name|put
argument_list|(
name|major
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMinor
argument_list|>
name|sMinors
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAreaClassificationMinor
name|minor
range|:
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
control|)
name|sMinors
operator|.
name|put
argument_list|(
name|minor
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getMinor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|AcademicArea
name|a
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|area
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|Iterator
name|i3
init|=
name|e
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|g
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|String
name|concentration
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"concentration"
argument_list|)
decl_stmt|;
name|String
name|degree
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"degree"
argument_list|)
decl_stmt|;
name|Double
name|weight
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|g
operator|.
name|attributeValue
argument_list|(
literal|"weight"
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
decl_stmt|;
name|StudentAreaClassificationMajor
name|acm
init|=
name|sMajors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|clasf
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|acm
operator|!=
literal|null
condition|)
block|{
name|acm
operator|.
name|setConcentration
argument_list|(
name|concentration
operator|==
literal|null
condition|?
literal|null
else|:
name|code2concentration
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
operator|+
literal|":"
operator|+
name|concentration
argument_list|)
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setDegree
argument_list|(
name|degree
operator|==
literal|null
condition|?
literal|null
else|:
name|code2degree
operator|.
name|get
argument_list|(
name|degree
argument_list|)
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PosMajor
name|m
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|area
operator|+
literal|" "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|acm
operator|=
operator|new
name|StudentAreaClassificationMajor
argument_list|()
expr_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMajor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setConcentration
argument_list|(
name|concentration
operator|==
literal|null
condition|?
literal|null
else|:
name|code2concentration
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
operator|+
literal|":"
operator|+
name|concentration
argument_list|)
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setDegree
argument_list|(
name|degree
operator|==
literal|null
condition|?
literal|null
else|:
name|code2degree
operator|.
name|get
argument_list|(
name|degree
argument_list|)
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setWeight
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|e
operator|.
name|element
argument_list|(
literal|"major"
argument_list|)
operator|==
literal|null
operator|&&
name|e
operator|.
name|element
argument_list|(
literal|"minor"
argument_list|)
operator|==
literal|null
condition|)
block|{
name|boolean
name|noMajor
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|code
init|=
operator|(
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
operator|)
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|noMajor
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|noMajor
condition|)
block|{
name|String
name|code
init|=
literal|"-"
decl_stmt|;
if|if
condition|(
name|sMajors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|clasf
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|PosMajor
name|m
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
operator|new
name|PosMajor
argument_list|()
expr_stmt|;
name|m
operator|.
name|addToacademicAreas
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExternalUniqueId
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setName
argument_list|(
literal|"No Major"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setSession
argument_list|(
name|a
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addToposMajors
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|code2major
operator|.
name|put
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|StudentAreaClassificationMajor
name|acm
init|=
operator|new
name|StudentAreaClassificationMajor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMajor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setWeight
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i3
init|=
name|e
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|g
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sMinors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|clasf
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|PosMinor
name|m
init|=
name|code2minor
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Minor "
operator|+
name|area
operator|+
literal|" "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentAreaClassificationMinor
name|acm
init|=
operator|new
name|StudentAreaClassificationMinor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMinor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|g
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|PosMajor
name|m
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
continue|continue;
name|AcademicArea
name|a
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
continue|continue;
name|String
name|clasf
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sMajors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|clasf
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentAreaClassificationMajor
name|acm
init|=
operator|new
name|StudentAreaClassificationMajor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMajor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setWeight
argument_list|(
literal|1.0
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i3
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"acadArea"
argument_list|)
init|;
name|i3
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|g
init|=
operator|(
name|Element
operator|)
name|i3
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"abbv"
argument_list|)
decl_stmt|;
name|PosMinor
name|m
init|=
name|code2minor
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
continue|continue;
name|AcademicArea
name|a
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
continue|continue;
name|String
name|clasf
init|=
name|g
operator|.
name|attributeValue
argument_list|(
literal|"classification"
argument_list|)
decl_stmt|;
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|sMinors
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|clasf
operator|+
literal|":"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentAreaClassificationMinor
name|acm
init|=
operator|new
name|StudentAreaClassificationMinor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMinor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|StudentAreaClassificationMajor
name|major
range|:
name|sMajors
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|remove
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAreaClassificationMinor
name|minor
range|:
name|sMinors
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
operator|.
name|remove
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|sGroups
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
name|sGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"groupAffiliation"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sGroups
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentGroup
name|group
init|=
name|code2group
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student group "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentGroup
name|group
range|:
name|sGroups
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|sAccomodations
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
name|sAccomodations
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|demographicsElement
operator|.
name|elementIterator
argument_list|(
literal|"disability"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sAccomodations
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentAccomodation
name|accomodation
init|=
name|code2accomodation
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|accomodation
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student accomodation "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|add
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|sAccomodations
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|remove
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|status
init|=
name|studentElement
operator|.
name|attributeValue
argument_list|(
literal|"status"
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|isEmpty
argument_list|()
condition|)
name|student
operator|.
name|setSectioningStatus
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
block|{
name|StudentSectioningStatus
name|s
init|=
name|ref2status
operator|.
name|get
argument_list|(
name|status
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|student
operator|.
name|setSectioningStatus
argument_list|(
name|s
argument_list|)
expr_stmt|;
else|else
name|warn
argument_list|(
literal|"Student sectioning status "
operator|+
name|status
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|updatedStudents
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|Element
name|reqCoursesElement
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateCourseRequests"
argument_list|)
decl_stmt|;
name|Element
name|delCoursesElement
init|=
literal|null
decl_stmt|;
name|boolean
name|updateMode
init|=
operator|(
name|reqCoursesElement
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|updateMode
condition|)
block|{
name|reqCoursesElement
operator|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"addCourseRequests"
argument_list|)
expr_stmt|;
name|delCoursesElement
operator|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"dropCourseRequests"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|reqCoursesElement
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|reqCoursesElement
operator|.
name|attributeValue
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|)
operator|||
name|delCoursesElement
operator|!=
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|Pair
argument_list|,
name|StudentClassEnrollment
argument_list|>
name|enrollments
init|=
operator|new
name|Hashtable
argument_list|<
name|Pair
argument_list|,
name|StudentClassEnrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
name|enrollments
operator|.
name|put
argument_list|(
operator|new
name|Pair
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|enrollment
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|CourseDemand
argument_list|>
name|remaining
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|priority
init|=
operator|(
name|updateMode
condition|?
literal|0
else|:
name|remaining
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|CourseRequest
argument_list|>
name|course2request
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseRequest
argument_list|>
name|unusedRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|reqCoursesElement
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|reqCoursesElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|priority
operator|++
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|waitList
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"waitlist"
argument_list|)
decl_stmt|;
name|String
name|noSub
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"nosub"
argument_list|)
decl_stmt|;
name|String
name|alternative
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"alternative"
argument_list|)
decl_stmt|;
name|String
name|critical
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"critical"
argument_list|)
decl_stmt|;
name|String
name|criticalOverride
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"criticalOverride"
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"courseOffering"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|credits
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Element
argument_list|>
name|elements
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|CourseOffering
name|course
init|=
name|name2course
operator|.
name|get
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
block|{
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|credits
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|requestElement
argument_list|)
expr_stmt|;
block|}
name|Queue
argument_list|<
name|Element
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|requestElement
argument_list|)
expr_stmt|;
name|Element
name|requestOrAlternativeElement
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|requestOrAlternativeElement
operator|=
name|queue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|requestOrAlternativeElement
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|altElement
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseOffering
name|altCourse
init|=
name|name2course
operator|.
name|get
argument_list|(
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|altCourse
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course "
operator|+
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
block|{
name|courses
operator|.
name|add
argument_list|(
name|altCourse
argument_list|)
expr_stmt|;
name|credits
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|altElement
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|elements
operator|.
name|add
argument_list|(
name|altElement
argument_list|)
expr_stmt|;
block|}
name|queue
operator|.
name|add
argument_list|(
name|altElement
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
name|adepts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|adept
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|courses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break
name|adepts
break|;
block|}
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setCourseRequests
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setEnrollmentMessages
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentEnrollmentMessage
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|waitList
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|noSub
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|critical
operator|==
literal|null
condition|)
name|cd
operator|.
name|setCritical
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
name|cd
operator|.
name|setCritical
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
name|cd
operator|.
name|setCritical
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|CourseDemand
operator|.
name|Critical
name|c
range|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|critical
argument_list|)
operator|||
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
block|{
name|cd
operator|.
name|setCritical
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|criticalOverride
operator|==
literal|null
condition|)
name|cd
operator|.
name|setCriticalOverride
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|criticalOverride
argument_list|)
condition|)
name|cd
operator|.
name|setCriticalOverride
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|criticalOverride
argument_list|)
condition|)
name|cd
operator|.
name|setCriticalOverride
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|CourseDemand
operator|.
name|Critical
name|c
range|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|criticalOverride
argument_list|)
operator|||
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|criticalOverride
argument_list|)
condition|)
block|{
name|cd
operator|.
name|setCriticalOverride
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|Iterator
argument_list|<
name|CourseRequest
argument_list|>
name|requests
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|int
name|order
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|CourseRequest
name|cr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|cr
operator|=
name|requests
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getCourseRequestOptions
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequestOption
argument_list|>
name|j
init|=
name|cr
operator|.
name|getCourseRequestOptions
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getCourseRequestOptions
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cr
operator|=
operator|new
name|CourseRequest
argument_list|()
expr_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseDemand
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseRequestOptions
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseRequestOption
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|setAllowOverlap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCredit
argument_list|(
name|credits
operator|.
name|get
argument_list|(
name|order
argument_list|)
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|importPreferences
argument_list|(
name|cr
argument_list|,
name|elements
operator|.
name|get
argument_list|(
name|order
argument_list|)
argument_list|,
name|co
argument_list|,
name|course2extId2class
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|course2name2class
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|ref2im
argument_list|,
name|name2im
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setOrder
argument_list|(
name|order
operator|++
argument_list|)
expr_stmt|;
name|course2request
operator|.
name|put
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|requests
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|unusedRequests
operator|.
name|add
argument_list|(
name|requests
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|EnrollmentMode
operator|.
name|IMPORT
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|courses
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CourseOffering
name|co
init|=
name|courses
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Element
name|reqEl
init|=
name|elements
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|extId2class
init|=
name|course2extId2class
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|name2class
init|=
name|course2name2class
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|imported
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|k
init|=
name|reqEl
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classElement
init|=
operator|(
name|Element
operator|)
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
literal|null
decl_stmt|;
name|String
name|classExternalId
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classExternalId
operator|!=
literal|null
operator|&&
name|extId2class
operator|!=
literal|null
condition|)
block|{
name|classes
operator|=
name|extId2class
operator|.
name|get
argument_list|(
name|classExternalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
name|classes
operator|=
name|name2class
operator|.
name|get
argument_list|(
name|classExternalId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|==
literal|null
operator|&&
name|name2class
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|suffix
operator|!=
literal|null
condition|)
name|classes
operator|=
name|name2class
operator|.
name|get
argument_list|(
name|type
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|==
literal|null
operator|&&
name|co
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Class "
operator|+
operator|(
name|classExternalId
operator|!=
literal|null
condition|?
name|classExternalId
else|:
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" "
operator|+
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CourseRequest
name|request
init|=
name|course2request
operator|.
name|get
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|StudentEnrollmentMessage
argument_list|>
name|l
init|=
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getEnrollmentMessages
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|l
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentEnrollmentMessage
name|message
init|=
name|l
operator|.
name|next
argument_list|()
decl_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|l
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
operator|!
name|imported
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
comment|// avoid duplicates
name|StudentClassEnrollment
name|enrollment
init|=
name|enrollments
operator|.
name|remove
argument_list|(
operator|new
name|Pair
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
continue|continue;
comment|// enrollment already exists
name|enrollment
operator|=
operator|new
name|StudentClassEnrollment
argument_list|()
expr_stmt|;
name|enrollment
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|enrollment
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|enrollment
operator|.
name|setCourseOffering
argument_list|(
name|co
argument_list|)
expr_stmt|;
name|enrollment
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|enrollment
operator|.
name|setChangedBy
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|IMPORT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|enrollment
operator|.
name|setCourseRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|add
argument_list|(
name|enrollment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|else if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"freeTime"
argument_list|)
condition|)
block|{
name|String
name|days
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|TimeLocation
name|time
init|=
name|makeTime
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|updateMode
condition|)
block|{
name|TimeLocation
name|free
init|=
operator|new
name|TimeLocation
argument_list|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|free
operator|.
name|hasIntersection
argument_list|(
name|time
argument_list|)
condition|)
continue|continue;
block|}
name|cd
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
block|{
name|cd
operator|=
operator|new
name|CourseDemand
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|add
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|cd
operator|.
name|setAlternative
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setWaitlist
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|waitList
argument_list|)
argument_list|)
expr_stmt|;
name|cd
operator|.
name|setNoSub
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|noSub
argument_list|)
argument_list|)
expr_stmt|;
name|FreeTime
name|free
init|=
name|cd
operator|.
name|getFreeTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|free
operator|=
operator|new
name|FreeTime
argument_list|()
expr_stmt|;
name|cd
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
name|free
operator|.
name|setCategory
argument_list|(
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
name|time
operator|.
name|getLongName
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
name|warn
argument_list|(
literal|"Request element "
operator|+
name|requestElement
operator|.
name|getName
argument_list|()
operator|+
literal|" not recognized."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delCoursesElement
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|delCoursesElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|priority
operator|++
control|)
block|{
name|Element
name|requestElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"courseOffering"
argument_list|)
condition|)
block|{
name|CourseOffering
name|course
init|=
name|name2course
operator|.
name|get
argument_list|(
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Course "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
name|adepts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|adept
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|cd
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break
name|adepts
break|;
block|}
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
name|unusedRequests
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|requestElement
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"freeTime"
argument_list|)
condition|)
block|{
name|String
name|days
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|requestElement
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|TimeLocation
name|time
init|=
name|makeTime
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|CourseDemand
name|cd
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseDemand
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseDemand
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
operator|!
name|updateMode
condition|)
block|{
name|TimeLocation
name|free
init|=
operator|new
name|TimeLocation
argument_list|(
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|,
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|adept
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0.0
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|free
operator|.
name|hasIntersection
argument_list|(
name|time
argument_list|)
condition|)
continue|continue;
block|}
name|cd
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
continue|continue;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|remove
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
else|else
name|warn
argument_list|(
literal|"Request element "
operator|+
name|requestElement
operator|.
name|getName
argument_list|()
operator|+
literal|" not recognized."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|updateMode
condition|)
block|{
for|for
control|(
name|CourseDemand
name|cd
range|:
name|remaining
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|course2request
operator|.
name|containsKey
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|unusedRequests
operator|.
name|add
argument_list|(
name|cr
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|course2request
operator|.
name|put
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|EnrollmentMode
operator|.
name|IMPORT
condition|)
for|for
control|(
name|StudentClassEnrollment
name|e
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
condition|)
name|enrollments
operator|.
name|remove
argument_list|(
operator|new
name|Pair
argument_list|(
name|e
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|remaining
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mode
operator|==
name|EnrollmentMode
operator|.
name|DELETE
operator|||
name|mode
operator|==
name|EnrollmentMode
operator|.
name|IMPORT
condition|)
block|{
for|for
control|(
name|StudentClassEnrollment
name|enrl
range|:
name|enrollments
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseRequest
name|cr
init|=
name|course2request
operator|.
name|get
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|mode
operator|==
name|EnrollmentMode
operator|.
name|NOCHANGE
condition|)
block|{
name|enrl
operator|.
name|setCourseRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|enrl
operator|.
name|getClazz
argument_list|()
operator|.
name|getStudentEnrollments
argument_list|()
operator|.
name|remove
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|enrl
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseRequest
name|cr
range|:
name|unusedRequests
control|)
block|{
name|CourseDemand
name|cd
init|=
name|cr
operator|.
name|getCourseDemand
argument_list|()
decl_stmt|;
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|remove
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseDemand
name|cd
range|:
name|remaining
control|)
block|{
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|remove
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|updateMode
condition|)
block|{
name|priority
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
control|)
block|{
name|cd
operator|.
name|setPriority
argument_list|(
name|priority
operator|++
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|cd
argument_list|)
expr_stmt|;
block|}
block|}
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|recommendationsEl
init|=
name|studentElement
operator|.
name|element
argument_list|(
literal|"updateAdvisorRecommendations"
argument_list|)
decl_stmt|;
if|if
condition|(
name|recommendationsEl
operator|!=
literal|null
condition|)
block|{
name|Date
name|ts
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|remaining
init|=
operator|new
name|TreeSet
argument_list|<
name|AdvisorCourseRequest
argument_list|>
argument_list|(
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|notes
init|=
name|recommendationsEl
operator|.
name|attributeValue
argument_list|(
literal|"notes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|notes
operator|!=
literal|null
condition|)
block|{
name|AdvisorCourseRequest
name|acr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|i
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AdvisorCourseRequest
name|adept
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getPriority
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|acr
operator|=
name|adept
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acr
operator|==
literal|null
condition|)
block|{
name|acr
operator|=
operator|new
name|AdvisorCourseRequest
argument_list|()
expr_stmt|;
name|acr
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setPriority
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setAlternative
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setSubstitute
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setCritical
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setChangedBy
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|IMPORT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
name|acr
operator|.
name|setNotes
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|recommendationsEl
operator|.
name|elementIterator
argument_list|(
literal|"recommendation"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|recEl
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|AdvisorCourseRequest
name|acr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|j
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AdvisorCourseRequest
name|adept
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getPriority
argument_list|()
operator|==
name|priority
operator|&&
name|adept
operator|.
name|getAlternative
argument_list|()
operator|==
literal|0
condition|)
block|{
name|acr
operator|=
name|adept
expr_stmt|;
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acr
operator|==
literal|null
condition|)
block|{
name|acr
operator|=
operator|new
name|AdvisorCourseRequest
argument_list|()
expr_stmt|;
name|acr
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setChangedBy
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|IMPORT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setAlternative
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
name|acr
operator|.
name|setSubstitute
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"substitute"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setCredit
argument_list|(
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"credit"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|wl
init|=
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"waitlist"
argument_list|)
decl_stmt|;
if|if
condition|(
name|wl
operator|==
literal|null
condition|)
name|acr
operator|.
name|setWaitlist
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|acr
operator|.
name|setWaitlist
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|wl
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|ns
init|=
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"nosub"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
name|acr
operator|.
name|setNoSub
argument_list|(
literal|null
argument_list|)
expr_stmt|;
else|else
name|acr
operator|.
name|setNoSub
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ns
argument_list|)
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setNotes
argument_list|(
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"notes"
argument_list|)
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setCourse
argument_list|(
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"course"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|course
init|=
name|name2course
operator|.
name|get
argument_list|(
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course "
operator|+
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
block|{
name|acr
operator|.
name|setCourseOffering
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|importPreferences
argument_list|(
name|acr
argument_list|,
name|recEl
argument_list|,
name|course
argument_list|,
name|course2extId2class
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|course2name2class
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|ref2im
argument_list|,
name|name2im
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|acr
operator|.
name|setCourseOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|acr
operator|.
name|getPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|acr
operator|.
name|getPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|acr
operator|.
name|getPreferences
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|Element
name|ftEl
init|=
name|recEl
operator|.
name|element
argument_list|(
literal|"freeTime"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ftEl
operator|!=
literal|null
condition|)
block|{
name|String
name|days
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|TimeLocation
name|time
init|=
name|makeTime
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|FreeTime
name|free
init|=
name|acr
operator|.
name|getFreeTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|free
operator|=
operator|new
name|FreeTime
argument_list|()
expr_stmt|;
name|acr
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
name|free
operator|.
name|setCategory
argument_list|(
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
name|time
operator|.
name|getLongName
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|acr
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|acr
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setFreeTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|critical
init|=
name|recEl
operator|.
name|attributeValue
argument_list|(
literal|"critical"
argument_list|)
decl_stmt|;
if|if
condition|(
name|critical
operator|==
literal|null
condition|)
name|acr
operator|.
name|setCritical
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
name|acr
operator|.
name|setCritical
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
name|acr
operator|.
name|setCritical
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|CourseDemand
operator|.
name|Critical
name|c
range|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|critical
argument_list|)
operator|||
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
block|{
name|acr
operator|.
name|setCritical
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|acr
argument_list|)
expr_stmt|;
name|int
name|alterantive
init|=
literal|1
decl_stmt|;
name|AdvisorCourseRequest
name|parent
init|=
name|acr
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|recEl
operator|.
name|elementIterator
argument_list|(
literal|"alternative"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|acrEl
init|=
operator|(
name|Element
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|acr
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorCourseRequest
argument_list|>
name|k
init|=
name|remaining
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AdvisorCourseRequest
name|adept
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|adept
operator|.
name|getPriority
argument_list|()
operator|==
name|priority
operator|&&
name|adept
operator|.
name|getAlternative
argument_list|()
operator|==
name|alterantive
condition|)
block|{
name|acr
operator|=
name|adept
expr_stmt|;
name|k
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|acr
operator|==
literal|null
condition|)
block|{
name|acr
operator|=
operator|new
name|AdvisorCourseRequest
argument_list|()
expr_stmt|;
name|acr
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setChangedBy
argument_list|(
name|StudentClassEnrollment
operator|.
name|SystemChange
operator|.
name|IMPORT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setTimestamp
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setPriority
argument_list|(
name|priority
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setAlternative
argument_list|(
name|alterantive
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|.
name|add
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
name|acr
operator|.
name|setSubstitute
argument_list|(
name|parent
operator|.
name|isSubstitute
argument_list|()
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setCredit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setNotes
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setWaitlist
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setCourse
argument_list|(
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"course"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|CourseOffering
name|course
init|=
name|name2course
operator|.
name|get
argument_list|(
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
name|warn
argument_list|(
literal|"Course "
operator|+
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"subjectArea"
argument_list|)
operator|+
literal|" "
operator|+
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"courseNumber"
argument_list|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
else|else
block|{
name|acr
operator|.
name|setCourseOffering
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|importPreferences
argument_list|(
name|acr
argument_list|,
name|acrEl
argument_list|,
name|course
argument_list|,
name|course2extId2class
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|course2name2class
operator|.
name|get
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|ref2im
argument_list|,
name|name2im
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|acr
operator|.
name|setCourseOffering
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|acr
operator|.
name|getPreferences
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|acr
operator|.
name|getPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|acr
operator|.
name|getPreferences
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|ftEl
operator|=
name|acrEl
operator|.
name|element
argument_list|(
literal|"freeTime"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ftEl
operator|!=
literal|null
condition|)
block|{
name|String
name|days
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|String
name|startTime
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"startTime"
argument_list|)
decl_stmt|;
name|String
name|length
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"length"
argument_list|)
decl_stmt|;
name|String
name|endTime
init|=
name|ftEl
operator|.
name|attributeValue
argument_list|(
literal|"endTime"
argument_list|)
decl_stmt|;
name|TimeLocation
name|time
init|=
name|makeTime
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|,
name|days
argument_list|,
name|startTime
argument_list|,
name|endTime
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|FreeTime
name|free
init|=
name|acr
operator|.
name|getFreeTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|free
operator|==
literal|null
condition|)
block|{
name|free
operator|=
operator|new
name|FreeTime
argument_list|()
expr_stmt|;
name|acr
operator|.
name|setFreeTime
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
name|free
operator|.
name|setCategory
argument_list|(
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setDayCode
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setStartSlot
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setLength
argument_list|(
name|time
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setSession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|free
operator|.
name|setName
argument_list|(
name|time
operator|.
name|getLongName
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|free
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|acr
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|acr
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|acr
operator|.
name|setFreeTime
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|critical
operator|=
name|acrEl
operator|.
name|attributeValue
argument_list|(
literal|"critical"
argument_list|)
expr_stmt|;
if|if
condition|(
name|critical
operator|==
literal|null
condition|)
name|acr
operator|.
name|setCritical
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
name|acr
operator|.
name|setCritical
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|CRITICAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"false"
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
name|acr
operator|.
name|setCritical
argument_list|(
name|CourseDemand
operator|.
name|Critical
operator|.
name|NORMAL
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
for|for
control|(
name|CourseDemand
operator|.
name|Critical
name|c
range|:
name|CourseDemand
operator|.
name|Critical
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|name
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|critical
argument_list|)
operator|||
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|critical
argument_list|)
condition|)
block|{
name|acr
operator|.
name|setCritical
argument_list|(
name|c
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|alterantive
operator|++
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
name|priority
operator|++
expr_stmt|;
block|}
for|for
control|(
name|AdvisorCourseRequest
name|acr
range|:
name|remaining
control|)
block|{
if|if
condition|(
name|acr
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|acr
operator|.
name|getFreeTime
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAdvisorCourseRequests
argument_list|()
operator|.
name|remove
argument_list|(
name|acr
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|acr
argument_list|)
expr_stmt|;
block|}
block|}
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
name|updatedStudents
operator|.
name|size
argument_list|()
operator|+
literal|" students changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updatedStudents
operator|.
name|isEmpty
argument_list|()
condition|)
name|StudentSectioningQueue
operator|.
name|studentChanged
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|updatedStudents
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|TimeLocation
name|makeTime
parameter_list|(
name|DatePattern
name|dp
parameter_list|,
name|String
name|days
parameter_list|,
name|String
name|startTime
parameter_list|,
name|String
name|endTime
parameter_list|,
name|String
name|length
parameter_list|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"Th"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"Th"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"R"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_THU
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"R"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"Su"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"Su"
argument_list|,
literal|".."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"U"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SUN
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"U"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"M"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_MON
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"M"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"T"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_TUE
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"T"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"W"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_WED
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"W"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"F"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_FRI
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"F"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
literal|"S"
argument_list|)
condition|)
block|{
name|dayCode
operator|+=
name|Constants
operator|.
name|DAY_CODES
index|[
name|Constants
operator|.
name|DAY_SAT
index|]
expr_stmt|;
name|days
operator|=
name|days
operator|.
name|replace
argument_list|(
literal|"S"
argument_list|,
literal|"."
argument_list|)
expr_stmt|;
block|}
name|int
name|startSlot
init|=
operator|(
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
decl_stmt|;
name|int
name|nrSlots
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|length
operator|!=
literal|null
condition|)
block|{
name|nrSlots
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|length
argument_list|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
else|else
block|{
name|nrSlots
operator|=
operator|(
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|endTime
argument_list|)
operator|%
literal|100
operator|)
operator|-
operator|(
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|/
literal|100
operator|)
operator|*
literal|60
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|startTime
argument_list|)
operator|%
literal|100
operator|)
operator|)
operator|/
name|Constants
operator|.
name|SLOT_LENGTH_MIN
expr_stmt|;
block|}
return|return
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|startSlot
argument_list|,
name|nrSlots
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|dp
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|,
name|dp
operator|.
name|getPatternBitSet
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|Float
name|a
parameter_list|,
name|Float
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|void
name|importPreferences
parameter_list|(
name|CourseRequest
name|cr
parameter_list|,
name|Element
name|requestEl
parameter_list|,
name|CourseOffering
name|course
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|extId2class
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|name2class
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
name|ref2im
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
name|name2im
parameter_list|)
block|{
name|Element
name|prefEl
init|=
name|requestEl
operator|.
name|element
argument_list|(
literal|"preferences"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getPreferences
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cr
operator|.
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentSectioningPref
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|StudentSectioningPref
argument_list|>
name|i
init|=
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iHibSession
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefEl
operator|==
literal|null
condition|)
return|return;
name|Set
argument_list|<
name|Class_
argument_list|>
name|preferredClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|requiredClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefEl
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
literal|null
decl_stmt|;
name|String
name|classExternalId
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classExternalId
operator|!=
literal|null
operator|&&
name|extId2class
operator|!=
literal|null
condition|)
block|{
name|classes
operator|=
name|extId2class
operator|.
name|get
argument_list|(
name|classExternalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
name|classes
operator|=
name|name2class
operator|.
name|get
argument_list|(
name|classExternalId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|==
literal|null
operator|&&
name|name2class
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|suffix
operator|!=
literal|null
condition|)
name|classes
operator|=
name|name2class
operator|.
name|get
argument_list|(
name|type
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|==
literal|null
operator|&&
name|course
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Class "
operator|+
operator|(
name|classExternalId
operator|!=
literal|null
condition|?
name|classExternalId
else|:
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" "
operator|+
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|requiredClasses
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
else|else
name|preferredClasses
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|preferredClasses
control|)
block|{
name|StudentClassPref
name|scp
init|=
operator|new
name|StudentClassPref
argument_list|()
decl_stmt|;
name|scp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setLabel
argument_list|(
name|clazz
operator|.
name|getClassPrefLabel
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|scp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|requiredClasses
control|)
block|{
name|StudentClassPref
name|scp
init|=
operator|new
name|StudentClassPref
argument_list|()
decl_stmt|;
name|scp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setLabel
argument_list|(
name|clazz
operator|.
name|getClassPrefLabel
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|scp
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|InstructionalMethod
argument_list|>
name|preferredIMs
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalMethod
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InstructionalMethod
argument_list|>
name|requiredIMs
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalMethod
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefEl
operator|.
name|elementIterator
argument_list|(
literal|"instructional-method"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|imElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|InstructionalMethod
name|meth
init|=
literal|null
decl_stmt|;
name|String
name|imExternalId
init|=
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|,
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|imExternalId
operator|!=
literal|null
condition|)
name|meth
operator|=
name|ref2im
operator|.
name|get
argument_list|(
name|imExternalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|meth
operator|==
literal|null
condition|)
block|{
name|String
name|imName
init|=
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|imName
operator|!=
literal|null
condition|)
name|meth
operator|=
name|name2im
operator|.
name|get
argument_list|(
name|imName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meth
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Instructional Method "
operator|+
operator|(
name|imExternalId
operator|!=
literal|null
condition|?
name|imExternalId
else|:
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|requiredIMs
operator|.
name|add
argument_list|(
name|meth
argument_list|)
expr_stmt|;
else|else
name|preferredIMs
operator|.
name|add
argument_list|(
name|meth
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructionalMethod
name|meth
range|:
name|preferredIMs
control|)
block|{
name|StudentInstrMthPref
name|imp
init|=
operator|new
name|StudentInstrMthPref
argument_list|()
decl_stmt|;
name|imp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setInstructionalMethod
argument_list|(
name|meth
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setLabel
argument_list|(
name|meth
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructionalMethod
name|meth
range|:
name|requiredIMs
control|)
block|{
name|StudentInstrMthPref
name|imp
init|=
operator|new
name|StudentInstrMthPref
argument_list|()
decl_stmt|;
name|imp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setInstructionalMethod
argument_list|(
name|meth
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setLabel
argument_list|(
name|meth
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|importPreferences
parameter_list|(
name|AdvisorCourseRequest
name|cr
parameter_list|,
name|Element
name|requestEl
parameter_list|,
name|CourseOffering
name|course
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|extId2class
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Class_
argument_list|>
argument_list|>
name|name2class
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
name|ref2im
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|InstructionalMethod
argument_list|>
name|name2im
parameter_list|)
block|{
name|Element
name|prefEl
init|=
name|requestEl
operator|.
name|element
argument_list|(
literal|"preferences"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getPreferences
argument_list|()
operator|==
literal|null
condition|)
block|{
name|cr
operator|.
name|setPreferences
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AdvisorSectioningPref
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|AdvisorSectioningPref
argument_list|>
name|i
init|=
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|iHibSession
operator|.
name|delete
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prefEl
operator|==
literal|null
condition|)
return|return;
name|Set
argument_list|<
name|Class_
argument_list|>
name|preferredClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|requiredClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefEl
operator|.
name|elementIterator
argument_list|(
literal|"class"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|classElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
literal|null
decl_stmt|;
name|String
name|classExternalId
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|classExternalId
operator|!=
literal|null
operator|&&
name|extId2class
operator|!=
literal|null
condition|)
block|{
name|classes
operator|=
name|extId2class
operator|.
name|get
argument_list|(
name|classExternalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|classes
operator|==
literal|null
condition|)
name|classes
operator|=
name|name2class
operator|.
name|get
argument_list|(
name|classExternalId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|==
literal|null
operator|&&
name|name2class
operator|!=
literal|null
condition|)
block|{
name|String
name|type
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|suffix
operator|!=
literal|null
condition|)
name|classes
operator|=
name|name2class
operator|.
name|get
argument_list|(
name|type
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classes
operator|==
literal|null
operator|&&
name|course
operator|!=
literal|null
condition|)
block|{
name|warn
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Class "
operator|+
operator|(
name|classExternalId
operator|!=
literal|null
condition|?
name|classExternalId
else|:
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
operator|+
literal|" "
operator|+
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"suffix"
argument_list|)
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|classElement
operator|.
name|attributeValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|requiredClasses
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
else|else
name|preferredClasses
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|preferredClasses
control|)
block|{
name|AdvisorClassPref
name|scp
init|=
operator|new
name|AdvisorClassPref
argument_list|()
decl_stmt|;
name|scp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setLabel
argument_list|(
name|clazz
operator|.
name|getClassPrefLabel
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|scp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Class_
name|clazz
range|:
name|requiredClasses
control|)
block|{
name|AdvisorClassPref
name|scp
init|=
operator|new
name|AdvisorClassPref
argument_list|()
decl_stmt|;
name|scp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setClazz
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setLabel
argument_list|(
name|clazz
operator|.
name|getClassPrefLabel
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|scp
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|scp
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|InstructionalMethod
argument_list|>
name|preferredIMs
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalMethod
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|InstructionalMethod
argument_list|>
name|requiredIMs
init|=
operator|new
name|HashSet
argument_list|<
name|InstructionalMethod
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|prefEl
operator|.
name|elementIterator
argument_list|(
literal|"instructional-method"
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|imElement
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|InstructionalMethod
name|meth
init|=
literal|null
decl_stmt|;
name|String
name|imExternalId
init|=
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|,
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|imExternalId
operator|!=
literal|null
condition|)
name|meth
operator|=
name|ref2im
operator|.
name|get
argument_list|(
name|imExternalId
argument_list|)
expr_stmt|;
if|if
condition|(
name|meth
operator|==
literal|null
condition|)
block|{
name|String
name|imName
init|=
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|imName
operator|!=
literal|null
condition|)
name|meth
operator|=
name|name2im
operator|.
name|get
argument_list|(
name|imName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|meth
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|": Instructional Method "
operator|+
operator|(
name|imExternalId
operator|!=
literal|null
condition|?
name|imExternalId
else|:
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
operator|)
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|imElement
operator|.
name|attributeValue
argument_list|(
literal|"required"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
name|requiredIMs
operator|.
name|add
argument_list|(
name|meth
argument_list|)
expr_stmt|;
else|else
name|preferredIMs
operator|.
name|add
argument_list|(
name|meth
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructionalMethod
name|meth
range|:
name|preferredIMs
control|)
block|{
name|AdvisorInstrMthPref
name|imp
init|=
operator|new
name|AdvisorInstrMthPref
argument_list|()
decl_stmt|;
name|imp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setInstructionalMethod
argument_list|(
name|meth
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setLabel
argument_list|(
name|meth
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InstructionalMethod
name|meth
range|:
name|requiredIMs
control|)
block|{
name|AdvisorInstrMthPref
name|imp
init|=
operator|new
name|AdvisorInstrMthPref
argument_list|()
decl_stmt|;
name|imp
operator|.
name|setCourseRequest
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setInstructionalMethod
argument_list|(
name|meth
argument_list|)
expr_stmt|;
name|imp
operator|.
name|setLabel
argument_list|(
name|meth
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getPreferences
argument_list|()
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

