begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Timothy Almon  */
end_comment

begin_class
specifier|public
class|class
name|StudentImport
extends|extends
name|BaseImport
block|{
specifier|public
name|StudentImport
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|loadXml
parameter_list|(
name|Element
name|rootElement
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|boolean
name|trimLeadingZerosFromExternalId
init|=
name|ApplicationProperty
operator|.
name|DataExchangeTrimLeadingZerosFromExternalIds
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|String
name|campus
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
name|String
name|year
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
name|boolean
name|incremental
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|rootElement
operator|.
name|attributeValue
argument_list|(
literal|"incremental"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|campus
argument_list|,
name|year
argument_list|,
name|term
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"No session found for the given campus, year, and term."
argument_list|)
throw|;
if|if
condition|(
name|incremental
condition|)
block|{
name|info
argument_list|(
literal|"Incremental mode enabled: only included students will be updated."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
argument_list|(
literal|"Incremental mode disabled: students not included in this file will be deleted."
argument_list|)
expr_stmt|;
block|}
name|beginTransaction
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Student s where s.session.uniqueId=:sessionId and s.externalUniqueId is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|students
operator|.
name|put
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|student
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicArea where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|abbv2area
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from AcademicClassification where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2clasf
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMajor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2major
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|major
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
operator|(
name|List
argument_list|<
name|PosMinor
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from PosMinor where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|code2minor
operator|.
name|put
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|":"
operator|+
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|minor
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|code2group
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2group
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|code2accomodation
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
operator|(
name|List
argument_list|<
name|StudentAccomodation
argument_list|>
operator|)
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentAccomodation where session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|code2accomodation
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i1
init|=
name|rootElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
operator|(
name|Element
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|externalId
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"externalId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|externalId
operator|==
literal|null
condition|)
continue|continue;
while|while
condition|(
name|trimLeadingZerosFromExternalId
operator|&&
name|externalId
operator|.
name|startsWith
argument_list|(
literal|"0"
argument_list|)
condition|)
name|externalId
operator|=
name|externalId
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|importStudent
argument_list|(
name|element
argument_list|,
name|externalId
argument_list|,
name|students
argument_list|,
name|session
argument_list|,
name|updatedStudents
argument_list|,
name|abbv2area
argument_list|,
name|code2clasf
argument_list|,
name|code2major
argument_list|,
name|code2minor
argument_list|,
name|code2group
argument_list|,
name|code2accomodation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incremental
condition|)
for|for
control|(
name|Student
name|student
range|:
name|students
operator|.
name|values
argument_list|()
control|)
block|{
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|info
argument_list|(
name|updatedStudents
operator|.
name|size
argument_list|()
operator|+
literal|" students changed"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|updatedStudents
operator|.
name|isEmpty
argument_list|()
condition|)
name|StudentSectioningQueue
operator|.
name|studentChanged
argument_list|(
name|getHibSession
argument_list|()
argument_list|,
literal|null
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|updatedStudents
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|Student
name|importStudent
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|externalId
parameter_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
parameter_list|,
name|Session
name|session
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|code2group
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|code2accomodation
parameter_list|)
block|{
name|Student
name|student
init|=
name|updateStudentInfo
argument_list|(
name|element
argument_list|,
name|externalId
argument_list|,
name|students
argument_list|,
name|session
argument_list|,
name|updatedStudents
argument_list|)
decl_stmt|;
name|updateStudentMajors
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|updatedStudents
argument_list|,
name|abbv2area
argument_list|,
name|code2clasf
argument_list|,
name|code2major
argument_list|)
expr_stmt|;
name|updateStudentMinors
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|updatedStudents
argument_list|,
name|abbv2area
argument_list|,
name|code2clasf
argument_list|,
name|code2minor
argument_list|)
expr_stmt|;
name|updateStudentGroups
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|updatedStudents
argument_list|,
name|code2group
argument_list|)
expr_stmt|;
name|updateStudentAccomodations
argument_list|(
name|element
argument_list|,
name|student
argument_list|,
name|updatedStudents
argument_list|,
name|code2accomodation
argument_list|)
expr_stmt|;
name|saveOrUpdateStudent
argument_list|(
name|student
argument_list|,
name|updatedStudents
argument_list|)
expr_stmt|;
return|return
name|student
return|;
block|}
specifier|protected
name|Student
name|updateStudentInfo
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|externalId
parameter_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
parameter_list|,
name|Session
name|session
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|)
block|{
name|String
name|fName
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"firstName"
argument_list|,
literal|"Name"
argument_list|)
decl_stmt|;
name|String
name|mName
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"middleName"
argument_list|)
decl_stmt|;
name|String
name|lName
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"lastName"
argument_list|,
literal|"Unknown"
argument_list|)
decl_stmt|;
name|String
name|email
init|=
name|element
operator|.
name|attributeValue
argument_list|(
literal|"email"
argument_list|)
decl_stmt|;
name|Student
name|student
init|=
name|students
operator|.
name|remove
argument_list|(
name|externalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
name|student
operator|=
operator|new
name|Student
argument_list|()
expr_stmt|;
name|student
operator|.
name|setSession
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|student
operator|.
name|setExternalUniqueId
argument_list|(
name|externalId
argument_list|)
expr_stmt|;
name|student
operator|.
name|setFreeTimeCategory
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|setSchedulePreference
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|student
operator|.
name|setClassEnrollments
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setCourseDemands
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setFirstName
argument_list|(
name|fName
argument_list|)
expr_stmt|;
name|student
operator|.
name|setMiddleName
argument_list|(
name|mName
argument_list|)
expr_stmt|;
name|student
operator|.
name|setLastName
argument_list|(
name|lName
argument_list|)
expr_stmt|;
name|student
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAreaClasfMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAreaClasfMinors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAreaClassificationMinor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentGroup
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|student
operator|.
name|setAccomodations
argument_list|(
operator|new
name|HashSet
argument_list|<
name|StudentAccomodation
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|eq
argument_list|(
name|fName
argument_list|,
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setFirstName
argument_list|(
name|fName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|mName
argument_list|,
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setMiddleName
argument_list|(
name|mName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|lName
argument_list|,
name|student
operator|.
name|getLastName
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setLastName
argument_list|(
name|lName
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|email
argument_list|,
name|student
operator|.
name|getEmail
argument_list|()
argument_list|)
condition|)
block|{
name|student
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|student
return|;
block|}
specifier|protected
name|void
name|updateStudentMajors
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PosMajor
argument_list|>
name|code2major
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|area2classifications
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentAcadAreaClass"
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentAcadAreaClass"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"acadAreaClass"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicClass"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classifications
init|=
name|area2classifications
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|==
literal|null
condition|)
block|{
name|classifications
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|area2classifications
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|classifications
argument_list|)
expr_stmt|;
block|}
name|classifications
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMajor
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
name|table
operator|.
name|put
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|"|"
operator|+
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentMajors"
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentMajors"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"major"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|AcademicArea
name|a
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|area
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMajor
name|m
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Major "
operator|+
name|area
operator|+
literal|" "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|classifications
init|=
name|area2classifications
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|cf
range|:
name|classifications
control|)
block|{
if|if
condition|(
name|table
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|"|"
operator|+
name|cf
operator|+
literal|"|"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentAreaClassificationMajor
name|acm
init|=
operator|new
name|StudentAreaClassificationMajor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMajor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|table
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|"|"
operator|+
name|clasf
operator|+
literal|"|"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentAreaClassificationMajor
name|acm
init|=
operator|new
name|StudentAreaClassificationMajor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMajor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|classifications
init|=
name|area2classifications
operator|.
name|get
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|!=
literal|null
operator|&&
operator|!
name|table
operator|.
name|containsKey
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|"|"
operator|+
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|classifications
operator|.
name|remove
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentMinors"
argument_list|)
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentMinors"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|String
argument_list|>
name|classifications
init|=
name|area2classifications
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|!=
literal|null
condition|)
name|classifications
operator|.
name|remove
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|a2c
range|:
name|area2classifications
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|area
init|=
name|a2c
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|a2c
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|AcademicArea
name|a
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|area
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|String
name|clasf
range|:
name|a2c
operator|.
name|getValue
argument_list|()
control|)
block|{
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|major
init|=
literal|"-"
decl_stmt|;
name|PosMajor
name|m
init|=
name|code2major
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|major
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|m
operator|=
operator|new
name|PosMajor
argument_list|()
expr_stmt|;
name|m
operator|.
name|addToacademicAreas
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|m
operator|.
name|setExternalUniqueId
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setName
argument_list|(
literal|"No Major"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setSession
argument_list|(
name|a
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addToposMajors
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|code2major
operator|.
name|put
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|major
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|"|"
operator|+
name|clasf
operator|+
literal|"|"
operator|+
name|major
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentAreaClassificationMajor
name|acm
init|=
operator|new
name|StudentAreaClassificationMajor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMajor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
name|table
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
operator|.
name|remove
argument_list|(
name|acm
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateStudentMinors
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicArea
argument_list|>
name|abbv2area
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|AcademicClassification
argument_list|>
name|code2clasf
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|PosMinor
argument_list|>
name|code2minor
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|area2classifications
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentAcadAreaClass"
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentAcadAreaClass"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"acadAreaClass"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicClass"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|classifications
init|=
name|area2classifications
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|==
literal|null
condition|)
block|{
name|classifications
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|area2classifications
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|classifications
argument_list|)
expr_stmt|;
block|}
name|classifications
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMinor
argument_list|>
name|table
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAreaClassificationMinor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAreaClassificationMinor
name|acm
range|:
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
control|)
name|table
operator|.
name|put
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|"|"
operator|+
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|"|"
operator|+
name|acm
operator|.
name|getMinor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentMinors"
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentMinors"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"minor"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|area
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicArea"
argument_list|)
decl_stmt|;
name|AcademicArea
name|a
init|=
name|abbv2area
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic area "
operator|+
name|area
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"code"
argument_list|)
decl_stmt|;
name|PosMinor
name|m
init|=
name|code2minor
operator|.
name|get
argument_list|(
name|area
operator|+
literal|":"
operator|+
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Minor "
operator|+
name|area
operator|+
literal|" "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|clasf
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"academicClass"
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|classifications
init|=
name|area2classifications
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|cf
range|:
name|classifications
control|)
block|{
if|if
condition|(
name|table
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|"|"
operator|+
name|cf
operator|+
literal|"|"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|cf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentAreaClassificationMinor
name|acm
init|=
operator|new
name|StudentAreaClassificationMinor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMinor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|table
operator|.
name|remove
argument_list|(
name|area
operator|+
literal|"|"
operator|+
name|clasf
operator|+
literal|"|"
operator|+
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|AcademicClassification
name|f
init|=
name|code2clasf
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Academic classification "
operator|+
name|clasf
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|StudentAreaClassificationMinor
name|acm
init|=
operator|new
name|StudentAreaClassificationMinor
argument_list|()
decl_stmt|;
name|acm
operator|.
name|setAcademicArea
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setAcademicClassification
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setMinor
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
operator|.
name|add
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|StudentAreaClassificationMinor
name|acm
range|:
name|table
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAreaClasfMinors
argument_list|()
operator|.
name|remove
argument_list|(
name|acm
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|delete
argument_list|(
name|acm
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateStudentGroups
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|code2group
parameter_list|)
block|{
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentGroups"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
name|sGroups
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
name|sGroups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentGroups"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"studentGroup"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sGroups
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentGroup
name|group
init|=
name|code2group
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student group "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentGroup
name|group
range|:
name|sGroups
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|student
operator|.
name|getGroups
argument_list|()
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|getHibSession
argument_list|()
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|updateStudentAccomodations
parameter_list|(
name|Element
name|element
parameter_list|,
name|Student
name|student
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|code2accomodation
parameter_list|)
block|{
if|if
condition|(
name|element
operator|.
name|element
argument_list|(
literal|"studentAccomodations"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
name|sAccomodations
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|StudentAccomodation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
name|sAccomodations
operator|.
name|put
argument_list|(
name|accomodation
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|accomodation
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i2
init|=
name|element
operator|.
name|element
argument_list|(
literal|"studentAccomodations"
argument_list|)
operator|.
name|elementIterator
argument_list|(
literal|"studentAccomodation"
argument_list|)
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
operator|(
name|Element
operator|)
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|code
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"accomodation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sAccomodations
operator|.
name|remove
argument_list|(
name|code
argument_list|)
operator|==
literal|null
condition|)
block|{
name|StudentAccomodation
name|accomodation
init|=
name|code2accomodation
operator|.
name|get
argument_list|(
name|code
argument_list|)
decl_stmt|;
if|if
condition|(
name|accomodation
operator|==
literal|null
condition|)
block|{
name|warn
argument_list|(
literal|"Student accomodation "
operator|+
name|code
operator|+
literal|" not known."
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|add
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|StudentAccomodation
name|accomodation
range|:
name|sAccomodations
operator|.
name|values
argument_list|()
control|)
block|{
name|student
operator|.
name|getAccomodations
argument_list|()
operator|.
name|remove
argument_list|(
name|accomodation
argument_list|)
expr_stmt|;
name|accomodation
operator|.
name|getStudents
argument_list|()
operator|.
name|remove
argument_list|(
name|student
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|updatedStudents
operator|.
name|add
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|saveOrUpdateStudent
parameter_list|(
name|Student
name|student
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|updatedStudents
parameter_list|)
block|{
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|updatedStudents
operator|.
name|add
argument_list|(
operator|(
name|Long
operator|)
name|getHibSession
argument_list|()
operator|.
name|save
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getHibSession
argument_list|()
operator|.
name|update
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|eq
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

