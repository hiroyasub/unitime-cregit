begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2008 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|dataexchange
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ArrangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DatePattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PreferenceLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableFixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|VariableRangeCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller, Stephanie Schluttenhofer  */
end_comment

begin_class
specifier|public
class|class
name|CourseOfferingExport
extends|extends
name|BaseExport
block|{
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Number
argument_list|>
name|sTwoNumbersDF
init|=
name|Formats
operator|.
name|getNumberFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sDateFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"yyyy/M/d"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Formats
operator|.
name|Format
argument_list|<
name|Date
argument_list|>
name|sTimeFormat
init|=
name|Formats
operator|.
name|getDateFormat
argument_list|(
literal|"HHmm"
argument_list|)
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|TreeSet
argument_list|<
name|Exam
argument_list|>
argument_list|>
name|iExams
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|iExportAssignments
init|=
literal|true
decl_stmt|;
specifier|public
name|void
name|saveXml
parameter_list|(
name|Document
name|document
parameter_list|,
name|Session
name|session
parameter_list|,
name|Properties
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|beginTransaction
argument_list|()
expr_stmt|;
name|iExportAssignments
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.timetable"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|examsOnly
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam"
argument_list|)
argument_list|)
decl_stmt|;
name|Element
name|root
init|=
name|document
operator|.
name|addElement
argument_list|(
name|examsOnly
condition|?
literal|"exams"
else|:
literal|"offerings"
argument_list|)
decl_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"campus"
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"year"
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"term"
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"dateFormat"
argument_list|,
name|sDateFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"timeFormat"
argument_list|,
name|sTimeFormat
operator|.
name|toPattern
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|addAttribute
argument_list|(
literal|"created"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|examsOnly
condition|)
name|root
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
expr_stmt|;
name|document
operator|.
name|addDocType
argument_list|(
name|examsOnly
condition|?
literal|"exams"
else|:
literal|"offerings"
argument_list|,
literal|"-//UniTime//DTD University Course Timetabling/EN"
argument_list|,
literal|"http://www.unitime.org/interface/CourseOfferingExport.dtd"
argument_list|)
expr_stmt|;
if|if
condition|(
name|examsOnly
condition|)
block|{
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
operator|||
literal|"final"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAllFinal
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportExam
argument_list|(
name|root
argument_list|,
literal|null
argument_list|,
name|exam
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"all"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
operator|||
literal|"midterm"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|Exam
operator|.
name|findAllMidterm
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportExam
argument_list|(
name|root
argument_list|,
literal|null
argument_list|,
name|exam
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|info
argument_list|(
literal|"Loading offerings..."
argument_list|)
expr_stmt|;
name|List
name|offerings
init|=
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct io from InstructionalOffering io "
operator|+
literal|"inner join fetch io.courseOfferings as co inner join fetch co.subjectArea sa "
operator|+
literal|"left join fetch io.instrOfferingConfigs as ioc "
operator|+
literal|"left join fetch ioc.schedulingSubparts as ss "
operator|+
literal|"left join fetch ss.classes as c "
operator|+
literal|"where "
operator|+
literal|"io.session.uniqueId=:sessionId "
operator|+
literal|"order by sa.subjectAreaAbbreviation, co.courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"none"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
condition|)
block|{
name|info
argument_list|(
literal|"Loading exams..."
argument_list|)
expr_stmt|;
name|List
name|allExams
init|=
name|getHibSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select x from Exam x left join fetch x.owners o "
operator|+
literal|"where x.session.uniqueId=:sessionId"
operator|+
operator|(
literal|"midterm"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
condition|?
literal|" and x.examType.type="
operator|+
name|ExamType
operator|.
name|sExamTypeMidterm
else|:
literal|""
operator|)
operator|+
operator|(
literal|"final"
operator|.
name|equals
argument_list|(
name|parameters
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.exam.type"
argument_list|,
literal|"all"
argument_list|)
argument_list|)
condition|?
literal|" and x.examType.type="
operator|+
name|ExamType
operator|.
name|sExamTypeFinal
else|:
literal|""
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
operator|.
name|setFetchSize
argument_list|(
literal|1000
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|iExams
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|info
argument_list|(
literal|"Checking exams..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|allExams
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Exam
name|exam
init|=
operator|(
name|Exam
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|exam
operator|.
name|getOwners
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ExamOwner
name|owner
init|=
operator|(
name|ExamOwner
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|offeringId
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|iExams
operator|.
name|get
argument_list|(
name|offeringId
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|==
literal|null
condition|)
block|{
name|exams
operator|=
operator|new
name|TreeSet
argument_list|()
expr_stmt|;
name|iExams
operator|.
name|put
argument_list|(
name|offeringId
argument_list|,
name|exams
argument_list|)
expr_stmt|;
block|}
name|exams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|info
argument_list|(
literal|"Exporting "
operator|+
name|offerings
operator|.
name|size
argument_list|()
operator|+
literal|" offerings ..."
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offerings
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructionalOffering
name|io
init|=
operator|(
name|InstructionalOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportInstructionalOffering
argument_list|(
name|root
argument_list|,
name|io
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fatal
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportInstructionalOffering
parameter_list|(
name|Element
name|offeringsElement
parameter_list|,
name|InstructionalOffering
name|offering
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|offeringElement
init|=
name|offeringsElement
operator|.
name|addElement
argument_list|(
literal|"offering"
argument_list|)
decl_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|offering
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|offering
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|offering
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
literal|"offered"
argument_list|,
operator|(
name|offering
operator|.
name|isNotOffered
argument_list|()
condition|?
literal|"false"
else|:
literal|"true"
operator|)
argument_list|)
expr_stmt|;
name|offeringElement
operator|.
name|addAttribute
argument_list|(
literal|"action"
argument_list|,
literal|"insert"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseCreditUnitConfig
name|credit
init|=
operator|(
name|CourseCreditUnitConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportCredit
argument_list|(
name|offeringElement
operator|.
name|addElement
argument_list|(
literal|"courseCredit"
argument_list|)
argument_list|,
name|credit
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportCourse
argument_list|(
name|offeringElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
argument_list|,
name|course
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|offering
operator|.
name|isNotOffered
argument_list|()
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportConfig
argument_list|(
name|offeringElement
operator|.
name|addElement
argument_list|(
literal|"config"
argument_list|)
argument_list|,
name|config
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iExams
operator|!=
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|Exam
argument_list|>
name|exams
init|=
name|iExams
operator|.
name|get
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exams
operator|!=
literal|null
condition|)
for|for
control|(
name|Exam
name|exam
range|:
name|exams
control|)
name|exportExam
argument_list|(
name|offeringElement
argument_list|,
name|offering
argument_list|,
name|exam
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportCredit
parameter_list|(
name|Element
name|creditElement
parameter_list|,
name|CourseCreditUnitConfig
name|credit
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|credit
operator|.
name|getCreditType
argument_list|()
operator|!=
literal|null
condition|)
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"creditType"
argument_list|,
name|credit
operator|.
name|getCreditType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|!=
literal|null
condition|)
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"creditUnitType"
argument_list|,
name|credit
operator|.
name|getCreditUnitType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|.
name|getCreditFormat
argument_list|()
operator|!=
literal|null
condition|)
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"creditFormat"
argument_list|,
name|credit
operator|.
name|getCreditFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|instanceof
name|ArrangeCreditUnitConfig
condition|)
block|{
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|FixedCreditUnitConfig
condition|)
block|{
name|FixedCreditUnitConfig
name|fixedCredit
init|=
operator|(
name|FixedCreditUnitConfig
operator|)
name|credit
decl_stmt|;
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"fixedCredit"
argument_list|,
name|fixedCredit
operator|.
name|getFixedUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|VariableRangeCreditUnitConfig
condition|)
block|{
name|VariableRangeCreditUnitConfig
name|variableCredit
init|=
operator|(
name|VariableRangeCreditUnitConfig
operator|)
name|credit
decl_stmt|;
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"minimumCredit"
argument_list|,
name|variableCredit
operator|.
name|getMinUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"maximumCredit"
argument_list|,
name|variableCredit
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"fractionalCreditAllowed"
argument_list|,
operator|(
name|variableCredit
operator|.
name|isFractionalIncrementsAllowed
argument_list|()
operator|.
name|booleanValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|instanceof
name|VariableFixedCreditUnitConfig
condition|)
block|{
name|VariableFixedCreditUnitConfig
name|variableCredit
init|=
operator|(
name|VariableFixedCreditUnitConfig
operator|)
name|credit
decl_stmt|;
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"minimumCredit"
argument_list|,
name|variableCredit
operator|.
name|getMinUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|creditElement
operator|.
name|addAttribute
argument_list|(
literal|"maximumCredit"
argument_list|,
name|variableCredit
operator|.
name|getMaxUnits
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportCourse
parameter_list|(
name|Element
name|courseElement
parameter_list|,
name|CourseOffering
name|course
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|course
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"controlling"
argument_list|,
name|course
operator|.
name|isIsControl
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|)
name|courseElement
operator|.
name|addElement
argument_list|(
literal|"consent"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getTitle
argument_list|()
operator|!=
literal|null
condition|)
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"title"
argument_list|,
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getScheduleBookNote
argument_list|()
operator|!=
literal|null
condition|)
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"scheduleBookNote"
argument_list|,
name|course
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|exportConfig
parameter_list|(
name|Element
name|configElement
parameter_list|,
name|InstrOfferingConfig
name|config
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|configElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|configElement
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
operator|(
name|config
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
literal|"inf"
else|:
name|config
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
name|exportSubpart
argument_list|(
name|configElement
operator|.
name|addElement
argument_list|(
literal|"subpart"
argument_list|)
argument_list|,
name|subpart
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getParentSubpart
argument_list|()
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|j
init|=
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|exportClass
argument_list|(
name|configElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
argument_list|,
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportSubpart
parameter_list|(
name|Element
name|subpartElement
parameter_list|,
name|SchedulingSubpart
name|subpart
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|subpartElement
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|subpart
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
name|subpart
operator|.
name|getSchedulingSubpartSuffix
argument_list|()
argument_list|)
expr_stmt|;
name|subpartElement
operator|.
name|addAttribute
argument_list|(
literal|"minPerWeek"
argument_list|,
name|subpart
operator|.
name|getMinutesPerWk
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getCreditConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseCreditUnitConfig
name|credit
init|=
operator|(
name|CourseCreditUnitConfig
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportCredit
argument_list|(
name|subpartElement
operator|.
name|addElement
argument_list|(
literal|"subpartCredit"
argument_list|)
argument_list|,
name|credit
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|subpart
operator|.
name|getChildSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|childSubpart
init|=
operator|(
name|SchedulingSubpart
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportSubpart
argument_list|(
name|subpartElement
operator|.
name|addElement
argument_list|(
literal|"subpart"
argument_list|)
argument_list|,
name|childSubpart
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportClass
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
operator|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
literal|"inf"
argument_list|)
expr_stmt|;
else|else
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"limit"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clazz
operator|.
name|getClassLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"scheduleNote"
argument_list|,
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"studentScheduling"
argument_list|,
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|classElement
operator|.
name|addAttribute
argument_list|(
literal|"displayInScheduleBook"
argument_list|,
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getChildClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|childClazz
init|=
operator|(
name|Class_
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|exportClass
argument_list|(
name|classElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
argument_list|,
name|childClazz
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iExportAssignments
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|exportAssignment
argument_list|(
name|classElement
argument_list|,
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
if|else if
condition|(
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|getManagingDept
argument_list|()
operator|.
name|getSolverGroup
argument_list|()
operator|.
name|getCommittedSolution
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|exportArrHours
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|instructor
init|=
operator|(
name|ClassInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|exportInstructor
argument_list|(
name|classElement
operator|.
name|addElement
argument_list|(
literal|"instructor"
argument_list|)
argument_list|,
name|instructor
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportInstructor
parameter_list|(
name|Element
name|instructorElement
parameter_list|,
name|ClassInstructor
name|instructor
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|exportInstructor
argument_list|(
name|instructorElement
argument_list|,
name|instructor
operator|.
name|getInstructor
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|!=
literal|null
condition|)
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"share"
argument_list|,
name|instructor
operator|.
name|getPercentShare
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"lead"
argument_list|,
name|instructor
operator|.
name|isLead
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|exportInstructor
parameter_list|(
name|Element
name|instructorElement
parameter_list|,
name|DepartmentalInstructor
name|instructor
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|!=
literal|null
condition|)
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"fname"
argument_list|,
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|!=
literal|null
condition|)
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"mname"
argument_list|,
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|instructorElement
operator|.
name|addAttribute
argument_list|(
literal|"lname"
argument_list|,
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|dayCode2days
parameter_list|(
name|int
name|dayCode
parameter_list|)
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Constants
operator|.
name|DAY_CODES
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|(
name|dayCode
operator|&
name|Constants
operator|.
name|DAY_CODES
index|[
name|i
index|]
operator|)
operator|!=
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|DAY_NAMES_SHORT
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|startSlot2startTime
parameter_list|(
name|int
name|startSlot
parameter_list|)
block|{
name|int
name|minHrs
init|=
name|startSlot
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
decl_stmt|;
return|return
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|/
literal|60
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|%
literal|60
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|timeLocation2endTime
parameter_list|(
name|TimeLocation
name|time
parameter_list|)
block|{
name|int
name|minHrs
init|=
operator|(
name|time
operator|.
name|getStartSlot
argument_list|()
operator|+
name|time
operator|.
name|getLength
argument_list|()
operator|)
operator|*
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|+
name|Constants
operator|.
name|FIRST_SLOT_TIME_MIN
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
decl_stmt|;
return|return
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|/
literal|60
argument_list|)
operator|+
name|sTwoNumbersDF
operator|.
name|format
argument_list|(
name|minHrs
operator|%
literal|60
argument_list|)
return|;
block|}
specifier|protected
name|void
name|exportAssignment
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|exportDatePattern
argument_list|(
name|classElement
argument_list|,
name|assignment
operator|.
name|getDatePattern
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportTimeLocation
argument_list|(
name|classElement
argument_list|,
name|assignment
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportRooms
argument_list|(
name|classElement
argument_list|,
name|assignment
argument_list|,
name|session
argument_list|)
expr_stmt|;
comment|//if (assignment.getEvent()!=null) exportEvent(classElement, assignment.getEvent(), session);
block|}
specifier|protected
name|void
name|exportTimeLocation
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|TimeLocation
name|time
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|Element
name|timeElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"time"
argument_list|)
decl_stmt|;
name|timeElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
name|dayCode2days
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timeElement
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|startSlot2startTime
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timeElement
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|timeLocation2endTime
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|DatePattern
name|dp
init|=
name|assignment
operator|.
name|getDatePattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|dp
operator|.
name|isDefault
argument_list|()
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.defaultDatePattern"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
operator|)
condition|)
name|timeElement
operator|.
name|addAttribute
argument_list|(
literal|"datePattern"
argument_list|,
name|dp
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|!=
literal|null
condition|)
name|timeElement
operator|.
name|addAttribute
argument_list|(
literal|"timePattern"
argument_list|,
name|assignment
operator|.
name|getTimePattern
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|exportRooms
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Assignment
name|assignment
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|location
decl_stmt|;
name|Element
name|roomElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|room
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
name|room
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"roomNbr"
argument_list|,
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|roomElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportArrHours
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|exportDatePattern
argument_list|(
name|classElement
argument_list|,
name|clazz
operator|.
name|effectiveDatePattern
argument_list|()
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|exportRequiredRooms
argument_list|(
name|classElement
argument_list|,
name|clazz
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|exportDatePattern
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|DatePattern
name|dp
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
if|if
condition|(
name|dp
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|dp
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
argument_list|)
operator|||
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.export.defaultDatePattern"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|Calendar
name|startDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|startDate
operator|.
name|setTime
argument_list|(
name|dp
operator|.
name|getStartDate
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|endDate
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|endDate
operator|.
name|setTime
argument_list|(
name|dp
operator|.
name|getEndDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|startMonth
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|endMonth
init|=
name|endDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|MONTH
argument_list|)
decl_stmt|;
name|int
name|startYear
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
name|int
name|endYear
init|=
name|endDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|endYear
operator|>
name|startYear
condition|)
block|{
name|endMonth
operator|+=
operator|(
literal|12
operator|*
operator|(
name|endYear
operator|-
name|startYear
operator|)
operator|)
expr_stmt|;
block|}
name|String
name|first
init|=
literal|null
decl_stmt|,
name|previous
init|=
literal|null
decl_stmt|;
name|char
index|[]
name|ptrn
init|=
name|dp
operator|.
name|getPattern
argument_list|()
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|int
name|charPosition
init|=
literal|0
decl_stmt|;
name|int
name|dayOfWeek
init|=
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|m
init|=
name|startMonth
init|;
name|m
operator|<=
name|endMonth
condition|;
name|m
operator|++
control|)
block|{
name|int
name|daysOfMonth
init|=
name|DateUtils
operator|.
name|getNrDaysOfMonth
argument_list|(
name|m
argument_list|,
name|startYear
argument_list|)
decl_stmt|;
name|int
name|d
init|=
operator|(
name|m
operator|==
name|startMonth
condition|?
name|startDate
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_MONTH
argument_list|)
else|:
literal|1
operator|)
decl_stmt|;
for|for
control|(
init|;
name|d
operator|<=
name|daysOfMonth
operator|&&
name|charPosition
operator|<
name|ptrn
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|ptrn
index|[
name|charPosition
index|]
operator|==
literal|'1'
condition|)
block|{
comment|// || (first!=null&& dayOfWeek==Calendar.SUNDAY)) {
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
operator|(
name|m
operator|<
literal|0
condition|?
name|startYear
operator|-
literal|1
else|:
name|m
operator|>=
literal|12
condition|?
name|startYear
operator|+
literal|1
else|:
name|startYear
operator|)
operator|+
literal|"/"
operator|+
operator|(
operator|(
name|m
operator|<
literal|0
condition|?
literal|12
operator|+
name|m
else|:
name|m
operator|%
literal|12
operator|)
operator|+
literal|1
operator|)
operator|+
literal|"/"
operator|+
name|d
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|Element
name|dateElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|dateElement
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|dateElement
operator|.
name|addAttribute
argument_list|(
literal|"endDate"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|previous
operator|=
operator|(
name|m
operator|<
literal|0
condition|?
name|startYear
operator|-
literal|1
else|:
name|m
operator|>=
literal|12
condition|?
name|startYear
operator|+
literal|1
else|:
name|startYear
operator|)
operator|+
literal|"/"
operator|+
operator|(
operator|(
name|m
operator|<
literal|0
condition|?
literal|12
operator|+
name|m
else|:
name|m
operator|%
literal|12
operator|)
operator|+
literal|1
operator|)
operator|+
literal|"/"
operator|+
name|d
expr_stmt|;
name|charPosition
operator|++
expr_stmt|;
name|dayOfWeek
operator|++
expr_stmt|;
if|if
condition|(
name|dayOfWeek
operator|>
name|Calendar
operator|.
name|SATURDAY
condition|)
name|dayOfWeek
operator|=
name|Calendar
operator|.
name|SUNDAY
expr_stmt|;
block|}
block|}
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
block|{
name|Element
name|dateElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|dateElement
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|dateElement
operator|.
name|addAttribute
argument_list|(
literal|"endDate"
argument_list|,
name|previous
argument_list|)
expr_stmt|;
name|first
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|exportRequiredRooms
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|clazz
operator|.
name|getEffectiveRoomPreferences
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomPref
name|rp
init|=
operator|(
name|RoomPref
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|PreferenceLevel
operator|.
name|sRequired
operator|.
name|equals
argument_list|(
name|rp
operator|.
name|getPrefLevel
argument_list|()
operator|.
name|getPrefProlog
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|rp
operator|.
name|getRoom
argument_list|()
decl_stmt|;
name|Element
name|roomElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|room
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
name|room
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"roomNbr"
argument_list|,
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|roomElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|rp
operator|.
name|getRoom
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|exportExam
parameter_list|(
name|Element
name|offeringElement
parameter_list|,
name|InstructionalOffering
name|offering
parameter_list|,
name|Exam
name|exam
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|Element
name|examElement
init|=
name|offeringElement
operator|.
name|addElement
argument_list|(
literal|"exam"
argument_list|)
decl_stmt|;
name|examElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|examElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
operator|(
name|exam
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|exam
operator|.
name|generateName
argument_list|()
else|:
name|exam
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|examElement
operator|.
name|addAttribute
argument_list|(
literal|"size"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|exam
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exam
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
name|examElement
operator|.
name|addAttribute
argument_list|(
literal|"note"
argument_list|,
name|exam
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|examElement
operator|.
name|addAttribute
argument_list|(
literal|"seatingType"
argument_list|,
name|exam
operator|.
name|getSeatingType
argument_list|()
operator|==
name|Exam
operator|.
name|sSeatingTypeExam
condition|?
literal|"exam"
else|:
literal|"normal"
argument_list|)
expr_stmt|;
name|examElement
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|Element
name|courseElement
init|=
literal|null
decl_stmt|;
name|CourseOffering
name|lastCourse
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getOwnerObjects
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|owner
init|=
operator|(
name|Object
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|instanceof
name|Class_
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|owner
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lastCourse
operator|==
literal|null
operator|||
operator|!
name|lastCourse
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
name|lastCourse
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
expr_stmt|;
name|courseElement
operator|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|lastCourse
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|lastCourse
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|lastCourse
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|lastCourse
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|lastCourse
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|courseElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
operator|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
condition|)
continue|continue;
name|examElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
operator|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|owner
operator|instanceof
name|InstrOfferingConfig
condition|)
block|{
name|InstrOfferingConfig
name|config
init|=
operator|(
name|InstrOfferingConfig
operator|)
name|owner
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lastCourse
operator|==
literal|null
operator|||
operator|!
name|lastCourse
operator|.
name|equals
argument_list|(
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|)
condition|)
block|{
name|lastCourse
operator|=
name|config
operator|.
name|getControllingCourseOffering
argument_list|()
expr_stmt|;
name|courseElement
operator|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|lastCourse
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|lastCourse
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|lastCourse
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|lastCourse
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|lastCourse
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|subparts
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|courseElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
operator|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|config
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|TreeSet
name|subparts
init|=
operator|new
name|TreeSet
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
operator|(
operator|(
name|SchedulingSubpart
operator|)
name|subparts
operator|.
name|first
argument_list|()
operator|)
operator|.
name|getClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|Class_
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|examElement
operator|.
name|addElement
argument_list|(
literal|"class"
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"type"
argument_list|,
name|clazz
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
operator|.
name|addAttribute
argument_list|(
literal|"suffix"
argument_list|,
operator|(
name|clazz
operator|.
name|getClassSuffix
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|owner
operator|instanceof
name|CourseOffering
condition|)
block|{
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|owner
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|equals
argument_list|(
name|offering
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|offering
operator|!=
literal|null
operator|&&
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
continue|continue;
name|courseElement
operator|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|lastCourse
operator|=
name|course
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|course
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|owner
operator|instanceof
name|CourseOffering
condition|)
block|{
name|InstructionalOffering
name|o
init|=
operator|(
name|InstructionalOffering
operator|)
name|owner
decl_stmt|;
if|if
condition|(
name|offering
operator|!=
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
name|j
init|=
name|o
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|course
init|=
operator|(
name|CourseOffering
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|courseElement
operator|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|lastCourse
operator|=
name|course
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
operator|(
name|course
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getExternalUniqueId
argument_list|()
else|:
name|course
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"subject"
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|courseElement
operator|.
name|addAttribute
argument_list|(
literal|"courseNbr"
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|exportInstructor
argument_list|(
name|examElement
operator|.
name|addElement
argument_list|(
literal|"instructor"
argument_list|)
argument_list|,
name|instructor
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Element
name|periodElement
init|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"period"
argument_list|)
decl_stmt|;
name|periodElement
operator|.
name|addAttribute
argument_list|(
literal|"date"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|periodElement
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|sTimeFormat
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getStartTime
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|periodElement
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|sTimeFormat
operator|.
name|format
argument_list|(
name|exam
operator|.
name|getEndTime
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|location
operator|instanceof
name|Room
condition|)
block|{
name|Room
name|room
init|=
operator|(
name|Room
operator|)
name|location
decl_stmt|;
name|Element
name|roomElement
init|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|room
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
name|room
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"roomNbr"
argument_list|,
name|room
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Element
name|roomElement
init|=
name|examElement
operator|.
name|addElement
argument_list|(
literal|"location"
argument_list|)
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|getExternalUniqueId
argument_list|()
operator|!=
literal|null
condition|)
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"id"
argument_list|,
name|location
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|roomElement
operator|.
name|addAttribute
argument_list|(
literal|"name"
argument_list|,
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|exportEvent
parameter_list|(
name|Element
name|classElement
parameter_list|,
name|Event
name|event
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|event
operator|.
name|getMeetings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|meeting
init|=
operator|(
name|Meeting
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Element
name|meetingElement
init|=
name|classElement
operator|.
name|addElement
argument_list|(
literal|"meeting"
argument_list|)
decl_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"startDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"endDate"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"startTime"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"endTime"
argument_list|,
name|sDateFormat
operator|.
name|format
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|meeting
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"M"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"T"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"W"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"R"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"F"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"S"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"days"
argument_list|,
literal|"U"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
block|}
if|else if
condition|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|instanceof
name|Room
condition|)
block|{
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"building"
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|meeting
operator|.
name|getLocation
argument_list|()
operator|)
operator|.
name|getBuildingAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"room"
argument_list|,
operator|(
operator|(
name|Room
operator|)
name|meeting
operator|.
name|getLocation
argument_list|()
operator|)
operator|.
name|getRoomNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meetingElement
operator|.
name|addAttribute
argument_list|(
literal|"location"
argument_list|,
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"c:\\test\\courseOfferings.xml"
block|,
literal|"puWestLafayetteTrdtn"
block|,
literal|"2007"
block|,
literal|"Fal"
block|}
expr_stmt|;
name|ToolBox
operator|.
name|configureLogging
argument_list|()
expr_stmt|;
name|HibernateUtil
operator|.
name|configureHibernate
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
name|Session
operator|.
name|getSessionUsingInitiativeYearTerm
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|,
name|args
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Session "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" "
operator|+
name|args
index|[
literal|2
index|]
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" not found!"
argument_list|)
throw|;
operator|new
name|CourseOfferingExport
argument_list|()
operator|.
name|saveXml
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|,
name|session
argument_list|,
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

