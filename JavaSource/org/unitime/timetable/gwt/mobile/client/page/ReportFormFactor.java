begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2014, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|mobile
operator|.
name|client
operator|.
name|page
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|mgwt
operator|.
name|ui
operator|.
name|client
operator|.
name|MGWT
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ReportFormFactor
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|report
parameter_list|(
name|RootPanel
name|panel
parameter_list|)
block|{
specifier|final
name|boolean
name|reload
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
argument_list|)
decl_stmt|;
name|ReportFormFactorRequest
name|req
init|=
operator|new
name|ReportFormFactorRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setFormFactor
argument_list|(
name|MGWT
operator|.
name|getFormFactor
argument_list|()
operator|.
name|isDesktop
argument_list|()
condition|?
literal|"desktop"
else|:
name|MGWT
operator|.
name|getFormFactor
argument_list|()
operator|.
name|isPhone
argument_list|()
condition|?
literal|"phone"
else|:
literal|"tablet"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|req
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseNull
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseNull
name|result
parameter_list|)
block|{
if|if
condition|(
name|reload
operator|&&
operator|!
name|MGWT
operator|.
name|getFormFactor
argument_list|()
operator|.
name|isDesktop
argument_list|()
condition|)
name|Window
operator|.
name|Location
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ReportFormFactorRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseNull
argument_list|>
block|{
specifier|private
name|String
name|iFormFactor
init|=
literal|null
decl_stmt|;
specifier|public
name|ReportFormFactorRequest
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setFormFactor
parameter_list|(
name|String
name|formFactor
parameter_list|)
block|{
name|iFormFactor
operator|=
name|formFactor
expr_stmt|;
block|}
specifier|public
name|String
name|getFormFactor
parameter_list|()
block|{
return|return
name|iFormFactor
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"form-factor: "
operator|+
name|getFormFactor
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

