begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|authenticate
operator|.
name|jaas
operator|.
name|LoginConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|authenticate
operator|.
name|jaas
operator|.
name|UserPasswordHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicAreaClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|CourseInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServerUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|ComputeSuggestionsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ApproveEnrollmentsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|EnrollStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|RejectEnrollmentsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadAllData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|SaveStudentRequests
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|server
operator|.
name|rpc
operator|.
name|RemoteServiceServlet
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningServlet
extends|extends
name|RemoteServiceServlet
implements|implements
name|SectioningService
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SectioningServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|OnlineSectioningServerUpdater
name|iUpdater
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Student Sectioning Service is starting up ..."
argument_list|)
expr_stmt|;
name|OnlineSectioningService
operator|.
name|init
argument_list|()
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|String
name|year
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.term"
argument_list|)
decl_stmt|;
try|try
block|{
name|iUpdater
operator|=
operator|new
name|OnlineSectioningServerUpdater
argument_list|(
name|StudentSectioningQueue
operator|.
name|getLastTimeStamp
argument_list|(
name|hibSession
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Session
argument_list|>
name|i
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Session
name|session
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|year
operator|!=
literal|null
operator|&&
operator|!
name|year
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|&&
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
continue|continue;
name|int
name|nrSolutions
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(s) from Solution s where s.owner.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|nrSolutions
operator|==
literal|0
condition|)
continue|continue;
specifier|final
name|Long
name|sessionId
init|=
name|session
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.autostart"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|OnlineSectioningService
operator|.
name|createInstance
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to upadte session "
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" ("
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|"), reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|setName
argument_list|(
literal|"CourseLoader["
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|OnlineSectioningService
operator|.
name|createInstance
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to upadte session "
operator|+
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
literal|" "
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
literal|" ("
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
operator|+
literal|"), reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to initialize, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Student Sectioning Service is going down ..."
argument_list|)
expr_stmt|;
name|iUpdater
operator|.
name|stopUpdating
argument_list|()
expr_stmt|;
name|OnlineSectioningService
operator|.
name|unloadAll
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|listCourseOfferings
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) like :q || '%' "
operator|+
operator|(
name|query
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|?
literal|"or lower(c.title) like '%' || :q || '%'"
else|:
literal|""
operator|)
operator|+
literal|") "
operator|+
literal|"order by case "
operator|+
literal|"when lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) like :q || '%' then 0 else 1 end,"
operator|+
comment|// matches on course name first
literal|"c.subjectArea.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|limit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|int
name|courseLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|+=
name|cfg
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|c
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|unlimited
condition|?
operator|-
literal|1
else|:
name|courseLimit
argument_list|)
expr_stmt|;
name|course
operator|.
name|setProjected
argument_list|(
name|c
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setEnrollment
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLastLike
argument_list|(
name|c
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|query
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|CourseInfo
name|c
range|:
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
operator|.
name|findCourses
argument_list|(
name|query
argument_list|,
name|limit
argument_list|)
control|)
block|{
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasUniqueName
argument_list|(
name|c
operator|.
name|hasUniqueName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|query
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|listClasses
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|course
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|CourseOffering
name|courseOffering
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) = :course"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|courseOffering
operator|=
name|c
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|j
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
name|ass
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|ass
operator|==
literal|null
condition|?
literal|null
else|:
name|ass
operator|.
name|getPlacement
argument_list|()
operator|)
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|p
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
operator|*
name|p
operator|.
name|getRoomSize
argument_list|()
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getRoomLocations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|p
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getRoomLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|p
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|instr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: Do we want to populate expected space?
name|a
operator|.
name|setExpected
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
else|else
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|Lock
name|lock
init|=
name|server
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
name|CourseInfo
name|c
init|=
name|server
operator|.
name|getCourseInfo
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Section
argument_list|>
name|sections
init|=
name|server
operator|.
name|getSections
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sections
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Section
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Config
name|c1
parameter_list|,
name|Config
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|c1
operator|.
name|getId
argument_list|()
argument_list|,
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Subpart
name|s1
parameter_list|,
name|Subpart
name|s2
parameter_list|)
block|{
name|Subpart
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Subpart
name|s1
parameter_list|,
name|Subpart
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getConfig
argument_list|()
argument_list|,
name|s2
operator|.
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|cmp
operator|=
name|s1
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|s1
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|s2
operator|.
name|getSubpart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
name|s1
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|s1
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getId
argument_list|()
argument_list|,
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|limits
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|OnlineSectioningService
operator|.
name|sSectionLimitProvider
operator|!=
literal|null
condition|)
block|{
name|limits
operator|=
name|OnlineSectioningService
operator|.
name|sSectionLimitProvider
operator|.
name|getSectionLimits
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
block|}
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|courseAssign
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|courseAssign
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseAssign
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|courseAssign
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Section
name|section
range|:
name|sections
control|)
block|{
name|String
name|room
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
name|room
operator|==
literal|null
condition|)
name|room
operator|=
literal|""
expr_stmt|;
else|else
name|room
operator|+=
literal|", "
expr_stmt|;
name|room
operator|+=
name|rm
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|int
index|[]
name|limit
init|=
operator|(
name|limits
operator|==
literal|null
condition|?
operator|new
name|int
index|[]
block|{
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
block|,
name|section
operator|.
name|getLimit
argument_list|()
block|}
else|:
name|limits
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|courseAssign
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|section
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|section
operator|.
name|getName
argument_list|(
operator|-
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|a
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|a
operator|.
name|addNote
argument_list|(
name|section
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|section
operator|.
name|getRooms
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
operator|.
name|getName
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|c
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoClassesForCourse
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|ret
return|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
index|[]
argument_list|>
name|listAcademicSessions
parameter_list|(
name|boolean
name|sectioning
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectioning
condition|)
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicSessionInfo
name|s
range|:
name|OnlineSectioningService
operator|.
name|getAcademicSessions
argument_list|()
control|)
block|{
if|if
condition|(
name|principal
operator|!=
literal|null
operator|&&
name|principal
operator|.
name|getStudentId
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
block|,
name|s
operator|.
name|getYear
argument_list|()
block|,
name|s
operator|.
name|getTerm
argument_list|()
block|,
name|s
operator|.
name|getCampus
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
operator|&&
name|principal
operator|!=
literal|null
condition|)
for|for
control|(
name|AcademicSessionInfo
name|s
range|:
name|OnlineSectioningService
operator|.
name|getAcademicSessions
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
block|,
name|s
operator|.
name|getYear
argument_list|()
block|,
name|s
operator|.
name|getTerm
argument_list|()
block|,
name|s
operator|.
name|getCampus
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Session
name|session
range|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
operator|&&
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|&&
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
block|,
name|session
operator|.
name|getAcademicYear
argument_list|()
block|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
block|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSuitableAcademicSessions
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|retrieveCourseDetails
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|course
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
operator|==
literal|null
condition|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
name|CourseDetailsProvider
name|provider
init|=
literal|null
decl_stmt|;
try|try
block|{
name|provider
operator|=
operator|(
name|CourseDetailsProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.CourseDetailsProvider"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoCustomCourseDetails
argument_list|()
argument_list|)
throw|;
block|}
name|String
name|details
init|=
name|provider
operator|.
name|getDetails
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|details
return|;
block|}
else|else
block|{
name|CourseInfo
name|c
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getCourseInfo
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|c
operator|.
name|getDetails
argument_list|()
return|;
block|}
block|}
specifier|public
name|Long
name|retrieveCourseOfferingId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|course
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|CourseInfo
name|c
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getCourseInfo
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|c
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
specifier|public
name|ClassAssignmentInterface
name|section
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
operator|new
name|FindAssignmentAction
argument_list|(
name|request
argument_list|,
name|currentAssignment
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
operator|||
name|principal
operator|.
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ret
operator|.
name|setCanEnroll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|checkCourses
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notFound
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cr
operator|.
name|hasRequestedFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasFirstAlternative
argument_list|()
operator|&&
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasSecondAlternative
argument_list|()
operator|&&
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasFirstAlternative
argument_list|()
operator|&&
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasSecondAlternative
argument_list|()
operator|&&
name|SaveStudentRequests
operator|.
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|notFound
return|;
block|}
else|else
block|{
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|checkCourses
argument_list|(
name|request
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|computeSuggestions
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|,
name|int
name|selectedAssignmentIndex
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|selectedAssignment
init|=
operator|(
operator|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
operator|)
name|currentAssignment
operator|)
operator|.
name|get
argument_list|(
name|selectedAssignmentIndex
argument_list|)
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
operator|new
name|ComputeSuggestionsAction
argument_list|(
name|request
argument_list|,
name|currentAssignment
argument_list|,
name|selectedAssignment
argument_list|,
name|filter
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|boolean
name|canEnroll
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|canEnroll
condition|)
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
operator|||
name|principal
operator|.
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
name|canEnroll
operator|=
literal|false
expr_stmt|;
block|}
block|}
for|for
control|(
name|ClassAssignmentInterface
name|ca
range|:
name|ret
control|)
name|ca
operator|.
name|setCanEnroll
argument_list|(
name|canEnroll
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|logIn
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
literal|"LOOKUP"
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isAdmin
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginFailed
argument_list|()
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|student
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Student m where m.externalUniqueId = :uid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"uid"
argument_list|,
name|password
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|UniTimePrincipal
name|principal
init|=
operator|new
name|UniTimePrincipal
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|student
control|)
block|{
name|principal
operator|.
name|addStudentId
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"user"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"login.nrAttempts"
argument_list|)
expr_stmt|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|Integer
name|nrAttempts
init|=
operator|(
name|Integer
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"login.nrAttempts"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nrAttempts
operator|==
literal|null
condition|)
name|nrAttempts
operator|=
literal|1
expr_stmt|;
else|else
name|nrAttempts
operator|++
expr_stmt|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"login.nrAttempts"
argument_list|,
name|nrAttempts
argument_list|)
expr_stmt|;
if|if
condition|(
name|nrAttempts
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionTooManyLoginAttempts
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|userName
operator|==
literal|null
operator|||
name|userName
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginNoUsername
argument_list|()
argument_list|)
throw|;
name|String
name|studentId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|studentId
operator|=
name|userName
operator|.
name|substring
argument_list|(
name|userName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|userName
operator|=
name|userName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|userName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UserPasswordHandler
name|handler
init|=
operator|new
name|UserPasswordHandler
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|LoginContext
name|lc
init|=
operator|new
name|LoginContext
argument_list|(
literal|"Timetabling"
argument_list|,
operator|new
name|Subject
argument_list|()
argument_list|,
name|handler
argument_list|,
operator|new
name|LoginConfiguration
argument_list|()
argument_list|)
decl_stmt|;
name|lc
operator|.
name|login
argument_list|()
expr_stmt|;
name|Set
name|creds
init|=
name|lc
operator|.
name|getSubject
argument_list|()
operator|.
name|getPublicCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|creds
operator|==
literal|null
operator|||
name|creds
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginFailed
argument_list|()
argument_list|)
throw|;
block|}
name|UniTimePrincipal
name|principal
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|creds
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|o
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|User
condition|)
block|{
name|User
name|user
init|=
operator|(
name|User
operator|)
name|o
decl_stmt|;
name|principal
operator|=
operator|new
name|UniTimePrincipal
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|user
operator|.
name|getRoles
argument_list|()
operator|.
name|contains
argument_list|(
name|Roles
operator|.
name|ADMIN_ROLE
argument_list|)
condition|)
block|{
name|principal
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|student
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Student m where m.externalUniqueId = :uid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"uid"
argument_list|,
name|studentId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|student
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|principal
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
empty_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|student
control|)
block|{
name|principal
operator|.
name|addStudentId
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setName
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginFailed
argument_list|()
argument_list|)
throw|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"user"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"login.nrAttempts"
argument_list|)
expr_stmt|;
name|CourseRequestInterface
name|req
init|=
name|getLastRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
operator|&&
name|req
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|setLastRequest
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
if|if
condition|(
literal|"Login Failure: all modules ignored"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|nrAttempts
operator|==
literal|3
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionTooManyLoginAttempts
argument_list|()
argument_list|)
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginFailed
argument_list|()
argument_list|)
throw|;
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginFailedUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|logOut
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"sessionId"
argument_list|)
expr_stmt|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"request"
argument_list|)
expr_stmt|;
comment|// getThreadLocalRequest().getSession().invalidate();
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|whoAmI
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUserNotLoggedIn
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|principal
operator|=
operator|new
name|UniTimePrincipal
argument_list|(
name|user
operator|.
name|getId
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"user"
argument_list|,
name|principal
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
return|return
literal|"Guest"
return|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|principal
operator|.
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
return|;
block|}
specifier|public
name|Long
name|getLastSessionId
parameter_list|()
block|{
name|Long
name|lastSessionId
init|=
operator|(
name|Long
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"sessionId"
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSessionId
operator|==
literal|null
condition|)
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|Session
operator|.
name|getCurrentAcadSession
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
name|lastSessionId
operator|=
name|session
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|lastSessionId
return|;
block|}
specifier|public
name|void
name|setLastSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseRequestInterface
name|getLastRequest
parameter_list|()
block|{
return|return
operator|(
name|CourseRequestInterface
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"request"
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLastRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|null
condition|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|removeAttribute
argument_list|(
literal|"request"
argument_list|)
expr_stmt|;
else|else
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"request"
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|lastAcademicSession
parameter_list|(
name|boolean
name|sectioning
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUserNotLoggedIn
argument_list|()
argument_list|)
throw|;
name|Long
name|sessionId
init|=
name|getLastSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|sectioning
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|AcademicSessionInfo
name|s
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
return|return
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
block|,
name|s
operator|.
name|getYear
argument_list|()
block|,
name|s
operator|.
name|getTerm
argument_list|()
block|,
name|s
operator|.
name|getCampus
argument_list|()
block|}
return|;
block|}
else|else
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSuitableAcademicSessions
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
return|return
operator|new
name|String
index|[]
block|{
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|session
operator|.
name|getAcademicYear
argument_list|()
block|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
block|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
block|}
return|;
block|}
block|}
specifier|public
name|CourseRequestInterface
name|lastRequest
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|CourseRequestInterface
name|request
init|=
name|getLastRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
name|request
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|CourseRequestInterface
name|lastRequest
init|=
name|server
operator|.
name|getRequest
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastRequest
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|lastRequest
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|lastRequest
return|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoRequests
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|request
operator|=
operator|new
name|CourseRequestInterface
argument_list|()
expr_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestInterface
operator|.
name|Request
name|lastRequest
init|=
literal|null
decl_stmt|;
name|int
name|lastRequestPriority
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStart
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|day
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ft
operator|.
name|addDay
argument_list|(
name|day
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
operator|&&
name|lastRequestPriority
operator|==
name|cd
operator|.
name|getPriority
argument_list|()
condition|)
block|{
name|r
operator|=
name|lastRequest
expr_stmt|;
name|lastRequest
operator|.
name|addRequestedFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|lastRequest
operator|.
name|setRequestedCourse
argument_list|(
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|()
operator|+
literal|", "
operator|+
name|ft
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|r
operator|.
name|addRequestedFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRequestedCourse
argument_list|(
name|ft
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequest
argument_list|>
name|i
init|=
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseRequest
name|course
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseInfo
name|c
init|=
operator|(
name|server
operator|==
literal|null
condition|?
operator|new
name|CourseInfo
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
else|:
name|server
operator|.
name|getCourseInfo
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
switch|switch
condition|(
name|course
operator|.
name|getOrder
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|r
operator|.
name|setRequestedCourse
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|r
operator|.
name|setFirstAlternative
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|r
operator|.
name|setSecondAlternative
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|request
return|;
block|}
if|if
condition|(
operator|!
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseInfo
name|c
init|=
operator|(
name|server
operator|==
literal|null
condition|?
operator|new
name|CourseInfo
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
else|:
name|server
operator|.
name|getCourseInfo
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|courses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|request
operator|=
operator|new
name|CourseRequestInterface
argument_list|()
expr_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseInfo
name|c
range|:
name|courses
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|r
operator|.
name|setRequestedCourse
argument_list|(
name|c
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
name|c
operator|.
name|hasUniqueName
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|request
return|;
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoRequests
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
return|return
name|request
return|;
block|}
specifier|public
name|ClassAssignmentInterface
name|lastResult
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|getAssignment
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
operator|||
name|principal
operator|.
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
operator|==
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|getCourseAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
comment|/* 			Student student = StudentDAO.getInstance().get(studentId, hibSession); 			if (student == null) throw new SectioningException(SectioningExceptionType.BAD_STUDENT_ID); 			Lock lock = server.readLock(); 			try { 				if (!student.getClassEnrollments().isEmpty()) { 					ArrayList<ClassAssignmentInterface.ClassAssignment> ret = new ArrayList<ClassAssignmentInterface.ClassAssignment>(); 					for (Iterator<StudentClassEnrollment> i = student.getClassEnrollments().iterator(); i.hasNext(); ) { 						StudentClassEnrollment enrl = i.next(); 						CourseInfo course = server.getCourseInfo(enrl.getCourseOffering().getUniqueId()); 						Section section = server.getSection(enrl.getClazz().getUniqueId()); 						if (course == null || section == null) continue; 						ClassAssignmentInterface.ClassAssignment ca = new ClassAssignmentInterface.ClassAssignment(); 						ca.setCourseId(course.getUniqueId()); 						ca.setClassId(section.getId()); 						ca.setPinned(true); 						ca.setSubject(course.getSubjectArea()); 						ca.setCourseNbr(course.getCourseNbr()); 						ca.setSubpart(section.getSubpart().getName()); 						ca.setSection(section.getName(course.getUniqueId())); 						ret.add(ca); 					} 					if (!ret.isEmpty()) return ret; 				} 			} finally { 				lock.release(); 			} 			*/
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSchedule
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Boolean
name|saveRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAuthenticated
argument_list|()
argument_list|)
throw|;
name|Long
name|studentId
init|=
name|principal
operator|.
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|isAdmin
argument_list|()
condition|)
name|studentId
operator|=
name|request
operator|.
name|getStudentId
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.requests.save"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
name|server
operator|.
name|execute
argument_list|(
operator|new
name|SaveStudentRequests
argument_list|(
name|studentId
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|SaveStudentRequests
operator|.
name|saveRequest
argument_list|(
literal|null
argument_list|,
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|)
argument_list|,
name|student
argument_list|,
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ClassAssignmentInterface
name|enroll
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotAuthenticated
argument_list|()
argument_list|)
throw|;
name|Long
name|studentId
init|=
name|principal
operator|.
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|isAdmin
argument_list|()
condition|)
name|studentId
operator|=
name|request
operator|.
name|getStudentId
argument_list|()
expr_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
operator|new
name|EnrollStudent
argument_list|(
name|studentId
argument_list|,
name|request
argument_list|,
name|currentAssignment
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Boolean
name|isAdmin
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
return|return
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|canApprove
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
operator|||
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|offering
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|user
operator|.
name|isAdmin
argument_list|()
condition|)
return|return
literal|true
return|;
name|TimetableManager
name|tm
init|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"instructor"
operator|.
name|equals
argument_list|(
name|offering
operator|.
name|getConsentType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|offering
operator|.
name|getCoordinators
argument_list|()
control|)
block|{
if|if
condition|(
name|user
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|listEnrollments
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
operator|&&
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|Long
name|offeringId
init|=
operator|(
name|clazz
operator|==
literal|null
condition|?
name|offering
operator|.
name|getUniqueId
argument_list|()
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|)
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|clazz
operator|==
literal|null
condition|?
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
else|:
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|approvedBy2name
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|student2enrollment
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
operator|(
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|clazz
operator|==
literal|null
condition|?
literal|"from StudentClassEnrollment e where e.courseOffering.instructionalOffering.uniqueId = :offeringId"
else|:
literal|"select e from StudentClassEnrollment e where e.courseOffering.instructionalOffering.uniqueId = :offeringId and e.student.uniqueId in "
operator|+
literal|"(select f.student.uniqueId from StudentClassEnrollment f where f.clazz.uniqueId = "
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|student2enrollment
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.student.name"
argument_list|,
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicAreaClassification
name|ac
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAcademicAreaClassifications
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|ac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|ac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|m
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getPosMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addMajor
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
expr_stmt|;
name|e
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|e
operator|.
name|setEnrolledDate
argument_list|(
name|enrollment
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseName
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|student2enrollment
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseRequest
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|first
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
argument_list|)
condition|)
name|e
operator|.
name|setAlternative
argument_list|(
name|first
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|CourseDemand
name|first
init|=
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
decl_stmt|;
name|demands
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cd
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|<
literal|0
operator|&&
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue
name|demands
continue|;
name|first
operator|=
name|cd
expr_stmt|;
block|}
block|}
name|CourseRequest
name|alt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|first
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alt
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|alt
operator|=
name|r
expr_stmt|;
block|}
name|e
operator|.
name|setAlternative
argument_list|(
name|alt
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setRequestedDate
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setApprovedDate
argument_list|(
name|enrollment
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|approvedBy2name
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|mgr
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where externalUniqueId = :externalId and department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|instr
operator|!=
literal|null
condition|)
name|name
operator|=
name|instr
operator|.
name|nameLastNameFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|approvedBy2name
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setApprovedBy
argument_list|(
name|name
operator|==
literal|null
condition|?
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
else|:
name|name
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|e
operator|.
name|setPriority
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|c
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setClassId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|c
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setClassNumber
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubpart
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classOrOfferingId
operator|>=
literal|0
condition|)
for|for
control|(
name|CourseRequest
name|request
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseRequest r where r.courseOffering.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|classOrOfferingId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|student2enrollment
operator|.
name|get
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
continue|continue;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.student.name"
argument_list|,
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicAreaClassification
name|ac
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getAcademicAreaClassifications
argument_list|()
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|ac
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|ac
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PosMajor
name|m
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getPosMajors
argument_list|()
control|)
block|{
name|st
operator|.
name|addMajor
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
expr_stmt|;
name|e
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourseName
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|student2enrollment
operator|.
name|put
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseRequest
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|first
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
name|e
operator|.
name|setAlternative
argument_list|(
name|first
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|CourseDemand
name|first
init|=
name|request
operator|.
name|getCourseDemand
argument_list|()
decl_stmt|;
name|demands
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cd
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|<
literal|0
operator|&&
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue
name|demands
continue|;
name|first
operator|=
name|cd
expr_stmt|;
block|}
block|}
name|CourseRequest
name|alt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|first
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alt
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|alt
operator|=
name|r
expr_stmt|;
block|}
name|e
operator|.
name|setAlternative
argument_list|(
name|alt
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setRequestedDate
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|(
name|student2enrollment
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|server
operator|.
name|listEnrollments
argument_list|(
name|classOrOfferingId
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ClassAssignmentInterface
name|getEnrollment
parameter_list|(
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseAssignment
argument_list|>
name|courses
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
operator|(
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentClassEnrollment e where e.student.uniqueId = :studentId order by e.courseOffering.subjectAreaAbbv, e.courseOffering.courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseAssignment
name|course
init|=
name|courses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|course
operator|=
operator|new
name|CourseAssignment
argument_list|()
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassAssignment
name|clazz
init|=
name|course
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setClassId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseNbr
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubject
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|clazz
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setClassNumber
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubpart
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|setParentSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|clazz
operator|.
name|setParentSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|clazz
operator|.
name|addNote
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|)
operator|*
name|placement
operator|.
name|getRoomSize
argument_list|()
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|clazz
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setStart
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
comment|//clazz.setDatePattern(placement.getTimeLocation().getDatePatternName());
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|ReloadAllData
operator|.
name|datePatternName
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
argument_list|,
operator|new
name|AcademicSessionInfo
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|placement
operator|.
name|getNrRooms
argument_list|()
operator|==
literal|1
condition|)
block|{
name|clazz
operator|.
name|addRoom
argument_list|(
name|placement
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|placement
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|placement
operator|.
name|getRoomLocations
argument_list|()
control|)
name|clazz
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|clazz
operator|.
name|addInstructor
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addInstructoEmailr
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|demands
label|:
for|for
control|(
name|CourseDemand
name|demand
range|:
operator|(
name|List
argument_list|<
name|CourseDemand
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseDemand d where d.student.uniqueId = :studentId order by d.priority"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassAssignment
name|clazz
init|=
name|course
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setLength
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|clazz
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setStart
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ca
label|:
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignment
name|c
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isAssigned
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|int
name|d
range|:
name|c
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|clazz
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getStart
argument_list|()
operator|+
name|c
operator|.
name|getLength
argument_list|()
operator|>
name|clazz
operator|.
name|getStart
argument_list|()
operator|&&
name|clazz
operator|.
name|getStart
argument_list|()
operator|+
name|clazz
operator|.
name|getLength
argument_list|()
operator|>
name|c
operator|.
name|getStart
argument_list|()
condition|)
block|{
name|course
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break
name|ca
break|;
block|}
block|}
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|courses
operator|.
name|containsKey
argument_list|(
name|r
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue
name|demands
continue|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|request
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|request
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|ClassAssignment
name|clazz
init|=
name|course
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseNbr
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubject
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
return|return
name|server
operator|.
name|getAssignment
argument_list|(
name|studentId
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|approveEnrollments
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
operator|||
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
name|String
name|approval
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getName
argument_list|()
decl_stmt|;
name|server
operator|.
name|execute
argument_list|(
operator|new
name|ApproveEnrollmentsAction
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentIds
argument_list|,
name|approval
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|approval
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|rejectEnrollments
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|isNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|OnlineSectioningService
operator|.
name|getInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
operator|||
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
name|String
name|approval
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getId
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
operator|new
name|RejectEnrollmentsAction
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentIds
argument_list|,
name|approval
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

