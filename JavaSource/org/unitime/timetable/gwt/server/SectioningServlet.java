begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|CacheMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|SessionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|DisposableBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|authentication
operator|.
name|UsernamePasswordAuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|Authentication
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|core
operator|.
name|context
operator|.
name|SecurityContextHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|messages
operator|.
name|SecurityMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|ApplicationProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|defaults
operator|.
name|SessionAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|SectioningStatusFilterBox
operator|.
name|SectioningStatusFilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|SectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|AdvisingStudentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|AdvisorCourseRequestSubmission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|GradeMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|SectioningProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|StudentGroupInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|StudentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|StudentStatusInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|CancelSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeGradeModesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|ChangeGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAllSpecialRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAvailableGradeModesRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAvailableGradeModesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|UpdateSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|UpdateSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalClassNameHelperInterface
operator|.
name|HasGradableSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Advisor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseDemand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|FixedCreditUnitConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|LearningCommunityReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAccomodation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentAreaClassificationMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentInstrMthPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningPref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseDemandDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|advisors
operator|.
name|AdvisorCourseRequestsSubmit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|advisors
operator|.
name|AdvisorGetCourseRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|CheckCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|CheckEligibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|CourseRequestEligibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetDegreePlans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|GetRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|ListClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|ListCourseOfferings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|basic
operator|.
name|ListEnrollments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseMatcherProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CriticalCoursesProvider
operator|.
name|CriticalCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseLookupHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseRequestsHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCourseRequestsValidationHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomCriticalCoursesHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomDegreePlansHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomSpecialRegistrationHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CustomStudentEnrollmentHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|Customization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|DefaultCourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|ExternalTermProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|RequestStudentUpdates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|AbstractCourseMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XCourseId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|model
operator|.
name|XStudentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|server
operator|.
name|DatabaseServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|ComputeSuggestionsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|solver
operator|.
name|FindAssignmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationCancel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationChangeGradeModes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationEligibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationRetrieveAll
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationRetrieveGradeModes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationSubmit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|specreg
operator|.
name|SpecialRegistrationUpdate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindEnrollmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindEnrollmentInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindStudentInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|FindOnlineSectioningLogAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|StatusPageSuggestionsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindEnrollmentAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindEnrollmentInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindOnlineSectioningLogAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|status
operator|.
name|db
operator|.
name|DbFindStudentInfoAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ApproveEnrollmentsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ChangeStudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ChangeStudentStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|EnrollStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|MassCancelAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|RejectEnrollmentsAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|ReloadStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|SaveStudentRequests
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|updates
operator|.
name|StudentEmail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserAuthority
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
operator|.
name|Chameleon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|context
operator|.
name|AnonymousUserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|qualifiers
operator|.
name|SimpleQualifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|ProxyHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|BatchEnrollStudent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Formats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|LoginManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"sectioning.gwt"
argument_list|)
specifier|public
class|class
name|SectioningServlet
implements|implements
name|SectioningService
implements|,
name|DisposableBean
block|{
specifier|private
specifier|static
name|StudentSectioningMessages
name|MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SecurityMessages
name|SEC_MSG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|SecurityMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SectioningServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CourseDetailsProvider
name|iCourseDetailsProvider
decl_stmt|;
specifier|private
name|CourseMatcherProvider
name|iCourseMatcherProvider
decl_stmt|;
specifier|private
name|ExternalTermProvider
name|iExternalTermProvider
decl_stmt|;
specifier|public
name|SectioningServlet
parameter_list|()
block|{
block|}
specifier|private
name|CourseDetailsProvider
name|getCourseDetailsProvider
parameter_list|()
block|{
if|if
condition|(
name|iCourseDetailsProvider
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|providerClass
init|=
name|ApplicationProperty
operator|.
name|CustomizationCourseDetails
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|providerClass
operator|!=
literal|null
condition|)
name|iCourseDetailsProvider
operator|=
operator|(
name|CourseDetailsProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|providerClass
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to initialize course detail provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iCourseDetailsProvider
operator|=
operator|new
name|DefaultCourseDetailsProvider
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|iCourseDetailsProvider
return|;
block|}
specifier|private
name|CourseMatcherProvider
name|getCourseMatcherProvider
parameter_list|()
block|{
if|if
condition|(
name|iCourseMatcherProvider
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|providerClass
init|=
name|ApplicationProperty
operator|.
name|CustomizationCourseMatcher
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|providerClass
operator|!=
literal|null
condition|)
name|iCourseMatcherProvider
operator|=
operator|(
name|CourseMatcherProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|providerClass
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to initialize course matcher provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iCourseMatcherProvider
return|;
block|}
specifier|private
name|ExternalTermProvider
name|getExternalTermProvider
parameter_list|()
block|{
if|if
condition|(
name|iExternalTermProvider
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|String
name|providerClass
init|=
name|ApplicationProperty
operator|.
name|CustomizationExternalTerm
operator|.
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|providerClass
operator|!=
literal|null
condition|)
name|iExternalTermProvider
operator|=
operator|(
name|ExternalTermProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|providerClass
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to initialize external term provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|iExternalTermProvider
return|;
block|}
specifier|private
annotation|@
name|Autowired
name|AuthenticationManager
name|authenticationManager
decl_stmt|;
specifier|private
name|AuthenticationManager
name|getAuthenticationManager
parameter_list|()
block|{
return|return
name|authenticationManager
return|;
block|}
specifier|private
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
specifier|private
annotation|@
name|Autowired
name|SolverService
argument_list|<
name|StudentSolverProxy
argument_list|>
name|studentSectioningSolverService
decl_stmt|;
specifier|private
name|StudentSolverProxy
name|getStudentSolver
parameter_list|()
block|{
return|return
name|studentSectioningSolverService
operator|.
name|getSolver
argument_list|()
return|;
block|}
specifier|private
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|private
name|OnlineSectioningServer
name|getServerInstance
parameter_list|(
name|Long
name|academicSessionId
parameter_list|,
name|boolean
name|canReturnDummy
parameter_list|)
block|{
if|if
condition|(
name|academicSessionId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ApplicationProperties
operator|.
name|setSessionId
argument_list|(
name|academicSessionId
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|academicSessionId
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
operator|||
operator|!
name|canReturnDummy
condition|)
return|return
name|server
return|;
name|SessionAttribute
name|attribute
init|=
name|SessionAttribute
operator|.
name|OnlineSchedulingDummyServer
decl_stmt|;
name|ProxyHolder
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServer
argument_list|>
name|h
init|=
operator|(
name|ProxyHolder
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServer
argument_list|>
operator|)
name|sessionContext
operator|.
name|getAttribute
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
operator|&&
name|h
operator|.
name|isValid
argument_list|(
name|academicSessionId
argument_list|)
condition|)
return|return
name|h
operator|.
name|getProxy
argument_list|()
return|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|academicSessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
name|server
operator|=
operator|new
name|DatabaseServer
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sessionContext
operator|.
name|setAttribute
argument_list|(
name|attribute
argument_list|,
operator|new
name|ProxyHolder
argument_list|<
name|Long
argument_list|,
name|OnlineSectioningServer
argument_list|>
argument_list|(
name|academicSessionId
argument_list|,
name|server
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|server
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|listCourseOfferings
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|CourseMatcher
name|matcher
init|=
name|getCourseMatcher
argument_list|(
name|sessionId
argument_list|,
name|server
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
operator|&&
operator|!
name|query
operator|.
name|isEmpty
argument_list|()
operator|&&
name|CustomCourseLookupHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
name|CustomCourseLookupHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourses
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
argument_list|,
name|hibSession
argument_list|,
name|query
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|courses
operator|!=
literal|null
operator|&&
operator|!
name|courses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
name|courses
control|)
block|{
if|if
condition|(
name|matcher
operator|.
name|match
argument_list|(
operator|new
name|XCourseId
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|course
operator|.
name|setCreditText
argument_list|(
name|c
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCreditAbbv
argument_list|(
name|c
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasCrossList
argument_list|(
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|int
name|courseLimit
init|=
literal|0
decl_stmt|;
name|int
name|snapshotLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|+=
name|cfg
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|Integer
name|snapshot
init|=
name|cfg
operator|.
name|getSnapShotLimit
argument_list|()
decl_stmt|;
if|if
condition|(
name|snapshot
operator|!=
literal|null
condition|)
name|snapshotLimit
operator|+=
name|snapshot
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|c
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|unlimited
condition|?
operator|-
literal|1
else|:
name|courseLimit
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSnapShotLimit
argument_list|(
name|snapshotLimit
argument_list|)
expr_stmt|;
name|course
operator|.
name|setProjected
argument_list|(
name|c
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setEnrollment
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLastLike
argument_list|(
name|c
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
name|course
operator|.
name|addInstructionalMethod
argument_list|(
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|course
operator|.
name|setHasNoInstructionalMethod
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ListCourseOfferings
operator|.
name|setSelection
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Failed to use the custom course lookup: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|types
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|ref
range|:
name|matcher
operator|.
name|getAllowedCourseTypes
argument_list|()
control|)
name|types
operator|+=
operator|(
name|types
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
literal|"'"
operator|+
name|ref
operator|+
literal|"'"
expr_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|isAllCourseTypes
argument_list|()
operator|&&
operator|!
name|matcher
operator|.
name|isNoCourseType
argument_list|()
operator|&&
name|types
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|query
argument_list|)
argument_list|)
throw|;
name|boolean
name|excludeNotOffered
init|=
name|ApplicationProperty
operator|.
name|CourseRequestsShowNotOffered
operator|.
name|isFalse
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
name|parent
init|=
name|matcher
operator|.
name|getParentCourseMatcher
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
operator|(
name|excludeNotOffered
condition|?
literal|"c.instructionalOffering.notOffered is false and "
else|:
literal|""
operator|)
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true and ("
operator|+
literal|"(lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) like :q || '%' or lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr || ' - ' || c.title) like :q || '%') "
operator|+
operator|(
name|query
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|?
literal|"or lower(c.title) like '%' || :q || '%'"
else|:
literal|""
operator|)
operator|+
literal|") "
operator|+
operator|(
name|matcher
operator|.
name|isAllCourseTypes
argument_list|()
condition|?
literal|""
else|:
name|matcher
operator|.
name|isNoCourseType
argument_list|()
condition|?
name|types
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" and c.courseType is null "
else|:
literal|" and (c.courseType is null or c.courseType.reference in ("
operator|+
name|types
operator|+
literal|")) "
else|:
literal|" and c.courseType.reference in ("
operator|+
name|types
operator|+
literal|") "
operator|)
operator|+
literal|"order by case "
operator|+
literal|"when lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) like :q || '%' then 0 else 1 end,"
operator|+
comment|// matches on course name first
literal|"c.subjectArea.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<=
literal|0
operator|||
name|parent
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|limit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|match
argument_list|(
operator|new
name|XCourseId
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
continue|continue;
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|course
operator|.
name|setCreditText
argument_list|(
name|c
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCreditAbbv
argument_list|(
name|c
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasCrossList
argument_list|(
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|int
name|courseLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|+=
name|cfg
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|c
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|unlimited
condition|?
operator|-
literal|1
else|:
name|courseLimit
argument_list|)
expr_stmt|;
name|course
operator|.
name|setProjected
argument_list|(
name|c
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setEnrollment
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLastLike
argument_list|(
name|c
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|config
range|:
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
control|)
block|{
if|if
condition|(
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
name|course
operator|.
name|addInstructionalMethod
argument_list|(
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|config
operator|.
name|getEffectiveInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|course
operator|.
name|setHasNoInstructionalMethod
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|limit
operator|!=
literal|null
operator|&&
name|limit
operator|>
literal|0
operator|&&
name|results
operator|.
name|size
argument_list|()
operator|>=
name|limit
condition|)
break|break;
block|}
if|if
condition|(
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|query
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
else|else
block|{
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
try|try
block|{
name|results
operator|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ListCourseOfferings
operator|.
name|class
argument_list|)
operator|.
name|forQuery
argument_list|(
name|query
argument_list|)
operator|.
name|withLimit
argument_list|(
name|limit
argument_list|)
operator|.
name|withMatcher
argument_list|(
name|matcher
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|results
operator|==
literal|null
operator|||
name|results
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|query
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|results
return|;
block|}
block|}
specifier|public
name|CourseMatcher
name|getCourseMatcher
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|OnlineSectioningServer
name|server
parameter_list|)
block|{
name|boolean
name|noCourseType
init|=
literal|true
decl_stmt|,
name|allCourseTypes
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allowedCourseTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
block|{
name|allCourseTypes
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
operator|(
name|studentId
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|StudentSectioningStatus
name|status
init|=
operator|(
name|student
operator|==
literal|null
condition|?
literal|null
else|:
name|student
operator|.
name|getEffectiveStatus
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseType
name|type
range|:
name|status
operator|.
name|getTypes
argument_list|()
control|)
name|allowedCourseTypes
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|noCourseType
operator|=
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|Option
operator|.
name|notype
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
name|courseIds
operator|=
name|server
operator|.
name|getRequestedCourseIds
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|courseIds
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|student
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
name|courseIds
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|CourseMatcher
name|matcher
init|=
operator|new
name|CourseMatcher
argument_list|(
name|allCourseTypes
argument_list|,
name|noCourseType
argument_list|,
name|allowedCourseTypes
argument_list|,
name|courseIds
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|!=
literal|null
condition|)
block|{
name|CourseMatcherProvider
name|provider
init|=
name|getCourseMatcherProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|provider
operator|!=
literal|null
condition|)
name|matcher
operator|.
name|setParentCourseMatcher
argument_list|(
name|provider
operator|.
name|getCourseMatcher
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|studentId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|matcher
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|listClasses
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|String
name|course
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
else|else
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ListClasses
operator|.
name|class
argument_list|)
operator|.
name|forCourseAndStudent
argument_list|(
name|course
argument_list|,
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|allowedClasses
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
operator|!
name|session
operator|.
name|canNoRoleReportClass
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionClassScheduleNotAvaiable
argument_list|()
argument_list|)
throw|;
block|}
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|CourseOffering
name|courseOffering
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true and "
operator|+
literal|"(lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) = :course or lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr || ' - ' || c.title) = :course)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|courseOffering
operator|=
name|c
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|j
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
block|{
if|if
condition|(
name|studentId
operator|!=
literal|null
operator|&&
name|allowedClasses
operator|==
literal|null
condition|)
block|{
name|allowedClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Reservation
name|reservation
range|:
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|StudentGroupType
name|type
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|WithGroupReservation
condition|)
block|{
name|boolean
name|hasStudent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|hasStudent
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasStudent
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
if|if
condition|(
operator|!
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
operator|&&
name|reservation
operator|.
name|isMatching
argument_list|(
name|c
argument_list|)
condition|)
name|allowedClasses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|StudentGroup
name|group
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|StudentGroupType
name|type
init|=
name|group
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|type
operator|.
name|getAllowDisabledSection
argument_list|()
operator|==
name|StudentGroupType
operator|.
name|AllowDisabledSection
operator|.
name|AlwaysAllowed
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
if|if
condition|(
operator|!
name|c
operator|.
name|isEnabledForStudentScheduling
argument_list|()
condition|)
name|allowedClasses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|allowedClasses
operator|==
literal|null
operator|||
operator|!
name|allowedClasses
operator|.
name|contains
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" ("
operator|+
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getExternalId
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setExternalId
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSectionNumberString
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
name|ass
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|ass
operator|==
literal|null
condition|?
literal|null
else|:
name|ass
operator|.
name|getPlacement
argument_list|()
operator|)
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|p
operator|!=
literal|null
condition|)
block|{
comment|// int roomLimit = Math.round((clazz.getRoomRatio() == null ? 1.0f : clazz.getRoomRatio()) * p.getRoomSize());
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|p
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setCancelled
argument_list|(
name|clazz
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|clazz
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ass
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|loc
range|:
name|ass
operator|.
name|getRooms
argument_list|()
control|)
name|a
operator|.
name|addRoom
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 				if (p != null&& p.getRoomLocations() != null) { 					for (RoomLocation rm: p.getRoomLocations()) { 						a.addRoom(rm.getId(), rm.getName()); 					} 				} 				if (p != null&& p.getRoomLocation() != null) { 					a.addRoom(p.getRoomLocation().getId(), p.getRoomLocation().getName()); 				} 				*/
if|if
condition|(
operator|!
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|instr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmail
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|courseOffering
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|courseOffering
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ListClasses
operator|.
name|class
argument_list|)
operator|.
name|forCourseAndStudent
argument_list|(
name|course
argument_list|,
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
name|listAcademicSessions
parameter_list|(
name|boolean
name|sectioning
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|ArrayList
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|ExternalTermProvider
name|extTerm
init|=
name|getExternalTermProvider
argument_list|()
decl_stmt|;
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|sectioning
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolvers
argument_list|()
control|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|solverServerService
operator|.
name|getOnlineStudentSchedulingContainer
argument_list|()
operator|.
name|getSolver
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
operator|||
operator|!
name|server
operator|.
name|isReady
argument_list|()
condition|)
continue|continue;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
name|AcademicSessionInfo
name|info
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|Long
name|studentId
init|=
name|principal
operator|.
name|getStudentId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
continue|continue;
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
operator|&&
operator|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|||
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|admin
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
operator|||
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
operator|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
condition|)
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|MSG
operator|.
name|sessionName
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|.
name|setExternalCampus
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalCampus
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setExternalTerm
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalTerm
argument_list|(
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Session
name|session
range|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
condition|)
block|{
name|AcademicSessionInfo
name|info
init|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|Long
name|studentId
init|=
name|principal
operator|.
name|getStudentId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
continue|continue;
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
continue|continue;
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|null
operator|&&
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
operator|&&
operator|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|||
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
operator|||
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
operator|)
condition|)
continue|continue;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|CourseRequests
argument_list|)
condition|)
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|MSG
operator|.
name|sessionName
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|.
name|setExternalCampus
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalCampus
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setExternalTerm
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalTerm
argument_list|(
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSuitableAcademicSessions
argument_list|()
argument_list|)
throw|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sectioning
condition|)
name|Collections
operator|.
name|reverse
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|retrieveCourseDetails
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|course
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|lookupCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
literal|null
argument_list|,
name|course
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|getCourseDetailsProvider
argument_list|()
operator|.
name|getDetails
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|XCourseId
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|server
operator|.
name|getCourseDetails
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|getCourseDetailsProvider
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Long
name|retrieveCourseOfferingId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|course
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|lookupCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|sessionId
argument_list|,
literal|null
argument_list|,
name|course
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
else|else
block|{
name|XCourseId
name|c
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|course
argument_list|)
argument_list|)
throw|;
return|return
name|c
operator|.
name|getCourseId
argument_list|()
return|;
block|}
block|}
specifier|public
name|ClassAssignmentInterface
name|section
parameter_list|(
name|boolean
name|online
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindAssignmentAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindAssignmentAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
if|if
condition|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasCreditHours
argument_list|()
condition|)
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|Float
name|credit
init|=
name|last
operator|.
name|getCreditHour
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|setCreditHour
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CheckCoursesResponse
name|checkCourses
parameter_list|(
name|boolean
name|online
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CheckCourses
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|sectioning
operator|&&
name|CustomCourseRequestsValidationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|OnlineSectioningServer
name|dummy
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|dummy
operator|.
name|execute
argument_list|(
name|dummy
operator|.
name|createAction
argument_list|(
name|CheckCourses
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withMatcher
argument_list|(
name|getCourseMatcher
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|server
argument_list|)
argument_list|)
operator|.
name|withCustomValidation
argument_list|(
literal|true
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|CheckCoursesResponse
name|response
init|=
operator|new
name|CheckCoursesResponse
argument_list|()
decl_stmt|;
name|CourseMatcher
name|matcher
init|=
name|getCourseMatcher
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|server
argument_list|)
decl_stmt|;
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|cr
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
operator|&&
name|lookupCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|studentId
argument_list|,
name|rc
argument_list|,
name|matcher
argument_list|)
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT_FOUND"
argument_list|,
name|MSG
operator|.
name|validationCourseNotExists
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|MSG
operator|.
name|validationCourseNotExists
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|cr
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
operator|&&
name|lookupCourse
argument_list|(
name|hibSession
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|studentId
argument_list|,
name|rc
argument_list|,
name|matcher
argument_list|)
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|addError
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"NOT_FOUND"
argument_list|,
name|MSG
operator|.
name|validationCourseNotExists
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setErrorMessage
argument_list|(
name|MSG
operator|.
name|validationCourseNotExists
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|response
return|;
block|}
else|else
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CheckCourses
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withMatcher
argument_list|(
name|getCourseMatcher
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|server
argument_list|)
argument_list|)
operator|.
name|withCustomValidation
argument_list|(
operator|!
name|sectioning
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CourseOffering
name|lookupCourse
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|,
name|String
name|courseName
parameter_list|,
name|CourseMatcher
name|courseMatcher
parameter_list|)
block|{
if|if
condition|(
name|studentId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cr.courseOffering from CourseRequest cr where "
operator|+
literal|"cr.courseDemand.student.uniqueId = :studentId and "
operator|+
literal|"(lower(cr.courseOffering.subjectArea.subjectAreaAbbreviation || ' ' || cr.courseOffering.courseNbr) = :course or "
operator|+
literal|"lower(cr.courseOffering.subjectArea.subjectAreaAbbreviation || ' ' || cr.courseOffering.courseNbr || ' - ' || cr.courseOffering.title) = :course)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
return|return
name|co
return|;
block|}
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true and "
operator|+
literal|"(lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) = :course or lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr || ' - ' || c.title) = :course)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|courseMatcher
operator|!=
literal|null
operator|&&
operator|!
name|courseMatcher
operator|.
name|match
argument_list|(
operator|new
name|XCourse
argument_list|(
name|co
argument_list|)
argument_list|)
condition|)
continue|continue;
return|return
name|co
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|CourseOffering
name|lookupCourse
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|,
name|RequestedCourse
name|rc
parameter_list|,
name|CourseMatcher
name|courseMatcher
parameter_list|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
block|{
name|CourseOffering
name|co
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseMatcher
operator|!=
literal|null
operator|&&
operator|!
name|courseMatcher
operator|.
name|match
argument_list|(
operator|new
name|XCourse
argument_list|(
name|co
argument_list|)
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
name|co
return|;
block|}
if|if
condition|(
name|rc
operator|.
name|hasCourseName
argument_list|()
condition|)
return|return
name|lookupCourse
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|courseMatcher
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|computeSuggestions
parameter_list|(
name|boolean
name|online
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|,
name|int
name|selectedAssignmentIndex
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|selectedAssignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedAssignmentIndex
operator|>=
literal|0
condition|)
block|{
name|selectedAssignment
operator|=
operator|(
operator|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
operator|)
name|currentAssignment
operator|)
operator|.
name|get
argument_list|(
name|selectedAssignmentIndex
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|getLastCourse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourseId
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|request
operator|.
name|getLastCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|request
operator|.
name|getLastCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|request
operator|.
name|getLastCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
name|selectedAssignment
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
expr_stmt|;
name|selectedAssignment
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ComputeSuggestionsAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
operator|.
name|withSelection
argument_list|(
name|selectedAssignment
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|boolean
name|canEnroll
init|=
operator|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|)
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
name|ca
range|:
name|ret
control|)
name|ca
operator|.
name|setCanEnroll
argument_list|(
name|canEnroll
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|selectedAssignmentIndex
operator|>=
literal|0
condition|)
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|selectedAssignment
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|selectedAssignmentIndex
operator|>=
literal|0
condition|)
block|{
name|selectedAssignment
operator|=
operator|(
operator|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
operator|)
name|currentAssignment
operator|)
operator|.
name|get
argument_list|(
name|selectedAssignmentIndex
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|getLastCourse
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|XCourseId
name|course
init|=
name|server
operator|.
name|getCourse
argument_list|(
name|request
operator|.
name|getLastCourse
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|request
operator|.
name|getLastCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionCourseDoesNotExist
argument_list|(
name|request
operator|.
name|getLastCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
throw|;
name|selectedAssignment
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
expr_stmt|;
name|selectedAssignment
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ComputeSuggestionsAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
operator|.
name|withSelection
argument_list|(
name|selectedAssignment
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|boolean
name|canEnroll
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
decl_stmt|;
if|if
condition|(
name|canEnroll
condition|)
block|{
if|if
condition|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|canEnroll
operator|=
literal|false
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignmentInterface
name|ca
range|:
name|ret
control|)
name|ca
operator|.
name|setCanEnroll
argument_list|(
name|canEnroll
argument_list|)
expr_stmt|;
block|}
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasCreditHours
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentInterface
name|suggestion
range|:
name|ret
control|)
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|suggestion
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|Float
name|credit
init|=
name|last
operator|.
name|getCreditHour
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|setCreditHour
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|logIn
parameter_list|(
name|String
name|userName
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|pin
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingPIN
argument_list|,
name|pin
argument_list|)
expr_stmt|;
else|else
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingPIN
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"LOOKUP"
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnySession
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|student
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Student m where m.externalUniqueId = :uid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"uid"
argument_list|,
name|password
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|UniTimePrincipal
name|principal
init|=
operator|new
name|UniTimePrincipal
argument_list|(
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|,
name|password
argument_list|,
name|user
operator|.
name|getTrueName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|student
control|)
block|{
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
block|{
name|principal
operator|.
name|addStudentId
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setName
argument_list|(
name|NameFormat
operator|.
name|defaultFormat
argument_list|()
operator|.
name|format
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastRequest
argument_list|)
expr_stmt|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|"BATCH"
operator|.
name|equals
argument_list|(
name|userName
argument_list|)
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSectioningSolverDashboard
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|XStudent
name|student
init|=
name|server
operator|.
name|getStudent
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|password
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionLoginFailed
argument_list|()
argument_list|)
throw|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|UniTimePrincipal
name|principal
init|=
operator|new
name|UniTimePrincipal
argument_list|(
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|,
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|user
operator|.
name|getTrueName
argument_list|()
argument_list|)
decl_stmt|;
name|principal
operator|.
name|addStudentId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|student
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
name|principal
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|,
name|principal
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastRequest
argument_list|)
expr_stmt|;
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
try|try
block|{
name|Authentication
name|authRequest
init|=
operator|new
name|UsernamePasswordAuthenticationToken
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|Authentication
name|authResult
init|=
name|getAuthenticationManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|authRequest
argument_list|)
decl_stmt|;
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|setAuthentication
argument_list|(
name|authResult
argument_list|)
expr_stmt|;
name|UserContext
name|user
init|=
operator|(
name|UserContext
operator|)
name|authResult
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
for|for
control|(
name|UserAuthority
name|auth
range|:
name|user
operator|.
name|getAuthorities
argument_list|(
name|Roles
operator|.
name|ROLE_STUDENT
argument_list|)
control|)
block|{
if|if
condition|(
name|getLastSessionId
argument_list|()
operator|==
literal|null
operator|||
name|auth
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getQualifierId
argument_list|()
operator|.
name|equals
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
condition|)
block|{
name|user
operator|.
name|setCurrentAuthority
argument_list|(
name|auth
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|LoginManager
operator|.
name|loginSuceeded
argument_list|(
name|authResult
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|user
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|user
operator|.
name|getUsername
argument_list|()
else|:
name|user
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LoginManager
operator|.
name|addFailedLoginAttempt
argument_list|(
name|userName
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|logOut
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingPIN
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSession
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastRequest
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSpecialRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
return|return
literal|false
return|;
name|SecurityContextHolder
operator|.
name|getContext
argument_list|()
operator|.
name|setAuthentication
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|String
name|whoAmI
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
return|return
name|principal
operator|.
name|getName
argument_list|()
return|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|instanceof
name|AnonymousUserContext
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|user
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|user
operator|.
name|getUsername
argument_list|()
else|:
name|user
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
condition|)
return|return
name|principal
operator|.
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
return|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|UserAuthority
name|a
range|:
name|user
operator|.
name|getAuthorities
argument_list|(
name|Roles
operator|.
name|ROLE_STUDENT
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|sessionId
argument_list|)
argument_list|)
control|)
return|return
name|a
operator|.
name|getUniqueId
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|Long
name|getLastSessionId
parameter_list|()
block|{
name|Long
name|lastSessionId
init|=
operator|(
name|Long
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSessionId
operator|==
literal|null
condition|)
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|lastSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
block|}
return|return
name|lastSessionId
return|;
block|}
specifier|public
name|void
name|setLastSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSession
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseRequestInterface
name|getLastRequest
parameter_list|()
block|{
return|return
operator|(
name|CourseRequestInterface
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastRequest
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLastRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastRequest
argument_list|)
expr_stmt|;
if|else if
condition|(
name|request
operator|.
name|isUpdateLastRequest
argument_list|()
condition|)
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastRequest
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
name|lastAcademicSession
parameter_list|(
name|boolean
name|sectioning
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MSG
operator|.
name|exceptionUserNotLoggedIn
argument_list|()
argument_list|)
throw|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSession
argument_list|)
decl_stmt|;
comment|// Long sessionId = getLastSessionId();
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
name|ExternalTermProvider
name|extTerm
init|=
name|getExternalTermProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|sectioning
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|AcademicSessionInfo
name|s
init|=
name|server
operator|.
name|getAcademicSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
return|return
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getYear
argument_list|()
argument_list|,
name|s
operator|.
name|getTerm
argument_list|()
argument_list|,
name|s
operator|.
name|getCampus
argument_list|()
argument_list|,
name|MSG
operator|.
name|sessionName
argument_list|(
name|s
operator|.
name|getYear
argument_list|()
argument_list|,
name|s
operator|.
name|getTerm
argument_list|()
argument_list|,
name|s
operator|.
name|getCampus
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|getSessionBeginDate
argument_list|()
argument_list|)
operator|.
name|setExternalCampus
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalCampus
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|setExternalTerm
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalTerm
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSuitableAcademicSessions
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
operator|||
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOnlineSectionStudents
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|AcademicSessionInfo
name|info
init|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
decl_stmt|;
return|return
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|MSG
operator|.
name|sessionName
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|.
name|setExternalCampus
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalCampus
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setExternalTerm
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalTerm
argument_list|(
name|info
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
name|CourseRequestInterface
name|lastRequest
parameter_list|(
name|boolean
name|online
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|CourseRequestInterface
name|request
init|=
name|getLastRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
name|request
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|request
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|getStudentId
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|request
operator|.
name|getStudentId
argument_list|()
operator|.
name|equals
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
condition|)
name|request
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|request
operator|=
name|savedRequest
argument_list|(
name|online
argument_list|,
name|sectioning
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
operator|&&
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoRequests
argument_list|()
argument_list|)
throw|;
return|return
name|request
return|;
block|}
specifier|public
name|ClassAssignmentInterface
name|lastResult
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
try|try
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
if|if
condition|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
operator|==
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasGradeModes
argument_list|()
condition|)
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|GradeMode
name|m
init|=
name|last
operator|.
name|getGradeMode
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|a
operator|.
name|setGradeMode
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasCreditHours
argument_list|()
condition|)
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|Float
name|credit
init|=
name|last
operator|.
name|getCreditHour
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|setCreditHour
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|getCourseAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|ret
return|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSchedule
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|CourseRequestInterface
name|saveRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Long
name|studentId
init|=
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
name|studentId
operator|=
name|request
operator|.
name|getStudentId
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SaveStudentRequests
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withCustomValidation
argument_list|(
literal|true
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningHelper
name|helper
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
name|CriticalCourses
name|critical
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|CustomCriticalCoursesHolder
operator|.
name|hasProvider
argument_list|()
condition|)
name|critical
operator|=
name|CustomCriticalCoursesHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCriticalCourses
argument_list|(
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
name|helper
argument_list|,
operator|new
name|XStudentId
argument_list|(
name|student
argument_list|,
name|helper
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|helper
operator|.
name|warn
argument_list|(
literal|"Failed to lookup critical courses: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|SaveStudentRequests
operator|.
name|saveRequest
argument_list|(
literal|null
argument_list|,
name|helper
argument_list|,
name|student
argument_list|,
name|request
argument_list|,
literal|true
argument_list|,
name|critical
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|request
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ClassAssignmentInterface
name|enroll
parameter_list|(
name|boolean
name|online
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Long
name|sessionId
init|=
name|canEnroll
argument_list|(
name|online
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getAcademicSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|BatchEnrollStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|EnrollStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getGradeMode
argument_list|()
operator|!=
literal|null
condition|)
name|last
operator|.
name|addGradeMode
argument_list|(
name|a
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|a
operator|.
name|getGradeMode
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|a
operator|.
name|getGradeMode
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|a
operator|.
name|getGradeMode
argument_list|()
operator|.
name|isHonor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getCreditHour
argument_list|()
operator|!=
literal|null
condition|)
name|last
operator|.
name|addCreditHour
argument_list|(
name|a
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|a
operator|.
name|getCreditHour
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|canApprove
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|//?? !server.getAcademicSession().isSectioningEnabled()
name|List
argument_list|<
name|Long
argument_list|>
name|coursesToApprove
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseOffering
name|course
range|:
name|offering
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|course
argument_list|,
name|Right
operator|.
name|ConsentApproval
argument_list|)
condition|)
name|coursesToApprove
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|coursesToApprove
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|listEnrollments
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
operator|&&
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
name|Long
name|offeringId
init|=
name|offering
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|offering
argument_list|,
name|Right
operator|.
name|OfferingEnrollments
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
operator|||
operator|!
name|offering
operator|.
name|isAllowStudentScheduling
argument_list|()
operator|||
name|offering
operator|.
name|isNotOffered
argument_list|()
operator|||
name|offering
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|NameFormat
name|instructorNameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|approvedBy2name
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|student2enrollment
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|canShowExtIds
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
decl_stmt|;
name|boolean
name|canRegister
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
decl_stmt|;
name|boolean
name|canUseAssistant
init|=
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
decl_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
operator|(
name|List
argument_list|<
name|StudentClassEnrollment
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
name|clazz
operator|==
literal|null
condition|?
literal|"from StudentClassEnrollment e where e.courseOffering.instructionalOffering.uniqueId = :offeringId"
else|:
literal|"select e from StudentClassEnrollment e where e.courseOffering.instructionalOffering.uniqueId = :offeringId and e.student.uniqueId in "
operator|+
literal|"(select f.student.uniqueId from StudentClassEnrollment f where f.clazz.uniqueId = "
operator|+
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|student2enrollment
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
block|{
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|canShowExtIds
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|canRegister
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|canUseAssistant
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|instructorNameFormat
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
expr_stmt|;
name|e
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|e
operator|.
name|setEnrolledDate
argument_list|(
name|enrollment
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|CourseAssignment
name|c
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubject
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCourseNbr
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTitle
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHasCrossList
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourse
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|student2enrollment
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|e
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseRequest
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|first
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
argument_list|)
condition|)
name|e
operator|.
name|setAlternative
argument_list|(
name|first
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|CourseDemand
name|first
init|=
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
decl_stmt|;
name|demands
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cd
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|<
literal|0
operator|&&
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue
name|demands
continue|;
name|first
operator|=
name|cd
expr_stmt|;
block|}
block|}
name|CourseRequest
name|alt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|first
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alt
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|alt
operator|=
name|r
expr_stmt|;
block|}
name|e
operator|.
name|setAlternative
argument_list|(
name|alt
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setRequestedDate
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setApprovedDate
argument_list|(
name|enrollment
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|approvedBy2name
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|TimetableManager
name|mgr
init|=
operator|(
name|TimetableManager
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from TimetableManager where externalUniqueId = :externalId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|mgr
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|mgr
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DepartmentalInstructor
name|instr
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor where externalUniqueId = :externalId and department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|instr
operator|!=
literal|null
condition|)
name|name
operator|=
name|instr
operator|.
name|nameLastNameFirst
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
name|approvedBy2name
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setApprovedBy
argument_list|(
name|name
operator|==
literal|null
condition|?
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
else|:
name|name
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setWaitList
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|setPriority
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|c
init|=
name|e
operator|.
name|getCourse
argument_list|()
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setClassId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|c
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setExternalId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getExternalId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setClassNumber
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubpart
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|classOrOfferingId
operator|>=
literal|0
condition|)
for|for
control|(
name|CourseRequest
name|request
range|:
operator|(
name|List
argument_list|<
name|CourseRequest
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseRequest r where r.courseOffering.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|classOrOfferingId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|student2enrollment
operator|.
name|get
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
continue|continue;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|canShowExtIds
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|canRegister
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|canUseAssistant
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|instructorNameFormat
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|e
operator|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|()
expr_stmt|;
name|e
operator|.
name|setStudent
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|CourseAssignment
name|c
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|c
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setSubject
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setCourseNbr
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setTitle
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setHasCrossList
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|setCourse
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|e
operator|.
name|setWaitList
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isWaitlist
argument_list|()
argument_list|)
expr_stmt|;
name|student2enrollment
operator|.
name|put
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|e
operator|.
name|setPriority
argument_list|(
literal|1
operator|+
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|CourseRequest
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|first
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
operator|.
name|equals
argument_list|(
name|request
argument_list|)
condition|)
name|e
operator|.
name|setAlternative
argument_list|(
name|first
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|isAlternative
argument_list|()
condition|)
block|{
name|CourseDemand
name|first
init|=
name|request
operator|.
name|getCourseDemand
argument_list|()
decl_stmt|;
name|demands
label|:
for|for
control|(
name|CourseDemand
name|cd
range|:
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getCourseDemands
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cd
operator|.
name|isAlternative
argument_list|()
operator|&&
name|cd
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|first
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|<
literal|0
operator|&&
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequest
name|cr
range|:
name|cd
operator|.
name|getCourseRequests
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue
name|demands
continue|;
name|first
operator|=
name|cd
expr_stmt|;
block|}
block|}
name|CourseRequest
name|alt
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|first
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|alt
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|alt
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|alt
operator|=
name|r
expr_stmt|;
block|}
name|e
operator|.
name|setAlternative
argument_list|(
name|alt
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setRequestedDate
argument_list|(
name|request
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|(
name|student2enrollment
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ListEnrollments
operator|.
name|class
argument_list|)
operator|.
name|forOffering
argument_list|(
name|offeringId
argument_list|)
operator|.
name|withSection
argument_list|(
name|clazz
operator|==
literal|null
condition|?
literal|null
else|:
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|canShowExternalIds
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|)
operator|.
name|canRegister
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|)
operator|.
name|canUseAssistant
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ClassAssignmentInterface
name|getEnrollment
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|online
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|studentId
argument_list|,
literal|"Student"
argument_list|,
name|Right
operator|.
name|StudentEnrollments
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|Comparator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|cmp
init|=
operator|new
name|Comparator
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|()
block|{
specifier|public
name|boolean
name|isParent
parameter_list|(
name|SchedulingSubpart
name|s1
parameter_list|,
name|SchedulingSubpart
name|s2
parameter_list|)
block|{
name|SchedulingSubpart
name|p1
init|=
name|s1
operator|.
name|getParentSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|StudentClassEnrollment
name|a
parameter_list|,
name|StudentClassEnrollment
name|b
parameter_list|)
block|{
name|SchedulingSubpart
name|s1
init|=
name|a
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
name|SchedulingSubpart
name|s2
init|=
name|b
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|isParent
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|s2
argument_list|,
name|s1
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|s1
operator|.
name|getItype
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getItype
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|s1
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|NameFormat
name|nameFormat
init|=
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseAssignment
argument_list|>
name|courses
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|CourseCreditUnitConfig
name|credit
init|=
literal|null
decl_stmt|;
name|HasGradableSubpart
name|gs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingGradableIType
operator|.
name|isTrue
argument_list|()
operator|&&
name|Class_
operator|.
name|getExternalClassNameHelper
argument_list|()
operator|!=
literal|null
operator|&&
name|Class_
operator|.
name|getExternalClassNameHelper
argument_list|()
operator|instanceof
name|HasGradableSubpart
condition|)
name|gs
operator|=
operator|(
name|HasGradableSubpart
operator|)
name|Class_
operator|.
name|getExternalClassNameHelper
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|enrollments
init|=
operator|new
name|TreeSet
argument_list|<
name|StudentClassEnrollment
argument_list|>
argument_list|(
name|cmp
argument_list|)
decl_stmt|;
name|enrollments
operator|.
name|addAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from StudentClassEnrollment e where e.student.uniqueId = :studentId order by e.courseOffering.subjectAreaAbbv, e.courseOffering.courseNbr"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentClassEnrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
name|CourseAssignment
name|course
init|=
name|courses
operator|.
name|get
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
block|{
name|course
operator|=
operator|new
name|CourseAssignment
argument_list|()
expr_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setWaitListed
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getWaitlist
argument_list|()
operator|!=
literal|null
operator|&&
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getWaitlist
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasCrossList
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|credit
operator|=
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|!=
literal|null
condition|)
name|course
operator|.
name|setRequestedDate
argument_list|(
name|enrollment
operator|.
name|getCourseRequest
argument_list|()
operator|.
name|getCourseDemand
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ClassAssignment
name|clazz
init|=
name|course
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setClassId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseNbr
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setTitle
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubject
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getSection
argument_list|()
operator|==
literal|null
condition|)
name|clazz
operator|.
name|setSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setExternalId
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getExternalId
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setClassNumber
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubpart
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|setParentSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|clazz
operator|.
name|setParentSection
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getParentClass
argument_list|()
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
operator|!=
literal|null
condition|)
name|clazz
operator|.
name|addNote
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Placement
name|placement
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getPlacement
argument_list|()
decl_stmt|;
name|int
name|minLimit
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|placement
operator|!=
literal|null
condition|)
block|{
comment|// int roomLimit = Math.round((enrollment.getClazz().getRoomRatio() == null ? 1.0f : enrollment.getClazz().getRoomRatio()) * placement.getRoomSize());
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|placement
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|clazz
operator|.
name|setCancelled
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|isCancelled
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getEnrollment
argument_list|()
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setEnrolledDate
argument_list|(
name|enrollment
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|placement
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|clazz
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setStart
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLength
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setBreakTime
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setDatePattern
argument_list|(
name|placement
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Location
name|loc
range|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCommittedAssignment
argument_list|()
operator|.
name|getRooms
argument_list|()
control|)
name|clazz
operator|.
name|addRoom
argument_list|(
name|loc
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loc
operator|.
name|getLabelWithDisplayName
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 								if (placement.getNrRooms() == 1) { 									clazz.addRoom(placement.getRoomLocation().getId(), placement.getRoomLocation().getName()); 								} else if (placement.getNrRooms()> 1) { 									for (RoomLocation rm: placement.getRoomLocations()) 										clazz.addRoom(rm.getId(), rm.getName()); 								} 								*/
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
name|clazz
operator|.
name|addInstructor
argument_list|(
name|nameFormat
operator|.
name|format
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|addInstructoEmail
argument_list|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
operator|&&
name|gs
operator|!=
literal|null
operator|&&
name|gs
operator|.
name|isGradableSubpart
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
argument_list|,
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|hibSession
argument_list|)
condition|)
block|{
name|clazz
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|credit
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|credit
operator|!=
literal|null
operator|&&
name|gs
operator|==
literal|null
condition|)
block|{
name|clazz
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|credit
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|credit
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|clazz
operator|.
name|setCredit
argument_list|(
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditAbbv
argument_list|()
operator|+
literal|"|"
operator|+
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getCredit
argument_list|()
operator|.
name|creditText
argument_list|()
argument_list|)
expr_stmt|;
name|credit
operator|=
literal|null
expr_stmt|;
block|}
name|Float
name|creditOverride
init|=
name|enrollment
operator|.
name|getClazz
argument_list|()
operator|.
name|getCredit
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|creditOverride
operator|!=
literal|null
condition|)
name|clazz
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|creditOverride
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|clazz
operator|.
name|setParentSection
argument_list|(
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|enrollment
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|demands
label|:
for|for
control|(
name|CourseDemand
name|demand
range|:
operator|(
name|List
argument_list|<
name|CourseDemand
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from CourseDemand d where d.student.uniqueId = :studentId order by d.priority"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ClassAssignment
name|clazz
init|=
name|course
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setLength
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|clazz
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setStart
argument_list|(
name|demand
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ca
label|:
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignment
name|c
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isAssigned
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|int
name|d
range|:
name|c
operator|.
name|getDays
argument_list|()
control|)
if|if
condition|(
name|clazz
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
name|d
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|getStart
argument_list|()
operator|+
name|c
operator|.
name|getLength
argument_list|()
operator|>
name|clazz
operator|.
name|getStart
argument_list|()
operator|&&
name|clazz
operator|.
name|getStart
argument_list|()
operator|+
name|clazz
operator|.
name|getLength
argument_list|()
operator|>
name|c
operator|.
name|getStart
argument_list|()
condition|)
block|{
name|course
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break
name|ca
break|;
block|}
block|}
block|}
block|}
name|course
operator|.
name|setRequestedDate
argument_list|(
name|demand
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|request
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequest
name|r
range|:
name|demand
operator|.
name|getCourseRequests
argument_list|()
control|)
block|{
if|if
condition|(
name|courses
operator|.
name|containsKey
argument_list|(
name|r
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue
name|demands
continue|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|r
operator|.
name|getOrder
argument_list|()
operator|.
name|compareTo
argument_list|(
name|request
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
name|request
operator|=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|courses
operator|.
name|put
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setRequestedDate
argument_list|(
name|demand
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|course
operator|.
name|setWaitListed
argument_list|(
name|demand
operator|.
name|getWaitlist
argument_list|()
operator|!=
literal|null
operator|&&
name|demand
operator|.
name|getWaitlist
argument_list|()
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasCrossList
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|hasCrossList
argument_list|()
argument_list|)
expr_stmt|;
name|ClassAssignment
name|clazz
init|=
name|course
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setCourseId
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setCourseNbr
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setTitle
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubject
argument_list|(
name|request
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|setRequest
argument_list|(
name|getRequest
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setCanSetCriticalOverrides
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeCriticalOverride
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAdvisorRequest
argument_list|(
name|AdvisorGetCourseRequests
operator|.
name|getRequest
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
else|else
block|{
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
operator|.
name|withRequest
argument_list|(
literal|true
argument_list|)
operator|.
name|withCustomCheck
argument_list|(
literal|true
argument_list|)
operator|.
name|withAdvisorRequest
argument_list|(
literal|true
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setCanSetCriticalOverrides
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeCriticalOverride
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
operator|.
name|withRequest
argument_list|(
literal|true
argument_list|)
operator|.
name|withAdvisorRequest
argument_list|(
literal|true
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|approveEnrollments
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|courseIdsCanApprove
init|=
name|canApprove
argument_list|(
name|classOrOfferingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseIdsCanApprove
operator|==
literal|null
operator|||
name|courseIdsCanApprove
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionInsufficientPrivileges
argument_list|()
argument_list|)
throw|;
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|approval
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getTrueName
argument_list|()
decl_stmt|;
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ApproveEnrollmentsAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentIds
argument_list|,
name|courseIdsCanApprove
argument_list|,
name|approval
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|approval
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|rejectEnrollments
parameter_list|(
name|Long
name|classOrOfferingId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|courseIdsCanApprove
init|=
name|canApprove
argument_list|(
name|classOrOfferingId
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseIdsCanApprove
operator|==
literal|null
operator|||
name|courseIdsCanApprove
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionInsufficientPrivileges
argument_list|()
argument_list|)
throw|;
name|InstructionalOffering
name|offering
init|=
operator|(
name|classOrOfferingId
operator|>=
literal|0
condition|?
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
block|{
name|Class_
name|clazz
init|=
operator|(
name|classOrOfferingId
operator|<
literal|0
condition|?
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|-
name|classOrOfferingId
argument_list|,
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadClassOrOffering
argument_list|()
argument_list|)
throw|;
name|offering
operator|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
expr_stmt|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|offering
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|approval
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
operator|+
literal|":"
operator|+
name|user
operator|.
name|getTrueName
argument_list|()
decl_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|RejectEnrollmentsAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|studentIds
argument_list|,
name|courseIdsCanApprove
argument_list|,
name|approval
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Long
name|getStatusPageSessionId
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|getLastSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
return|return
name|sessionId
return|;
block|}
else|else
block|{
return|return
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
return|;
block|}
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|getCoordinatingCourses
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
condition|)
return|return
literal|null
return|;
comment|// only applies to users without a role
name|HashSet
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.uniqueId from CourseOffering c inner join c.instructionalOffering.offeringCoordinators oc where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true and oc.instructor.externalUniqueId = :extId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"extId"
argument_list|,
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|courseIds
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getSubjectAreas
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
operator|||
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
condition|)
return|return
literal|null
return|;
comment|// only applies to users with a role that is department dependent
comment|// scheduling advisors and admins can see all courses of a student regardless of whether they have the Department Independent permission or not
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|||
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
return|return
literal|null
return|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|subjects
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subject
range|:
name|SubjectArea
operator|.
name|getUserSubjectAreas
argument_list|(
name|user
argument_list|)
control|)
block|{
name|subjects
operator|.
name|add
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|subjects
return|;
block|}
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|getApprovableCourses
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.uniqueId from CourseOffering c inner join c.instructionalOffering.offeringCoordinators oc where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true and c.consentType.reference = :reference and "
operator|+
literal|"oc.instructor.externalUniqueId = :extId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"reference"
argument_list|,
literal|"IN"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"extId"
argument_list|,
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|HasRole
argument_list|)
condition|)
return|return
name|courseIds
return|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|SessionIndependent
argument_list|)
condition|)
return|return
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select c.uniqueId from CourseOffering c where c.subjectArea.session.uniqueId = :sessionId and c.subjectArea.department.allowStudentScheduling = true and c.consentType is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|user
argument_list|)
control|)
block|{
name|courseIds
operator|.
name|addAll
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.uniqueId from CourseOffering c where "
operator|+
literal|"c.subjectArea.department.uniqueId = :departmentId and c.subjectArea.department.allowStudentScheduling = true and c.consentType is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|courseIds
return|;
block|}
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|getMyStudents
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
throw|;
return|return
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Advisor a inner join a.students s where "
operator|+
literal|"a.externalUniqueId = :user and a.role.reference = :role and a.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"user"
argument_list|,
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"role"
argument_list|,
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|findEnrollmentInfos
parameter_list|(
name|boolean
name|online
parameter_list|,
name|String
name|query
parameter_list|,
name|SectioningStatusFilterRpcRequest
name|filter
parameter_list|,
name|Long
name|courseId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|sessionContext
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|filter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
name|filter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|online
condition|)
block|{
specifier|final
name|Long
name|sessionId
init|=
name|getStatusPageSessionId
argument_list|()
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|DbFindEnrollmentInfoAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|courseId
argument_list|,
name|getCoordinatingCourses
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|query
operator|.
name|matches
argument_list|(
literal|"(?i:.*consent:[ ]?(todo|\\\"to do\\\").*)"
argument_list|)
condition|?
name|getApprovableCourses
argument_list|(
name|sessionId
argument_list|)
else|:
literal|null
argument_list|,
name|getMyStudents
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|getSubjectAreas
argument_list|()
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindEnrollmentInfoAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|courseId
argument_list|,
name|getCoordinatingCourses
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|query
operator|.
name|matches
argument_list|(
literal|"(?i:.*consent:[ ]?(todo|\\\"to do\\\").*)"
argument_list|)
condition|?
name|getApprovableCourses
argument_list|(
name|sessionId
argument_list|)
else|:
literal|null
argument_list|,
name|getMyStudents
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|getSubjectAreas
argument_list|()
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindEnrollmentInfoAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|courseId
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|getMyStudents
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|getSubjectAreas
argument_list|()
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
name|findStudentInfos
parameter_list|(
name|boolean
name|online
parameter_list|,
name|String
name|query
parameter_list|,
name|SectioningStatusFilterRpcRequest
name|filter
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|sessionContext
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|filter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
name|filter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|online
condition|)
block|{
name|Long
name|sessionId
init|=
name|getStatusPageSessionId
argument_list|()
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|DbFindStudentInfoAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|getCoordinatingCourses
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|query
operator|.
name|matches
argument_list|(
literal|"(?i:.*consent:[ ]?(todo|\\\"to do\\\").*)"
argument_list|)
condition|?
name|getApprovableCourses
argument_list|(
name|sessionId
argument_list|)
else|:
literal|null
argument_list|,
name|getMyStudents
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|getSubjectAreas
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindStudentInfoAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|getCoordinatingCourses
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|query
operator|.
name|matches
argument_list|(
literal|"(?i:.*consent:[ ]?(todo|\\\"to do\\\").*)"
argument_list|)
condition|?
name|getApprovableCourses
argument_list|(
name|sessionId
argument_list|)
else|:
literal|null
argument_list|,
name|getMyStudents
argument_list|(
name|sessionId
argument_list|)
argument_list|,
name|getSubjectAreas
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindStudentInfoAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|getMyStudents
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|getSubjectAreas
argument_list|()
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|querySuggestions
parameter_list|(
name|boolean
name|online
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|online
condition|)
block|{
name|Long
name|sessionId
init|=
name|getStatusPageSessionId
argument_list|()
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|StatusPageSuggestionsAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|,
name|limit
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|StatusPageSuggestionsAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|user
operator|.
name|getName
argument_list|()
argument_list|,
name|query
argument_list|,
name|limit
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|findEnrollments
parameter_list|(
name|boolean
name|online
parameter_list|,
name|String
name|query
parameter_list|,
name|SectioningStatusFilterRpcRequest
name|filter
parameter_list|,
name|Long
name|courseId
parameter_list|,
name|Long
name|classId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|sessionContext
operator|.
name|isAuthenticated
argument_list|()
condition|)
block|{
name|filter
operator|.
name|setOption
argument_list|(
literal|"user"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
name|filter
operator|.
name|setOption
argument_list|(
literal|"role"
argument_list|,
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|online
condition|)
block|{
name|Long
name|sessionId
init|=
name|getStatusPageSessionId
argument_list|()
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|isAuthenticated
argument_list|()
condition|)
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"SectioningStatus.LastStatusQuery"
argument_list|,
name|query
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|DbFindEnrollmentAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|courseId
argument_list|,
name|classId
argument_list|,
name|query
operator|.
name|matches
argument_list|(
literal|"(?i:.*consent:[ ]?(todo|\\\"to do\\\").*)"
argument_list|)
condition|?
name|getApprovableCourses
argument_list|(
name|sessionId
argument_list|)
operator|.
name|contains
argument_list|(
name|courseId
argument_list|)
else|:
literal|false
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|,
name|getMyStudents
argument_list|(
name|sessionId
argument_list|)
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindEnrollmentAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|courseId
argument_list|,
name|classId
argument_list|,
name|query
operator|.
name|matches
argument_list|(
literal|"(?i:.*consent:[ ]?(todo|\\\"to do\\\").*)"
argument_list|)
condition|?
name|getApprovableCourses
argument_list|(
name|sessionId
argument_list|)
operator|.
name|contains
argument_list|(
name|courseId
argument_list|)
else|:
literal|false
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
argument_list|,
name|getMyStudents
argument_list|(
name|sessionId
argument_list|)
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|isAuthenticated
argument_list|()
condition|)
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"SectioningStatus.LastStatusQuery"
argument_list|,
name|query
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindEnrollmentAction
operator|.
name|class
argument_list|)
operator|.
name|withParams
argument_list|(
name|query
argument_list|,
name|courseId
argument_list|,
name|classId
argument_list|,
literal|false
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|getMyStudents
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withFilter
argument_list|(
name|filter
argument_list|)
operator|.
name|withPermissions
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Long
name|canEnroll
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
return|return
name|canEnroll
argument_list|(
name|online
argument_list|,
literal|null
argument_list|,
name|studentId
argument_list|)
return|;
block|}
specifier|protected
name|Long
name|canEnroll
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|CourseRequestInterface
name|request
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
name|boolean
name|recheckCustomEligibility
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingCustomEligibilityRecheck
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|recheckCustomEligibility
condition|)
block|{
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|(
name|last
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|RECHECK_BEFORE_ENROLLMENT
argument_list|)
operator|||
operator|!
name|last
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|)
condition|)
name|recheckCustomEligibility
operator|=
literal|true
expr_stmt|;
block|}
name|EligibilityCheck
name|check
init|=
name|checkEligibility
argument_list|(
name|online
argument_list|,
literal|true
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
literal|null
argument_list|,
name|recheckCustomEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|check
operator|==
literal|null
operator|||
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|||
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|RECHECK_BEFORE_ENROLLMENT
argument_list|)
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|check
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|)
condition|?
name|MSG
operator|.
name|exceptionAuthenticationPinNotProvided
argument_list|()
else|:
name|MSG
operator|.
name|exceptionInsufficientPrivileges
argument_list|()
else|:
name|check
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|withEligibilityCheck
argument_list|(
name|check
argument_list|)
throw|;
if|if
condition|(
name|studentId
operator|.
name|equals
argument_list|(
name|getStudentId
argument_list|(
name|check
operator|.
name|getSessionId
argument_list|()
argument_list|)
argument_list|)
condition|)
return|return
name|check
operator|.
name|getSessionId
argument_list|()
return|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|check
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
return|return
name|check
operator|.
name|getSessionId
argument_list|()
return|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|check
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|getStudentId
argument_list|(
name|check
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
throw|;
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|MSG
operator|.
name|exceptionInsufficientPrivileges
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|CourseRequestInterface
name|getRequest
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCredit
argument_list|(
name|student
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|setMaxCreditOverride
argument_list|(
name|student
operator|.
name|getOverrideMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideExternalId
argument_list|(
name|student
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setMaxCreditOverrideTimeStamp
argument_list|(
name|student
operator|.
name|getOverrideTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|status
init|=
name|student
operator|.
name|getOverrideStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|APPROVED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|REJECTED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|==
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseRequest
operator|.
name|CourseRequestOverrideStatus
operator|.
name|CANCELLED
operator|.
name|ordinal
argument_list|()
condition|)
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|setMaxCreditOverrideStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
block|}
name|boolean
name|setReadOnlyWhenReserved
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeReservedRequestReadOnly
operator|.
name|isTrue
argument_list|()
decl_stmt|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|||
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
block|{
name|setReadOnlyWhenReserved
operator|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingMakeReservedRequestReadOnlyIfAdmin
operator|.
name|isTrue
argument_list|()
expr_stmt|;
block|}
name|boolean
name|reservedNoPriority
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingReservedRequestNoPriorityChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|reservedNoAlternatives
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingReservedRequestNoAlternativeChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|enrolledNoPriority
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingAssignedRequestNoPriorityChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|boolean
name|enrolledNoAlternatives
init|=
name|ApplicationProperty
operator|.
name|OnlineSchedulingAssignedRequestNoAlternativeChanges
operator|.
name|isTrue
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|getCourseDemands
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
name|demands
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseDemand
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseDemand
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseDemand
name|d1
parameter_list|,
name|CourseDemand
name|d2
parameter_list|)
block|{
if|if
condition|(
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
operator|!
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|d1
operator|.
name|isAlternative
argument_list|()
operator|&&
name|d2
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|d1
operator|.
name|getPriority
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|d1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|demands
operator|.
name|addAll
argument_list|(
name|student
operator|.
name|getCourseDemands
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestInterface
operator|.
name|Request
name|lastRequest
init|=
literal|null
decl_stmt|;
name|int
name|lastRequestPriority
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|CourseDemand
name|cd
range|:
name|demands
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setStart
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|day
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|cd
operator|.
name|getFreeTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|ft
operator|.
name|addDay
argument_list|(
name|day
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRequest
operator|!=
literal|null
operator|&&
name|lastRequestPriority
operator|==
name|cd
operator|.
name|getPriority
argument_list|()
operator|&&
name|lastRequest
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|lastRequest
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|!
name|cd
operator|.
name|getCourseRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseRequest
name|course
range|:
operator|new
name|TreeSet
argument_list|<
name|CourseRequest
argument_list|>
argument_list|(
name|cd
operator|.
name|getCourseRequests
argument_list|()
argument_list|)
control|)
block|{
name|courseIds
operator|.
name|add
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
operator|!
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|CourseCreditUnitConfig
name|credit
init|=
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|rc
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|credit
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasEnrollments
init|=
operator|!
name|course
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setReadOnly
argument_list|(
name|hasEnrollments
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCanDelete
argument_list|(
operator|!
name|hasEnrollments
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrollments
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|ENROLLED
argument_list|)
expr_stmt|;
if|else if
condition|(
name|course
operator|.
name|getOverrideStatus
argument_list|()
operator|!=
literal|null
condition|)
name|rc
operator|.
name|setStatus
argument_list|(
name|course
operator|.
name|isRequestApproved
argument_list|()
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_APPROVED
else|:
name|course
operator|.
name|isRequestRejected
argument_list|()
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
else|:
name|course
operator|.
name|isRequestCancelled
argument_list|()
condition|?
name|RequestedCourseStatus
operator|.
name|OVERRIDE_CANCELLED
else|:
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
argument_list|)
expr_stmt|;
else|else
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|SAVED
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrollments
condition|)
block|{
if|if
condition|(
name|enrolledNoAlternatives
condition|)
name|rc
operator|.
name|setCanChangeAlternatives
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrolledNoPriority
condition|)
name|rc
operator|.
name|setCanChangePriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setReadOnlyWhenReserved
condition|)
block|{
for|for
control|(
name|Reservation
name|reservation
range|:
name|course
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getReservations
argument_list|()
control|)
block|{
if|if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
operator|||
name|reservation
operator|instanceof
name|StudentGroupReservation
operator|||
name|reservation
operator|instanceof
name|LearningCommunityReservation
condition|)
block|{
if|if
condition|(
name|reservation
operator|.
name|isMustBeUsed
argument_list|()
operator|&&
operator|!
name|reservation
operator|.
name|isExpired
argument_list|()
operator|&&
name|reservation
operator|.
name|isApplicable
argument_list|(
name|student
argument_list|,
name|course
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCanDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservedNoAlternatives
condition|)
name|rc
operator|.
name|setCanChangeAlternatives
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservedNoPriority
condition|)
name|rc
operator|.
name|setCanChangePriority
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|rc
operator|.
name|setOverrideExternalId
argument_list|(
name|course
operator|.
name|getOverrideExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setOverrideTimeStamp
argument_list|(
name|course
operator|.
name|getOverrideTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getPreferences
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|StudentSectioningPref
name|ssp
range|:
name|course
operator|.
name|getPreferences
argument_list|()
control|)
block|{
if|if
condition|(
name|ssp
operator|instanceof
name|StudentClassPref
condition|)
block|{
name|StudentClassPref
name|scp
init|=
operator|(
name|StudentClassPref
operator|)
name|ssp
decl_stmt|;
name|rc
operator|.
name|setSelectedClass
argument_list|(
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|scp
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassPrefLabel
argument_list|(
name|course
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
argument_list|,
name|scp
operator|.
name|isRequired
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ssp
operator|instanceof
name|StudentInstrMthPref
condition|)
block|{
name|StudentInstrMthPref
name|imp
init|=
operator|(
name|StudentInstrMthPref
operator|)
name|ssp
decl_stmt|;
name|rc
operator|.
name|setSelectedIntructionalMethod
argument_list|(
name|imp
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|imp
operator|.
name|getInstructionalMethod
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|imp
operator|.
name|isRequired
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
if|if
condition|(
name|cd
operator|.
name|isAlternative
argument_list|()
condition|)
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
else|else
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setWaitList
argument_list|(
name|cd
operator|.
name|getWaitlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cd
operator|.
name|getCriticalOverride
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|setCritical
argument_list|(
name|cd
operator|.
name|getCriticalOverride
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|setCritical
argument_list|(
name|cd
operator|.
name|getCritical
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setTimeStamp
argument_list|(
name|cd
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|lastRequest
operator|=
name|r
expr_stmt|;
name|lastRequestPriority
operator|=
name|cd
operator|.
name|getPriority
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|StudentClassEnrollment
argument_list|>
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|enrl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|courseIds
operator|.
name|contains
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|courses
operator|.
name|add
argument_list|(
name|enrl
operator|.
name|getCourseOffering
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|c
range|:
name|courses
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|c
operator|.
name|getSubjectAreaAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getCourseNbr
argument_list|()
operator|+
operator|(
operator|!
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
condition|?
literal|""
else|:
literal|" - "
operator|+
name|c
operator|.
name|getTitle
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|CourseCreditUnitConfig
name|credit
init|=
name|c
operator|.
name|getCredit
argument_list|()
decl_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|rc
operator|.
name|setCredit
argument_list|(
name|credit
operator|.
name|getMinCredit
argument_list|()
argument_list|,
name|credit
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCanDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setStatus
argument_list|(
name|RequestedCourseStatus
operator|.
name|ENROLLED
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|CustomCourseRequestsValidationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CustomCourseRequestsValidationHolder
operator|.
name|Check
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to validate course requests: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|request
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|savedRequest
parameter_list|(
name|boolean
name|online
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
block|{
name|studentId
operator|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
operator|&&
name|sessionId
operator|!=
literal|null
operator|&&
name|online
operator|&&
name|CustomCourseRequestsHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|,
name|sectioning
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
operator|==
literal|null
condition|?
name|canEnroll
argument_list|(
name|online
argument_list|,
name|studentId
argument_list|)
else|:
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
name|boolean
name|includeAdvisorRequests
init|=
operator|!
name|sectioning
operator|&&
operator|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|,
name|sectioning
argument_list|)
operator|.
name|withCustomValidation
argument_list|(
operator|!
name|sectioning
argument_list|)
operator|.
name|withAdvisorRequests
argument_list|(
name|includeAdvisorRequests
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionBadStudentId
argument_list|()
argument_list|)
throw|;
name|CourseRequestInterface
name|request
init|=
name|getRequest
argument_list|(
name|student
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isEmpty
argument_list|()
operator|&&
name|CustomCourseRequestsHolder
operator|.
name|hasProvider
argument_list|()
condition|)
block|{
name|OnlineSectioningHelper
name|helper
init|=
operator|new
name|OnlineSectioningHelper
argument_list|(
name|hibSession
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
name|CourseRequestInterface
name|r
init|=
name|CustomCourseRequestsHolder
operator|.
name|getProvider
argument_list|()
operator|.
name|getCourseRequests
argument_list|(
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
argument_list|,
name|helper
argument_list|,
operator|new
name|XStudentId
argument_list|(
name|student
argument_list|,
name|helper
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|r
return|;
block|}
if|if
condition|(
name|includeAdvisorRequests
operator|&&
name|student
operator|.
name|getLastChangedByStudent
argument_list|()
operator|==
literal|null
condition|)
name|request
operator|.
name|applyAdvisorRequests
argument_list|(
name|AdvisorGetCourseRequests
operator|.
name|getRequest
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|savedResult
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|online
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
operator|==
literal|null
condition|?
name|canEnroll
argument_list|(
name|online
argument_list|,
name|studentId
argument_list|)
else|:
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasGradeModes
argument_list|()
condition|)
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|GradeMode
name|m
init|=
name|last
operator|.
name|getGradeMode
argument_list|(
name|a
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|a
operator|.
name|setGradeMode
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|hasCreditHours
argument_list|()
condition|)
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|ret
operator|.
name|getCourseAssignments
argument_list|()
control|)
for|for
control|(
name|ClassAssignment
name|a
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|Float
name|credit
init|=
name|last
operator|.
name|getCreditHour
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|a
operator|.
name|setCreditHour
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
name|a
operator|.
name|setCredit
argument_list|(
name|FixedCreditUnitConfig
operator|.
name|formatCredit
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
else|else
block|{
name|OnlineSectioningServer
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetAssignment
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|selectSession
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSession
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|UserAuthority
argument_list|>
name|authorities
init|=
name|user
operator|.
name|getAuthorities
argument_list|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|,
operator|new
name|SimpleQualifier
argument_list|(
literal|"Session"
argument_list|,
name|sessionId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|authorities
operator|.
name|isEmpty
argument_list|()
condition|)
name|user
operator|.
name|setCurrentAuthority
argument_list|(
name|authorities
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|user
operator|.
name|setCurrentAuthority
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|StudentStatusInfo
name|toStudentStatusInfo
parameter_list|(
name|StudentSectioningStatus
name|status
parameter_list|,
name|List
argument_list|<
name|CourseType
argument_list|>
name|types
parameter_list|,
name|boolean
name|admin
parameter_list|,
name|boolean
name|advisor
parameter_list|)
block|{
name|StudentStatusInfo
name|info
init|=
operator|new
name|StudentStatusInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setUniqueId
argument_list|(
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setReference
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanAccessAssistantPage
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanAccessRequestsPage
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanStudentEnroll
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enrollment
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanStudentRegister
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanAdvisorEnroll
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanAdvisorRegister
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanAdminEnroll
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|admin
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanAdminRegister
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWaitList
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|waitlist
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanRequire
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|canreq
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEmail
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setNoSchedule
argument_list|(
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|noschedule
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setMessage
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|!=
literal|null
condition|)
name|info
operator|.
name|setFallback
argument_list|(
name|status
operator|.
name|getFallBackStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|status
operator|.
name|hasOption
argument_list|(
name|Option
operator|.
name|notype
argument_list|)
condition|)
block|{
comment|// all but
name|Set
argument_list|<
name|String
argument_list|>
name|prohibited
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseType
name|type
range|:
name|types
control|)
if|if
condition|(
name|status
operator|.
name|getTypes
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|status
operator|.
name|getTypes
argument_list|()
operator|.
name|contains
argument_list|(
name|type
argument_list|)
condition|)
name|prohibited
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|prohibited
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|refs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|ref
range|:
name|prohibited
control|)
name|refs
operator|+=
operator|(
name|refs
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|ref
expr_stmt|;
name|info
operator|.
name|setCourseTypes
argument_list|(
name|MSG
operator|.
name|courseTypesAllBut
argument_list|(
name|refs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|allowed
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseType
name|type
range|:
name|status
operator|.
name|getTypes
argument_list|()
control|)
name|allowed
operator|.
name|add
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowed
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info
operator|.
name|setCourseTypes
argument_list|(
name|MSG
operator|.
name|courseTypesNoneAllowed
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|refs
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|ref
range|:
name|allowed
control|)
name|refs
operator|+=
operator|(
name|refs
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|ref
expr_stmt|;
name|info
operator|.
name|setCourseTypes
argument_list|(
name|MSG
operator|.
name|courseTypesAllowed
argument_list|(
name|refs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
operator|!=
literal|null
operator|||
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
operator|==
literal|null
condition|)
name|info
operator|.
name|setEffectiveStart
argument_list|(
name|Constants
operator|.
name|slot2str
argument_list|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
operator|==
literal|null
condition|)
name|info
operator|.
name|setEffectiveStart
argument_list|(
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|setEffectiveStart
argument_list|(
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStartDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|Constants
operator|.
name|slot2str
argument_list|(
name|status
operator|.
name|getEffectiveStartPeriod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
operator|!=
literal|null
operator|||
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
operator|==
literal|null
condition|)
name|info
operator|.
name|setEffectiveStop
argument_list|(
name|Constants
operator|.
name|slot2str
argument_list|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
operator|==
literal|null
condition|)
name|info
operator|.
name|setEffectiveStop
argument_list|(
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|info
operator|.
name|setEffectiveStop
argument_list|(
name|Formats
operator|.
name|getDateFormat
argument_list|(
name|Formats
operator|.
name|Pattern
operator|.
name|DATE_EVENT
argument_list|)
operator|.
name|format
argument_list|(
name|status
operator|.
name|getEffectiveStopDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|Constants
operator|.
name|slot2str
argument_list|(
name|status
operator|.
name|getEffectiveStopPeriod
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
condition|)
block|{
name|info
operator|.
name|setCanUseAssistant
argument_list|(
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
operator|||
operator|(
name|admin
operator|&&
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|admin
argument_list|)
operator|)
operator|||
operator|(
name|advisor
operator|&&
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
condition|)
block|{
name|info
operator|.
name|setCanRegister
argument_list|(
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
operator|||
operator|(
name|admin
operator|&&
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
operator|)
operator|||
operator|(
name|advisor
operator|&&
name|StudentSectioningStatus
operator|.
name|hasEffectiveOption
argument_list|(
name|status
argument_list|,
literal|null
argument_list|,
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|StudentStatusInfo
argument_list|>
name|lookupStudentSectioningStates
parameter_list|()
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|List
argument_list|<
name|CourseType
argument_list|>
name|courseTypes
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from CourseOffering c inner join c.courseType t where c.instructionalOffering.session = :sessionId order by t.reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getStatusPageSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|StudentStatusInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentStatusInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|advisor
init|=
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
decl_stmt|;
name|boolean
name|admin
init|=
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
decl_stmt|;
name|boolean
name|email
init|=
literal|true
decl_stmt|;
name|boolean
name|waitlist
init|=
name|CustomStudentEnrollmentHolder
operator|.
name|isAllowWaitListing
argument_list|()
decl_stmt|;
name|boolean
name|specreg
init|=
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
decl_stmt|;
name|boolean
name|reqval
init|=
name|CustomCourseRequestsValidationHolder
operator|.
name|hasProvider
argument_list|()
decl_stmt|;
if|if
condition|(
name|admin
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|)
decl_stmt|;
name|StudentStatusInfo
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|toStudentStatusInfo
argument_list|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|courseTypes
argument_list|,
name|admin
argument_list|,
name|advisor
argument_list|)
expr_stmt|;
name|info
operator|.
name|setUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|studentStatusSessionDefault
argument_list|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEffectiveStart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEffectiveStop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
operator|new
name|StudentStatusInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|studentStatusSystemDefault
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAllEnabled
argument_list|()
expr_stmt|;
block|}
name|info
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWaitList
argument_list|(
name|waitlist
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSpecialRegistration
argument_list|(
name|specreg
argument_list|)
expr_stmt|;
name|info
operator|.
name|setRequestValiadtion
argument_list|(
name|reqval
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentSectioningStatus
name|s
range|:
name|StudentSectioningStatus
operator|.
name|findAll
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|s
operator|.
name|isPast
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|advisor
operator|&&
operator|!
name|admin
operator|&&
operator|!
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advcanset
argument_list|)
condition|)
continue|continue;
name|StudentStatusInfo
name|info
init|=
name|toStudentStatusInfo
argument_list|(
name|s
argument_list|,
name|courseTypes
argument_list|,
name|admin
argument_list|,
name|advisor
argument_list|)
decl_stmt|;
name|info
operator|.
name|setEmail
argument_list|(
name|email
operator|&&
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWaitList
argument_list|(
name|waitlist
operator|&&
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|waitlist
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setSpecialRegistration
argument_list|(
name|specreg
operator|&&
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|specreg
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setRequestValiadtion
argument_list|(
name|reqval
operator|&&
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|reqval
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setCanRequire
argument_list|(
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|canreq
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|sendEmail
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|cc
parameter_list|,
name|Boolean
name|courseRequests
parameter_list|,
name|Boolean
name|classSchedule
parameter_list|,
name|Boolean
name|advisorRequests
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingEmailStudent
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
operator|&&
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudentIds
init|=
name|getMyStudents
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myStudentIds
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|SEC_MSG
operator|.
name|permissionCheckFailed
argument_list|(
name|Right
operator|.
name|StudentSchedulingEmailStudent
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|student
operator|==
literal|null
condition|?
name|studentId
operator|.
name|toString
argument_list|()
else|:
name|student
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|StudentEmail
name|email
init|=
name|server
operator|.
name|createAction
argument_list|(
name|StudentEmail
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseRequests
operator|!=
literal|null
operator|&&
name|classSchedule
operator|!=
literal|null
operator|&&
name|advisorRequests
operator|!=
literal|null
condition|)
block|{
name|email
operator|.
name|overridePermissions
argument_list|(
name|courseRequests
argument_list|,
name|classSchedule
argument_list|,
name|advisorRequests
argument_list|)
expr_stmt|;
if|if
condition|(
name|advisorRequests
operator|&&
operator|!
name|courseRequests
operator|&&
operator|!
name|classSchedule
condition|)
name|email
operator|.
name|includeAdvisorRequestsPDF
argument_list|()
expr_stmt|;
block|}
name|email
operator|.
name|setCC
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|email
operator|.
name|setEmailSubject
argument_list|(
name|subject
operator|==
literal|null
operator|||
name|subject
operator|.
name|isEmpty
argument_list|()
condition|?
operator|(
name|classSchedule
condition|?
name|MSG
operator|.
name|defaulSubject
argument_list|()
else|:
name|courseRequests
condition|?
name|MSG
operator|.
name|defaulSubjectCourseRequests
argument_list|()
else|:
name|advisorRequests
condition|?
name|MSG
operator|.
name|defaulSubjectAdvisorRequests
argument_list|()
else|:
name|MSG
operator|.
name|defaulSubjectOther
argument_list|()
operator|)
else|:
name|subject
argument_list|)
expr_stmt|;
name|email
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|email
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|changeStatus
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|String
name|note
parameter_list|,
name|String
name|ref
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeStudentStatus
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
operator|&&
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudentIds
init|=
name|getMyStudents
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
block|{
if|if
condition|(
operator|!
name|myStudentIds
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|SEC_MSG
operator|.
name|permissionCheckFailed
argument_list|(
name|Right
operator|.
name|StudentSchedulingChangeStudentStatus
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|student
operator|==
literal|null
condition|?
name|studentId
operator|.
name|toString
argument_list|()
else|:
name|student
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
name|Boolean
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ChangeStudentStatus
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
operator|.
name|withStatus
argument_list|(
name|ref
argument_list|)
operator|.
name|withNote
argument_list|(
name|note
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|SessionFactory
name|hibSessionFactory
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|Student
operator|.
name|class
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to evict cache: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|changeStudentGroup
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|Long
name|groupId
parameter_list|,
name|boolean
name|remove
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeStudentGroup
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
operator|&&
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudentIds
init|=
name|getMyStudents
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
block|{
if|if
condition|(
operator|!
name|myStudentIds
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|SEC_MSG
operator|.
name|permissionCheckFailed
argument_list|(
name|Right
operator|.
name|StudentSchedulingChangeStudentGroup
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|student
operator|==
literal|null
condition|?
name|studentId
operator|.
name|toString
argument_list|()
else|:
name|student
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ChangeStudentGroup
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
operator|.
name|withGroup
argument_list|(
name|groupId
argument_list|,
name|remove
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|OnlineSectioningLog
operator|.
name|Entity
name|currentUser
parameter_list|()
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|UniTimePrincipal
name|principal
init|=
operator|(
name|UniTimePrincipal
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingUser
argument_list|)
decl_stmt|;
name|String
name|pin
init|=
operator|(
name|String
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingPIN
argument_list|)
decl_stmt|;
name|String
name|specialRequestId
init|=
operator|(
name|String
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingLastSpecialRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|entity
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|user
operator|.
name|getTrueExternalUserId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|user
operator|.
name|getTrueName
argument_list|()
operator|==
literal|null
condition|?
name|user
operator|.
name|getUsername
argument_list|()
else|:
name|user
operator|.
name|getTrueName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|user
operator|instanceof
name|Chameleon
operator|||
name|principal
operator|!=
literal|null
condition|?
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
else|:
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|STUDENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|pin
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
if|if
condition|(
name|principal
operator|!=
literal|null
operator|&&
name|principal
operator|.
name|getStudentExternalId
argument_list|()
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"student"
argument_list|)
operator|.
name|setValue
argument_list|(
name|principal
operator|.
name|getStudentExternalId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|specialRequestId
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreq"
argument_list|)
operator|.
name|setValue
argument_list|(
name|specialRequestId
argument_list|)
expr_stmt|;
return|return
name|entity
operator|.
name|build
argument_list|()
return|;
block|}
if|else if
condition|(
name|principal
operator|!=
literal|null
condition|)
block|{
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|Builder
name|entity
init|=
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|newBuilder
argument_list|()
operator|.
name|setExternalId
argument_list|(
name|principal
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setName
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|OnlineSectioningLog
operator|.
name|Entity
operator|.
name|EntityType
operator|.
name|MANAGER
argument_list|)
decl_stmt|;
if|if
condition|(
name|pin
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"pin"
argument_list|)
operator|.
name|setValue
argument_list|(
name|pin
argument_list|)
expr_stmt|;
if|if
condition|(
name|specialRequestId
operator|!=
literal|null
condition|)
name|entity
operator|.
name|addParameterBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
literal|"specreq"
argument_list|)
operator|.
name|setValue
argument_list|(
name|specialRequestId
argument_list|)
expr_stmt|;
return|return
name|entity
operator|.
name|build
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|changeLog
parameter_list|(
name|String
name|query
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|Long
name|sessionId
init|=
name|getStatusPageSessionId
argument_list|()
decl_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|server
operator|instanceof
name|DatabaseServer
condition|)
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|DbFindOnlineSectioningLogAction
operator|.
name|class
argument_list|)
operator|.
name|forQuery
argument_list|(
name|query
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindOnlineSectioningLogAction
operator|.
name|class
argument_list|)
operator|.
name|forQuery
argument_list|(
name|query
argument_list|,
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|massCancel
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
name|String
name|statusRef
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|message
parameter_list|,
name|String
name|cc
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingMassCancel
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
operator|&&
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
condition|)
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|myStudentIds
init|=
name|getMyStudents
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
block|{
if|if
condition|(
operator|!
name|myStudentIds
operator|.
name|contains
argument_list|(
name|studentId
argument_list|)
condition|)
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|SEC_MSG
operator|.
name|permissionCheckFailed
argument_list|(
name|Right
operator|.
name|StudentSchedulingMassCancel
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|student
operator|==
literal|null
condition|?
name|studentId
operator|.
name|toString
argument_list|()
else|:
name|student
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|MassCancelAction
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
operator|.
name|withStatus
argument_list|(
name|statusRef
argument_list|)
operator|.
name|withEmail
argument_list|(
name|subject
argument_list|,
name|message
argument_list|,
name|cc
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|CourseMatcher
extends|extends
name|AbstractCourseMatcher
block|{
specifier|private
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
name|iParent
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|iAllCourseTypes
decl_stmt|,
name|iNoCourseType
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|iAllowedCourseTypes
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iAllowedCourseIds
decl_stmt|;
specifier|public
name|CourseMatcher
parameter_list|(
name|boolean
name|allCourseTypes
parameter_list|,
name|boolean
name|noCourseType
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|allowedCourseTypes
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|allowedCourseIds
parameter_list|)
block|{
name|iAllCourseTypes
operator|=
name|allCourseTypes
expr_stmt|;
name|iNoCourseType
operator|=
name|noCourseType
expr_stmt|;
name|iAllowedCourseTypes
operator|=
name|allowedCourseTypes
expr_stmt|;
name|iAllowedCourseIds
operator|=
name|allowedCourseIds
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllCourseTypes
parameter_list|()
block|{
return|return
name|iAllCourseTypes
return|;
block|}
specifier|public
name|boolean
name|isNoCourseType
parameter_list|()
block|{
return|return
name|iNoCourseType
return|;
block|}
specifier|public
name|boolean
name|hasAllowedCourseTypes
parameter_list|()
block|{
return|return
name|iAllowedCourseTypes
operator|!=
literal|null
operator|&&
operator|!
name|iAllowedCourseTypes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllowedCourseTypes
parameter_list|()
block|{
return|return
name|iAllowedCourseTypes
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getAllowedCourseIds
parameter_list|()
block|{
return|return
name|iAllowedCourseIds
return|;
block|}
specifier|public
name|boolean
name|isAllowedCourseId
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
return|return
name|iAllowedCourseIds
operator|!=
literal|null
operator|&&
name|course
operator|!=
literal|null
operator|&&
name|iAllowedCourseIds
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
name|getParentCourseMatcher
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|void
name|setParentCourseMatcher
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|match
operator|.
name|CourseMatcher
name|parent
parameter_list|)
block|{
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|XCourseId
name|course
parameter_list|)
block|{
if|if
condition|(
name|isAllowedCourseId
argument_list|(
name|course
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|course
operator|!=
literal|null
operator|&&
name|course
operator|.
name|matchType
argument_list|(
name|iAllCourseTypes
argument_list|,
name|iNoCourseType
argument_list|,
name|iAllowedCourseTypes
argument_list|)
operator|&&
operator|(
name|iParent
operator|==
literal|null
operator|||
name|iParent
operator|.
name|match
argument_list|(
name|course
argument_list|)
operator|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|EligibilityCheck
name|checkEligibility
parameter_list|(
name|boolean
name|online
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|,
name|String
name|pin
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
return|return
name|checkEligibility
argument_list|(
name|online
argument_list|,
name|sectioning
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|pin
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|EligibilityCheck
name|checkEligibility
parameter_list|(
name|boolean
name|online
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|,
name|String
name|pin
parameter_list|,
name|boolean
name|includeCustomCheck
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
if|if
condition|(
name|pin
operator|!=
literal|null
operator|&&
operator|!
name|pin
operator|.
name|isEmpty
argument_list|()
condition|)
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingPIN
argument_list|,
name|pin
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeCustomCheck
condition|)
name|getSessionContext
argument_list|()
operator|.
name|removeAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|StudentSolverProxy
name|server
init|=
name|getStudentSolver
argument_list|()
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
return|return
operator|new
name|EligibilityCheck
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
return|;
name|EligibilityCheck
name|check
init|=
operator|new
name|EligibilityCheck
argument_list|()
decl_stmt|;
name|check
operator|.
name|setSessionId
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setStudentId
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_USE_ASSISTANT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
operator|!
name|server
operator|.
name|isPublished
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_WAITLIST
argument_list|,
name|ApplicationProperty
operator|.
name|SolverDashboardAllowWaitList
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_RESET
argument_list|,
name|ApplicationProperty
operator|.
name|SolverDashboardAllowScheduleReset
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CONFIRM_DROP
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingConfirmCourseDrop
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|QUICK_ADD_DROP
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingQuickAddDrop
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|ALTERNATIVES_DROP
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingAlternativesDrop
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|GWT_CONFIRMATIONS
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingGWTConfirmations
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|DEGREE_PLANS
argument_list|,
name|CustomDegreePlansHolder
operator|.
name|hasProvider
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|NO_REQUEST_ARROWS
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingNoRequestArrows
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REQUIRE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|&&
name|studentId
operator|!=
literal|null
condition|)
block|{
comment|// guess session from student
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|sessionId
operator|=
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
comment|// use last used session otherwise
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLastSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
return|return
operator|new
name|EligibilityCheck
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
return|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
operator|new
name|EligibilityCheck
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
name|MSG
operator|.
name|exceptionHttpSessionExpired
argument_list|()
else|:
name|MSG
operator|.
name|exceptionLoginRequired
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
name|studentId
operator|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|EligibilityCheck
name|check
init|=
operator|new
name|EligibilityCheck
argument_list|()
decl_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADMIN
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADVISOR
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_GUEST
argument_list|,
name|user
operator|instanceof
name|AnonymousUserContext
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_RESET
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingAllowScheduleReset
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_RESET
argument_list|)
operator|&&
operator|(
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADMIN
argument_list|)
operator|||
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADVISOR
argument_list|)
operator|)
condition|)
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_RESET
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingAllowScheduleResetIfAdmin
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CONFIRM_DROP
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingConfirmCourseDrop
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|QUICK_ADD_DROP
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingQuickAddDrop
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|ALTERNATIVES_DROP
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingAlternativesDrop
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|GWT_CONFIRMATIONS
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingGWTConfirmations
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|DEGREE_PLANS
argument_list|,
name|CustomDegreePlansHolder
operator|.
name|hasProvider
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|NO_REQUEST_ARROWS
argument_list|,
name|ApplicationProperty
operator|.
name|OnlineSchedulingNoRequestArrows
operator|.
name|isTrue
argument_list|()
argument_list|)
expr_stmt|;
name|check
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|check
operator|.
name|setStudentId
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sectioning
condition|)
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
block|{
name|Student
name|student
init|=
operator|(
name|studentId
operator|==
literal|null
condition|?
literal|null
else|:
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADMIN
argument_list|)
operator|&&
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADVISOR
argument_list|)
condition|)
name|check
operator|.
name|setMessage
argument_list|(
name|MSG
operator|.
name|exceptionEnrollNotStudent
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
name|StudentSectioningStatus
name|status
init|=
name|student
operator|.
name|getEffectiveStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_USE_ASSISTANT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_WAITLIST
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_USE_ASSISTANT
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regenabled
argument_list|)
operator|||
operator|(
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADMIN
argument_list|)
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadmin
argument_list|)
operator|)
operator|||
operator|(
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADVISOR
argument_list|)
operator|&&
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|regadvisor
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_WAITLIST
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|waitlist
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setMessage
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRegister
argument_list|)
argument_list|)
expr_stmt|;
name|check
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REQUIRE
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRequirePreferences
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|check
operator|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CourseRequestEligibility
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
operator|.
name|withCheck
argument_list|(
name|check
argument_list|)
operator|.
name|includeCustomCheck
argument_list|(
name|includeCustomCheck
argument_list|)
operator|.
name|withPermission
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|studentId
argument_list|,
literal|"Student"
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRegister
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|studentId
argument_list|,
literal|"Student"
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRequirePreferences
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeCustomCheck
condition|)
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|,
name|check
argument_list|)
expr_stmt|;
return|return
name|check
return|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
return|return
operator|new
name|EligibilityCheck
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
return|;
name|EligibilityCheck
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CheckEligibility
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
operator|.
name|withCheck
argument_list|(
name|check
argument_list|)
operator|.
name|includeCustomCheck
argument_list|(
name|includeCustomCheck
argument_list|)
operator|.
name|withPermission
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|studentId
argument_list|,
literal|"Student"
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanEnroll
argument_list|)
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnyAuthority
argument_list|(
name|studentId
argument_list|,
literal|"Student"
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRequirePreferences
argument_list|)
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeCustomCheck
condition|)
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|EligibilityCheck
argument_list|(
name|MSG
operator|.
name|exceptionUnknown
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|e
operator|.
name|getMessage
argument_list|()
else|:
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|?
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
else|:
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|Customization
name|customization
range|:
name|Customization
operator|.
name|values
argument_list|()
control|)
name|customization
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SectioningProperties
name|getProperties
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|SectioningProperties
name|properties
init|=
operator|new
name|SectioningProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setAdmin
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setAdvisor
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
condition|)
name|sessionId
operator|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
expr_stmt|;
name|properties
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setChangeLog
argument_list|(
name|properties
operator|.
name|isAdmin
argument_list|()
operator|&&
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setMassCancel
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingMassCancel
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setEmail
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingEmailStudent
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setChangeStatus
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeStudentStatus
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setRequestUpdate
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingRequestStudentUpdate
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setCheckStudentOverrides
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingCheckStudentOverrides
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setValidateStudentOverrides
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingValidateStudentOverrides
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setRecheckCriticalCourses
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingRecheckCriticalCourses
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setAdvisorCourseRequests
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|AdvisorCourseRequests
argument_list|)
operator|&&
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeStudentGroup
argument_list|)
condition|)
for|for
control|(
name|StudentGroup
name|g
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from StudentGroup g where g.type.advisorsCanSet = true and g.session = :sessionId order by g.groupAbbreviation"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|properties
operator|.
name|addEditableGroup
argument_list|(
operator|new
name|StudentGroupInfo
argument_list|(
name|g
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|requestStudentUpdate
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingRequestStudentUpdate
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|RequestStudentUpdates
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|checkStudentOverrides
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingCheckStudentOverrides
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CustomCourseRequestsValidationHolder
operator|.
name|Update
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|validateStudentOverrides
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingValidateStudentOverrides
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CustomCourseRequestsValidationHolder
operator|.
name|Validate
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|recheckCriticalCourses
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingRecheckCriticalCourses
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|CustomCriticalCoursesHolder
operator|.
name|CheckCriticalCourses
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentIds
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|listDegreePlans
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
name|studentId
operator|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|studentId
operator|.
name|equals
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
condition|)
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|online
condition|)
block|{
name|server
operator|=
name|getStudentSolver
argument_list|()
expr_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoSolver
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|server
operator|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetDegreePlans
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
operator|.
name|Student
name|lookupStudent
parameter_list|(
name|boolean
name|online
parameter_list|,
name|String
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|==
literal|null
operator|||
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentEnrollments
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRegister
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|online
condition|?
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanEnroll
argument_list|)
else|:
name|getStudentSolver
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|st
return|;
block|}
annotation|@
name|Override
specifier|public
name|SubmitSpecialRegistrationResponse
name|submitSpecialRequest
parameter_list|(
name|SubmitSpecialRegistrationRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationSubmit
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SpecialRegistrationEligibilityResponse
name|checkSpecialRequestEligibility
parameter_list|(
name|SpecialRegistrationEligibilityRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationEligibility
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|retrieveAllSpecialRequests
parameter_list|(
name|RetrieveAllSpecialRegistrationsRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationRetrieveAll
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Student
name|lookupStudent
parameter_list|(
name|boolean
name|online
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|==
literal|null
operator|||
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentEnrollments
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|Student
name|st
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|Student
argument_list|()
decl_stmt|;
name|st
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setSessionId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanShowExternalId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|EnrollmentsShowExternalId
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanRegister
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|CourseRequests
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanRegister
argument_list|)
argument_list|)
expr_stmt|;
name|st
operator|.
name|setCanUseAssistant
argument_list|(
name|online
condition|?
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|SchedulingAssistant
argument_list|)
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|student
argument_list|,
name|Right
operator|.
name|StudentSchedulingCanEnroll
argument_list|)
else|:
name|getStudentSolver
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|st
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingStudentNameFormat
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentAreaClassificationMajor
name|acm
range|:
operator|new
name|TreeSet
argument_list|<
name|StudentAreaClassificationMajor
argument_list|>
argument_list|(
name|student
operator|.
name|getAreaClasfMajors
argument_list|()
argument_list|)
control|)
block|{
name|st
operator|.
name|addArea
argument_list|(
name|acm
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addClassification
argument_list|(
name|acm
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|st
operator|.
name|addMajor
argument_list|(
name|acm
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentGroup
name|g
range|:
name|student
operator|.
name|getGroups
argument_list|()
control|)
block|{
if|if
condition|(
name|g
operator|.
name|getType
argument_list|()
operator|==
literal|null
condition|)
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|st
operator|.
name|addGroup
argument_list|(
name|g
operator|.
name|getType
argument_list|()
operator|.
name|getReference
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|g
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentAccomodation
name|a
range|:
name|student
operator|.
name|getAccomodations
argument_list|()
control|)
block|{
name|st
operator|.
name|addAccommodation
argument_list|(
name|a
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Advisor
name|a
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getLastName
argument_list|()
operator|!=
literal|null
condition|)
name|st
operator|.
name|addAdvisor
argument_list|(
name|NameFormat
operator|.
name|fromReference
argument_list|(
name|ApplicationProperty
operator|.
name|OnlineSchedulingInstructorNameFormat
operator|.
name|value
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|st
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|section
parameter_list|(
name|boolean
name|online
parameter_list|,
name|CourseRequestInterface
name|request
parameter_list|,
name|List
argument_list|<
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|,
name|List
argument_list|<
name|ClassAssignment
argument_list|>
name|specialRegistration
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|FindAssignmentAction
operator|.
name|class
argument_list|)
operator|.
name|forRequest
argument_list|(
name|request
argument_list|)
operator|.
name|withAssignment
argument_list|(
name|currentAssignment
argument_list|)
operator|.
name|withSpecialRegistration
argument_list|(
name|specialRegistration
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setCanEnroll
argument_list|(
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
if|if
condition|(
name|getStudentId
argument_list|(
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|ret
operator|.
name|setCanEnroll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionSectioningFailed
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CancelSpecialRegistrationResponse
name|cancelSpecialRequest
parameter_list|(
name|CancelSpecialRegistrationRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationCancel
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|RetrieveAvailableGradeModesResponse
name|retrieveGradeModes
parameter_list|(
name|RetrieveAvailableGradeModesRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationRetrieveGradeModes
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChangeGradeModesResponse
name|changeGradeModes
parameter_list|(
name|ChangeGradeModesRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
operator|!
name|server
operator|.
name|getAcademicSession
argument_list|()
operator|.
name|isSectioningEnabled
argument_list|()
operator|||
operator|!
name|CustomSpecialRegistrationHolder
operator|.
name|hasProvider
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNotSupportedFeature
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|ChangeGradeModesResponse
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationChangeGradeModes
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
name|EligibilityCheck
name|last
init|=
operator|(
name|EligibilityCheck
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|SessionAttribute
operator|.
name|OnlineSchedulingEligibility
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|hasGradeModes
argument_list|()
operator|&&
name|last
operator|!=
literal|null
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|GradeMode
argument_list|>
name|e
range|:
name|ret
operator|.
name|getGradeModes
argument_list|()
operator|.
name|toMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
name|last
operator|.
name|addGradeMode
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isHonor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|changeCriticalOverride
parameter_list|(
name|Long
name|studentId
parameter_list|,
name|Long
name|courseId
parameter_list|,
name|Integer
name|critical
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|studentId
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeCriticalOverride
argument_list|)
expr_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CourseDemandDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|CourseDemand
name|cd
init|=
operator|(
name|CourseDemand
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cr.courseDemand from CourseRequest cr where cr.courseOffering = :courseId and cr.courseDemand.student = :studentId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|studentId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|courseId
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|cd
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|cd
operator|.
name|setCriticalOverride
argument_list|(
name|critical
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|save
argument_list|(
name|cd
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|cd
operator|.
name|getStudent
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|ReloadStudent
operator|.
name|class
argument_list|)
operator|.
name|forStudents
argument_list|(
name|studentId
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cd
operator|.
name|getEffectiveCritical
argument_list|()
operator|.
name|ordinal
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SectioningException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SectioningException
argument_list|(
literal|"Failed to update critical status: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|UpdateSpecialRegistrationResponse
name|updateSpecialRequest
parameter_list|(
name|UpdateSpecialRegistrationRequest
name|request
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|request
operator|.
name|setSessionId
argument_list|(
name|getLastSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
name|request
operator|.
name|getSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
name|request
operator|.
name|setStudentId
argument_list|(
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|setLastSessionId
argument_list|(
name|request
operator|.
name|getSessionId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|SpecialRegistrationUpdate
operator|.
name|class
argument_list|)
operator|.
name|withRequest
argument_list|(
name|request
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|StudentInfo
name|getStudentInfo
parameter_list|(
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|Student
name|student
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnySession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|AdvisorCourseRequests
argument_list|)
expr_stmt|;
name|Long
name|sessionId
init|=
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
name|StudentInfo
name|ret
init|=
operator|new
name|StudentInfo
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStudentName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStudentExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSessionName
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|AdvisingStudentDetails
name|getStudentAdvisingDetails
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|String
name|studentExternalId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|setCacheMode
argument_list|(
name|CacheMode
operator|.
name|REFRESH
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
name|sessionId
operator|=
name|getLastSessionId
argument_list|()
expr_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|AdvisorCourseRequests
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|sessionId
argument_list|,
name|studentExternalId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
name|AdvisingStudentDetails
name|ret
init|=
operator|new
name|AdvisingStudentDetails
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setSessionId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStudentId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStudentName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|reference
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStudentExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSessionName
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
name|Advisor
name|advisor
init|=
name|Advisor
operator|.
name|findByExternalId
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
argument_list|,
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
operator|&&
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|manager
operator|.
name|getEmailAddress
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setAdvisorEmail
argument_list|(
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|advisor
operator|!=
literal|null
operator|&&
name|advisor
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|advisor
operator|.
name|getEmail
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setAdvisorEmail
argument_list|(
name|advisor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|email
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Advisor
name|a
range|:
name|student
operator|.
name|getAdvisors
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|email
operator|=
operator|(
name|email
operator|==
literal|null
condition|?
literal|""
else|:
name|email
operator|+
literal|"\n"
operator|)
operator|+
name|a
operator|.
name|getEmail
argument_list|()
expr_stmt|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getExternalUserId
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|email
operator|=
name|a
operator|.
name|getEmail
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|ret
operator|.
name|setAdvisorEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setCanUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDegreePlan
argument_list|(
name|CustomDegreePlansHolder
operator|.
name|hasProvider
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
condition|)
block|{
name|ret
operator|.
name|setCanUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
condition|)
block|{
if|if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyAllStudents
argument_list|)
condition|)
name|ret
operator|.
name|setCanUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|StudentSchedulingAdvisorCanModifyMyStudents
argument_list|)
operator|&&
name|advisor
operator|!=
literal|null
operator|&&
name|advisor
operator|.
name|getStudents
argument_list|()
operator|.
name|contains
argument_list|(
name|student
argument_list|)
condition|)
name|ret
operator|.
name|setCanUpdate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setCanUpdate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDegreePlan
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|setCanEmail
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingEmailStudent
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CourseType
argument_list|>
name|courseTypes
init|=
name|CourseTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select distinct t from CourseOffering c inner join c.courseType t where c.instructionalOffering.session = :sessionId order by t.reference"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getStatusPageSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|boolean
name|adv
init|=
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdvisor
argument_list|)
decl_stmt|;
name|boolean
name|admin
init|=
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|getStatusPageSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|StudentSchedulingAdmin
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|.
name|getSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setStatus
argument_list|(
name|toStudentStatusInfo
argument_list|(
name|student
operator|.
name|getSectioningStatus
argument_list|()
argument_list|,
name|courseTypes
argument_list|,
name|admin
argument_list|,
name|adv
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|StudentStatusInfo
name|info
init|=
name|toStudentStatusInfo
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|courseTypes
argument_list|,
name|admin
argument_list|,
name|adv
argument_list|)
decl_stmt|;
name|info
operator|.
name|setUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|studentStatusSessionDefault
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEffectiveStart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEffectiveStop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setStatus
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|StudentStatusInfo
name|info
init|=
operator|new
name|StudentStatusInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|studentStatusSystemDefault
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAllEnabled
argument_list|()
expr_stmt|;
name|ret
operator|.
name|setStatus
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isCanUpdate
argument_list|()
operator|&&
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|sessionId
argument_list|,
name|Right
operator|.
name|StudentSchedulingChangeStudentStatus
argument_list|)
condition|)
block|{
if|if
condition|(
name|admin
condition|)
block|{
name|Session
name|session
init|=
name|student
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|StudentStatusInfo
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|toStudentStatusInfo
argument_list|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
argument_list|,
name|courseTypes
argument_list|,
name|admin
argument_list|,
name|adv
argument_list|)
expr_stmt|;
name|info
operator|.
name|setUniqueId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|studentStatusSessionDefault
argument_list|(
name|session
operator|.
name|getDefaultSectioningStatus
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEffectiveStart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|info
operator|.
name|setEffectiveStop
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
operator|new
name|StudentStatusInfo
argument_list|()
expr_stmt|;
name|info
operator|.
name|setReference
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|info
operator|.
name|setLabel
argument_list|(
name|MSG
operator|.
name|studentStatusSystemDefault
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|setAllEnabled
argument_list|()
expr_stmt|;
block|}
name|ret
operator|.
name|addStatus
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentSectioningStatus
name|s
range|:
name|StudentSectioningStatus
operator|.
name|findAll
argument_list|(
name|sessionId
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|admin
operator|&&
name|s
operator|.
name|isPast
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|admin
operator|&&
operator|!
name|s
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advcanset
argument_list|)
condition|)
continue|continue;
name|ret
operator|.
name|addStatus
argument_list|(
name|toStudentStatusInfo
argument_list|(
name|s
argument_list|,
name|courseTypes
argument_list|,
name|admin
argument_list|,
name|adv
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|setRequest
argument_list|(
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|AdvisorGetCourseRequests
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|checkDemands
argument_list|(
literal|true
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|server
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|server
operator|instanceof
name|DatabaseServer
operator|)
condition|)
block|{
name|ret
operator|.
name|setStudentRequest
argument_list|(
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|GetRequest
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|withCustomValidation
argument_list|(
literal|true
argument_list|)
operator|.
name|withCustomRequest
argument_list|(
literal|false
argument_list|)
operator|.
name|withAdvisorRequests
argument_list|(
literal|false
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ret
operator|.
name|isCanUpdate
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setStudentRequest
argument_list|(
name|getRequest
argument_list|(
name|student
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|AdvisorCourseRequestSubmission
name|submitAdvisingDetails
parameter_list|(
name|AdvisingStudentDetails
name|details
parameter_list|,
name|boolean
name|emailStudent
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermissionAnySession
argument_list|(
name|details
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|Right
operator|.
name|AdvisorCourseRequests
argument_list|)
expr_stmt|;
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|details
operator|.
name|getSessionId
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoServerForSession
argument_list|()
argument_list|)
throw|;
name|AdvisorCourseRequestSubmission
name|ret
init|=
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|AdvisorCourseRequestsSubmit
operator|.
name|class
argument_list|)
operator|.
name|withDetails
argument_list|(
name|details
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|emailStudent
operator|&&
name|details
operator|.
name|isCanEmail
argument_list|()
condition|)
block|{
name|StudentEmail
name|email
init|=
name|server
operator|.
name|createAction
argument_list|(
name|StudentEmail
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|details
operator|.
name|getStudentId
argument_list|()
argument_list|)
operator|.
name|overridePermissions
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|.
name|includeAdvisorRequestsPDF
argument_list|()
decl_stmt|;
name|email
operator|.
name|setEmailSubject
argument_list|(
name|MSG
operator|.
name|defaulSubjectAdvisorRequests
argument_list|()
argument_list|)
expr_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
operator|&&
name|user
operator|instanceof
name|Chameleon
condition|)
name|email
operator|.
name|setCC
argument_list|(
operator|(
operator|(
name|Chameleon
operator|)
name|user
operator|)
operator|.
name|getOriginalUserContext
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|user
operator|!=
literal|null
condition|)
name|email
operator|.
name|setCC
argument_list|(
name|user
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|execute
argument_list|(
name|email
argument_list|,
name|currentUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|SessionFactory
name|hibSessionFactory
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionFactory
argument_list|()
decl_stmt|;
name|hibSessionFactory
operator|.
name|getCache
argument_list|()
operator|.
name|evictEntity
argument_list|(
name|Student
operator|.
name|class
argument_list|,
name|details
operator|.
name|getStudentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to evict cache: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
name|getStudentSessions
parameter_list|(
name|String
name|studentExternalId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
name|ArrayList
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|ExternalTermProvider
name|extTerm
init|=
name|getExternalTermProvider
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sessionIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Student where externalUniqueId = :id"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"id"
argument_list|,
name|studentExternalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Session
name|session
init|=
name|student
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|AdvisorCourseRequests
argument_list|)
condition|)
continue|continue;
name|AcademicSessionInfo
name|info
init|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|MSG
operator|.
name|sessionName
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|.
name|setExternalCampus
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalCampus
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setExternalTerm
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalTerm
argument_list|(
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sessionIds
operator|.
name|add
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"from Student s where s.externalUniqueId = :id and s.advisorCourseRequests is not empty"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"id"
argument_list|,
name|studentExternalId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Session
name|session
init|=
name|student
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|isTestSession
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|sessionIds
operator|.
name|contains
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermissionAnySession
argument_list|(
name|session
argument_list|,
name|Right
operator|.
name|AdvisorCourseRequests
argument_list|)
condition|)
continue|continue;
name|AcademicSessionInfo
name|info
init|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|,
name|MSG
operator|.
name|sessionName
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|,
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
argument_list|,
name|session
operator|.
name|getSessionBeginDateTime
argument_list|()
argument_list|)
operator|.
name|setExternalCampus
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalCampus
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setExternalTerm
argument_list|(
name|extTerm
operator|==
literal|null
condition|?
literal|null
else|:
name|extTerm
operator|.
name|getExternalTerm
argument_list|(
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|getAdvisorRequests
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|)
throws|throws
name|SectioningException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
block|{
name|studentId
operator|=
name|getStudentId
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoStudent
argument_list|()
argument_list|)
throw|;
block|}
name|OnlineSectioningServer
name|server
init|=
name|getServerInstance
argument_list|(
name|sessionId
operator|==
literal|null
condition|?
name|canEnroll
argument_list|(
literal|false
argument_list|,
name|studentId
argument_list|)
else|:
name|sessionId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|==
literal|null
condition|)
if|if
condition|(
name|server
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MSG
operator|.
name|exceptionNoAcademicSession
argument_list|()
argument_list|)
throw|;
return|return
name|server
operator|.
name|execute
argument_list|(
name|server
operator|.
name|createAction
argument_list|(
name|AdvisorGetCourseRequests
operator|.
name|class
argument_list|)
operator|.
name|forStudent
argument_list|(
name|studentId
argument_list|)
operator|.
name|checkDemands
argument_list|(
literal|false
argument_list|)
argument_list|,
name|currentUser
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

