begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|LimitAndProjectionSnapshotService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|LimitAndProjectionSnapshotException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|PopulateProjectedDemandSnapshotData
import|;
end_import

begin_comment
comment|/**  * @author Stephanie Schluttenhofer  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"snapshot.gwt"
argument_list|)
specifier|public
class|class
name|LimitAndProjectionSnapshotServlet
implements|implements
name|LimitAndProjectionSnapshotService
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//	private static Logger sLog = Logger.getLogger(LimitAndProjectionSnapshotServlet.class);
specifier|private
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
comment|//	protected static DateTimeFormat sLoadDateFormat = DateTimeFormat.getFormat(CONSTANTS.timeStampFormat());
specifier|private
name|Long
name|getAcademicSessionId
parameter_list|()
throws|throws
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"No academic session is selecgted."
argument_list|)
throw|;
return|return
name|sessionId
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('LimitAndProjectionSnapshotSave')"
argument_list|)
specifier|public
name|Boolean
name|canTakeSnapshot
parameter_list|()
throws|throws
name|LimitAndProjectionSnapshotException
throws|,
name|PageAccessException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getCurrentSnapshotDate
parameter_list|()
throws|throws
name|LimitAndProjectionSnapshotException
throws|,
name|PageAccessException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|session
operator|.
name|getCurrentSnapshotDate
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|takeSnapshot
parameter_list|()
throws|throws
name|LimitAndProjectionSnapshotException
throws|,
name|PageAccessException
block|{
name|Session
name|session
init|=
literal|null
decl_stmt|;
name|Date
name|snapshotDate
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getAcademicSessionId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|session
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|PopulateProjectedDemandSnapshotData
name|ppdsd
init|=
operator|new
name|PopulateProjectedDemandSnapshotData
argument_list|()
decl_stmt|;
name|snapshotDate
operator|=
name|ppdsd
operator|.
name|populateProjectedDemandDataFor
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
return|return
name|snapshotDate
return|;
block|}
block|}
end_class

end_unit

