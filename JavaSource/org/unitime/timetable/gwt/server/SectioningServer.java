begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solution
operator|.
name|Solution
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|solver
operator|.
name|Solver
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DistanceMetric
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|StudentSectioningModel
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|constraint
operator|.
name|SectionLimit
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|extension
operator|.
name|DistanceConflict
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
operator|.
name|BranchBoundNeighbour
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Offering
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|custom
operator|.
name|CustomSectionNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|custom
operator|.
name|SectionLimitProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
operator|.
name|custom
operator|.
name|SectionUrlProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningExceptionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningServer
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SectioningServer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SectioningServer
argument_list|>
name|sInstances
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|SectioningServer
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|CustomSectionNames
name|sCustomSectionNames
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|SectionLimitProvider
name|sSectionLimitProvider
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|SectionUrlProvider
name|sSectionUrlProvider
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|sUpdateLimitsUsingSectionLimitProvider
init|=
literal|false
decl_stmt|;
specifier|private
name|AcademicSessionInfo
name|iAcademicSession
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseInfo
argument_list|>
name|iCourseForId
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|>
name|iCourseForName
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|iCourses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|StudentSectioningModel
name|iModel
init|=
operator|new
name|StudentSectioningModel
argument_list|(
operator|new
name|DataProperties
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|DistanceMetric
name|iDistanceMetric
init|=
literal|null
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
name|iCourseTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Course
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|iClassTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
name|iStudentTable
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CourseLoader
name|iLoader
init|=
literal|null
decl_stmt|;
specifier|private
name|SectioningServerUpdater
name|iUpdater
init|=
literal|null
decl_stmt|;
specifier|private
name|ReentrantReadWriteLock
name|iLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|ReentrantReadWriteLock
name|sGlobalLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|iLastSectionLimit
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.CourseSectionNames"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sCustomSectionNames
operator|=
operator|(
name|CustomSectionNames
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.CourseSectionNames"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to initialize custom section names, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionLimitProvider"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sSectionLimitProvider
operator|=
operator|(
name|SectionLimitProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionLimitProvider"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to initialize section limit provider, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sSectionUrlProvider
operator|=
operator|(
name|SectionUrlProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionUrlProvider"
argument_list|)
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|fatal
argument_list|(
literal|"Unable to initialize section URL provider, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|sUpdateLimitsUsingSectionLimitProvider
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.SectionLimitProvider.updateLimits"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|boolean
name|isEnabled
parameter_list|()
block|{
comment|// if autostart is enabled, just check whether there are some instances already loaded in
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.autostart"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
condition|)
return|return
operator|!
name|sInstances
operator|.
name|isEmpty
argument_list|()
return|;
comment|// quick check for existing instances
if|if
condition|(
operator|!
name|sInstances
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
comment|// otherwise, look for a session that has sectioning enabled
name|String
name|year
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.year"
argument_list|)
decl_stmt|;
name|String
name|term
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.term"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Session
argument_list|>
name|i
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Session
name|session
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|year
operator|!=
literal|null
operator|&&
operator|!
name|year
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicYear
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
operator|!
name|term
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectioningStudents
argument_list|()
condition|)
continue|continue;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isRegistrationEnabled
parameter_list|()
block|{
for|for
control|(
name|Session
name|session
range|:
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectioningStudents
argument_list|()
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canPreRegisterStudents
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|SectioningServer
parameter_list|(
name|Long
name|sessionId
parameter_list|)
throws|throws
name|SectioningException
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SectioningExceptionType
operator|.
name|SESSION_NOT_EXIST
argument_list|,
operator|(
name|sessionId
operator|==
literal|null
condition|?
literal|"null"
else|:
name|sessionId
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
throw|;
name|iAcademicSession
operator|=
operator|new
name|AcademicSessionInfo
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|iLoader
operator|=
operator|new
name|CourseLoader
argument_list|(
name|iModel
argument_list|,
name|iAcademicSession
argument_list|,
name|iCourseTable
argument_list|,
name|iClassTable
argument_list|,
name|iStudentTable
argument_list|,
name|iCourseForId
argument_list|,
name|iCourseForName
argument_list|,
name|iCourses
argument_list|)
expr_stmt|;
name|iUpdater
operator|=
operator|new
name|SectioningServerUpdater
argument_list|(
name|iAcademicSession
argument_list|,
name|StudentSectioningQueue
operator|.
name|getLastTimeStamp
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
argument_list|)
expr_stmt|;
name|iLoader
operator|.
name|updateAll
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
name|iUpdater
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|SectioningException
condition|)
throw|throw
operator|(
name|SectioningException
operator|)
name|t
throw|;
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SectioningExceptionType
operator|.
name|UNKNOWN
argument_list|,
name|t
argument_list|)
throw|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|iDistanceMetric
operator|=
operator|new
name|DistanceMetric
argument_list|(
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|valueOf
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.distance.ellipsoid"
argument_list|,
name|DistanceMetric
operator|.
name|Ellipsoid
operator|.
name|LEGACY
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StudentSectioningModel
name|getModel
parameter_list|()
block|{
return|return
name|iModel
return|;
block|}
specifier|public
name|String
name|getSectionName
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|Section
name|section
parameter_list|)
block|{
if|if
condition|(
name|sCustomSectionNames
operator|!=
literal|null
condition|)
block|{
name|String
name|name
init|=
name|sCustomSectionNames
operator|.
name|getClassSuffix
argument_list|(
name|getAcademicSessionId
argument_list|()
argument_list|,
name|courseId
argument_list|,
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
return|return
name|name
return|;
block|}
return|return
name|section
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|iAcademicSession
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
specifier|public
name|AcademicSessionInfo
name|getAcademicSession
parameter_list|()
block|{
return|return
name|iAcademicSession
return|;
block|}
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|String
name|course
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|String
name|courseName
init|=
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|title
init|=
name|course
operator|.
name|substring
argument_list|(
name|course
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|CourseInfo
name|info
range|:
name|infos
control|)
if|if
condition|(
name|title
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTitle
argument_list|()
argument_list|)
condition|)
return|return
name|info
return|;
return|return
literal|null
return|;
block|}
else|else
block|{
name|TreeSet
argument_list|<
name|CourseInfo
argument_list|>
name|infos
init|=
name|iCourseForName
operator|.
name|get
argument_list|(
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|infos
operator|!=
literal|null
operator|&&
operator|!
name|infos
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|infos
operator|.
name|first
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iCourseForId
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Student
name|getStudent
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|reloadStudent
parameter_list|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
parameter_list|)
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Student
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|iModel
operator|.
name|removeStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|student
operator|=
name|iLoader
operator|.
name|loadStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iLoader
operator|.
name|assignStudent
argument_list|(
name|student
argument_list|,
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Course
name|getCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|CourseInfo
name|getCourseInfo
parameter_list|(
name|String
name|subject
parameter_list|,
name|String
name|courseNbr
parameter_list|)
block|{
return|return
name|getCourseInfo
argument_list|(
name|subject
operator|+
literal|" "
operator|+
name|courseNbr
argument_list|)
return|;
block|}
specifier|public
name|Collection
argument_list|<
name|CourseInfo
argument_list|>
name|findCourses
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|CourseInfo
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseInfo
argument_list|>
argument_list|(
name|limit
operator|==
literal|null
condition|?
literal|100
else|:
name|limit
argument_list|)
decl_stmt|;
name|String
name|queryInLowerCase
init|=
name|query
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseInfo
name|c
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchCourseName
argument_list|(
name|queryInLowerCase
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
return|return
name|ret
return|;
block|}
if|if
condition|(
name|queryInLowerCase
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|CourseInfo
name|c
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|c
operator|.
name|matchTitle
argument_list|(
name|queryInLowerCase
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|==
name|limit
condition|)
return|return
name|ret
return|;
block|}
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|createInstance
parameter_list|(
name|Long
name|academicSessionId
parameter_list|)
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|SectioningServer
name|s
init|=
operator|new
name|SectioningServer
argument_list|(
name|academicSessionId
argument_list|)
decl_stmt|;
name|sInstances
operator|.
name|put
argument_list|(
name|academicSessionId
argument_list|,
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|SectioningServer
operator|.
name|sCustomSectionNames
operator|!=
literal|null
condition|)
name|SectioningServer
operator|.
name|sCustomSectionNames
operator|.
name|update
argument_list|(
name|s
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|SectioningServer
name|getInstance
parameter_list|(
specifier|final
name|Long
name|academicSessionId
parameter_list|)
throws|throws
name|SectioningException
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|sInstances
operator|.
name|get
argument_list|(
name|academicSessionId
argument_list|)
return|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|AcademicSessionInfo
argument_list|>
name|getAcademicSessions
parameter_list|()
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|TreeSet
argument_list|<
name|AcademicSessionInfo
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|AcademicSessionInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SectioningServer
name|s
range|:
name|sInstances
operator|.
name|values
argument_list|()
control|)
name|ret
operator|.
name|add
argument_list|(
name|s
operator|.
name|getAcademicSession
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Course
name|clone
parameter_list|(
name|Course
name|course
parameter_list|,
name|long
name|studentId
parameter_list|,
name|boolean
name|updateFromCache
parameter_list|)
block|{
name|Offering
name|clonedOffering
init|=
operator|new
name|Offering
argument_list|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Course
name|clonedCourse
init|=
operator|new
name|Course
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|,
name|clonedOffering
argument_list|,
name|course
operator|.
name|getLimit
argument_list|()
argument_list|,
name|course
operator|.
name|getProjected
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|Config
name|clonedConfig
init|=
operator|new
name|Config
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|,
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedOffering
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Subpart
argument_list|,
name|Subpart
argument_list|>
name|subparts
init|=
operator|new
name|Hashtable
argument_list|<
name|Subpart
argument_list|,
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Section
argument_list|,
name|Section
argument_list|>
name|sections
init|=
operator|new
name|Hashtable
argument_list|<
name|Section
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|Subpart
name|clonedSubpart
init|=
operator|new
name|Subpart
argument_list|(
name|subpart
operator|.
name|getId
argument_list|()
argument_list|,
name|subpart
operator|.
name|getInstructionalType
argument_list|()
argument_list|,
name|subpart
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedConfig
argument_list|,
operator|(
name|subpart
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|subparts
operator|.
name|get
argument_list|(
name|subpart
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|put
argument_list|(
name|subpart
argument_list|,
name|clonedSubpart
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|section
operator|.
name|getLimit
argument_list|()
operator|-
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|section
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|limit
operator|++
expr_stmt|;
break|break;
block|}
block|}
name|Section
name|clonedSection
init|=
operator|new
name|Section
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|limit
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|,
name|clonedSubpart
argument_list|,
name|section
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorIds
argument_list|()
argument_list|,
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
argument_list|,
operator|(
name|section
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|sections
operator|.
name|get
argument_list|(
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|clonedSection
operator|.
name|setSpaceExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setSpaceHeld
argument_list|(
name|section
operator|.
name|getSpaceHeld
argument_list|()
argument_list|)
expr_stmt|;
name|clonedSection
operator|.
name|setPenalty
argument_list|(
name|section
operator|.
name|getOnlineSectioningPenalty
argument_list|()
argument_list|)
expr_stmt|;
name|sections
operator|.
name|put
argument_list|(
name|section
argument_list|,
name|clonedSection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sUpdateLimitsUsingSectionLimitProvider
condition|)
name|updateLimits
argument_list|(
name|clonedCourse
argument_list|,
name|updateFromCache
argument_list|)
expr_stmt|;
return|return
name|clonedCourse
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|void
name|updateLimits
parameter_list|(
name|Course
name|course
parameter_list|,
name|boolean
name|updateFromCache
parameter_list|)
block|{
if|if
condition|(
name|sSectionLimitProvider
operator|==
literal|null
condition|)
return|return;
name|ArrayList
argument_list|<
name|Long
argument_list|>
name|classIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|classNames
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
name|classes
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Section
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|classIds
operator|.
name|add
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|classNames
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|classes
operator|.
name|put
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|CustomSectionNames
name|x
init|=
operator|new
name|CustomSectionNames
argument_list|()
block|{
specifier|public
name|void
name|update
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
block|}
specifier|public
name|String
name|getClassSuffix
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|courseId
parameter_list|,
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|sCustomSectionNames
operator|!=
literal|null
condition|)
block|{
name|String
name|ret
init|=
name|sCustomSectionNames
operator|.
name|getClassSuffix
argument_list|(
name|sessionId
argument_list|,
name|courseId
argument_list|,
name|classId
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
return|return
name|ret
return|;
block|}
return|return
name|classNames
operator|.
name|get
argument_list|(
name|classId
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|limits
init|=
operator|(
name|updateFromCache
condition|?
name|SectioningServer
operator|.
name|sSectionLimitProvider
operator|.
name|getSectionLimitsFromCache
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|classIds
argument_list|,
name|x
argument_list|)
else|:
name|SectioningServer
operator|.
name|sSectionLimitProvider
operator|.
name|getSectionLimits
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|classIds
argument_list|,
name|x
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|int
index|[]
argument_list|>
name|entry
range|:
name|limits
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|classes
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setLimit
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
operator|-
name|entry
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|iLastSectionLimit
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|URL
name|getSectionUrl
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|Section
name|section
parameter_list|)
throws|throws
name|SectioningException
block|{
if|if
condition|(
name|SectioningServer
operator|.
name|sSectionUrlProvider
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|SectioningServer
operator|.
name|sSectionUrlProvider
operator|.
name|getSectionUrl
argument_list|(
name|getAcademicSession
argument_list|()
argument_list|,
name|courseId
argument_list|,
name|section
operator|.
name|getId
argument_list|()
argument_list|,
name|getSectionName
argument_list|(
name|courseId
argument_list|,
name|section
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|int
index|[]
name|getLimit
parameter_list|(
name|Section
name|section
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
if|if
condition|(
name|sUpdateLimitsUsingSectionLimitProvider
condition|)
block|{
name|int
index|[]
name|limit
init|=
name|iLastSectionLimit
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
return|return
name|limit
return|;
block|}
name|Section
name|original
init|=
name|iClassTable
operator|.
name|get
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|actual
init|=
name|original
operator|.
name|getEnrollments
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|studentId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|i
init|=
name|original
operator|.
name|getEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrollment
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|actual
operator|--
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
operator|new
name|int
index|[]
block|{
name|actual
block|,
name|original
operator|.
name|getLimit
argument_list|()
block|}
return|;
block|}
specifier|private
name|void
name|addRequest
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Student
name|student
parameter_list|,
name|CourseRequestInterface
operator|.
name|Request
name|request
parameter_list|,
name|boolean
name|alternative
parameter_list|,
name|boolean
name|updateFromCache
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|request
operator|.
name|hasRequestedFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|freeTime
range|:
name|request
operator|.
name|getRequestedFreeTime
argument_list|()
control|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|freeTime
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
condition|)
name|dayCode
operator||=
name|d
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|TimeLocation
name|freeTimeLoc
init|=
operator|new
name|TimeLocation
argument_list|(
name|dayCode
argument_list|,
name|freeTime
operator|.
name|getStart
argument_list|()
argument_list|,
name|freeTime
operator|.
name|getLength
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1l
argument_list|,
literal|""
argument_list|,
name|iAcademicSession
operator|.
name|getFreeTimePattern
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
operator|new
name|FreeTimeRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|freeTimeLoc
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|request
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|CourseInfo
name|courseInfo
init|=
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
decl_stmt|;
name|Course
name|course
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseInfo
operator|!=
literal|null
condition|)
name|course
operator|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseInfo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|!=
literal|null
condition|)
block|{
name|Vector
argument_list|<
name|Course
argument_list|>
name|cr
init|=
operator|new
name|Vector
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|course
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|updateFromCache
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasFirstAlternative
argument_list|()
condition|)
block|{
name|CourseInfo
name|ci
init|=
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|Course
name|x
init|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|x
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|updateFromCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|request
operator|.
name|hasSecondAlternative
argument_list|()
condition|)
block|{
name|CourseInfo
name|ci
init|=
name|getCourseInfo
argument_list|(
name|request
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ci
operator|!=
literal|null
condition|)
block|{
name|Course
name|x
init|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|ci
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
name|cr
operator|.
name|add
argument_list|(
name|clone
argument_list|(
name|x
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
name|updateFromCache
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
operator|new
name|CourseRequest
argument_list|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|alternative
argument_list|,
name|student
argument_list|,
name|cr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|checkCourses
parameter_list|(
name|CourseRequestInterface
name|req
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notFound
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|req
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|cr
operator|.
name|hasRequestedFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasFirstAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasSecondAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|cr
range|:
name|req
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|cr
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getRequestedCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasFirstAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getFirstAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|hasSecondAlternative
argument_list|()
operator|&&
name|getCourseInfo
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
name|notFound
operator|.
name|add
argument_list|(
name|cr
operator|.
name|getSecondAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|notFound
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getSavedClasses
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|studentId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Set
argument_list|<
name|Long
argument_list|>
name|ret
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|r
operator|instanceof
name|CourseRequest
operator|)
operator|||
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
operator|(
operator|(
name|Enrollment
operator|)
name|r
operator|.
name|getInitialAssignment
argument_list|()
operator|)
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|ret
operator|.
name|add
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ClassAssignmentInterface
name|convert
parameter_list|(
name|Enrollment
index|[]
name|enrollments
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
parameter_list|,
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|boolean
name|computeOverlaps
parameter_list|,
name|DistanceConflict
name|dc
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|savedClasses
parameter_list|)
throws|throws
name|SectioningException
block|{
name|ClassAssignmentInterface
name|ret
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|int
name|nrUnassignedCourses
init|=
literal|0
decl_stmt|;
name|int
name|nrAssignedAlt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|enrollment
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|nrAssignedAlt
operator|>=
name|nrUnassignedCourses
operator|&&
operator|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
continue|continue;
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|enrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|computeOverlaps
condition|)
block|{
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
name|overlap
init|=
operator|new
name|TreeSet
argument_list|<
name|Enrollment
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
return|return
name|e1
operator|.
name|getRequest
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
name|overlapingSections
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Enrollment
argument_list|>
name|avEnrls
init|=
name|r
operator|.
name|getAvaiableEnrollmentsSkipSameTime
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Enrollment
argument_list|>
name|e
init|=
name|avEnrls
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Enrollment
name|enrl
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|overlaps
label|:
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|isOverlapping
argument_list|(
name|enrl
operator|.
name|getAssignments
argument_list|()
argument_list|)
condition|)
block|{
name|overlap
operator|.
name|add
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|ss
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|==
literal|null
condition|)
block|{
name|ss
operator|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|overlapingSections
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|ss
argument_list|)
expr_stmt|;
block|}
name|ss
operator|.
name|add
argument_list|(
operator|(
name|Section
operator|)
name|a
argument_list|)
expr_stmt|;
block|}
break|break
name|overlaps
break|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Enrollment
name|q
range|:
name|overlap
control|)
block|{
if|if
condition|(
name|q
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|f
init|=
operator|(
name|FreeTimeRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
literal|"Free Time "
operator|+
name|DayCode
operator|.
name|toString
argument_list|(
name|f
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|f
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|f
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|q
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Course
name|o
init|=
name|q
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|q
operator|.
name|getStudent
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|ov
init|=
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
decl_stmt|;
if|if
condition|(
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|overlapingSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ov
operator|+=
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|ov
operator|+=
literal|","
expr_stmt|;
block|}
name|ca
operator|.
name|addOverlap
argument_list|(
name|ov
argument_list|)
expr_stmt|;
block|}
block|}
name|nrUnassignedCourses
operator|++
expr_stmt|;
name|int
name|alt
init|=
name|nrUnassignedCourses
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|.
name|isAlternative
argument_list|()
operator|&&
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
if|if
condition|(
operator|--
name|alt
operator|==
literal|0
condition|)
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|x
operator|.
name|getStudent
argument_list|()
argument_list|)
decl_stmt|;
name|ca
operator|.
name|setInstead
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|avEnrls
operator|.
name|isEmpty
argument_list|()
condition|)
name|ca
operator|.
name|setNotAvailable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|computeOverlaps
condition|)
block|{
name|overlaps
label|:
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|x
operator|==
name|enrollment
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Assignment
argument_list|>
name|i
init|=
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Assignment
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|isOverlapping
argument_list|(
name|a
argument_list|)
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|FreeTimeRequest
condition|)
block|{
name|FreeTimeRequest
name|f
init|=
operator|(
name|FreeTimeRequest
operator|)
name|x
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
literal|"Free Time "
operator|+
name|DayCode
operator|.
name|toString
argument_list|(
name|f
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|f
operator|.
name|getTime
argument_list|()
operator|.
name|getStartTimeHeader
argument_list|()
operator|+
literal|" - "
operator|+
name|f
operator|.
name|getTime
argument_list|()
operator|.
name|getEndTimeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Course
name|o
init|=
name|x
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|x
operator|.
name|getStudent
argument_list|()
argument_list|)
decl_stmt|;
name|Section
name|s
init|=
operator|(
name|Section
operator|)
name|a
decl_stmt|;
name|ca
operator|.
name|addOverlap
argument_list|(
name|o
operator|.
name|getSubjectArea
argument_list|()
operator|+
literal|" "
operator|+
name|o
operator|.
name|getCourseNumber
argument_list|()
operator|+
literal|" "
operator|+
name|s
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break
name|overlaps
break|;
block|}
block|}
block|}
block|}
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|r
init|=
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|requiredSectionsForCourse
operator|!=
literal|null
condition|)
name|requiredSections
operator|=
name|requiredSectionsForCourse
operator|.
name|get
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|isAlternative
argument_list|()
operator|&&
name|r
operator|.
name|isAssigned
argument_list|()
condition|)
name|nrAssignedAlt
operator|++
expr_stmt|;
name|TreeSet
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|TreeSet
argument_list|<
name|Section
argument_list|>
argument_list|(
operator|new
name|EnrollmentSectionComparator
argument_list|()
argument_list|)
decl_stmt|;
name|sections
operator|.
name|addAll
argument_list|(
name|enrollment
operator|.
name|getSections
argument_list|()
argument_list|)
expr_stmt|;
name|Course
name|course
init|=
name|enrollment
operator|.
name|getOffering
argument_list|()
operator|.
name|getCourse
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
argument_list|)
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setSubject
argument_list|(
name|course
operator|.
name|getSubjectArea
argument_list|()
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseNbr
argument_list|(
name|course
operator|.
name|getCourseNumber
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|hasAlt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|i
init|=
operator|(
operator|(
name|Config
operator|)
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getSections
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|hasAlt
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|i
init|=
name|sections
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
operator|(
name|Section
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|getSectionName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
name|getLimit
argument_list|(
name|section
argument_list|,
name|r
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|section
operator|.
name|getRooms
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|e
init|=
name|section
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomLocation
name|rm
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
index|[]
name|instructors
init|=
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|getInstructorNames
argument_list|()
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|instructor
range|:
name|instructors
control|)
block|{
name|String
index|[]
name|nameEmail
init|=
name|instructor
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|nameEmail
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|nameEmail
operator|.
name|length
operator|<
literal|2
condition|?
literal|""
else|:
name|nameEmail
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|section
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|getSectionName
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|,
name|section
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredSections
operator|!=
literal|null
operator|&&
name|requiredSections
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|a
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|section
operator|.
name|getSubpart
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHasAlternatives
argument_list|(
name|hasAlt
argument_list|)
expr_stmt|;
name|int
name|dist
init|=
literal|0
decl_stmt|;
name|String
name|from
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Enrollment
name|x
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|x
operator|==
literal|null
operator|||
operator|!
name|x
operator|.
name|isCourseRequest
argument_list|()
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|x
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|x
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|s
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
name|section
operator|||
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|int
name|d
init|=
name|distance
argument_list|(
name|s
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|>
name|dist
condition|)
block|{
name|dist
operator|=
name|d
expr_stmt|;
name|from
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomLocation
argument_list|>
name|k
init|=
name|s
operator|.
name|getRooms
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|from
operator|+=
name|k
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|k
operator|.
name|hasNext
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>
name|s
operator|.
name|getTime
argument_list|()
operator|.
name|getBreakTime
argument_list|()
condition|)
block|{
name|a
operator|.
name|setDistanceConflict
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|a
operator|.
name|setBackToBackDistance
argument_list|(
name|dist
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBackToBackRooms
argument_list|(
name|from
argument_list|)
expr_stmt|;
comment|// if (dist> 0.0) a.setDistanceConflict(true);
if|if
condition|(
name|savedClasses
operator|!=
literal|null
operator|&&
name|savedClasses
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|a
operator|.
name|setSaved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|iCourseForId
operator|.
name|get
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setExpected
argument_list|(
name|section
operator|.
name|getSpaceExpected
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|r
init|=
operator|(
name|FreeTimeRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|ca
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|()
decl_stmt|;
name|ca
operator|.
name|setAssigned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ca
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
name|ca
operator|.
name|addClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setAlternative
argument_list|(
name|r
operator|.
name|isAlternative
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|r
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|requiredFreeTimes
operator|!=
literal|null
operator|&&
name|requiredFreeTimes
operator|.
name|contains
argument_list|(
name|r
argument_list|)
condition|)
name|a
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|ca
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|distance
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
operator|||
name|s2
operator|.
name|getPlacement
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|TimeLocation
name|t1
init|=
name|s1
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|TimeLocation
name|t2
init|=
name|s2
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|t1
operator|.
name|shareDays
argument_list|(
name|t2
argument_list|)
operator|||
operator|!
name|t1
operator|.
name|shareWeeks
argument_list|(
name|t2
argument_list|)
condition|)
return|return
literal|0
return|;
name|int
name|a1
init|=
name|t1
operator|.
name|getStartSlot
argument_list|()
decl_stmt|,
name|a2
init|=
name|t2
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
name|a1
operator|+
name|t1
operator|.
name|getNrSlotsPerMeeting
argument_list|()
operator|==
name|a2
condition|)
block|{
return|return
name|Placement
operator|.
name|getDistanceInMinutes
argument_list|(
name|iDistanceMetric
argument_list|,
name|s1
operator|.
name|getPlacement
argument_list|()
argument_list|,
name|s2
operator|.
name|getPlacement
argument_list|()
argument_list|)
return|;
block|}
comment|/*         else if (a2+t2.getNrSlotsPerMeeting()==a1) {         	return Placement.getDistance(s1.getPlacement(), s2.getPlacement());         }         */
return|return
literal|0
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ClassAssignmentInterface
name|convert
parameter_list|(
name|StudentSectioningModel
name|model
parameter_list|,
name|Student
name|student
parameter_list|,
name|BranchBoundNeighbour
name|neighbour
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
parameter_list|,
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|savedClasses
parameter_list|)
throws|throws
name|SectioningException
block|{
name|Enrollment
index|[]
name|enrollments
init|=
name|neighbour
operator|.
name|getAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
operator|==
literal|null
operator|||
name|enrollments
operator|.
name|length
operator|==
literal|0
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SectioningExceptionType
operator|.
name|NO_SOLUTION
argument_list|)
throw|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|Request
name|r
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollments
index|[
name|idx
index|]
operator|==
literal|null
condition|)
block|{
name|Config
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
name|c
operator|=
operator|(
name|Config
operator|)
operator|(
operator|(
name|Course
operator|)
operator|(
operator|(
name|CourseRequest
operator|)
name|r
operator|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|enrollments
index|[
name|idx
index|]
operator|=
operator|new
name|Enrollment
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|convert
argument_list|(
name|enrollments
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
literal|true
argument_list|,
name|model
operator|.
name|getDistanceConflict
argument_list|()
argument_list|,
name|savedClasses
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|ClassAssignmentInterface
name|section
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|)
throws|throws
name|SectioningException
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|StudentSectioningModel
name|model
init|=
operator|new
name|StudentSectioningModel
argument_list|(
operator|new
name|DataProperties
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
literal|"net.sf.cpsolver.studentsct.extension.DistanceConflict"
argument_list|)
expr_stmt|;
name|model
operator|.
name|addGlobalConstraint
argument_list|(
operator|new
name|SectionLimit
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
name|addRequest
argument_list|(
name|model
argument_list|,
name|student
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SectioningExceptionType
operator|.
name|EMPTY_COURSE_REQUEST
argument_list|)
throw|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
name|addRequest
argument_list|(
name|model
argument_list|,
name|student
argument_list|,
name|c
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
init|=
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|preferredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|a
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|currentAssignment
control|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|a
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
operator|||
name|section
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|)
block|{
continue|continue
name|a
continue|;
block|}
if|if
condition|(
name|a
operator|.
name|isPinned
argument_list|()
condition|)
name|requiredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|preferredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|preferredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|preferredSections
argument_list|)
expr_stmt|;
name|requiredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|requiredSections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|currentAssignment
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|a
operator|.
name|isPinned
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|a
operator|.
name|getStart
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
name|a
operator|.
name|getLength
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|a
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
condition|)
name|requiredFreeTimes
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Solution
name|solution
init|=
operator|new
name|Solution
argument_list|(
name|model
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Solver
name|solver
init|=
operator|new
name|Solver
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
name|solver
operator|.
name|setInitalSolution
argument_list|(
name|solution
argument_list|)
expr_stmt|;
name|solver
operator|.
name|initSolver
argument_list|()
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SuggestionSelection
name|onlineSelection
init|=
operator|new
name|SuggestionSelection
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|preferredSectionsForCourse
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|)
decl_stmt|;
name|onlineSelection
operator|.
name|init
argument_list|(
name|solver
argument_list|)
expr_stmt|;
name|BranchBoundSelection
operator|.
name|Selection
name|selection
init|=
name|onlineSelection
operator|.
name|getSelection
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|BranchBoundNeighbour
name|neighbour
init|=
name|selection
operator|.
name|select
argument_list|()
decl_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|neighbour
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SectioningExceptionType
operator|.
name|NO_SOLUTION
argument_list|)
throw|;
name|ClassAssignmentInterface
name|ret
init|=
name|convert
argument_list|(
name|model
argument_list|,
name|student
argument_list|,
name|neighbour
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
name|getSavedClasses
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|t4
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Sectioning took "
operator|+
operator|(
name|t4
operator|-
name|t0
operator|)
operator|+
literal|"ms (model "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|"ms, solver init "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|"ms, sectioning "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|"ms, conversion "
operator|+
operator|(
name|t4
operator|-
name|t3
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|Section
argument_list|>
name|getSections
parameter_list|(
name|CourseInfo
name|courseInfo
parameter_list|)
throws|throws
name|SectioningException
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ArrayList
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseInfo
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
name|sections
return|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|cfg
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|cfg
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sections
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|List
argument_list|<
name|Section
argument_list|>
name|getSections
parameter_list|(
name|String
name|courseName
parameter_list|)
throws|throws
name|SectioningException
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|ArrayList
argument_list|<
name|Section
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|Course
name|course
init|=
name|iCourseTable
operator|.
name|get
argument_list|(
name|courseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
name|sections
return|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|e
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|cfg
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|f
init|=
name|cfg
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|g
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|sections
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|computeSuggestions
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|currentAssignment
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|selectedAssignment
parameter_list|)
throws|throws
name|SectioningException
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|StudentSectioningModel
name|model
init|=
operator|new
name|StudentSectioningModel
argument_list|(
operator|new
name|DataProperties
argument_list|(
name|ApplicationProperties
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Neighbour.BranchAndBoundTimeout"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|model
operator|.
name|getProperties
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"Extensions.Classes"
argument_list|,
literal|"net.sf.cpsolver.studentsct.extension.DistanceConflict"
argument_list|)
expr_stmt|;
name|model
operator|.
name|addGlobalConstraint
argument_list|(
operator|new
name|SectionLimit
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Student
name|student
init|=
operator|new
name|Student
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
name|addRequest
argument_list|(
name|model
argument_list|,
name|student
argument_list|,
name|c
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|SectioningExceptionType
operator|.
name|EMPTY_COURSE_REQUEST
argument_list|)
throw|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|c
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
name|addRequest
argument_list|(
name|model
argument_list|,
name|student
argument_list|,
name|c
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|model
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|model
operator|.
name|setDistanceConflict
argument_list|(
operator|new
name|DistanceConflict
argument_list|(
literal|null
argument_list|,
name|model
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSectionsForCourse
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
init|=
operator|new
name|HashSet
argument_list|<
name|FreeTimeRequest
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
decl_stmt|;
name|ClassAssignmentInterface
name|messages
init|=
operator|new
name|ClassAssignmentInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|messages
argument_list|)
expr_stmt|;
name|Request
name|selectedRequest
init|=
literal|null
decl_stmt|;
name|Section
name|selectedSection
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|CourseRequest
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
operator|!
name|selectedAssignment
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|getCourse
argument_list|(
name|selectedAssignment
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|selectedRequest
operator|=
name|r
expr_stmt|;
if|if
condition|(
name|selectedAssignment
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|selectedAssignment
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
condition|)
name|selectedSection
operator|=
name|section
expr_stmt|;
block|}
block|}
name|HashSet
argument_list|<
name|Section
argument_list|>
name|preferredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|Section
argument_list|>
name|requiredSections
init|=
operator|new
name|HashSet
argument_list|<
name|Section
argument_list|>
argument_list|()
decl_stmt|;
name|a
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|currentAssignment
control|)
block|{
if|if
condition|(
operator|!
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|cr
operator|.
name|getCourse
argument_list|(
name|a
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|!=
literal|null
operator|&&
name|a
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Section
name|section
init|=
name|cr
operator|.
name|getSection
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|null
operator|||
name|section
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
condition|)
block|{
name|messages
operator|.
name|addMessage
argument_list|(
operator|(
name|a
operator|.
name|isPinned
argument_list|()
condition|?
literal|"Required class"
else|:
literal|"Previously selected class"
operator|)
operator|+
name|a
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|a
operator|.
name|getSection
argument_list|()
operator|+
literal|" is no longer available."
argument_list|)
expr_stmt|;
continue|continue
name|a
continue|;
block|}
if|if
condition|(
name|a
operator|.
name|isPinned
argument_list|()
condition|)
name|requiredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|preferredSections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|add
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|preferredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|preferredSections
argument_list|)
expr_stmt|;
name|requiredSectionsForCourse
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|requiredSections
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|FreeTimeRequest
name|ft
init|=
operator|(
name|FreeTimeRequest
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|selectedAssignment
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|selectedAssignment
operator|.
name|getStart
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
name|selectedAssignment
operator|.
name|getLength
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|selectedAssignment
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
condition|)
name|selectedRequest
operator|=
name|r
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
range|:
name|currentAssignment
control|)
block|{
if|if
condition|(
name|a
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|a
operator|.
name|isPinned
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
operator|==
name|a
operator|.
name|getStart
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getLength
argument_list|()
operator|==
name|a
operator|.
name|getLength
argument_list|()
operator|&&
name|ft
operator|.
name|getTime
argument_list|()
operator|.
name|getDayCode
argument_list|()
operator|==
name|DayCode
operator|.
name|toInt
argument_list|(
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|a
operator|.
name|getDays
argument_list|()
argument_list|)
argument_list|)
condition|)
name|requiredFreeTimes
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|new
name|Solution
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|long
name|t2
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SuggestionsBranchAndBound
name|suggestionBaB
init|=
operator|new
name|SuggestionsBranchAndBound
argument_list|(
name|model
operator|.
name|getProperties
argument_list|()
argument_list|,
name|student
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
name|preferredSectionsForCourse
argument_list|,
name|selectedRequest
argument_list|,
name|selectedSection
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|SuggestionsBranchAndBound
operator|.
name|Suggestion
argument_list|>
name|suggestions
init|=
name|suggestionBaB
operator|.
name|computeSuggestions
argument_list|()
decl_stmt|;
name|long
name|t3
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"  -- suggestion B&B took "
operator|+
name|suggestionBaB
operator|.
name|getTime
argument_list|()
operator|+
literal|"ms"
operator|+
operator|(
name|suggestionBaB
operator|.
name|isTimeoutReached
argument_list|()
condition|?
literal|", timeout reached"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|savedClasses
init|=
name|getSavedClasses
argument_list|(
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SuggestionsBranchAndBound
operator|.
name|Suggestion
name|suggestion
range|:
name|suggestions
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|convert
argument_list|(
name|suggestion
operator|.
name|getEnrollments
argument_list|()
argument_list|,
name|requiredSectionsForCourse
argument_list|,
name|requiredFreeTimes
argument_list|,
literal|false
argument_list|,
name|model
operator|.
name|getDistanceConflict
argument_list|()
argument_list|,
name|savedClasses
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|long
name|t4
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"Sectioning took "
operator|+
operator|(
name|t4
operator|-
name|t0
operator|)
operator|+
literal|"ms (model "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|"ms, solver init "
operator|+
operator|(
name|t2
operator|-
name|t1
operator|)
operator|+
literal|"ms, sectioning "
operator|+
operator|(
name|t3
operator|-
name|t2
operator|)
operator|+
literal|"ms, conversion "
operator|+
operator|(
name|t4
operator|-
name|t3
operator|)
operator|+
literal|"ms)"
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
class|class
name|EnrollmentSectionComparator
implements|implements
name|Comparator
argument_list|<
name|Section
argument_list|>
block|{
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Section
name|s1
parameter_list|,
name|Section
name|s2
parameter_list|)
block|{
name|Section
name|p1
init|=
name|s1
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|p1
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|s2
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|isParent
argument_list|(
name|p1
argument_list|,
name|s2
argument_list|)
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Section
name|a
parameter_list|,
name|Section
name|b
parameter_list|)
block|{
if|if
condition|(
name|isParent
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|isParent
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|a
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getInstructionalType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|b
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Section
name|getSection
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|iClassTable
operator|.
name|get
argument_list|(
name|classId
argument_list|)
return|;
block|}
finally|finally
block|{
name|iLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|studentChanged
parameter_list|(
name|Collection
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.load"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
return|return;
name|sLog
operator|.
name|info
argument_list|(
name|studentIds
operator|.
name|size
argument_list|()
operator|+
literal|" student schedules changed."
argument_list|)
expr_stmt|;
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Long
name|studentId
range|:
name|studentIds
control|)
block|{
comment|// Unload student
name|Student
name|student
init|=
name|iStudentTable
operator|.
name|get
argument_list|(
name|studentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|iStudentTable
operator|.
name|remove
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|iModel
operator|.
name|removeStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
comment|// Load student
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|s
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|studentId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|student
operator|=
name|iLoader
operator|.
name|loadStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|iModel
operator|.
name|addStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|iLoader
operator|.
name|assignStudent
argument_list|(
name|student
argument_list|,
name|s
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|classChanged
parameter_list|(
name|Collection
argument_list|<
name|Long
argument_list|>
name|classIds
parameter_list|)
block|{
name|sLog
operator|.
name|info
argument_list|(
name|classIds
operator|.
name|size
argument_list|()
operator|+
literal|" class assignments changed."
argument_list|)
expr_stmt|;
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Long
name|classId
range|:
name|classIds
control|)
block|{
name|Section
name|section
init|=
name|iClassTable
operator|.
name|get
argument_list|(
name|classId
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|classId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|section
operator|!=
literal|null
operator|&&
name|clazz
operator|!=
literal|null
condition|)
block|{
comment|// class updated
name|sLog
operator|.
name|info
argument_list|(
literal|"Reloading "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
name|a
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|a
operator|==
literal|null
condition|?
literal|null
else|:
name|a
operator|.
name|getPlacement
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|iLoader
operator|.
name|datePatternName
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
argument_list|)
argument_list|,
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getWeekCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|section
operator|.
name|setPlacement
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- placement: "
operator|+
name|p
argument_list|)
expr_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|p
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
name|Math
operator|.
name|round
argument_list|(
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
operator|*
name|p
operator|.
name|getRoomSize
argument_list|()
argument_list|)
decl_stmt|;
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|section
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- limit: "
operator|+
name|limit
argument_list|)
expr_stmt|;
name|String
name|instructorIds
init|=
literal|""
decl_stmt|;
name|String
name|instructorNames
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|k
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|ci
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ci
operator|.
name|isLead
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|instructorIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructorIds
operator|+=
literal|":"
expr_stmt|;
name|instructorNames
operator|+=
literal|":"
expr_stmt|;
block|}
name|instructorIds
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|instructorNames
operator|+=
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
operator|+
literal|"|"
operator|+
operator|(
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ci
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|)
expr_stmt|;
block|}
name|section
operator|.
name|getChoice
argument_list|()
operator|.
name|setInstructor
argument_list|(
name|instructorIds
argument_list|,
name|instructorNames
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|info
argument_list|(
literal|"  -- instructor: "
operator|+
name|instructorNames
argument_list|)
expr_stmt|;
name|section
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|()
else|:
name|clazz
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|section
operator|!=
literal|null
operator|&&
name|clazz
operator|==
literal|null
condition|)
block|{
comment|// class deleted -> unassign all enrollments, delete section
name|sLog
operator|.
name|info
argument_list|(
literal|"Removing "
operator|+
name|section
operator|.
name|getLongName
argument_list|()
argument_list|)
expr_stmt|;
name|iClassTable
operator|.
name|remove
argument_list|(
name|classId
argument_list|)
expr_stmt|;
for|for
control|(
name|Enrollment
name|enrollment
range|:
name|section
operator|.
name|getEnrollments
argument_list|()
control|)
name|enrollment
operator|.
name|getRequest
argument_list|()
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Subpart
name|subpart
init|=
name|section
operator|.
name|getSubpart
argument_list|()
decl_stmt|;
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|remove
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Config
name|config
init|=
name|subpart
operator|.
name|getConfig
argument_list|()
decl_stmt|;
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|remove
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|config
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|remove
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// class added
comment|//TODO: Adding classes is not supported at the moment
name|sLog
operator|.
name|warn
argument_list|(
literal|"Adding "
operator|+
name|clazz
operator|.
name|getClassLabel
argument_list|()
operator|+
literal|" not implemented"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|allStudentsChanged
parameter_list|()
block|{
if|if
condition|(
operator|!
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.enrollment.load"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
condition|)
return|return;
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Student
name|student
range|:
name|iStudentTable
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Request
argument_list|>
name|e
init|=
name|student
operator|.
name|getRequests
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getAssignment
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|unassign
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|iModel
operator|.
name|removeStudent
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
name|iStudentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
argument_list|>
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Student s "
operator|+
literal|"left join fetch s.courseDemands as cd "
operator|+
literal|"left join fetch cd.courseRequests as cr "
operator|+
literal|"left join fetch s.classEnrollments as e "
operator|+
literal|"where s.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|iAcademicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
name|student
range|:
name|students
control|)
block|{
name|Student
name|s
init|=
name|iLoader
operator|.
name|loadStudent
argument_list|(
name|student
argument_list|)
decl_stmt|;
name|iModel
operator|.
name|addStudent
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|iLoader
operator|.
name|assignStudent
argument_list|(
name|s
argument_list|,
name|student
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|iLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unload
parameter_list|()
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|iUpdater
operator|.
name|stopUpdating
argument_list|()
expr_stmt|;
name|sInstances
operator|.
name|remove
argument_list|(
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|unloadAll
parameter_list|()
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|SectioningServer
name|s
range|:
name|sInstances
operator|.
name|values
argument_list|()
control|)
name|s
operator|.
name|iUpdater
operator|.
name|stopUpdating
argument_list|()
expr_stmt|;
name|sInstances
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sGlobalLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|ReadWriteLock
name|getLock
parameter_list|()
block|{
return|return
name|iLock
return|;
block|}
block|}
end_class

end_unit

