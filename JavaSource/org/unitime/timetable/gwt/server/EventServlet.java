begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
operator|.
name|PersonalizedExamReportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|EventService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|IdValueInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|MeetingInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|WeekInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|NonUniversityLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Room
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SubjectArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ClassEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamEventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|server
operator|.
name|rpc
operator|.
name|RemoteServiceServlet
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EventServlet
extends|extends
name|RemoteServiceServlet
implements|implements
name|EventService
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|7949018510304934636L
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|EventServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
block|}
specifier|public
name|Session
name|findSession
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|session
parameter_list|)
throws|throws
name|EventException
block|{
try|try
block|{
name|Session
name|ret
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|session
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|List
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Session s where "
operator|+
literal|"s.academicTerm || s.academicYear = :term or "
operator|+
literal|"s.academicTerm || s.academicYear || s.academicInitiative = :term"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"term"
argument_list|,
name|session
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|sessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
if|if
condition|(
literal|"current"
operator|.
name|equalsIgnoreCase
argument_list|(
name|session
argument_list|)
condition|)
block|{
name|sessions
operator|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Session s where "
operator|+
literal|"s.eventBeginDate<= :today and s.eventEndDate>= :today"
argument_list|)
operator|.
name|setDate
argument_list|(
literal|"today"
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|sessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Academic session "
operator|+
name|session
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
specifier|private
name|void
name|fillInSessionInfo
parameter_list|(
name|ResourceInterface
name|resource
parameter_list|,
name|Session
name|session
parameter_list|)
block|{
name|resource
operator|.
name|setSessionId
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSessionAbbv
argument_list|(
name|session
operator|.
name|getAcademicTerm
argument_list|()
operator|+
name|session
operator|.
name|getAcademicYear
argument_list|()
operator|+
name|session
operator|.
name|getAcademicInitiative
argument_list|()
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setSessionName
argument_list|(
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|session
operator|.
name|getEventBeginDate
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
operator|!=
name|Calendar
operator|.
name|MONDAY
condition|)
block|{
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|sessionYear
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
name|DateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
decl_stmt|;
while|while
condition|(
name|c
operator|.
name|getTime
argument_list|()
operator|.
name|before
argument_list|(
name|session
operator|.
name|getEventEndDate
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|dayOfYear
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|-=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|sessionYear
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|+=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
name|WeekInterface
name|week
init|=
operator|new
name|WeekInterface
argument_list|()
decl_stmt|;
name|week
operator|.
name|setDayOfYear
argument_list|(
name|dayOfYear
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|week
operator|.
name|addDayName
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|resource
operator|.
name|addWeek
argument_list|(
name|week
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fillInCalendarUrl
parameter_list|(
name|ResourceInterface
name|resource
parameter_list|)
block|{
name|resource
operator|.
name|setCalendar
argument_list|(
name|CalendarServlet
operator|.
name|encode
argument_list|(
literal|"sid="
operator|+
name|resource
operator|.
name|getSessionId
argument_list|()
operator|+
literal|"&type="
operator|+
name|resource
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"&id="
operator|+
name|resource
operator|.
name|getId
argument_list|()
operator|+
operator|(
name|resource
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"&ext="
operator|+
name|resource
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
comment|/* 		switch (resource.getType()) { 		case PERSON: 			resource.setCalendar(CalendarServlet.encode("sid=" + resource.getSessionId() + "&uid=" + resource.getExternalId())); 			break; 		default: 			resource.setCalendar(CalendarServlet.encode("sid=" + resource.getSessionId() + "&type=" + resource.getType().toString().toLowerCase() + "&id=" + resource.getId())); 		} 		*/
block|}
annotation|@
name|Override
specifier|public
name|ResourceInterface
name|findResource
parameter_list|(
name|String
name|session
parameter_list|,
name|ResourceType
name|type
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|EventException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|academicSession
init|=
literal|null
decl_stmt|;
name|MenuServlet
operator|.
name|UserInfo
name|userInfo
init|=
operator|new
name|MenuServlet
operator|.
name|UserInfo
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.event_timetable.requires_authentication"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|&&
name|userInfo
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
name|type
operator|.
name|getPageTitle
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|type
operator|.
name|getPageTitle
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" is only available to authenticated users."
argument_list|)
throw|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
operator|!
name|session
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|academicSession
operator|=
name|findSession
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|userInfo
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|academicSession
operator|=
name|userInfo
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Academic session not provided."
argument_list|)
throw|;
block|}
if|if
condition|(
name|type
operator|==
literal|null
condition|)
name|type
operator|=
name|ResourceType
operator|.
name|PERSON
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ROOM
case|:
name|List
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r where r.session.uniqueId = :sessionId and ("
operator|+
literal|"r.buildingAbbv || ' ' || r.roomNumber = :name or r.buildingAbbv || r.roomNumber = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rooms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Room
name|room
init|=
name|rooms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select l from NonUniversityLocation l where "
operator|+
literal|"l.session.uniqueId = :sessionId and l.name = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|locations
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|NonUniversityLocation
name|location
init|=
name|locations
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|SUBJECT
case|:
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from SubjectArea s where s.session.uniqueId = :sessionId and "
operator|+
literal|"lower(s.subjectAreaAbbreviation) = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|subjects
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SubjectArea
name|subject
init|=
name|subjects
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|subject
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|subject
operator|.
name|getShortTitle
argument_list|()
else|:
name|subject
operator|.
name|getLongTitle
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|subject
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|CURRICULUM
case|:
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session.uniqueId = :sessionId and "
operator|+
literal|"lower(c.abbv) = :name or lower(c.name) = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|curricula
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Curriculum
name|curriculum
init|=
name|curricula
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|CurriculumClassification
argument_list|>
name|classifications
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from CurriculumClassification f inner join f.curriculum c where "
operator|+
literal|"c.department.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.abbv || '/' || f.name) = :name or lower(c.name || '/' || f.name) = :name or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.code) = :name or lower(c.name || '/' || f.academicClassification.code) = :name or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.name) = :name or lower(c.name || '/' || f.academicClassification.name) = :name or "
operator|+
literal|"lower(c.abbv || ' ' || f.name) = :name or lower(c.name || ' ' || f.name) = :name or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.code) = :name or lower(c.name || ' ' || f.academicClassification.code) = :name or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.name) = :name or lower(c.name || ' ' || f.academicClassification.name) = :name or "
operator|+
literal|"lower(c.abbv || f.name) = :name or lower(c.name || f.name) = :name or "
operator|+
literal|"lower(c.abbv || f.academicClassification.code) = :name or lower(c.name || f.academicClassification.code) = :name or "
operator|+
literal|"lower(c.abbv || f.academicClassification.name) = :name or lower(c.name || f.academicClassification.name) = :name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|classifications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|CurriculumClassification
name|classification
init|=
name|classifications
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|DEPARTMENT
case|:
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d where d.session.uniqueId = :sessionId and "
operator|+
literal|"lower(d.deptCode) = :name or lower(d.abbreviation) = :name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|departments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Department
name|department
init|=
name|departments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|DEPARTMENT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|department
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|"."
argument_list|)
throw|;
case|case
name|PERSON
case|:
if|if
condition|(
name|userInfo
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
name|type
operator|.
name|getPageTitle
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|type
operator|.
name|getPageTitle
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|" is only available to authenticated users."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|userInfo
operator|.
name|getUser
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|userInfo
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
literal|"It is not allowed to access a timetable of someone else."
argument_list|)
throw|;
name|name
operator|=
name|userInfo
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
name|userInfo
operator|.
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Student
argument_list|>
name|students
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where s.session.uniqueId = :sessionId and "
operator|+
literal|"s.externalUniqueId = :name or lower(s.email) = lower(:name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Student
name|student
init|=
name|students
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i where i.department.session.uniqueId = :sessionId and "
operator|+
literal|"i.externalUniqueId = :name or lower(i.careerAcct) = lower(:name) or lower(i.email) = lower(:name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|instructors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
name|instructors
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
name|List
argument_list|<
name|EventContact
argument_list|>
name|contacts
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from EventContact c where "
operator|+
literal|"c.externalUniqueId = :name or lower(c.emailAddress) = lower(:name)"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|contacts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|EventContact
name|contact
init|=
name|contacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|PERSON
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|contact
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|contact
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setExternalId
argument_list|(
name|contact
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|academicSession
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
throw|throw
operator|new
name|EventException
argument_list|(
literal|"No events found in "
operator|+
name|academicSession
operator|.
name|getLabel
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Resource type "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EventException
condition|)
throw|throw
operator|(
name|EventException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find a "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" named "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|EventInterface
argument_list|>
name|findEvents
parameter_list|(
name|ResourceInterface
name|resource
parameter_list|)
throws|throws
name|EventException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|boolean
name|suffix
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.exam.report.suffix"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|Long
argument_list|>
name|curriculumCourses
init|=
literal|null
decl_stmt|;
name|Department
name|department
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|resource
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ROOM
case|:
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Meeting m, Location l where "
operator|+
literal|"l.uniqueId = :resourceId and m.locationPermanentId = l.permanentId "
operator|+
literal|"and m.meetingDate>= l.session.eventBeginDate and m.meetingDate<= l.session.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
break|break;
case|case
name|SUBJECT
case|:
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ClassEvent e inner join e.meetings m inner join "
operator|+
literal|"e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId "
operator|+
literal|"and m.meetingDate>= co.subjectArea.session.eventBeginDate and "
operator|+
literal|"m.meetingDate<= co.subjectArea.session.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, CourseOffering co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:courseType and o.ownerId = co.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, CourseOffering co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:offeringType and o.ownerId = co.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:classType and o.ownerId = c.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:configType and o.ownerId = cfg.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, CourseOffering co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:courseType and o.ownerId = co.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, CourseOffering co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:offeringType and o.ownerId = co.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:classType and o.ownerId = c.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, "
operator|+
literal|"CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg where "
operator|+
literal|"co.subjectArea.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:configType and o.ownerId = cfg.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|CURRICULUM
case|:
name|curriculumCourses
operator|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cc.course.uniqueId from CurriculumCourse cc where cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ClassEvent e inner join e.meetings m inner join "
operator|+
literal|"e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) "
operator|+
literal|"and m.meetingDate>= co.subjectArea.session.eventBeginDate and "
operator|+
literal|"m.meetingDate<= co.subjectArea.session.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, CourseOffering co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:courseType and o.ownerId = co.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, CourseOffering co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:offeringType and o.ownerId = co.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:classType and o.ownerId = c.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, "
operator|+
literal|"CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:configType and o.ownerId = cfg.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, CourseOffering co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:courseType and o.ownerId = co.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, CourseOffering co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:offeringType and o.ownerId = co.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:classType and o.ownerId = c.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg, CurriculumCourse cc where "
operator|+
literal|"co = cc.course and (cc.classification.curriculum.uniqueId = :resourceId or cc.classification.uniqueId = :resourceId) and "
operator|+
literal|"m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:configType and o.ownerId = cfg.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEPARTMENT
case|:
name|department
operator|=
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
block|{
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ClassEvent e inner join e.meetings m inner join e.clazz.managingDept d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= d.session.eventBeginDate and m.meetingDate<= d.session.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|meetings
operator|=
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ClassEvent e inner join e.meetings m inner join "
operator|+
literal|"e.clazz.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= d.session.eventBeginDate and m.meetingDate<= d.session.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, CourseOffering co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:courseType and o.ownerId = co.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, CourseOffering co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:offeringType and o.ownerId = co.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:classType and o.ownerId = c.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from ExamEvent e inner join e.meetings m inner join e.exam.owners o, "
operator|+
literal|"CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:configType and o.ownerId = cfg.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, CourseOffering co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:courseType and o.ownerId = co.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, CourseOffering co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:offeringType and o.ownerId = co.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Class_ c inner join c.schedulingSubpart.instrOfferingConfig.instructionalOffering.courseOfferings co inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:classType and o.ownerId = c.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"classType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"CourseOffering co inner join co.instructionalOffering.instrOfferingConfigs cfg inner join co.subjectArea.department d where "
operator|+
literal|"d.uniqueId = :resourceId and m.meetingDate>= co.subjectArea.session.eventBeginDate and m.meetingDate<= co.subjectArea.session.eventEndDate and "
operator|+
literal|"o.ownerType=:configType and o.ownerId = cfg.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"resourceId"
argument_list|,
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"configType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PERSON
case|:
name|curriculumCourses
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|meetings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i "
operator|+
literal|"where i.externalUniqueId = :externalId and i.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|resource
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|resource
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|PersonalizedExamReportAction
operator|.
name|canDisplay
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
for|for
control|(
name|Exam
name|exam
range|:
name|instructor
operator|.
name|getExams
argument_list|(
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
for|for
control|(
name|Exam
name|exam
range|:
name|instructor
operator|.
name|getExams
argument_list|(
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
control|)
block|{
if|if
condition|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|instructor
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
operator|&&
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|meetings
operator|.
name|addAll
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|course
range|:
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|curriculumCourses
operator|.
name|add
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where "
operator|+
literal|"s.externalUniqueId=:externalId and s.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|resource
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|resource
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|PersonalizedExamReportAction
operator|.
name|canDisplay
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
block|{
for|for
control|(
name|Exam
name|exam
range|:
name|student
operator|.
name|getExams
argument_list|(
name|Exam
operator|.
name|sExamTypeFinal
argument_list|)
control|)
if|if
condition|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
block|{
for|for
control|(
name|Exam
name|exam
range|:
name|student
operator|.
name|getExams
argument_list|(
name|Exam
operator|.
name|sExamTypeMidterm
argument_list|)
control|)
if|if
condition|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
name|meetings
operator|.
name|addAll
argument_list|(
name|exam
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|StudentClassEnrollment
name|sce
range|:
name|student
operator|.
name|getClassEnrollments
argument_list|()
control|)
block|{
if|if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
operator|&&
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|meetings
operator|.
name|addAll
argument_list|(
name|sce
operator|.
name|getClazz
argument_list|()
operator|.
name|getEvent
argument_list|()
operator|.
name|getMeetings
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|curriculumCourses
operator|.
name|add
argument_list|(
name|sce
operator|.
name|getCourseOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Student s inner join s.classEnrollments e where "
operator|+
literal|"s.uniqueId = :studentId and o.ownerType=:courseType and o.ownerId = e.courseOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeCourse
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Student s inner join s.classEnrollments e where "
operator|+
literal|"s.uniqueId = :studentId and o.ownerType=:offeringType and o.ownerId = e.courseOffering.instructionalOffering.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeOffering
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Student s inner join s.classEnrollments e where "
operator|+
literal|"s.uniqueId = :studentId and o.ownerType=:offeringType and o.ownerId = e.clazz.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"offeringType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeClass
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from CourseEvent e inner join e.meetings m inner join e.relatedCourses o, "
operator|+
literal|"Student s inner join s.classEnrollments e where "
operator|+
literal|"s.uniqueId = :studentId and o.ownerType=:courseType and o.ownerId = e.clazz.schedulingSubpart.instrOfferingConfig.uniqueId and m.approvedDate is not null"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"studentId"
argument_list|,
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setInteger
argument_list|(
literal|"courseType"
argument_list|,
name|ExamOwner
operator|.
name|sOwnerTypeConfig
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Meeting m, Session s where s.uniqueId = :sessionId and "
operator|+
literal|"m.event.class in (CourseEvent, SpecialEvent) and "
operator|+
literal|"m.event.mainContact.externalUniqueId = :externalId and "
operator|+
literal|"m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|resource
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|resource
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
name|meetings
operator|.
name|addAll
argument_list|(
operator|(
name|List
argument_list|<
name|Meeting
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Meeting m inner join m.event.additionalContacts c, Session s where s.uniqueId = :sessionId and "
operator|+
literal|"c.externalUniqueId = :externalId and "
operator|+
literal|"m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.approvedDate is not null"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|resource
operator|.
name|getExternalId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|resource
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
comment|/*                     meetings.addAll(                     		(List<Meeting>)hibSession.createQuery("select distinct m from Meeting m, EventContact c, Session s where s.uniqueId = :sessionId and " +                     				"c.externalUniqueId = :externalId and c.emailAddress is not null and " +                     				"lower(m.event.email) like '%' || lower(c.emailAddress) || '%' and " +                     				"m.meetingDate>= s.eventBeginDate and m.meetingDate<= s.eventEndDate and m.approvedDate is not null")                     				.setString("externalId", resource.getExternalId()).setLong("sessionId", resource.getSessionId()).list());                     */
break|break;
default|default:
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Resource type "
operator|+
name|resource
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
name|Date
name|now
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|EventInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
name|events
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|EventInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
block|{
name|EventInterface
name|event
init|=
name|events
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|event
operator|=
operator|new
name|EventInterface
argument_list|()
expr_stmt|;
name|event
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setType
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventTypeAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|events
operator|.
name|put
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|!=
literal|null
condition|)
name|event
operator|.
name|setContact
argument_list|(
operator|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getLastName
argument_list|()
operator|+
literal|", "
operator|)
operator|+
operator|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getFirstName
argument_list|()
operator|)
operator|+
operator|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getMainContact
argument_list|()
operator|.
name|getMiddleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|event
operator|.
name|setSponsor
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getSponsoringOrganization
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Event
operator|.
name|sEventTypeClass
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ClassEvent
name|ce
init|=
name|ClassEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|ce
operator|.
name|getClazz
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getDisplayInstructor
argument_list|()
condition|)
block|{
name|String
name|instructor
init|=
literal|""
decl_stmt|,
name|email
init|=
literal|""
decl_stmt|;
for|for
control|(
name|ClassInstructor
name|i
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructor
operator|+=
literal|"|"
expr_stmt|;
name|email
operator|+=
literal|"|"
expr_stmt|;
block|}
name|instructor
operator|+=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|i
operator|.
name|nameLastNameFirst
argument_list|()
argument_list|)
expr_stmt|;
name|email
operator|+=
operator|(
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|"-"
else|:
name|i
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|)
expr_stmt|;
block|}
name|event
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
block|}
name|CourseOffering
name|correctedOffering
init|=
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseOffering
argument_list|>
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|resource
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|SUBJECT
case|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|correctedOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|correctedOffering
operator|=
name|co
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DEPARTMENT
case|:
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
break|break;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|correctedOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|correctedOffering
operator|=
name|co
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CURRICULUM
case|:
case|case
name|PERSON
case|:
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|courses
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|co
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|correctedOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|correctedOffering
operator|=
name|co
expr_stmt|;
block|}
else|else
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
name|courses
operator|.
name|remove
argument_list|(
name|correctedOffering
argument_list|)
expr_stmt|;
name|event
operator|.
name|addCourseName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstruction
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getDesc
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|setInstructionType
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItype
argument_list|()
operator|.
name|getItype
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|section
init|=
operator|(
name|suffix
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
operator|)
decl_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|correctedOffering
argument_list|)
operator|==
literal|null
condition|)
block|{
name|event
operator|.
name|setName
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|correctedOffering
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|event
operator|.
name|setName
argument_list|(
name|correctedOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" "
operator|+
name|section
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|co
range|:
name|courses
control|)
block|{
name|event
operator|.
name|addCourseName
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|suffix
operator|&&
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|co
argument_list|)
else|:
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Event
operator|.
name|sEventTypeFinalExam
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
operator|||
name|Event
operator|.
name|sEventTypeMidtermExam
operator|==
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getEventType
argument_list|()
condition|)
block|{
name|ExamEvent
name|xe
init|=
name|ExamEventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getEvent
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|String
name|instructor
init|=
literal|""
decl_stmt|,
name|email
init|=
literal|""
decl_stmt|;
empty_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getInstructors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|instructor
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|instructor
operator|+=
literal|"|"
expr_stmt|;
name|email
operator|+=
literal|"|"
expr_stmt|;
block|}
name|instructor
operator|+=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|i
operator|.
name|nameLastNameFirst
argument_list|()
argument_list|)
expr_stmt|;
name|email
operator|+=
operator|(
name|i
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|i
operator|.
name|getEmail
argument_list|()
operator|)
expr_stmt|;
block|}
name|event
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|event
operator|.
name|setEmail
argument_list|(
name|email
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamOwner
name|owner
range|:
name|xe
operator|.
name|getExam
argument_list|()
operator|.
name|getOwners
argument_list|()
control|)
block|{
name|courses
label|:
for|for
control|(
name|CourseOffering
name|course
range|:
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
switch|switch
condition|(
name|resource
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|SUBJECT
case|:
if|if
condition|(
operator|!
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
break|break;
case|case
name|DEPARTMENT
case|:
if|if
condition|(
name|department
operator|.
name|isExternalManager
argument_list|()
condition|)
break|break
name|courses
break|;
if|if
condition|(
operator|!
name|course
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
break|break;
case|case
name|CURRICULUM
case|:
case|case
name|PERSON
case|:
if|if
condition|(
operator|!
name|curriculumCourses
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
break|break;
block|}
name|String
name|courseName
init|=
name|owner
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
decl_stmt|;
name|String
name|label
init|=
name|owner
operator|.
name|getLabel
argument_list|()
decl_stmt|;
if|if
condition|(
name|label
operator|.
name|startsWith
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
name|label
operator|=
name|label
operator|.
name|substring
argument_list|(
name|courseName
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|addExternalId
argument_list|(
name|label
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|event
operator|.
name|hasCourseNames
argument_list|()
operator|&&
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|event
operator|.
name|setName
argument_list|(
operator|(
name|event
operator|.
name|getCourseNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" "
operator|+
name|event
operator|.
name|getExternalIds
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|MeetingInterface
name|meeting
init|=
operator|new
name|MeetingInterface
argument_list|()
decl_stmt|;
name|meeting
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setDayOfWeek
argument_list|(
name|Constants
operator|.
name|getDayOfWeek
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartTime
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStopTime
argument_list|(
name|m
operator|.
name|getStopTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|m
operator|.
name|getMeetingDate
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|dayOfYear
init|=
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
decl_stmt|;
name|int
name|sessionYear
init|=
name|session
operator|.
name|getSessionStartYear
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|<
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|-=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
operator|>
name|sessionYear
condition|)
block|{
name|Calendar
name|x
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|x
operator|.
name|set
argument_list|(
name|sessionYear
argument_list|,
literal|11
argument_list|,
literal|31
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|dayOfYear
operator|+=
name|x
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
name|meeting
operator|.
name|setDayOfYear
argument_list|(
name|dayOfYear
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setMeetingTime
argument_list|(
name|m
operator|.
name|startTime
argument_list|()
operator|+
literal|" - "
operator|+
name|m
operator|.
name|stopTime
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setStartSlot
argument_list|(
name|m
operator|.
name|getStartPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setEndSlot
argument_list|(
name|m
operator|.
name|getStopPeriod
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setPast
argument_list|(
name|m
operator|.
name|getStartTime
argument_list|()
operator|.
name|before
argument_list|(
name|now
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|isApproved
argument_list|()
condition|)
name|meeting
operator|.
name|setApprovalDate
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yy/MM/dd"
argument_list|)
operator|.
name|format
argument_list|(
name|m
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|.
name|getType
argument_list|()
operator|==
name|ResourceType
operator|.
name|ROOM
condition|)
name|meeting
operator|.
name|setLocation
argument_list|(
name|resource
argument_list|)
expr_stmt|;
if|else if
condition|(
name|m
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ResourceInterface
name|location
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|location
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|location
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSessionId
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|location
operator|.
name|setSessionName
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|addMeeting
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EventException
condition|)
throw|throw
operator|(
name|EventException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Unable to find events for "
operator|+
name|resource
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|IdValueInterface
argument_list|>
name|findSessions
parameter_list|(
name|String
name|term
parameter_list|)
throws|throws
name|EventException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|selected
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|selected
operator|=
name|findSession
argument_list|(
name|hibSession
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EventException
name|e
parameter_list|)
block|{
block|}
block|}
else|else
block|{
name|MenuServlet
operator|.
name|UserInfo
name|userInfo
init|=
operator|new
name|MenuServlet
operator|.
name|UserInfo
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|userInfo
operator|.
name|getSession
argument_list|()
operator|!=
literal|null
condition|)
name|selected
operator|=
name|userInfo
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|selected
operator|==
literal|null
condition|)
try|try
block|{
name|selected
operator|=
name|findSession
argument_list|(
name|hibSession
argument_list|,
literal|"current"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EventException
name|e
parameter_list|)
block|{
block|}
name|List
argument_list|<
name|IdValueInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|IdValueInterface
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Session
argument_list|>
name|sessions
init|=
operator|new
name|TreeSet
argument_list|<
name|Session
argument_list|>
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct s from Session s, RoomTypeOption o where o.session = s and o.status = 1"
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Session
name|session
range|:
name|sessions
control|)
block|{
name|IdValueInterface
name|idVal
init|=
operator|new
name|IdValueInterface
argument_list|(
name|session
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|session
operator|.
name|getLabel
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|equals
argument_list|(
name|selected
argument_list|)
condition|)
name|idVal
operator|.
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|idVal
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EventException
condition|)
throw|throw
operator|(
name|EventException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EventException
argument_list|(
literal|"No academic session available: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|findResources
parameter_list|(
name|String
name|session
parameter_list|,
name|ResourceType
name|type
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|limit
parameter_list|)
throws|throws
name|EventException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|academicSession
init|=
name|findSession
argument_list|(
name|hibSession
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceInterface
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|ROOM
case|:
name|List
argument_list|<
name|Room
argument_list|>
name|rooms
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Room r, RoomTypeOption o where r.session.uniqueId = :sessionId and "
operator|+
literal|"o.status = 1 and o.roomType = r.roomType and o.session = r.session and ("
operator|+
literal|"lower(r.roomNumber) like :name or lower(r.buildingAbbv || ' ' || r.roomNumber) like :name or lower(r.buildingAbbv || r.roomNumber) like :name) "
operator|+
literal|"order by r.buildingAbbv, r.roomNumber"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Room
name|room
range|:
name|rooms
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|room
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getDisplayName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|room
operator|.
name|getDisplayName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|room
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|room
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|room
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
operator|(
name|room
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|room
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|room
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|NonUniversityLocation
argument_list|>
name|locations
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select l from NonUniversityLocation l, RoomTypeOption o where "
operator|+
literal|"l.session.uniqueId = :sessionId and o.status = 1 and o.roomType = l.roomType and o.session = l.session and lower(l.name) like :name "
operator|+
literal|"order by l.name"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|NonUniversityLocation
name|location
range|:
name|locations
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|ROOM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|location
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|getDisplayName
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|location
operator|.
name|getDisplayName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getDisplayName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|setTitle
argument_list|(
name|location
operator|.
name|getLabel
argument_list|()
operator|+
literal|" - "
operator|+
name|location
operator|.
name|getRoomTypeLabel
argument_list|()
operator|+
operator|(
name|location
operator|.
name|getCapacity
argument_list|()
operator|>
literal|1
condition|?
literal|" ("
operator|+
name|location
operator|.
name|getCapacity
argument_list|()
operator|+
literal|" seats)"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|location
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|resources
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|resources
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|(
name|resources
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SUBJECT
case|:
name|List
argument_list|<
name|SubjectArea
argument_list|>
name|subjects
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from SubjectArea s where s.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(s.subjectAreaAbbreviation) like :name or lower(' ' || s.shortTitle) like :title or lower(' ' || s.longTitle) like :title) "
operator|+
literal|"order by s.subjectAreaAbbreviation"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"% "
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|SubjectArea
name|subject
range|:
name|subjects
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|SUBJECT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|subject
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|subject
operator|.
name|getSubjectAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|subject
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|subject
operator|.
name|getShortTitle
argument_list|()
else|:
name|subject
operator|.
name|getLongTitle
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|subject
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CURRICULUM
case|:
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from Curriculum c where c.department.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.abbv) like :name or lower(c.name) like :title) order by c.abbv"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|curricula
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curricula
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
for|for
control|(
name|CurriculumClassification
name|classification
range|:
operator|new
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|curricula
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getClassifications
argument_list|()
argument_list|)
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTitle
argument_list|(
literal|"&nbsp;&nbsp;&nbsp;&nbsp;"
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|curricula
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|CurriculumClassification
argument_list|>
name|classifications
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f from CurriculumClassification f inner join f.curriculum c where "
operator|+
literal|"c.department.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.abbv || '/' || f.name) like :name or lower(c.name || '/' || f.name) like :title or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.code) like :name or lower(c.name || '/' || f.academicClassification.code) like :title or "
operator|+
literal|"lower(c.abbv || '/' || f.academicClassification.name) like :name or lower(c.name || '/' || f.academicClassification.name) like :title or "
operator|+
literal|"lower(c.abbv || ' ' || f.name) like :name or lower(c.name || ' ' || f.name) like :title or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.code) like :name or lower(c.name || ' ' || f.academicClassification.code) like :title or "
operator|+
literal|"lower(c.abbv || ' ' || f.academicClassification.name) like :name or lower(c.name || ' ' || f.academicClassification.name) like :title or "
operator|+
literal|"lower(c.abbv || f.name) like :name or lower(c.name || f.name) like :title or "
operator|+
literal|"lower(c.abbv || f.academicClassification.code) like :name or lower(c.name || f.academicClassification.code) like :title or "
operator|+
literal|"lower(c.abbv || f.academicClassification.name) like :name or lower(c.name || f.academicClassification.name) like :title) "
operator|+
literal|"order by c.abbv, f.academicClassification.code"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
operator|-
name|resources
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|classification
range|:
name|classifications
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|CURRICULUM
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|classification
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|classification
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|limit
operator|>
literal|0
operator|&&
name|resources
operator|.
name|size
argument_list|()
operator|>
name|limit
condition|)
block|{
name|resources
operator|=
operator|new
name|ArrayList
argument_list|<
name|ResourceInterface
argument_list|>
argument_list|(
name|resources
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEPARTMENT
case|:
name|List
argument_list|<
name|Department
argument_list|>
name|departments
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select d from Department d where d.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(d.deptCode) like :name or lower(d.abbreviation) like :name or lower(d.name) like :title) "
operator|+
literal|"order by d.abbreviation, d.deptCode"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"name"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"title"
argument_list|,
literal|"%"
operator|+
name|query
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"%"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|academicSession
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|departments
control|)
block|{
name|ResourceInterface
name|ret
init|=
operator|new
name|ResourceInterface
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setType
argument_list|(
name|ResourceType
operator|.
name|DEPARTMENT
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setId
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setAbbreviation
argument_list|(
name|department
operator|.
name|getAbbreviation
argument_list|()
operator|==
literal|null
condition|?
name|department
operator|.
name|getDeptCode
argument_list|()
else|:
name|department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setName
argument_list|(
name|department
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fillInSessionInfo
argument_list|(
name|ret
argument_list|,
name|department
operator|.
name|getSession
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCalendarUrl
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|resources
operator|.
name|add
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Resource type "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" not supported."
argument_list|)
throw|;
block|}
if|if
condition|(
name|resources
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
literal|"No "
operator|+
name|type
operator|.
name|getLabel
argument_list|()
operator|+
literal|" "
operator|+
name|query
operator|+
literal|" found."
argument_list|)
throw|;
return|return
name|resources
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EventException
condition|)
throw|throw
operator|(
name|EventException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EventException
argument_list|(
literal|"Failed to find resources: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|canLookupPeople
parameter_list|()
throws|throws
name|EventException
block|{
try|try
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EventException
argument_list|(
literal|"not authenticated"
argument_list|)
throw|;
return|return
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|EventException
condition|)
throw|throw
operator|(
name|EventException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EventException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

