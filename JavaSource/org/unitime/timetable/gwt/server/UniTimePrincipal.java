begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|NameFormat
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimePrincipal
implements|implements
name|Principal
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iExternalId
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|iStudentId
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|UniTimePrincipal
parameter_list|(
name|String
name|externalId
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|externalId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
name|iExternalId
operator|=
name|externalId
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|createNewSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Student
argument_list|>
name|student
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Student m where m.externalUniqueId = :uid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"uid"
argument_list|,
name|externalId
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|student
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Student
name|s
range|:
name|student
control|)
block|{
name|addStudentId
argument_list|(
name|s
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|s
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|iName
operator|=
name|NameFormat
operator|.
name|LAST_FIRST_MIDDLE
operator|.
name|format
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|void
name|setExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|iExternalId
operator|=
name|externalId
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
return|return
name|iStudentId
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
return|;
block|}
specifier|public
name|void
name|addStudentId
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|.
name|put
argument_list|(
name|sessionId
argument_list|,
name|studentId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|iExternalId
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|UniTimePrincipal
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getExternalId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|UniTimePrincipal
operator|)
name|o
operator|)
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"UniTimePrincipal{id:"
operator|+
name|getExternalId
argument_list|()
operator|+
literal|", name:"
operator|+
name|getName
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
end_class

end_unit

