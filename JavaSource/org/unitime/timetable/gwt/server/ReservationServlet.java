begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2011, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|ReservationService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumProjectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|IndividualReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Reservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Settings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroupReservation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|InstrOfferingConfigComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|SchedulingSubpartComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstrOfferingConfigDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMajorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ReservationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"reservation.gwt"
argument_list|)
specifier|public
class|class
name|ReservationServlet
implements|implements
name|ReservationService
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ReservationServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateFormat
name|sDateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MM/dd/yyyy"
argument_list|)
decl_stmt|;
specifier|private
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReservationInterface
operator|.
name|Area
argument_list|>
name|getAreas
parameter_list|()
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|List
argument_list|<
name|ReservationInterface
operator|.
name|Area
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
operator|.
name|Area
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
name|classifications
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|classification
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from AcademicClassification c where c.session.uniqueId = :sessionId order by c.code, c.name"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|clasf
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|classification
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAbbv
argument_list|(
name|classification
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|AcademicArea
name|area
range|:
operator|(
name|List
argument_list|<
name|AcademicArea
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicArea a where a.session.uniqueId = :sessionId order by a.academicAreaAbbreviation, a.longTitle, a.shortTitle"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|Area
name|curriculum
init|=
operator|new
name|ReservationInterface
operator|.
name|Area
argument_list|()
decl_stmt|;
name|curriculum
operator|.
name|setAbbv
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setId
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|area
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|area
operator|.
name|getShortTitle
argument_list|()
else|:
name|area
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|area
operator|.
name|getPosMajors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mj
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mj
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setAbbv
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|mj
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|addAll
argument_list|(
name|classifications
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ReservationInterface
operator|.
name|Offering
name|convert
parameter_list|(
name|InstructionalOffering
name|io
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
name|ReservationInterface
operator|.
name|Offering
name|offering
init|=
operator|new
name|ReservationInterface
operator|.
name|Offering
argument_list|()
decl_stmt|;
name|offering
operator|.
name|setAbbv
argument_list|(
name|io
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setName
argument_list|(
name|io
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setId
argument_list|(
name|io
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setOffered
argument_list|(
operator|!
name|io
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|io
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|(
name|io
operator|.
name|getInstrOfferingConfigs
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|configs
argument_list|,
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|configs
control|)
block|{
name|ReservationInterface
operator|.
name|Config
name|config
init|=
operator|new
name|ReservationInterface
operator|.
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setId
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setName
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAbbv
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLimit
argument_list|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
literal|null
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|<
name|SchedulingSubpart
argument_list|>
argument_list|(
operator|new
name|SchedulingSubpartComparator
argument_list|()
argument_list|)
decl_stmt|;
name|subparts
operator|.
name|addAll
argument_list|(
name|ioc
operator|.
name|getSchedulingSubparts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SchedulingSubpart
name|ss
range|:
name|subparts
control|)
block|{
name|ReservationInterface
operator|.
name|Subpart
name|subpart
init|=
operator|new
name|ReservationInterface
operator|.
name|Subpart
argument_list|()
decl_stmt|;
name|subpart
operator|.
name|setId
argument_list|(
name|ss
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|suffix
init|=
name|ss
operator|.
name|getSchedulingSubpartSuffix
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|subpart
operator|.
name|setAbbv
argument_list|(
name|ss
operator|.
name|getItypeDesc
argument_list|()
operator|+
operator|(
name|suffix
operator|==
literal|null
operator|||
name|suffix
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|suffix
operator|)
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setName
argument_list|(
name|ss
operator|.
name|getSchedulingSubpartLabel
argument_list|()
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|setConfig
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|add
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
if|if
condition|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|!=
literal|null
condition|)
name|subpart
operator|.
name|setParentId
argument_list|(
name|ss
operator|.
name|getParentSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|ss
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
block|{
name|ReservationInterface
operator|.
name|Clazz
name|clazz
init|=
operator|new
name|ReservationInterface
operator|.
name|Clazz
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setAbbv
argument_list|(
name|ss
operator|.
name|getItypeDesc
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setSubpart
argument_list|(
name|subpart
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
name|c
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
name|clazz
operator|.
name|setParentId
argument_list|(
name|c
operator|.
name|getParentClass
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|offering
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReservationInterface
operator|.
name|Offering
name|getOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|InstructionalOffering
name|io
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|offeringId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|io
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Offering does not exist."
argument_list|)
throw|;
block|}
return|return
name|convert
argument_list|(
name|io
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|CourseOffering
name|getCourse
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|courseName
parameter_list|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) = :course"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
return|return
name|co
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|ReservationInterface
operator|.
name|Offering
name|getOfferingByCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|CourseOffering
name|co
init|=
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|courseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|co
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Course "
operator|+
name|courseName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
return|return
name|convert
argument_list|(
name|co
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|,
name|hibSession
argument_list|)
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|getRules
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|acadAreaId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.uniqueId=:acadAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"acadAreaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|majorCode
init|=
operator|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
decl_stmt|;
name|String
name|clasfCode
init|=
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|Float
name|projection
init|=
name|rule
operator|.
name|getProjection
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
block|{
name|major2proj
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2major2proj
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2proj
argument_list|)
expr_stmt|;
block|}
name|major2proj
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|projection
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2major2proj
return|;
block|}
specifier|public
name|float
name|getProjection
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
parameter_list|,
name|String
name|majorCode
parameter_list|,
name|String
name|clasfCode
parameter_list|)
block|{
if|if
condition|(
name|clasf2major2proj
operator|==
literal|null
operator|||
name|clasf2major2proj
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1.0f
return|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
return|return
literal|1.0f
return|;
name|Float
name|projection
init|=
name|major2proj
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|projection
operator|==
literal|null
condition|)
name|projection
operator|=
name|major2proj
operator|.
name|get
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
name|projection
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|projection
operator|)
return|;
block|}
specifier|private
name|ReservationInterface
name|convert
parameter_list|(
name|Reservation
name|reservation
parameter_list|,
name|String
name|nameFormat
parameter_list|,
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|ReservationInterface
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservation
operator|instanceof
name|CourseReservation
condition|)
block|{
name|CourseOffering
name|co
init|=
operator|(
operator|(
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|CourseReservation
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|CourseReservation
operator|)
name|r
operator|)
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLastLike
argument_list|(
name|co
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setEnrollment
argument_list|(
name|co
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setProjection
argument_list|(
name|co
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|IndividualReservation
argument_list|()
expr_stmt|;
name|String
name|sId
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|(
operator|(
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|s
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|s
operator|.
name|setId
argument_list|(
name|student
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setAbbv
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|.
name|setName
argument_list|(
name|student
operator|.
name|getName
argument_list|(
name|nameFormat
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|sId
operator|+=
operator|(
name|sId
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|student
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|r
operator|)
operator|.
name|getStudents
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Number
name|enrollment
init|=
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) "
operator|+
literal|"from StudentClassEnrollment e where "
operator|+
literal|"e.courseOffering.instructionalOffering.uniqueId = :offeringId "
operator|+
literal|"and e.student.uniqueId in ("
operator|+
name|sId
operator|+
literal|")"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
name|r
operator|.
name|setEnrollment
argument_list|(
name|enrollment
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|reservation
decl_stmt|;
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|CurriculumReservation
argument_list|()
expr_stmt|;
name|ReservationInterface
operator|.
name|Area
name|curriculum
init|=
operator|new
name|ReservationInterface
operator|.
name|Area
argument_list|()
decl_stmt|;
name|curriculum
operator|.
name|setId
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setAbbv
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
else|:
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|cfCodes
init|=
literal|""
decl_stmt|;
name|String
name|cfIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|classification
range|:
name|cr
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|clasf
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|classification
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAbbv
argument_list|(
name|classification
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|cfCodes
operator|+=
operator|(
name|cfCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|classification
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
name|cfIds
operator|+=
operator|(
name|cfIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|classification
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|String
name|mjCodes
init|=
literal|""
decl_stmt|;
name|String
name|mjIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|cr
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mj
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mj
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setAbbv
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|mj
argument_list|)
expr_stmt|;
name|mjCodes
operator|+=
operator|(
name|mjCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
name|mjIds
operator|+=
operator|(
name|mjIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|","
operator|)
operator|+
name|major
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getClassifications
argument_list|()
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ReservationInterface
operator|.
name|IdName
name|s1
parameter_list|,
name|ReservationInterface
operator|.
name|IdName
name|s2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|s1
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|s1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|s1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|s2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|CurriculumReservation
operator|)
name|r
operator|)
operator|.
name|setCurriculum
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
name|Number
name|enrollment
init|=
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) "
operator|+
literal|"from StudentClassEnrollment e inner join e.student.academicAreaClassifications a inner join e.student.posMajors m where "
operator|+
literal|"e.courseOffering.instructionalOffering.uniqueId = :offeringId "
operator|+
literal|"and a.academicArea.uniqueId = :areaId"
operator|+
operator|(
name|mjIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and m.uniqueId in ("
operator|+
name|mjIds
operator|+
literal|")"
operator|)
operator|+
operator|(
name|cfIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and a.academicClassification.uniqueId in ("
operator|+
name|cfIds
operator|+
literal|")"
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"areaId"
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
name|r
operator|.
name|setEnrollment
argument_list|(
name|enrollment
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 			Number lastLike = (Number)hibSession.createQuery( 					"select count(distinct s) from " + 					"LastLikeCourseDemand x inner join x.student s inner join s.academicAreaClassifications a inner join s.posMajors m " + 					"inner join a.academicClassification f inner join a.academicArea r, CourseOffering co where " + 					"x.subjectArea.session.uniqueId = :sessionId and co.instructionalOffering.uniqueId = :offeringId and "+ 					"co.subjectArea.uniqueId = x.subjectArea.uniqueId and " + 					"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr)) " + 					"and r.academicAreaAbbreviation = :areaAbbv" + 					(mjCodes.isEmpty() ? "" : " and m.code in (" + mjCodes + ")") + 					(cfCodes.isEmpty() ? "" : " and f.code in (" + cfCodes + ")")) 					.setLong("sessionId", getAcademicSessionId()) 					.setLong("offeringId", reservation.getInstructionalOffering().getUniqueId()) 					.setString("areaAbbv", cr.getArea().getAcademicAreaAbbreviation()).uniqueResult(); 			r.setLastLike(lastLike.intValue()); 			*/
name|float
name|projection
init|=
literal|0f
decl_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct s), m.code, f.code from "
operator|+
literal|"LastLikeCourseDemand x inner join x.student s inner join s.academicAreaClassifications a inner join s.posMajors m "
operator|+
literal|"inner join a.academicClassification f inner join a.academicArea r, CourseOffering co where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and co.instructionalOffering.uniqueId = :offeringId and "
operator|+
literal|"co.subjectArea.uniqueId = x.subjectArea.uniqueId and "
operator|+
literal|"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr)) "
operator|+
literal|"and r.academicAreaAbbreviation = :areaAbbv"
operator|+
operator|(
name|mjCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and m.code in ("
operator|+
name|mjCodes
operator|+
literal|")"
operator|)
operator|+
operator|(
name|cfCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" and f.code in ("
operator|+
name|cfCodes
operator|+
literal|")"
operator|)
operator|+
literal|" group by m.code, f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"areaAbbv"
argument_list|,
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|int
name|nrStudents
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|lastLike
operator|+=
name|nrStudents
expr_stmt|;
name|projection
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
argument_list|,
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
argument_list|)
operator|*
name|nrStudents
expr_stmt|;
block|}
if|if
condition|(
name|lastLike
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|setLastLike
argument_list|(
name|lastLike
argument_list|)
expr_stmt|;
name|r
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|projection
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|reservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|r
operator|=
operator|new
name|ReservationInterface
operator|.
name|GroupReservation
argument_list|()
expr_stmt|;
name|StudentGroup
name|sg
init|=
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|group
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|sg
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|sg
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
name|sg
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ReservationInterface
operator|.
name|GroupReservation
operator|)
name|r
operator|)
operator|.
name|setGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|Number
name|enrollment
init|=
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(distinct e.student) "
operator|+
literal|"from StudentClassEnrollment e inner join e.student.groups g where "
operator|+
literal|"e.courseOffering.instructionalOffering.uniqueId = :offeringId "
operator|+
literal|"and g.uniqueId = :groupId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"groupId"
argument_list|,
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
name|r
operator|.
name|setEnrollment
argument_list|(
name|enrollment
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Unknown reservation "
operator|+
name|reservation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|ReservationInterface
operator|.
name|Offering
name|offering
init|=
operator|new
name|ReservationInterface
operator|.
name|Offering
argument_list|()
decl_stmt|;
name|offering
operator|.
name|setAbbv
argument_list|(
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setName
argument_list|(
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setId
argument_list|(
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|setOffered
argument_list|(
operator|!
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|isNotOffered
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseOffering
name|co
range|:
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|Course
name|course
init|=
operator|new
name|ReservationInterface
operator|.
name|Course
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|co
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setAbbv
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setName
argument_list|(
name|co
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setControl
argument_list|(
name|co
operator|.
name|isIsControl
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|co
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|configs
init|=
operator|new
name|ArrayList
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|(
name|reservation
operator|.
name|getConfigurations
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|configs
argument_list|,
operator|new
name|InstrOfferingConfigComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InstrOfferingConfig
name|ioc
range|:
name|configs
control|)
block|{
name|ReservationInterface
operator|.
name|Config
name|config
init|=
operator|new
name|ReservationInterface
operator|.
name|Config
argument_list|()
decl_stmt|;
name|config
operator|.
name|setId
argument_list|(
name|ioc
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setName
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setAbbv
argument_list|(
name|ioc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|setLimit
argument_list|(
name|ioc
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|?
literal|null
else|:
name|ioc
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getConfigs
argument_list|()
operator|.
name|add
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|(
name|reservation
operator|.
name|getClasses
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|c
range|:
name|classes
control|)
block|{
name|ReservationInterface
operator|.
name|Clazz
name|clazz
init|=
operator|new
name|ReservationInterface
operator|.
name|Clazz
argument_list|()
decl_stmt|;
name|clazz
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
operator|+
literal|" "
operator|+
name|c
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|setLimit
argument_list|(
name|c
operator|.
name|getClassLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setExpirationDate
argument_list|(
name|reservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setLimit
argument_list|(
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setId
argument_list|(
name|reservation
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|getReservations
parameter_list|(
name|Long
name|offeringId
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|nameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Reservation r where r.instructionalOffering.uniqueId = :offeringId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ReservationInterface
name|r
init|=
name|convert
argument_list|(
name|reservation
argument_list|,
name|nameFormat
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|r
operator|.
name|setEditable
argument_list|(
name|reservation
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
name|getStudentGroups
parameter_list|()
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|List
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
operator|.
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|StudentGroup
name|sg
range|:
operator|(
name|List
argument_list|<
name|StudentGroup
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select g from StudentGroup g where g.session.uniqueId = :sessionId order by g.groupName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|group
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|group
operator|.
name|setId
argument_list|(
name|sg
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setName
argument_list|(
name|sg
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setAbbv
argument_list|(
name|sg
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setLimit
argument_list|(
name|sg
operator|.
name|getStudents
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ReservationInterface
name|getReservation
parameter_list|(
name|Long
name|reservationId
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|ReservationInterface
name|r
decl_stmt|;
try|try
block|{
name|Reservation
name|reservation
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservationId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Reservation not found."
argument_list|)
throw|;
name|r
operator|=
name|convert
argument_list|(
name|reservation
argument_list|,
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
name|r
operator|.
name|setEditable
argument_list|(
name|reservation
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Long
name|save
parameter_list|(
name|ReservationInterface
name|reservation
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Offering "
operator|+
name|reservation
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" does not exist."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|offering
operator|.
name|getDepartment
argument_list|()
operator|.
name|isLimitedEditableBy
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"You are not not authorized to create / update reservations for "
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
if|if
condition|(
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLockNeeded
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Offering "
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" is unlocked, please lock it first."
argument_list|)
throw|;
name|Reservation
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reservation
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservation
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|reservation
operator|instanceof
name|ReservationInterface
operator|.
name|IndividualReservation
condition|)
name|r
operator|=
operator|new
name|IndividualReservation
argument_list|()
expr_stmt|;
if|else if
condition|(
name|reservation
operator|instanceof
name|ReservationInterface
operator|.
name|GroupReservation
condition|)
name|r
operator|=
operator|new
name|StudentGroupReservation
argument_list|()
expr_stmt|;
if|else if
condition|(
name|reservation
operator|instanceof
name|ReservationInterface
operator|.
name|CurriculumReservation
condition|)
name|r
operator|=
operator|new
name|CurriculumReservation
argument_list|()
expr_stmt|;
if|else if
condition|(
name|reservation
operator|instanceof
name|ReservationInterface
operator|.
name|CourseReservation
condition|)
name|r
operator|=
operator|new
name|CourseReservation
argument_list|()
expr_stmt|;
else|else
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Unknown reservation "
operator|+
name|reservation
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|r
operator|.
name|setLimit
argument_list|(
name|r
operator|instanceof
name|IndividualReservation
condition|?
literal|null
else|:
name|reservation
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setExpirationDate
argument_list|(
name|reservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setInstructionalOffering
argument_list|(
name|offering
argument_list|)
expr_stmt|;
name|offering
operator|.
name|getReservations
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getClasses
argument_list|()
operator|==
literal|null
condition|)
name|r
operator|.
name|setClasses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Class_
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ReservationInterface
operator|.
name|Clazz
name|clazz
range|:
name|reservation
operator|.
name|getClasses
argument_list|()
control|)
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|add
argument_list|(
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getConfigurations
argument_list|()
operator|==
literal|null
condition|)
name|r
operator|.
name|setConfigurations
argument_list|(
operator|new
name|HashSet
argument_list|<
name|InstrOfferingConfig
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|r
operator|.
name|getConfigurations
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ReservationInterface
operator|.
name|Config
name|config
range|:
name|reservation
operator|.
name|getConfigs
argument_list|()
control|)
name|r
operator|.
name|getConfigurations
argument_list|()
operator|.
name|add
argument_list|(
name|InstrOfferingConfigDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|config
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|IndividualReservation
name|ir
init|=
operator|(
name|IndividualReservation
operator|)
name|r
decl_stmt|;
if|if
condition|(
name|ir
operator|.
name|getStudents
argument_list|()
operator|==
literal|null
condition|)
name|ir
operator|.
name|setStudents
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|ir
operator|.
name|getStudents
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ReservationInterface
operator|.
name|IdName
name|student
range|:
operator|(
operator|(
name|ReservationInterface
operator|.
name|IndividualReservation
operator|)
name|reservation
operator|)
operator|.
name|getStudents
argument_list|()
control|)
block|{
name|Student
name|s
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|offering
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|student
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
name|ir
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CourseReservation
condition|)
block|{
operator|(
operator|(
name|CourseReservation
operator|)
name|r
operator|)
operator|.
name|setCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ReservationInterface
operator|.
name|CourseReservation
operator|)
name|reservation
operator|)
operator|.
name|getCourse
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
operator|(
operator|(
name|StudentGroupReservation
operator|)
name|r
operator|)
operator|.
name|setGroup
argument_list|(
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
operator|(
operator|(
name|ReservationInterface
operator|.
name|GroupReservation
operator|)
name|reservation
operator|)
operator|.
name|getGroup
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|r
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|ReservationInterface
operator|.
name|Area
name|curriculum
init|=
operator|(
operator|(
name|ReservationInterface
operator|.
name|CurriculumReservation
operator|)
name|reservation
operator|)
operator|.
name|getCurriculum
argument_list|()
decl_stmt|;
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|r
decl_stmt|;
name|cr
operator|.
name|setArea
argument_list|(
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getMajors
argument_list|()
operator|==
literal|null
condition|)
name|cr
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cr
operator|.
name|getMajors
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ReservationInterface
operator|.
name|IdName
name|mj
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|cr
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|mj
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cr
operator|.
name|getClassifications
argument_list|()
operator|==
literal|null
condition|)
name|cr
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicClassification
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|cr
operator|.
name|getClassifications
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|ReservationInterface
operator|.
name|IdName
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|cr
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|r
operator|.
name|getInstructionalOffering
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLocked
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|user
argument_list|,
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|r
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|delete
parameter_list|(
name|Long
name|reservationId
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|Reservation
name|reservation
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|reservationId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|reservation
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|InstructionalOffering
name|offering
init|=
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
decl_stmt|;
if|if
condition|(
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLockNeeded
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"Offering "
operator|+
name|offering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" is unlocked, please lock it first."
argument_list|)
throw|;
if|if
condition|(
operator|!
name|reservation
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|ReservationException
argument_list|(
literal|"You are not not authorized to delete reservations for "
operator|+
name|reservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseName
argument_list|()
operator|+
literal|"."
argument_list|)
throw|;
name|offering
operator|.
name|getReservations
argument_list|()
operator|.
name|remove
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|reservation
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|offering
argument_list|)
expr_stmt|;
if|if
condition|(
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canSectionAssistStudents
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|isOfferingLocked
argument_list|(
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
name|StudentSectioningQueue
operator|.
name|offeringChanged
argument_list|(
name|hibSession
argument_list|,
name|user
argument_list|,
name|offering
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|offering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|TimetableManager
name|getManager
parameter_list|()
throws|throws
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
name|TimetableManager
name|manager
init|=
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|user
operator|.
name|getExternalUserId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
return|return
name|manager
return|;
block|}
specifier|private
name|Long
name|getAcademicSessionId
parameter_list|()
throws|throws
name|PageAccessException
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|Long
name|sessionId
init|=
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"No academic session is selecgted."
argument_list|)
throw|;
return|return
name|sessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|canAddReservation
parameter_list|()
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
operator|||
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|CurriculumAdd
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getManager
argument_list|()
operator|.
name|getDepartments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|getAcademicSessionId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
return|return
name|session
operator|!=
literal|null
operator|&&
name|session
operator|.
name|getStatusType
argument_list|()
operator|.
name|canOwnerLimitedEdit
argument_list|()
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|findReservations
parameter_list|(
name|String
name|filter
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|List
argument_list|<
name|ReservationInterface
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Query
name|q
init|=
operator|new
name|Query
argument_list|(
name|filter
argument_list|)
decl_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Reservations.LastFilter"
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|getManager
argument_list|()
expr_stmt|;
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|String
name|nameFormat
init|=
name|Settings
operator|.
name|getSettingValue
argument_list|(
name|user
argument_list|,
name|Constants
operator|.
name|SETTINGS_INSTRUCTOR_NAME_FORMAT
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Reservation
name|reservation
range|:
operator|(
name|List
argument_list|<
name|Reservation
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from Reservation r where r.instructionalOffering.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|q
operator|.
name|match
argument_list|(
operator|new
name|ReservationMatcher
argument_list|(
name|reservation
argument_list|)
argument_list|)
condition|)
block|{
name|ReservationInterface
name|r
init|=
name|convert
argument_list|(
name|reservation
argument_list|,
name|nameFormat
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|r
operator|.
name|setEditable
argument_list|(
name|reservation
operator|.
name|isEditableBy
argument_list|(
name|user
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|results
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|lastReservationFilter
parameter_list|()
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
name|String
name|filter
init|=
operator|(
name|String
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Reservations.LastFilter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
literal|""
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Department
argument_list|>
name|i
init|=
name|getManager
argument_list|()
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|sessionId
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
name|filter
operator|+=
literal|" or "
expr_stmt|;
name|filter
operator|+=
literal|"dept:"
operator|+
name|d
operator|.
name|getDeptCode
argument_list|()
expr_stmt|;
block|}
block|}
name|filter
operator|=
operator|(
name|filter
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"not expired"
else|:
name|filter
operator|.
name|contains
argument_list|(
literal|" or "
argument_list|)
condition|?
literal|"("
operator|+
name|filter
operator|+
literal|") and not expired"
else|:
name|filter
operator|+
literal|" and not expired"
operator|)
expr_stmt|;
block|}
return|return
name|filter
return|;
block|}
specifier|private
class|class
name|ReservationMatcher
implements|implements
name|Query
operator|.
name|TermMatcher
block|{
specifier|private
name|Reservation
name|iReservation
decl_stmt|;
specifier|private
name|Date
name|iExpDate
decl_stmt|;
specifier|private
name|ReservationMatcher
parameter_list|(
name|Reservation
name|r
parameter_list|)
block|{
name|iReservation
operator|=
name|r
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iExpDate
operator|=
name|c
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|match
parameter_list|(
name|String
name|attr
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|term
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"course"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|iReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"dept"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
name|Department
name|d
init|=
name|iReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getDepartment
argument_list|()
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|d
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"subject"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"subj"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
name|iReservation
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getCourseOfferings
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|co
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|co
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"type"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|IndividualReservation
operator|&&
literal|"individual"
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|StudentGroupReservation
operator|&&
literal|"group"
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|CourseReservation
operator|&&
literal|"course"
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|iReservation
operator|instanceof
name|CurriculumReservation
operator|&&
literal|"curriculum"
operator|.
name|equals
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"group"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|StudentGroupReservation
condition|)
block|{
name|StudentGroupReservation
name|gr
init|=
operator|(
name|StudentGroupReservation
operator|)
name|iReservation
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|gr
operator|.
name|getGroup
argument_list|()
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"student"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|IndividualReservation
condition|)
block|{
name|IndividualReservation
name|ir
init|=
operator|(
name|IndividualReservation
operator|)
name|iReservation
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|ir
operator|.
name|getStudents
argument_list|()
control|)
block|{
if|if
condition|(
name|has
argument_list|(
name|s
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatFirstMiddleLast
argument_list|)
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
if|if
condition|(
literal|"area"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|instanceof
name|CurriculumReservation
condition|)
block|{
name|CurriculumReservation
name|cr
init|=
operator|(
name|CurriculumReservation
operator|)
name|iReservation
decl_stmt|;
if|if
condition|(
name|eq
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|cr
operator|.
name|getArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"class"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|Class_
name|c
range|:
name|iReservation
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|c
operator|.
name|getClassLabel
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|eq
argument_list|(
name|c
operator|.
name|getClassSuffix
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
literal|"config"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
for|for
control|(
name|InstrOfferingConfig
name|c
range|:
name|iReservation
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
if|if
condition|(
name|eq
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
operator|||
name|has
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|&&
literal|"expired"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|before
argument_list|(
name|iExpDate
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|attr
operator|==
literal|null
operator|||
literal|"expiration"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
operator|||
literal|"exp"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|eq
argument_list|(
name|sDateFormat
operator|.
name|format
argument_list|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
argument_list|)
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
literal|"before"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
name|Date
name|x
init|=
operator|(
literal|"today"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|?
name|iExpDate
else|:
name|sDateFormat
operator|.
name|parse
argument_list|(
name|term
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|!=
literal|null
operator|&&
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|before
argument_list|(
name|x
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
literal|"after"
operator|.
name|equals
argument_list|(
name|attr
argument_list|)
condition|)
block|{
try|try
block|{
name|Date
name|x
init|=
operator|(
literal|"today"
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|?
name|iExpDate
else|:
name|sDateFormat
operator|.
name|parse
argument_list|(
name|term
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|==
literal|null
operator|||
name|iReservation
operator|.
name|getExpirationDate
argument_list|()
operator|.
name|after
argument_list|(
name|x
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|eq
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|has
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|String
name|t
range|:
name|name
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
control|)
if|if
condition|(
name|t
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ReservationInterface
operator|.
name|Curriculum
argument_list|>
name|getCurricula
parameter_list|(
name|Long
name|offeringId
parameter_list|)
throws|throws
name|ReservationException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|List
argument_list|<
name|ReservationInterface
operator|.
name|Curriculum
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ReservationInterface
operator|.
name|Curriculum
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|ReservationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Curriculum
name|c
range|:
operator|(
name|List
argument_list|<
name|Curriculum
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c.classification.curriculum from CurriculumCourse c where c.course.instructionalOffering = :offeringId "
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"offeringId"
argument_list|,
name|offeringId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|Curriculum
name|curriculum
init|=
operator|new
name|ReservationInterface
operator|.
name|Curriculum
argument_list|()
decl_stmt|;
name|curriculum
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|area
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|area
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|area
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|area
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
else|:
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|int
name|limit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|cc
range|:
name|c
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|AcademicClassification
name|classification
init|=
name|cc
operator|.
name|getAcademicClassification
argument_list|()
decl_stmt|;
name|ReservationInterface
operator|.
name|IdName
name|clasf
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setId
argument_list|(
name|classification
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|classification
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setAbbv
argument_list|(
name|classification
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setLimit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|cr
range|:
name|cc
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|getCourse
argument_list|()
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|offeringId
argument_list|)
condition|)
block|{
name|limit
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|cr
operator|.
name|getPercShare
argument_list|()
operator|*
name|cc
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setLimit
argument_list|(
name|clasf
operator|.
name|getLimit
argument_list|()
operator|+
name|Math
operator|.
name|round
argument_list|(
name|cr
operator|.
name|getPercShare
argument_list|()
operator|*
name|cc
operator|.
name|getNrStudents
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|curriculum
operator|.
name|setLimit
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|c
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|ReservationInterface
operator|.
name|IdName
name|mj
init|=
operator|new
name|ReservationInterface
operator|.
name|IdName
argument_list|()
decl_stmt|;
name|mj
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setAbbv
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mj
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|mj
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|ReservationException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ReservationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

