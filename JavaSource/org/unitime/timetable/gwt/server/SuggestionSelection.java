begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|heuristics
operator|.
name|selection
operator|.
name|BranchBoundSelection
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Course
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|CourseRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|FreeTimeRequest
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Section
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|studentsct
operator|.
name|model
operator|.
name|Subpart
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SuggestionSelection
extends|extends
name|BranchBoundSelection
block|{
specifier|protected
name|double
name|iPreferenceWeight
init|=
literal|100000.0
decl_stmt|;
specifier|protected
name|double
name|iNoTimeWeight
init|=
literal|1.0
decl_stmt|;
specifier|protected
name|double
name|iNotAssignedWeight
init|=
literal|10000.0
decl_stmt|;
specifier|protected
name|double
name|iOnlinePenaltyWeight
init|=
literal|10.0
decl_stmt|;
specifier|protected
name|double
name|iOverlappingFreeTimeWeight
init|=
literal|10.0
decl_stmt|;
specifier|protected
name|double
name|iPriorotyFactor
init|=
literal|0.90
decl_stmt|;
specifier|protected
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|iPreferredSections
decl_stmt|,
name|iRequiredSections
decl_stmt|;
specifier|protected
name|Set
argument_list|<
name|FreeTimeRequest
argument_list|>
name|iRequiredFreeTimes
decl_stmt|;
specifier|public
name|SuggestionSelection
parameter_list|(
name|DataProperties
name|properties
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|preferredSections
parameter_list|,
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Set
argument_list|<
name|Section
argument_list|>
argument_list|>
name|requiredSections
parameter_list|,
name|Set
argument_list|<
name|FreeTimeRequest
argument_list|>
name|requiredFreeTimes
parameter_list|)
block|{
name|super
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|iPreferenceWeight
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.PreferredSectionWeight"
argument_list|,
name|iPreferenceWeight
argument_list|)
expr_stmt|;
name|iNoTimeWeight
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.NoTimeWeight"
argument_list|,
name|iNoTimeWeight
argument_list|)
expr_stmt|;
name|iNotAssignedWeight
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.NotAssignedWeight"
argument_list|,
name|iNotAssignedWeight
argument_list|)
expr_stmt|;
name|iOnlinePenaltyWeight
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.OnlinePenaltyWeight"
argument_list|,
name|iOnlinePenaltyWeight
argument_list|)
expr_stmt|;
name|iDistConfWeight
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.DistanceConflictWeight"
argument_list|,
literal|25.0
argument_list|)
expr_stmt|;
name|iOverlappingFreeTimeWeight
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.OverlappingFreeTimeWeight"
argument_list|,
name|iOverlappingFreeTimeWeight
argument_list|)
expr_stmt|;
name|iPriorotyFactor
operator|=
name|properties
operator|.
name|getPropertyDouble
argument_list|(
literal|"Suggestions.PriorityFactor"
argument_list|,
name|iPriorotyFactor
argument_list|)
expr_stmt|;
name|iPreferredSections
operator|=
name|preferredSections
expr_stmt|;
name|iRequiredSections
operator|=
name|requiredSections
expr_stmt|;
name|iMinimizePenalty
operator|=
literal|true
expr_stmt|;
name|iRequiredFreeTimes
operator|=
name|requiredFreeTimes
expr_stmt|;
block|}
specifier|public
name|Selection
name|getSelection
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
return|return
operator|new
name|Selection
argument_list|(
name|student
argument_list|)
return|;
block|}
specifier|public
class|class
name|Selection
extends|extends
name|BranchBoundSelection
operator|.
name|Selection
block|{
specifier|private
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Double
argument_list|>
name|iBestTime
init|=
operator|new
name|Hashtable
argument_list|<
name|CourseRequest
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Selection
parameter_list|(
name|Student
name|student
parameter_list|)
block|{
name|super
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|double
name|bestTime
parameter_list|(
name|Request
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|instanceof
name|FreeTimeRequest
condition|)
return|return
literal|1.0
return|;
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|r
decl_stmt|;
name|Double
name|cached
init|=
name|iBestTime
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
return|return
name|cached
operator|.
name|doubleValue
argument_list|()
return|;
name|double
name|bestTime
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Course
argument_list|>
name|e
init|=
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|e
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Course
name|course
init|=
name|e
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Config
argument_list|>
name|f
init|=
name|course
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|f
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Config
name|config
init|=
name|f
operator|.
name|next
argument_list|()
decl_stmt|;
name|int
name|nrSubpartsWithTime
init|=
literal|0
decl_stmt|;
name|subparts
label|:
for|for
control|(
name|Iterator
argument_list|<
name|Subpart
argument_list|>
name|g
init|=
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|g
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Subpart
name|subpart
init|=
name|g
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|h
init|=
name|subpart
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|h
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|h
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|nrSubpartsWithTime
operator|++
expr_stmt|;
continue|continue
name|subparts
continue|;
block|}
block|}
block|}
name|double
name|time
init|=
operator|(
operator|(
name|double
operator|)
name|nrSubpartsWithTime
operator|/
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|time
operator|>
name|bestTime
condition|)
name|bestTime
operator|=
name|time
expr_stmt|;
block|}
block|}
name|iBestTime
operator|.
name|put
argument_list|(
name|cr
argument_list|,
name|bestTime
argument_list|)
expr_stmt|;
return|return
name|bestTime
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getPenalty
parameter_list|()
block|{
name|double
name|bestPenalty
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iAssignment
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iAssignment
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|bestPenalty
operator|+=
name|getAssignmentPenalty
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
name|bestPenalty
operator|+=
name|iNotAssignedWeight
operator|*
name|Math
operator|.
name|pow
argument_list|(
name|iPriorotyFactor
argument_list|,
name|iStudent
operator|.
name|getRequests
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bestPenalty
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|protected
name|double
name|getAssignmentPenalty
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|double
name|preferredFraction
init|=
literal|0.0
decl_stmt|;
name|int
name|hasTime
init|=
literal|0
decl_stmt|;
name|double
name|noTime
init|=
literal|0
decl_stmt|;
name|int
name|penalty
init|=
literal|0
decl_stmt|;
name|int
name|freeTimeOverlap
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|iAssignment
index|[
name|i
index|]
operator|.
name|getAssignments
argument_list|()
operator|!=
literal|null
operator|&&
name|iAssignment
index|[
name|i
index|]
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|CourseRequest
name|cr
init|=
operator|(
name|CourseRequest
operator|)
name|iAssignment
index|[
name|i
index|]
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|int
name|nrPreferred
init|=
literal|0
decl_stmt|;
name|int
name|nrSelected
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Section
argument_list|>
name|preferredSections
init|=
name|iPreferredSections
operator|.
name|get
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
name|preferredSections
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|iAssignment
index|[
name|i
index|]
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferredSections
operator|.
name|contains
argument_list|(
name|section
argument_list|)
condition|)
name|nrPreferred
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|iAssignment
index|[
name|i
index|]
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cr
operator|.
name|getSelectedChoices
argument_list|()
operator|.
name|contains
argument_list|(
name|section
operator|.
name|getChoice
argument_list|()
argument_list|)
condition|)
name|nrSelected
operator|++
expr_stmt|;
block|}
block|}
name|preferredFraction
operator|=
operator|(
literal|0.67
operator|*
name|nrPreferred
operator|+
literal|0.33
operator|*
name|nrSelected
operator|)
operator|/
name|iAssignment
index|[
name|i
index|]
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Section
argument_list|>
name|j
init|=
name|iAssignment
index|[
name|i
index|]
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Section
name|section
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|section
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|hasTime
operator|++
expr_stmt|;
if|if
condition|(
name|section
operator|.
name|getPenalty
argument_list|()
operator|>
literal|0.0
condition|)
name|penalty
operator|++
expr_stmt|;
block|}
name|noTime
operator|=
name|bestTime
argument_list|(
name|iAssignment
index|[
name|i
index|]
operator|.
name|getRequest
argument_list|()
argument_list|)
operator|-
operator|(
operator|(
operator|(
name|double
operator|)
name|hasTime
operator|)
operator|/
name|iAssignment
index|[
name|i
index|]
operator|.
name|getAssignments
argument_list|()
operator|.
name|size
argument_list|()
operator|)
expr_stmt|;
name|freeTimeOverlap
operator|=
name|iStudent
operator|.
name|countFreeTimeOverlaps
argument_list|(
name|iAssignment
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|iOnlinePenaltyWeight
operator|*
name|penalty
operator|+
name|iDistConfWeight
operator|*
name|getNrDistanceConflicts
argument_list|(
name|i
argument_list|)
operator|+
operator|(
literal|1.0
operator|-
name|preferredFraction
operator|)
operator|*
name|iPreferenceWeight
operator|+
name|noTime
operator|*
name|iNoTimeWeight
operator|+
name|freeTimeOverlap
operator|*
name|iOverlappingFreeTimeWeight
return|;
block|}
specifier|public
name|boolean
name|isAllowed
parameter_list|(
name|int
name|idx
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|isCourseRequest
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|reqSections
init|=
name|iRequiredSections
operator|.
name|get
argument_list|(
operator|(
name|CourseRequest
operator|)
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqSections
operator|!=
literal|null
operator|&&
operator|!
name|reqSections
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Section
name|req
range|:
name|reqSections
control|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|contains
argument_list|(
name|req
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
block|}
block|}
if|else if
condition|(
name|iRequiredFreeTimes
operator|.
name|contains
argument_list|(
name|enrollment
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|==
literal|null
operator|||
name|enrollment
operator|.
name|getAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Enrollment
name|firstConflict
parameter_list|(
name|int
name|idx
parameter_list|,
name|Enrollment
name|enrollment
parameter_list|)
block|{
name|Enrollment
name|conflict
init|=
name|super
operator|.
name|firstConflict
argument_list|(
name|idx
argument_list|,
name|enrollment
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflict
operator|!=
literal|null
condition|)
return|return
name|conflict
return|;
return|return
operator|(
name|isAllowed
argument_list|(
name|idx
argument_list|,
name|enrollment
argument_list|)
condition|?
literal|null
else|:
name|enrollment
operator|)
return|;
block|}
specifier|protected
name|boolean
name|canLeaveUnassigned
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|instanceof
name|CourseRequest
condition|)
block|{
name|Set
argument_list|<
name|Section
argument_list|>
name|reqSections
init|=
name|iRequiredSections
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqSections
operator|!=
literal|null
operator|&&
operator|!
name|reqSections
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|iRequiredFreeTimes
operator|.
name|contains
argument_list|(
name|request
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

