begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_enum
specifier|public
enum|enum
name|DayCode
block|{
name|MON
argument_list|(
literal|64
argument_list|)
block|,
name|TUE
argument_list|(
literal|32
argument_list|)
block|,
name|WED
argument_list|(
literal|16
argument_list|)
block|,
name|THU
argument_list|(
literal|8
argument_list|)
block|,
name|FRI
argument_list|(
literal|4
argument_list|)
block|,
name|SAT
argument_list|(
literal|2
argument_list|)
block|,
name|SUN
argument_list|(
literal|1
argument_list|)
block|;
specifier|private
specifier|static
name|StudentSectioningConstants
name|CFG
init|=
name|Localization
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|iCode
decl_stmt|;
name|DayCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|iCode
operator|=
name|code
expr_stmt|;
block|}
specifier|public
name|int
name|getCode
parameter_list|()
block|{
return|return
name|iCode
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
return|return
name|CFG
operator|.
name|shortDays
argument_list|()
index|[
name|ordinal
argument_list|()
index|]
return|;
block|}
specifier|public
name|String
name|getShort
parameter_list|()
block|{
return|return
name|CFG
operator|.
name|days
argument_list|()
index|[
name|ordinal
argument_list|()
index|]
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CFG
operator|.
name|longDays
argument_list|()
index|[
name|ordinal
argument_list|()
index|]
return|;
block|}
specifier|public
specifier|static
name|int
name|nrDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
operator|(
name|days
operator|&
name|dc
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
return|return
name|nrDays
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|toDayCodes
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|dayCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
argument_list|(
name|DayCode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
operator|(
name|days
operator|&
name|dc
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|dayCodes
operator|.
name|add
argument_list|(
name|dc
argument_list|)
expr_stmt|;
return|return
name|dayCodes
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|StringBuffer
name|daysStr
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
operator|(
name|days
operator|&
name|dc
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|daysStr
operator|.
name|append
argument_list|(
name|dc
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|daysStr
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|toDayCodes
parameter_list|(
name|String
name|days
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|dayCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
argument_list|(
name|DayCode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|days
operator|.
name|indexOf
argument_list|(
name|dc
operator|.
name|getAbbv
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
name|dayCodes
operator|.
name|add
argument_list|(
name|dc
argument_list|)
expr_stmt|;
return|return
name|dayCodes
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|toDayCodes
parameter_list|(
name|Collection
argument_list|<
name|Integer
argument_list|>
name|days
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|dayCodes
init|=
operator|new
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
argument_list|(
name|DayCode
operator|.
name|values
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|dc
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
name|dayCodes
operator|.
name|add
argument_list|(
name|dc
argument_list|)
expr_stmt|;
return|return
name|dayCodes
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|days
parameter_list|)
block|{
name|StringBuffer
name|daysStr
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|days
control|)
name|daysStr
operator|.
name|append
argument_list|(
name|dc
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|daysStr
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|toInt
parameter_list|(
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|days
parameter_list|)
block|{
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|days
control|)
name|dayCode
operator||=
name|dc
operator|.
name|getCode
argument_list|()
expr_stmt|;
return|return
name|dayCode
return|;
block|}
specifier|public
name|int
name|nrDays
parameter_list|(
name|ArrayList
argument_list|<
name|DayCode
argument_list|>
name|days
parameter_list|)
block|{
return|return
name|days
operator|.
name|size
argument_list|()
return|;
block|}
block|}
end_enum

end_unit

