begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SimpleEditService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Flag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|ListItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Record
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SimpleEditInterface
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseCreditUnitType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|OfferingConsentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMinor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PositionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomFeatureType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|RoomTypeOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentSectioningStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCreditFormatDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCreditTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseCreditUnitTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|OfferingConsentTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMajorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMinorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PositionTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RolesDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|RoomFeatureTypeDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentSectioningStatusDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"simpleEdit.gwt"
argument_list|)
specifier|public
class|class
name|SimpleEditServlet
implements|implements
name|SimpleEditService
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SimpleEditServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|SimpleEditInterface
name|load
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|SimpleEditException
throws|,
name|PageAccessException
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|type2right
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
name|SimpleEditInterface
name|data
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|area
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"External Id"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Short Title"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|200
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Long Title"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|area
operator|.
name|getShortTitle
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|area
operator|.
name|getLongTitle
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|classification
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"External Id"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Code"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|500
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|major
case|:
name|List
argument_list|<
name|ListItem
argument_list|>
name|areas
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|areas
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
operator|(
name|area
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|area
operator|.
name|getShortTitle
argument_list|()
else|:
name|area
operator|.
name|getLongTitle
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"External Id"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Code"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Academic Area"
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|areas
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|major
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|major
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|major
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|area
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|minor
case|:
name|areas
operator|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|areas
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" - "
operator|+
operator|(
name|area
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|area
operator|.
name|getShortTitle
argument_list|()
else|:
name|area
operator|.
name|getLongTitle
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"External Id"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Code"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Academic Area"
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|areas
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMinor
name|minor
range|:
name|PosMinorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|minor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|minor
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicArea
name|area
range|:
name|minor
operator|.
name|getAcademicAreas
argument_list|()
control|)
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|area
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|group
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"External Id"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|120
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Code"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|50
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Students"
argument_list|,
name|FieldType
operator|.
name|students
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentGroup
name|group
range|:
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|group
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|students
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Student
name|student
range|:
operator|new
name|TreeSet
argument_list|<
name|Student
argument_list|>
argument_list|(
name|group
operator|.
name|getStudents
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
name|students
operator|+=
literal|"\n"
expr_stmt|;
name|students
operator|+=
name|student
operator|.
name|getExternalUniqueId
argument_list|()
operator|+
literal|" "
operator|+
name|student
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastFirstMiddle
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|students
argument_list|,
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|consent
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|data
operator|.
name|setAddable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|OfferingConsentType
name|consent
range|:
name|OfferingConsentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|consent
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|consent
operator|.
name|getReference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|consent
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|consent
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|creditFormat
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|data
operator|.
name|setAddable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseCreditFormat
name|credit
range|:
name|CourseCreditFormatDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|credit
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|creditType
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseCreditType
name|credit
range|:
name|CourseCreditTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|int
name|used
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(c) from CourseCreditUnitConfig c where c.creditType.uniqueId = :uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|used
operator|==
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|credit
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|creditUnit
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseCreditUnitType
name|credit
range|:
name|CourseCreditUnitTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|int
name|used
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(c) from CourseCreditUnitConfig c where c.creditUnitType.uniqueId = :uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|used
operator|==
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|credit
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|position
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Sort Order"
argument_list|,
name|FieldType
operator|.
name|number
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0000"
argument_list|)
decl_stmt|;
for|for
control|(
name|PositionType
name|position
range|:
name|PositionTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|int
name|used
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(f) from Staff f where f.positionType.uniqueId = :uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|position
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|+
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(f) from DepartmentalInstructor f where f.positionType.uniqueId = :uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|position
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|position
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|used
operator|==
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|position
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|position
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|df
operator|.
name|format
argument_list|(
name|position
operator|.
name|getSortOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sectioning
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Access"
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Advisor"
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Email"
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Message"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|400
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|status
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|status
operator|.
name|hasOption
argument_list|(
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|status
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|roles
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|250
argument_list|,
literal|40
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Instructor"
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Enabled"
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Sort Order"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Roles
name|role
range|:
name|Roles
operator|.
name|findAll
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
argument_list|,
operator|(
name|role
operator|.
name|isManager
argument_list|()
operator|||
name|role
operator|.
name|isInstructor
argument_list|()
operator|)
operator|&&
operator|!
name|role
operator|.
name|isUsed
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|role
operator|.
name|getReference
argument_list|()
argument_list|,
name|role
operator|.
name|isManager
argument_list|()
operator|||
name|role
operator|.
name|isInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|role
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|role
operator|.
name|isInstructor
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|role
operator|.
name|isEnabled
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|permissions
case|:
name|List
argument_list|<
name|Roles
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|Roles
argument_list|>
argument_list|(
name|Roles
operator|.
name|findAll
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
literal|2
operator|+
name|roles
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|fields
index|[
literal|0
index|]
operator|=
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|200
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
name|fields
index|[
literal|1
index|]
operator|=
operator|new
name|Field
argument_list|(
literal|"Level"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|200
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fields
index|[
literal|2
operator|+
name|i
index|]
operator|=
operator|new
name|Field
argument_list|(
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getReference
argument_list|()
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|,
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isEnabled
argument_list|()
condition|?
literal|null
else|:
name|Flag
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|data
operator|.
name|setAddable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSaveOrder
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Right
name|right
range|:
name|Right
operator|.
name|values
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
operator|(
name|long
operator|)
name|right
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|right
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|right
operator|.
name|hasType
argument_list|()
condition|?
name|right
operator|.
name|type
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"(\\p{Ll})(\\p{Lu})"
argument_list|,
literal|"$1 $2"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"_"
argument_list|,
literal|" "
argument_list|)
else|:
literal|"Global"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|r
operator|.
name|setField
argument_list|(
literal|2
operator|+
name|i
argument_list|,
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRights
argument_list|()
operator|.
name|contains
argument_list|(
name|right
operator|.
name|name
argument_list|()
argument_list|)
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|examType
case|:
name|List
argument_list|<
name|ListItem
argument_list|>
name|types
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ExamType
operator|.
name|sExamTypeFinal
argument_list|)
argument_list|,
literal|"Final Examinations"
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ExamType
operator|.
name|sExamTypeMidterm
argument_list|)
argument_list|,
literal|"Midterm Examinations"
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Reference"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Type"
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|types
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|ExamType
name|xtype
range|:
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|xtype
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|xtype
operator|.
name|getReference
argument_list|()
argument_list|,
operator|!
name|xtype
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"final"
argument_list|)
operator|&&
operator|!
name|xtype
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"midterm"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|xtype
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|xtype
operator|.
name|getType
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
operator|!
name|xtype
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"final"
argument_list|)
operator|&&
operator|!
name|xtype
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"midterm"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
operator|!
name|xtype
operator|.
name|isUsed
argument_list|(
literal|null
argument_list|)
operator|&&
operator|!
name|xtype
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"final"
argument_list|)
operator|&&
operator|!
name|xtype
operator|.
name|getReference
argument_list|()
operator|.
name|equals
argument_list|(
literal|"midterm"
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|eventRoomType
case|:
name|List
argument_list|<
name|ListItem
argument_list|>
name|states
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomTypeOption
operator|.
name|Status
name|state
range|:
name|RoomTypeOption
operator|.
name|Status
operator|.
name|values
argument_list|()
control|)
block|{
name|states
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|state
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Department"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Room Type"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|100
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Status"
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|states
argument_list|,
name|Flag
operator|.
name|NOT_EMPTY
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Message"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|500
argument_list|,
literal|200
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Break Time"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Sort Order"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|80
argument_list|,
literal|10
argument_list|,
name|Flag
operator|.
name|READ_ONLY
argument_list|,
name|Flag
operator|.
name|HIDDEN
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|data
operator|.
name|setAddable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|long
name|id
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.roomType from Room r where r.eventDepartment.uniqueId = :departmentId order by r.roomType.ord, r.roomType.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|id
operator|++
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|department
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|option
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|option
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|roomType
operator|.
name|getOrd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.roomType from NonUniversityLocation r where r.eventDepartment.uniqueId = :departmentId order by r.roomType.ord, r.roomType.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|id
operator|++
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|department
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|3
argument_list|,
name|option
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|option
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|4
argument_list|,
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|5
argument_list|,
name|roomType
operator|.
name|getOrd
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|featureType
case|:
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Abbreviation"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|160
argument_list|,
literal|20
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Name"
argument_list|,
name|FieldType
operator|.
name|text
argument_list|,
literal|300
argument_list|,
literal|60
argument_list|,
name|Flag
operator|.
name|UNIQUE
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Event Management"
argument_list|,
name|FieldType
operator|.
name|toggle
argument_list|,
literal|40
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|RoomFeatureType
name|ftype
range|:
name|RoomFeatureTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|ftype
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|ftype
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|ftype
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|ftype
operator|.
name|isShowInEventManagement
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|int
name|used
init|=
operator|(
operator|(
name|Number
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select count(f) from RoomFeature f where f.featureType.uniqueId = :uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"uniqueId"
argument_list|,
name|ftype
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|used
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|instructorRole
case|:
name|List
argument_list|<
name|ListItem
argument_list|>
name|departments
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ListItem
argument_list|>
name|instructorRoles
init|=
operator|new
name|ArrayList
argument_list|<
name|ListItem
argument_list|>
argument_list|()
decl_stmt|;
name|instructorRoles
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Roles
name|role
range|:
name|Roles
operator|.
name|findAllInstructorRoles
argument_list|()
control|)
block|{
name|instructorRoles
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|role
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|role
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|data
operator|=
operator|new
name|SimpleEditInterface
argument_list|(
name|type
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Department"
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|160
argument_list|,
name|departments
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Instructor"
argument_list|,
name|FieldType
operator|.
name|person
argument_list|,
literal|300
argument_list|)
argument_list|,
operator|new
name|Field
argument_list|(
literal|"Role"
argument_list|,
name|FieldType
operator|.
name|list
argument_list|,
literal|300
argument_list|,
name|instructorRoles
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|setSortBy
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|deptIndep
init|=
name|sessionContext
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAuthority
argument_list|()
operator|.
name|hasRight
argument_list|(
name|Right
operator|.
name|DepartmentIndependent
argument_list|)
decl_stmt|;
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
name|departments
operator|.
name|add
argument_list|(
operator|new
name|ListItem
argument_list|(
name|department
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor i where i.department.uniqueId = :departmentId and i.externalUniqueId is not null order by i.lastName, i.firstName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
name|deptIndep
operator|&&
name|instructor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|Record
name|r
init|=
name|data
operator|.
name|addRecord
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|addToField
argument_list|(
literal|1
argument_list|,
name|instructor
operator|.
name|getLastName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addToField
argument_list|(
literal|1
argument_list|,
name|instructor
operator|.
name|getFirstName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addToField
argument_list|(
literal|1
argument_list|,
name|instructor
operator|.
name|getMiddleName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addToField
argument_list|(
literal|1
argument_list|,
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addToField
argument_list|(
literal|1
argument_list|,
name|instructor
operator|.
name|getEmail
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|2
argument_list|,
name|instructor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getRole
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setDeletable
argument_list|(
name|deptIndep
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
name|data
operator|.
name|setEditable
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|type2editRight
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SimpleEditException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SimpleEditException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SimpleEditInterface
name|save
parameter_list|(
name|SimpleEditInterface
name|data
parameter_list|)
throws|throws
name|SimpleEditException
throws|,
name|PageAccessException
block|{
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|type2editRight
argument_list|(
name|data
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hibSession
operator|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|data
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|area
case|:
for|for
control|(
name|AcademicArea
name|area
range|:
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|area
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|area
operator|.
name|getLongTitle
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|area
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getShortTitle
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|area
operator|.
name|getLongTitle
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|area
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setAcademicAreaAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setShortTitle
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setLongTitle
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|area
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|area
operator|.
name|getLongTitle
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|AcademicArea
name|area
init|=
operator|new
name|AcademicArea
argument_list|()
decl_stmt|;
name|area
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setAcademicAreaAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setShortTitle
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setLongTitle
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|area
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|area
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|area
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|area
operator|.
name|getLongTitle
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|classification
case|:
for|for
control|(
name|AcademicClassification
name|clasf
range|:
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|clasf
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|clasf
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCode
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|clasf
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|AcademicClassification
name|clasf
init|=
operator|new
name|AcademicClassification
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCode
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|clasf
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|clasf
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|clasf
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|major
case|:
for|for
control|(
name|PosMajor
name|major
range|:
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|major
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|major
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|major
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|major
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|setCode
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AcademicArea
argument_list|>
name|delete
init|=
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|(
name|major
operator|.
name|getAcademicAreas
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|areaId
range|:
name|r
operator|.
name|getValues
argument_list|(
literal|3
argument_list|)
control|)
block|{
name|AcademicArea
name|area
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|areaId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|delete
operator|.
name|remove
argument_list|(
name|area
argument_list|)
condition|)
block|{
name|major
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|AcademicArea
name|area
range|:
name|delete
control|)
block|{
name|major
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|remove
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMajors
argument_list|()
operator|.
name|remove
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|major
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|major
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|major
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|PosMajor
name|major
init|=
operator|new
name|PosMajor
argument_list|()
decl_stmt|;
name|major
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|setCode
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|major
operator|.
name|setAcademicAreas
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|areaId
range|:
name|r
operator|.
name|getValues
argument_list|(
literal|3
argument_list|)
control|)
block|{
name|AcademicArea
name|area
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|areaId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|major
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMajors
argument_list|()
operator|.
name|add
argument_list|(
name|major
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|major
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|major
argument_list|,
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|major
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|minor
case|:
for|for
control|(
name|PosMinor
name|minor
range|:
name|PosMinorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|minor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|minor
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|minor
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|minor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|minor
operator|.
name|getCode
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|minor
operator|.
name|getName
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|minor
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setCode
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|AcademicArea
argument_list|>
name|delete
init|=
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|(
name|minor
operator|.
name|getAcademicAreas
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|areaId
range|:
name|r
operator|.
name|getValues
argument_list|(
literal|3
argument_list|)
control|)
block|{
name|AcademicArea
name|area
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|areaId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|delete
operator|.
name|remove
argument_list|(
name|area
argument_list|)
condition|)
block|{
name|minor
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|AcademicArea
name|area
range|:
name|delete
control|)
block|{
name|minor
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|remove
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMinors
argument_list|()
operator|.
name|remove
argument_list|(
name|minor
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|minor
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|minor
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|PosMinor
name|minor
init|=
operator|new
name|PosMinor
argument_list|()
decl_stmt|;
name|minor
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setCode
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|minor
operator|.
name|setAcademicAreas
argument_list|(
operator|new
name|HashSet
argument_list|<
name|AcademicArea
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|areaId
range|:
name|r
operator|.
name|getValues
argument_list|(
literal|3
argument_list|)
control|)
block|{
name|AcademicArea
name|area
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|areaId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|minor
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|add
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|area
operator|.
name|getPosMinors
argument_list|()
operator|.
name|add
argument_list|(
name|minor
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|minor
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|minor
argument_list|,
name|minor
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|minor
operator|.
name|getName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|group
case|:
for|for
control|(
name|StudentGroup
name|group
range|:
name|StudentGroupDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findBySession
argument_list|(
name|hibSession
argument_list|,
name|sessionId
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|group
argument_list|,
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|group
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setGroupAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setGroupName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|getExternalUniqueId
argument_list|()
operator|==
literal|null
operator|&&
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
name|students
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Student
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Student
name|s
range|:
name|group
operator|.
name|getStudents
argument_list|()
control|)
name|students
operator|.
name|put
argument_list|(
name|s
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|s
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|line
range|:
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
control|)
block|{
name|String
name|extId
init|=
operator|(
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|?
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
else|:
name|line
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|extId
operator|.
name|isEmpty
argument_list|()
operator|||
name|students
operator|.
name|remove
argument_list|(
name|extId
argument_list|)
operator|!=
literal|null
condition|)
continue|continue;
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|sessionId
argument_list|,
name|extId
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
block|{
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|students
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|removeAll
argument_list|(
name|students
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|group
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|group
argument_list|,
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|StudentGroup
name|group
init|=
operator|new
name|StudentGroup
argument_list|()
decl_stmt|;
name|group
operator|.
name|setExternalUniqueId
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setGroupAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setGroupName
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setSession
argument_list|(
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|.
name|setStudents
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Student
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|s
range|:
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
control|)
block|{
if|if
condition|(
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>=
literal|0
condition|)
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|Student
name|student
init|=
name|Student
operator|.
name|findByExternalId
argument_list|(
name|sessionId
argument_list|,
name|s
operator|.
name|trim
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|!=
literal|null
condition|)
name|group
operator|.
name|getStudents
argument_list|()
operator|.
name|add
argument_list|(
name|student
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|group
argument_list|,
name|group
operator|.
name|getGroupAbbreviation
argument_list|()
operator|+
literal|" "
operator|+
name|group
operator|.
name|getGroupName
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|consent
case|:
for|for
control|(
name|OfferingConsentType
name|consent
range|:
name|OfferingConsentTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|consent
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|consent
argument_list|,
name|consent
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|consent
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|consent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|consent
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|consent
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|consent
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|consent
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|setAbbv
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|consent
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|consent
argument_list|,
name|consent
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|consent
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|OfferingConsentType
name|consent
init|=
operator|new
name|OfferingConsentType
argument_list|()
decl_stmt|;
name|consent
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|consent
operator|.
name|setAbbv
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|consent
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|consent
argument_list|,
name|consent
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|consent
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|creditFormat
case|:
for|for
control|(
name|CourseCreditFormat
name|credit
range|:
name|CourseCreditFormatDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|CourseCreditFormat
name|credit
init|=
operator|new
name|CourseCreditFormat
argument_list|()
decl_stmt|;
name|credit
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|creditType
case|:
for|for
control|(
name|CourseCreditType
name|credit
range|:
name|CourseCreditTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|CourseCreditType
name|credit
init|=
operator|new
name|CourseCreditType
argument_list|()
decl_stmt|;
name|credit
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|creditUnit
case|:
for|for
control|(
name|CourseCreditUnitType
name|credit
range|:
name|CourseCreditUnitTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|credit
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|credit
operator|.
name|getAbbreviation
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|credit
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|CourseCreditUnitType
name|credit
init|=
operator|new
name|CourseCreditUnitType
argument_list|()
decl_stmt|;
name|credit
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|credit
operator|.
name|setAbbreviation
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|credit
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|credit
argument_list|,
name|credit
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|credit
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|position
case|:
for|for
control|(
name|PositionType
name|position
range|:
name|PositionTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|position
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|position
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|position
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|position
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|position
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|position
operator|.
name|getSortOrder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|position
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|.
name|setSortOrder
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|position
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|position
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|PositionType
name|position
init|=
operator|new
name|PositionType
argument_list|()
decl_stmt|;
name|position
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|position
operator|.
name|setSortOrder
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|position
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|position
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|sectioning
case|:
for|for
control|(
name|StudentSectioningStatus
name|status
range|:
name|StudentSectioningStatusDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|status
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|status
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
operator|.
name|toggle
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
operator|.
name|toggle
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
operator|.
name|toggle
argument_list|()
expr_stmt|;
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getStatus
argument_list|()
argument_list|,
name|value
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|status
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|status
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|status
operator|.
name|setMessage
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|status
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|status
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|StudentSectioningStatus
name|status
init|=
operator|new
name|StudentSectioningStatus
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|enabled
operator|.
name|toggle
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|advisor
operator|.
name|toggle
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
condition|)
name|value
operator|+=
name|StudentSectioningStatus
operator|.
name|Option
operator|.
name|email
operator|.
name|toggle
argument_list|()
expr_stmt|;
name|status
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|status
operator|.
name|setMessage
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|status
argument_list|,
name|status
operator|.
name|getReference
argument_list|()
operator|+
literal|" "
operator|+
name|status
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|roles
case|:
for|for
control|(
name|Roles
name|role
range|:
name|RolesDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|()
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|role
operator|.
name|getRoleId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|role
operator|.
name|isManager
argument_list|()
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Role "
operator|+
name|role
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" cannot be deleted."
argument_list|)
throw|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|role
argument_list|,
name|role
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" role"
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|changed
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|role
operator|.
name|isInstructor
argument_list|()
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|role
operator|.
name|isEnabled
argument_list|()
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|role
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setAbbv
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setInstructor
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setEnabled
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|changed
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|role
argument_list|,
name|role
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" role"
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|Roles
name|role
init|=
operator|new
name|Roles
argument_list|()
decl_stmt|;
name|role
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setAbbv
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setInstructor
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setEnabled
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|role
operator|.
name|setManager
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|role
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|role
argument_list|,
name|role
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" role"
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|permissions
case|:
name|List
argument_list|<
name|Roles
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|Roles
argument_list|>
argument_list|(
name|Roles
operator|.
name|findAll
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Roles
argument_list|>
name|changed
init|=
operator|new
name|HashSet
argument_list|<
name|Roles
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
name|Right
name|right
init|=
name|Right
operator|.
name|values
argument_list|()
index|[
operator|(
name|int
operator|)
name|r
operator|.
name|getUniqueId
argument_list|()
operator|.
name|longValue
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|roles
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|newValue
init|=
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|oldValue
init|=
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRights
argument_list|()
operator|.
name|contains
argument_list|(
name|right
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newValue
operator|!=
name|oldValue
condition|)
block|{
name|changed
operator|.
name|add
argument_list|(
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|newValue
condition|)
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRights
argument_list|()
operator|.
name|add
argument_list|(
name|right
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|roles
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getRights
argument_list|()
operator|.
name|remove
argument_list|(
name|right
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Roles
name|role
range|:
name|changed
control|)
block|{
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|role
argument_list|,
name|role
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" permissions"
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|examType
case|:
for|for
control|(
name|ExamType
name|type
range|:
name|ExamTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|type
operator|.
name|isUsed
argument_list|(
literal|null
argument_list|)
condition|)
throw|throw
operator|new
name|SimpleEditException
argument_list|(
literal|"Attempted to delete an examination type "
operator|+
name|type
operator|.
name|getReference
argument_list|()
operator|+
literal|" that is being used."
argument_list|)
throw|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|type
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|typeChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getType
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setType
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|type
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|ExamType
name|type
init|=
operator|new
name|ExamType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setType
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|type
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|eventRoomType
case|:
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.roomType from Room r where r.eventDepartment.uniqueId = :departmentId order by r.roomType.ord, r.roomType.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|&&
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|optionChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setStatus
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMessage
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|RoomType
name|roomType
range|:
operator|(
name|List
argument_list|<
name|RoomType
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct r.roomType from NonUniversityLocation r where r.eventDepartment.uniqueId = :departmentId order by r.roomType.ord, r.roomType.label"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|RoomTypeOption
name|option
init|=
name|roomType
operator|.
name|getOption
argument_list|(
name|department
argument_list|)
decl_stmt|;
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getRecords
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|department
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|&&
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|roomType
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|optionChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
name|RoomTypeOption
operator|.
name|getDefaultStatus
argument_list|()
else|:
name|option
operator|.
name|getStatus
argument_list|()
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getMessage
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getBreakTime
argument_list|()
operator|==
literal|null
condition|?
literal|"0"
else|:
name|option
operator|.
name|getBreakTime
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|option
operator|.
name|setStatus
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setMessage
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|option
operator|.
name|setBreakTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
argument_list|,
name|option
operator|.
name|getRoomType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|option
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
break|break;
case|case
name|featureType
case|:
for|for
control|(
name|RoomFeatureType
name|type
range|:
name|RoomFeatureTypeDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|findAll
argument_list|(
name|hibSession
argument_list|)
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|type
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|type
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|typeChanged
init|=
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getLabel
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|ToolBox
operator|.
name|equals
argument_list|(
name|type
operator|.
name|getShowInEventManagement
argument_list|()
argument_list|,
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setShowInEventManagement
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|typeChanged
condition|)
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|type
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
name|RoomFeatureType
name|type
init|=
operator|new
name|RoomFeatureType
argument_list|()
decl_stmt|;
name|type
operator|.
name|setReference
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setLabel
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|type
operator|.
name|setShowInEventManagement
argument_list|(
literal|"true"
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|type
argument_list|,
name|type
operator|.
name|getReference
argument_list|()
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|instructorRole
case|:
for|for
control|(
name|Department
name|department
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|sessionContext
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|isAllowEvents
argument_list|()
condition|)
continue|continue;
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
name|instructors
init|=
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from DepartmentalInstructor i where i.department.uniqueId = :departmentId and i.externalUniqueId is not null order by i.lastName, i.firstName"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"departmentId"
argument_list|,
name|department
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
name|instructors
control|)
block|{
name|Record
name|r
init|=
name|data
operator|.
name|getRecord
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|instructor
operator|.
name|setRole
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|instructor
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
operator|+
literal|": No Role"
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ToolBox
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getRole
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
continue|continue;
name|instructor
operator|.
name|setRole
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|==
literal|null
operator|||
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|RolesDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|instructor
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|instructor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|?
literal|"No Role"
else|:
name|instructor
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Record
name|r
range|:
name|data
operator|.
name|getNewRecords
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|department
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
operator|||
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|name
init|=
name|r
operator|.
name|getValues
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DepartmentalInstructor
name|instructor
init|=
literal|null
decl_stmt|;
name|boolean
name|add
init|=
literal|true
decl_stmt|;
for|for
control|(
name|DepartmentalInstructor
name|i
range|:
name|instructors
control|)
if|if
condition|(
name|name
index|[
literal|3
index|]
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|)
condition|)
block|{
name|instructor
operator|=
name|i
expr_stmt|;
name|add
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
block|{
name|instructor
operator|=
operator|new
name|DepartmentalInstructor
argument_list|()
expr_stmt|;
name|instructor
operator|.
name|setExternalUniqueId
argument_list|(
name|name
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setLastName
argument_list|(
name|name
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setFirstName
argument_list|(
name|name
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setMiddleName
argument_list|(
name|name
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|name
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setEmail
argument_list|(
name|name
operator|.
name|length
operator|<=
literal|4
operator|||
name|name
index|[
literal|4
index|]
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|name
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setIgnoreToFar
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setDepartment
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setRole
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|==
literal|null
operator|||
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|RolesDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|setUniqueId
argument_list|(
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|setUniqueId
argument_list|(
name|instructor
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|setRole
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|==
literal|null
operator|||
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|RolesDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|getField
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|update
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setDeletable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|0
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setField
argument_list|(
literal|1
argument_list|,
name|r
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|instructor
argument_list|,
name|instructor
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatLastInitial
argument_list|)
operator|+
literal|": "
operator|+
operator|(
name|instructor
operator|.
name|getRole
argument_list|()
operator|==
literal|null
condition|?
literal|"No Role"
else|:
name|instructor
operator|.
name|getRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|,
name|Source
operator|.
name|SIMPLE_EDIT
argument_list|,
operator|(
name|add
condition|?
name|Operation
operator|.
name|CREATE
else|:
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
literal|null
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Record
argument_list|>
name|i
init|=
name|data
operator|.
name|getRecords
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|==
literal|null
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SimpleEditException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SimpleEditException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|hibSession
operator|!=
literal|null
operator|&&
name|hibSession
operator|.
name|isOpen
argument_list|()
condition|)
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
if|if
condition|(
name|user
operator|.
name|getCurrentAuthority
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
literal|"Insufficient user privileges."
argument_list|)
throw|;
return|return
name|sessionId
return|;
block|}
specifier|private
name|Right
name|type2right
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|area
case|:
return|return
name|Right
operator|.
name|AcademicAreas
return|;
case|case
name|classification
case|:
return|return
name|Right
operator|.
name|AcademicClassifications
return|;
case|case
name|major
case|:
return|return
name|Right
operator|.
name|Majors
return|;
case|case
name|minor
case|:
return|return
name|Right
operator|.
name|Minors
return|;
case|case
name|group
case|:
return|return
name|Right
operator|.
name|StudentGroups
return|;
case|case
name|consent
case|:
return|return
name|Right
operator|.
name|OfferingConsentTypes
return|;
case|case
name|creditFormat
case|:
return|return
name|Right
operator|.
name|CourseCreditFormats
return|;
case|case
name|creditType
case|:
return|return
name|Right
operator|.
name|CourseCreditTypes
return|;
case|case
name|creditUnit
case|:
return|return
name|Right
operator|.
name|CourseCreditUnits
return|;
case|case
name|position
case|:
return|return
name|Right
operator|.
name|PositionTypes
return|;
case|case
name|sectioning
case|:
return|return
name|Right
operator|.
name|StudentSchedulingStatusTypes
return|;
case|case
name|roles
case|:
return|return
name|Right
operator|.
name|Roles
return|;
case|case
name|permissions
case|:
return|return
name|Right
operator|.
name|Permissions
return|;
case|case
name|examType
case|:
return|return
name|Right
operator|.
name|ExamTypes
return|;
case|case
name|eventRoomType
case|:
return|return
name|Right
operator|.
name|EventRoomTypes
return|;
case|case
name|featureType
case|:
return|return
name|Right
operator|.
name|RoomFeatures
return|;
case|case
name|instructorRole
case|:
return|return
name|Right
operator|.
name|InstructorRoles
return|;
default|default:
return|return
name|Right
operator|.
name|IsAdmin
return|;
block|}
block|}
specifier|private
name|Right
name|type2editRight
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|area
case|:
return|return
name|Right
operator|.
name|AcademicAreaEdit
return|;
case|case
name|classification
case|:
return|return
name|Right
operator|.
name|AcademicClassificationEdit
return|;
case|case
name|major
case|:
return|return
name|Right
operator|.
name|MajorEdit
return|;
case|case
name|minor
case|:
return|return
name|Right
operator|.
name|MinorEdit
return|;
case|case
name|group
case|:
return|return
name|Right
operator|.
name|StudentGroupEdit
return|;
case|case
name|consent
case|:
return|return
name|Right
operator|.
name|OfferingConsentTypeEdit
return|;
case|case
name|creditFormat
case|:
return|return
name|Right
operator|.
name|CourseCreditFormatEdit
return|;
case|case
name|creditType
case|:
return|return
name|Right
operator|.
name|CourseCreditTypeEdit
return|;
case|case
name|creditUnit
case|:
return|return
name|Right
operator|.
name|CourseCreditUnitEdit
return|;
case|case
name|position
case|:
return|return
name|Right
operator|.
name|PositionTypeEdit
return|;
case|case
name|sectioning
case|:
return|return
name|Right
operator|.
name|StudentSchedulingStatusTypeEdit
return|;
case|case
name|roles
case|:
return|return
name|Right
operator|.
name|RoleEdit
return|;
case|case
name|permissions
case|:
return|return
name|Right
operator|.
name|PermissionEdit
return|;
case|case
name|examType
case|:
return|return
name|Right
operator|.
name|ExamTypeEdit
return|;
case|case
name|eventRoomType
case|:
return|return
name|Right
operator|.
name|EventRoomTypeEdit
return|;
case|case
name|featureType
case|:
return|return
name|Right
operator|.
name|RoomFeatureTypeEdit
return|;
case|case
name|instructorRole
case|:
return|return
name|Right
operator|.
name|InstructorRoleEdit
return|;
default|default:
return|return
name|Right
operator|.
name|IsAdmin
return|;
block|}
block|}
block|}
end_class

end_unit

