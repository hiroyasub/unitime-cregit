begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingEnumeration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|NamingException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|InitialDirContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchControls
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|naming
operator|.
name|directory
operator|.
name|SearchResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|LookupService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|LookupException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PersonInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidTranslation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|interfaces
operator|.
name|ExternalUidTranslation
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|EventContact
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Staff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentalInstructorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventContactDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StaffDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|TimetableManagerDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|server
operator|.
name|rpc
operator|.
name|RemoteServiceServlet
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|LookupServlet
extends|extends
name|RemoteServiceServlet
implements|implements
name|LookupService
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7266424119672666037L
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|LookupServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|ExternalUidTranslation
name|iTranslation
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.externalUid.translation"
argument_list|)
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|iTranslation
operator|=
operator|(
name|ExternalUidTranslation
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.externalUid.translation"
argument_list|)
argument_list|)
operator|.
name|getConstructor
argument_list|()
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
literal|"Unable to instantiate external uid translation class, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
name|User
name|user
init|=
name|Web
operator|.
name|getUser
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|LookupException
argument_list|(
literal|"not authenticated"
argument_list|)
throw|;
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|LookupException
argument_list|(
literal|"academic session not selected"
argument_list|)
throw|;
return|return
name|sessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PersonInterface
argument_list|>
name|lookupPeople
parameter_list|(
name|String
name|query
parameter_list|,
name|String
name|options
parameter_list|)
throws|throws
name|LookupException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|boolean
name|displayWithoutId
init|=
literal|true
decl_stmt|;
name|int
name|maxResults
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|ldap
init|=
literal|true
decl_stmt|,
name|students
init|=
literal|true
decl_stmt|,
name|staff
init|=
literal|true
decl_stmt|,
name|managers
init|=
literal|true
decl_stmt|,
name|events
init|=
literal|true
decl_stmt|,
name|instructors
init|=
literal|true
decl_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|option
range|:
name|options
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|option
operator|=
name|option
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"mustHaveExternalId"
argument_list|)
condition|)
name|displayWithoutId
operator|=
literal|false
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|equals
argument_list|(
literal|"allowNoExternalId"
argument_list|)
condition|)
name|displayWithoutId
operator|=
literal|true
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"mustHaveExternalId="
argument_list|)
condition|)
name|displayWithoutId
operator|=
operator|!
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|"mustHaveExternalId="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"maxResults="
argument_list|)
condition|)
name|maxResults
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|"maxResults="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|options
operator|.
name|startsWith
argument_list|(
literal|"session="
argument_list|)
condition|)
name|sessionId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|option
operator|.
name|substring
argument_list|(
literal|"session="
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|option
operator|.
name|startsWith
argument_list|(
literal|"source="
argument_list|)
condition|)
block|{
name|ldap
operator|=
name|students
operator|=
name|staff
operator|=
name|managers
operator|=
name|events
operator|=
name|instructors
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|option
operator|.
name|substring
argument_list|(
literal|"source="
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
control|)
block|{
if|if
condition|(
literal|"ldap"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|ldap
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"students"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|students
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"staff"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|staff
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"managers"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|managers
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"events"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|events
operator|=
literal|true
expr_stmt|;
if|if
condition|(
literal|"instructors"
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
name|instructors
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
init|=
operator|new
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|q
init|=
name|query
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|ldap
condition|)
name|findPeopleFromLdap
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|students
condition|)
name|findPeopleFromStudents
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
name|q
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructors
condition|)
name|findPeopleFromInstructors
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
name|q
argument_list|,
name|sessionId
argument_list|)
expr_stmt|;
if|if
condition|(
name|staff
condition|)
name|findPeopleFromStaff
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|managers
condition|)
name|findPeopleFromTimetableManagers
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
name|q
argument_list|)
expr_stmt|;
if|if
condition|(
name|events
condition|)
name|findPeopleFromEventContact
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
name|q
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PersonInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|PersonInterface
argument_list|>
argument_list|(
name|people
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|displayWithoutId
condition|)
name|ret
operator|.
name|addAll
argument_list|(
name|peopleWithoutId
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxResults
operator|>
literal|0
operator|&&
name|ret
operator|.
name|size
argument_list|()
operator|>
name|maxResults
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|PersonInterface
argument_list|>
argument_list|(
name|ret
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|maxResults
argument_list|)
argument_list|)
return|;
block|}
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|LookupException
condition|)
throw|throw
operator|(
name|LookupException
operator|)
name|e
throw|;
name|sLog
operator|.
name|error
argument_list|(
literal|"Lookup failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|LookupException
argument_list|(
literal|"Lookup failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|addPerson
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|PersonInterface
name|person
parameter_list|)
block|{
if|if
condition|(
name|person
operator|.
name|getId
argument_list|()
operator|==
literal|null
operator|||
name|person
operator|.
name|getId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"null"
operator|.
name|equals
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|peopleWithoutId
operator|.
name|add
argument_list|(
name|person
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PersonInterface
name|old
init|=
name|people
operator|.
name|get
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|==
literal|null
condition|)
block|{
name|people
operator|.
name|put
argument_list|(
name|person
operator|.
name|getId
argument_list|()
argument_list|,
name|person
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|old
operator|.
name|merge
argument_list|(
name|person
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|String
name|translate
parameter_list|(
name|String
name|uid
parameter_list|,
name|Source
name|source
parameter_list|)
block|{
if|if
condition|(
name|iTranslation
operator|==
literal|null
operator|||
name|uid
operator|==
literal|null
operator|||
name|source
operator|.
name|equals
argument_list|(
name|Source
operator|.
name|User
argument_list|)
condition|)
return|return
name|uid
return|;
if|if
condition|(
name|uid
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iTranslation
operator|.
name|translate
argument_list|(
name|uid
argument_list|,
name|source
argument_list|,
name|Source
operator|.
name|User
argument_list|)
return|;
block|}
specifier|protected
name|void
name|findPeopleFromStaff
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from Staff s where "
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
decl_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.middleName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.lastName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.email) like '"
operator|+
name|t
operator|+
literal|"%')"
expr_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|StaffDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Staff
name|staff
init|=
operator|(
name|Staff
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addPerson
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|staff
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Staff
argument_list|)
argument_list|,
name|staff
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|staff
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|staff
operator|.
name|getLastName
argument_list|()
argument_list|,
name|staff
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
name|staff
operator|.
name|getDept
argument_list|()
argument_list|,
operator|(
name|staff
operator|.
name|getPositionType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|staff
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
literal|"Staff"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromEventContact
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from EventContact s where "
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
decl_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.middleName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.lastName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.emailAddress) like '"
operator|+
name|t
operator|+
literal|"%')"
expr_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|EventContactDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|EventContact
name|contact
init|=
operator|(
name|EventContact
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addPerson
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|contact
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|User
argument_list|)
argument_list|,
name|contact
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|contact
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|contact
operator|.
name|getLastName
argument_list|()
argument_list|,
name|contact
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
name|contact
operator|.
name|getPhone
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Event Contacts"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromInstructors
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|String
name|query
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from DepartmentalInstructor s where s.department.session.uniqueId="
operator|+
name|sessionId
operator|+
literal|" and "
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
decl_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.middleName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.lastName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.email) like '"
operator|+
name|t
operator|+
literal|"%')"
expr_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|DepartmentalInstructorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DepartmentalInstructor
name|instructor
init|=
operator|(
name|DepartmentalInstructor
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addPerson
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|instructor
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Staff
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|instructor
operator|.
name|getFirstName
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|instructor
operator|.
name|getMiddleName
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|instructor
operator|.
name|getLastName
argument_list|()
argument_list|)
argument_list|,
name|instructor
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|instructor
operator|.
name|getPositionType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
argument_list|,
literal|"Instructors"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromStudents
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|String
name|query
parameter_list|,
name|Long
name|sessionId
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from Student s where s.session.uniqueId="
operator|+
name|sessionId
operator|+
literal|" and "
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
decl_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.middleName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.lastName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.email) like '"
operator|+
name|t
operator|+
literal|"%')"
expr_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Student
name|student
init|=
operator|(
name|Student
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addPerson
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|student
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|Student
argument_list|)
argument_list|,
name|student
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|student
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|student
operator|.
name|getLastName
argument_list|()
argument_list|,
name|student
operator|.
name|getEmail
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"Student"
argument_list|,
literal|"Students"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromTimetableManagers
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|q
init|=
literal|"select s from TimetableManager s where "
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
decl_stmt|;
name|q
operator|+=
literal|"(lower(s.firstName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.middleName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.lastName) like '"
operator|+
name|t
operator|+
literal|"%' or lower(s.emailAddress) like '"
operator|+
name|t
operator|+
literal|"%')"
expr_stmt|;
if|if
condition|(
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|)
name|q
operator|+=
literal|" and "
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|TimetableManagerDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
name|q
argument_list|)
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimetableManager
name|manager
init|=
operator|(
name|TimetableManager
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|addPerson
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|manager
operator|.
name|getExternalUniqueId
argument_list|()
argument_list|,
name|Source
operator|.
name|User
argument_list|)
argument_list|,
name|manager
operator|.
name|getFirstName
argument_list|()
argument_list|,
name|manager
operator|.
name|getMiddleName
argument_list|()
argument_list|,
name|manager
operator|.
name|getLastName
argument_list|()
argument_list|,
name|manager
operator|.
name|getEmailAddress
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
operator|(
name|manager
operator|.
name|getPrimaryRole
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|manager
operator|.
name|getPrimaryRole
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|,
literal|"Timetable Managers"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|findPeopleFromLdap
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|PersonInterface
argument_list|>
name|people
parameter_list|,
name|TreeSet
argument_list|<
name|PersonInterface
argument_list|>
name|peopleWithoutId
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap"
argument_list|)
operator|==
literal|null
condition|)
return|return;
name|InitialDirContext
name|ctx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|env
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|INITIAL_CONTEXT_FACTORY
argument_list|,
literal|"com.sun.jndi.ldap.LdapCtxFactory"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|PROVIDER_URL
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap"
argument_list|)
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|REFERRAL
argument_list|,
literal|"ignore"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
literal|"java.naming.ldap.version"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|env
operator|.
name|put
argument_list|(
name|Context
operator|.
name|SECURITY_AUTHENTICATION
argument_list|,
literal|"simple"
argument_list|)
expr_stmt|;
name|ctx
operator|=
operator|new
name|InitialDirContext
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|SearchControls
name|ctls
init|=
operator|new
name|SearchControls
argument_list|()
decl_stmt|;
name|ctls
operator|.
name|setCountLimit
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.countLimit"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|filter
init|=
literal|""
decl_stmt|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|query
argument_list|,
literal|" ,"
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|String
name|t
init|=
name|stk
operator|.
name|nextToken
argument_list|()
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|'*'
argument_list|)
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
literal|'*'
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|filter
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.query"
argument_list|,
literal|"(|(|(sn=%*)(uid=%))(givenName=%*)("
operator|+
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.email"
argument_list|,
literal|"mail"
argument_list|)
operator|+
literal|"=%*))"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
name|t
argument_list|)
expr_stmt|;
else|else
name|filter
operator|=
literal|"(&"
operator|+
name|filter
operator|+
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.query"
argument_list|,
literal|"(|(|(sn=%*)(uid=%))(givenName=%*)("
operator|+
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.email"
argument_list|,
literal|"mail"
argument_list|)
operator|+
literal|"=%*))"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"%"
argument_list|,
name|t
argument_list|)
operator|+
literal|")"
expr_stmt|;
block|}
for|for
control|(
name|NamingEnumeration
argument_list|<
name|SearchResult
argument_list|>
name|e
init|=
name|ctx
operator|.
name|search
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.name"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|filter
argument_list|,
name|ctls
argument_list|)
init|;
name|e
operator|.
name|hasMore
argument_list|()
condition|;
control|)
block|{
name|Attributes
name|a
init|=
name|e
operator|.
name|next
argument_list|()
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|addPerson
argument_list|(
name|people
argument_list|,
name|peopleWithoutId
argument_list|,
operator|new
name|PersonInterface
argument_list|(
name|translate
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"uid"
argument_list|)
argument_list|,
name|Source
operator|.
name|LDAP
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"givenName"
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"cn"
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
literal|"sn"
argument_list|)
argument_list|)
argument_list|,
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.email"
argument_list|,
literal|"mail"
argument_list|)
argument_list|)
argument_list|,
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.phone"
argument_list|,
literal|"phone,officePhone,homePhone,telephoneNumber"
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.department"
argument_list|,
literal|"department"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|getAttribute
argument_list|(
name|a
argument_list|,
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.lookup.ldap.position"
argument_list|,
literal|"position,title"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|"Directory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unable to use lookup, error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|ctx
operator|!=
literal|null
condition|)
name|ctx
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
specifier|protected
specifier|static
name|String
name|getAttribute
parameter_list|(
name|Attributes
name|attrs
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|attrs
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|StringTokenizer
name|stk
init|=
operator|new
name|StringTokenizer
argument_list|(
name|name
argument_list|,
literal|","
argument_list|)
init|;
name|stk
operator|.
name|hasMoreTokens
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|a
init|=
name|attrs
operator|.
name|get
argument_list|(
name|stk
operator|.
name|nextToken
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|a
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NamingException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

