begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|DataProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Attribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|dom4j
operator|.
name|io
operator|.
name|SAXReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|hibernate
operator|.
name|util
operator|.
name|HibernateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|web
operator|.
name|Web
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
operator|.
name|PersonalizedExamReportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|form
operator|.
name|ListSolutionsForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SavedHQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SolverGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|TimetableManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|UserData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SolverGroupDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|StudentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|OnlineSectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|SolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|WebSolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|exam
operator|.
name|ExamSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|studentsct
operator|.
name|StudentSolverProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|RoomAvailability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|server
operator|.
name|rpc
operator|.
name|RemoteServiceServlet
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|MenuServlet
extends|extends
name|RemoteServiceServlet
implements|implements
name|MenuService
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|9021169012914612488L
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|MenuServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Element
name|iRoot
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|ServletException
block|{
try|try
block|{
name|String
name|menu
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.menu"
argument_list|,
literal|"menu.xml"
argument_list|)
decl_stmt|;
name|Document
name|document
init|=
literal|null
decl_stmt|;
name|URL
name|menuUrl
init|=
name|ApplicationProperties
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|menu
argument_list|)
decl_stmt|;
name|SAXReader
name|sax
init|=
operator|new
name|SAXReader
argument_list|()
decl_stmt|;
name|sax
operator|.
name|setEntityResolver
argument_list|(
operator|new
name|EntityResolver
argument_list|()
block|{
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
block|{
if|if
condition|(
name|publicId
operator|.
name|equals
argument_list|(
literal|"-//UniTime//UniTime Menu DTD/EN"
argument_list|)
condition|)
block|{
return|return
operator|new
name|InputSource
argument_list|(
name|ApplicationProperties
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"menu.dtd"
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|menuUrl
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Reading menu from "
operator|+
name|URLDecoder
operator|.
name|decode
argument_list|(
name|menuUrl
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|document
operator|=
name|sax
operator|.
name|read
argument_list|(
name|menuUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|new
name|File
argument_list|(
name|menu
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Reading menu from "
operator|+
name|menu
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|document
operator|=
name|sax
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|menu
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|document
operator|==
literal|null
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to create menu, reason: resource "
operator|+
name|menu
operator|+
literal|" not found."
argument_list|)
throw|;
if|if
condition|(
operator|!
literal|"unitime-menu"
operator|.
name|equals
argument_list|(
name|document
operator|.
name|getRootElement
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Menu has an unknown format."
argument_list|)
throw|;
name|iRoot
operator|=
name|document
operator|.
name|getRootElement
argument_list|()
expr_stmt|;
name|String
name|customMenu
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.menu.custom"
argument_list|,
literal|"menu-custom.xml"
argument_list|)
decl_stmt|;
name|Document
name|customDocument
init|=
literal|null
decl_stmt|;
name|URL
name|customMenuUrl
init|=
name|ApplicationProperties
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|customMenu
argument_list|)
decl_stmt|;
if|if
condition|(
name|customMenuUrl
operator|!=
literal|null
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Reading custom menu from "
operator|+
name|URLDecoder
operator|.
name|decode
argument_list|(
name|customMenuUrl
operator|.
name|getPath
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|customDocument
operator|=
name|sax
operator|.
name|read
argument_list|(
name|customMenuUrl
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|new
name|File
argument_list|(
name|customMenu
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Debug
operator|.
name|info
argument_list|(
literal|"Reading custom menu from "
operator|+
name|customMenu
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|customDocument
operator|=
name|sax
operator|.
name|read
argument_list|(
operator|new
name|File
argument_list|(
name|customMenu
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|customDocument
operator|!=
literal|null
condition|)
block|{
name|merge
argument_list|(
name|iRoot
argument_list|,
name|customDocument
operator|.
name|getRootElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|ServletException
condition|)
throw|throw
operator|(
name|ServletException
operator|)
name|e
throw|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Unable to initialize, reason: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|merge
parameter_list|(
name|Element
name|menu
parameter_list|,
name|Element
name|custom
parameter_list|)
block|{
if|if
condition|(
literal|"remove"
operator|.
name|equals
argument_list|(
name|custom
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|menu
operator|.
name|getParent
argument_list|()
operator|.
name|remove
argument_list|(
name|menu
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Attribute
argument_list|>
name|i
init|=
name|custom
operator|.
name|attributeIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Attribute
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|menu
operator|.
name|addAttribute
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|custom
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|e
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"condition"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|menu
operator|.
name|add
argument_list|(
name|e
operator|.
name|createCopy
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
literal|"new-condition"
operator|.
name|equals
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|menu
operator|.
name|elementIterator
argument_list|(
literal|"condition"
argument_list|)
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|menu
operator|.
name|remove
argument_list|(
name|j
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|f
init|=
name|e
operator|.
name|createCopy
argument_list|()
decl_stmt|;
name|f
operator|.
name|setName
argument_list|(
literal|"condition"
argument_list|)
expr_stmt|;
name|menu
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|name
init|=
name|e
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|Element
name|x
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|menu
operator|.
name|elementIterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|f
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|f
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
condition|)
block|{
name|x
operator|=
name|f
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|x
operator|!=
literal|null
condition|)
block|{
name|merge
argument_list|(
name|x
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|pos
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|e
operator|.
name|attributeValue
argument_list|(
literal|"position"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
name|List
argument_list|<
name|Element
argument_list|>
name|after
init|=
operator|new
name|ArrayList
argument_list|<
name|Element
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|j
init|=
name|menu
operator|.
name|elementIterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|f
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"condition"
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|pos
operator|--
expr_stmt|;
block|}
else|else
block|{
name|after
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|menu
operator|.
name|remove
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
name|menu
operator|.
name|add
argument_list|(
name|e
operator|.
name|createCopy
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Element
name|f
range|:
name|after
control|)
name|menu
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
name|menu
operator|.
name|add
argument_list|(
name|e
operator|.
name|createCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|getMenu
parameter_list|()
throws|throws
name|MenuException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
comment|// init();
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|menu
init|=
operator|new
name|ArrayList
argument_list|<
name|MenuInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|iRoot
operator|==
literal|null
condition|)
throw|throw
operator|new
name|MenuException
argument_list|(
literal|"menu is not configured properly"
argument_list|)
throw|;
name|UserInfo
name|user
init|=
operator|new
name|UserInfo
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|iRoot
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MenuInterface
name|m
init|=
name|getMenu
argument_list|(
name|user
argument_list|,
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|menu
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|menu
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|MenuException
argument_list|(
literal|"no menu"
argument_list|)
throw|;
return|return
name|menu
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|MenuInterface
name|getMenu
parameter_list|(
name|UserInfo
name|user
parameter_list|,
name|Element
name|menuElement
parameter_list|)
block|{
name|MenuInterface
name|menu
init|=
operator|new
name|MenuInterface
argument_list|()
decl_stmt|;
name|menu
operator|.
name|setName
argument_list|(
name|menuElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setTitle
argument_list|(
name|menuElement
operator|.
name|attributeValue
argument_list|(
literal|"title"
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setTarget
argument_list|(
name|menuElement
operator|.
name|attributeValue
argument_list|(
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setPage
argument_list|(
name|menuElement
operator|.
name|attributeValue
argument_list|(
literal|"page"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|type
init|=
name|menuElement
operator|.
name|attributeValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"gwt"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|menu
operator|.
name|setGWT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"property"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|&&
name|menu
operator|.
name|getPage
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|menu
operator|.
name|setPage
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|menu
operator|.
name|getPage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|menu
operator|.
name|getPage
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|menuElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"condition"
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|check
argument_list|(
name|user
argument_list|,
name|element
argument_list|)
condition|)
return|return
literal|null
return|;
block|}
else|else
block|{
name|MenuInterface
name|m
init|=
name|getMenu
argument_list|(
name|user
argument_list|,
name|element
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
name|menu
operator|.
name|addSubMenu
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|menu
return|;
block|}
specifier|private
name|boolean
name|check
parameter_list|(
name|UserInfo
name|userInfo
parameter_list|,
name|Element
name|conditionElement
parameter_list|)
block|{
name|String
name|cond
init|=
name|conditionElement
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"and"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
operator|||
literal|"condition"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|conditionElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|check
argument_list|(
name|userInfo
argument_list|,
name|element
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|else  if
condition|(
literal|"or"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|conditionElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|check
argument_list|(
name|userInfo
argument_list|,
name|element
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
literal|"not"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Element
argument_list|>
name|i
init|=
name|conditionElement
operator|.
name|elementIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Element
name|element
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|check
argument_list|(
name|userInfo
argument_list|,
name|element
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
literal|"isAuthenticated"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
return|return
name|userInfo
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
literal|"hasRole"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
name|User
name|user
init|=
name|userInfo
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|String
name|role
init|=
name|conditionElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|==
literal|null
condition|)
return|return
name|user
operator|.
name|getRole
argument_list|()
operator|!=
literal|null
return|;
comment|// has any role
return|return
name|role
operator|.
name|equalsIgnoreCase
argument_list|(
name|user
operator|.
name|getRole
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"propertyEquals"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
return|return
name|conditionElement
operator|.
name|attributeValue
argument_list|(
literal|"value"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|conditionElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|,
literal|"dummy"
argument_list|)
argument_list|,
name|conditionElement
operator|.
name|attributeValue
argument_list|(
literal|"defaultValue"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasProperty"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|conditionElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|,
literal|"dummy"
argument_list|)
argument_list|)
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
literal|"hasRight"
operator|.
name|equals
argument_list|(
name|cond
argument_list|)
condition|)
block|{
name|String
name|right
init|=
name|conditionElement
operator|.
name|attributeValue
argument_list|(
literal|"name"
argument_list|,
literal|"unknown"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"canSeeEvents"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|userInfo
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|TimetableManager
operator|.
name|canSeeEvents
argument_list|(
name|userInfo
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasRoomAvailability"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|RoomAvailability
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
return|;
block|}
if|else if
condition|(
literal|"hasPersonalReport"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|userInfo
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|PersonalizedExamReportAction
operator|.
name|hasPersonalReport
argument_list|(
name|userInfo
operator|.
name|getUser
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"isChameleon"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"hdnAdminAlias"
argument_list|)
operator|!=
literal|null
operator|&&
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"hdnAdminAlias"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"isSectioningEnabled"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|OnlineSectioningService
operator|.
name|isEnabled
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"isStudent"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|userInfo
operator|!=
literal|null
operator|&&
name|userInfo
operator|.
name|isStudent
argument_list|()
return|;
block|}
if|else if
condition|(
literal|"isRegistrationEnabled"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|OnlineSectioningService
operator|.
name|isRegistrationEnabled
argument_list|()
return|;
block|}
else|else
block|{
name|User
name|user
init|=
name|userInfo
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|TimetableManager
name|manager
init|=
name|userInfo
operator|.
name|getManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|Session
name|session
init|=
name|userInfo
operator|.
name|getSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
literal|"canSeeCourses"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canSeeCourses
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"canSeeTimetable"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canSeeTimetable
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"canDoTimetable"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canDoTimetable
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasASolverGroup"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|hasASolverGroup
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"canSectionStudents"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canSectionStudents
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"canSeeExams"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canSeeExams
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"canTimetableExams"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canTimetableExams
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"canAudit"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|manager
operator|.
name|canAudit
argument_list|(
name|session
argument_list|,
name|user
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasCourseReports"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|SavedHQL
operator|.
name|Flag
operator|.
name|APPEARANCE_COURSES
argument_list|,
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasExamReports"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|SavedHQL
operator|.
name|Flag
operator|.
name|APPEARANCE_EXAMS
argument_list|,
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasEventReports"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|SavedHQL
operator|.
name|Flag
operator|.
name|APPEARANCE_EVENTS
argument_list|,
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
literal|"hasStudentReports"
operator|.
name|equals
argument_list|(
name|right
argument_list|)
condition|)
block|{
return|return
name|SavedHQL
operator|.
name|hasQueries
argument_list|(
name|SavedHQL
operator|.
name|Flag
operator|.
name|APPEARANCE_SECTIONING
argument_list|,
name|user
operator|.
name|isAdmin
argument_list|()
argument_list|)
return|;
block|}
block|}
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unknown right "
operator|+
name|right
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unknown condition "
operator|+
name|cond
operator|+
literal|"."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
class|class
name|UserInfo
block|{
name|User
name|iUser
init|=
literal|null
decl_stmt|;
name|Session
name|iSession
init|=
literal|null
decl_stmt|;
name|TimetableManager
name|iManager
init|=
literal|null
decl_stmt|;
specifier|public
name|UserInfo
parameter_list|(
name|HttpSession
name|session
parameter_list|)
block|{
name|iUser
operator|=
name|Web
operator|.
name|getUser
argument_list|(
name|session
argument_list|)
expr_stmt|;
if|if
condition|(
name|iUser
operator|!=
literal|null
condition|)
block|{
name|Long
name|sessionId
init|=
operator|(
name|Long
operator|)
name|iUser
operator|.
name|getAttribute
argument_list|(
name|Constants
operator|.
name|SESSION_ID_ATTR_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|sessionId
operator|!=
literal|null
condition|)
block|{
name|iSession
operator|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
name|iManager
operator|=
name|TimetableManager
operator|.
name|getManager
argument_list|(
name|iUser
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|User
name|getUser
parameter_list|()
block|{
return|return
name|iUser
return|;
block|}
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|TimetableManager
name|getManager
parameter_list|()
block|{
return|return
name|iManager
return|;
block|}
specifier|public
name|boolean
name|isStudent
parameter_list|()
block|{
if|if
condition|(
name|getUser
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
operator|(
operator|(
name|Number
operator|)
name|StudentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|createQuery
argument_list|(
literal|"select count(s) from Student s where "
operator|+
literal|"s.externalUniqueId = :uid"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"uid"
argument_list|,
name|getUser
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|uniqueResult
argument_list|()
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|0
return|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUserInfo
parameter_list|()
throws|throws
name|MenuException
block|{
try|try
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|UserInfo
name|user
init|=
operator|new
name|UserInfo
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|userName
init|=
name|Constants
operator|.
name|toInitialCase
argument_list|(
name|user
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|"-"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"0Name"
argument_list|,
name|userName
argument_list|)
expr_stmt|;
name|String
name|dept
init|=
literal|""
decl_stmt|;
name|TimetableManager
name|manager
init|=
name|user
operator|.
name|getManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|manager
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|manager
operator|.
name|getDepartments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Department
name|d
init|=
operator|(
name|Department
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getSession
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dept
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|dept
operator|+=
literal|","
expr_stmt|;
name|dept
operator|+=
literal|"<span title='"
operator|+
name|d
operator|.
name|getHtmlTitle
argument_list|()
operator|+
literal|"'>"
operator|+
name|d
operator|.
name|getShortLabel
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|TreeSet
name|depts
init|=
operator|new
name|TreeSet
argument_list|(
name|user
operator|.
name|getUser
argument_list|()
operator|.
name|getDepartments
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|depts
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|dept
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|dept
operator|+=
literal|","
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|put
argument_list|(
literal|"1Dept"
argument_list|,
name|dept
argument_list|)
expr_stmt|;
name|String
name|role
init|=
name|user
operator|.
name|getUser
argument_list|()
operator|.
name|getRole
argument_list|()
decl_stmt|;
if|if
condition|(
name|role
operator|==
literal|null
condition|)
name|role
operator|=
literal|"No Role"
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"2Role"
argument_list|,
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|.
name|getUser
argument_list|()
operator|!=
literal|null
operator|&&
name|Roles
operator|.
name|ADMIN_ROLE
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getUser
argument_list|()
operator|.
name|getRole
argument_list|()
argument_list|)
operator|||
operator|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"hdnAdminAlias"
argument_list|)
operator|!=
literal|null
operator|&&
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"hdnAdminAlias"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
operator|)
condition|)
name|ret
operator|.
name|put
argument_list|(
literal|"Chameleon"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSessionInfo
parameter_list|()
throws|throws
name|MenuException
block|{
try|try
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|UserInfo
name|user
init|=
operator|new
name|UserInfo
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|.
name|getSession
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|ret
operator|.
name|put
argument_list|(
literal|"0Session"
argument_list|,
name|user
operator|.
name|getSession
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"1Status"
argument_list|,
name|user
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"2Database"
argument_list|,
name|HibernateUtil
operator|.
name|getDatabaseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|MenuException
block|{
return|return
literal|"Version "
operator|+
name|Constants
operator|.
name|VERSION
operator|+
literal|"."
operator|+
name|Constants
operator|.
name|BLD_NUMBER
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
operator|+
literal|" built on "
operator|+
name|Constants
operator|.
name|REL_DATE
operator|.
name|replaceAll
argument_list|(
literal|"@build.date@"
argument_list|,
literal|"?"
argument_list|)
return|;
block|}
specifier|private
name|String
name|getName
parameter_list|(
name|String
name|puid
parameter_list|)
block|{
return|return
name|getName
argument_list|(
name|TimetableManager
operator|.
name|findByExternalId
argument_list|(
name|puid
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getName
parameter_list|(
name|TimetableManager
name|mgr
parameter_list|)
block|{
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|mgr
operator|.
name|getShortName
argument_list|()
return|;
block|}
specifier|private
name|String
name|getName
parameter_list|(
name|SolverGroup
name|gr
parameter_list|)
block|{
if|if
condition|(
name|gr
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|gr
operator|.
name|getAbbv
argument_list|()
return|;
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSolverInfo
parameter_list|(
name|boolean
name|includeSolutionInfo
parameter_list|)
throws|throws
name|MenuException
block|{
try|try
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|SolverProxy
name|solver
init|=
name|WebSolver
operator|.
name|getSolver
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
decl_stmt|;
name|ExamSolverProxy
name|examSolver
init|=
operator|(
name|solver
operator|==
literal|null
condition|?
name|WebSolver
operator|.
name|getExamSolverNoSessionCheck
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|StudentSolverProxy
name|studentSolver
init|=
operator|(
name|solver
operator|==
literal|null
operator|&&
name|examSolver
operator|==
literal|null
condition|?
name|WebSolver
operator|.
name|getStudentSolverNoSessionCheck
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|Map
name|progress
init|=
operator|(
name|studentSolver
operator|!=
literal|null
condition|?
name|studentSolver
operator|.
name|getProgress
argument_list|()
else|:
name|examSolver
operator|!=
literal|null
condition|?
name|examSolver
operator|.
name|getProgress
argument_list|()
else|:
name|solver
operator|!=
literal|null
condition|?
name|solver
operator|.
name|getProgress
argument_list|()
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|progress
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DataProperties
name|properties
init|=
operator|(
name|studentSolver
operator|!=
literal|null
condition|?
name|studentSolver
operator|.
name|getProperties
argument_list|()
else|:
name|examSolver
operator|!=
literal|null
condition|?
name|examSolver
operator|.
name|getProperties
argument_list|()
else|:
name|solver
operator|.
name|getProperties
argument_list|()
operator|)
decl_stmt|;
name|String
name|progressStatus
init|=
operator|(
name|String
operator|)
name|progress
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
decl_stmt|;
name|String
name|progressPhase
init|=
operator|(
name|String
operator|)
name|progress
operator|.
name|get
argument_list|(
literal|"PHASE"
argument_list|)
decl_stmt|;
name|long
name|progressCur
init|=
operator|(
operator|(
name|Long
operator|)
name|progress
operator|.
name|get
argument_list|(
literal|"PROGRESS"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|long
name|progressMax
init|=
operator|(
operator|(
name|Long
operator|)
name|progress
operator|.
name|get
argument_list|(
literal|"MAX_PROGRESS"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|String
name|version
init|=
operator|(
name|String
operator|)
name|progress
operator|.
name|get
argument_list|(
literal|"VERSION"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|==
literal|null
operator|||
literal|"-1"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
condition|)
name|version
operator|=
literal|"N/A"
expr_stmt|;
if|if
condition|(
name|version
operator|.
name|indexOf
argument_list|(
literal|"@build.number@"
argument_list|)
operator|>=
literal|0
condition|)
name|version
operator|=
name|version
operator|.
name|replaceAll
argument_list|(
literal|"@build.number@"
argument_list|,
literal|"?"
argument_list|)
expr_stmt|;
name|double
name|progressPercent
init|=
literal|100.0
operator|*
operator|(
operator|(
name|double
operator|)
operator|(
name|progressCur
operator|<
name|progressMax
condition|?
name|progressCur
else|:
name|progressMax
operator|)
operator|)
operator|/
operator|(
operator|(
name|double
operator|)
name|progressMax
operator|)
decl_stmt|;
name|String
name|runnerName
init|=
name|getName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"General.OwnerPuid"
argument_list|,
literal|"N/A"
argument_list|)
argument_list|)
decl_stmt|;
name|Long
index|[]
name|solverGroupId
init|=
name|properties
operator|.
name|getPropertyLongArry
argument_list|(
literal|"General.SolverGroupId"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|ownerName
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|solverGroupId
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|solverGroupId
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|ownerName
operator|+=
literal|"& "
expr_stmt|;
name|ownerName
operator|+=
name|getName
argument_list|(
operator|(
operator|new
name|SolverGroupDAO
argument_list|()
operator|)
operator|.
name|get
argument_list|(
name|solverGroupId
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|examSolver
operator|!=
literal|null
condition|)
name|ownerName
operator|=
name|Exam
operator|.
name|sExamTypes
index|[
name|examSolver
operator|.
name|getExamType
argument_list|()
index|]
expr_stmt|;
if|if
condition|(
name|ownerName
operator|==
literal|null
operator|||
name|ownerName
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|ownerName
operator|=
literal|"N/A"
expr_stmt|;
if|if
condition|(
name|ownerName
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
condition|)
name|ownerName
operator|=
name|runnerName
expr_stmt|;
if|if
condition|(
name|runnerName
operator|.
name|equals
argument_list|(
literal|"N/A"
argument_list|)
condition|)
name|runnerName
operator|=
name|ownerName
expr_stmt|;
if|if
condition|(
operator|!
name|ownerName
operator|.
name|equals
argument_list|(
name|runnerName
argument_list|)
condition|)
name|ownerName
operator|=
name|runnerName
operator|+
literal|" as "
operator|+
name|ownerName
expr_stmt|;
if|if
condition|(
name|ownerName
operator|.
name|length
argument_list|()
operator|>
literal|50
condition|)
name|ownerName
operator|=
name|ownerName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|47
argument_list|)
operator|+
literal|"..."
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"0Type"
argument_list|,
operator|(
name|studentSolver
operator|!=
literal|null
condition|?
literal|"Student Sectioning Solver"
else|:
name|examSolver
operator|!=
literal|null
condition|?
literal|"Examinations Solver"
else|:
literal|"Course Timetabling Solver"
operator|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"4Owner"
argument_list|,
name|ownerName
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"5Host"
argument_list|,
operator|(
name|studentSolver
operator|!=
literal|null
condition|?
name|studentSolver
operator|.
name|getHostLabel
argument_list|()
else|:
name|examSolver
operator|!=
literal|null
condition|?
name|examSolver
operator|.
name|getHostLabel
argument_list|()
else|:
name|solver
operator|.
name|getHostLabel
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"1Solver"
argument_list|,
name|progressStatus
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"2Phase"
argument_list|,
name|progressPhase
argument_list|)
expr_stmt|;
if|if
condition|(
name|progressMax
operator|>
literal|0
condition|)
name|ret
operator|.
name|put
argument_list|(
literal|"3Progress"
argument_list|,
operator|(
name|progressCur
operator|<
name|progressMax
condition|?
name|progressCur
else|:
name|progressMax
operator|)
operator|+
literal|" of "
operator|+
name|progressMax
operator|+
literal|" ("
operator|+
name|Web
operator|.
name|format
argument_list|(
name|progressPercent
argument_list|)
operator|+
literal|"%)"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"7Version"
argument_list|,
name|version
argument_list|)
expr_stmt|;
name|ret
operator|.
name|put
argument_list|(
literal|"6Session"
argument_list|,
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|properties
operator|.
name|getPropertyLong
argument_list|(
literal|"General.SessionId"
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeSolutionInfo
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solver
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|solver
operator|.
name|statusSolutionInfo
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|examSolver
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|examSolver
operator|.
name|statusSolutionInfo
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|studentSolver
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|studentSolver
operator|.
name|statusSolutionInfo
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|ListSolutionsForm
operator|.
name|InfoComparator
argument_list|()
argument_list|)
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|info
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
name|idx
operator|)
operator|+
name|key
argument_list|,
operator|(
name|String
operator|)
name|info
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Unable to get solver info: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getHelpPage
parameter_list|(
name|String
name|title
parameter_list|)
throws|throws
name|MenuException
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.wiki.help"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|&&
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.wiki.url"
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.wiki.url"
argument_list|)
operator|+
name|title
operator|.
name|trim
argument_list|()
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|'_'
argument_list|)
operator|.
name|replace
argument_list|(
literal|"("
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|")"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|':'
argument_list|,
literal|'_'
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|MenuException
argument_list|(
literal|"help pages are disabled"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getUserData
parameter_list|(
name|String
name|property
parameter_list|)
throws|throws
name|MenuException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|UserData
operator|.
name|getProperty
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|property
argument_list|)
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|setUserData
parameter_list|(
name|String
name|property
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MenuException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|UserData
operator|.
name|setProperty
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getUserData
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|property
parameter_list|)
throws|throws
name|MenuException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|UserData
operator|.
name|getProperties
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|property
argument_list|)
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|setUserData
parameter_list|(
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|property2value
parameter_list|)
throws|throws
name|MenuException
block|{
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
index|[]
name|p
range|:
name|property2value
control|)
name|UserData
operator|.
name|setProperty
argument_list|(
name|getThreadLocalRequest
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|,
name|p
index|[
literal|0
index|]
argument_list|,
name|p
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MenuException
condition|)
throw|throw
operator|(
name|MenuException
operator|)
name|e
throw|;
throw|throw
operator|new
name|MenuException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

