begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|TimeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|joda
operator|.
name|time
operator|.
name|DateTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|web
operator|.
name|context
operator|.
name|support
operator|.
name|SpringBeanAutowiringSupport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|commons
operator|.
name|Debug
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|action
operator|.
name|PersonalizedExamReportAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|EventDetailBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|events
operator|.
name|QueryEncoderBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|events
operator|.
name|EventsExportEventsToICal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Exam
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ExamType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Student
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|StudentClassEnrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|Class_DAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|EventDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|ExamDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SessionDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|CourseDetailsBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|solver
operator|.
name|service
operator|.
name|SolverServerService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|Biweekly
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|ICalendar
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|component
operator|.
name|VEvent
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|component
operator|.
name|VFreeBusy
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|parameter
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Attendee
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|CalendarScale
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateEnd
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|DateStart
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|ExceptionDates
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Organizer
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|property
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
operator|.
name|DayOfWeek
import|;
end_import

begin_import
import|import
name|biweekly
operator|.
name|util
operator|.
name|Recurrence
operator|.
name|Frequency
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CalendarServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
block|{
name|SpringBeanAutowiringSupport
operator|.
name|processInjectionBasedOnCurrentContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
annotation|@
name|Autowired
name|SolverServerService
name|solverServerService
decl_stmt|;
specifier|public
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Params
name|params
init|=
literal|null
decl_stmt|;
name|String
name|q
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
operator|new
name|QParams
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|=
operator|new
name|HttpParams
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
name|Long
name|sessionId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getParameter
argument_list|(
literal|"sid"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|sessionId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|params
operator|.
name|getParameter
argument_list|(
literal|"sid"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UserContext
name|user
init|=
operator|(
name|getSessionContext
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
name|sessionId
operator|=
operator|(
name|Long
operator|)
name|user
operator|.
name|getCurrentAcademicSessionId
argument_list|()
expr_stmt|;
else|else
name|sessionId
operator|=
operator|(
name|Long
operator|)
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"sessionId"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|sessions
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s.uniqueId from Session s where "
operator|+
literal|"s.academicTerm || s.academicYear = :term or "
operator|+
literal|"s.academicTerm || s.academicYear || s.academicInitiative = :term"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"term"
argument_list|,
name|params
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sessions
operator|.
name|isEmpty
argument_list|()
condition|)
name|sessionId
operator|=
name|sessions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"No academic session provided."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Session
name|session
init|=
name|SessionDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Academic session does not exist."
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|classIds
init|=
name|params
operator|.
name|getParameter
argument_list|(
literal|"cid"
argument_list|)
decl_stmt|;
name|String
name|fts
init|=
name|params
operator|.
name|getParameter
argument_list|(
literal|"ft"
argument_list|)
decl_stmt|;
name|String
name|examIds
init|=
name|params
operator|.
name|getParameter
argument_list|(
literal|"xid"
argument_list|)
decl_stmt|;
name|String
name|eventIds
init|=
name|params
operator|.
name|getParameter
argument_list|(
literal|"eid"
argument_list|)
decl_stmt|;
name|String
name|userId
init|=
name|params
operator|.
name|getParameter
argument_list|(
literal|"uid"
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|==
literal|null
condition|)
name|userId
operator|=
name|QueryEncoderBackend
operator|.
name|decode
argument_list|(
name|userId
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/calendar; charset=UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Disposition"
argument_list|,
literal|"attachment; filename=\"schedule.ics\""
argument_list|)
expr_stmt|;
name|ICalendar
name|ical
init|=
operator|new
name|ICalendar
argument_list|()
decl_stmt|;
name|ical
operator|.
name|setVersion
argument_list|(
name|Version
operator|.
name|v2_0
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setCalendarScale
argument_list|(
name|CalendarScale
operator|.
name|gregorian
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setMethod
argument_list|(
operator|new
name|Method
argument_list|(
literal|"PUBLISH"
argument_list|)
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-CALNAME"
argument_list|,
literal|"UniTime Schedule"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setExperimentalProperty
argument_list|(
literal|"X-WR-TIMEZONE"
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|setProductId
argument_list|(
literal|"-//UniTime LLC/UniTime "
operator|+
name|Constants
operator|.
name|getVersion
argument_list|()
operator|+
literal|" Schedule//EN"
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|EventsExportEventsToICal
name|exporter
init|=
operator|new
name|EventsExportEventsToICal
argument_list|()
decl_stmt|;
if|if
condition|(
name|classIds
operator|!=
literal|null
operator|&&
operator|!
name|classIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|classId
range|:
name|classIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|classId
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|courseAndClassId
init|=
name|classId
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseAndClassId
operator|.
name|length
operator|!=
literal|2
condition|)
continue|continue;
name|CourseOffering
name|course
init|=
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseAndClassId
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|Class_
name|clazz
init|=
name|Class_DAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|courseAndClassId
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|printClass
argument_list|(
name|course
argument_list|,
name|clazz
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fts
operator|!=
literal|null
operator|&&
operator|!
name|fts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Date
name|dpFirstDate
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|session
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|session
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|BitSet
name|weekCode
init|=
name|session
operator|.
name|getDefaultDatePattern
argument_list|()
operator|.
name|getPatternBitSet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ft
range|:
name|fts
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|ft
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|String
index|[]
name|daysStartLen
init|=
name|ft
operator|.
name|split
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|daysStartLen
operator|.
name|length
operator|!=
literal|3
condition|)
continue|continue;
name|printFreeTime
argument_list|(
name|dpFirstDate
argument_list|,
name|weekCode
argument_list|,
name|daysStartLen
index|[
literal|0
index|]
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|daysStartLen
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|daysStartLen
index|[
literal|2
index|]
argument_list|)
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|examIds
operator|!=
literal|null
operator|&&
operator|!
name|examIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|examId
range|:
name|examIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|examId
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
try|try
block|{
name|Exam
name|exam
init|=
name|ExamDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|examId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|exam
operator|!=
literal|null
condition|)
name|printExam
argument_list|(
name|exam
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|eventIds
operator|!=
literal|null
operator|&&
operator|!
name|eventIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|eventId
range|:
name|eventIds
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
if|if
condition|(
name|eventId
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
try|try
block|{
name|Event
name|event
init|=
name|EventDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|eventId
argument_list|)
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|!=
literal|null
condition|)
name|exporter
operator|.
name|print
argument_list|(
name|ical
argument_list|,
name|EventDetailBackend
operator|.
name|getEventDetail
argument_list|(
name|session
argument_list|,
name|event
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
if|if
condition|(
name|userId
operator|!=
literal|null
operator|&&
operator|!
name|userId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|DepartmentalInstructor
name|instructor
range|:
operator|(
name|List
argument_list|<
name|DepartmentalInstructor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select i from DepartmentalInstructor i "
operator|+
literal|"where i.externalUniqueId = :externalId and i.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|userId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|PersonalizedExamReportAction
operator|.
name|canDisplay
argument_list|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
for|for
control|(
name|Exam
name|exam
range|:
name|instructor
operator|.
name|getExams
argument_list|(
name|ExamType
operator|.
name|sExamTypeMidterm
argument_list|)
control|)
block|{
name|printExam
argument_list|(
name|exam
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
for|for
control|(
name|Exam
name|exam
range|:
name|instructor
operator|.
name|getExams
argument_list|(
name|ExamType
operator|.
name|sExamTypeFinal
argument_list|)
control|)
block|{
name|printExam
argument_list|(
name|exam
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|.
name|getDepartment
argument_list|()
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|ci
range|:
name|instructor
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|printClass
argument_list|(
name|ci
operator|.
name|getClassInstructing
argument_list|()
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|getControllingCourseOffering
argument_list|()
argument_list|,
name|ci
operator|.
name|getClassInstructing
argument_list|()
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Student
name|student
range|:
operator|(
name|List
argument_list|<
name|Student
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select s from Student s where "
operator|+
literal|"s.externalUniqueId=:externalId and s.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setString
argument_list|(
literal|"externalId"
argument_list|,
name|userId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|PersonalizedExamReportAction
operator|.
name|canDisplay
argument_list|(
name|student
operator|.
name|getSession
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamFinal
argument_list|()
condition|)
block|{
for|for
control|(
name|Exam
name|exam
range|:
name|student
operator|.
name|getExams
argument_list|(
name|ExamType
operator|.
name|sExamTypeFinal
argument_list|)
control|)
name|printExam
argument_list|(
name|exam
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportExamMidterm
argument_list|()
condition|)
block|{
for|for
control|(
name|Exam
name|exam
range|:
name|student
operator|.
name|getExams
argument_list|(
name|ExamType
operator|.
name|sExamTypeMidterm
argument_list|)
control|)
name|printExam
argument_list|(
name|exam
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|student
operator|.
name|getSession
argument_list|()
operator|.
name|getStatusType
argument_list|()
operator|.
name|canNoRoleReportClass
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|student
operator|.
name|getClassEnrollments
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|StudentClassEnrollment
name|sce
init|=
operator|(
name|StudentClassEnrollment
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|printClass
argument_list|(
name|sce
operator|.
name|getCourseOffering
argument_list|()
argument_list|,
name|sce
operator|.
name|getClazz
argument_list|()
argument_list|,
name|ical
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Debug
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|PrintWriter
name|out
init|=
name|response
operator|.
name|getWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|Biweekly
operator|.
name|write
argument_list|(
name|ical
argument_list|)
operator|.
name|go
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|printExam
parameter_list|(
name|Exam
name|exam
parameter_list|,
name|ICalendar
name|ical
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|VEvent
name|vevent
init|=
operator|new
name|VEvent
argument_list|()
decl_stmt|;
name|vevent
operator|.
name|setSequence
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setUid
argument_list|(
name|exam
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DateStart
name|dstart
init|=
operator|new
name|DateStart
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|Calendar
name|endTime
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|endTime
operator|.
name|setTime
argument_list|(
name|exam
operator|.
name|getAssignedPeriod
argument_list|()
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|endTime
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|exam
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|DateEnd
name|dend
init|=
operator|new
name|DateEnd
argument_list|(
name|endTime
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setSummary
argument_list|(
name|exam
operator|.
name|getLabel
argument_list|()
operator|+
literal|" ("
operator|+
name|exam
operator|.
name|getExamType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|" Exam)"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exam
operator|.
name|getAssignedRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|rooms
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
operator|new
name|TreeSet
argument_list|(
name|exam
operator|.
name|getAssignedRooms
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Location
name|location
init|=
operator|(
name|Location
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rooms
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|rooms
operator|+=
literal|", "
expr_stmt|;
name|rooms
operator|+=
name|location
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|vevent
operator|.
name|setLocation
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
block|}
name|vevent
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|confirmed
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addEvent
argument_list|(
name|vevent
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|printClass
parameter_list|(
name|CourseOffering
name|course
parameter_list|,
name|Class_
name|clazz
parameter_list|,
name|ICalendar
name|ical
parameter_list|)
throws|throws
name|IOException
block|{
name|Assignment
name|assignment
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
if|if
condition|(
name|assignment
operator|==
literal|null
condition|)
return|return;
name|TimeLocation
name|time
init|=
name|assignment
operator|.
name|getTimeLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
operator|||
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyyMMdd"
argument_list|)
decl_stmt|;
name|df
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|SimpleDateFormat
name|tf
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"HHmmss"
argument_list|)
decl_stmt|;
name|tf
operator|.
name|setTimeZone
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"UTC"
argument_list|)
argument_list|)
expr_stmt|;
name|Date
name|dpFirstDate
init|=
name|DateUtils
operator|.
name|getDate
argument_list|(
literal|1
argument_list|,
name|clazz
operator|.
name|getSession
argument_list|()
operator|.
name|getPatternStartMonth
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSession
argument_list|()
operator|.
name|getSessionStartYear
argument_list|()
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|firstEnd
init|=
name|cal
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|fidx
init|=
name|idx
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|time
operator|.
name|getLength
argument_list|()
operator|-
name|time
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|fidx
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|VEvent
name|vevent
init|=
operator|new
name|VEvent
argument_list|()
decl_stmt|;
name|DateStart
name|dstart
init|=
operator|new
name|DateStart
argument_list|(
name|first
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|DateEnd
name|dend
init|=
operator|new
name|DateEnd
argument_list|(
name|firstEnd
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|Recurrence
operator|.
name|Builder
name|recur
init|=
operator|new
name|Recurrence
operator|.
name|Builder
argument_list|(
name|Frequency
operator|.
name|WEEKLY
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|DayCode
argument_list|>
name|i
init|=
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|time
operator|.
name|getDayCode
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
switch|switch
condition|(
name|i
operator|.
name|next
argument_list|()
condition|)
block|{
case|case
name|MON
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|MONDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|TUE
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|TUESDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|WED
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|WEDNESDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|THU
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|THURSDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|FRI
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|FRIDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAT
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|SATURDAY
argument_list|)
expr_stmt|;
break|break;
case|case
name|SUN
case|:
name|recur
operator|.
name|byDay
argument_list|(
name|DayOfWeek
operator|.
name|SUNDAY
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|recur
operator|.
name|workweekStarts
argument_list|(
name|DayOfWeek
operator|.
name|MONDAY
argument_list|)
operator|.
name|until
argument_list|(
name|last
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setRecurrenceRule
argument_list|(
name|recur
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|ExceptionDates
name|exdates
init|=
operator|new
name|ExceptionDates
argument_list|(
literal|true
argument_list|)
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|MON
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|TUE
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|WED
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|THU
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|FRI
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SAT
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
operator|(
name|time
operator|.
name|getDayCode
argument_list|()
operator|&
name|DayCode
operator|.
name|SUN
operator|.
name|getCode
argument_list|()
operator|)
operator|!=
literal|0
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|offered
condition|)
block|{
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
continue|continue;
block|}
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|time
operator|.
name|getWeekCode
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|exdates
operator|.
name|addValue
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|exdates
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|vevent
operator|.
name|addExceptionDates
argument_list|(
name|exdates
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setUid
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setSequence
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setSummary
argument_list|(
name|clazz
operator|.
name|getClassLabel
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|desc
init|=
operator|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getConsentType
argument_list|()
operator|!=
literal|null
condition|)
name|desc
operator|+=
literal|" ("
operator|+
name|course
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
expr_stmt|;
name|vevent
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|assignment
operator|.
name|getRooms
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|loc
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Location
name|r
range|:
name|assignment
operator|.
name|getRooms
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|loc
operator|.
name|isEmpty
argument_list|()
condition|)
name|loc
operator|+=
literal|", "
expr_stmt|;
name|loc
operator|+=
name|r
operator|.
name|getLabel
argument_list|()
expr_stmt|;
block|}
name|vevent
operator|.
name|setLocation
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|URL
name|url
init|=
name|CourseDetailsBackend
operator|.
name|getCourseUrl
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|course
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|course
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
name|vevent
operator|.
name|setUrl
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isDisplayInstructor
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassInstructor
name|instructor
range|:
name|clazz
operator|.
name|getClassInstructors
argument_list|()
control|)
block|{
if|if
condition|(
name|vevent
operator|.
name|getOrganizer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Organizer
name|organizer
init|=
operator|new
name|Organizer
argument_list|(
literal|"mailto:"
operator|+
operator|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|?
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|organizer
operator|.
name|setCommonName
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|setOrganizer
argument_list|(
name|organizer
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Attendee
name|attendee
init|=
operator|new
name|Attendee
argument_list|(
literal|"mailto:"
operator|+
operator|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
operator|!=
literal|null
condition|?
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|attendee
operator|.
name|setCommonName
argument_list|(
name|instructor
operator|.
name|getInstructor
argument_list|()
operator|.
name|getNameLastFirst
argument_list|()
argument_list|)
expr_stmt|;
name|attendee
operator|.
name|setRole
argument_list|(
name|Role
operator|.
name|CHAIR
argument_list|)
expr_stmt|;
name|vevent
operator|.
name|addAttendee
argument_list|(
name|attendee
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|vevent
operator|.
name|setStatus
argument_list|(
name|Status
operator|.
name|confirmed
argument_list|()
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addEvent
argument_list|(
name|vevent
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|printFreeTime
parameter_list|(
name|Date
name|dpFirstDate
parameter_list|,
name|BitSet
name|weekCode
parameter_list|,
name|String
name|days
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|,
name|ICalendar
name|ical
parameter_list|)
throws|throws
name|IOException
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|cal
operator|.
name|setLenient
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Date
name|first
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|size
argument_list|()
operator|&&
name|first
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|first
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|Date
name|last
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|idx
operator|>=
literal|0
operator|&&
name|last
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|last
operator|=
name|cal
operator|.
name|getTime
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|==
literal|null
condition|)
return|return;
name|VFreeBusy
name|vfree
init|=
operator|new
name|VFreeBusy
argument_list|()
decl_stmt|;
name|DateStart
name|dstart
init|=
operator|new
name|DateStart
argument_list|(
name|first
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|Calendar
name|c
init|=
name|Calendar
operator|.
name|getInstance
argument_list|(
name|Locale
operator|.
name|US
argument_list|)
decl_stmt|;
name|c
operator|.
name|setTime
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|c
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|DateEnd
name|dend
init|=
operator|new
name|DateEnd
argument_list|(
name|c
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|addComment
argument_list|(
literal|"Free Time"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addFreeBusy
argument_list|(
name|vfree
argument_list|)
expr_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|dpFirstDate
argument_list|)
expr_stmt|;
name|idx
operator|=
name|weekCode
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
name|idx
argument_list|)
expr_stmt|;
while|while
condition|(
name|idx
operator|<
name|weekCode
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|weekCode
operator|.
name|get
argument_list|(
name|idx
argument_list|)
condition|)
block|{
name|int
name|dow
init|=
name|cal
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
decl_stmt|;
name|boolean
name|offered
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|dow
condition|)
block|{
case|case
name|Calendar
operator|.
name|MONDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|MON
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|TUESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|TUE
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|WEDNESDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|WED
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|THURSDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|THU
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|FRIDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|FRI
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SATURDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SAT
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|Calendar
operator|.
name|SUNDAY
case|:
if|if
condition|(
name|days
operator|.
name|contains
argument_list|(
name|DayCode
operator|.
name|SUN
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|offered
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|offered
condition|)
block|{
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|HOUR_OF_DAY
argument_list|,
name|Constants
operator|.
name|toHour
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|toMinute
argument_list|(
name|start
argument_list|)
argument_list|)
expr_stmt|;
name|cal
operator|.
name|set
argument_list|(
name|Calendar
operator|.
name|SECOND
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|vfree
operator|=
operator|new
name|VFreeBusy
argument_list|()
expr_stmt|;
name|dstart
operator|=
operator|new
name|DateStart
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dstart
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateStart
argument_list|(
name|dstart
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MINUTE
argument_list|,
name|Constants
operator|.
name|SLOT_LENGTH_MIN
operator|*
name|len
argument_list|)
expr_stmt|;
name|dend
operator|=
operator|new
name|DateEnd
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dend
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|setDateEnd
argument_list|(
name|dend
argument_list|)
expr_stmt|;
name|vfree
operator|.
name|addComment
argument_list|(
literal|"Free Time"
argument_list|)
expr_stmt|;
name|ical
operator|.
name|addFreeBusy
argument_list|(
name|vfree
argument_list|)
expr_stmt|;
block|}
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|Params
block|{
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|HttpParams
implements|implements
name|Params
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|HttpParams
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
for|for
control|(
name|Enumeration
name|e
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|request
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|iParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|length
operator|<=
literal|0
condition|?
literal|null
else|:
name|values
index|[
literal|0
index|]
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|iParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|iParams
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumeration
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|QParams
implements|implements
name|Params
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|iParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|QParams
parameter_list|(
name|String
name|q
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
for|for
control|(
name|String
name|p
range|:
name|QueryEncoderBackend
operator|.
name|decode
argument_list|(
name|q
argument_list|)
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|p
operator|.
name|substring
argument_list|(
name|p
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|iParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|iParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|values
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|iParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|values
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|values
operator|.
name|toArray
argument_list|(
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|iParams
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Enumeration
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasMoreElements
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|nextElement
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
specifier|public
class|class
name|ICalendarMeeting
implements|implements
name|Comparable
argument_list|<
name|ICalendarMeeting
argument_list|>
block|{
specifier|private
name|DateTime
name|iStart
decl_stmt|,
name|iEnd
decl_stmt|;
specifier|private
name|String
name|iLocation
decl_stmt|;
specifier|private
name|Status
name|iStatus
decl_stmt|;
specifier|public
name|ICalendarMeeting
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
name|iStart
operator|=
operator|new
name|DateTime
argument_list|(
name|meeting
operator|.
name|getStartTime
argument_list|()
argument_list|)
expr_stmt|;
name|iEnd
operator|=
operator|new
name|DateTime
argument_list|(
name|meeting
operator|.
name|getStopTime
argument_list|()
argument_list|)
expr_stmt|;
name|iLocation
operator|=
operator|(
name|meeting
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|meeting
operator|.
name|getLocation
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|)
expr_stmt|;
name|iStatus
operator|=
name|meeting
operator|.
name|isApproved
argument_list|()
condition|?
name|Status
operator|.
name|confirmed
argument_list|()
else|:
name|Status
operator|.
name|tentative
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DateTime
name|getStart
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|DateStart
name|getDateStart
parameter_list|()
block|{
name|DateStart
name|ds
init|=
operator|new
name|DateStart
argument_list|(
name|iStart
operator|.
name|toDate
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
specifier|public
name|DateTime
name|getEnd
parameter_list|()
block|{
return|return
name|iEnd
return|;
block|}
specifier|public
name|DateEnd
name|getDateEnd
parameter_list|()
block|{
name|DateEnd
name|de
init|=
operator|new
name|DateEnd
argument_list|(
name|iEnd
operator|.
name|toDate
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|de
operator|.
name|setLocalTime
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|de
operator|.
name|setTimezoneId
argument_list|(
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|de
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|iLocation
return|;
block|}
specifier|public
name|Status
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|boolean
name|merge
parameter_list|(
name|ICalendarMeeting
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|getStart
argument_list|()
operator|.
name|equals
argument_list|(
name|getStart
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|getEnd
argument_list|()
operator|.
name|equals
argument_list|(
name|getEnd
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getStatus
argument_list|()
operator|==
name|Status
operator|.
name|tentative
argument_list|()
condition|)
name|iStatus
operator|=
name|Status
operator|.
name|tentative
argument_list|()
expr_stmt|;
name|iLocation
operator|+=
literal|", "
operator|+
name|m
operator|.
name|getLocation
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|same
parameter_list|(
name|ICalendarMeeting
name|m
parameter_list|)
block|{
return|return
name|m
operator|.
name|getStart
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|==
name|getStart
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|&&
name|m
operator|.
name|getEnd
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|==
name|getEnd
argument_list|()
operator|.
name|getSecondOfDay
argument_list|()
operator|&&
name|getLocation
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|&&
name|getStatus
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getStatus
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|ICalendarMeeting
name|m
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getStart
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getStart
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getEnd
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getEnd
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

