begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2012 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|localization
operator|.
name|impl
operator|.
name|Localization
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|Exporter
operator|.
name|Printer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|export
operator|.
name|hql
operator|.
name|SavedHqlExportToCSV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SavedHQLService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SavedHQLException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SavedHQLInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SavedHQLInterface
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SavedHQL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|SavedHQLDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|BackTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|webutil
operator|.
name|Navigation
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"hql.gwt"
argument_list|)
specifier|public
class|class
name|SavedHQLServlet
implements|implements
name|SavedHQLService
block|{
specifier|protected
specifier|static
name|GwtMessages
name|MESSAGES
init|=
name|Localization
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SavedHQLServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('HQLReports')"
argument_list|)
specifier|public
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|Flag
argument_list|>
name|getFlags
parameter_list|()
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|Flag
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SavedHQLInterface
operator|.
name|Flag
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SavedHQL
operator|.
name|Flag
name|f
range|:
name|SavedHQL
operator|.
name|Flag
operator|.
name|values
argument_list|()
control|)
block|{
name|SavedHQLInterface
operator|.
name|Flag
name|flag
init|=
operator|new
name|SavedHQLInterface
operator|.
name|Flag
argument_list|()
decl_stmt|;
name|flag
operator|.
name|setValue
argument_list|(
name|f
operator|.
name|flag
argument_list|()
argument_list|)
expr_stmt|;
name|flag
operator|.
name|setText
argument_list|(
name|getLocalizedDescription
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|flag
operator|.
name|setAppearance
argument_list|(
name|f
operator|.
name|getAppearance
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('HQLReports')"
argument_list|)
specifier|public
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|Option
argument_list|>
name|getOptions
parameter_list|()
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|Option
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SavedHQLInterface
operator|.
name|Option
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SavedHQL
operator|.
name|Option
name|o
range|:
name|SavedHQL
operator|.
name|Option
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|o
operator|.
name|allowSingleSelection
argument_list|()
operator|&&
operator|!
name|o
operator|.
name|allowMultiSelection
argument_list|()
condition|)
continue|continue;
name|SavedHQLInterface
operator|.
name|Option
name|option
init|=
operator|new
name|SavedHQLInterface
operator|.
name|Option
argument_list|()
decl_stmt|;
name|option
operator|.
name|setMultiSelect
argument_list|(
name|o
operator|.
name|allowMultiSelection
argument_list|()
argument_list|)
expr_stmt|;
name|option
operator|.
name|setName
argument_list|(
name|getLocalizedText
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|option
operator|.
name|setType
argument_list|(
name|o
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|values
init|=
name|o
operator|.
name|values
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
operator|||
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|e
range|:
name|values
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SavedHQLInterface
operator|.
name|IdValue
name|v
init|=
operator|new
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|()
decl_stmt|;
name|v
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|v
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|option
operator|.
name|values
argument_list|()
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|option
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('HQLReports') and checkPermission('HQLReportAdd')"
argument_list|)
specifier|public
name|Boolean
name|editable
parameter_list|()
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('HQLReports')"
argument_list|)
specifier|public
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|Query
argument_list|>
name|queries
parameter_list|(
name|String
name|appearance
parameter_list|)
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
name|SavedHQL
operator|.
name|Flag
name|ap
init|=
name|getAppearanceFlag
argument_list|(
name|appearance
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|ap
condition|)
block|{
case|case
name|APPEARANCE_ADMINISTRATION
case|:
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HQLReportsAdministration
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEARANCE_COURSES
case|:
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HQLReportsCourses
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEARANCE_EXAMS
case|:
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HQLReportsExaminations
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEARANCE_SECTIONING
case|:
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HQLReportsStudents
argument_list|)
expr_stmt|;
break|break;
case|case
name|APPEARANCE_EVENTS
case|:
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HQLReportsEvents
argument_list|)
expr_stmt|;
break|break;
block|}
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|Query
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SavedHQLInterface
operator|.
name|Query
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SavedHQL
name|hql
range|:
name|SavedHQL
operator|.
name|listAll
argument_list|(
literal|null
argument_list|,
name|ap
argument_list|,
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
argument_list|)
control|)
block|{
name|SavedHQLInterface
operator|.
name|Query
name|query
init|=
operator|new
name|SavedHQLInterface
operator|.
name|Query
argument_list|()
decl_stmt|;
name|query
operator|.
name|setName
argument_list|(
name|hql
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setDescription
argument_list|(
name|hql
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
name|hql
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFlags
argument_list|(
name|hql
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|setId
argument_list|(
name|hql
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('HQLReports')"
argument_list|)
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|execute
parameter_list|(
name|SavedHQLInterface
operator|.
name|Query
name|query
parameter_list|,
name|List
argument_list|<
name|SavedHQLInterface
operator|.
name|IdValue
argument_list|>
name|options
parameter_list|,
name|int
name|fromRow
parameter_list|,
name|int
name|maxRows
parameter_list|)
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Printer
name|out
init|=
operator|new
name|Printer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|printLine
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|ret
operator|.
name|add
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|printHeader
parameter_list|(
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|ret
operator|.
name|add
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|hideColumn
parameter_list|(
name|int
name|col
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
block|}
block|}
decl_stmt|;
name|SavedHqlExportToCSV
operator|.
name|execute
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|,
name|out
argument_list|,
name|query
argument_list|,
name|options
argument_list|,
name|fromRow
argument_list|,
name|maxRows
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|SavedHQLException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SavedHQLException
argument_list|(
name|MESSAGES
operator|.
name|failedExecution
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
operator|(
name|e
operator|.
name|getCause
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
operator|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"(#query.id != null and checkPermission(#query.id, 'SavedHQL', 'HQLReportEdit')) or (#query.id == null and checkPermission('HQLReportAdd'))"
argument_list|)
specifier|public
name|Long
name|store
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|SavedHQL
operator|.
name|Flag
operator|.
name|ADMIN_ONLY
operator|.
name|isSet
argument_list|(
name|query
operator|.
name|getFlags
argument_list|()
argument_list|)
condition|)
name|getSessionContext
argument_list|()
operator|.
name|checkPermission
argument_list|(
name|Right
operator|.
name|HQLReportsAdminOnly
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|SavedHQL
name|hql
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|query
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hql
operator|=
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|query
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hql
operator|==
literal|null
condition|)
block|{
name|hql
operator|=
operator|new
name|SavedHQL
argument_list|()
expr_stmt|;
block|}
name|hql
operator|.
name|setName
argument_list|(
name|query
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|hql
operator|.
name|setDescription
argument_list|(
name|query
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|hql
operator|.
name|setType
argument_list|(
name|query
operator|.
name|getFlags
argument_list|()
argument_list|)
expr_stmt|;
name|hql
operator|.
name|setQuery
argument_list|(
name|query
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|hql
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|refresh
argument_list|(
name|hql
argument_list|)
expr_stmt|;
return|return
name|hql
operator|.
name|getUniqueId
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#id, 'SavedHQL', 'HQLReportDelete')"
argument_list|)
specifier|public
name|Boolean
name|delete
parameter_list|(
name|Long
name|id
parameter_list|)
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SavedHQLException
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportProvided
argument_list|()
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|SavedHQL
name|hql
init|=
name|SavedHQLDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|hql
operator|!=
literal|null
condition|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|hql
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
return|return
name|hql
operator|!=
literal|null
return|;
block|}
specifier|private
name|SavedHQL
operator|.
name|Flag
name|getAppearanceFlag
parameter_list|(
name|String
name|appearance
parameter_list|)
block|{
for|for
control|(
name|SavedHQL
operator|.
name|Flag
name|flag
range|:
name|SavedHQL
operator|.
name|Flag
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|flag
operator|.
name|getAppearance
argument_list|()
operator|!=
literal|null
operator|&&
name|flag
operator|.
name|getAppearance
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|appearance
argument_list|)
condition|)
return|return
name|flag
return|;
return|return
name|SavedHQL
operator|.
name|Flag
operator|.
name|APPEARANCE_COURSES
return|;
block|}
specifier|private
name|String
name|getLocalizedDescription
parameter_list|(
name|SavedHQL
operator|.
name|Flag
name|flag
parameter_list|)
block|{
switch|switch
condition|(
name|flag
condition|)
block|{
case|case
name|APPEARANCE_COURSES
case|:
return|return
name|MESSAGES
operator|.
name|flagAppearanceCourses
argument_list|()
return|;
case|case
name|APPEARANCE_EXAMS
case|:
return|return
name|MESSAGES
operator|.
name|flagAppearanceExaminations
argument_list|()
return|;
case|case
name|APPEARANCE_EVENTS
case|:
return|return
name|MESSAGES
operator|.
name|flagAppearanceEvents
argument_list|()
return|;
case|case
name|APPEARANCE_SECTIONING
case|:
return|return
name|MESSAGES
operator|.
name|flagAppearanceStudentSectioning
argument_list|()
return|;
case|case
name|APPEARANCE_ADMINISTRATION
case|:
return|return
name|MESSAGES
operator|.
name|flagAppearanceAdministration
argument_list|()
return|;
case|case
name|ADMIN_ONLY
case|:
return|return
name|MESSAGES
operator|.
name|flagRestrictionsAdministratorOnly
argument_list|()
return|;
default|default:
return|return
name|flag
operator|.
name|description
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|getLocalizedText
parameter_list|(
name|SavedHQL
operator|.
name|Option
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|BUILDING
case|:
return|return
name|MESSAGES
operator|.
name|optionBuilding
argument_list|()
return|;
case|case
name|BUILDINGS
case|:
return|return
name|MESSAGES
operator|.
name|optionBuildings
argument_list|()
return|;
case|case
name|DEPARTMENT
case|:
return|return
name|MESSAGES
operator|.
name|optionDepartment
argument_list|()
return|;
case|case
name|DEPARTMENTS
case|:
return|return
name|MESSAGES
operator|.
name|optionDepartments
argument_list|()
return|;
case|case
name|ROOM
case|:
return|return
name|MESSAGES
operator|.
name|optionRoom
argument_list|()
return|;
case|case
name|ROOMS
case|:
return|return
name|MESSAGES
operator|.
name|optionRooms
argument_list|()
return|;
case|case
name|SESSION
case|:
return|return
name|MESSAGES
operator|.
name|optionAcademicSession
argument_list|()
return|;
case|case
name|SUBJECT
case|:
return|return
name|MESSAGES
operator|.
name|optionSubjectArea
argument_list|()
return|;
case|case
name|SUBJECTS
case|:
return|return
name|MESSAGES
operator|.
name|optionSubjectAreas
argument_list|()
return|;
default|default:
return|return
name|option
operator|.
name|text
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('HQLReports')"
argument_list|)
specifier|public
name|Boolean
name|setBack
parameter_list|(
name|String
name|appearance
parameter_list|,
name|String
name|history
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|ids
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|SavedHQLException
throws|,
name|PageAccessException
block|{
name|String
name|title
init|=
name|MESSAGES
operator|.
name|pageCourseReports
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|getAppearanceFlag
argument_list|(
name|appearance
argument_list|)
condition|)
block|{
case|case
name|APPEARANCE_COURSES
case|:
name|title
operator|=
name|MESSAGES
operator|.
name|pageCourseReports
argument_list|()
expr_stmt|;
break|break;
case|case
name|APPEARANCE_EXAMS
case|:
name|title
operator|=
name|MESSAGES
operator|.
name|pageExaminationReports
argument_list|()
expr_stmt|;
break|break;
case|case
name|APPEARANCE_SECTIONING
case|:
name|title
operator|=
name|MESSAGES
operator|.
name|pageStudentSectioningReports
argument_list|()
expr_stmt|;
break|break;
case|case
name|APPEARANCE_EVENTS
case|:
name|title
operator|=
name|MESSAGES
operator|.
name|pageEventReports
argument_list|()
expr_stmt|;
break|break;
case|case
name|APPEARANCE_ADMINISTRATION
case|:
name|title
operator|=
name|MESSAGES
operator|.
name|pageAdministrationReports
argument_list|()
expr_stmt|;
break|break;
block|}
name|BackTracker
operator|.
name|markForBack
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
literal|"gwt.jsp?page=hql&appearance="
operator|+
name|appearance
operator|+
literal|"#"
operator|+
name|history
argument_list|,
name|title
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"__Class"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sClassLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Offering"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Subpart"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sSchedulingSubpartLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Room"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Instructor"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Exam"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Event"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
name|Navigation
operator|.
name|set
argument_list|(
name|getSessionContext
argument_list|()
argument_list|,
name|Navigation
operator|.
name|sInstructionalOfferingLevel
argument_list|,
name|ids
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

