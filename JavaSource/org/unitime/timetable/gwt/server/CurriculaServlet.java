begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|Placement
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|coursett
operator|.
name|model
operator|.
name|RoomLocation
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cpsolver
operator|.
name|ifs
operator|.
name|util
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hibernate
operator|.
name|Transaction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|security
operator|.
name|access
operator|.
name|prepost
operator|.
name|PreAuthorize
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|stereotype
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|ApplicationProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicAreaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumCourseGroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumCourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumStudentsInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|MajorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|AcademicClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Assignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ClassInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Class_
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CourseOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Curriculum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumClassification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumCourseGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|CurriculumProjectionRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|Department
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|DepartmentalInstructor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstrOfferingConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|InstructionalOffering
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|PosMajor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|SchedulingSubpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|ChangeLog
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|comparators
operator|.
name|ClassComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicAreaDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|AcademicClassificationDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CourseOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|CurriculumDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|DepartmentDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|InstructionalOfferingDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|model
operator|.
name|dao
operator|.
name|PosMajorDAO
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|onlinesectioning
operator|.
name|custom
operator|.
name|CourseDetailsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|SessionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|UserContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|security
operator|.
name|rights
operator|.
name|Right
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|server
operator|.
name|curricula
operator|.
name|CurriculumFilterBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|test
operator|.
name|MakeCurriculaFromLastlikeDemands
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
annotation|@
name|Service
argument_list|(
literal|"curricula.gwt"
argument_list|)
specifier|public
class|class
name|CurriculaServlet
implements|implements
name|CurriculaService
block|{
specifier|private
specifier|static
name|Logger
name|sLog
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|CurriculaServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DecimalFormat
name|sDF
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
specifier|private
name|CourseDetailsProvider
name|iCourseDetailsProvider
decl_stmt|;
specifier|public
name|CurriculaServlet
parameter_list|()
block|{
try|try
block|{
name|String
name|providerClass
init|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"unitime.custom.CourseDetailsProvider"
argument_list|)
decl_stmt|;
if|if
condition|(
name|providerClass
operator|!=
literal|null
condition|)
name|iCourseDetailsProvider
operator|=
operator|(
name|CourseDetailsProvider
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|providerClass
argument_list|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|warn
argument_list|(
literal|"Failed to initialize course detail provider: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
annotation|@
name|Autowired
name|SessionContext
name|sessionContext
decl_stmt|;
specifier|private
name|SessionContext
name|getSessionContext
parameter_list|()
block|{
return|return
name|sessionContext
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|findCurricula
parameter_list|(
name|FilterRpcRequest
name|filter
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"findCurricula(filter='"
operator|+
name|filter
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
name|getSessionContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"Curricula.LastFilter"
argument_list|,
name|filter
operator|.
name|toQueryString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Curriculum
name|c
range|:
name|CurriculumFilterBackend
operator|.
name|curricula
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
argument_list|,
name|filter
operator|.
name|getOptions
argument_list|()
argument_list|,
operator|new
name|Query
argument_list|(
name|filter
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|,
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
name|CurriculumInterface
name|ci
init|=
operator|new
name|CurriculumInterface
argument_list|()
decl_stmt|;
name|ci
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setEditable
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|CurriculumEdit
argument_list|)
argument_list|)
expr_stmt|;
name|DepartmentInterface
name|di
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|di
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setCode
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setDepartment
argument_list|(
name|di
argument_list|)
expr_stmt|;
name|AcademicAreaInterface
name|ai
init|=
operator|new
name|AcademicAreaInterface
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
else|:
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|setAcademicArea
argument_list|(
name|ai
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MajorInterface
name|mi
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setCode
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ci
operator|.
name|addMajor
argument_list|(
name|mi
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
name|ci
argument_list|)
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" curricula (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|List
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
name|loadClassifications
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|curriculumIds
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadClassifications(curriculumIds="
operator|+
name|curriculumIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|curriculumIds
operator|==
literal|null
operator|||
name|curriculumIds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
operator|new
name|ArrayList
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
argument_list|()
return|;
name|List
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|academicClassifications
init|=
name|loadAcademicClassifications
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Long
name|curriculumId
range|:
name|curriculumIds
control|)
block|{
name|Curriculum
name|c
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculumId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"curriculum "
operator|+
name|curriculumId
operator|+
literal|" does not exist anymore, please refresh your data"
argument_list|)
throw|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|loadClasf2enrl
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasfMajor2ll
init|=
name|loadClasfMajor2ll
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
name|classifications
init|=
operator|new
name|TreeSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|c
operator|.
name|getClassifications
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|clasf
range|:
name|classifications
control|)
block|{
name|CurriculumClassificationInterface
name|cfi
init|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
decl_stmt|;
name|cfi
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setCurriculumId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|proj
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m2l
range|:
name|major2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|lastLike
operator|+=
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m2l
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|cfi
operator|.
name|setLastLike
argument_list|(
name|lastLike
operator|==
literal|0
condition|?
literal|null
else|:
name|lastLike
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setExpected
argument_list|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setEnrollment
argument_list|(
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AcademicClassificationInterface
name|aci
init|=
operator|new
name|AcademicClassificationInterface
argument_list|()
decl_stmt|;
name|aci
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|aci
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aci
operator|.
name|setCode
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setAcademicClassification
argument_list|(
name|aci
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|cfi
argument_list|)
expr_stmt|;
name|academicClassifications
operator|.
name|remove
argument_list|(
name|aci
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|academicClassifications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|CurriculumClassificationInterface
name|cfi
init|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
decl_stmt|;
name|cfi
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setCurriculumId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|proj
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m2l
range|:
name|major2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|lastLike
operator|+=
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m2l
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|cfi
operator|.
name|setLastLike
argument_list|(
name|lastLike
operator|==
literal|0
condition|?
literal|null
else|:
name|lastLike
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setEnrollment
argument_list|(
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AcademicClassificationInterface
name|aci
init|=
operator|new
name|AcademicClassificationInterface
argument_list|()
decl_stmt|;
name|aci
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|aci
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aci
operator|.
name|setCode
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|cfi
operator|.
name|setAcademicClassification
argument_list|(
name|aci
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|cfi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" classifications (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#curriculumId, 'Curriculum', 'CurriculumDetail')"
argument_list|)
specifier|public
name|CurriculumInterface
name|loadCurriculum
parameter_list|(
name|Long
name|curriculumId
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadCurriculum(curriculumId="
operator|+
name|curriculumId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|academicClassifications
init|=
name|loadAcademicClassifications
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|classifications
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|classifications
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|,
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Curriculum
name|c
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculumId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"curriculum "
operator|+
name|curriculumId
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|CurriculumInterface
name|curriculumIfc
init|=
operator|new
name|CurriculumInterface
argument_list|()
decl_stmt|;
name|curriculumIfc
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setEditable
argument_list|(
name|sessionContext
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|CurriculumEdit
argument_list|)
argument_list|)
expr_stmt|;
name|DepartmentInterface
name|deptIfc
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|deptIfc
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|deptIfc
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|deptIfc
operator|.
name|setCode
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|deptIfc
operator|.
name|setName
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setDepartment
argument_list|(
name|deptIfc
argument_list|)
expr_stmt|;
name|AcademicAreaInterface
name|areaIfc
init|=
operator|new
name|AcademicAreaInterface
argument_list|()
decl_stmt|;
name|areaIfc
operator|.
name|setId
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|areaIfc
operator|.
name|setAbbv
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|areaIfc
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
else|:
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setAcademicArea
argument_list|(
name|areaIfc
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MajorInterface
name|majorIfc
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|majorIfc
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|majorIfc
operator|.
name|setCode
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|majorIfc
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addMajor
argument_list|(
name|majorIfc
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasf2course2enrl
init|=
name|loadClasfCourse2enrl
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|loadClasf2enrl
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasfMajor2ll
init|=
name|loadClasfMajor2ll
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|clasfMajor2course2ll
init|=
name|loadClasfMajorCourse2ll
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseInterface
argument_list|>
name|courseId2Interface
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CourseInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroupInterface
argument_list|>
name|groups
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroupInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumClassification
argument_list|>
name|i
init|=
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|clasf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CurriculumClassificationInterface
name|clasfIfc
init|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
decl_stmt|;
name|clasfIfc
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setCurriculumId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|proj
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m2l
range|:
name|major2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|lastLike
operator|+=
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m2l
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|clasfIfc
operator|.
name|setLastLike
argument_list|(
name|lastLike
operator|==
literal|0
condition|?
literal|null
else|:
name|lastLike
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setEnrollment
argument_list|(
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setExpected
argument_list|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|AcademicClassificationInterface
name|acadClasfIfc
init|=
operator|new
name|AcademicClassificationInterface
argument_list|()
decl_stmt|;
name|acadClasfIfc
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|acadClasfIfc
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|acadClasfIfc
operator|.
name|setCode
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setAcademicClassification
argument_list|(
name|acadClasfIfc
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addClassification
argument_list|(
name|clasfIfc
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|course2enrl
init|=
name|clasf2course2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2course2ll
init|=
name|clasfMajor2course2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourse
argument_list|>
name|j
init|=
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|course
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|CourseInterface
name|courseIfc
init|=
name|courseId2Interface
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseIfc
operator|==
literal|null
condition|)
block|{
name|courseIfc
operator|=
operator|new
name|CourseInterface
argument_list|()
expr_stmt|;
name|courseIfc
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseIfc
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addCourse
argument_list|(
name|courseIfc
argument_list|)
expr_stmt|;
name|courseId2Interface
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|courseIfc
argument_list|)
expr_stmt|;
block|}
name|CurriculumCourseInterface
name|curCourseIfc
init|=
operator|new
name|CurriculumCourseInterface
argument_list|()
decl_stmt|;
name|curCourseIfc
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCourseOfferingId
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCurriculumClassificationId
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setShare
argument_list|(
name|course
operator|.
name|getPercShare
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setEnrollment
argument_list|(
name|course2enrl
operator|==
literal|null
condition|?
literal|null
else|:
name|course2enrl
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|courseLastLike
init|=
literal|0
decl_stmt|;
name|float
name|courseProj
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|major2course2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|m2l
range|:
name|major2course2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|ll
init|=
name|m2l
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ll
operator|!=
literal|null
condition|)
block|{
name|courseLastLike
operator|+=
name|ll
expr_stmt|;
name|courseProj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m2l
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|curCourseIfc
operator|.
name|setLastLike
argument_list|(
name|courseLastLike
operator|==
literal|0
condition|?
literal|null
else|:
name|courseLastLike
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|courseProj
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
name|courseProj
argument_list|)
argument_list|)
expr_stmt|;
name|courseIfc
operator|.
name|setCurriculumCourse
argument_list|(
name|classifications
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|curCourseIfc
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|k
init|=
name|course
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourseGroup
name|group
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|CurriculumCourseGroupInterface
name|g
init|=
name|groups
operator|.
name|get
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
name|g
operator|=
operator|new
name|CurriculumCourseGroupInterface
argument_list|()
expr_stmt|;
name|g
operator|.
name|setName
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setType
argument_list|(
name|group
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|group
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
block|}
name|courseIfc
operator|.
name|addGroup
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
name|academicClassifications
operator|.
name|remove
argument_list|(
name|acadClasfIfc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|academicClassifications
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|CurriculumClassificationInterface
name|clasfIfc
init|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
decl_stmt|;
name|clasfIfc
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setCurriculumId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|proj
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|m2l
range|:
name|major2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|lastLike
operator|+=
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m2l
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|m2l
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|clasfIfc
operator|.
name|setLastLike
argument_list|(
name|lastLike
operator|==
literal|0
condition|?
literal|null
else|:
name|lastLike
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|==
literal|0
condition|?
literal|null
else|:
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setEnrollment
argument_list|(
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AcademicClassificationInterface
name|acadClasfIfc
init|=
operator|new
name|AcademicClassificationInterface
argument_list|()
decl_stmt|;
name|acadClasfIfc
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|acadClasfIfc
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|acadClasfIfc
operator|.
name|setCode
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasfIfc
operator|.
name|setAcademicClassification
argument_list|(
name|acadClasfIfc
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addClassification
argument_list|(
name|clasfIfc
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeLog
name|ch
init|=
name|ChangeLog
operator|.
name|findLastChange
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|curriculumIfc
operator|.
name|setLastChange
argument_list|(
name|ch
operator|.
name|getShortLabel
argument_list|()
argument_list|)
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loaded 1 curriculum (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|curriculumIfc
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"(#curriculum.id != null and checkPermission(#curriculum.id, 'Curriculum', 'CurriculumEdit')) or (#curriculum.id == null and checkPermission(#curriculum.department.id, 'Department', 'CurriculumAdd'))"
argument_list|)
specifier|public
name|Long
name|saveCurriculum
parameter_list|(
name|CurriculumInterface
name|curriculum
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"saveCurriculum(curriculum="
operator|+
name|curriculum
operator|.
name|getId
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
name|courses
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CourseOffering
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|hasCourses
argument_list|()
condition|)
for|for
control|(
name|CourseInterface
name|course
range|:
name|curriculum
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"course "
operator|+
name|course
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|courses
operator|.
name|put
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|courseOffering
argument_list|)
expr_stmt|;
block|}
name|Curriculum
name|c
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|c
operator|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Curriculum "
operator|+
name|curriculum
operator|.
name|getId
argument_list|()
operator|+
literal|" no longer exists."
argument_list|)
throw|;
block|}
else|else
block|{
name|c
operator|=
operator|new
name|Curriculum
argument_list|()
expr_stmt|;
block|}
name|c
operator|.
name|setAbbv
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcademicArea
argument_list|(
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|setDepartment
argument_list|(
name|DepartmentDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getMajors
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|hasMajors
argument_list|()
condition|)
for|for
control|(
name|MajorInterface
name|m
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|(
name|c
operator|.
name|getMajors
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|hasMajors
argument_list|()
condition|)
name|majors
label|:
for|for
control|(
name|MajorInterface
name|m
range|:
name|curriculum
operator|.
name|getMajors
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|major
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|remove
operator|.
name|remove
argument_list|(
name|major
argument_list|)
expr_stmt|;
continue|continue
name|majors
continue|;
block|}
block|}
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|add
argument_list|(
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|remove
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumClassification
argument_list|>
name|classifications
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumClassification
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroup
argument_list|>
name|groups
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroup
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|CurriculumCourse
argument_list|>
name|remaining
init|=
operator|new
name|HashSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|remainingGroups
init|=
operator|new
name|HashSet
argument_list|<
name|CurriculumCourseGroup
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|ord
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getClassifications
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|CurriculumClassification
name|cl
init|=
operator|new
name|CurriculumClassification
argument_list|()
decl_stmt|;
name|cl
operator|.
name|setAcademicClassification
argument_list|(
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setNrStudents
argument_list|(
name|clasf
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setCurriculum
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|HashSet
argument_list|<
name|CurriculumClassification
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|c
operator|.
name|getClassifications
argument_list|()
argument_list|)
decl_stmt|;
name|clasf
label|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumClassification
argument_list|>
name|i
init|=
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|cl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|cl
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setNrStudents
argument_list|(
name|clasf
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|remove
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cl
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourse
argument_list|>
name|j
init|=
name|cl
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|cc
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|k
init|=
name|cc
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourseGroup
name|g
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|remainingGroups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|remaining
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cl
argument_list|)
expr_stmt|;
continue|continue
name|clasf
continue|;
block|}
block|}
name|CurriculumClassification
name|cl
init|=
operator|new
name|CurriculumClassification
argument_list|()
decl_stmt|;
name|cl
operator|.
name|setAcademicClassification
argument_list|(
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
else|:
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setNrStudents
argument_list|(
name|clasf
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setCurriculum
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|classifications
operator|.
name|put
argument_list|(
name|cl
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|cl
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|remove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CurriculumClassification
name|cl
range|:
name|remove
control|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourse
argument_list|>
name|j
init|=
name|cl
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|cc
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|k
init|=
name|cc
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourseGroup
name|g
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|remainingGroups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
name|remaining
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|remove
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setCurriculum
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|curriculum
operator|.
name|hasCourses
argument_list|()
condition|)
for|for
control|(
name|CourseInterface
name|course
range|:
name|curriculum
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|courses
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CurriculumCourseInterface
name|cc
range|:
name|course
operator|.
name|getCurriculumCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|cc
operator|==
literal|null
condition|)
continue|continue;
name|CurriculumClassification
name|clasf
init|=
name|classifications
operator|.
name|get
argument_list|(
name|cc
operator|.
name|getCurriculumClassificationId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
continue|continue;
name|CurriculumCourse
name|cx
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|clasf
operator|.
name|getCourses
argument_list|()
operator|==
literal|null
condition|)
block|{
name|clasf
operator|.
name|setCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourse
argument_list|>
name|i
init|=
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|courseOffering
argument_list|)
condition|)
block|{
name|x
operator|.
name|setPercShare
argument_list|(
name|cc
operator|.
name|getShare
argument_list|()
argument_list|)
expr_stmt|;
name|remaining
operator|.
name|remove
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|cx
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|cx
operator|==
literal|null
condition|)
block|{
name|cx
operator|=
operator|new
name|CurriculumCourse
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|cx
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setCourse
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setPercShare
argument_list|(
name|cc
operator|.
name|getShare
argument_list|()
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|hasGroups
argument_list|()
condition|)
block|{
if|if
condition|(
name|cx
operator|.
name|getGroups
argument_list|()
operator|==
literal|null
condition|)
name|cx
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|delete
init|=
operator|new
name|HashSet
argument_list|<
name|CurriculumCourseGroup
argument_list|>
argument_list|(
name|cx
operator|.
name|getGroups
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CurriculumCourseGroupInterface
name|gr
range|:
name|course
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|CurriculumCourseGroup
name|g
init|=
name|groups
operator|.
name|get
argument_list|(
name|gr
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
name|g
operator|=
operator|new
name|CurriculumCourseGroup
argument_list|()
expr_stmt|;
name|g
operator|.
name|setName
argument_list|(
name|gr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|gr
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setType
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setCurriculum
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|g
operator|.
name|setName
argument_list|(
name|gr
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|gr
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|g
operator|.
name|setType
argument_list|(
name|gr
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|g
argument_list|)
expr_stmt|;
name|remainingGroups
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|remove
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|cx
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|delete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cx
operator|.
name|getGroups
argument_list|()
operator|.
name|removeAll
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|cx
operator|.
name|getGroups
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|cx
operator|.
name|getGroups
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cx
operator|.
name|getGroups
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cx
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remaining
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CurriculumCourse
name|cc
range|:
name|remaining
control|)
block|{
name|cc
operator|.
name|getClassification
argument_list|()
operator|.
name|getCourses
argument_list|()
operator|.
name|remove
argument_list|(
name|cc
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setClassification
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cc
operator|.
name|getGroups
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|remainingGroups
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|CurriculumCourseGroup
name|g
range|:
name|remainingGroups
control|)
block|{
name|hibSession
operator|.
name|delete
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
name|Long
name|ret
init|=
name|c
operator|.
name|getUniqueId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
operator|(
name|Long
operator|)
name|hibSession
operator|.
name|save
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hibSession
operator|.
name|update
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULUM_EDIT
argument_list|,
operator|(
name|curriculum
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|Operation
operator|.
name|CREATE
else|:
name|Operation
operator|.
name|UPDATE
operator|)
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Saved 1 curriculum (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#curricula, 'Curriculum', 'CurriculumEdit')"
argument_list|)
specifier|public
name|Boolean
name|saveClassifications
parameter_list|(
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|curricula
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"saveClassifications()"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|int
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumInterface
name|curriculum
range|:
name|curricula
control|)
block|{
name|Curriculum
name|c
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
continue|continue;
name|HashSet
argument_list|<
name|CurriculumClassification
argument_list|>
name|remove
init|=
operator|new
name|HashSet
argument_list|<
name|CurriculumClassification
argument_list|>
argument_list|(
name|c
operator|.
name|getClassifications
argument_list|()
argument_list|)
decl_stmt|;
name|clasf
label|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|clasf
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumClassification
argument_list|>
name|i
init|=
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|cl
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|cl
operator|.
name|setNrStudents
argument_list|(
name|clasf
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|.
name|remove
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cl
argument_list|)
expr_stmt|;
continue|continue
name|clasf
continue|;
block|}
block|}
name|CurriculumClassification
name|cl
init|=
operator|new
name|CurriculumClassification
argument_list|()
decl_stmt|;
name|cl
operator|.
name|setAcademicClassification
argument_list|(
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setNrStudents
argument_list|(
name|clasf
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setOrd
argument_list|(
name|ord
operator|++
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setCurriculum
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurriculumClassification
name|cl
range|:
name|remove
control|)
block|{
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|remove
argument_list|(
name|cl
argument_list|)
expr_stmt|;
name|cl
operator|.
name|setCurriculum
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CUR_CLASF_EDIT
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Saved classifications for "
operator|+
name|curricula
operator|.
name|size
argument_list|()
operator|+
literal|" curricula (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#curriculumId, 'Curriculum', 'CurriculumDelete')"
argument_list|)
specifier|public
name|Boolean
name|deleteCurriculum
parameter_list|(
name|Long
name|curriculumId
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"deleteCurriculum(curriculumId="
operator|+
name|curriculumId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|curriculumId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Unsaved curriculum cannot be deleted."
argument_list|)
throw|;
name|Curriculum
name|c
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculumId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Curriculum "
operator|+
name|curriculumId
operator|+
literal|" no longer exists."
argument_list|)
throw|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULUM_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Deleted 1 curriculum (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#curriculumIds, 'Curriculum', 'CurriculumDelete')"
argument_list|)
specifier|public
name|Boolean
name|deleteCurricula
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|curriculumIds
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"deleteCurricula(curriculumIds="
operator|+
name|curriculumIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|curriculumId
range|:
name|curriculumIds
control|)
block|{
if|if
condition|(
name|curriculumId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Unsaved curriculum cannot be deleted."
argument_list|)
throw|;
name|Curriculum
name|c
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculumId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Curriculum "
operator|+
name|curriculumId
operator|+
literal|" no longer exists."
argument_list|)
throw|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULUM_EDIT
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Deleted "
operator|+
name|curriculumIds
operator|.
name|size
argument_list|()
operator|+
literal|" curricula (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#curriculumIds, 'Curriculum', 'CurriculumMerge')"
argument_list|)
specifier|public
name|Boolean
name|mergeCurricula
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|curriculumIds
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"mergeCurricula(curriculumIds="
operator|+
name|curriculumIds
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Curriculum
name|mergedCurriculum
init|=
operator|new
name|Curriculum
argument_list|()
decl_stmt|;
name|mergedCurriculum
operator|.
name|setMajors
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|mergedCurriculum
operator|.
name|setClassifications
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|clasfOrd
init|=
literal|0
decl_stmt|,
name|courseOrd
init|=
literal|0
decl_stmt|,
name|cidx
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumCourseGroup
argument_list|>
name|groups
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumCourseGroup
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Curriculum
argument_list|>
name|merged
init|=
operator|new
name|ArrayList
argument_list|<
name|Curriculum
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|curriculumId
range|:
name|curriculumIds
control|)
block|{
if|if
condition|(
name|curriculumId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Unsaved curriculum cannot be merged."
argument_list|)
throw|;
name|Curriculum
name|curriculum
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|curriculumId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculum
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Curriculum "
operator|+
name|curriculumId
operator|+
literal|" no longer exists."
argument_list|)
throw|;
name|cidx
operator|++
expr_stmt|;
if|if
condition|(
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|==
literal|null
condition|)
block|{
name|mergedCurriculum
operator|.
name|setAcademicArea
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|equals
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Selected curricula have different academic areas."
argument_list|)
throw|;
if|if
condition|(
name|mergedCurriculum
operator|.
name|getDepartment
argument_list|()
operator|==
literal|null
condition|)
block|{
name|mergedCurriculum
operator|.
name|setDepartment
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|mergedCurriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|equals
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"Selected curricula have different departments."
argument_list|)
throw|;
name|mergedCurriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|addAll
argument_list|(
name|curriculum
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumClassification
argument_list|>
name|i
init|=
name|curriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|clasf
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|CurriculumClassification
name|mergedClasf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumClassification
argument_list|>
name|j
init|=
name|mergedCurriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumClassification
name|x
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
condition|)
block|{
name|mergedClasf
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|mergedClasf
operator|==
literal|null
condition|)
block|{
name|mergedClasf
operator|=
operator|new
name|CurriculumClassification
argument_list|()
expr_stmt|;
name|mergedClasf
operator|.
name|setCurriculum
argument_list|(
name|mergedCurriculum
argument_list|)
expr_stmt|;
name|mergedClasf
operator|.
name|setAcademicClassification
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
expr_stmt|;
name|mergedClasf
operator|.
name|setCourses
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|mergedClasf
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|mergedClasf
operator|.
name|setOrd
argument_list|(
name|clasfOrd
operator|++
argument_list|)
expr_stmt|;
name|mergedClasf
operator|.
name|setNrStudents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mergedCurriculum
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|mergedClasf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|mergedClasf
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
name|mergedClasf
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
name|remainingMergedCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|(
name|mergedClasf
operator|.
name|getCourses
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourse
argument_list|>
name|j
init|=
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|course
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|CurriculumCourse
name|mergedCourse
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourse
argument_list|>
name|k
init|=
name|remainingMergedCourses
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourse
name|x
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|getCourse
argument_list|()
operator|.
name|equals
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
name|mergedCourse
operator|=
name|x
expr_stmt|;
name|k
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|mergedCourse
operator|==
literal|null
condition|)
block|{
name|mergedCourse
operator|=
operator|new
name|CurriculumCourse
argument_list|()
expr_stmt|;
name|mergedCourse
operator|.
name|setClassification
argument_list|(
name|mergedClasf
argument_list|)
expr_stmt|;
name|mergedCourse
operator|.
name|setCourse
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
name|mergedCourse
operator|.
name|setPercShare
argument_list|(
literal|0f
argument_list|)
expr_stmt|;
name|mergedCourse
operator|.
name|setOrd
argument_list|(
name|courseOrd
operator|++
argument_list|)
expr_stmt|;
name|mergedCourse
operator|.
name|setGroups
argument_list|(
operator|new
name|HashSet
argument_list|()
argument_list|)
expr_stmt|;
name|mergedClasf
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|mergedCourse
argument_list|)
expr_stmt|;
block|}
name|mergedCourse
operator|.
name|setPercShare
argument_list|(
operator|(
name|mergedCourse
operator|.
name|getPercShare
argument_list|()
operator|*
name|mergedClasf
operator|.
name|getNrStudents
argument_list|()
operator|+
operator|(
name|course
operator|.
name|getPercShare
argument_list|()
operator|==
literal|null
operator|||
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|null
condition|?
literal|0f
else|:
name|course
operator|.
name|getPercShare
argument_list|()
operator|*
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|)
operator|)
operator|/
operator|(
name|mergedClasf
operator|.
name|getNrStudents
argument_list|()
operator|+
operator|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|)
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CurriculumCourseGroup
argument_list|>
name|k
init|=
name|course
operator|.
name|getGroups
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|k
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CurriculumCourseGroup
name|group
init|=
name|k
operator|.
name|next
argument_list|()
decl_stmt|;
name|CurriculumCourseGroup
name|mergedGroup
init|=
name|groups
operator|.
name|get
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergedGroup
operator|==
literal|null
condition|)
block|{
name|mergedGroup
operator|=
operator|new
name|CurriculumCourseGroup
argument_list|()
expr_stmt|;
name|mergedGroup
operator|.
name|setColor
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|mergedGroup
operator|.
name|setType
argument_list|(
name|group
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|mergedGroup
operator|.
name|setName
argument_list|(
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|cidx
argument_list|)
expr_stmt|;
name|mergedGroup
operator|.
name|setCurriculum
argument_list|(
name|mergedCurriculum
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|mergedGroup
argument_list|)
expr_stmt|;
block|}
name|mergedCourse
operator|.
name|getGroups
argument_list|()
operator|.
name|add
argument_list|(
name|mergedGroup
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CurriculumCourse
name|mergedCourse
range|:
name|remainingMergedCourses
control|)
block|{
if|if
condition|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|!=
literal|null
operator|&&
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|>
literal|0
condition|)
name|mergedCourse
operator|.
name|setPercShare
argument_list|(
operator|(
name|mergedCourse
operator|.
name|getPercShare
argument_list|()
operator|*
name|mergedClasf
operator|.
name|getNrStudents
argument_list|()
operator|)
operator|/
operator|(
name|mergedClasf
operator|.
name|getNrStudents
argument_list|()
operator|+
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|mergedClasf
operator|.
name|setNrStudents
argument_list|(
name|mergedClasf
operator|.
name|getNrStudents
argument_list|()
operator|+
operator|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|merged
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|abbv
init|=
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
else|:
name|mergedCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|PosMajor
argument_list|>
name|majors
init|=
operator|new
name|TreeSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PosMajor
name|m1
parameter_list|,
name|PosMajor
name|m2
parameter_list|)
block|{
return|return
name|m1
operator|.
name|getCode
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|m2
operator|.
name|getCode
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|majors
operator|.
name|addAll
argument_list|(
name|mergedCurriculum
operator|.
name|getMajors
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMajor
name|m
range|:
name|majors
control|)
block|{
if|if
condition|(
name|abbv
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|abbv
operator|+=
literal|"/"
expr_stmt|;
name|name
operator|+=
literal|" / "
expr_stmt|;
block|}
else|else
block|{
name|abbv
operator|+=
literal|","
expr_stmt|;
name|name
operator|+=
literal|", "
expr_stmt|;
block|}
name|abbv
operator|+=
name|m
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|name
operator|+=
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|abbv
operator|.
name|length
argument_list|()
operator|>
literal|20
condition|)
name|abbv
operator|=
name|abbv
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|mergedCurriculum
operator|.
name|setAbbv
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|length
argument_list|()
operator|>
literal|60
condition|)
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|mergedCurriculum
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|mergedCurriculum
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourseGroup
name|g
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Curriculum
name|curriculum
range|:
name|merged
control|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|curriculum
argument_list|,
name|curriculum
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"&rarr; "
operator|+
name|mergedCurriculum
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULA
argument_list|,
name|Operation
operator|.
name|MERGE
argument_list|,
literal|null
argument_list|,
name|curriculum
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Merged "
operator|+
name|curriculumIds
operator|.
name|size
argument_list|()
operator|+
literal|" curricula (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|loadAcademicClassifications
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadAcademicClassifications()"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|clasf
range|:
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from AcademicClassification c where c.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|AcademicClassificationInterface
name|aci
init|=
operator|new
name|AcademicClassificationInterface
argument_list|()
decl_stmt|;
name|aci
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|aci
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aci
operator|.
name|setCode
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|aci
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" academic classifications (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|computeEnrollmentsAndLastLikes
parameter_list|(
name|Long
name|acadAreaId
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|majors
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"computeEnrollmentsAndLastLikes(acadAreaId="
operator|+
name|acadAreaId
operator|+
literal|", majors="
operator|+
name|majors
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|acadAreaId
operator|==
literal|null
condition|)
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
argument_list|()
return|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|classificationIndex
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|classifications
init|=
name|loadAcademicClassifications
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
name|classificationIndex
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|,
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|acadAreaId
argument_list|)
decl_stmt|;
name|AcademicArea
name|acadArea
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|acadAreaId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PosMajor
argument_list|>
name|posMajors
init|=
operator|new
name|ArrayList
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|majorId
range|:
name|majors
control|)
block|{
name|posMajors
operator|.
name|add
argument_list|(
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|majorId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|clasf2enrl
init|=
name|loadClasf2enrl
argument_list|(
name|hibSession
argument_list|,
name|acadAreaId
argument_list|,
name|majors
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf2course2enrl
init|=
name|loadClasfCourse2enrl
argument_list|(
name|hibSession
argument_list|,
name|acadAreaId
argument_list|,
name|majors
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf2ll
init|=
name|loadClasfMajor2ll
argument_list|(
name|hibSession
argument_list|,
name|acadArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|posMajors
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|clasf2course2ll
init|=
name|loadClasfCourseMajor2ll
argument_list|(
name|hibSession
argument_list|,
name|acadArea
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|,
name|posMajors
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
name|CurriculumStudentsInterface
index|[]
name|x
init|=
name|results
operator|.
name|get
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|==
literal|null
condition|)
block|{
name|x
operator|=
operator|new
name|CurriculumStudentsInterface
index|[
name|classificationIndex
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|int
name|col
init|=
name|classificationIndex
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|x
index|[
name|col
index|]
operator|=
operator|new
name|CurriculumStudentsInterface
argument_list|()
expr_stmt|;
name|x
index|[
name|col
index|]
operator|.
name|setProjection
argument_list|(
name|rules
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|x
index|[
name|col
index|]
operator|.
name|setEnrolledStudents
argument_list|(
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|x
index|[
name|col
index|]
operator|.
name|setLastLikeStudents
argument_list|(
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|lastLike
init|=
name|clasf2course2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|enrollment
init|=
name|clasf2course2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|CourseInterface
argument_list|>
name|courses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|CourseInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CourseInterface
name|c1
parameter_list|,
name|CourseInterface
name|c2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|c1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|c1
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastLike
operator|!=
literal|null
condition|)
name|courses
operator|.
name|addAll
argument_list|(
name|lastLike
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|!=
literal|null
condition|)
name|courses
operator|.
name|addAll
argument_list|(
name|enrollment
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseInterface
name|co
range|:
name|courses
control|)
block|{
name|CurriculumStudentsInterface
index|[]
name|c
init|=
name|results
operator|.
name|get
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|c
operator|=
operator|new
name|CurriculumStudentsInterface
index|[
name|classificationIndex
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|co
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|c
index|[
name|col
index|]
operator|=
operator|new
name|CurriculumStudentsInterface
argument_list|()
expr_stmt|;
name|c
index|[
name|col
index|]
operator|.
name|setProjection
argument_list|(
name|rules
operator|==
literal|null
condition|?
literal|null
else|:
name|rules
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
name|col
index|]
operator|.
name|setEnrolledStudents
argument_list|(
name|enrollment
operator|==
literal|null
condition|?
literal|null
else|:
name|enrollment
operator|.
name|get
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
name|col
index|]
operator|.
name|setLastLikeStudents
argument_list|(
name|lastLike
operator|==
literal|null
condition|?
literal|null
else|:
name|lastLike
operator|.
name|get
argument_list|(
name|co
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" courses with enrollments/last-like data (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|private
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|loadCurriculaForACourse
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|academicClassifications
parameter_list|,
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|academicAreas
parameter_list|,
name|CourseOffering
name|courseOffering
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|classifications
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|classifications
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|,
name|idx
operator|++
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2enrl
init|=
name|loadAreaMajorClasf2enrl
argument_list|(
name|hibSession
argument_list|,
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2ll
init|=
name|loadAreaMajorClasf2ll
argument_list|(
name|hibSession
argument_list|,
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumInterface
argument_list|>
name|curricula
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|cur2clasf2enrl
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|cur2clasf2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|course
range|:
operator|(
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CurriculumCourse c where c.course.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CurriculumClassification
name|clasf
init|=
name|course
operator|.
name|getClassification
argument_list|()
decl_stmt|;
name|Curriculum
name|curriculum
init|=
name|clasf
operator|.
name|getCurriculum
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
comment|// create curriculum interface
name|CurriculumInterface
name|curriculumIfc
init|=
name|curricula
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculumIfc
operator|==
literal|null
condition|)
block|{
name|curriculumIfc
operator|=
operator|new
name|CurriculumInterface
argument_list|()
expr_stmt|;
name|curriculumIfc
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setAbbv
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|AcademicAreaInterface
name|areaIfc
init|=
operator|new
name|AcademicAreaInterface
argument_list|()
decl_stmt|;
name|areaIfc
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|areaIfc
operator|.
name|setAbbv
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|areaIfc
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getShortTitle
argument_list|()
else|:
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setAcademicArea
argument_list|(
name|areaIfc
argument_list|)
expr_stmt|;
name|DepartmentInterface
name|deptIfc
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|deptIfc
operator|.
name|setId
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|deptIfc
operator|.
name|setAbbv
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|deptIfc
operator|.
name|setCode
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|deptIfc
operator|.
name|setName
argument_list|(
name|curriculum
operator|.
name|getDepartment
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|setDepartment
argument_list|(
name|deptIfc
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|MajorInterface
name|mi
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setCode
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addMajor
argument_list|(
name|mi
argument_list|)
expr_stmt|;
block|}
name|curricula
operator|.
name|put
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|curriculumIfc
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|curriculumIfc
argument_list|)
expr_stmt|;
name|cur2clasf2enrl
operator|.
name|put
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loadClasf2enrl
argument_list|(
name|hibSession
argument_list|,
name|curriculum
argument_list|)
argument_list|)
expr_stmt|;
name|cur2clasf2ll
operator|.
name|put
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|loadClasf2ll
argument_list|(
name|hibSession
argument_list|,
name|curriculum
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CurriculumClassificationInterface
name|curClasfIfc
init|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
decl_stmt|;
name|curClasfIfc
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curClasfIfc
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|curClasfIfc
operator|.
name|setCurriculumId
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curClasfIfc
operator|.
name|setLastLike
argument_list|(
name|cur2clasf2ll
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|curClasfIfc
operator|.
name|setExpected
argument_list|(
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|curClasfIfc
operator|.
name|setEnrollment
argument_list|(
name|cur2clasf2enrl
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|AcademicClassificationInterface
name|acadClasfIfc
init|=
operator|new
name|AcademicClassificationInterface
argument_list|()
decl_stmt|;
name|acadClasfIfc
operator|.
name|setId
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|acadClasfIfc
operator|.
name|setName
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|acadClasfIfc
operator|.
name|setCode
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|curClasfIfc
operator|.
name|setAcademicClassification
argument_list|(
name|acadClasfIfc
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addClassification
argument_list|(
name|curClasfIfc
argument_list|)
expr_stmt|;
name|CourseInterface
name|courseIfc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|curriculumIfc
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
name|courseIfc
operator|=
name|curriculumIfc
operator|.
name|getCourses
argument_list|()
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|courseIfc
operator|=
operator|new
name|CourseInterface
argument_list|()
expr_stmt|;
name|courseIfc
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseIfc
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addCourse
argument_list|(
name|courseIfc
argument_list|)
expr_stmt|;
block|}
name|CurriculumCourseInterface
name|curCourseIfc
init|=
operator|new
name|CurriculumCourseInterface
argument_list|()
decl_stmt|;
name|curCourseIfc
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCourseOfferingId
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCurriculumClassificationId
argument_list|(
name|clasf
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setShare
argument_list|(
name|course
operator|.
name|getPercShare
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2enrl
init|=
name|area2major2clasf2enrl
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2enrl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|majorId
range|:
name|major2clasf2enrl
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|major2clasf2enrl
operator|.
name|get
argument_list|(
name|majorId
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2enrl
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|+=
name|e
expr_stmt|;
name|clasf2enrl
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|major2clasf2enrl
operator|.
name|get
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2enrl
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|+=
name|e
expr_stmt|;
name|clasf2enrl
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|enrl
operator|>
literal|0
condition|)
name|curCourseIfc
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|proj
init|=
literal|0.0f
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|majorCode
range|:
name|major2clasf2ll
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|lastLike
operator|+=
name|e
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|majorCode
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|e
expr_stmt|;
name|clasf2ll
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|curriculum
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|m
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|lastLike
operator|+=
name|e
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|e
expr_stmt|;
name|clasf2ll
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|lastLike
operator|>
literal|0
condition|)
name|curCourseIfc
operator|.
name|setLastLike
argument_list|(
name|lastLike
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|>
literal|0
condition|)
name|curCourseIfc
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|courseIfc
operator|.
name|setCurriculumCourse
argument_list|(
name|classifications
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|,
name|curCourseIfc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CurriculumInterface
name|curriculumIfc
range|:
name|results
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|curriculumIfc
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2enrl
init|=
name|area2major2clasf2enrl
operator|.
name|get
argument_list|(
name|curriculumIfc
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2enrl
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|curriculumIfc
operator|.
name|hasMajors
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|majorId
range|:
name|major2clasf2enrl
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|major2clasf2enrl
operator|.
name|get
argument_list|(
name|majorId
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2enrl
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|+=
name|e
expr_stmt|;
name|clasf2enrl
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|MajorInterface
name|m
range|:
name|curriculumIfc
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|major2clasf2enrl
operator|.
name|get
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2enrl
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|+=
name|e
expr_stmt|;
name|clasf2enrl
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|proj
init|=
literal|0.0f
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|curriculumIfc
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|curriculumIfc
operator|.
name|hasMajors
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|majorCode
range|:
name|major2clasf2ll
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|lastLike
operator|+=
name|e
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|majorCode
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|e
expr_stmt|;
name|clasf2ll
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|MajorInterface
name|m
range|:
name|curriculumIfc
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|lastLike
operator|+=
name|e
expr_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|m
operator|.
name|getCode
argument_list|()
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|e
expr_stmt|;
name|clasf2ll
operator|.
name|remove
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|enrl
operator|>
literal|0
operator|||
name|lastLike
operator|>
literal|0
operator|||
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|>
literal|0
condition|)
block|{
name|CourseInterface
name|courseIfc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|curriculumIfc
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
name|courseIfc
operator|=
name|curriculumIfc
operator|.
name|getCourses
argument_list|()
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|courseIfc
operator|=
operator|new
name|CourseInterface
argument_list|()
expr_stmt|;
name|courseIfc
operator|.
name|setId
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|courseIfc
operator|.
name|setCourseName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|curriculumIfc
operator|.
name|addCourse
argument_list|(
name|courseIfc
argument_list|)
expr_stmt|;
block|}
name|CurriculumCourseInterface
name|curCourseIfc
init|=
operator|new
name|CurriculumCourseInterface
argument_list|()
decl_stmt|;
name|curCourseIfc
operator|.
name|setCourseOfferingId
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setShare
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|curCourseIfc
operator|.
name|setCourseName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrl
operator|>
literal|0
condition|)
name|curCourseIfc
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastLike
operator|>
literal|0
condition|)
name|curCourseIfc
operator|.
name|setLastLike
argument_list|(
name|lastLike
argument_list|)
expr_stmt|;
if|if
condition|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|>
literal|0
condition|)
name|curCourseIfc
operator|.
name|setProjection
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|courseIfc
operator|.
name|setCurriculumCourse
argument_list|(
name|classifications
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|curCourseIfc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|HashSet
argument_list|<
name|Long
argument_list|>
name|areas
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|areas
operator|.
name|addAll
argument_list|(
name|area2major2clasf2enrl
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|areasId2Abbv
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicAreaInterface
name|area
range|:
name|academicAreas
control|)
block|{
name|areasId2Abbv
operator|.
name|put
argument_list|(
name|area
operator|.
name|getId
argument_list|()
argument_list|,
name|area
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|area2major2clasf2ll
operator|.
name|containsKey
argument_list|(
name|area
operator|.
name|getAbbv
argument_list|()
argument_list|)
condition|)
name|areas
operator|.
name|add
argument_list|(
name|area
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|areaId
range|:
name|areas
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|areaId
argument_list|)
decl_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
name|CurriculumInterface
name|otherCurriculumIfc
init|=
operator|new
name|CurriculumInterface
argument_list|()
decl_stmt|;
name|CourseInterface
name|otherCourseIfc
init|=
operator|new
name|CourseInterface
argument_list|()
decl_stmt|;
name|otherCourseIfc
operator|.
name|setId
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|otherCourseIfc
operator|.
name|setCourseName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|otherCurriculumIfc
operator|.
name|addCourse
argument_list|(
name|otherCourseIfc
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|int
name|enrl
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2enrl
init|=
name|area2major2clasf2enrl
operator|.
name|get
argument_list|(
name|areaId
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2enrl
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Long
name|majorId
range|:
name|major2clasf2enrl
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|major2clasf2enrl
operator|.
name|get
argument_list|(
name|majorId
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2enrl
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|enrl
operator|+=
name|e
expr_stmt|;
block|}
block|}
block|}
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|int
name|proj
init|=
literal|0
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|areasId2Abbv
operator|.
name|get
argument_list|(
name|areaId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|majorCode
range|:
name|major2clasf2ll
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
name|Integer
name|e
init|=
operator|(
name|clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|lastLike
operator|+=
name|e
expr_stmt|;
name|proj
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|getProjection
argument_list|(
name|rules
argument_list|,
name|majorCode
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|enrl
operator|>
literal|0
operator|||
name|lastLike
operator|>
literal|0
operator|||
name|proj
operator|>
literal|0
condition|)
block|{
name|CurriculumCourseInterface
name|otherCurCourseIfc
init|=
operator|new
name|CurriculumCourseInterface
argument_list|()
decl_stmt|;
name|otherCurCourseIfc
operator|.
name|setCourseOfferingId
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|otherCurCourseIfc
operator|.
name|setCourseName
argument_list|(
name|courseOffering
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrl
operator|>
literal|0
condition|)
name|otherCurCourseIfc
operator|.
name|setEnrollment
argument_list|(
name|enrl
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastLike
operator|>
literal|0
condition|)
name|otherCurCourseIfc
operator|.
name|setLastLike
argument_list|(
name|lastLike
argument_list|)
expr_stmt|;
if|if
condition|(
name|proj
operator|>
literal|0
condition|)
name|otherCurCourseIfc
operator|.
name|setProjection
argument_list|(
name|proj
argument_list|)
expr_stmt|;
name|otherCourseIfc
operator|.
name|setCurriculumCourse
argument_list|(
name|classifications
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|otherCurCourseIfc
argument_list|)
expr_stmt|;
name|empty
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|empty
condition|)
continue|continue;
name|AcademicArea
name|a
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|areaId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
name|AcademicAreaInterface
name|areaIfc
init|=
operator|new
name|AcademicAreaInterface
argument_list|()
decl_stmt|;
name|areaIfc
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|areaIfc
operator|.
name|setAbbv
argument_list|(
name|a
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|areaIfc
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|a
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|a
operator|.
name|getShortTitle
argument_list|()
else|:
name|a
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|otherCurriculumIfc
operator|.
name|setAcademicArea
argument_list|(
name|areaIfc
argument_list|)
expr_stmt|;
name|otherCurriculumIfc
operator|.
name|setAbbv
argument_list|(
name|areaIfc
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|otherCurriculumIfc
operator|.
name|setName
argument_list|(
name|areaIfc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|otherCurriculumIfc
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|findCurriculaForACourse
parameter_list|(
name|String
name|courseName
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"getCurriculaForACourse(courseName='"
operator|+
name|courseName
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|academicClassifications
init|=
name|loadAcademicClassifications
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|academicAreas
init|=
name|loadAcademicAreas
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|CourseOffering
name|courseOffering
init|=
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|courseName
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"course "
operator|+
name|courseName
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|results
operator|=
name|loadCurriculaForACourse
argument_list|(
name|hibSession
argument_list|,
name|academicClassifications
argument_list|,
name|academicAreas
argument_list|,
name|courseOffering
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
operator|(
name|results
operator|==
literal|null
condition|?
literal|0
else|:
name|results
operator|.
name|size
argument_list|()
operator|)
operator|+
literal|" curricula (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|findCurriculaForAnInstructionalOffering
parameter_list|(
name|Long
name|offeringId
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"findCurriculaForAnOffering(offeringId='"
operator|+
name|offeringId
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|academicClassifications
init|=
name|loadAcademicClassifications
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|academicAreas
init|=
name|loadAcademicAreas
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|results
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|offeringId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"offering "
operator|+
name|offeringId
operator|+
literal|" does not exist"
argument_list|)
throw|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|results
operator|==
literal|null
condition|)
block|{
name|results
operator|=
name|loadCurriculaForACourse
argument_list|(
name|hibSession
argument_list|,
name|academicClassifications
argument_list|,
name|academicAreas
argument_list|,
name|courseOffering
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|curricula
init|=
name|loadCurriculaForACourse
argument_list|(
name|hibSession
argument_list|,
name|academicClassifications
argument_list|,
name|academicAreas
argument_list|,
name|courseOffering
argument_list|)
decl_stmt|;
name|curricula
label|:
for|for
control|(
name|CurriculumInterface
name|curriculum
range|:
name|curricula
control|)
block|{
for|for
control|(
name|CurriculumInterface
name|result
range|:
name|results
control|)
block|{
if|if
condition|(
name|ToolBox
operator|.
name|equals
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|ToolBox
operator|.
name|equals
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|result
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|addCourse
argument_list|(
name|curriculum
operator|.
name|getCourses
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
continue|continue
name|curricula
continue|;
block|}
block|}
name|results
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" curricula (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|loadAcademicAreas
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadAcademicAreas()"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|AcademicArea
argument_list|>
name|areas
init|=
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a from AcademicArea a where a.session.uniqueId = :sessionId order by a.academicAreaAbbreviation, a.longTitle, a.shortTitle"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicArea
name|a
range|:
name|areas
control|)
block|{
name|AcademicAreaInterface
name|ai
init|=
operator|new
name|AcademicAreaInterface
argument_list|()
decl_stmt|;
name|ai
operator|.
name|setId
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setAbbv
argument_list|(
name|a
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|ai
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|a
operator|.
name|getLongTitle
argument_list|()
operator|==
literal|null
condition|?
name|a
operator|.
name|getShortTitle
argument_list|()
else|:
name|a
operator|.
name|getLongTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|ai
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" academic areas (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|MajorInterface
argument_list|>
name|loadMajors
parameter_list|(
name|Long
name|curriculumId
parameter_list|,
name|Long
name|academicAreaId
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadMajors(academicAreaId="
operator|+
name|academicAreaId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|MajorInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|MajorInterface
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|AcademicArea
name|area
init|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|academicAreaId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
return|return
name|results
return|;
name|TreeSet
argument_list|<
name|PosMajor
argument_list|>
name|majors
init|=
operator|new
name|TreeSet
argument_list|<
name|PosMajor
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|PosMajor
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|PosMajor
name|m1
parameter_list|,
name|PosMajor
name|m2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|m1
operator|.
name|getName
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|m2
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|m1
operator|.
name|getCode
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|m1
operator|.
name|getUniqueId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m2
operator|.
name|getUniqueId
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|majors
operator|.
name|addAll
argument_list|(
name|area
operator|.
name|getPosMajors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|majors
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// Special case: academic area has no majors
name|majors
operator|.
name|removeAll
argument_list|(
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from Curriculum c inner join c.majors m where c.academicArea = :academicAreaId and c.uniqueId != :curriculumId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"academicAreaId"
argument_list|,
name|academicAreaId
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"curriculumId"
argument_list|,
operator|(
name|curriculumId
operator|==
literal|null
condition|?
operator|-
literal|1l
else|:
name|curriculumId
operator|)
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PosMajor
name|m
range|:
name|majors
control|)
block|{
name|MajorInterface
name|mi
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setId
argument_list|(
name|m
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setCode
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|mi
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" majors (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|TreeSet
argument_list|<
name|DepartmentInterface
argument_list|>
name|loadDepartments
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadDepartments()"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|DepartmentInterface
argument_list|>
name|results
init|=
operator|new
name|TreeSet
argument_list|<
name|DepartmentInterface
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Department
name|d
range|:
name|Department
operator|.
name|getUserDepartments
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
argument_list|)
control|)
block|{
name|DepartmentInterface
name|di
init|=
operator|new
name|DepartmentInterface
argument_list|()
decl_stmt|;
name|di
operator|.
name|setId
argument_list|(
name|d
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setCode
argument_list|(
name|d
operator|.
name|getDeptCode
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setAbbv
argument_list|(
name|d
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
expr_stmt|;
name|di
operator|.
name|setName
argument_list|(
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|di
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Loaded "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" departments (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|String
name|lastCurriculaFilter
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"lastCurriculaFilter()"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|filter
init|=
operator|(
name|String
operator|)
name|getSessionContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
literal|"Curricula.LastFilter"
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
name|filter
operator|=
literal|"department:Managed"
expr_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Last filter is '"
operator|+
name|filter
operator|+
literal|"'  (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|filter
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|listCourseOfferings
parameter_list|(
name|String
name|query
parameter_list|,
name|Integer
name|limit
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"listCourseOfferings(query='"
operator|+
name|query
operator|+
literal|"', limit="
operator|+
name|limit
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|CourseOffering
name|c
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and ("
operator|+
literal|"lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) like :q || '%' or lower(c.courseNbr) like :q || '%' "
operator|+
operator|(
name|query
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|?
literal|"or lower(c.title) like '%' || :q || '%'"
else|:
literal|""
operator|)
operator|+
literal|") "
operator|+
literal|"order by case "
operator|+
literal|"when lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) like :q || '%' then 0 else 1 end,"
operator|+
comment|// matches on course name first
literal|"c.subjectArea.subjectAreaAbbreviation, c.courseNbr"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"q"
argument_list|,
name|query
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
name|limit
operator|==
literal|null
operator|||
name|limit
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|limit
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|CourseAssignment
name|course
init|=
operator|new
name|CourseAssignment
argument_list|()
decl_stmt|;
name|course
operator|.
name|setCourseId
argument_list|(
name|c
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setSubject
argument_list|(
name|c
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseNbr
argument_list|(
name|c
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setNote
argument_list|(
name|c
operator|.
name|getScheduleBookNote
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setTitle
argument_list|(
name|c
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setHasUniqueName
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|unlimited
init|=
literal|false
decl_stmt|;
name|int
name|courseLimit
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|c
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|cfg
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|isUnlimitedEnrollment
argument_list|()
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getLimit
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|+=
name|cfg
operator|.
name|getLimit
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|courseLimit
operator|=
name|c
operator|.
name|getReservation
argument_list|()
expr_stmt|;
if|if
condition|(
name|courseLimit
operator|>=
literal|9999
condition|)
name|unlimited
operator|=
literal|true
expr_stmt|;
name|course
operator|.
name|setLimit
argument_list|(
name|unlimited
condition|?
operator|-
literal|1
else|:
name|courseLimit
argument_list|)
expr_stmt|;
name|course
operator|.
name|setProjected
argument_list|(
name|c
operator|.
name|getProjectedDemand
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setEnrollment
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setLastLike
argument_list|(
name|c
operator|.
name|getDemand
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" course offerings  (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|String
name|retrieveCourseDetails
parameter_list|(
name|String
name|course
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"retrieveCourseDetails(course='"
operator|+
name|course
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|CourseOffering
name|courseOffering
init|=
name|getCourse
argument_list|(
name|hibSession
argument_list|,
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"course "
operator|+
name|course
operator|+
literal|" does not exist"
argument_list|)
throw|;
if|if
condition|(
name|iCourseDetailsProvider
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"course detail interface not provided"
argument_list|)
throw|;
name|String
name|details
init|=
name|iCourseDetailsProvider
operator|.
name|getDetails
argument_list|(
operator|new
name|AcademicSessionInfo
argument_list|(
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getSession
argument_list|()
argument_list|)
argument_list|,
name|courseOffering
operator|.
name|getSubjectAreaAbbv
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
decl_stmt|;
name|sLog
operator|.
name|debug
argument_list|(
literal|"Details of length "
operator|+
name|details
operator|.
name|length
argument_list|()
operator|+
literal|" retrieved (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|details
return|;
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|Collection
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|listClasses
parameter_list|(
name|String
name|course
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
try|try
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"listClasses(course='"
operator|+
name|course
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
try|try
block|{
name|CourseOffering
name|courseOffering
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseOffering
name|c
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) = :course"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|course
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|courseOffering
operator|=
name|c
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|courseOffering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"course "
operator|+
name|course
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|List
argument_list|<
name|Class_
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|Class_
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstrOfferingConfig
argument_list|>
name|i
init|=
name|courseOffering
operator|.
name|getInstructionalOffering
argument_list|()
operator|.
name|getInstrOfferingConfigs
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstrOfferingConfig
name|config
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SchedulingSubpart
argument_list|>
name|j
init|=
name|config
operator|.
name|getSchedulingSubparts
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SchedulingSubpart
name|subpart
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|classes
operator|.
name|addAll
argument_list|(
name|subpart
operator|.
name|getClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|classes
argument_list|,
operator|new
name|ClassComparator
argument_list|(
name|ClassComparator
operator|.
name|COMPARE_BY_HIERARCHY
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Class_
name|clazz
range|:
name|classes
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|a
init|=
operator|new
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|()
decl_stmt|;
name|a
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpart
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getItypeDesc
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSection
argument_list|(
name|clazz
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setClassNumber
argument_list|(
name|clazz
operator|.
name|getSectionNumberString
argument_list|(
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addNote
argument_list|(
name|clazz
operator|.
name|getSchedulePrintNote
argument_list|()
argument_list|)
expr_stmt|;
name|Assignment
name|ass
init|=
name|clazz
operator|.
name|getCommittedAssignment
argument_list|()
decl_stmt|;
name|Placement
name|p
init|=
operator|(
name|ass
operator|==
literal|null
condition|?
literal|null
else|:
name|ass
operator|.
name|getPlacement
argument_list|()
operator|)
decl_stmt|;
name|int
name|minLimit
init|=
name|clazz
operator|.
name|getExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|maxLimit
init|=
name|clazz
operator|.
name|getMaxExpectedCapacity
argument_list|()
decl_stmt|;
name|int
name|limit
init|=
name|maxLimit
decl_stmt|;
if|if
condition|(
name|minLimit
operator|<
name|maxLimit
operator|&&
name|p
operator|!=
literal|null
condition|)
block|{
name|int
name|roomLimit
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|p
operator|.
name|getRoomSize
argument_list|()
operator|/
operator|(
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|clazz
operator|.
name|getRoomRatio
argument_list|()
operator|)
argument_list|)
decl_stmt|;
comment|// int roomLimit = Math.round((clazz.getRoomRatio() == null ? 1.0f : clazz.getRoomRatio()) * p.getRoomSize());
name|limit
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|minLimit
argument_list|,
name|roomLimit
argument_list|)
argument_list|,
name|maxLimit
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getInstrOfferingConfig
argument_list|()
operator|.
name|isUnlimitedEnrollment
argument_list|()
operator|||
name|limit
operator|>=
literal|9999
condition|)
name|limit
operator|=
operator|-
literal|1
expr_stmt|;
name|a
operator|.
name|setLimit
argument_list|(
operator|new
name|int
index|[]
block|{
operator|-
literal|1
block|,
name|limit
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DayCode
name|d
range|:
name|DayCode
operator|.
name|toDayCodes
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDayCode
argument_list|()
argument_list|)
control|)
name|a
operator|.
name|addDay
argument_list|(
name|d
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStart
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setLength
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setBreakTime
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getBreakTime
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setDatePattern
argument_list|(
name|p
operator|.
name|getTimeLocation
argument_list|()
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getRoomLocations
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RoomLocation
name|rm
range|:
name|p
operator|.
name|getRoomLocations
argument_list|()
control|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|rm
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getRoomLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|a
operator|.
name|addRoom
argument_list|(
name|p
operator|.
name|getRoomLocation
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|ClassInstructor
argument_list|>
name|i
init|=
name|clazz
operator|.
name|getClassInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ClassInstructor
name|instr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|a
operator|.
name|addInstructor
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
operator|.
name|getName
argument_list|(
name|DepartmentalInstructor
operator|.
name|sNameFormatShort
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|addInstructoEmailr
argument_list|(
name|instr
operator|.
name|getInstructor
argument_list|()
operator|.
name|getEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|!=
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|clazz
operator|.
name|getParentClass
argument_list|()
operator|.
name|getClassSuffix
argument_list|(
name|courseOffering
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setSubpartId
argument_list|(
name|clazz
operator|.
name|getSchedulingSubpart
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
condition|)
name|a
operator|.
name|setParentSection
argument_list|(
name|courseOffering
operator|.
name|getConsentType
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|courseOffering
operator|.
name|getConsentType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: Do we want to populate expected space?
name|a
operator|.
name|setExpected
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Found "
operator|+
name|results
operator|.
name|size
argument_list|()
operator|+
literal|" classes (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|results
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
index|[]
name|getApplicationProperty
parameter_list|(
name|String
index|[]
name|name
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|name
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|name
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|ret
index|[
name|i
index|]
operator|=
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
name|name
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumAdd') and checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|Boolean
name|canAddCurriculum
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumAdmin') and checkPermission('CurriculumView')"
argument_list|)
specifier|public
name|Boolean
name|isAdmin
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumProjectionRulesDetail')"
argument_list|)
specifier|public
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|loadProjectionRules
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"loadProjectionRules()"
argument_list|)
expr_stmt|;
name|Long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|UserContext
name|user
init|=
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|PageAccessException
argument_list|(
name|getSessionContext
argument_list|()
operator|.
name|isHttpSessionNew
argument_list|()
condition|?
literal|"Your timetabling session has expired. Please log in again."
else|:
literal|"Login is required to use this page."
argument_list|)
throw|;
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|rules
init|=
operator|new
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|areas
init|=
name|loadAcademicAreas
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|classifications
init|=
name|loadAcademicClassifications
argument_list|()
decl_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
name|MajorInterface
name|dummyMajor
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|dummyMajor
operator|.
name|setId
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
name|dummyMajor
operator|.
name|setCode
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
try|try
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|areaMajorClasf2ll
init|=
name|loadAreaMajorClasf2ll
argument_list|(
name|hibSession
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|MajorInterface
argument_list|>
name|majorLookup
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|MajorInterface
argument_list|>
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|MajorInterface
argument_list|>
argument_list|>
name|majors
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|MajorInterface
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|List
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select m from PosMajor m where m.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|MajorInterface
name|mi
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|mi
operator|.
name|setId
argument_list|(
name|major
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setCode
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|mi
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|curriculaToInitialCase
argument_list|(
name|major
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|majorLookup
operator|.
name|put
argument_list|(
name|mi
operator|.
name|getId
argument_list|()
argument_list|,
name|mi
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|AcademicArea
argument_list|>
name|i
init|=
name|major
operator|.
name|getAcademicAreas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AcademicArea
name|a
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MajorInterface
argument_list|>
name|majorsOfArea
init|=
name|majors
operator|.
name|get
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorsOfArea
operator|==
literal|null
condition|)
block|{
name|majorsOfArea
operator|=
operator|new
name|ArrayList
argument_list|<
name|MajorInterface
argument_list|>
argument_list|()
expr_stmt|;
name|majors
operator|.
name|put
argument_list|(
name|a
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|majorsOfArea
argument_list|)
expr_stmt|;
block|}
name|majorsOfArea
operator|.
name|add
argument_list|(
name|mi
argument_list|)
expr_stmt|;
block|}
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|AcademicClassificationInterface
argument_list|>
name|clasfLookup
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|AcademicClassificationInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
name|clasfLookup
operator|.
name|put
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|,
name|clasf
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|AcademicAreaInterface
argument_list|>
name|areaLookup
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|AcademicAreaInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicAreaInterface
name|area
range|:
name|areas
control|)
block|{
name|areaLookup
operator|.
name|put
argument_list|(
name|area
operator|.
name|getId
argument_list|()
argument_list|,
name|area
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
name|rules4area
init|=
name|rules
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|rules4area
operator|==
literal|null
condition|)
block|{
name|rules4area
operator|=
operator|new
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|rules
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|rules4area
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|majorClasf2ll
init|=
name|areaMajorClasf2ll
operator|.
name|get
argument_list|(
name|area
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
name|rules4default
init|=
operator|new
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|rules4area
operator|.
name|put
argument_list|(
name|dummyMajor
argument_list|,
name|rules4default
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
name|int
name|ll
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|majorClasf2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
range|:
name|majorClasf2ll
operator|.
name|values
argument_list|()
control|)
block|{
name|Integer
name|lastLike
init|=
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastLike
operator|!=
literal|null
condition|)
name|ll
operator|+=
name|lastLike
expr_stmt|;
block|}
block|}
name|rules4default
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
operator|new
name|Number
index|[]
block|{
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|ll
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|MajorInterface
argument_list|>
name|majorsOfArea
init|=
name|majors
operator|.
name|get
argument_list|(
name|area
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorsOfArea
operator|!=
literal|null
condition|)
for|for
control|(
name|MajorInterface
name|major
range|:
name|majorsOfArea
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
operator|(
name|majorClasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|majorClasf2ll
operator|.
name|get
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
name|rules4major
init|=
operator|new
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|rules4area
operator|.
name|put
argument_list|(
name|major
argument_list|,
name|rules4major
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
name|Integer
name|lastLike
init|=
operator|(
name|clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|rules4major
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
operator|new
name|Number
index|[]
block|{
literal|null
block|,
operator|new
name|Integer
argument_list|(
name|lastLike
operator|==
literal|null
condition|?
literal|0
else|:
name|lastLike
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
try|try
block|{
name|rules
operator|.
name|get
argument_list|(
name|areaLookup
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
name|dummyMajor
else|:
name|majorLookup
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|clasfLookup
operator|.
name|get
argument_list|(
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
argument_list|)
index|[
literal|0
index|]
operator|=
name|rule
operator|.
name|getProjection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
finally|finally
block|{
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Curriculum projection rules loaded (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
name|rules
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumProjectionRulesEdit')"
argument_list|)
specifier|public
name|Boolean
name|saveProjectionRules
parameter_list|(
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|rules
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"saveProjectionRules()"
argument_list|)
expr_stmt|;
name|long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|canEditProjectionRules
argument_list|()
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"not authorized to change curriculum projection rules"
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where academicArea.session.uniqueId=:sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|rule
argument_list|,
name|rule
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
operator|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"/"
operator|+
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|": "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|rule
operator|.
name|getProjection
argument_list|()
argument_list|)
operator|+
literal|"%"
argument_list|,
name|Source
operator|.
name|CUR_PROJ_RULES
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|delete
argument_list|(
name|rule
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|a
range|:
name|rules
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|AcademicArea
name|area
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
name|b
range|:
name|a
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|PosMajor
name|major
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
name|c
range|:
name|b
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getValue
argument_list|()
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
operator|||
name|c
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|area
operator|==
literal|null
condition|)
name|area
operator|=
name|AcademicAreaDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|hibSession
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|getKey
argument_list|()
operator|.
name|getId
argument_list|()
operator|>=
literal|0
operator|&&
name|major
operator|==
literal|null
condition|)
name|major
operator|=
name|PosMajorDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|b
operator|.
name|getKey
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|AcademicClassification
name|clasf
init|=
name|AcademicClassificationDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|CurriculumProjectionRule
name|r
init|=
operator|new
name|CurriculumProjectionRule
argument_list|()
decl_stmt|;
name|r
operator|.
name|setAcademicArea
argument_list|(
name|area
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMajor
argument_list|(
name|major
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAcademicClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|r
operator|.
name|setProjection
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
index|[
literal|0
index|]
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|r
argument_list|,
name|area
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
operator|+
operator|(
name|major
operator|==
literal|null
condition|?
literal|""
else|:
literal|"/"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|)
operator|+
literal|" "
operator|+
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|": "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|r
operator|.
name|getProjection
argument_list|()
argument_list|)
operator|+
literal|"%"
argument_list|,
name|Source
operator|.
name|CUR_PROJ_RULES
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Curriculum projection rules saved (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumProjectionRulesEdit')"
argument_list|)
specifier|public
name|Boolean
name|canEditProjectionRules
parameter_list|()
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumAdmin')"
argument_list|)
specifier|public
name|Boolean
name|makeupCurriculaFromLastLikeDemands
parameter_list|(
name|boolean
name|lastLike
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"makeupCurriculaFromLastLikeDemands(lastLike="
operator|+
name|lastLike
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isAdmin
argument_list|()
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"not authorized to (re)create curricula"
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
for|for
control|(
name|Curriculum
name|c
range|:
operator|(
name|List
argument_list|<
name|Curriculum
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Curriculum where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULA
argument_list|,
name|Operation
operator|.
name|DELETE
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MakeCurriculaFromLastlikeDemands
name|m
init|=
operator|new
name|MakeCurriculaFromLastlikeDemands
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|m
operator|.
name|update
argument_list|(
name|hibSession
argument_list|,
name|lastLike
argument_list|)
expr_stmt|;
for|for
control|(
name|Curriculum
name|c
range|:
operator|(
name|List
argument_list|<
name|Curriculum
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"from Curriculum where department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULA
argument_list|,
name|Operation
operator|.
name|CREATE
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Curricula recreated (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Boolean
name|updateCurriculaByProjections
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|curriculumIds
parameter_list|,
name|boolean
name|updateCurriculumCourses
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"updateCurriculaByProjections(curricula="
operator|+
name|curriculumIds
operator|+
literal|", updateCurriculumCourses="
operator|+
name|updateCurriculumCourses
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Curriculum
argument_list|>
name|curricula
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|curriculumIds
operator|==
literal|null
condition|)
block|{
name|curricula
operator|=
name|findAllCurricula
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|curricula
operator|=
operator|new
name|ArrayList
argument_list|<
name|Curriculum
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|curriculumIds
control|)
name|curricula
operator|.
name|add
argument_list|(
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Curriculum
name|c
range|:
name|curricula
control|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
operator|||
operator|!
name|getSessionContext
argument_list|()
operator|.
name|hasPermission
argument_list|(
name|c
argument_list|,
name|Right
operator|.
name|CurriculumEdit
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|AcademicClassification
argument_list|>
name|classifications
init|=
operator|(
name|List
argument_list|<
name|AcademicClassification
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from AcademicClassification c where c.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|rules
init|=
name|getRules
argument_list|(
name|hibSession
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasfMajor2ll
init|=
name|loadClasfMajor2ll
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|int
name|totalProjection
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AcademicClassification
name|acadClasf
range|:
name|classifications
control|)
block|{
name|float
name|proj
init|=
literal|0.0f
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|acadClasf
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|major2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|acadClasf
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|CurriculumClassification
name|clasf
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurriculumClassification
name|f
range|:
name|c
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|acadClasf
argument_list|)
condition|)
block|{
name|clasf
operator|=
name|f
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|clasf
operator|==
literal|null
operator|&&
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|CurriculumClassification
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|setAcademicClassification
argument_list|(
name|acadClasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCourses
argument_list|(
operator|new
name|HashSet
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCurriculum
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|acadClasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setOrd
argument_list|(
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|clasf
operator|.
name|setNrStudents
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|totalProjection
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateCurriculumCourses
condition|)
block|{
name|float
name|totalShareLimit
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.curriculum.lldemands.totalShareLimit"
argument_list|,
literal|"0.03"
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|shareLimit
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.curriculum.lldemands.shareLimit"
argument_list|,
literal|"0.00"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|enrollmentLimit
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|ApplicationProperties
operator|.
name|getProperty
argument_list|(
literal|"tmtbl.curriculum.lldemands.enrlLimit"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|clasfMajorCourse2ll
init|=
name|loadClasfMajorCourse2ll
argument_list|(
name|hibSession
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Float
argument_list|>
name|courseTotals
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Float
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|clasf
range|:
name|clasfMajorCourse2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major
range|:
name|clasf
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|course
range|:
name|major
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Float
name|total
init|=
name|courseTotals
operator|.
name|get
argument_list|(
name|course
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|courseTotals
operator|.
name|put
argument_list|(
name|course
operator|.
name|getKey
argument_list|()
argument_list|,
name|getProjection
argument_list|(
name|rules
argument_list|,
name|major
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getKey
argument_list|()
argument_list|)
operator|*
name|course
operator|.
name|getValue
argument_list|()
operator|+
operator|(
name|total
operator|==
literal|null
condition|?
literal|0.0f
else|:
name|total
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CurriculumClassification
name|clasf
range|:
name|c
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|majorCourse2ll
init|=
name|clasfMajorCourse2ll
operator|.
name|get
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorCourse2ll
operator|==
literal|null
operator|||
name|clasf
operator|.
name|getNrStudents
argument_list|()
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|CurriculumCourse
name|course
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|course
operator|.
name|setPercShare
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|HashSet
argument_list|<
name|Long
argument_list|>
name|remainingCourses
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|x
range|:
name|majorCourse2ll
operator|.
name|values
argument_list|()
control|)
name|remainingCourses
operator|.
name|addAll
argument_list|(
name|x
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CurriculumCourse
name|course
range|:
name|clasf
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|float
name|proj
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|majorCourse2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|lastLike
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
operator|(
name|lastLike
operator|==
literal|null
condition|?
literal|0
else|:
name|lastLike
operator|)
expr_stmt|;
block|}
name|course
operator|.
name|setPercShare
argument_list|(
name|proj
operator|/
name|clasf
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
name|remainingCourses
operator|.
name|remove
argument_list|(
name|course
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Long
name|courseId
range|:
name|remainingCourses
control|)
block|{
name|Float
name|courseTotal
init|=
name|courseTotals
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|float
name|totalShare
init|=
operator|(
name|courseTotal
operator|==
literal|null
condition|?
literal|0.0f
else|:
name|courseTotal
operator|)
operator|/
name|totalProjection
decl_stmt|;
if|if
condition|(
name|totalShare
operator|<
name|totalShareLimit
condition|)
continue|continue;
name|float
name|proj
init|=
literal|0.0f
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|entry
range|:
name|majorCourse2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Integer
name|lastLike
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
name|proj
operator|+=
name|getProjection
argument_list|(
name|rules
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
operator|*
operator|(
name|lastLike
operator|==
literal|null
condition|?
literal|0
else|:
name|lastLike
operator|)
expr_stmt|;
block|}
name|float
name|share
init|=
name|proj
operator|/
name|clasf
operator|.
name|getNrStudents
argument_list|()
decl_stmt|;
if|if
condition|(
name|share
operator|<=
literal|0.0f
operator|||
name|Math
operator|.
name|round
argument_list|(
name|proj
argument_list|)
operator|<
name|enrollmentLimit
operator|||
name|share
operator|<
name|shareLimit
condition|)
continue|continue;
name|CurriculumCourse
name|course
init|=
operator|new
name|CurriculumCourse
argument_list|()
decl_stmt|;
name|course
operator|.
name|setClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|course
operator|.
name|setOrd
argument_list|(
name|clasf
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourse
argument_list|(
name|CourseOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|courseId
argument_list|,
name|hibSession
argument_list|)
argument_list|)
expr_stmt|;
name|course
operator|.
name|setPercShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|c
argument_list|,
name|c
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|Source
operator|.
name|CURRICULA
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
literal|null
argument_list|,
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Curricula update (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission('CurriculumAdmin')"
argument_list|)
specifier|public
name|Boolean
name|populateCourseProjectedDemands
parameter_list|(
name|boolean
name|includeOtherStudents
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"populateCourseProjectedDemands(includeOtherStudents="
operator|+
name|includeOtherStudents
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|isAdmin
argument_list|()
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"not authorized to populate course projected demands"
argument_list|)
throw|;
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Long
name|sessionId
init|=
name|getAcademicSessionId
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|course2area2major2clasf2ll
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|includeOtherStudents
condition|)
block|{
name|course2area2major2clasf2ll
operator|=
name|loadCourseAreaMajorClasf2ll
argument_list|(
name|hibSession
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
name|rules
init|=
operator|(
name|includeOtherStudents
condition|?
name|getRules
argument_list|(
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|>
name|course2curriculum
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|cc
range|:
operator|(
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cc from CurriculumCourse cc where cc.classification.curriculum.academicArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
name|curricula
init|=
name|course2curriculum
operator|.
name|get
argument_list|(
name|cc
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|curricula
operator|==
literal|null
condition|)
block|{
name|curricula
operator|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumCourse
argument_list|>
argument_list|()
expr_stmt|;
name|course2curriculum
operator|.
name|put
argument_list|(
name|cc
operator|.
name|getCourse
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|,
name|curricula
argument_list|)
expr_stmt|;
block|}
name|curricula
operator|.
name|add
argument_list|(
name|cc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseOffering
name|courseOffering
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select co from CourseOffering co where co.subjectArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|sessionId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Integer
name|oldDemand
init|=
name|courseOffering
operator|.
name|getDemand
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2ll
init|=
operator|(
name|course2area2major2clasf2ll
operator|==
literal|null
condition|?
literal|null
else|:
name|course2area2major2clasf2ll
operator|.
name|get
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
name|curricula
init|=
name|course2curriculum
operator|.
name|get
argument_list|(
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|demand
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|curricula
operator|!=
literal|null
condition|)
for|for
control|(
name|CurriculumCourse
name|curriculum
range|:
name|curricula
control|)
block|{
name|demand
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|curriculum
operator|.
name|getPercShare
argument_list|()
operator|*
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|area2major2clasf2ll
operator|!=
literal|null
condition|)
block|{
name|String
name|areaAbbv
init|=
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|area2major2clasf2ll
operator|.
name|remove
argument_list|(
name|areaAbbv
argument_list|)
expr_stmt|;
comment|/* 										for (Hashtable<String, Integer> clasf2ll: major2clasf2ll.values()) { 											clasf2ll.remove(curriculum.getClassification().getAcademicClassification().getCode()); 										} 										*/
block|}
else|else
block|{
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|Collection
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|major2clasf2ll
operator|.
name|remove
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 											Hashtable<String, Integer> clasf2ll = major2clasf2ll.get(major.getCode()); 											if (clasf2ll != null) 												clasf2ll.remove(curriculum.getClassification().getAcademicClassification().getCode()); 											*/
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|area2major2clasf2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|areaEmajor2clasf2ll
range|:
name|area2major2clasf2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|majorEclasf2ll
range|:
name|areaEmajor2clasf2ll
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasfEll
range|:
name|majorEclasf2ll
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|demand
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|getProjection
argument_list|(
name|rules
operator|==
literal|null
condition|?
literal|null
else|:
name|rules
operator|.
name|get
argument_list|(
name|areaEmajor2clasf2ll
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|majorEclasf2ll
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasfEll
operator|.
name|getKey
argument_list|()
argument_list|)
operator|*
name|clasfEll
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|courseOffering
operator|.
name|setProjectedDemand
argument_list|(
name|demand
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDemand
operator|==
literal|null
operator|||
name|demand
operator|!=
name|oldDemand
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|courseOffering
argument_list|,
name|courseOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" projection: "
operator|+
name|oldDemand
operator|+
literal|"&rarr; "
operator|+
name|demand
argument_list|,
name|Source
operator|.
name|CURRICULA
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Course projected demands updated (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|PreAuthorize
argument_list|(
literal|"checkPermission(#offeringId, 'InstructionalOffering', 'InstructionalOfferingDetail') or checkPermission('CurriculumAdmin')"
argument_list|)
specifier|public
name|Boolean
name|populateCourseProjectedDemands
parameter_list|(
name|boolean
name|includeOtherStudents
parameter_list|,
name|Long
name|offeringId
parameter_list|)
throws|throws
name|CurriculaException
throws|,
name|PageAccessException
block|{
name|sLog
operator|.
name|debug
argument_list|(
literal|"populateCourseProjectedDemands(includeOtherStudents="
operator|+
name|includeOtherStudents
operator|+
literal|", offering="
operator|+
name|offeringId
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|long
name|s0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
init|=
name|CurriculumDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|Transaction
name|tx
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tx
operator|=
name|hibSession
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|InstructionalOffering
name|offering
init|=
name|InstructionalOfferingDAO
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|offeringId
argument_list|,
name|hibSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|offering
operator|==
literal|null
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"offering "
operator|+
name|offeringId
operator|+
literal|" does not exist"
argument_list|)
throw|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseOffering
argument_list|>
name|i
init|=
name|offering
operator|.
name|getCourseOfferings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseOffering
name|courseOffering
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Integer
name|oldDemand
init|=
name|courseOffering
operator|.
name|getDemand
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2ll
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|includeOtherStudents
condition|)
block|{
name|area2major2clasf2ll
operator|=
name|loadAreaMajorClasf2ll
argument_list|(
name|hibSession
argument_list|,
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
name|rules
init|=
operator|(
name|includeOtherStudents
condition|?
name|getRules
argument_list|(
name|hibSession
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
name|int
name|demand
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumCourse
name|curriculum
range|:
operator|(
name|List
argument_list|<
name|CurriculumCourse
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select cc from CurriculumCourse cc where cc.course.uniqueId = :courseId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|courseOffering
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|demand
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|curriculum
operator|.
name|getPercShare
argument_list|()
operator|*
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getNrStudents
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|area2major2clasf2ll
operator|!=
literal|null
condition|)
block|{
name|String
name|areaAbbv
init|=
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|area2major2clasf2ll
operator|.
name|remove
argument_list|(
name|areaAbbv
argument_list|)
expr_stmt|;
comment|/* 									for (Hashtable<String, Integer> clasf2ll: major2clasf2ll.values()) { 										clasf2ll.remove(curriculum.getClassification().getAcademicClassification().getCode()); 									} 									*/
block|}
else|else
block|{
for|for
control|(
name|PosMajor
name|major
range|:
operator|(
name|Collection
argument_list|<
name|PosMajor
argument_list|>
operator|)
name|curriculum
operator|.
name|getClassification
argument_list|()
operator|.
name|getCurriculum
argument_list|()
operator|.
name|getMajors
argument_list|()
control|)
block|{
name|major2clasf2ll
operator|.
name|remove
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
comment|/* 										Hashtable<String, Integer> clasf2ll = major2clasf2ll.get(major.getCode()); 										if (clasf2ll != null) 											clasf2ll.remove(curriculum.getClassification().getAcademicClassification().getCode()); 										*/
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|area2major2clasf2ll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|areaEmajor2clasf2ll
range|:
name|area2major2clasf2ll
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|majorEclasf2ll
range|:
name|areaEmajor2clasf2ll
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasfEll
range|:
name|majorEclasf2ll
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|demand
operator|+=
name|Math
operator|.
name|round
argument_list|(
name|getProjection
argument_list|(
name|rules
operator|==
literal|null
condition|?
literal|null
else|:
name|rules
operator|.
name|get
argument_list|(
name|areaEmajor2clasf2ll
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|majorEclasf2ll
operator|.
name|getKey
argument_list|()
argument_list|,
name|clasfEll
operator|.
name|getKey
argument_list|()
argument_list|)
operator|*
name|clasfEll
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|courseOffering
operator|.
name|setProjectedDemand
argument_list|(
name|demand
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldDemand
operator|==
literal|null
operator|||
name|demand
operator|!=
name|oldDemand
condition|)
block|{
name|ChangeLog
operator|.
name|addChange
argument_list|(
name|hibSession
argument_list|,
name|getSessionContext
argument_list|()
argument_list|,
name|courseOffering
argument_list|,
name|courseOffering
operator|.
name|getCourseName
argument_list|()
operator|+
literal|" projection: "
operator|+
name|oldDemand
operator|+
literal|"&rarr; "
operator|+
name|demand
argument_list|,
name|Source
operator|.
name|CURRICULA
argument_list|,
name|Operation
operator|.
name|UPDATE
argument_list|,
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
argument_list|,
name|courseOffering
operator|.
name|getSubjectArea
argument_list|()
operator|.
name|getDepartment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|saveOrUpdate
argument_list|(
name|courseOffering
argument_list|)
expr_stmt|;
block|}
name|hibSession
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tx
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tx
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
if|if
condition|(
name|tx
operator|!=
literal|null
operator|&&
name|tx
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|tx
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
name|hibSession
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sLog
operator|.
name|debug
argument_list|(
literal|"Course projected demands updated (took "
operator|+
name|sDF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|s0
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PageAccessException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|CurriculaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|sLog
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|CurriculaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/* Support functions (lookups etc.) */
specifier|private
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|getSessionContext
argument_list|()
operator|.
name|getUser
argument_list|()
operator|.
name|getCurrentAcademicSessionId
argument_list|()
return|;
block|}
specifier|private
name|List
argument_list|<
name|Curriculum
argument_list|>
name|findAllCurricula
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
return|return
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select distinct c from Curriculum c where c.department.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|loadClasf2enrl
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Curriculum
name|c
parameter_list|)
block|{
name|String
name|majorIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorIds
operator|+=
literal|","
expr_stmt|;
name|majorIds
operator|+=
name|major
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicClassification.uniqueId, count(distinct e.student) from StudentClassEnrollment e inner join e.student.academicAreaClassifications a "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" inner join e.student.posMajors m "
operator|)
operator|+
literal|"where "
operator|+
literal|"e.student.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.uniqueId = :areaId "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.uniqueId in ("
operator|+
name|majorIds
operator|+
literal|") "
operator|)
operator|+
literal|"group by a.academicClassification.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"areaId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|clasfId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|enrl
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|clasf2enrl
operator|.
name|put
argument_list|(
name|clasfId
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2enrl
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|loadClasf2enrl
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|acadAreaId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|majors
parameter_list|)
block|{
name|String
name|majorIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|majorId
range|:
name|majors
control|)
block|{
if|if
condition|(
operator|!
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorIds
operator|+=
literal|","
expr_stmt|;
name|majorIds
operator|+=
name|majorId
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|clasf2enrl
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicClassification.uniqueId, e.student.uniqueId from StudentClassEnrollment e inner join e.student.academicAreaClassifications a "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" inner join e.student.posMajors m "
operator|)
operator|+
literal|"where "
operator|+
literal|"e.student.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.uniqueId = :areaId "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.uniqueId in ("
operator|+
name|majorIds
operator|+
literal|") "
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"areaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|clasfId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|clasf2enrl
operator|.
name|get
argument_list|(
name|clasfId
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2enrl
operator|.
name|put
argument_list|(
name|clasfId
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2enrl
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|loadClasfMajor2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Curriculum
name|c
parameter_list|)
block|{
name|String
name|majorCodes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorCodes
operator|+=
literal|","
expr_stmt|;
name|majorCodes
operator|+=
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasfMajor2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f.code, m.code, count(distinct s) from LastLikeCourseDemand x inner join x.student s "
operator|+
literal|"inner join s.academicAreaClassifications a inner join a.academicClassification f inner join s.posMajors m where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.academicAreaAbbreviation = :acadAbbv "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.code in ("
operator|+
name|majorCodes
operator|+
literal|") "
operator|)
operator|+
literal|"group by f.code, m.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"acadAbbv"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|int
name|enrl
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|major2ll
init|=
name|clasfMajor2ll
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2ll
operator|==
literal|null
condition|)
block|{
name|major2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|clasfMajor2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2ll
argument_list|)
expr_stmt|;
block|}
name|major2ll
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
return|return
name|clasfMajor2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|loadClasf2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Curriculum
name|c
parameter_list|)
block|{
name|String
name|majorCodes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorCodes
operator|+=
literal|","
expr_stmt|;
name|majorCodes
operator|+=
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f.code, count(distinct s) from LastLikeCourseDemand x inner join x.student s "
operator|+
literal|"inner join s.academicAreaClassifications a inner join a.academicClassification f "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" inner join s.posMajors m "
operator|)
operator|+
literal|"where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.academicAreaAbbreviation = :acadAbbv "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.code in ("
operator|+
name|majorCodes
operator|+
literal|") "
operator|)
operator|+
literal|"group by f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"acadAbbv"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|int
name|enrl
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|clasf2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|loadClasfMajor2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|acadAreaAbbv
parameter_list|,
name|Collection
argument_list|<
name|PosMajor
argument_list|>
name|majors
parameter_list|)
block|{
name|String
name|majorCodes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|majors
control|)
block|{
if|if
condition|(
operator|!
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorCodes
operator|+=
literal|","
expr_stmt|;
name|majorCodes
operator|+=
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f.code, m.code, s.uniqueId from LastLikeCourseDemand x inner join x.student s "
operator|+
literal|"inner join s.academicAreaClassifications a inner join a.academicClassification f inner join s.posMajors m where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.academicAreaAbbreviation = :acadAbbv "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.code in ("
operator|+
name|majorCodes
operator|+
literal|") "
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"acadAbbv"
argument_list|,
name|acadAreaAbbv
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|major2students
init|=
name|clasf2ll
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2students
operator|==
literal|null
condition|)
block|{
name|major2students
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|major2students
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|major2students
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|loadClasfCourse2enrl
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Curriculum
name|c
parameter_list|)
block|{
name|String
name|majorIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorIds
operator|+=
literal|","
expr_stmt|;
name|majorIds
operator|+=
name|major
operator|.
name|getUniqueId
argument_list|()
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|clasf2course2enrl
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicClassification.uniqueId, e.courseOffering.uniqueId, count(distinct e.student) from StudentClassEnrollment e inner join e.student.academicAreaClassifications a "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" inner join e.student.posMajors m "
operator|)
operator|+
literal|"where "
operator|+
literal|"e.student.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.uniqueId = :areaId "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.uniqueId in ("
operator|+
name|majorIds
operator|+
literal|") "
operator|)
operator|+
literal|"group by a.academicClassification.uniqueId, e.courseOffering.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"areaId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getUniqueId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|clasfId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|int
name|enrl
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|2
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|course2enrl
init|=
name|clasf2course2enrl
operator|.
name|get
argument_list|(
name|clasfId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2enrl
operator|==
literal|null
condition|)
block|{
name|course2enrl
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2course2enrl
operator|.
name|put
argument_list|(
name|clasfId
argument_list|,
name|course2enrl
argument_list|)
expr_stmt|;
block|}
name|course2enrl
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2course2enrl
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|loadClasfCourse2enrl
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|acadAreaId
parameter_list|,
name|Collection
argument_list|<
name|Long
argument_list|>
name|majors
parameter_list|)
block|{
name|String
name|majorIds
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|majorId
range|:
name|majors
control|)
block|{
if|if
condition|(
operator|!
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorIds
operator|+=
literal|","
expr_stmt|;
name|majorIds
operator|+=
name|majorId
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|clasf2course2enrl
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicClassification.uniqueId, e.courseOffering.uniqueId, e.courseOffering.subjectArea.subjectAreaAbbreviation || ' ' || e.courseOffering.courseNbr, e.student.uniqueId from StudentClassEnrollment e inner join e.student.academicAreaClassifications a "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" inner join e.student.posMajors m "
operator|)
operator|+
literal|"where "
operator|+
literal|"e.student.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.uniqueId = :areaId "
operator|+
operator|(
name|majorIds
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.uniqueId in ("
operator|+
name|majorIds
operator|+
literal|") "
operator|)
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"areaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|clasfId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|courseName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|CourseInterface
name|course
init|=
operator|new
name|CourseInterface
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseName
argument_list|(
name|courseName
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|course2enrl
init|=
name|clasf2course2enrl
operator|.
name|get
argument_list|(
name|clasfId
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2enrl
operator|==
literal|null
condition|)
block|{
name|course2enrl
operator|=
operator|new
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2course2enrl
operator|.
name|put
argument_list|(
name|clasfId
argument_list|,
name|course2enrl
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|course2enrl
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|course2enrl
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2course2enrl
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|loadClasfMajorCourse2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Curriculum
name|c
parameter_list|)
block|{
name|String
name|majorCodes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|PosMajor
argument_list|>
name|i
init|=
name|c
operator|.
name|getMajors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PosMajor
name|major
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorCodes
operator|+=
literal|","
expr_stmt|;
name|majorCodes
operator|+=
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|clasfMajor2course2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f.code, m.code, co.uniqueId, count(distinct s) "
operator|+
literal|"from LastLikeCourseDemand x inner join x.student s inner join s.academicAreaClassifications a inner join a.academicClassification f inner join s.posMajors m, CourseOffering co where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.academicAreaAbbreviation = :acadAbbv "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.code in ("
operator|+
name|majorCodes
operator|+
literal|") "
operator|)
operator|+
literal|"and co.subjectArea.uniqueId = x.subjectArea.uniqueId and "
operator|+
literal|"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr)) "
operator|+
literal|"group by f.code, m.code, co.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"acadAbbv"
argument_list|,
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|int
name|enrl
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2course2ll
init|=
name|clasfMajor2course2ll
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2course2ll
operator|==
literal|null
condition|)
block|{
name|major2course2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|clasfMajor2course2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2course2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|course2enrl
init|=
name|major2course2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2enrl
operator|==
literal|null
condition|)
block|{
name|course2enrl
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|major2course2ll
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|course2enrl
argument_list|)
expr_stmt|;
block|}
name|course2enrl
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
return|return
name|clasfMajor2course2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|loadClasfCourseMajor2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|acadAreaAbbv
parameter_list|,
name|Collection
argument_list|<
name|PosMajor
argument_list|>
name|majors
parameter_list|)
block|{
name|String
name|majorCodes
init|=
literal|""
decl_stmt|;
for|for
control|(
name|PosMajor
name|major
range|:
name|majors
control|)
block|{
if|if
condition|(
operator|!
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|)
name|majorCodes
operator|+=
literal|","
expr_stmt|;
name|majorCodes
operator|+=
literal|"'"
operator|+
name|major
operator|.
name|getCode
argument_list|()
operator|+
literal|"'"
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|clasf2course2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select f.code, co.uniqueId, co.subjectArea.subjectAreaAbbreviation || ' ' || co.courseNbr, m.code, s.uniqueId "
operator|+
literal|"from LastLikeCourseDemand x inner join x.student s inner join s.academicAreaClassifications a inner join a.academicClassification f "
operator|+
literal|"inner join s.posMajors m, CourseOffering co where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"a.academicArea.academicAreaAbbreviation = :acadAbbv "
operator|+
operator|(
name|majorCodes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"and m.code in ("
operator|+
name|majorCodes
operator|+
literal|") "
operator|)
operator|+
literal|"and co.subjectArea.uniqueId = x.subjectArea.uniqueId and "
operator|+
literal|"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr))"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setString
argument_list|(
literal|"acadAbbv"
argument_list|,
name|acadAreaAbbv
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|courseName
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|Long
name|studentId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|4
index|]
decl_stmt|;
name|CourseInterface
name|course
init|=
operator|new
name|CourseInterface
argument_list|()
decl_stmt|;
name|course
operator|.
name|setId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|course
operator|.
name|setCourseName
argument_list|(
name|courseName
argument_list|)
expr_stmt|;
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
name|course2ll
init|=
name|clasf2course2ll
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|course2ll
operator|==
literal|null
condition|)
block|{
name|course2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|CourseInterface
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2course2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|course2ll
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|major2students
init|=
name|course2ll
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2students
operator|==
literal|null
condition|)
block|{
name|major2students
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|course2ll
operator|.
name|put
argument_list|(
name|course
argument_list|,
name|major2students
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|students
init|=
name|major2students
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|students
operator|==
literal|null
condition|)
block|{
name|students
operator|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|major2students
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
name|students
operator|.
name|add
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2course2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|loadAreaMajorClasf2enrl
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|courseOfferingId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2enrl
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicArea.uniqueId, m.uniqueId, a.academicClassification.uniqueId, count(distinct e.student) "
operator|+
literal|"from StudentClassEnrollment e inner join e.student.academicAreaClassifications a inner join e.student.posMajors m where "
operator|+
literal|"e.courseOffering.uniqueId = :courseId group by a.academicArea.uniqueId, m.uniqueId, a.academicClassification.uniqueId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|courseOfferingId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|areaId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|Long
name|majorId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|Long
name|clasfId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|int
name|enrl
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2enrl
init|=
name|area2major2clasf2enrl
operator|.
name|get
argument_list|(
name|areaId
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2enrl
operator|==
literal|null
condition|)
block|{
name|major2clasf2enrl
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|area2major2clasf2enrl
operator|.
name|put
argument_list|(
name|areaId
argument_list|,
name|major2clasf2enrl
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|clasf2enrl
init|=
name|major2clasf2enrl
operator|.
name|get
argument_list|(
name|majorId
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf2enrl
operator|==
literal|null
condition|)
block|{
name|clasf2enrl
operator|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|major2clasf2enrl
operator|.
name|put
argument_list|(
name|majorId
argument_list|,
name|clasf2enrl
argument_list|)
expr_stmt|;
block|}
name|clasf2enrl
operator|.
name|put
argument_list|(
name|clasfId
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
block|}
return|return
name|area2major2clasf2enrl
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|loadAreaMajorClasf2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|courseOfferingId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r.academicAreaAbbreviation, m.code, f.code, count(distinct s) from "
operator|+
literal|"LastLikeCourseDemand x inner join x.student s inner join s.academicAreaClassifications a inner join s.posMajors m "
operator|+
literal|"inner join a.academicClassification f inner join a.academicArea r, CourseOffering co where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and co.uniqueId = :courseId and "
operator|+
literal|"co.subjectArea.uniqueId = x.subjectArea.uniqueId and "
operator|+
literal|"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr)) "
operator|+
literal|"group by r.academicAreaAbbreviation, m.code, f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"courseId"
argument_list|,
name|courseOfferingId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|areaAbbv
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|int
name|lastLike
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|==
literal|null
condition|)
block|{
name|major2clasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|area2major2clasf2ll
operator|.
name|put
argument_list|(
name|areaAbbv
argument_list|,
name|major2clasf2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf2ll
operator|==
literal|null
condition|)
block|{
name|clasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|major2clasf2ll
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|clasf2ll
argument_list|)
expr_stmt|;
block|}
name|clasf2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|lastLike
argument_list|)
expr_stmt|;
block|}
return|return
name|area2major2clasf2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|loadAreaMajorClasf2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select a.academicAreaAbbreviation, m.code, f.code, count(distinct s) from LastLikeCourseDemand x inner join x.student s "
operator|+
literal|"inner join s.academicAreaClassifications ac inner join ac.academicClassification f inner join ac.academicArea a "
operator|+
literal|"inner join s.posMajors m where x.subjectArea.session.uniqueId = :sessionId "
operator|+
literal|"group by a.academicAreaAbbreviation, m.code, f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|area
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|major
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|clasf
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|int
name|students
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|3
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|majorClasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
if|if
condition|(
name|majorClasf2ll
operator|==
literal|null
condition|)
block|{
name|majorClasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|area2major2clasf2ll
operator|.
name|put
argument_list|(
name|area
argument_list|,
name|majorClasf2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|majorClasf2ll
operator|.
name|get
argument_list|(
name|major
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf2ll
operator|==
literal|null
condition|)
block|{
name|clasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|majorClasf2ll
operator|.
name|put
argument_list|(
name|major
argument_list|,
name|clasf2ll
argument_list|)
expr_stmt|;
block|}
name|clasf2ll
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
name|students
argument_list|)
expr_stmt|;
block|}
return|return
name|area2major2clasf2ll
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|loadCourseAreaMajorClasf2ll
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|course2area2major2clasf2ll
init|=
operator|new
name|Hashtable
argument_list|<
name|Long
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|o
range|:
operator|(
name|List
argument_list|<
name|Object
index|[]
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select co.uniqueId, r.academicAreaAbbreviation, m.code, f.code, count(distinct s) from "
operator|+
literal|"LastLikeCourseDemand x inner join x.student s inner join s.academicAreaClassifications a inner join s.posMajors m "
operator|+
literal|"inner join a.academicClassification f inner join a.academicArea r, CourseOffering co where "
operator|+
literal|"x.subjectArea.session.uniqueId = :sessionId and co.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"co.subjectArea.uniqueId = x.subjectArea.uniqueId and "
operator|+
literal|"((x.coursePermId is not null and co.permId=x.coursePermId) or (x.coursePermId is null and co.courseNbr=x.courseNbr)) "
operator|+
literal|"group by co.uniqueId, r.academicAreaAbbreviation, m.code, f.code"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|Long
name|courseId
init|=
operator|(
name|Long
operator|)
name|o
index|[
literal|0
index|]
decl_stmt|;
name|String
name|areaAbbv
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|1
index|]
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|2
index|]
decl_stmt|;
name|String
name|clasfCode
init|=
operator|(
name|String
operator|)
name|o
index|[
literal|3
index|]
decl_stmt|;
name|int
name|lastLike
init|=
operator|(
operator|(
name|Number
operator|)
name|o
index|[
literal|4
index|]
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
name|area2major2clasf2ll
init|=
name|course2area2major2clasf2ll
operator|.
name|get
argument_list|(
name|courseId
argument_list|)
decl_stmt|;
if|if
condition|(
name|area2major2clasf2ll
operator|==
literal|null
condition|)
block|{
name|area2major2clasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|course2area2major2clasf2ll
operator|.
name|put
argument_list|(
name|courseId
argument_list|,
name|area2major2clasf2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|major2clasf2ll
init|=
name|area2major2clasf2ll
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2clasf2ll
operator|==
literal|null
condition|)
block|{
name|major2clasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|area2major2clasf2ll
operator|.
name|put
argument_list|(
name|areaAbbv
argument_list|,
name|major2clasf2ll
argument_list|)
expr_stmt|;
block|}
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|clasf2ll
init|=
name|major2clasf2ll
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf2ll
operator|==
literal|null
condition|)
block|{
name|clasf2ll
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
name|major2clasf2ll
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|clasf2ll
argument_list|)
expr_stmt|;
block|}
name|clasf2ll
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|lastLike
argument_list|)
expr_stmt|;
block|}
return|return
name|course2area2major2clasf2ll
return|;
block|}
specifier|private
name|CourseOffering
name|getCourse
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|String
name|courseName
parameter_list|)
block|{
for|for
control|(
name|CourseOffering
name|co
range|:
operator|(
name|List
argument_list|<
name|CourseOffering
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select c from CourseOffering c where "
operator|+
literal|"c.subjectArea.session.uniqueId = :sessionId and "
operator|+
literal|"lower(c.subjectArea.subjectAreaAbbreviation || ' ' || c.courseNbr) = :course"
argument_list|)
operator|.
name|setString
argument_list|(
literal|"course"
argument_list|,
name|courseName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|setMaxResults
argument_list|(
literal|1
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
return|return
name|co
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|getRules
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|,
name|Long
name|acadAreaId
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.uniqueId=:acadAreaId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"acadAreaId"
argument_list|,
name|acadAreaId
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|majorCode
init|=
operator|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
decl_stmt|;
name|String
name|clasfCode
init|=
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|Float
name|projection
init|=
name|rule
operator|.
name|getProjection
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
block|{
name|major2proj
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2major2proj
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2proj
argument_list|)
expr_stmt|;
block|}
name|major2proj
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|projection
argument_list|)
expr_stmt|;
block|}
return|return
name|clasf2major2proj
return|;
block|}
specifier|private
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
name|getRules
parameter_list|(
name|org
operator|.
name|hibernate
operator|.
name|Session
name|hibSession
parameter_list|)
block|{
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
name|area2clasf2major2proj
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumProjectionRule
name|rule
range|:
operator|(
name|List
argument_list|<
name|CurriculumProjectionRule
argument_list|>
operator|)
name|hibSession
operator|.
name|createQuery
argument_list|(
literal|"select r from CurriculumProjectionRule r where r.academicArea.session.uniqueId = :sessionId"
argument_list|)
operator|.
name|setLong
argument_list|(
literal|"sessionId"
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|.
name|setCacheable
argument_list|(
literal|true
argument_list|)
operator|.
name|list
argument_list|()
control|)
block|{
name|String
name|areaAbbv
init|=
name|rule
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAcademicAreaAbbreviation
argument_list|()
decl_stmt|;
name|String
name|majorCode
init|=
operator|(
name|rule
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|rule
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
decl_stmt|;
name|String
name|clasfCode
init|=
name|rule
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
decl_stmt|;
name|Float
name|projection
init|=
name|rule
operator|.
name|getProjection
argument_list|()
decl_stmt|;
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
init|=
name|area2clasf2major2proj
operator|.
name|get
argument_list|(
name|areaAbbv
argument_list|)
decl_stmt|;
if|if
condition|(
name|clasf2major2proj
operator|==
literal|null
condition|)
block|{
name|clasf2major2proj
operator|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|area2clasf2major2proj
operator|.
name|put
argument_list|(
name|areaAbbv
argument_list|,
name|clasf2major2proj
argument_list|)
expr_stmt|;
block|}
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
block|{
name|major2proj
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2major2proj
operator|.
name|put
argument_list|(
name|clasfCode
argument_list|,
name|major2proj
argument_list|)
expr_stmt|;
block|}
name|major2proj
operator|.
name|put
argument_list|(
name|majorCode
argument_list|,
name|projection
argument_list|)
expr_stmt|;
block|}
return|return
name|area2clasf2major2proj
return|;
block|}
specifier|public
name|float
name|getProjection
parameter_list|(
name|Hashtable
argument_list|<
name|String
argument_list|,
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
name|clasf2major2proj
parameter_list|,
name|String
name|majorCode
parameter_list|,
name|String
name|clasfCode
parameter_list|)
block|{
if|if
condition|(
name|clasf2major2proj
operator|==
literal|null
operator|||
name|clasf2major2proj
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|1.0f
return|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|major2proj
init|=
name|clasf2major2proj
operator|.
name|get
argument_list|(
name|clasfCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|major2proj
operator|==
literal|null
condition|)
return|return
literal|1.0f
return|;
name|Float
name|projection
init|=
name|major2proj
operator|.
name|get
argument_list|(
name|majorCode
argument_list|)
decl_stmt|;
if|if
condition|(
name|projection
operator|==
literal|null
condition|)
name|projection
operator|=
name|major2proj
operator|.
name|get
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
operator|(
name|projection
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|projection
operator|)
return|;
block|}
block|}
end_class

end_unit

