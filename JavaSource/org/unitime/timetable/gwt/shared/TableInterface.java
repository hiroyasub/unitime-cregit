begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TableInterface
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|TableHeaderIterface
index|[]
name|iHeader
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TableRowInterface
argument_list|>
name|iRows
init|=
operator|new
name|ArrayList
argument_list|<
name|TableRowInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TableInterface
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setHeader
parameter_list|(
name|TableHeaderIterface
modifier|...
name|header
parameter_list|)
block|{
name|iHeader
operator|=
name|header
expr_stmt|;
block|}
specifier|public
name|TableHeaderIterface
index|[]
name|getHeader
parameter_list|()
block|{
return|return
name|iHeader
return|;
block|}
specifier|public
name|TableHeaderIterface
name|getHeader
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iHeader
operator|!=
literal|null
operator|&&
name|index
operator|<
name|iHeader
operator|.
name|length
condition|?
name|iHeader
index|[
name|index
index|]
else|:
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|TableRowInterface
argument_list|>
name|getRows
parameter_list|()
block|{
return|return
name|iRows
return|;
block|}
specifier|public
name|void
name|addRow
parameter_list|(
name|TableRowInterface
name|row
parameter_list|)
block|{
name|iRows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TableHeaderIterface
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|boolean
name|iComparable
init|=
literal|true
decl_stmt|;
specifier|private
name|Alignment
name|iAlignment
init|=
name|Alignment
operator|.
name|LEFT
decl_stmt|;
specifier|public
name|TableHeaderIterface
parameter_list|()
block|{
block|}
specifier|public
name|TableHeaderIterface
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|comparable
parameter_list|,
name|Alignment
name|alignment
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iComparable
operator|=
name|comparable
expr_stmt|;
name|iAlignment
operator|=
name|alignment
expr_stmt|;
block|}
specifier|public
name|TableHeaderIterface
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|comparable
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|comparable
argument_list|,
name|Alignment
operator|.
name|LEFT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableHeaderIterface
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
name|Alignment
operator|.
name|LEFT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|boolean
name|isComparable
parameter_list|()
block|{
return|return
name|iComparable
return|;
block|}
specifier|public
name|TableHeaderIterface
name|setComparable
parameter_list|(
name|boolean
name|comparable
parameter_list|)
block|{
name|iComparable
operator|=
name|comparable
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|Alignment
name|getAlignment
parameter_list|()
block|{
return|return
name|iAlignment
return|;
block|}
specifier|public
name|TableHeaderIterface
name|setAlignment
parameter_list|(
name|Alignment
name|alignment
parameter_list|)
block|{
name|iAlignment
operator|=
name|alignment
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableRowInterface
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|TableCellInterface
index|[]
name|iCells
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|String
name|iLink
decl_stmt|,
name|iLinkName
decl_stmt|;
specifier|public
name|TableRowInterface
parameter_list|()
block|{
block|}
specifier|public
name|TableRowInterface
parameter_list|(
name|TableCellInterface
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
block|}
specifier|public
name|TableRowInterface
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|link
parameter_list|,
name|String
name|linkName
parameter_list|,
name|TableCellInterface
modifier|...
name|cells
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iLink
operator|=
name|link
expr_stmt|;
name|iLinkName
operator|=
name|linkName
expr_stmt|;
name|iCells
operator|=
name|cells
expr_stmt|;
block|}
specifier|public
name|TableCellInterface
index|[]
name|getCells
parameter_list|()
block|{
return|return
name|iCells
return|;
block|}
specifier|public
name|void
name|setCells
parameter_list|(
name|TableCellInterface
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
block|}
specifier|public
name|TableCellInterface
name|getCell
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|iCells
operator|!=
literal|null
operator|&&
name|index
operator|<
name|iCells
operator|.
name|length
condition|?
name|iCells
index|[
name|index
index|]
else|:
literal|null
operator|)
return|;
block|}
specifier|public
name|int
name|getNrCells
parameter_list|()
block|{
return|return
name|iCells
operator|==
literal|null
condition|?
literal|0
else|:
name|iCells
operator|.
name|length
return|;
block|}
specifier|public
name|boolean
name|hasLink
parameter_list|()
block|{
return|return
name|iLink
operator|!=
literal|null
operator|&&
operator|!
name|iLink
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLink
parameter_list|()
block|{
return|return
name|iLink
return|;
block|}
specifier|public
name|void
name|setLink
parameter_list|(
name|String
name|link
parameter_list|)
block|{
name|iLink
operator|=
name|link
expr_stmt|;
block|}
specifier|public
name|String
name|getLinkName
parameter_list|()
block|{
return|return
name|iLinkName
return|;
block|}
specifier|public
name|void
name|setLinkName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iLinkName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasId
parameter_list|()
block|{
return|return
name|iId
operator|!=
literal|null
return|;
block|}
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|TableCellInterface
name|c1
parameter_list|,
name|TableCellInterface
name|c2
parameter_list|)
block|{
return|return
operator|(
name|c1
operator|==
literal|null
condition|?
operator|(
name|c2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
else|:
name|c2
operator|==
literal|null
condition|?
literal|1
else|:
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
operator|)
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableRowInterface
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|boolean
name|asc
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|getCell
argument_list|(
name|column
argument_list|)
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|(
name|asc
condition|?
name|cmp
else|:
operator|-
name|cmp
operator|)
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|max
argument_list|(
name|getNrCells
argument_list|()
argument_list|,
name|row
operator|.
name|getNrCells
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|cmp
operator|=
name|compare
argument_list|(
name|getCell
argument_list|(
name|i
argument_list|)
argument_list|,
name|row
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellInterface
parameter_list|<
name|T
extends|extends
name|Comparable
parameter_list|<
name|T
parameter_list|>
parameter_list|>
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|TableCellInterface
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iFormattedValue
decl_stmt|;
specifier|private
name|String
name|iStyleName
decl_stmt|,
name|iColor
decl_stmt|;
specifier|private
name|T
name|iValue
decl_stmt|;
specifier|public
name|TableCellInterface
parameter_list|()
block|{
block|}
specifier|public
name|TableCellInterface
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|TableCellInterface
parameter_list|(
name|T
name|value
parameter_list|,
name|String
name|formatted
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|iFormattedValue
operator|=
name|formatted
expr_stmt|;
block|}
specifier|public
name|T
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|TableCellInterface
argument_list|<
name|T
argument_list|>
name|setValue
parameter_list|(
name|T
name|value
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
operator|!=
literal|null
return|;
block|}
specifier|public
name|TableCellInterface
argument_list|<
name|T
argument_list|>
name|setFormattedValue
parameter_list|(
name|String
name|formattedValue
parameter_list|)
block|{
name|iFormattedValue
operator|=
name|formattedValue
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getFormattedValue
parameter_list|()
block|{
return|return
name|iFormattedValue
operator|==
literal|null
condition|?
name|iValue
operator|==
literal|null
condition|?
literal|""
else|:
name|iValue
operator|.
name|toString
argument_list|()
else|:
name|iFormattedValue
return|;
block|}
specifier|public
name|boolean
name|hasStyleName
parameter_list|()
block|{
return|return
name|iStyleName
operator|!=
literal|null
operator|&&
operator|!
name|iStyleName
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|TableCellInterface
argument_list|<
name|T
argument_list|>
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|iStyleName
operator|=
name|styleName
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
name|iStyleName
return|;
block|}
specifier|public
name|boolean
name|hasColor
parameter_list|()
block|{
return|return
name|iColor
operator|!=
literal|null
operator|&&
operator|!
name|iColor
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|TableCellInterface
argument_list|<
name|T
argument_list|>
name|setColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|iColor
operator|=
name|color
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|()
block|{
return|return
name|iColor
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableCellInterface
name|c
parameter_list|)
block|{
return|return
name|getValue
argument_list|()
operator|==
literal|null
condition|?
name|c
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|c
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
name|T
operator|)
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellText
extends|extends
name|TableCellInterface
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|TableCellText
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableCellText
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getValueNotNull
parameter_list|()
block|{
return|return
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|getValue
argument_list|()
else|:
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFormattedValue
parameter_list|()
block|{
return|return
name|super
operator|.
name|getFormattedValue
argument_list|()
operator|!=
literal|null
condition|?
name|super
operator|.
name|getFormattedValue
argument_list|()
else|:
name|getValueNotNull
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableCellInterface
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|TableCellText
condition|)
return|return
name|NaturalOrderComparator
operator|.
name|compare
argument_list|(
name|getValueNotNull
argument_list|()
argument_list|,
operator|(
operator|(
name|TableCellText
operator|)
name|c
operator|)
operator|.
name|getValueNotNull
argument_list|()
argument_list|)
return|;
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellClassName
extends|extends
name|TableCellText
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iAlternatives
init|=
literal|null
decl_stmt|;
specifier|public
name|TableCellClassName
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableCellClassName
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasAlternatives
parameter_list|()
block|{
return|return
name|iAlternatives
operator|!=
literal|null
operator|&&
operator|!
name|iAlternatives
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAlternatives
parameter_list|()
block|{
return|return
name|iAlternatives
return|;
block|}
specifier|public
name|void
name|addAlternative
parameter_list|(
name|String
name|alternative
parameter_list|)
block|{
if|if
condition|(
name|iAlternatives
operator|==
literal|null
condition|)
name|iAlternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iAlternatives
operator|.
name|add
argument_list|(
name|alternative
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellTime
extends|extends
name|TableCellText
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|String
name|iId
decl_stmt|;
specifier|public
name|TableCellTime
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableCellTime
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasId
parameter_list|()
block|{
return|return
name|iId
operator|!=
literal|null
operator|&&
operator|!
name|iId
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|TableCellTime
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellRooms
extends|extends
name|TableCellText
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|iRooms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TableCellRooms
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|color
parameter_list|,
name|Long
name|id
parameter_list|,
name|String
name|preference
parameter_list|)
block|{
name|iRooms
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|,
name|color
block|,
name|id
operator|.
name|toString
argument_list|()
block|,
name|preference
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrRooms
parameter_list|()
block|{
return|return
name|iRooms
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iRooms
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iRooms
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iRooms
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|2
index|]
return|;
block|}
specifier|public
name|String
name|getPreference
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iRooms
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|3
index|]
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|room
range|:
name|iRooms
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|separator
operator|)
operator|+
name|room
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
literal|", "
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellItems
extends|extends
name|TableCellText
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|iItems
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TableCellItems
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableCellItems
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|items
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|items
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|item
range|:
name|items
control|)
name|add
argument_list|(
name|item
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|formatted
parameter_list|,
name|String
name|color
parameter_list|,
name|Long
name|id
parameter_list|)
block|{
name|iItems
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|,
name|formatted
block|,
name|color
block|,
operator|(
name|id
operator|==
literal|null
condition|?
literal|null
else|:
name|id
operator|.
name|toString
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|color
parameter_list|,
name|Long
name|id
parameter_list|)
block|{
name|iItems
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|name
block|,
literal|null
block|,
name|color
block|,
operator|(
name|id
operator|==
literal|null
condition|?
literal|null
else|:
name|id
operator|.
name|toString
argument_list|()
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrItems
parameter_list|()
block|{
return|return
name|iItems
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iItems
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|String
name|getFormattedValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iItems
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|1
index|]
operator|==
literal|null
condition|?
name|iItems
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|0
index|]
else|:
name|iItems
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iItems
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|2
index|]
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iItems
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|[
literal|3
index|]
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|item
range|:
name|iItems
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|separator
operator|)
operator|+
name|item
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|getValue
argument_list|(
literal|", "
argument_list|)
return|;
block|}
specifier|public
name|String
name|getFormattedValue
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
index|[]
name|item
range|:
name|iItems
control|)
block|{
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|separator
operator|)
operator|+
operator|(
name|item
index|[
literal|1
index|]
operator|==
literal|null
condition|?
name|item
index|[
literal|0
index|]
else|:
name|item
index|[
literal|1
index|]
operator|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFormattedValue
parameter_list|()
block|{
return|return
name|getFormattedValue
argument_list|(
literal|", "
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableCellMulti
extends|extends
name|TableCellText
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|List
argument_list|<
name|TableCellInterface
argument_list|>
name|iChunks
init|=
operator|new
name|ArrayList
argument_list|<
name|TableCellInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TableCellMulti
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TableCellMulti
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TableCellInterface
name|add
parameter_list|(
name|TableCellInterface
name|chunk
parameter_list|)
block|{
name|iChunks
operator|.
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
return|return
name|chunk
return|;
block|}
specifier|public
name|TableCellInterface
name|add
parameter_list|(
name|String
name|chunk
parameter_list|)
block|{
return|return
name|add
argument_list|(
operator|new
name|TableCellText
argument_list|(
name|chunk
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrChunks
parameter_list|()
block|{
return|return
name|iChunks
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|TableCellInterface
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|iChunks
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|TableCellInterface
name|item
range|:
name|iChunks
control|)
block|{
name|Object
name|value
init|=
name|item
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ret
operator|+=
operator|(
name|ret
operator|==
literal|null
condition|?
literal|""
else|:
name|value
operator|.
name|toString
argument_list|()
operator|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFormattedValue
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|TableCellInterface
name|item
range|:
name|iChunks
control|)
block|{
name|ret
operator|+=
name|item
operator|.
name|getFormattedValue
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TableCellInterface
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|instanceof
name|TableCellMulti
condition|)
block|{
name|TableCellMulti
name|m
init|=
operator|(
name|TableCellMulti
operator|)
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getNrChunks
argument_list|()
operator|&&
name|i
operator|<
name|m
operator|.
name|getNrChunks
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|cmp
init|=
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
block|}
return|return
name|super
operator|.
name|compareTo
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|Alignment
block|{
name|LEFT
block|,
name|CENTER
block|,
name|RIGHT
block|; 	}
specifier|public
specifier|static
class|class
name|NaturalOrderComparator
block|{
specifier|static
name|int
name|compareRight
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
name|int
name|bias
init|=
literal|0
decl_stmt|;
name|int
name|ia
init|=
literal|0
decl_stmt|;
name|int
name|ib
init|=
literal|0
decl_stmt|;
comment|// The longest run of digits wins.  That aside, the greatest
comment|// value wins, but we can't know that it will until we've scanned
comment|// both numbers to know that they have the same magnitude, so we
comment|// remember it in BIAS.
for|for
control|(
init|;
condition|;
name|ia
operator|++
operator|,
name|ib
operator|++
control|)
block|{
name|char
name|ca
init|=
name|charAt
argument_list|(
name|a
argument_list|,
name|ia
argument_list|)
decl_stmt|;
name|char
name|cb
init|=
name|charAt
argument_list|(
name|b
argument_list|,
name|ib
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|ca
argument_list|)
operator|&&
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|cb
argument_list|)
condition|)
block|{
return|return
name|bias
return|;
block|}
if|else if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|ca
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
operator|!
name|Character
operator|.
name|isDigit
argument_list|(
name|cb
argument_list|)
condition|)
block|{
return|return
operator|+
literal|1
return|;
block|}
if|else if
condition|(
name|ca
operator|<
name|cb
condition|)
block|{
if|if
condition|(
name|bias
operator|==
literal|0
condition|)
block|{
name|bias
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|ca
operator|>
name|cb
condition|)
block|{
if|if
condition|(
name|bias
operator|==
literal|0
condition|)
name|bias
operator|=
operator|+
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|ca
operator|==
literal|0
operator|&&
name|cb
operator|==
literal|0
condition|)
block|{
return|return
name|bias
return|;
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|String
name|a
parameter_list|,
name|String
name|b
parameter_list|)
block|{
name|int
name|ia
init|=
literal|0
decl_stmt|,
name|ib
init|=
literal|0
decl_stmt|;
name|int
name|nza
init|=
literal|0
decl_stmt|,
name|nzb
init|=
literal|0
decl_stmt|;
name|char
name|ca
decl_stmt|,
name|cb
decl_stmt|;
name|int
name|result
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|// only count the number of zeroes leading the last number compared
name|nza
operator|=
name|nzb
operator|=
literal|0
expr_stmt|;
name|ca
operator|=
name|charAt
argument_list|(
name|a
argument_list|,
name|ia
argument_list|)
expr_stmt|;
name|cb
operator|=
name|charAt
argument_list|(
name|b
argument_list|,
name|ib
argument_list|)
expr_stmt|;
comment|// skip over leading spaces or zeros
while|while
condition|(
name|Character
operator|.
name|isSpace
argument_list|(
name|ca
argument_list|)
operator|||
name|ca
operator|==
literal|'0'
condition|)
block|{
if|if
condition|(
name|ca
operator|==
literal|'0'
condition|)
block|{
name|nza
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// only count consecutive zeroes
name|nza
operator|=
literal|0
expr_stmt|;
block|}
name|ca
operator|=
name|charAt
argument_list|(
name|a
argument_list|,
operator|++
name|ia
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|Character
operator|.
name|isSpace
argument_list|(
name|cb
argument_list|)
operator|||
name|cb
operator|==
literal|'0'
condition|)
block|{
if|if
condition|(
name|cb
operator|==
literal|'0'
condition|)
block|{
name|nzb
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// only count consecutive zeroes
name|nzb
operator|=
literal|0
expr_stmt|;
block|}
name|cb
operator|=
name|charAt
argument_list|(
name|b
argument_list|,
operator|++
name|ib
argument_list|)
expr_stmt|;
block|}
comment|// process run of digits
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|ca
argument_list|)
operator|&&
name|Character
operator|.
name|isDigit
argument_list|(
name|cb
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|result
operator|=
name|compareRight
argument_list|(
name|a
operator|.
name|substring
argument_list|(
name|ia
argument_list|)
argument_list|,
name|b
operator|.
name|substring
argument_list|(
name|ib
argument_list|)
argument_list|)
operator|)
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
if|if
condition|(
name|ca
operator|==
literal|0
operator|&&
name|cb
operator|==
literal|0
condition|)
block|{
comment|// The strings compare the same.  Perhaps the caller
comment|// will want to call strcmp to break the tie.
return|return
name|nza
operator|-
name|nzb
return|;
block|}
if|if
condition|(
name|ca
operator|<
name|cb
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
if|else if
condition|(
name|ca
operator|>
name|cb
condition|)
block|{
return|return
operator|+
literal|1
return|;
block|}
operator|++
name|ia
expr_stmt|;
operator|++
name|ib
expr_stmt|;
block|}
block|}
specifier|static
name|char
name|charAt
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|>=
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

