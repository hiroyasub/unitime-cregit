begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|MenuInterface
implements|implements
name|IsSerializable
block|{
specifier|private
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTitle
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPage
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iTarget
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iGWT
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|iSubMenus
init|=
literal|null
decl_stmt|;
specifier|public
name|MenuInterface
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|()
block|{
return|return
name|iTitle
return|;
block|}
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|iTitle
operator|=
name|title
expr_stmt|;
block|}
specifier|public
name|String
name|getPage
parameter_list|()
block|{
return|return
name|iPage
return|;
block|}
specifier|public
name|void
name|setPage
parameter_list|(
name|String
name|page
parameter_list|)
block|{
name|iPage
operator|=
name|page
expr_stmt|;
block|}
specifier|public
name|String
name|getTarget
parameter_list|()
block|{
return|return
name|iTarget
return|;
block|}
specifier|public
name|void
name|setTarget
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|iTarget
operator|=
name|target
expr_stmt|;
block|}
specifier|public
name|void
name|setGWT
parameter_list|(
name|boolean
name|gwt
parameter_list|)
block|{
name|iGWT
operator|=
name|gwt
expr_stmt|;
block|}
specifier|public
name|boolean
name|isGWT
parameter_list|()
block|{
return|return
name|iGWT
return|;
block|}
specifier|public
name|boolean
name|isSeparator
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|==
literal|null
return|;
block|}
specifier|public
name|boolean
name|hasSubMenus
parameter_list|()
block|{
return|return
name|iSubMenus
operator|!=
literal|null
operator|&&
operator|!
name|iSubMenus
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|MenuInterface
argument_list|>
name|getSubMenus
parameter_list|()
block|{
return|return
name|iSubMenus
return|;
block|}
specifier|public
name|void
name|addSubMenu
parameter_list|(
name|MenuInterface
name|menu
parameter_list|)
block|{
if|if
condition|(
name|iSubMenus
operator|==
literal|null
condition|)
name|iSubMenus
operator|=
operator|new
name|ArrayList
argument_list|<
name|MenuInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iSubMenus
operator|.
name|add
argument_list|(
name|menu
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

