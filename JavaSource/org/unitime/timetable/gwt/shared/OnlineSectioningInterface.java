begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.5 (University Timetabling Application)  * Copyright (C) 2014, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningInterface
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
class|class
name|EligibilityCheck
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|iFlags
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iMessage
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|,
name|iStudentId
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|EligibilityFlag
implements|implements
name|IsSerializable
block|{
name|IS_ADMIN
block|,
name|IS_ADVISOR
block|,
name|CAN_USE_ASSISTANT
block|,
name|CAN_ENROLL
block|, 			 			;
specifier|public
name|int
name|flag
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
block|}
specifier|public
name|EligibilityCheck
parameter_list|()
block|{
block|}
specifier|public
name|EligibilityCheck
parameter_list|(
name|String
name|message
parameter_list|,
name|EligibilityFlag
modifier|...
name|flags
parameter_list|)
block|{
name|iMessage
operator|=
name|message
expr_stmt|;
for|for
control|(
name|EligibilityFlag
name|flag
range|:
name|flags
control|)
name|setFlag
argument_list|(
name|flag
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EligibilityCheck
parameter_list|(
name|EligibilityFlag
modifier|...
name|flags
parameter_list|)
block|{
for|for
control|(
name|EligibilityFlag
name|flag
range|:
name|flags
control|)
name|setFlag
argument_list|(
name|flag
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFlag
parameter_list|(
name|EligibilityFlag
name|flag
parameter_list|,
name|boolean
name|set
parameter_list|)
block|{
if|if
condition|(
name|set
operator|&&
operator|!
name|hasFlag
argument_list|(
name|flag
argument_list|)
condition|)
name|iFlags
operator|+=
name|flag
operator|.
name|flag
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|set
operator|&&
name|hasFlag
argument_list|(
name|flag
argument_list|)
condition|)
name|iFlags
operator|-=
name|flag
operator|.
name|flag
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasFlag
parameter_list|(
name|EligibilityFlag
name|flag
parameter_list|)
block|{
return|return
operator|(
name|iFlags
operator|&
name|flag
operator|.
name|flag
argument_list|()
operator|)
operator|!=
literal|0
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iMessage
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMessage
parameter_list|()
block|{
return|return
name|iMessage
operator|!=
literal|null
operator|&&
operator|!
name|iMessage
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
specifier|public
name|void
name|setStudentIt
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
block|}
specifier|public
name|Long
name|getStudentIt
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
block|}
block|}
end_class

end_unit

