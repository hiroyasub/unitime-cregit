begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|NaturalOrderComparator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SuggestionsInterface
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
specifier|static
class|class
name|ClassInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|ClassInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|String
name|iPref
decl_stmt|;
specifier|private
name|int
name|iRoomCap
decl_stmt|;
specifier|private
name|int
name|iNrRooms
decl_stmt|;
specifier|private
name|int
name|iOrd
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|iNote
decl_stmt|;
specifier|public
name|ClassInfo
parameter_list|()
block|{
block|}
specifier|public
name|ClassInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|classId
parameter_list|,
name|int
name|nrRooms
parameter_list|,
name|String
name|pref
parameter_list|,
name|int
name|roomCapacity
parameter_list|,
name|int
name|ord
parameter_list|,
name|String
name|note
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iNrRooms
operator|=
name|nrRooms
expr_stmt|;
name|iRoomCap
operator|=
name|roomCapacity
expr_stmt|;
name|iOrd
operator|=
name|ord
expr_stmt|;
name|iNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|void
name|setRoomCapacity
parameter_list|(
name|int
name|roomCap
parameter_list|)
block|{
name|iRoomCap
operator|=
name|roomCap
expr_stmt|;
block|}
specifier|public
name|int
name|getRoomCapacity
parameter_list|()
block|{
return|return
name|iRoomCap
return|;
block|}
specifier|public
name|void
name|setPref
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|String
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|void
name|setNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|iNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|String
name|getNote
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|void
name|setNrRooms
parameter_list|(
name|int
name|nrRooms
parameter_list|)
block|{
name|iNrRooms
operator|=
name|nrRooms
expr_stmt|;
block|}
specifier|public
name|int
name|nrRooms
parameter_list|()
block|{
return|return
name|iNrRooms
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ClassInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ClassInfo
operator|)
name|o
operator|)
operator|.
name|getClassId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ClassInfo
name|ci
parameter_list|)
block|{
if|if
condition|(
name|iOrd
operator|>=
literal|0
operator|&&
name|ci
operator|.
name|iOrd
operator|>=
literal|0
condition|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|iOrd
argument_list|,
name|ci
operator|.
name|iOrd
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
name|int
name|cmp
init|=
name|TableInterface
operator|.
name|NaturalOrderComparator
operator|.
name|compare
argument_list|(
name|getName
argument_list|()
argument_list|,
name|ci
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getClassId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|ci
operator|.
name|getClassId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|getClassId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RoomInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|RoomInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Long
name|iRoomId
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|private
name|int
name|iSize
decl_stmt|;
specifier|private
name|boolean
name|iStrike
decl_stmt|;
specifier|public
name|RoomInfo
parameter_list|()
block|{
block|}
specifier|public
name|RoomInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|roomId
parameter_list|,
name|int
name|size
parameter_list|,
name|int
name|pref
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iRoomId
operator|=
name|roomId
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iSize
operator|=
name|size
expr_stmt|;
name|iStrike
operator|=
operator|(
name|iPref
operator|>
literal|500
operator|)
expr_stmt|;
block|}
specifier|public
name|RoomInfo
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
name|iRoomId
operator|=
name|roomId
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iRoomId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iRoomId
return|;
block|}
specifier|public
name|void
name|setPref
parameter_list|(
name|int
name|pref
parameter_list|)
block|{
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|int
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|void
name|setStriked
parameter_list|(
name|boolean
name|striked
parameter_list|)
block|{
name|iStrike
operator|=
name|striked
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStriked
parameter_list|()
block|{
return|return
name|iStrike
return|;
block|}
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|iSize
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|iSize
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|RoomInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|RoomInfo
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RoomInfo
name|r
parameter_list|)
block|{
if|if
condition|(
name|isStriked
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|isStriked
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|isStriked
argument_list|()
operator|&&
name|r
operator|.
name|isStriked
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|TableInterface
operator|.
name|NaturalOrderComparator
operator|.
name|compare
argument_list|(
name|getName
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|getName
argument_list|()
operator|==
literal|null
condition|?
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|getName
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|DayCode
block|{
name|MON
argument_list|(
literal|64
argument_list|)
block|,
name|TUE
argument_list|(
literal|32
argument_list|)
block|,
name|WED
argument_list|(
literal|16
argument_list|)
block|,
name|THU
argument_list|(
literal|8
argument_list|)
block|,
name|FRI
argument_list|(
literal|4
argument_list|)
block|,
name|SAT
argument_list|(
literal|2
argument_list|)
block|,
name|SUN
argument_list|(
literal|1
argument_list|)
block|, 		;
name|DayCode
parameter_list|(
name|int
name|code
parameter_list|)
block|{
name|iCode
operator|=
name|code
expr_stmt|;
block|}
specifier|private
name|int
name|iCode
decl_stmt|;
specifier|public
name|int
name|getCode
parameter_list|()
block|{
return|return
name|iCode
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DateInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|DateInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iDatePatternName
decl_stmt|;
specifier|private
name|int
name|iDatePatternPref
decl_stmt|;
specifier|private
name|Long
name|iDatePatternId
decl_stmt|;
specifier|public
name|DateInfo
parameter_list|()
block|{
block|}
specifier|public
name|DateInfo
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|pref
parameter_list|)
block|{
name|iDatePatternId
operator|=
name|id
expr_stmt|;
name|iDatePatternName
operator|=
name|name
expr_stmt|;
name|iDatePatternPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|DateInfo
parameter_list|(
name|SelectedAssignment
name|assignment
parameter_list|)
block|{
name|iDatePatternId
operator|=
name|assignment
operator|.
name|getDatePatternId
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|DateInfo
operator|)
condition|)
return|return
literal|false
return|;
name|DateInfo
name|d
init|=
operator|(
name|DateInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getDatePatternId
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|getDatePatternId
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
return|;
return|return
name|getDatePatternName
argument_list|()
operator|.
name|equals
argument_list|(
name|d
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|getDatePatternId
argument_list|()
operator|==
literal|null
condition|?
name|getDatePatternName
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
name|getDatePatternId
argument_list|()
operator|.
name|hashCode
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setDatePatternName
parameter_list|(
name|String
name|dpName
parameter_list|)
block|{
name|iDatePatternName
operator|=
name|dpName
expr_stmt|;
block|}
specifier|public
name|String
name|getDatePatternName
parameter_list|()
block|{
return|return
name|iDatePatternName
return|;
block|}
specifier|public
name|void
name|setDatePatternId
parameter_list|(
name|Long
name|dpId
parameter_list|)
block|{
name|iDatePatternId
operator|=
name|dpId
expr_stmt|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
specifier|public
name|void
name|setDatePatternPreference
parameter_list|(
name|int
name|dpPref
parameter_list|)
block|{
name|iDatePatternPref
operator|=
name|dpPref
expr_stmt|;
block|}
specifier|public
name|int
name|getDatePatternPreference
parameter_list|()
block|{
return|return
name|iDatePatternPref
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|DateInfo
name|d
parameter_list|)
block|{
name|int
name|cmp
init|=
name|TableInterface
operator|.
name|NaturalOrderComparator
operator|.
name|compare
argument_list|(
name|getDatePatternName
argument_list|()
argument_list|,
name|d
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getDatePatternId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimeInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|TimeInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|iDays
decl_stmt|;
specifier|private
name|int
name|iStartSlot
decl_stmt|;
specifier|private
name|int
name|iMin
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|private
name|boolean
name|iStrike
init|=
literal|false
decl_stmt|;
specifier|private
name|Long
name|iPatternId
init|=
literal|null
decl_stmt|;
specifier|private
name|DateInfo
name|iDatePattern
init|=
literal|null
decl_stmt|;
specifier|public
name|TimeInfo
parameter_list|()
block|{
block|}
specifier|public
name|TimeInfo
parameter_list|(
name|int
name|days
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|pref
parameter_list|,
name|int
name|min
parameter_list|,
name|String
name|datePatternName
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|Long
name|datePatternId
parameter_list|,
name|int
name|datePatternPref
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
name|iStrike
operator|=
operator|(
name|iPref
operator|>
literal|500
operator|)
expr_stmt|;
name|iMin
operator|=
name|min
expr_stmt|;
name|iDatePattern
operator|=
operator|new
name|DateInfo
argument_list|(
name|datePatternId
argument_list|,
name|datePatternName
argument_list|,
name|datePatternPref
argument_list|)
expr_stmt|;
name|iPatternId
operator|=
name|patternId
expr_stmt|;
block|}
specifier|public
name|TimeInfo
parameter_list|(
name|SelectedAssignment
name|assignment
parameter_list|)
block|{
name|iDays
operator|=
name|assignment
operator|.
name|getDays
argument_list|()
expr_stmt|;
name|iStartSlot
operator|=
name|assignment
operator|.
name|getStartSlot
argument_list|()
expr_stmt|;
name|iPatternId
operator|=
name|assignment
operator|.
name|getPatternId
argument_list|()
expr_stmt|;
name|iDatePattern
operator|=
operator|new
name|DateInfo
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|void
name|setStartSlot
parameter_list|(
name|int
name|startSlot
parameter_list|)
block|{
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|()
block|{
return|return
name|iStartSlot
return|;
block|}
specifier|public
name|void
name|setPref
parameter_list|(
name|int
name|pref
parameter_list|)
block|{
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|int
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|void
name|setMin
parameter_list|(
name|int
name|min
parameter_list|)
block|{
name|iMin
operator|=
name|min
expr_stmt|;
block|}
specifier|public
name|int
name|getMin
parameter_list|()
block|{
return|return
name|iMin
return|;
block|}
specifier|public
name|void
name|setDatePatternName
parameter_list|(
name|String
name|dpName
parameter_list|)
block|{
if|if
condition|(
name|iDatePattern
operator|==
literal|null
condition|)
name|iDatePattern
operator|=
operator|new
name|DateInfo
argument_list|()
expr_stmt|;
name|iDatePattern
operator|.
name|setDatePatternName
argument_list|(
name|dpName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDatePatternName
parameter_list|()
block|{
return|return
operator|(
name|iDatePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|iDatePattern
operator|.
name|getDatePatternName
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setStriked
parameter_list|(
name|boolean
name|striked
parameter_list|)
block|{
name|iStrike
operator|=
name|striked
expr_stmt|;
block|}
specifier|public
name|boolean
name|isStriked
parameter_list|()
block|{
return|return
name|iStrike
return|;
block|}
specifier|public
name|void
name|setPatternId
parameter_list|(
name|Long
name|patternId
parameter_list|)
block|{
name|iPatternId
operator|=
name|patternId
expr_stmt|;
block|}
specifier|public
name|Long
name|getPatternId
parameter_list|()
block|{
return|return
name|iPatternId
return|;
block|}
specifier|public
name|void
name|setDatePatternId
parameter_list|(
name|Long
name|dpId
parameter_list|)
block|{
if|if
condition|(
name|iDatePattern
operator|==
literal|null
condition|)
name|iDatePattern
operator|=
operator|new
name|DateInfo
argument_list|()
expr_stmt|;
name|iDatePattern
operator|.
name|setDatePatternId
argument_list|(
name|dpId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
operator|(
name|iDatePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|iDatePattern
operator|.
name|getDatePatternId
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setDatePatternPreference
parameter_list|(
name|int
name|dpPref
parameter_list|)
block|{
if|if
condition|(
name|iDatePattern
operator|==
literal|null
condition|)
name|iDatePattern
operator|=
operator|new
name|DateInfo
argument_list|()
expr_stmt|;
name|iDatePattern
operator|.
name|setDatePatternPreference
argument_list|(
name|dpPref
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getDatePatternPreference
parameter_list|()
block|{
return|return
operator|(
name|iDatePattern
operator|==
literal|null
condition|?
literal|null
else|:
name|iDatePattern
operator|.
name|getDatePatternPreference
argument_list|()
operator|)
return|;
block|}
specifier|public
name|DateInfo
name|getDatePattern
parameter_list|()
block|{
return|return
name|iDatePattern
return|;
block|}
specifier|public
name|boolean
name|hasDatePattern
parameter_list|()
block|{
return|return
name|iDatePattern
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getDaysName
parameter_list|(
name|GwtConstants
name|CONSTANTS
parameter_list|)
block|{
return|return
name|getDaysName
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDaysName
parameter_list|(
name|String
index|[]
name|shortDays
parameter_list|)
block|{
if|if
condition|(
name|shortDays
operator|==
literal|null
condition|)
name|shortDays
operator|=
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"Th"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"Su"
block|}
expr_stmt|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|DayCode
name|dc
range|:
name|DayCode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
operator|(
name|dc
operator|.
name|getCode
argument_list|()
operator|&
name|iDays
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|+=
name|shortDays
index|[
name|dc
operator|.
name|ordinal
argument_list|()
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getDaysName
parameter_list|()
block|{
return|return
name|getDaysName
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"Th"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"Su"
block|}
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|slot2time
parameter_list|(
name|int
name|timeSinceMidnight
parameter_list|,
name|boolean
name|useAmPm
parameter_list|)
block|{
name|int
name|hour
init|=
name|timeSinceMidnight
operator|/
literal|60
decl_stmt|;
name|int
name|min
init|=
name|timeSinceMidnight
operator|%
literal|60
decl_stmt|;
if|if
condition|(
name|useAmPm
condition|)
return|return
operator|(
name|hour
operator|==
literal|0
condition|?
literal|12
else|:
name|hour
operator|>
literal|12
condition|?
name|hour
operator|-
literal|12
else|:
name|hour
operator|)
operator|+
literal|":"
operator|+
operator|(
name|min
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|min
operator|+
operator|(
name|hour
operator|<
literal|24
operator|&&
name|hour
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|hour
operator|+
literal|":"
operator|+
operator|(
name|min
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|min
return|;
block|}
specifier|public
specifier|static
name|String
name|slot2time
parameter_list|(
name|int
name|timeSinceMidnight
parameter_list|)
block|{
name|int
name|hour
init|=
name|timeSinceMidnight
operator|/
literal|60
decl_stmt|;
name|int
name|min
init|=
name|timeSinceMidnight
operator|%
literal|60
decl_stmt|;
return|return
name|hour
operator|+
operator|(
name|min
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|min
return|;
block|}
specifier|public
name|String
name|getStartTime
parameter_list|(
name|GwtConstants
name|CONSTANTS
parameter_list|)
block|{
return|return
name|slot2time
argument_list|(
literal|5
operator|*
name|iStartSlot
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getEndTime
parameter_list|(
name|GwtConstants
name|CONSTANTS
parameter_list|)
block|{
return|return
name|slot2time
argument_list|(
literal|5
operator|*
name|iStartSlot
operator|+
name|iMin
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimeInfo
operator|)
condition|)
return|return
literal|false
return|;
name|TimeInfo
name|t
init|=
operator|(
name|TimeInfo
operator|)
name|o
decl_stmt|;
return|return
name|t
operator|.
name|getDays
argument_list|()
operator|==
name|getDays
argument_list|()
operator|&&
name|t
operator|.
name|getStartSlot
argument_list|()
operator|==
name|getStartSlot
argument_list|()
operator|&&
name|t
operator|.
name|getPatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getPatternId
argument_list|()
argument_list|)
operator|&&
name|t
operator|.
name|getDatePatternId
argument_list|()
operator|.
name|equals
argument_list|(
name|getDatePatternId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|boolean
name|endTime
parameter_list|,
name|GwtConstants
name|CONSTANTS
parameter_list|)
block|{
return|return
name|getDaysName
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
literal|" "
operator|+
name|getStartTime
argument_list|(
name|CONSTANTS
argument_list|)
operator|+
operator|(
name|endTime
condition|?
literal|" - "
operator|+
name|getEndTime
argument_list|(
name|CONSTANTS
argument_list|)
else|:
literal|""
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimeInfo
name|t
parameter_list|)
block|{
if|if
condition|(
name|isStriked
argument_list|()
operator|&&
operator|!
name|t
operator|.
name|isStriked
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|isStriked
argument_list|()
operator|&&
name|t
operator|.
name|isStriked
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|TableInterface
operator|.
name|NaturalOrderComparator
operator|.
name|compare
argument_list|(
name|getDatePatternName
argument_list|()
argument_list|,
name|t
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|getDays
argument_list|()
argument_list|,
name|t
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|getStartSlot
argument_list|()
argument_list|,
name|t
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|getMin
argument_list|()
argument_list|,
name|t
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cmp
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasDatePattern
argument_list|()
condition|?
name|getDatePatternName
argument_list|()
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|getDaysName
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|,
literal|"D"
block|,
literal|"E"
block|,
literal|"F"
block|,
literal|"G"
block|}
argument_list|)
operator|+
literal|" "
operator|+
name|slot2time
argument_list|(
literal|5
operator|*
name|iStartSlot
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2time
argument_list|(
literal|5
operator|*
name|iStartSlot
operator|+
name|iMin
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|InstructorInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Long
name|iInstructorId
decl_stmt|;
specifier|public
name|InstructorInfo
parameter_list|()
block|{
block|}
specifier|public
name|InstructorInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|Long
name|instructorId
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iInstructorId
operator|=
name|instructorId
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iInstructorId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iInstructorId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|InstructorInfo
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|InstructorInfo
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CurriculumInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|CurriculumInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|int
name|iNrStudents
decl_stmt|;
specifier|public
name|CurriculumInfo
parameter_list|()
block|{
block|}
specifier|public
name|CurriculumInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|nrStudents
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setNrStudents
parameter_list|(
name|int
name|nrStudents
parameter_list|)
block|{
name|iNrStudents
operator|=
name|nrStudents
expr_stmt|;
block|}
specifier|public
name|int
name|getNrStudents
parameter_list|()
block|{
return|return
name|iNrStudents
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|CurriculumInfo
name|i
parameter_list|)
block|{
if|if
condition|(
name|getNrStudents
argument_list|()
operator|!=
name|i
operator|.
name|getNrStudents
argument_list|()
condition|)
return|return
operator|(
name|i
operator|.
name|getNrStudents
argument_list|()
operator|>
name|getNrStudents
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|JenrlInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|int
name|iJenrl
init|=
literal|0
decl_stmt|;
specifier|public
name|boolean
name|iIsSatisfied
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsHard
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsDistance
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsFixed
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsCommited
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsImportant
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|iIsInstructor
init|=
literal|false
decl_stmt|;
specifier|public
name|double
name|iDistance
init|=
literal|0.0
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|CurriculumInfo
argument_list|>
name|iCurriculum2nrStudents
init|=
literal|null
decl_stmt|;
specifier|public
name|int
name|getJenrl
parameter_list|()
block|{
return|return
name|iJenrl
return|;
block|}
specifier|public
name|void
name|setJenrl
parameter_list|(
name|int
name|jenrl
parameter_list|)
block|{
name|iJenrl
operator|=
name|jenrl
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|iIsSatisfied
return|;
block|}
specifier|public
name|void
name|setIsSatisfied
parameter_list|(
name|boolean
name|isSatisfied
parameter_list|)
block|{
name|iIsSatisfied
operator|=
name|isSatisfied
expr_stmt|;
block|}
specifier|public
name|boolean
name|isHard
parameter_list|()
block|{
return|return
name|iIsHard
return|;
block|}
specifier|public
name|void
name|setIsHard
parameter_list|(
name|boolean
name|isHard
parameter_list|)
block|{
name|iIsHard
operator|=
name|isHard
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDistance
parameter_list|()
block|{
return|return
name|iIsDistance
return|;
block|}
specifier|public
name|void
name|setIsDistance
parameter_list|(
name|boolean
name|isDistance
parameter_list|)
block|{
name|iIsDistance
operator|=
name|isDistance
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFixed
parameter_list|()
block|{
return|return
name|iIsFixed
return|;
block|}
specifier|public
name|void
name|setIsFixed
parameter_list|(
name|boolean
name|isFixed
parameter_list|)
block|{
name|iIsFixed
operator|=
name|isFixed
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCommited
parameter_list|()
block|{
return|return
name|iIsCommited
return|;
block|}
specifier|public
name|void
name|setIsCommited
parameter_list|(
name|boolean
name|isCommited
parameter_list|)
block|{
name|iIsCommited
operator|=
name|isCommited
expr_stmt|;
block|}
specifier|public
name|boolean
name|isImportant
parameter_list|()
block|{
return|return
name|iIsImportant
return|;
block|}
specifier|public
name|void
name|setIsImportant
parameter_list|(
name|boolean
name|isImportant
parameter_list|)
block|{
name|iIsImportant
operator|=
name|isImportant
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInstructor
parameter_list|()
block|{
return|return
name|iIsInstructor
return|;
block|}
specifier|public
name|void
name|setIsInstructor
parameter_list|(
name|boolean
name|isInstructor
parameter_list|)
block|{
name|iIsInstructor
operator|=
name|isInstructor
expr_stmt|;
block|}
specifier|public
name|double
name|getDistance
parameter_list|()
block|{
return|return
name|iDistance
return|;
block|}
specifier|public
name|void
name|setDistance
parameter_list|(
name|double
name|distance
parameter_list|)
block|{
name|iDistance
operator|=
name|distance
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCurricula
parameter_list|()
block|{
return|return
name|iCurriculum2nrStudents
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|addCurriculum
parameter_list|(
name|CurriculumInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|iCurriculum2nrStudents
operator|==
literal|null
condition|)
name|iCurriculum2nrStudents
operator|=
operator|new
name|TreeSet
argument_list|<
name|CurriculumInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iCurriculum2nrStudents
operator|.
name|add
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|CurriculumInfo
argument_list|>
name|getCurricula
parameter_list|()
block|{
return|return
name|iCurriculum2nrStudents
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|StudentConflictInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|StudentConflictInfo
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|JenrlInfo
name|iInfo
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iOther
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iAnother
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentConflictInfo
parameter_list|()
block|{
block|}
specifier|public
name|StudentConflictInfo
parameter_list|(
name|JenrlInfo
name|jenrl
parameter_list|,
name|ClassAssignmentDetails
name|other
parameter_list|)
block|{
name|iInfo
operator|=
name|jenrl
expr_stmt|;
name|iOther
operator|=
name|other
expr_stmt|;
block|}
specifier|public
name|void
name|setOther
parameter_list|(
name|ClassAssignmentDetails
name|other
parameter_list|)
block|{
name|iOther
operator|=
name|other
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getOther
parameter_list|()
block|{
return|return
name|iOther
return|;
block|}
specifier|public
name|void
name|setAnother
parameter_list|(
name|ClassAssignmentDetails
name|another
parameter_list|)
block|{
name|iAnother
operator|=
name|another
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getAnother
parameter_list|()
block|{
return|return
name|iAnother
return|;
block|}
specifier|public
name|void
name|setInfo
parameter_list|(
name|JenrlInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|JenrlInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|StudentConflictInfo
name|o
parameter_list|)
block|{
if|if
condition|(
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
operator|!=
name|o
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
condition|)
return|return
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
operator|>
name|o
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
return|;
name|int
name|cmp
init|=
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GroupConstraintInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|String
name|iPreference
init|=
literal|"0"
decl_stmt|;
specifier|public
name|boolean
name|iIsSatisfied
init|=
literal|false
decl_stmt|;
specifier|public
name|String
name|iName
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|iType
init|=
literal|null
decl_stmt|;
specifier|public
name|Double
name|iValue
init|=
literal|null
decl_stmt|;
specifier|public
name|GroupConstraintInfo
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getPreference
parameter_list|()
block|{
return|return
name|iPreference
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
name|iPreference
operator|=
name|preference
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSatisfied
parameter_list|()
block|{
return|return
name|iIsSatisfied
return|;
block|}
specifier|public
name|void
name|setIsSatisfied
parameter_list|(
name|boolean
name|isSatisfied
parameter_list|)
block|{
name|iIsSatisfied
operator|=
name|isSatisfied
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasValue
parameter_list|()
block|{
return|return
name|iValue
operator|!=
literal|null
return|;
block|}
specifier|public
name|Double
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Double
name|value
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DistributionInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|GroupConstraintInfo
name|iInfo
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|iOther
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentDetails
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DistributionInfo
parameter_list|()
block|{
block|}
specifier|public
name|DistributionInfo
parameter_list|(
name|GroupConstraintInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|void
name|setInfo
parameter_list|(
name|GroupConstraintInfo
name|info
parameter_list|)
block|{
name|iInfo
operator|=
name|info
expr_stmt|;
block|}
specifier|public
name|GroupConstraintInfo
name|getInfo
parameter_list|()
block|{
return|return
name|iInfo
return|;
block|}
specifier|public
name|void
name|addClass
parameter_list|(
name|ClassAssignmentDetails
name|other
parameter_list|)
block|{
name|iOther
operator|.
name|add
argument_list|(
name|other
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|getOtherClasses
parameter_list|()
block|{
return|return
name|iOther
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BtbInstructorInfo
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iOther
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iAnother
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iPref
decl_stmt|;
specifier|public
name|BtbInstructorInfo
parameter_list|()
block|{
block|}
specifier|public
name|BtbInstructorInfo
parameter_list|(
name|ClassAssignmentDetails
name|other
parameter_list|,
name|int
name|pref
parameter_list|)
block|{
name|iOther
operator|=
name|other
expr_stmt|;
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|void
name|setOther
parameter_list|(
name|ClassAssignmentDetails
name|other
parameter_list|)
block|{
name|iOther
operator|=
name|other
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getOther
parameter_list|()
block|{
return|return
name|iOther
return|;
block|}
specifier|public
name|void
name|setAnother
parameter_list|(
name|ClassAssignmentDetails
name|another
parameter_list|)
block|{
name|iAnother
operator|=
name|another
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getAnother
parameter_list|()
block|{
return|return
name|iAnother
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|int
name|preference
parameter_list|)
block|{
name|iPref
operator|=
name|preference
expr_stmt|;
block|}
specifier|public
name|int
name|getPreference
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ClassAssignmentDetailsRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|ClassAssignmentDetails
argument_list|>
block|{
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|iAssignments
decl_stmt|;
specifier|public
name|ClassAssignmentDetailsRequest
parameter_list|()
block|{
block|}
specifier|public
name|ClassAssignmentDetailsRequest
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|boolean
name|hasAssignments
parameter_list|()
block|{
return|return
name|iAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addAssignment
parameter_list|(
name|SelectedAssignment
name|a
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
name|iAssignments
operator|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|iAssignments
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|removeAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|other
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ClassAssignmentDetails
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ClassInfo
name|iClass
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeInfo
name|iTime
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|iRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|iInstructor
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeInfo
name|iInitialTime
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|iInitialRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeInfo
name|iAssignedTime
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|iAssignedRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|iRooms
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimeInfo
argument_list|>
name|iTimes
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StudentConflictInfo
argument_list|>
name|iStudentConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DistributionInfo
argument_list|>
name|iDistributionConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BtbInstructorInfo
argument_list|>
name|iBtbInstructorConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iConflict
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|iObjectives
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|iAssignedObjectives
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCanUnassign
init|=
literal|false
decl_stmt|;
specifier|public
name|ClassAssignmentDetails
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setClazz
parameter_list|(
name|ClassInfo
name|clazz
parameter_list|)
block|{
name|iClass
operator|=
name|clazz
expr_stmt|;
block|}
specifier|public
name|ClassInfo
name|getClazz
parameter_list|()
block|{
return|return
name|iClass
return|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|TimeInfo
name|time
parameter_list|)
block|{
name|iTime
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|TimeInfo
name|getTime
parameter_list|()
block|{
return|return
name|iTime
return|;
block|}
specifier|public
name|int
name|getNrRooms
parameter_list|()
block|{
return|return
name|iRoom
operator|==
literal|null
condition|?
literal|0
else|:
name|iRoom
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|setRoom
parameter_list|(
name|RoomInfo
name|room
parameter_list|)
block|{
if|if
condition|(
name|iRoom
operator|==
literal|null
condition|)
name|iRoom
operator|=
operator|new
name|ArrayList
argument_list|<
name|RoomInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iRoom
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|getRoom
parameter_list|()
block|{
return|return
name|iRoom
return|;
block|}
specifier|public
name|int
name|getNrInstructors
parameter_list|()
block|{
return|return
name|iInstructor
operator|==
literal|null
condition|?
literal|0
else|:
name|iInstructor
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInstructor
parameter_list|(
name|InstructorInfo
name|instructor
parameter_list|)
block|{
if|if
condition|(
name|iInstructor
operator|==
literal|null
condition|)
name|iInstructor
operator|=
operator|new
name|ArrayList
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iInstructor
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|getInstructor
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|void
name|setInitialTime
parameter_list|(
name|TimeInfo
name|time
parameter_list|)
block|{
name|iInitialTime
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|TimeInfo
name|getInitialTime
parameter_list|()
block|{
return|return
name|iInitialTime
return|;
block|}
specifier|public
name|int
name|getNrInitialRooms
parameter_list|()
block|{
return|return
name|iInitialRoom
operator|==
literal|null
condition|?
literal|0
else|:
name|iInitialRoom
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInitialRoom
parameter_list|(
name|RoomInfo
name|room
parameter_list|)
block|{
if|if
condition|(
name|iInitialRoom
operator|==
literal|null
condition|)
name|iInitialRoom
operator|=
operator|new
name|ArrayList
argument_list|<
name|RoomInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iInitialRoom
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|getInitialRoom
parameter_list|()
block|{
return|return
name|iInitialRoom
return|;
block|}
specifier|public
name|void
name|setAssignedTime
parameter_list|(
name|TimeInfo
name|time
parameter_list|)
block|{
name|iAssignedTime
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|TimeInfo
name|getAssignedTime
parameter_list|()
block|{
return|return
name|iAssignedTime
return|;
block|}
specifier|public
name|int
name|getNrAssignedRooms
parameter_list|()
block|{
return|return
name|iAssignedRoom
operator|==
literal|null
condition|?
literal|0
else|:
name|iAssignedRoom
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|setAssignedRoom
parameter_list|(
name|RoomInfo
name|room
parameter_list|)
block|{
if|if
condition|(
name|iAssignedRoom
operator|==
literal|null
condition|)
name|iAssignedRoom
operator|=
operator|new
name|ArrayList
argument_list|<
name|RoomInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iAssignedRoom
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|getAssignedRoom
parameter_list|()
block|{
return|return
name|iAssignedRoom
return|;
block|}
specifier|public
name|boolean
name|hasRooms
parameter_list|()
block|{
return|return
name|iRooms
operator|!=
literal|null
operator|&&
operator|!
name|iRooms
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addRoom
parameter_list|(
name|RoomInfo
name|room
parameter_list|)
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
name|iRooms
operator|=
operator|new
name|ArrayList
argument_list|<
name|RoomInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iRooms
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|getRooms
parameter_list|()
block|{
return|return
name|iRooms
return|;
block|}
specifier|public
name|boolean
name|hasTimes
parameter_list|()
block|{
return|return
name|iTimes
operator|!=
literal|null
operator|&&
operator|!
name|iTimes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addTime
parameter_list|(
name|TimeInfo
name|time
parameter_list|)
block|{
if|if
condition|(
name|iTimes
operator|==
literal|null
condition|)
name|iTimes
operator|=
operator|new
name|ArrayList
argument_list|<
name|TimeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iTimes
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TimeInfo
argument_list|>
name|getTimes
parameter_list|()
block|{
return|return
name|iTimes
return|;
block|}
specifier|public
name|boolean
name|isCanUnassign
parameter_list|()
block|{
return|return
name|iCanUnassign
return|;
block|}
specifier|public
name|void
name|setCanUnassign
parameter_list|(
name|boolean
name|canUnassign
parameter_list|)
block|{
name|iCanUnassign
operator|=
name|canUnassign
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|getSelection
parameter_list|()
block|{
if|if
condition|(
name|getTime
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SelectedAssignment
name|selection
init|=
operator|new
name|SelectedAssignment
argument_list|()
decl_stmt|;
name|selection
operator|.
name|setClassId
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setDatePatternId
argument_list|(
name|getTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setDays
argument_list|(
name|getTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPatternId
argument_list|(
name|getTime
argument_list|()
operator|.
name|getPatternId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setStartSlot
argument_list|(
name|getTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|RoomInfo
name|room
range|:
name|getRoom
argument_list|()
control|)
name|selection
operator|.
name|addRoomId
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|selection
return|;
block|}
specifier|public
name|SelectedAssignment
name|getAssignedSelection
parameter_list|()
block|{
if|if
condition|(
name|getAssignedTime
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|SelectedAssignment
name|selection
init|=
operator|new
name|SelectedAssignment
argument_list|()
decl_stmt|;
name|selection
operator|.
name|setClassId
argument_list|(
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setDatePatternId
argument_list|(
name|getAssignedTime
argument_list|()
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setDays
argument_list|(
name|getAssignedTime
argument_list|()
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPatternId
argument_list|(
name|getAssignedTime
argument_list|()
operator|.
name|getPatternId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setStartSlot
argument_list|(
name|getAssignedTime
argument_list|()
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|RoomInfo
name|room
range|:
name|getAssignedRoom
argument_list|()
control|)
name|selection
operator|.
name|addRoomId
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|selection
return|;
block|}
specifier|public
name|boolean
name|hasStudentConflicts
parameter_list|()
block|{
return|return
name|iStudentConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iStudentConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addStudentConflict
parameter_list|(
name|StudentConflictInfo
name|conf
parameter_list|)
block|{
if|if
condition|(
name|iStudentConflicts
operator|==
literal|null
condition|)
name|iStudentConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|StudentConflictInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iStudentConflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|StudentConflictInfo
argument_list|>
name|getStudentConflicts
parameter_list|()
block|{
return|return
name|iStudentConflicts
return|;
block|}
specifier|public
name|int
name|countStudentConflicts
parameter_list|()
block|{
if|if
condition|(
name|iStudentConflicts
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StudentConflictInfo
name|c
range|:
name|iStudentConflicts
control|)
name|ret
operator|+=
name|c
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasDistributionConflicts
parameter_list|()
block|{
return|return
name|iDistributionConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iDistributionConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addDistributionConflict
parameter_list|(
name|DistributionInfo
name|conf
parameter_list|)
block|{
if|if
condition|(
name|iDistributionConflicts
operator|==
literal|null
condition|)
name|iDistributionConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|DistributionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iDistributionConflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|DistributionInfo
argument_list|>
name|getDistributionConflicts
parameter_list|()
block|{
return|return
name|iDistributionConflicts
return|;
block|}
specifier|public
name|boolean
name|hasViolatedDistributionConflicts
parameter_list|()
block|{
if|if
condition|(
name|iDistributionConflicts
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|DistributionInfo
name|di
range|:
name|iDistributionConflicts
control|)
if|if
condition|(
operator|!
name|di
operator|.
name|getInfo
argument_list|()
operator|.
name|isSatisfied
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|double
name|countDistributionConflicts
parameter_list|()
block|{
if|if
condition|(
name|iDistributionConflicts
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|double
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|DistributionInfo
name|c
range|:
name|iDistributionConflicts
control|)
if|if
condition|(
name|c
operator|.
name|getInfo
argument_list|()
operator|.
name|hasValue
argument_list|()
condition|)
name|ret
operator|+=
name|c
operator|.
name|getInfo
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasBtbInstructorConflicts
parameter_list|()
block|{
return|return
name|iBtbInstructorConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iBtbInstructorConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addBtbInstructorConflict
parameter_list|(
name|BtbInstructorInfo
name|conf
parameter_list|)
block|{
if|if
condition|(
name|iBtbInstructorConflicts
operator|==
literal|null
condition|)
name|iBtbInstructorConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|BtbInstructorInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iBtbInstructorConflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|BtbInstructorInfo
argument_list|>
name|getBtbInstructorConflicts
parameter_list|()
block|{
return|return
name|iBtbInstructorConflicts
return|;
block|}
specifier|public
name|boolean
name|isInitial
parameter_list|()
block|{
return|return
name|getAssignedTime
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
operator|&&
name|getAssignedTime
argument_list|()
operator|.
name|equals
argument_list|(
name|getInitialTime
argument_list|()
argument_list|)
operator|&&
name|getAssignedRoom
argument_list|()
operator|.
name|equals
argument_list|(
name|getInitialRoom
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrDates
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|dates
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|getTimes
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TimeInfo
name|time
range|:
name|getTimes
argument_list|()
control|)
name|dates
operator|.
name|add
argument_list|(
name|time
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|dates
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|getConflict
parameter_list|()
block|{
return|return
name|iConflict
return|;
block|}
specifier|public
name|void
name|setConflict
parameter_list|(
name|String
name|conflict
parameter_list|)
block|{
name|iConflict
operator|=
name|conflict
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasConflict
parameter_list|()
block|{
return|return
name|iConflict
operator|!=
literal|null
operator|&&
operator|!
name|iConflict
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
operator|(
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getClazz
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|+=
literal|": "
operator|+
name|getAssignedTime
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ret
operator|+=
literal|": "
operator|+
name|getTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
literal|": Not Assigned"
expr_stmt|;
block|}
if|if
condition|(
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getAssignedRoom
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
operator|+=
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|getAssignedRoom
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getRoom
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
operator|+=
operator|(
name|i
operator|==
literal|0
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|getRoom
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasObjectives
parameter_list|()
block|{
return|return
name|iObjectives
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setObjective
parameter_list|(
name|String
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
block|{
if|if
condition|(
name|iObjectives
operator|==
literal|null
condition|)
name|iObjectives
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
name|iObjectives
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getObjectives
parameter_list|()
block|{
return|return
name|iObjectives
return|;
block|}
specifier|public
name|double
name|getObjective
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iObjectives
operator|==
literal|null
condition|)
return|return
literal|0.0
return|;
name|Double
name|value
init|=
name|iObjectives
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
condition|?
literal|0.0
else|:
name|value
operator|.
name|doubleValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasAssignedObjectives
parameter_list|()
block|{
return|return
name|iAssignedObjectives
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAssignedObjective
parameter_list|(
name|String
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
block|{
if|if
condition|(
name|iAssignedObjectives
operator|==
literal|null
condition|)
name|iAssignedObjectives
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
expr_stmt|;
name|iAssignedObjectives
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getAssignedObjectives
parameter_list|()
block|{
return|return
name|iAssignedObjectives
return|;
block|}
specifier|public
name|double
name|getAssignedObjective
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iAssignedObjectives
operator|==
literal|null
condition|)
return|return
literal|0.0
return|;
name|Double
name|value
init|=
name|iAssignedObjectives
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
condition|?
literal|0.0
else|:
name|value
operator|.
name|doubleValue
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PreferenceInterface
extends|extends
name|RoomInterface
operator|.
name|PreferenceInterface
implements|implements
name|IsSerializable
block|{
specifier|private
name|int
name|iPreference
decl_stmt|;
specifier|public
name|PreferenceInterface
parameter_list|()
block|{
block|}
specifier|public
name|PreferenceInterface
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|color
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|abbv
parameter_list|,
name|int
name|preference
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|color
argument_list|,
name|code
argument_list|,
name|name
argument_list|,
name|abbv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iPreference
operator|=
name|preference
expr_stmt|;
block|}
specifier|public
name|int
name|getPreference
parameter_list|()
block|{
return|return
name|iPreference
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|int
name|preference
parameter_list|)
block|{
name|iPreference
operator|=
name|preference
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SuggestionProperties
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PreferenceInterface
argument_list|>
name|iPreferences
init|=
operator|new
name|ArrayList
argument_list|<
name|PreferenceInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iSolver
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|iSelectedAssignments
init|=
literal|null
decl_stmt|;
specifier|public
name|void
name|addPreference
parameter_list|(
name|PreferenceInterface
name|preference
parameter_list|)
block|{
name|iPreferences
operator|.
name|add
argument_list|(
name|preference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|PreferenceInterface
argument_list|>
name|getPreferences
parameter_list|()
block|{
return|return
name|iPreferences
return|;
block|}
specifier|public
name|PreferenceInterface
name|getPreference
parameter_list|(
name|String
name|prefProlog
parameter_list|)
block|{
for|for
control|(
name|PreferenceInterface
name|p
range|:
name|iPreferences
control|)
if|if
condition|(
name|p
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
name|prefProlog
argument_list|)
condition|)
return|return
name|p
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|PreferenceInterface
name|getPreference
parameter_list|(
name|int
name|intPref
parameter_list|)
block|{
if|if
condition|(
name|intPref
operator|>=
literal|50
condition|)
return|return
name|getPreference
argument_list|(
literal|"P"
argument_list|)
return|;
if|if
condition|(
name|intPref
operator|>=
literal|4
condition|)
return|return
name|getPreference
argument_list|(
literal|"2"
argument_list|)
return|;
if|if
condition|(
name|intPref
operator|>
literal|0
condition|)
return|return
name|getPreference
argument_list|(
literal|"1"
argument_list|)
return|;
if|if
condition|(
name|intPref
operator|<=
operator|-
literal|50
condition|)
return|return
name|getPreference
argument_list|(
literal|"R"
argument_list|)
return|;
if|if
condition|(
name|intPref
operator|<=
operator|-
literal|4
condition|)
return|return
name|getPreference
argument_list|(
literal|"-2"
argument_list|)
return|;
if|if
condition|(
name|intPref
operator|<
literal|0
condition|)
return|return
name|getPreference
argument_list|(
literal|"-1"
argument_list|)
return|;
return|return
name|getPreference
argument_list|(
literal|"0"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isSolver
parameter_list|()
block|{
return|return
name|iSolver
return|;
block|}
specifier|public
name|void
name|setSolver
parameter_list|(
name|boolean
name|solver
parameter_list|)
block|{
name|iSolver
operator|=
name|solver
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasSelectedAssignments
parameter_list|()
block|{
return|return
name|iSelectedAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iSelectedAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|getSelectedAssignments
parameter_list|()
block|{
return|return
name|iSelectedAssignments
return|;
block|}
specifier|public
name|void
name|addSelectedAssignment
parameter_list|(
name|SelectedAssignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|iSelectedAssignments
operator|==
literal|null
condition|)
name|iSelectedAssignments
operator|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|iSelectedAssignments
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SuggestionPropertiesRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|SuggestionProperties
argument_list|>
block|{
specifier|private
name|Long
name|iHistoryId
decl_stmt|;
specifier|public
name|SuggestionPropertiesRequest
parameter_list|()
block|{
block|}
specifier|public
name|SuggestionPropertiesRequest
parameter_list|(
name|Long
name|historyId
parameter_list|)
block|{
name|iHistoryId
operator|=
name|historyId
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasHistoryId
parameter_list|()
block|{
return|return
name|iHistoryId
operator|!=
literal|null
return|;
block|}
specifier|public
name|Long
name|getHistoryId
parameter_list|()
block|{
return|return
name|iHistoryId
return|;
block|}
specifier|public
name|void
name|setHistoryId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iHistoryId
operator|=
name|id
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SelectedAssignment
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|int
name|iDays
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iStartSlot
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|iRoomIds
decl_stmt|;
specifier|private
name|Long
name|iPatternId
decl_stmt|;
specifier|private
name|Long
name|iDatePatternId
decl_stmt|;
specifier|public
name|SelectedAssignment
parameter_list|()
block|{
block|}
specifier|public
name|SelectedAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
parameter_list|(
name|Long
name|classId
parameter_list|,
name|int
name|days
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|roomIds
parameter_list|,
name|Long
name|patternId
parameter_list|,
name|Long
name|datePatternId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
name|iDays
operator|=
name|days
expr_stmt|;
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
name|iRoomIds
operator|=
name|roomIds
expr_stmt|;
name|iPatternId
operator|=
name|patternId
expr_stmt|;
name|iDatePatternId
operator|=
name|datePatternId
expr_stmt|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|void
name|setDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|void
name|setStartSlot
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|iStartSlot
operator|=
name|slot
expr_stmt|;
block|}
specifier|public
name|int
name|getStartSlot
parameter_list|()
block|{
return|return
name|iStartSlot
return|;
block|}
specifier|public
name|void
name|setRoomIds
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|roomIds
parameter_list|)
block|{
name|iRoomIds
operator|=
name|roomIds
expr_stmt|;
block|}
specifier|public
name|void
name|addRoomId
parameter_list|(
name|Long
name|roomId
parameter_list|)
block|{
if|if
condition|(
name|iRoomIds
operator|==
literal|null
condition|)
name|iRoomIds
operator|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
expr_stmt|;
name|iRoomIds
operator|.
name|add
argument_list|(
name|roomId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getRoomIds
parameter_list|()
block|{
return|return
name|iRoomIds
return|;
block|}
specifier|public
name|String
name|getRoomIds
parameter_list|(
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|iRoomIds
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|iRoomIds
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|separator
operator|)
operator|+
name|id
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Long
name|getRoomId
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|iRoomIds
operator|==
literal|null
operator|||
name|index
operator|>=
name|iRoomIds
operator|.
name|size
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iRoomIds
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
specifier|public
name|void
name|setPatternId
parameter_list|(
name|Long
name|patternId
parameter_list|)
block|{
name|iPatternId
operator|=
name|patternId
expr_stmt|;
block|}
specifier|public
name|Long
name|getPatternId
parameter_list|()
block|{
return|return
name|iPatternId
return|;
block|}
specifier|public
name|void
name|setDatePatternId
parameter_list|(
name|Long
name|patternId
parameter_list|)
block|{
name|iDatePatternId
operator|=
name|patternId
expr_stmt|;
block|}
specifier|public
name|Long
name|getDatePatternId
parameter_list|()
block|{
return|return
name|iDatePatternId
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|SelectedAssignment
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|iClassId
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SelectedAssignment
operator|)
name|o
operator|)
operator|.
name|getClassId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|iClassId
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SelectedAssignment{class="
operator|+
name|getClassId
argument_list|()
operator|+
literal|", days="
operator|+
name|getDays
argument_list|()
operator|+
literal|", slot="
operator|+
name|getStartSlot
argument_list|()
operator|+
literal|", rooms="
operator|+
name|getRoomIds
argument_list|()
operator|+
literal|"}"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SelectedAssignmentsRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|Suggestion
argument_list|>
block|{
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|iAssignments
decl_stmt|;
specifier|public
name|SelectedAssignmentsRequest
parameter_list|()
block|{
block|}
specifier|public
name|SelectedAssignmentsRequest
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|boolean
name|hasAssignments
parameter_list|()
block|{
return|return
name|iAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addAssignment
parameter_list|(
name|SelectedAssignment
name|a
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
name|iAssignments
operator|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|iAssignments
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|removeAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|other
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|getAssignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Suggestion
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|Suggestion
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|double
name|iValue
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iUnassignedVariables
init|=
literal|0
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|iUnresolvedConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|iDifferentAssignments
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DistributionInfo
argument_list|>
name|iDistributionConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|BtbInstructorInfo
argument_list|>
name|iBtbInstructorConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|StudentConflictInfo
argument_list|>
name|iStudentConflicts
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCanAssign
init|=
literal|true
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iPlacement
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iSelectedPlacement
init|=
literal|null
decl_stmt|;
specifier|private
name|double
name|iBaseValue
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iBaseUnassignedVariables
init|=
literal|0
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|iCriteria
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|iBaseCriteria
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Suggestion
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|hasUnresolvedConflicts
parameter_list|()
block|{
return|return
name|iUnresolvedConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iUnresolvedConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|getUnresolvedConflicts
parameter_list|()
block|{
return|return
name|iUnresolvedConflicts
return|;
block|}
specifier|public
name|void
name|addUnresolvedConflict
parameter_list|(
name|ClassAssignmentDetails
name|conflict
parameter_list|)
block|{
if|if
condition|(
name|iUnresolvedConflicts
operator|==
literal|null
condition|)
name|iUnresolvedConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentDetails
argument_list|>
argument_list|()
expr_stmt|;
name|iUnresolvedConflicts
operator|.
name|add
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasDifferentAssignments
parameter_list|()
block|{
return|return
name|iDifferentAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iDifferentAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|getDifferentAssignments
parameter_list|()
block|{
return|return
name|iDifferentAssignments
return|;
block|}
specifier|public
name|void
name|addDifferentAssignment
parameter_list|(
name|ClassAssignmentDetails
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|iDifferentAssignments
operator|==
literal|null
condition|)
name|iDifferentAssignments
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentDetails
argument_list|>
argument_list|()
expr_stmt|;
name|iDifferentAssignments
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasBtbInstructorConflicts
parameter_list|()
block|{
return|return
name|iBtbInstructorConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iBtbInstructorConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addBtbInstructorConflict
parameter_list|(
name|BtbInstructorInfo
name|conf
parameter_list|)
block|{
if|if
condition|(
name|iBtbInstructorConflicts
operator|==
literal|null
condition|)
name|iBtbInstructorConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|BtbInstructorInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iBtbInstructorConflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|BtbInstructorInfo
argument_list|>
name|getBtbInstructorConflicts
parameter_list|()
block|{
return|return
name|iBtbInstructorConflicts
return|;
block|}
specifier|public
name|boolean
name|hasStudentConflicts
parameter_list|()
block|{
return|return
name|iStudentConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iStudentConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addStudentConflict
parameter_list|(
name|StudentConflictInfo
name|conf
parameter_list|)
block|{
if|if
condition|(
name|iStudentConflicts
operator|==
literal|null
condition|)
name|iStudentConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|StudentConflictInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iStudentConflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|StudentConflictInfo
argument_list|>
name|getStudentConflicts
parameter_list|()
block|{
return|return
name|iStudentConflicts
return|;
block|}
specifier|public
name|int
name|countStudentConflicts
parameter_list|()
block|{
if|if
condition|(
name|iStudentConflicts
operator|==
literal|null
condition|)
return|return
literal|0
return|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StudentConflictInfo
name|c
range|:
name|iStudentConflicts
control|)
name|ret
operator|+=
name|c
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasDistributionConflicts
parameter_list|()
block|{
return|return
name|iDistributionConflicts
operator|!=
literal|null
operator|&&
operator|!
name|iDistributionConflicts
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addDistributionConflict
parameter_list|(
name|DistributionInfo
name|conf
parameter_list|)
block|{
if|if
condition|(
name|iDistributionConflicts
operator|==
literal|null
condition|)
name|iDistributionConflicts
operator|=
operator|new
name|ArrayList
argument_list|<
name|DistributionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iDistributionConflicts
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|DistributionInfo
argument_list|>
name|getDistributionConflicts
parameter_list|()
block|{
return|return
name|iDistributionConflicts
return|;
block|}
specifier|public
name|boolean
name|hasViolatedDistributionConflicts
parameter_list|()
block|{
if|if
condition|(
name|iDistributionConflicts
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|DistributionInfo
name|di
range|:
name|iDistributionConflicts
control|)
if|if
condition|(
operator|!
name|di
operator|.
name|getInfo
argument_list|()
operator|.
name|isSatisfied
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCanAssign
parameter_list|()
block|{
return|return
name|iCanAssign
return|;
block|}
specifier|public
name|void
name|setCanAssign
parameter_list|(
name|boolean
name|canAssign
parameter_list|)
block|{
name|iCanAssign
operator|=
name|canAssign
expr_stmt|;
block|}
specifier|public
name|double
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getUnassignedVariables
parameter_list|()
block|{
return|return
name|iUnassignedVariables
return|;
block|}
specifier|public
name|void
name|setUnassignedVariables
parameter_list|(
name|int
name|unassignedVariables
parameter_list|)
block|{
name|iUnassignedVariables
operator|=
name|unassignedVariables
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getPlacement
parameter_list|()
block|{
return|return
name|iPlacement
return|;
block|}
specifier|public
name|void
name|setPlacement
parameter_list|(
name|ClassAssignmentDetails
name|placement
parameter_list|)
block|{
name|iPlacement
operator|=
name|placement
expr_stmt|;
block|}
specifier|public
name|ClassAssignmentDetails
name|getSelectedPlacement
parameter_list|()
block|{
return|return
name|iSelectedPlacement
return|;
block|}
specifier|public
name|void
name|setSelectedPlacement
parameter_list|(
name|ClassAssignmentDetails
name|placement
parameter_list|)
block|{
name|iSelectedPlacement
operator|=
name|placement
expr_stmt|;
block|}
specifier|public
name|double
name|getBaseValue
parameter_list|()
block|{
return|return
name|iBaseValue
return|;
block|}
specifier|public
name|void
name|setBaseValue
parameter_list|(
name|double
name|value
parameter_list|)
block|{
name|iBaseValue
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|int
name|getBaseUnassignedVariables
parameter_list|()
block|{
return|return
name|iBaseUnassignedVariables
return|;
block|}
specifier|public
name|void
name|setBaseUnassignedVariables
parameter_list|(
name|int
name|unassignedVariables
parameter_list|)
block|{
name|iBaseUnassignedVariables
operator|=
name|unassignedVariables
expr_stmt|;
block|}
specifier|public
name|void
name|setCriterion
parameter_list|(
name|String
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
block|{
name|iCriteria
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getCriteria
parameter_list|()
block|{
return|return
name|iCriteria
return|;
block|}
specifier|public
name|double
name|getCriterion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Double
name|value
init|=
name|iCriteria
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
condition|?
literal|0.0
else|:
name|value
operator|.
name|doubleValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setBaseCriterion
parameter_list|(
name|String
name|name
parameter_list|,
name|Double
name|value
parameter_list|)
block|{
name|iBaseCriteria
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getBaseCriteria
parameter_list|()
block|{
return|return
name|iBaseCriteria
return|;
block|}
specifier|public
name|double
name|getBaseCriterion
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Double
name|value
init|=
name|iBaseCriteria
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
condition|?
literal|0.0
else|:
name|value
operator|.
name|doubleValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|SelectedAssignment
name|getAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|classId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|hasDifferentAssignments
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentDetails
name|detail
range|:
name|getDifferentAssignments
argument_list|()
control|)
if|if
condition|(
name|classId
operator|.
name|equals
argument_list|(
name|detail
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
return|return
name|detail
operator|.
name|getAssignedSelection
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|getAssignment
parameter_list|(
name|boolean
name|conflicts
parameter_list|)
block|{
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasDifferentAssignments
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentDetails
name|detail
range|:
name|getDifferentAssignments
argument_list|()
control|)
name|ret
operator|.
name|add
argument_list|(
name|detail
operator|.
name|getAssignedSelection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflicts
operator|&&
name|hasUnresolvedConflicts
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentDetails
name|detail
range|:
name|getUnresolvedConflicts
argument_list|()
control|)
name|ret
operator|.
name|add
argument_list|(
operator|new
name|SelectedAssignment
argument_list|(
name|detail
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Suggestion
name|other
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|getValue
argument_list|()
argument_list|,
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|NaturalOrderComparator
operator|.
name|compare
argument_list|(
name|getDifferentAssignments
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getDifferentAssignments
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|other
operator|.
name|getDifferentAssignments
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|other
operator|.
name|getDifferentAssignments
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MakeAssignmentRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseNull
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|iAssignments
decl_stmt|;
specifier|public
name|MakeAssignmentRequest
parameter_list|()
block|{
block|}
specifier|public
name|MakeAssignmentRequest
parameter_list|(
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|assignments
parameter_list|)
block|{
name|iAssignments
operator|=
name|assignments
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasAssignments
parameter_list|()
block|{
return|return
name|iAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addAssignment
parameter_list|(
name|SelectedAssignment
name|a
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
name|iAssignments
operator|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|iAssignments
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|removeAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|other
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|getAssignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ComputeSuggestionsRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|Suggestions
argument_list|>
block|{
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|iAssignments
decl_stmt|;
specifier|private
name|int
name|iDepth
init|=
literal|2
decl_stmt|;
specifier|private
name|int
name|iLimit
init|=
literal|20
decl_stmt|;
specifier|private
name|int
name|iTimeLimit
init|=
literal|5000
decl_stmt|;
specifier|private
name|boolean
name|iAllowBreakHard
init|=
literal|false
decl_stmt|,
name|iSameRoom
init|=
literal|false
decl_stmt|,
name|iSameTime
init|=
literal|false
decl_stmt|,
name|iPlacements
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|public
name|ComputeSuggestionsRequest
parameter_list|()
block|{
block|}
specifier|public
name|ComputeSuggestionsRequest
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ComputeSuggestionsRequest
parameter_list|(
name|Long
name|classId
parameter_list|,
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|assignments
parameter_list|)
block|{
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
name|iAssignments
operator|=
name|assignments
expr_stmt|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|boolean
name|hasAssignments
parameter_list|()
block|{
return|return
name|iAssignments
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addAssignment
parameter_list|(
name|SelectedAssignment
name|a
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
name|iAssignments
operator|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|iAssignments
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|removeAssignment
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
name|iAssignments
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Iterator
argument_list|<
name|SelectedAssignment
argument_list|>
name|i
init|=
name|iAssignments
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SelectedAssignment
name|other
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
name|other
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|getAssignments
parameter_list|()
block|{
return|return
name|iAssignments
return|;
block|}
specifier|public
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|iDepth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|iDepth
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setTimeLimit
parameter_list|(
name|int
name|timeLimit
parameter_list|)
block|{
name|iTimeLimit
operator|=
name|timeLimit
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeLimit
parameter_list|()
block|{
return|return
name|iTimeLimit
return|;
block|}
specifier|public
name|void
name|setAllowBreakHard
parameter_list|(
name|boolean
name|allowBreakHard
parameter_list|)
block|{
name|iAllowBreakHard
operator|=
name|allowBreakHard
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowBreakHard
parameter_list|()
block|{
return|return
name|iAllowBreakHard
return|;
block|}
specifier|public
name|void
name|setSameRoom
parameter_list|(
name|boolean
name|sameRoom
parameter_list|)
block|{
name|iSameRoom
operator|=
name|sameRoom
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSameRoom
parameter_list|()
block|{
return|return
name|iSameRoom
return|;
block|}
specifier|public
name|void
name|setSameTime
parameter_list|(
name|boolean
name|sameTime
parameter_list|)
block|{
name|iSameTime
operator|=
name|sameTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSameTime
parameter_list|()
block|{
return|return
name|iSameTime
return|;
block|}
specifier|public
name|void
name|setPlacements
parameter_list|(
name|boolean
name|placements
parameter_list|)
block|{
name|iPlacements
operator|=
name|placements
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPlacements
parameter_list|()
block|{
return|return
name|iPlacements
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|iFilter
return|;
block|}
specifier|public
name|boolean
name|hasFilter
parameter_list|()
block|{
return|return
name|iFilter
operator|!=
literal|null
operator|&&
operator|!
name|iFilter
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Suggestions
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|Suggestion
argument_list|>
name|iSuggestions
init|=
operator|new
name|TreeSet
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iTimeoutReached
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iNrCombinationsConsidered
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iNrSolutions
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iDepth
init|=
literal|2
decl_stmt|;
specifier|private
name|int
name|iLimit
init|=
literal|20
decl_stmt|;
specifier|private
name|int
name|iTimeLimit
init|=
literal|5000
decl_stmt|;
specifier|private
name|Long
name|iClassId
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowBreakHard
init|=
literal|false
decl_stmt|,
name|iSameRoom
init|=
literal|false
decl_stmt|,
name|iSameTime
init|=
literal|false
decl_stmt|,
name|iPlacements
init|=
literal|false
decl_stmt|;
specifier|private
name|Suggestion
name|iBaseSuggestion
decl_stmt|;
specifier|private
name|String
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|public
name|Suggestions
parameter_list|()
block|{
block|}
specifier|public
name|Suggestions
parameter_list|(
name|ComputeSuggestionsRequest
name|request
parameter_list|)
block|{
name|iLimit
operator|=
name|request
operator|.
name|getLimit
argument_list|()
expr_stmt|;
name|iTimeLimit
operator|=
name|request
operator|.
name|getTimeLimit
argument_list|()
expr_stmt|;
name|iDepth
operator|=
name|request
operator|.
name|getDepth
argument_list|()
expr_stmt|;
name|iClassId
operator|=
name|request
operator|.
name|getClassId
argument_list|()
expr_stmt|;
name|iAllowBreakHard
operator|=
name|request
operator|.
name|isAllowBreakHard
argument_list|()
expr_stmt|;
name|iSameRoom
operator|=
name|request
operator|.
name|isSameRoom
argument_list|()
expr_stmt|;
name|iSameTime
operator|=
name|request
operator|.
name|isSameTime
argument_list|()
expr_stmt|;
name|iPlacements
operator|=
name|request
operator|.
name|isPlacements
argument_list|()
expr_stmt|;
name|iFilter
operator|=
name|request
operator|.
name|getFilter
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|Suggestion
argument_list|>
name|getSuggestions
parameter_list|()
block|{
return|return
name|iSuggestions
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|iSuggestions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Suggestion
name|last
parameter_list|()
block|{
return|return
name|iSuggestions
operator|.
name|last
argument_list|()
return|;
block|}
specifier|public
name|void
name|addSuggestion
parameter_list|(
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|iSuggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSuggestions
operator|.
name|size
argument_list|()
operator|>
name|iLimit
condition|)
name|iSuggestions
operator|.
name|remove
argument_list|(
name|iSuggestions
operator|.
name|last
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTimeoutReached
parameter_list|(
name|boolean
name|timeoutReached
parameter_list|)
block|{
name|iTimeoutReached
operator|=
name|timeoutReached
expr_stmt|;
block|}
specifier|public
name|boolean
name|isTimeoutReached
parameter_list|()
block|{
return|return
name|iTimeoutReached
return|;
block|}
specifier|public
name|void
name|setNrCombinationsConsidered
parameter_list|(
name|int
name|nrCombinationsConsidered
parameter_list|)
block|{
name|iNrCombinationsConsidered
operator|=
name|nrCombinationsConsidered
expr_stmt|;
block|}
specifier|public
name|int
name|getNrCombinationsConsidered
parameter_list|()
block|{
return|return
name|iNrCombinationsConsidered
return|;
block|}
specifier|public
name|void
name|setNrSolutions
parameter_list|(
name|int
name|nrSolutions
parameter_list|)
block|{
name|iNrSolutions
operator|=
name|nrSolutions
expr_stmt|;
block|}
specifier|public
name|int
name|getNrSolutions
parameter_list|()
block|{
return|return
name|iNrSolutions
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|int
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|int
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setTimeLimit
parameter_list|(
name|int
name|timeLimit
parameter_list|)
block|{
name|iTimeLimit
operator|=
name|timeLimit
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeLimit
parameter_list|()
block|{
return|return
name|iTimeLimit
return|;
block|}
specifier|public
name|void
name|setDepth
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|iDepth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|iDepth
return|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|void
name|setAllowBreakHard
parameter_list|(
name|boolean
name|allowBreakHard
parameter_list|)
block|{
name|iAllowBreakHard
operator|=
name|allowBreakHard
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowBreakHard
parameter_list|()
block|{
return|return
name|iAllowBreakHard
return|;
block|}
specifier|public
name|void
name|setSameRoom
parameter_list|(
name|boolean
name|sameRoom
parameter_list|)
block|{
name|iSameRoom
operator|=
name|sameRoom
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSameRoom
parameter_list|()
block|{
return|return
name|iSameRoom
return|;
block|}
specifier|public
name|void
name|setSameTime
parameter_list|(
name|boolean
name|sameTime
parameter_list|)
block|{
name|iSameTime
operator|=
name|sameTime
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSameTime
parameter_list|()
block|{
return|return
name|iSameTime
return|;
block|}
specifier|public
name|void
name|setPlacements
parameter_list|(
name|boolean
name|placements
parameter_list|)
block|{
name|iPlacements
operator|=
name|placements
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPlacements
parameter_list|()
block|{
return|return
name|iPlacements
return|;
block|}
specifier|public
name|Suggestion
name|getBaseSuggestion
parameter_list|()
block|{
return|return
name|iBaseSuggestion
return|;
block|}
specifier|public
name|void
name|setBaseSuggestion
parameter_list|(
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|iBaseSuggestion
operator|=
name|suggestion
expr_stmt|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|iFilter
return|;
block|}
specifier|public
name|boolean
name|hasFilter
parameter_list|()
block|{
return|return
name|iFilter
operator|!=
literal|null
operator|&&
operator|!
name|iFilter
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SuggestionsFilterRpcRequest
extends|extends
name|FilterRpcRequest
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iClassId
init|=
literal|null
decl_stmt|;
specifier|public
name|SuggestionsFilterRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ComputeConflictTableRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentDetails
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|public
name|ComputeConflictTableRequest
parameter_list|()
block|{
block|}
specifier|public
name|ComputeConflictTableRequest
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CBSNode
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|iCount
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|,
name|iHTML
decl_stmt|,
name|iLink
decl_stmt|,
name|iPref
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CBSNode
argument_list|>
name|iNodes
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iClassId
init|=
literal|null
decl_stmt|;
specifier|private
name|SelectedAssignment
name|iSelection
init|=
literal|null
decl_stmt|;
specifier|public
name|CBSNode
parameter_list|()
block|{
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|iCount
return|;
block|}
specifier|public
name|void
name|setCount
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|iCount
operator|=
name|count
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getHTML
parameter_list|()
block|{
return|return
name|iHTML
return|;
block|}
specifier|public
name|void
name|setHTML
parameter_list|(
name|String
name|html
parameter_list|)
block|{
name|iHTML
operator|=
name|html
expr_stmt|;
block|}
specifier|public
name|String
name|getPref
parameter_list|()
block|{
return|return
name|iPref
return|;
block|}
specifier|public
name|void
name|setPref
parameter_list|(
name|String
name|pref
parameter_list|)
block|{
name|iPref
operator|=
name|pref
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasLink
parameter_list|()
block|{
return|return
name|iLink
operator|!=
literal|null
operator|&&
operator|!
name|iLink
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLink
parameter_list|()
block|{
return|return
name|iLink
return|;
block|}
specifier|public
name|void
name|setLink
parameter_list|(
name|String
name|link
parameter_list|)
block|{
name|iLink
operator|=
name|link
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasClassId
parameter_list|()
block|{
return|return
name|iClassId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|boolean
name|hasSelection
parameter_list|()
block|{
return|return
name|iSelection
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSelection
parameter_list|(
name|SelectedAssignment
name|selection
parameter_list|)
block|{
name|iSelection
operator|=
name|selection
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|getSelection
parameter_list|()
block|{
return|return
name|iSelection
return|;
block|}
specifier|public
name|boolean
name|hasNodes
parameter_list|()
block|{
return|return
name|iNodes
operator|!=
literal|null
operator|&&
operator|!
name|iNodes
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|CBSNode
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|iNodes
return|;
block|}
specifier|public
name|void
name|addNode
parameter_list|(
name|CBSNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|iNodes
operator|==
literal|null
condition|)
name|iNodes
operator|=
operator|new
name|ArrayList
argument_list|<
name|CBSNode
argument_list|>
argument_list|()
expr_stmt|;
name|iNodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|toString
argument_list|(
literal|""
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|indent
parameter_list|)
block|{
name|String
name|ret
init|=
name|indent
operator|+
name|getCount
argument_list|()
operator|+
literal|"x "
operator|+
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasNodes
argument_list|()
condition|)
block|{
name|ret
operator|+=
literal|" ["
expr_stmt|;
for|for
control|(
name|CBSNode
name|node
range|:
name|getNodes
argument_list|()
control|)
name|ret
operator|+=
literal|"\n"
operator|+
name|node
operator|.
name|toString
argument_list|(
name|indent
operator|+
literal|"  "
argument_list|)
expr_stmt|;
name|ret
operator|+=
literal|"\n"
operator|+
name|indent
operator|+
literal|"]"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ConflictBasedStatisticsRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|CBSNode
argument_list|>
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iClassId
decl_stmt|;
specifier|private
name|boolean
name|iVariableOriented
init|=
literal|true
decl_stmt|;
specifier|private
name|double
name|iLimit
init|=
literal|100.0
decl_stmt|;
specifier|public
name|ConflictBasedStatisticsRequest
parameter_list|()
block|{
block|}
specifier|public
name|ConflictBasedStatisticsRequest
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|setClassId
argument_list|(
name|classId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasClassId
parameter_list|()
block|{
return|return
name|iClassId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setClassId
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
name|iClassId
operator|=
name|classId
expr_stmt|;
block|}
specifier|public
name|Long
name|getClassId
parameter_list|()
block|{
return|return
name|iClassId
return|;
block|}
specifier|public
name|boolean
name|isVariableOriented
parameter_list|()
block|{
return|return
name|iVariableOriented
return|;
block|}
specifier|public
name|void
name|setVariableOriented
parameter_list|(
name|boolean
name|variableOriented
parameter_list|)
block|{
name|iVariableOriented
operator|=
name|variableOriented
expr_stmt|;
block|}
specifier|public
name|double
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|double
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

