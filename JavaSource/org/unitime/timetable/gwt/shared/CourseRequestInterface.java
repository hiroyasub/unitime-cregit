begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|StudentSectioningContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseRequestInterface
extends|extends
name|StudentSectioningContext
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|iCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|Request
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|iAlternatives
init|=
operator|new
name|ArrayList
argument_list|<
name|Request
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iSaved
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iNoChange
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iAllowTimeConf
init|=
literal|false
decl_stmt|,
name|iAllowRoomConf
init|=
literal|false
decl_stmt|,
name|iLinkedConf
init|=
literal|false
decl_stmt|,
name|iDeadlineConf
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|iUpdateLastRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|RequestedCourse
name|iLastCourse
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CourseMessage
argument_list|>
name|iConfirmations
init|=
literal|null
decl_stmt|;
specifier|private
name|Float
name|iMaxCredit
init|=
literal|null
decl_stmt|;
specifier|private
name|Float
name|iMaxCreditOverride
init|=
literal|null
decl_stmt|;
specifier|private
name|RequestedCourseStatus
name|iMaxCreditOverrideStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iMaxCreditOverrideExternalId
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iMaxCreditOverrideTimeStamp
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCreditWarning
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCreditNote
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iErrorMessage
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSpecRegDashboardUrl
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iRequestorNote
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iRequestorNoteSuggestions
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iRequestId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPopupMessage
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iPinReleased
init|=
literal|null
decl_stmt|;
specifier|private
name|WaitListMode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|CheckCoursesResponse
name|iWaitListChecks
init|=
literal|null
decl_stmt|;
specifier|public
name|CourseRequestInterface
parameter_list|()
block|{
block|}
specifier|public
name|CourseRequestInterface
parameter_list|(
name|StudentSectioningContext
name|cx
parameter_list|)
block|{
name|super
argument_list|(
name|cx
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
return|;
block|}
specifier|public
name|Request
name|getCourse
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|iCourses
operator|!=
literal|null
operator|&&
name|index
operator|<
name|iCourses
operator|.
name|size
argument_list|()
condition|)
return|return
name|iCourses
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Request
argument_list|>
name|getAlternatives
parameter_list|()
block|{
return|return
name|iAlternatives
return|;
block|}
specifier|public
name|Request
name|getAlternative
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|iAlternatives
operator|!=
literal|null
operator|&&
name|index
operator|<
name|iAlternatives
operator|.
name|size
argument_list|()
condition|)
return|return
name|iAlternatives
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addCourseCriticalFirst
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|isCritical
argument_list|()
operator|||
name|request
operator|.
name|isImportant
argument_list|()
condition|)
block|{
name|int
name|lastCritical
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isCritical
argument_list|()
operator|||
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isImportant
argument_list|()
condition|)
name|lastCritical
operator|=
name|i
expr_stmt|;
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|lastCritical
operator|+
literal|1
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isActive
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|canWaitList
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
name|r
operator|.
name|isCanWaitList
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isWaitListed
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|sameWaitListedCourses
parameter_list|(
name|CourseRequestInterface
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|int
name|nrWaitListed
init|=
literal|0
decl_stmt|;
name|r
label|:
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isWaitList
argument_list|()
condition|)
block|{
name|nrWaitListed
operator|++
expr_stmt|;
for|for
control|(
name|Request
name|o
range|:
name|other
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|o
operator|.
name|isWaitList
argument_list|()
operator|&&
name|r
operator|.
name|sameCourses
argument_list|(
name|o
argument_list|)
condition|)
continue|continue
name|r
continue|;
return|return
literal|false
return|;
block|}
block|}
for|for
control|(
name|Request
name|o
range|:
name|other
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|o
operator|.
name|isWaitList
argument_list|()
condition|)
name|nrWaitListed
operator|--
expr_stmt|;
return|return
name|nrWaitListed
operator|==
literal|0
return|;
block|}
specifier|public
name|boolean
name|isSaved
parameter_list|()
block|{
return|return
name|iSaved
return|;
block|}
specifier|public
name|void
name|setSaved
parameter_list|(
name|boolean
name|saved
parameter_list|)
block|{
name|iSaved
operator|=
name|saved
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNoChange
parameter_list|()
block|{
return|return
name|iNoChange
return|;
block|}
specifier|public
name|void
name|setNoChange
parameter_list|(
name|boolean
name|noChange
parameter_list|)
block|{
name|iNoChange
operator|=
name|noChange
expr_stmt|;
block|}
specifier|public
name|boolean
name|areTimeConflictsAllowed
parameter_list|()
block|{
return|return
name|iAllowTimeConf
return|;
block|}
specifier|public
name|void
name|setTimeConflictsAllowed
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|iAllowTimeConf
operator|=
name|allow
expr_stmt|;
block|}
specifier|public
name|boolean
name|areSpaceConflictsAllowed
parameter_list|()
block|{
return|return
name|iAllowRoomConf
return|;
block|}
specifier|public
name|void
name|setSpaceConflictsAllowed
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|iAllowRoomConf
operator|=
name|allow
expr_stmt|;
block|}
specifier|public
name|boolean
name|areLinkedConflictsAllowed
parameter_list|()
block|{
return|return
name|iLinkedConf
return|;
block|}
specifier|public
name|void
name|setLinkedConflictsAllowed
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|iLinkedConf
operator|=
name|allow
expr_stmt|;
block|}
specifier|public
name|boolean
name|areDeadlineConflictsAllowed
parameter_list|()
block|{
return|return
name|iDeadlineConf
return|;
block|}
specifier|public
name|void
name|setDeadlineConflictsAllowed
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|iDeadlineConf
operator|=
name|allow
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUpdateLastRequest
parameter_list|()
block|{
return|return
name|iUpdateLastRequest
operator|==
literal|null
operator|||
name|iUpdateLastRequest
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setUpdateLastRequest
parameter_list|(
name|boolean
name|updateLastRequest
parameter_list|)
block|{
name|iUpdateLastRequest
operator|=
name|updateLastRequest
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|iCourses
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iAlternatives
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasMaxCredit
parameter_list|()
block|{
return|return
name|iMaxCredit
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMaxCredit
parameter_list|(
name|Float
name|maxCredit
parameter_list|)
block|{
name|iMaxCredit
operator|=
name|maxCredit
expr_stmt|;
block|}
specifier|public
name|Float
name|getMaxCredit
parameter_list|()
block|{
return|return
name|iMaxCredit
return|;
block|}
specifier|public
name|boolean
name|hasMaxCreditOverride
parameter_list|()
block|{
return|return
name|iMaxCreditOverride
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMaxCreditOverride
parameter_list|(
name|Float
name|maxCreditOverride
parameter_list|)
block|{
name|iMaxCreditOverride
operator|=
name|maxCreditOverride
expr_stmt|;
block|}
specifier|public
name|Float
name|getMaxCreditOverride
parameter_list|()
block|{
return|return
name|iMaxCreditOverride
return|;
block|}
specifier|public
name|void
name|setMaxCreditOverrideStatus
parameter_list|(
name|RequestedCourseStatus
name|status
parameter_list|)
block|{
name|iMaxCreditOverrideStatus
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|RequestedCourseStatus
name|getMaxCreditOverrideStatus
parameter_list|()
block|{
return|return
name|iMaxCreditOverrideStatus
return|;
block|}
specifier|public
name|void
name|setMaxCreditOverrideExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|iMaxCreditOverrideExternalId
operator|=
name|externalId
expr_stmt|;
block|}
specifier|public
name|String
name|getMaxCreditOverrideExternalId
parameter_list|()
block|{
return|return
name|iMaxCreditOverrideExternalId
return|;
block|}
specifier|public
name|void
name|setMaxCreditOverrideTimeStamp
parameter_list|(
name|Date
name|timeStamp
parameter_list|)
block|{
name|iMaxCreditOverrideTimeStamp
operator|=
name|timeStamp
expr_stmt|;
block|}
specifier|public
name|Date
name|getMaxCreditOverrideTimeStamp
parameter_list|()
block|{
return|return
name|iMaxCreditOverrideTimeStamp
return|;
block|}
specifier|public
name|boolean
name|hasCreditWarning
parameter_list|()
block|{
return|return
name|iCreditWarning
operator|!=
literal|null
operator|&&
operator|!
name|iCreditWarning
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCreditWarning
parameter_list|()
block|{
return|return
name|iCreditWarning
return|;
block|}
specifier|public
name|void
name|setCreditWarning
parameter_list|(
name|String
name|warning
parameter_list|)
block|{
name|iCreditWarning
operator|=
name|warning
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCreditNote
parameter_list|()
block|{
return|return
name|iCreditNote
operator|!=
literal|null
operator|&&
operator|!
name|iCreditNote
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iCreditNote
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCreditNote
parameter_list|()
block|{
return|return
name|iCreditNote
return|;
block|}
specifier|public
name|void
name|setCreditNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|iCreditNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasPopupMessage
parameter_list|()
block|{
return|return
name|iPopupMessage
operator|!=
literal|null
operator|&&
operator|!
name|iPopupMessage
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPopupMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|message
operator|==
literal|null
operator|||
name|message
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
if|if
condition|(
name|iPopupMessage
operator|==
literal|null
condition|)
name|iPopupMessage
operator|=
name|message
expr_stmt|;
if|else if
condition|(
operator|!
name|iPopupMessage
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
name|iPopupMessage
operator|+=
literal|"\n"
operator|+
name|message
expr_stmt|;
block|}
specifier|public
name|String
name|getPopupMessage
parameter_list|()
block|{
return|return
name|iPopupMessage
return|;
block|}
specifier|public
name|boolean
name|addCourse
parameter_list|(
name|RequestedCourse
name|course
parameter_list|)
block|{
name|iLastCourse
operator|=
name|course
expr_stmt|;
name|RequestPriority
name|rp
init|=
name|getRequestPriority
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|rp
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rp
operator|.
name|getRequest
argument_list|()
operator|.
name|getRequestedCourse
argument_list|(
name|rp
operator|.
name|getChoice
argument_list|()
argument_list|)
operator|.
name|isInactive
argument_list|()
condition|)
name|dropCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
else|else
return|return
literal|false
return|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|dropCourse
parameter_list|(
name|RequestedCourse
name|course
parameter_list|)
block|{
name|iLastCourse
operator|=
name|course
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
name|j
init|=
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|(
name|course
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RequestedCourse
argument_list|>
name|i
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
name|j
init|=
name|getAlternatives
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|(
name|course
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|RequestedCourse
argument_list|>
name|i
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
name|j
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasLastCourse
parameter_list|()
block|{
return|return
name|iLastCourse
operator|!=
literal|null
return|;
block|}
specifier|public
name|RequestedCourse
name|getLastCourse
parameter_list|()
block|{
return|return
name|iLastCourse
return|;
block|}
specifier|private
name|RequestPriority
name|__getRequestPriority
parameter_list|(
name|Object
name|course
parameter_list|)
block|{
if|if
condition|(
name|course
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|priority
init|=
literal|1
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
operator|new
name|RequestPriority
argument_list|(
literal|false
argument_list|,
name|priority
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
return|;
name|priority
operator|++
expr_stmt|;
block|}
name|priority
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
operator|new
name|RequestPriority
argument_list|(
literal|true
argument_list|,
name|priority
argument_list|,
name|i
argument_list|,
name|r
argument_list|)
return|;
name|priority
operator|++
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|RequestPriority
name|getRequestPriority
parameter_list|(
name|CourseAssignment
name|course
parameter_list|)
block|{
return|return
name|__getRequestPriority
argument_list|(
name|course
argument_list|)
return|;
block|}
specifier|public
name|RequestPriority
name|getRequestPriority
parameter_list|(
name|DegreeCourseInterface
name|course
parameter_list|)
block|{
return|return
name|__getRequestPriority
argument_list|(
name|course
argument_list|)
return|;
block|}
specifier|public
name|RequestPriority
name|getRequestPriority
parameter_list|(
name|RequestedCourse
name|course
parameter_list|)
block|{
return|return
name|__getRequestPriority
argument_list|(
name|course
argument_list|)
return|;
block|}
specifier|public
name|float
index|[]
name|getCreditRange
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|advisorWaitListedCourseIds
parameter_list|)
block|{
name|List
argument_list|<
name|Float
argument_list|>
name|mins
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Float
argument_list|>
name|maxs
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nrCourses
init|=
literal|0
decl_stmt|;
name|float
name|tMin
init|=
literal|0f
decl_stmt|,
name|tMax
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|min
init|=
literal|null
decl_stmt|,
name|max
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|min
operator|>
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
name|min
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|<
name|rc
operator|.
name|getCreditMax
argument_list|()
condition|)
name|max
operator|=
name|rc
operator|.
name|getCreditMax
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isWaitListOrNoSub
argument_list|(
name|iMode
argument_list|,
name|advisorWaitListedCourseIds
argument_list|)
condition|)
block|{
name|tMin
operator|+=
name|min
expr_stmt|;
name|tMax
operator|+=
name|max
expr_stmt|;
block|}
else|else
block|{
name|mins
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|maxs
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|nrCourses
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|min
init|=
literal|null
decl_stmt|,
name|max
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|min
operator|>
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
name|min
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|max
operator|<
name|rc
operator|.
name|getCreditMax
argument_list|()
condition|)
name|max
operator|=
name|rc
operator|.
name|getCreditMax
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|min
operator|!=
literal|null
condition|)
block|{
name|mins
operator|.
name|add
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|maxs
operator|.
name|add
argument_list|(
name|max
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|mins
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|maxs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCourses
condition|;
name|i
operator|++
control|)
block|{
name|tMin
operator|+=
name|mins
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|tMax
operator|+=
name|maxs
operator|.
name|get
argument_list|(
name|maxs
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|float
index|[]
block|{
name|tMin
block|,
name|tMax
block|}
return|;
block|}
specifier|public
name|float
name|getCredit
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|advisorWaitListedCourseIds
parameter_list|)
block|{
name|List
argument_list|<
name|Float
argument_list|>
name|credits
init|=
operator|new
name|ArrayList
argument_list|<
name|Float
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nrCourses
init|=
literal|0
decl_stmt|;
name|float
name|total
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|isWaitListOrNoSub
argument_list|(
name|iMode
argument_list|,
name|advisorWaitListedCourseIds
argument_list|)
condition|)
block|{
name|total
operator|+=
name|credit
expr_stmt|;
block|}
else|else
block|{
name|credits
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|nrCourses
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|Float
name|credit
init|=
literal|null
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
if|if
condition|(
name|credit
operator|==
literal|null
operator|||
name|credit
operator|<
name|rc
operator|.
name|getCreditMin
argument_list|()
condition|)
name|credit
operator|=
name|rc
operator|.
name|getCreditMin
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|credit
operator|!=
literal|null
condition|)
block|{
name|credits
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|credits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrCourses
condition|;
name|i
operator|++
control|)
block|{
name|total
operator|+=
name|credits
operator|.
name|get
argument_list|(
name|credits
operator|.
name|size
argument_list|()
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|total
return|;
block|}
specifier|public
name|boolean
name|isPinReleased
parameter_list|()
block|{
return|return
name|iPinReleased
operator|!=
literal|null
operator|&&
name|iPinReleased
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setPinReleased
parameter_list|(
name|boolean
name|pinReleased
parameter_list|)
block|{
name|iPinReleased
operator|=
name|pinReleased
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasReleasedPin
parameter_list|()
block|{
return|return
name|isPinReleased
argument_list|()
operator|&&
name|hasPin
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getWaitListedCourseIds
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|request
operator|.
name|isWaitList
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
name|courseIds
operator|.
name|add
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|courseIds
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Long
argument_list|>
name|getNoSubCourseIds
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|courseIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|request
operator|.
name|isNoSub
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
name|courseIds
operator|.
name|add
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|courseIds
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|CourseRequestInterface
operator|)
condition|)
return|return
literal|false
return|;
name|CourseRequestInterface
name|r
init|=
operator|(
name|CourseRequestInterface
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|r
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|getCourse
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCourse
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|r
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|getAlternative
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getAlternative
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
class|class
name|FreeTime
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|iDays
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iStart
decl_stmt|;
specifier|private
name|int
name|iLength
decl_stmt|;
specifier|public
name|FreeTime
parameter_list|()
block|{
block|}
specifier|public
name|FreeTime
parameter_list|(
name|List
argument_list|<
name|Integer
argument_list|>
name|days
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|days
operator|!=
literal|null
condition|)
name|iDays
operator|.
name|addAll
argument_list|(
name|days
argument_list|)
expr_stmt|;
name|iStart
operator|=
name|start
expr_stmt|;
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|FreeTime
parameter_list|(
name|FreeTime
name|ft
parameter_list|)
block|{
name|iDays
operator|.
name|addAll
argument_list|(
name|ft
operator|.
name|iDays
argument_list|)
expr_stmt|;
name|iStart
operator|=
name|ft
operator|.
name|iStart
expr_stmt|;
name|iLength
operator|=
name|ft
operator|.
name|iLength
expr_stmt|;
block|}
specifier|public
name|void
name|addDay
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|iDays
operator|.
name|add
argument_list|(
name|day
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|String
name|getDaysString
parameter_list|(
name|String
index|[]
name|shortDays
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
if|if
condition|(
name|iDays
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|iDays
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|separator
operator|)
operator|+
name|shortDays
index|[
name|day
index|]
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getDayCode
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|iDays
control|)
name|ret
operator|+=
operator|(
literal|1
operator|<<
operator|(
literal|6
operator|-
name|day
operator|)
operator|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|iStart
return|;
block|}
specifier|public
name|void
name|setStart
parameter_list|(
name|int
name|startSlot
parameter_list|)
block|{
name|iStart
operator|=
name|startSlot
expr_stmt|;
block|}
specifier|public
name|String
name|getStartString
parameter_list|(
name|boolean
name|useAmPm
parameter_list|)
block|{
name|int
name|h
init|=
name|iStart
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|iStart
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|useAmPm
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|String
name|getEndString
parameter_list|(
name|boolean
name|useAmPm
parameter_list|)
block|{
name|int
name|h
init|=
operator|(
name|iStart
operator|+
name|iLength
operator|)
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
operator|(
name|iStart
operator|+
name|iLength
operator|)
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|useAmPm
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|String
index|[]
name|shortDays
parameter_list|,
name|boolean
name|useAmPm
parameter_list|)
block|{
return|return
name|getDaysString
argument_list|(
name|shortDays
argument_list|,
literal|""
argument_list|)
operator|+
literal|" "
operator|+
name|getStartString
argument_list|(
name|useAmPm
argument_list|)
operator|+
literal|" - "
operator|+
name|getEndString
argument_list|(
name|useAmPm
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Free "
operator|+
name|toString
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"R"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"U"
block|}
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|String
name|toAriaString
parameter_list|(
name|String
index|[]
name|longDays
parameter_list|,
name|boolean
name|useAmPm
parameter_list|)
block|{
name|int
name|h
init|=
name|iStart
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|iStart
operator|%
literal|12
operator|)
decl_stmt|;
name|String
name|ret
init|=
name|getDaysString
argument_list|(
name|longDays
argument_list|,
literal|" "
argument_list|)
operator|+
literal|" from "
decl_stmt|;
if|if
condition|(
name|useAmPm
condition|)
name|ret
operator|+=
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
operator|(
name|m
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
name|m
operator|<
literal|10
condition|?
literal|" 0"
else|:
literal|" "
operator|)
operator|+
name|m
operator|)
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|" AM"
else|:
name|h
operator|>=
literal|12
condition|?
literal|" PM"
else|:
literal|" AM"
operator|)
expr_stmt|;
else|else
name|ret
operator|+=
name|h
operator|+
literal|" "
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
expr_stmt|;
name|h
operator|=
operator|(
name|iStart
operator|+
name|iLength
operator|)
operator|/
literal|12
expr_stmt|;
name|m
operator|=
literal|5
operator|*
operator|(
operator|(
name|iStart
operator|+
name|iLength
operator|)
operator|%
literal|12
operator|)
expr_stmt|;
name|ret
operator|+=
literal|" to "
expr_stmt|;
if|if
condition|(
name|useAmPm
condition|)
name|ret
operator|+=
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
operator|(
name|m
operator|==
literal|0
condition|?
literal|""
else|:
operator|(
name|m
operator|<
literal|10
condition|?
literal|" 0"
else|:
literal|" "
operator|)
operator|+
name|m
operator|)
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|" AM"
else|:
name|h
operator|>=
literal|12
condition|?
literal|" PM"
else|:
literal|" AM"
operator|)
expr_stmt|;
else|else
name|ret
operator|+=
name|h
operator|+
literal|" "
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|toString
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|FreeTime
operator|)
condition|)
return|return
literal|false
return|;
name|FreeTime
name|f
init|=
operator|(
name|FreeTime
operator|)
name|o
decl_stmt|;
return|return
name|f
operator|.
name|getStart
argument_list|()
operator|==
name|getStart
argument_list|()
operator|&&
name|f
operator|.
name|getLength
argument_list|()
operator|==
name|getLength
argument_list|()
operator|&&
name|f
operator|.
name|getDayCode
argument_list|()
operator|==
name|getDayCode
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|RequestedCourseStatus
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
name|NEW_REQUEST
block|,
name|ENROLLED
block|,
name|SAVED
block|,
name|OVERRIDE_APPROVED
block|,
name|OVERRIDE_CANCELLED
block|,
name|OVERRIDE_PENDING
block|,
name|OVERRIDE_NEEDED
block|,
name|OVERRIDE_REJECTED
block|,
name|CREDIT_LOW
block|,
name|CREDIT_HIGH
block|,
name|OVERRIDE_NOT_NEEDED
block|,
name|WAITLIST_INACTIVE
block|, 	}
specifier|public
specifier|static
class|class
name|Preference
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|Preference
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
name|Long
name|iId
decl_stmt|;
name|String
name|iText
decl_stmt|;
name|boolean
name|iRequired
decl_stmt|;
specifier|public
name|Preference
parameter_list|()
block|{
block|}
specifier|public
name|Preference
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
name|iText
operator|=
name|text
expr_stmt|;
name|iRequired
operator|=
name|required
expr_stmt|;
block|}
specifier|public
name|Preference
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Preference
parameter_list|(
name|Preference
name|p
parameter_list|)
block|{
name|iId
operator|=
name|p
operator|.
name|iId
expr_stmt|;
name|iText
operator|=
name|p
operator|.
name|iText
expr_stmt|;
name|iRequired
operator|=
name|p
operator|.
name|iRequired
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iText
operator|=
name|text
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|iRequired
return|;
block|}
specifier|public
name|void
name|setRequired
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|iRequired
operator|=
name|required
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getText
argument_list|()
operator|+
operator|(
name|isRequired
argument_list|()
condition|?
literal|"!"
else|:
literal|""
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Preference
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Preference
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|Preference
name|p
parameter_list|)
block|{
return|return
name|getText
argument_list|()
operator|.
name|compareTo
argument_list|(
name|p
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RequestedCourse
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|RequestedCourse
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iCourseId
decl_stmt|;
specifier|private
name|String
name|iCourseName
decl_stmt|;
specifier|private
name|String
name|iCourseTitle
decl_stmt|;
specifier|private
name|Boolean
name|iReadOnly
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iCanDelete
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iCanChangeAlternatives
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iCanChangePriority
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FreeTime
argument_list|>
name|iFreeTime
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Preference
argument_list|>
name|iSelectedIntructionalMethods
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Preference
argument_list|>
name|iSelectedClasses
decl_stmt|;
specifier|private
name|float
index|[]
name|iCredit
init|=
literal|null
decl_stmt|;
specifier|private
name|RequestedCourseStatus
name|iStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iStatusNote
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iOverrideExternalId
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iOverrideTimeStamp
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iRequestorNote
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iRequestorNoteSuggestions
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iRequestId
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iInactive
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iCanWaitList
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iWaitListPosition
init|=
literal|null
decl_stmt|;
specifier|public
name|RequestedCourse
parameter_list|()
block|{
block|}
specifier|public
name|RequestedCourse
parameter_list|(
name|List
argument_list|<
name|FreeTime
argument_list|>
name|freeTime
parameter_list|)
block|{
name|iFreeTime
operator|=
name|freeTime
expr_stmt|;
block|}
specifier|public
name|RequestedCourse
parameter_list|(
name|CourseAssignment
name|course
parameter_list|,
name|boolean
name|showTitle
parameter_list|)
block|{
name|iCourseId
operator|=
name|course
operator|.
name|getCourseId
argument_list|()
expr_stmt|;
name|iCourseName
operator|=
operator|(
name|course
operator|.
name|hasUniqueName
argument_list|()
operator|&&
operator|!
name|showTitle
condition|?
name|course
operator|.
name|getCourseName
argument_list|()
else|:
name|course
operator|.
name|getCourseNameWithTitle
argument_list|()
operator|)
expr_stmt|;
block|}
specifier|public
name|RequestedCourse
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|courseName
parameter_list|)
block|{
name|iCourseId
operator|=
name|courseId
expr_stmt|;
name|iCourseName
operator|=
name|courseName
expr_stmt|;
block|}
specifier|public
name|RequestedCourse
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
name|iCourseId
operator|=
name|rc
operator|.
name|iCourseId
expr_stmt|;
name|iCourseName
operator|=
name|rc
operator|.
name|iCourseName
expr_stmt|;
name|iCourseTitle
operator|=
name|rc
operator|.
name|iCourseTitle
expr_stmt|;
name|iReadOnly
operator|=
name|rc
operator|.
name|iReadOnly
expr_stmt|;
name|iCanDelete
operator|=
name|rc
operator|.
name|iCanDelete
expr_stmt|;
name|iCanChangeAlternatives
operator|=
name|rc
operator|.
name|iCanChangeAlternatives
expr_stmt|;
name|iCanChangePriority
operator|=
name|rc
operator|.
name|iCanChangePriority
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|iFreeTime
operator|!=
literal|null
condition|)
block|{
name|iFreeTime
operator|=
operator|new
name|ArrayList
argument_list|<
name|FreeTime
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|iFreeTime
control|)
name|iFreeTime
operator|.
name|add
argument_list|(
operator|new
name|FreeTime
argument_list|(
name|ft
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|iSelectedIntructionalMethods
operator|!=
literal|null
condition|)
block|{
name|iSelectedIntructionalMethods
operator|=
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|iSelectedIntructionalMethods
control|)
name|iSelectedIntructionalMethods
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|iSelectedClasses
operator|!=
literal|null
condition|)
block|{
name|iSelectedClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|iSelectedClasses
control|)
name|iSelectedClasses
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iCredit
operator|=
name|rc
operator|.
name|iCredit
expr_stmt|;
name|iStatus
operator|=
name|rc
operator|.
name|iStatus
expr_stmt|;
name|iStatusNote
operator|=
name|rc
operator|.
name|iStatusNote
expr_stmt|;
name|iOverrideExternalId
operator|=
name|rc
operator|.
name|iOverrideExternalId
expr_stmt|;
name|iOverrideTimeStamp
operator|=
name|rc
operator|.
name|iOverrideTimeStamp
expr_stmt|;
name|iRequestorNote
operator|=
name|rc
operator|.
name|iRequestorNote
expr_stmt|;
name|iRequestorNoteSuggestions
operator|=
name|rc
operator|.
name|iRequestorNoteSuggestions
expr_stmt|;
name|iRequestId
operator|=
name|rc
operator|.
name|iRequestId
expr_stmt|;
name|iInactive
operator|=
name|rc
operator|.
name|iInactive
expr_stmt|;
name|iCanWaitList
operator|=
name|rc
operator|.
name|iCanWaitList
expr_stmt|;
name|iWaitListPosition
operator|=
name|rc
operator|.
name|iWaitListPosition
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCourse
parameter_list|()
block|{
return|return
name|hasCourseId
argument_list|()
operator|||
name|hasCourseName
argument_list|()
return|;
block|}
specifier|public
name|Long
name|getCourseId
parameter_list|()
block|{
return|return
name|iCourseId
return|;
block|}
specifier|public
name|boolean
name|hasCourseId
parameter_list|()
block|{
return|return
name|iCourseId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCourseId
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iCourseId
operator|=
name|courseId
expr_stmt|;
block|}
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|iCourseName
return|;
block|}
specifier|public
name|boolean
name|hasCourseName
parameter_list|()
block|{
return|return
name|iCourseName
operator|!=
literal|null
operator|&&
operator|!
name|iCourseName
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|iCourseName
operator|=
name|courseName
expr_stmt|;
block|}
specifier|public
name|String
name|getCourseTitle
parameter_list|()
block|{
return|return
name|iCourseTitle
return|;
block|}
specifier|public
name|boolean
name|hasCourseTitle
parameter_list|()
block|{
return|return
name|iCourseTitle
operator|!=
literal|null
operator|&&
operator|!
name|iCourseTitle
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCourseTitle
parameter_list|(
name|String
name|courseTitle
parameter_list|)
block|{
name|iCourseTitle
operator|=
name|courseTitle
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCredit
parameter_list|()
block|{
return|return
name|iCredit
operator|!=
literal|null
return|;
block|}
specifier|public
name|float
index|[]
name|getCredit
parameter_list|()
block|{
return|return
name|iCredit
return|;
block|}
specifier|public
name|Float
name|getCreditMin
parameter_list|()
block|{
return|return
name|iCredit
operator|==
literal|null
condition|?
literal|null
else|:
name|iCredit
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Float
name|getCreditMax
parameter_list|()
block|{
return|return
name|iCredit
operator|==
literal|null
condition|?
literal|null
else|:
name|iCredit
index|[
literal|1
index|]
return|;
block|}
specifier|public
name|void
name|setCredit
parameter_list|(
name|Float
name|minCredit
parameter_list|,
name|Float
name|maxCredit
parameter_list|)
block|{
name|iCredit
operator|=
operator|(
name|minCredit
operator|==
literal|null
operator|||
name|maxCredit
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|float
index|[]
block|{
name|minCredit
block|,
name|maxCredit
block|}
operator|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCredit
parameter_list|(
name|Float
name|credit
parameter_list|)
block|{
name|iCredit
operator|=
operator|(
name|credit
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|float
index|[]
block|{
name|credit
block|,
name|credit
block|}
operator|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCredit
parameter_list|(
name|float
index|[]
name|credit
parameter_list|)
block|{
name|iCredit
operator|=
name|credit
expr_stmt|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|RequestedCourseStatus
name|status
parameter_list|)
block|{
name|iStatus
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|RequestedCourseStatus
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|void
name|setStatusNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|iStatusNote
operator|=
literal|null
expr_stmt|;
else|else
name|iStatusNote
operator|=
name|note
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasStatusNote
parameter_list|()
block|{
return|return
name|iStatusNote
operator|!=
literal|null
operator|&&
operator|!
name|iStatusNote
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iStatusNote
argument_list|)
return|;
block|}
specifier|public
name|String
name|getStatusNote
parameter_list|()
block|{
return|return
name|iStatusNote
return|;
block|}
specifier|public
name|void
name|setRequestorNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|iRequestorNote
operator|=
literal|null
expr_stmt|;
else|else
name|iRequestorNote
operator|=
name|note
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRequestorNote
parameter_list|()
block|{
return|return
name|iRequestorNote
operator|!=
literal|null
operator|&&
operator|!
name|iRequestorNote
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iRequestorNote
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRequestorNote
parameter_list|()
block|{
return|return
name|iRequestorNote
return|;
block|}
specifier|public
name|boolean
name|hasRequestorNoteSuggestions
parameter_list|()
block|{
return|return
name|iRequestorNoteSuggestions
operator|!=
literal|null
operator|&&
operator|!
name|iRequestorNoteSuggestions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequestorNoteSuggestions
parameter_list|()
block|{
return|return
name|iRequestorNoteSuggestions
return|;
block|}
specifier|public
name|void
name|addRequestorNoteSuggestion
parameter_list|(
name|String
name|suggestion
parameter_list|)
block|{
if|if
condition|(
name|iRequestorNoteSuggestions
operator|==
literal|null
condition|)
name|iRequestorNoteSuggestions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iRequestorNoteSuggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRequestId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|iRequestId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRequestId
parameter_list|()
block|{
return|return
name|iRequestId
operator|!=
literal|null
operator|&&
operator|!
name|iRequestId
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iRequestId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRequestId
parameter_list|()
block|{
return|return
name|iRequestId
return|;
block|}
specifier|public
name|void
name|setOverrideExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|iOverrideExternalId
operator|=
name|externalId
expr_stmt|;
block|}
specifier|public
name|String
name|getOverrideExternalId
parameter_list|()
block|{
return|return
name|iOverrideExternalId
return|;
block|}
specifier|public
name|void
name|setOverrideTimeStamp
parameter_list|(
name|Date
name|timeStamp
parameter_list|)
block|{
name|iOverrideTimeStamp
operator|=
name|timeStamp
expr_stmt|;
block|}
specifier|public
name|Date
name|getOverrideTimeStamp
parameter_list|()
block|{
return|return
name|iOverrideTimeStamp
return|;
block|}
specifier|public
name|List
argument_list|<
name|FreeTime
argument_list|>
name|getFreeTime
parameter_list|()
block|{
return|return
name|iFreeTime
return|;
block|}
specifier|public
name|boolean
name|isFreeTime
parameter_list|()
block|{
return|return
name|iFreeTime
operator|!=
literal|null
operator|&&
operator|!
name|iFreeTime
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setFreeTime
parameter_list|(
name|List
argument_list|<
name|FreeTime
argument_list|>
name|freeTime
parameter_list|)
block|{
name|iFreeTime
operator|=
name|freeTime
expr_stmt|;
block|}
specifier|public
name|void
name|addFreeTime
parameter_list|(
name|FreeTime
name|freeTime
parameter_list|)
block|{
if|if
condition|(
name|iFreeTime
operator|==
literal|null
condition|)
name|iFreeTime
operator|=
operator|new
name|ArrayList
argument_list|<
name|FreeTime
argument_list|>
argument_list|()
expr_stmt|;
name|iFreeTime
operator|.
name|add
argument_list|(
name|freeTime
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|iReadOnly
operator|!=
literal|null
operator|&&
name|iReadOnly
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|Boolean
name|readOnly
parameter_list|)
block|{
name|iReadOnly
operator|=
name|readOnly
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanDelete
parameter_list|()
block|{
return|return
name|iCanDelete
operator|==
literal|null
operator|||
name|iCanDelete
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCanDelete
parameter_list|(
name|Boolean
name|canDelete
parameter_list|)
block|{
name|iCanDelete
operator|=
name|canDelete
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanChangePriority
parameter_list|()
block|{
return|return
name|iCanChangePriority
operator|==
literal|null
operator|||
name|iCanChangePriority
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCanChangePriority
parameter_list|(
name|Boolean
name|canChangePriority
parameter_list|)
block|{
name|iCanChangePriority
operator|=
name|canChangePriority
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanChangeAlternatives
parameter_list|()
block|{
return|return
name|iCanChangeAlternatives
operator|==
literal|null
operator|||
name|iCanChangeAlternatives
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCanChangeAlternatives
parameter_list|(
name|Boolean
name|canChangeAlternatives
parameter_list|)
block|{
name|iCanChangeAlternatives
operator|=
name|canChangeAlternatives
expr_stmt|;
block|}
specifier|public
name|boolean
name|isInactive
parameter_list|()
block|{
return|return
name|iInactive
operator|!=
literal|null
operator|&&
name|iInactive
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setInactive
parameter_list|(
name|Boolean
name|inactive
parameter_list|)
block|{
name|iInactive
operator|=
name|inactive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanWaitList
parameter_list|()
block|{
return|return
name|iCanWaitList
operator|!=
literal|null
operator|&&
name|iCanWaitList
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCanWaitList
parameter_list|(
name|Boolean
name|canWaitList
parameter_list|)
block|{
name|iCanWaitList
operator|=
name|canWaitList
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanNoSub
parameter_list|()
block|{
return|return
name|isCourse
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|isCourse
argument_list|()
operator|&&
operator|!
name|isFreeTime
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasSelectedIntructionalMethods
parameter_list|()
block|{
return|return
name|iSelectedIntructionalMethods
operator|!=
literal|null
operator|&&
operator|!
name|iSelectedIntructionalMethods
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Preference
argument_list|>
name|getSelectedIntructionalMethods
parameter_list|()
block|{
return|return
name|iSelectedIntructionalMethods
return|;
block|}
specifier|public
name|void
name|setSelectedIntructionalMethod
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|required
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|setSelectedIntructionalMethod
argument_list|(
operator|new
name|Preference
argument_list|(
name|id
argument_list|,
name|text
argument_list|,
name|required
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectedIntructionalMethod
parameter_list|(
name|Preference
name|p
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|iSelectedIntructionalMethods
operator|==
literal|null
condition|)
name|iSelectedIntructionalMethods
operator|=
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
expr_stmt|;
name|iSelectedIntructionalMethods
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
condition|)
name|iSelectedIntructionalMethods
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectedIntructionalMethod
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|iSelectedIntructionalMethods
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|iSelectedIntructionalMethods
operator|.
name|contains
argument_list|(
operator|new
name|Preference
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Preference
name|getIntructionalMethodSelection
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|iSelectedIntructionalMethods
operator|==
literal|null
operator|||
name|id
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Preference
name|p
range|:
name|iSelectedIntructionalMethods
control|)
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|p
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isSelectedIntructionalMethod
parameter_list|(
name|Long
name|id
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
if|if
condition|(
name|iSelectedIntructionalMethods
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Preference
name|p
range|:
name|iSelectedIntructionalMethods
control|)
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
name|p
operator|.
name|isRequired
argument_list|()
operator|==
name|required
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSelectedIntructionalMethod
parameter_list|(
name|Preference
name|p
parameter_list|)
block|{
return|return
name|isSelectedIntructionalMethod
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|,
name|p
operator|.
name|isRequired
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrSelectedIntructionalMethods
parameter_list|()
block|{
return|return
operator|(
name|iSelectedIntructionalMethods
operator|==
literal|null
condition|?
literal|0
else|:
name|iSelectedIntructionalMethods
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|sameSelectedIntructionalMethods
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
if|if
condition|(
name|getNrSelectedIntructionalMethods
argument_list|()
operator|!=
name|rc
operator|.
name|getNrSelectedIntructionalMethods
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
block|{
for|for
control|(
name|Preference
name|p
range|:
name|getSelectedIntructionalMethods
argument_list|()
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isSelectedIntructionalMethod
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasSelectedClasses
parameter_list|()
block|{
return|return
name|iSelectedClasses
operator|!=
literal|null
operator|&&
operator|!
name|iSelectedClasses
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Preference
argument_list|>
name|getSelectedClasses
parameter_list|()
block|{
return|return
name|iSelectedClasses
return|;
block|}
specifier|public
name|void
name|setSelectedClasses
parameter_list|(
name|Set
argument_list|<
name|Preference
argument_list|>
name|classes
parameter_list|)
block|{
if|if
condition|(
name|iSelectedClasses
operator|==
literal|null
condition|)
name|iSelectedClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
expr_stmt|;
else|else
name|iSelectedClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|classes
operator|!=
literal|null
condition|)
name|iSelectedClasses
operator|.
name|addAll
argument_list|(
name|classes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectedClass
parameter_list|(
name|Long
name|id
parameter_list|,
name|String
name|text
parameter_list|,
name|boolean
name|required
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|setSelectedClass
argument_list|(
operator|new
name|Preference
argument_list|(
name|id
argument_list|,
name|text
argument_list|,
name|required
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectedClass
parameter_list|(
name|Preference
name|p
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
name|iSelectedClasses
operator|==
literal|null
condition|)
name|iSelectedClasses
operator|=
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
expr_stmt|;
name|iSelectedClasses
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
condition|)
name|iSelectedClasses
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectedClass
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|iSelectedClasses
operator|==
literal|null
operator|||
name|id
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|iSelectedClasses
operator|.
name|contains
argument_list|(
operator|new
name|Preference
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Preference
name|getClassSelection
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|iSelectedClasses
operator|==
literal|null
operator|||
name|id
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Preference
name|p
range|:
name|iSelectedClasses
control|)
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|p
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isSelectedClass
parameter_list|(
name|Long
name|id
parameter_list|,
name|boolean
name|required
parameter_list|)
block|{
if|if
condition|(
name|iSelectedClasses
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Preference
name|p
range|:
name|iSelectedClasses
control|)
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
name|p
operator|.
name|isRequired
argument_list|()
operator|==
name|required
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isSelectedClass
parameter_list|(
name|Preference
name|p
parameter_list|)
block|{
return|return
name|isSelectedClass
argument_list|(
name|p
operator|.
name|getId
argument_list|()
argument_list|,
name|p
operator|.
name|isRequired
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrSelectedClasses
parameter_list|()
block|{
return|return
operator|(
name|iSelectedClasses
operator|==
literal|null
condition|?
literal|0
else|:
name|iSelectedClasses
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|sameSelectedClasses
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
if|if
condition|(
name|getNrSelectedClasses
argument_list|()
operator|!=
name|rc
operator|.
name|getNrSelectedClasses
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasSelectedClasses
argument_list|()
condition|)
block|{
for|for
control|(
name|Preference
name|p
range|:
name|getSelectedClasses
argument_list|()
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isSelectedClass
argument_list|(
name|p
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|clearSelection
parameter_list|()
block|{
if|if
condition|(
name|iSelectedClasses
operator|!=
literal|null
condition|)
name|iSelectedClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSelectedIntructionalMethods
operator|!=
literal|null
condition|)
name|iSelectedIntructionalMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Preference
argument_list|>
name|getRequiredPreferences
parameter_list|()
block|{
name|List
argument_list|<
name|Preference
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Preference
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
for|for
control|(
name|Preference
name|p
range|:
name|getSelectedIntructionalMethods
argument_list|()
control|)
if|if
condition|(
name|p
operator|.
name|isRequired
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasSelectedClasses
argument_list|()
condition|)
for|for
control|(
name|Preference
name|p
range|:
name|getSelectedClasses
argument_list|()
control|)
if|if
condition|(
name|p
operator|.
name|isRequired
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getWaitListPosition
parameter_list|()
block|{
return|return
name|iWaitListPosition
return|;
block|}
specifier|public
name|void
name|setWaitListPosition
parameter_list|(
name|String
name|wlPosition
parameter_list|)
block|{
name|iWaitListPosition
operator|=
name|wlPosition
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWaitListPosition
parameter_list|()
block|{
return|return
name|iWaitListPosition
operator|!=
literal|null
operator|&&
operator|!
name|iWaitListPosition
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|isCourse
argument_list|()
condition|?
name|getCourseName
argument_list|()
else|:
name|toString
argument_list|()
operator|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|isCourse
argument_list|()
condition|)
block|{
return|return
name|getCourseName
argument_list|()
operator|+
operator|(
name|hasSelectedIntructionalMethods
argument_list|()
condition|?
literal|" method:"
operator|+
name|getSelectedIntructionalMethods
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasSelectedClasses
argument_list|()
condition|?
literal|" section:"
operator|+
name|getSelectedClasses
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|isReadOnly
argument_list|()
condition|?
literal|" [S]"
else|:
literal|""
operator|)
operator|+
operator|(
name|hasCourseId
argument_list|()
condition|?
literal|"[i]"
else|:
literal|""
operator|)
return|;
block|}
if|if
condition|(
name|isFreeTime
argument_list|()
condition|)
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|getFreeTime
argument_list|()
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|", "
operator|)
operator|+
name|ft
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
return|return
literal|"N/A"
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|StudentSectioningConstants
name|CONSTANTS
parameter_list|)
block|{
if|if
condition|(
name|isCourse
argument_list|()
condition|)
return|return
name|getCourseName
argument_list|()
return|;
if|if
condition|(
name|isFreeTime
argument_list|()
condition|)
block|{
name|String
name|display
init|=
literal|""
decl_stmt|;
name|String
name|lastDays
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
range|:
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
name|display
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|display
operator|+=
literal|", "
expr_stmt|;
name|String
name|days
init|=
name|ft
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|getDays
argument_list|()
operator|.
name|size
argument_list|()
operator|==
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
operator|&&
operator|!
name|ft
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
operator|&&
operator|!
name|ft
operator|.
name|getDays
argument_list|()
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
condition|)
name|days
operator|=
literal|""
expr_stmt|;
name|display
operator|+=
operator|(
name|days
operator|.
name|isEmpty
argument_list|()
operator|||
name|days
operator|.
name|equals
argument_list|(
name|lastDays
argument_list|)
condition|?
literal|""
else|:
name|days
operator|+
literal|" "
operator|)
operator|+
name|ft
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|ft
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
name|lastDays
operator|=
name|days
expr_stmt|;
block|}
return|return
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|display
return|;
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|toAriaString
parameter_list|(
name|StudentSectioningConstants
name|CONSTANTS
parameter_list|)
block|{
if|if
condition|(
name|isCourse
argument_list|()
condition|)
return|return
name|getCourseName
argument_list|()
return|;
if|if
condition|(
name|isFreeTime
argument_list|()
condition|)
block|{
name|String
name|status
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|getFreeTime
argument_list|()
control|)
name|status
operator|+=
operator|(
name|status
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|)
operator|+
name|ft
operator|.
name|toAriaString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|status
return|;
block|}
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
return|return
operator|(
operator|(
name|String
operator|)
name|o
operator|)
operator|.
name|equalsIgnoreCase
argument_list|(
name|getCourseName
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|o
operator|instanceof
name|Long
condition|)
return|return
operator|(
operator|(
name|Long
operator|)
name|o
operator|)
operator|.
name|equals
argument_list|(
name|getCourseId
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|o
operator|instanceof
name|RequestedCourse
condition|)
block|{
name|RequestedCourse
name|c
init|=
operator|(
name|RequestedCourse
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|hasCourseId
argument_list|()
condition|)
return|return
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
if|else if
condition|(
name|c
operator|.
name|hasCourseName
argument_list|()
operator|&&
name|hasCourseName
argument_list|()
condition|)
return|return
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
return|;
if|else if
condition|(
name|c
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|isFreeTime
argument_list|()
condition|)
return|return
name|c
operator|.
name|getFreeTime
argument_list|()
operator|.
name|equals
argument_list|(
name|getFreeTime
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|CourseAssignment
condition|)
block|{
name|CourseAssignment
name|c
init|=
operator|(
name|CourseAssignment
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|hasCourseId
argument_list|()
condition|)
return|return
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
if|else if
condition|(
name|hasCourseName
argument_list|()
condition|)
return|return
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|||
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|DegreeCourseInterface
condition|)
block|{
name|DegreeCourseInterface
name|c
init|=
operator|(
name|DegreeCourseInterface
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|hasCourseId
argument_list|()
operator|&&
name|c
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getCourseId
argument_list|()
argument_list|)
return|;
if|else if
condition|(
name|hasCourseName
argument_list|()
condition|)
return|return
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|||
name|getCourseName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|c
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RequestedCourse
name|o
parameter_list|)
block|{
return|return
name|toString
argument_list|()
operator|.
name|compareToIgnoreCase
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|boolean
name|hasConfirmations
parameter_list|()
block|{
return|return
name|iConfirmations
operator|!=
literal|null
operator|&&
operator|!
name|iConfirmations
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addConfirmation
parameter_list|(
name|CourseMessage
name|message
parameter_list|)
block|{
if|if
condition|(
name|iConfirmations
operator|!=
literal|null
condition|)
name|iConfirmations
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseMessage
argument_list|>
argument_list|()
expr_stmt|;
name|iConfirmations
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|CourseMessage
argument_list|>
name|getConfirmations
parameter_list|()
block|{
return|return
name|iConfirmations
return|;
block|}
specifier|public
name|void
name|setConfirmations
parameter_list|(
name|Collection
argument_list|<
name|CourseMessage
argument_list|>
name|confirmations
parameter_list|)
block|{
name|iConfirmations
operator|=
operator|(
name|confirmations
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|CourseMessage
argument_list|>
argument_list|(
name|confirmations
argument_list|)
operator|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|CourseMessage
argument_list|>
name|getConfirmations
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|List
argument_list|<
name|CourseMessage
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseMessage
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasConfirmations
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getConfirmations
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getConfirmation
parameter_list|(
name|String
name|courseName
parameter_list|,
name|String
name|delim
parameter_list|,
name|String
modifier|...
name|exclude
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasConfirmations
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasConfirmations
argument_list|()
condition|)
name|m
label|:
for|for
control|(
name|CourseMessage
name|m
range|:
name|getConfirmations
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|e
range|:
name|exclude
control|)
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue
name|m
continue|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
name|delim
operator|+
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|isError
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasConfirmations
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasConfirmations
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getConfirmations
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
specifier|static
class|class
name|Request
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|iRequestedCourse
init|=
literal|null
decl_stmt|;
specifier|private
name|Boolean
name|iWaitList
init|=
literal|false
decl_stmt|;
specifier|private
name|Boolean
name|iNoSub
init|=
literal|false
decl_stmt|;
specifier|private
name|Integer
name|iCritical
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iTimeStamp
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iWaitListedTimeStamp
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iAdvisorCredit
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iAdvisorNote
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iWaitListSwapWithCourseOfferingId
init|=
literal|null
decl_stmt|;
specifier|public
name|Request
parameter_list|()
block|{
block|}
specifier|public
name|Request
parameter_list|(
name|Request
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|iRequestedCourse
operator|!=
literal|null
condition|)
block|{
name|iRequestedCourse
operator|=
operator|new
name|ArrayList
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|iRequestedCourse
control|)
name|iRequestedCourse
operator|.
name|add
argument_list|(
operator|new
name|RequestedCourse
argument_list|(
name|rc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iWaitList
operator|=
name|request
operator|.
name|iWaitList
expr_stmt|;
name|iNoSub
operator|=
name|request
operator|.
name|iNoSub
expr_stmt|;
name|iCritical
operator|=
name|request
operator|.
name|iCritical
expr_stmt|;
name|iTimeStamp
operator|=
name|request
operator|.
name|iTimeStamp
expr_stmt|;
name|iWaitListedTimeStamp
operator|=
name|request
operator|.
name|iWaitListedTimeStamp
expr_stmt|;
name|iFilter
operator|=
name|request
operator|.
name|iFilter
expr_stmt|;
name|iAdvisorCredit
operator|=
name|request
operator|.
name|iAdvisorCredit
expr_stmt|;
name|iAdvisorNote
operator|=
name|request
operator|.
name|iAdvisorNote
expr_stmt|;
name|iWaitListSwapWithCourseOfferingId
operator|=
name|request
operator|.
name|iWaitListSwapWithCourseOfferingId
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|RequestedCourse
argument_list|>
name|getRequestedCourse
parameter_list|()
block|{
return|return
name|iRequestedCourse
return|;
block|}
specifier|public
name|int
name|countRequestedCourses
parameter_list|()
block|{
return|return
name|iRequestedCourse
operator|==
literal|null
condition|?
literal|0
else|:
name|iRequestedCourse
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|RequestedCourse
name|getRequestedCourse
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|!=
literal|null
operator|&&
name|index
operator|<
name|iRequestedCourse
operator|.
name|size
argument_list|()
condition|)
return|return
name|iRequestedCourse
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|RequestedCourse
name|getRequestedCourse
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
name|rc
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRequestedCourse
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|iRequestedCourse
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|hasRequestedCourse
parameter_list|()
block|{
return|return
name|iRequestedCourse
operator|!=
literal|null
operator|&&
operator|!
name|iRequestedCourse
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|//&& !hasRequestedFreeTime(); }
specifier|public
name|void
name|addRequestedCourse
parameter_list|(
name|RequestedCourse
name|requestedCourse
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
name|iRequestedCourse
operator|=
operator|new
name|ArrayList
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
expr_stmt|;
name|iRequestedCourse
operator|.
name|add
argument_list|(
name|requestedCourse
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRequestedCourse
parameter_list|(
name|CourseAssignment
name|course
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
name|rc
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasRequestedCourse
parameter_list|(
name|RequestedCourse
name|course
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
name|rc
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasRequestedCourseActive
parameter_list|(
name|RequestedCourse
name|course
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
name|rc
operator|.
name|equals
argument_list|(
name|course
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|RequestedCourse
name|update
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRequestedCourse
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RequestedCourse
name|old
init|=
name|iRequestedCourse
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|equals
argument_list|(
name|old
argument_list|)
condition|)
block|{
name|iRequestedCourse
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|rc
argument_list|)
expr_stmt|;
return|return
name|old
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/* 		public List<FreeTime> getRequestedFreeTime() { 			if (iRequestedCourse != null) 				for (RequestedCourse course: iRequestedCourse) 					if (course.isFreeTime()) return course.getFreeTime(); 			return null; 		} 		public boolean hasRequestedFreeTime() { return getRequestedFreeTime() != null; } 		*/
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
operator|!
name|hasRequestedCourse
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
name|rc
operator|.
name|isReadOnly
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCanDelete
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isCanDelete
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isCanChangePriority
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isCanChangePriority
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isCanChangeAlternatives
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|true
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isCanChangeAlternatives
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasWaitList
parameter_list|()
block|{
return|return
name|iWaitList
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isWaitList
parameter_list|()
block|{
return|return
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|Boolean
name|waitList
parameter_list|)
block|{
name|iWaitList
operator|=
name|waitList
expr_stmt|;
block|}
specifier|public
name|boolean
name|isWaitListOrNoSub
parameter_list|(
name|WaitListMode
name|wlMode
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|advisorWaitListedCourseIds
parameter_list|)
block|{
if|if
condition|(
name|wlMode
operator|==
name|WaitListMode
operator|.
name|WaitList
operator|&&
name|isCanWaitList
argument_list|()
condition|)
block|{
if|if
condition|(
name|iWaitList
operator|!=
literal|null
operator|&&
name|iWaitList
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|wlMode
operator|==
name|WaitListMode
operator|.
name|NoSubs
condition|)
block|{
if|if
condition|(
name|iNoSub
operator|!=
literal|null
operator|&&
name|iNoSub
operator|.
name|booleanValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
if|if
condition|(
name|advisorWaitListedCourseIds
operator|!=
literal|null
operator|&&
name|hasRequestedCourse
argument_list|()
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|advisorWaitListedCourseIds
operator|.
name|contains
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isCanWaitList
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isCanWaitList
argument_list|()
condition|)
return|return
literal|true
return|;
break|break;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasNoSub
parameter_list|()
block|{
return|return
name|iNoSub
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isNoSub
parameter_list|()
block|{
return|return
name|iNoSub
operator|!=
literal|null
operator|&&
name|iNoSub
operator|.
name|booleanValue
argument_list|()
return|;
block|}
specifier|public
name|void
name|setNoSub
parameter_list|(
name|Boolean
name|noSub
parameter_list|)
block|{
name|iNoSub
operator|=
name|noSub
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanNoSub
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
return|return
literal|true
return|;
break|break;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isWaitlistOrNoSub
parameter_list|(
name|WaitListMode
name|wlMode
parameter_list|)
block|{
if|if
condition|(
name|wlMode
operator|==
name|WaitListMode
operator|.
name|WaitList
condition|)
return|return
name|isWaitList
argument_list|()
return|;
if|if
condition|(
name|wlMode
operator|==
name|WaitListMode
operator|.
name|NoSubs
condition|)
return|return
name|isNoSub
argument_list|()
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasWaitListSwapWithCourseOfferingId
parameter_list|()
block|{
return|return
name|iWaitListSwapWithCourseOfferingId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setWaitListSwapWithCourseOfferingId
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iWaitListSwapWithCourseOfferingId
operator|=
name|courseId
expr_stmt|;
block|}
specifier|public
name|Long
name|getWaitListSwapWithCourseOfferingId
parameter_list|()
block|{
return|return
name|iWaitListSwapWithCourseOfferingId
return|;
block|}
specifier|public
name|boolean
name|hasCritical
parameter_list|()
block|{
return|return
name|iCritical
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isCritical
parameter_list|()
block|{
return|return
name|iCritical
operator|!=
literal|null
operator|&&
name|iCritical
operator|.
name|intValue
argument_list|()
operator|==
literal|1
return|;
block|}
specifier|public
name|boolean
name|isImportant
parameter_list|()
block|{
return|return
name|iCritical
operator|!=
literal|null
operator|&&
name|iCritical
operator|.
name|intValue
argument_list|()
operator|==
literal|2
return|;
block|}
specifier|public
name|Integer
name|getCritical
parameter_list|()
block|{
return|return
name|iCritical
return|;
block|}
specifier|public
name|void
name|setCritical
parameter_list|(
name|Integer
name|critical
parameter_list|)
block|{
name|iCritical
operator|=
name|critical
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTimeStamp
parameter_list|()
block|{
return|return
name|iTimeStamp
operator|!=
literal|null
return|;
block|}
specifier|public
name|Date
name|getTimeStamp
parameter_list|()
block|{
return|return
name|iTimeStamp
return|;
block|}
specifier|public
name|void
name|setTimeStamp
parameter_list|(
name|Date
name|ts
parameter_list|)
block|{
name|iTimeStamp
operator|=
name|ts
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWaitListedTimeStamp
parameter_list|()
block|{
return|return
name|iWaitListedTimeStamp
operator|!=
literal|null
return|;
block|}
specifier|public
name|Date
name|getWaitListedTimeStamp
parameter_list|()
block|{
return|return
name|iWaitListedTimeStamp
return|;
block|}
specifier|public
name|void
name|setWaitListedTimeStamp
parameter_list|(
name|Date
name|ts
parameter_list|)
block|{
name|iWaitListedTimeStamp
operator|=
name|ts
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasFilter
parameter_list|()
block|{
return|return
name|iFilter
operator|!=
literal|null
operator|&&
operator|!
name|iFilter
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|iFilter
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasAdvisorCredit
parameter_list|()
block|{
return|return
name|iAdvisorCredit
operator|!=
literal|null
operator|&&
operator|!
name|iAdvisorCredit
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAdvisorCredit
parameter_list|()
block|{
return|return
name|iAdvisorCredit
return|;
block|}
specifier|public
name|void
name|setAdvisorCredit
parameter_list|(
name|String
name|credit
parameter_list|)
block|{
name|iAdvisorCredit
operator|=
name|credit
expr_stmt|;
block|}
specifier|public
name|float
name|getAdvisorCreditMin
parameter_list|()
block|{
if|if
condition|(
name|iAdvisorCredit
operator|==
literal|null
operator|||
name|iAdvisorCredit
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0f
return|;
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|iAdvisorCredit
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|iAdvisorCredit
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|iAdvisorCredit
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iAdvisorCredit
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|0f
return|;
block|}
specifier|public
name|float
name|getAdvisorCreditMax
parameter_list|()
block|{
if|if
condition|(
name|iAdvisorCredit
operator|==
literal|null
operator|||
name|iAdvisorCredit
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0f
return|;
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|iAdvisorCredit
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|iAdvisorCredit
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|iAdvisorCredit
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|iAdvisorCredit
operator|.
name|indexOf
argument_list|(
literal|'-'
argument_list|)
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
return|return
literal|0f
return|;
block|}
specifier|public
name|boolean
name|hasAdvisorNote
parameter_list|()
block|{
return|return
name|iAdvisorNote
operator|!=
literal|null
operator|&&
operator|!
name|iAdvisorNote
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getAdvisorNote
parameter_list|()
block|{
return|return
name|iAdvisorNote
return|;
block|}
specifier|public
name|void
name|setAdvisorNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|iAdvisorNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|void
name|addAdvisorNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
if|if
condition|(
name|iAdvisorNote
operator|==
literal|null
condition|)
name|iAdvisorNote
operator|=
name|note
expr_stmt|;
if|else if
condition|(
operator|!
name|iAdvisorNote
operator|.
name|contains
argument_list|(
name|note
argument_list|)
condition|)
name|iAdvisorNote
operator|+=
literal|"\n"
operator|+
name|note
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Long
argument_list|>
name|getCourseIds
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|iRequestedCourse
operator|==
literal|null
condition|?
literal|0
else|:
name|iRequestedCourse
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iRequestedCourse
operator|!=
literal|null
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
condition|)
name|ids
operator|.
name|add
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ids
return|;
block|}
specifier|public
name|boolean
name|isInactive
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// all requests are inactive -> inactive
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
block|{
if|if
condition|(
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isActive
parameter_list|()
block|{
if|if
condition|(
name|iRequestedCourse
operator|==
literal|null
condition|)
return|return
literal|false
return|;
comment|// one request is active (not inactive) -> active
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequestedCourse
control|)
block|{
if|if
condition|(
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasRequestedCourse
argument_list|()
condition|?
name|iRequestedCourse
operator|.
name|toString
argument_list|()
else|:
literal|"-"
operator|)
operator|+
operator|(
name|isWaitList
argument_list|()
condition|?
literal|" (w)"
else|:
literal|""
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Request
operator|)
condition|)
return|return
literal|false
return|;
name|Request
name|r
init|=
operator|(
name|Request
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|isWaitList
argument_list|()
operator|!=
name|r
operator|.
name|isWaitList
argument_list|()
operator|||
name|isNoSub
argument_list|()
operator|!=
name|r
operator|.
name|isNoSub
argument_list|()
operator|||
name|countRequestedCourses
argument_list|()
operator|!=
name|r
operator|.
name|countRequestedCourses
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countRequestedCourses
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RequestedCourse
name|c1
init|=
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RequestedCourse
name|c2
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
operator|||
operator|!
name|c1
operator|.
name|sameSelectedClasses
argument_list|(
name|c2
argument_list|)
operator|||
operator|!
name|c1
operator|.
name|sameSelectedIntructionalMethods
argument_list|(
name|c2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|hasAdvisorNote
argument_list|()
condition|?
name|getAdvisorNote
argument_list|()
else|:
literal|""
operator|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|hasAdvisorNote
argument_list|()
condition|?
name|r
operator|.
name|getAdvisorNote
argument_list|()
else|:
literal|""
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|hasAdvisorCredit
argument_list|()
condition|?
name|getAdvisorCredit
argument_list|()
else|:
literal|""
operator|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|hasAdvisorCredit
argument_list|()
condition|?
name|r
operator|.
name|getAdvisorCredit
argument_list|()
else|:
literal|""
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|hasWaitListSwapWithCourseOfferingId
argument_list|()
condition|?
name|getWaitListSwapWithCourseOfferingId
argument_list|()
else|:
name|Long
operator|.
name|valueOf
argument_list|(
literal|0l
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|hasWaitListSwapWithCourseOfferingId
argument_list|()
condition|?
name|r
operator|.
name|getWaitListSwapWithCourseOfferingId
argument_list|()
else|:
name|Long
operator|.
name|valueOf
argument_list|(
literal|0l
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|sameCourses
parameter_list|(
name|Request
name|r
parameter_list|)
block|{
if|if
condition|(
name|countRequestedCourses
argument_list|()
operator|!=
name|r
operator|.
name|countRequestedCourses
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|countRequestedCourses
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RequestedCourse
name|c1
init|=
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|RequestedCourse
name|c2
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
operator|||
operator|!
name|c1
operator|.
name|sameSelectedClasses
argument_list|(
name|c2
argument_list|)
operator|||
operator|!
name|c1
operator|.
name|sameSelectedIntructionalMethods
argument_list|(
name|c2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|hasWaitListSwapWithCourseOfferingId
argument_list|()
condition|?
name|getWaitListSwapWithCourseOfferingId
argument_list|()
else|:
name|Long
operator|.
name|valueOf
argument_list|(
literal|0l
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
name|r
operator|.
name|hasWaitListSwapWithCourseOfferingId
argument_list|()
condition|?
name|r
operator|.
name|getWaitListSwapWithCourseOfferingId
argument_list|()
else|:
name|Long
operator|.
name|valueOf
argument_list|(
literal|0l
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|"CourseRequests(student = "
operator|+
name|getStudentId
argument_list|()
operator|+
literal|", session = "
operator|+
name|getSessionId
argument_list|()
operator|+
literal|", requests = {"
decl_stmt|;
name|int
name|idx
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iCourses
control|)
name|ret
operator|+=
literal|"\n   "
operator|+
operator|(
name|idx
operator|++
operator|)
operator|+
literal|". "
operator|+
name|r
expr_stmt|;
name|idx
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iAlternatives
control|)
name|ret
operator|+=
literal|"\n  A"
operator|+
operator|(
name|idx
operator|++
operator|)
operator|+
literal|". "
operator|+
name|r
expr_stmt|;
return|return
name|ret
operator|+
literal|"\n})"
return|;
block|}
specifier|public
specifier|static
class|class
name|RequestPriority
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|RequestPriority
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|boolean
name|iAlternative
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|iPriority
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iChoice
init|=
literal|0
decl_stmt|;
specifier|private
name|CourseRequestInterface
operator|.
name|Request
name|iRequest
decl_stmt|;
name|RequestPriority
parameter_list|(
name|boolean
name|alternative
parameter_list|,
name|int
name|priority
parameter_list|,
name|int
name|choice
parameter_list|,
name|CourseRequestInterface
operator|.
name|Request
name|request
parameter_list|)
block|{
name|iAlternative
operator|=
name|alternative
expr_stmt|;
name|iPriority
operator|=
name|priority
expr_stmt|;
name|iChoice
operator|=
name|choice
expr_stmt|;
name|iRequest
operator|=
name|request
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAlternative
parameter_list|()
block|{
return|return
name|iAlternative
return|;
block|}
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|iPriority
return|;
block|}
specifier|public
name|int
name|getChoice
parameter_list|()
block|{
return|return
name|iChoice
return|;
block|}
specifier|public
name|CourseRequestInterface
operator|.
name|Request
name|getRequest
parameter_list|()
block|{
return|return
name|iRequest
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|iAlternative
condition|)
block|{
switch|switch
condition|(
name|iChoice
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|"Alt "
operator|+
name|iPriority
operator|+
literal|"."
return|;
case|case
literal|1
case|:
return|return
literal|"Alt "
operator|+
name|iPriority
operator|+
literal|"A."
return|;
default|default:
return|return
literal|"Alt "
operator|+
name|iPriority
operator|+
literal|"B."
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|iChoice
condition|)
block|{
case|case
literal|0
case|:
return|return
name|iPriority
operator|+
literal|"."
return|;
case|case
literal|1
case|:
return|return
name|iPriority
operator|+
literal|"A."
return|;
default|default:
return|return
name|iPriority
operator|+
literal|"B."
return|;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|StudentSectioningMessages
name|MESSAGES
parameter_list|)
block|{
if|if
condition|(
name|iAlternative
condition|)
block|{
switch|switch
condition|(
name|iChoice
condition|)
block|{
case|case
literal|0
case|:
return|return
name|MESSAGES
operator|.
name|degreeRequestedAlternative
argument_list|(
name|iPriority
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|MESSAGES
operator|.
name|degreeRequestedAlternativeFirstAlt
argument_list|(
name|iPriority
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|MESSAGES
operator|.
name|degreeRequestedAlternativeSecondAlt
argument_list|(
name|iPriority
argument_list|)
return|;
default|default:
return|return
name|MESSAGES
operator|.
name|degreeRequestedCourseAlt
argument_list|(
name|iPriority
argument_list|,
operator|(
name|iChoice
operator|>
literal|26
condition|?
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
operator|(
name|iChoice
operator|-
literal|27
operator|)
operator|/
literal|26
operator|)
operator|+
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
operator|(
name|iChoice
operator|-
literal|1
operator|)
operator|%
literal|26
operator|)
else|:
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
operator|(
name|iChoice
operator|-
literal|1
operator|)
operator|%
literal|26
operator|)
operator|)
argument_list|)
return|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|iChoice
condition|)
block|{
case|case
literal|0
case|:
return|return
name|MESSAGES
operator|.
name|degreeRequestedCourse
argument_list|(
name|iPriority
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|MESSAGES
operator|.
name|degreeRequestedCourseFirstAlt
argument_list|(
name|iPriority
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|MESSAGES
operator|.
name|degreeRequestedCourseSecondAlt
argument_list|(
name|iPriority
argument_list|)
return|;
default|default:
return|return
name|MESSAGES
operator|.
name|degreeRequestedCourseAlt
argument_list|(
name|iPriority
argument_list|,
operator|(
name|iChoice
operator|>
literal|26
condition|?
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
operator|(
name|iChoice
operator|-
literal|27
operator|)
operator|/
literal|26
operator|)
operator|+
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
operator|(
name|iChoice
operator|-
literal|1
operator|)
operator|%
literal|26
operator|)
else|:
literal|""
operator|+
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
operator|(
name|iChoice
operator|-
literal|1
operator|)
operator|%
literal|26
operator|)
operator|)
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|RequestPriority
name|p
parameter_list|)
block|{
if|if
condition|(
name|isAlternative
argument_list|()
operator|!=
name|p
operator|.
name|isAlternative
argument_list|()
condition|)
return|return
name|isAlternative
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
return|;
if|if
condition|(
name|getPriority
argument_list|()
operator|!=
name|p
operator|.
name|getPriority
argument_list|()
condition|)
return|return
operator|(
name|getPriority
argument_list|()
operator|<
name|p
operator|.
name|getPriority
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|getChoice
argument_list|()
operator|!=
name|p
operator|.
name|getChoice
argument_list|()
condition|)
return|return
operator|(
name|getChoice
argument_list|()
operator|<
name|p
operator|.
name|getChoice
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
return|return
literal|0
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CheckCoursesResponse
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|CourseMessage
argument_list|>
name|iMessages
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseMessage
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
index|[]
argument_list|>
name|iConfirmationSetup
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iErrorMessage
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCreditWarning
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCreditNote
init|=
literal|null
decl_stmt|;
specifier|private
name|Float
name|iMaxCreditNeeded
init|=
literal|null
decl_stmt|;
specifier|private
name|RequestedCourseStatus
name|iMaxCreditOverrideStatus
init|=
literal|null
decl_stmt|;
specifier|public
name|CheckCoursesResponse
parameter_list|()
block|{
block|}
specifier|public
name|CheckCoursesResponse
parameter_list|(
name|Collection
argument_list|<
name|CourseMessage
argument_list|>
name|messages
parameter_list|)
block|{
if|if
condition|(
name|messages
operator|!=
literal|null
operator|&&
operator|!
name|messages
operator|.
name|isEmpty
argument_list|()
condition|)
name|iMessages
operator|=
operator|new
name|TreeSet
argument_list|<
name|CourseMessage
argument_list|>
argument_list|(
name|messages
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasMessages
parameter_list|()
block|{
return|return
name|iMessages
operator|!=
literal|null
operator|&&
operator|!
name|iMessages
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|Set
argument_list|<
name|CourseMessage
argument_list|>
name|getMessages
parameter_list|()
block|{
return|return
name|iMessages
return|;
block|}
specifier|public
name|void
name|addMessage
parameter_list|(
name|CourseMessage
name|message
parameter_list|)
block|{
name|iMessages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseMessage
name|addMessage
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|course
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|Integer
name|confirm
parameter_list|,
name|int
name|order
parameter_list|)
block|{
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
name|confirm
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
name|CourseMessage
name|addMessage
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|course
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|Integer
name|confirm
parameter_list|)
block|{
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
name|confirm
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
name|CourseMessage
name|addError
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|course
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
name|CourseMessage
name|addConfirmation
parameter_list|(
name|String
name|message
parameter_list|,
name|Integer
name|confirm
parameter_list|,
name|Integer
name|order
parameter_list|)
block|{
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCode
argument_list|(
literal|"CONF_MSG"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
name|confirm
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
name|CourseMessage
name|addCheckBox
parameter_list|(
name|String
name|message
parameter_list|,
name|Integer
name|confirm
parameter_list|,
name|Integer
name|order
parameter_list|)
block|{
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCode
argument_list|(
literal|"CHECK_BOX"
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
name|confirm
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|addMessage
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
specifier|public
name|boolean
name|isError
parameter_list|()
block|{
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isOK
parameter_list|()
block|{
return|return
operator|!
name|hasMessages
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isWarning
parameter_list|()
block|{
return|return
name|hasMessages
argument_list|()
operator|&&
operator|!
name|isError
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isConfirm
parameter_list|()
block|{
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|isConfirm
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|Set
argument_list|<
name|Integer
argument_list|>
name|getConfirms
parameter_list|()
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|isConfirm
argument_list|()
condition|)
name|ret
operator|.
name|add
argument_list|(
name|m
operator|.
name|getConfirm
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|Float
name|getMaxCreditNeeded
parameter_list|()
block|{
return|return
name|iMaxCreditNeeded
return|;
block|}
specifier|public
name|void
name|setMaxCreditNeeded
parameter_list|(
name|Float
name|maxCreditNeeded
parameter_list|)
block|{
name|iMaxCreditNeeded
operator|=
name|maxCreditNeeded
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|CourseMessage
argument_list|>
name|getMessages
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|List
argument_list|<
name|CourseMessage
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseMessage
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
name|ret
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|(
name|String
name|courseName
parameter_list|,
name|String
name|delim
parameter_list|,
name|String
modifier|...
name|exclude
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMessages
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
name|m
label|:
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|e
range|:
name|exclude
control|)
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue
name|m
continue|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
name|delim
operator|+
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|RequestedCourseStatus
name|getStatus
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|RequestedCourseStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|m
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|>
name|status
operator|.
name|ordinal
argument_list|()
condition|)
name|status
operator|=
name|m
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
specifier|public
name|String
name|getMessageWithColor
parameter_list|(
name|String
name|courseName
parameter_list|,
name|String
name|delim
parameter_list|,
name|String
modifier|...
name|exclude
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMessages
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
name|m
label|:
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|e
range|:
name|exclude
control|)
if|if
condition|(
name|e
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue
name|m
continue|;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
operator|(
name|m
operator|.
name|isError
argument_list|()
condition|?
literal|"<span class='text-red'>"
else|:
literal|"<span class='text-orange'>"
operator|)
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
else|else
name|ret
operator|+=
name|delim
operator|+
operator|(
name|m
operator|.
name|isError
argument_list|()
condition|?
literal|"<span class='text-red'>"
else|:
literal|"<span class='text-orange'>"
operator|)
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasMessage
parameter_list|(
name|String
name|courseName
parameter_list|,
name|String
name|code
parameter_list|)
block|{
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|&&
name|code
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isError
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMessages
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isConfirm
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMessages
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|isConfirm
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|String
name|getConfirmations
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
operator|!
name|hasMessages
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMessages
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getMessages
argument_list|()
control|)
block|{
if|if
condition|(
name|confirm
operator|!=
name|m
operator|.
name|getConfirm
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|ret
operator|==
literal|null
condition|)
name|ret
operator|=
operator|(
name|m
operator|.
name|hasCourse
argument_list|()
condition|?
name|m
operator|.
name|getCourse
argument_list|()
operator|+
literal|": "
else|:
literal|""
operator|)
operator|+
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
else|else
name|ret
operator|+=
name|delim
operator|+
operator|(
name|m
operator|.
name|hasCourse
argument_list|()
condition|?
name|m
operator|.
name|getCourse
argument_list|()
operator|+
literal|": "
else|:
literal|""
operator|)
operator|+
name|m
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|setConfirmation
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|dialogTitle
parameter_list|,
name|String
name|yesButton
parameter_list|,
name|String
name|noButton
parameter_list|,
name|String
name|yesButtonTitle
parameter_list|,
name|String
name|noButtonTitle
parameter_list|)
block|{
if|if
condition|(
name|iConfirmationSetup
operator|==
literal|null
condition|)
name|iConfirmationSetup
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|iConfirmationSetup
operator|.
name|put
argument_list|(
name|confirm
argument_list|,
operator|new
name|String
index|[]
block|{
name|dialogTitle
block|,
name|yesButton
block|,
name|noButton
block|,
name|yesButtonTitle
block|,
name|noButtonTitle
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getConfirmationTitle
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|defaultTitle
parameter_list|)
block|{
if|if
condition|(
name|iConfirmationSetup
operator|==
literal|null
condition|)
return|return
name|defaultTitle
return|;
name|String
index|[]
name|confirmation
init|=
name|iConfirmationSetup
operator|.
name|get
argument_list|(
name|confirm
argument_list|)
decl_stmt|;
return|return
operator|(
name|confirmation
operator|==
literal|null
operator|||
name|confirmation
index|[
literal|0
index|]
operator|==
literal|null
condition|?
name|defaultTitle
else|:
name|confirmation
index|[
literal|0
index|]
operator|)
return|;
block|}
specifier|public
name|String
name|getConfirmationYesButton
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|defaultTitle
parameter_list|)
block|{
if|if
condition|(
name|iConfirmationSetup
operator|==
literal|null
condition|)
return|return
name|defaultTitle
return|;
name|String
index|[]
name|confirmation
init|=
name|iConfirmationSetup
operator|.
name|get
argument_list|(
name|confirm
argument_list|)
decl_stmt|;
return|return
operator|(
name|confirmation
operator|==
literal|null
operator|||
name|confirmation
index|[
literal|1
index|]
operator|==
literal|null
condition|?
name|defaultTitle
else|:
name|confirmation
index|[
literal|1
index|]
operator|)
return|;
block|}
specifier|public
name|String
name|getConfirmationNoButton
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|defaultTitle
parameter_list|)
block|{
if|if
condition|(
name|iConfirmationSetup
operator|==
literal|null
condition|)
return|return
name|defaultTitle
return|;
name|String
index|[]
name|confirmation
init|=
name|iConfirmationSetup
operator|.
name|get
argument_list|(
name|confirm
argument_list|)
decl_stmt|;
return|return
operator|(
name|confirmation
operator|==
literal|null
operator|||
name|confirmation
index|[
literal|2
index|]
operator|==
literal|null
condition|?
name|defaultTitle
else|:
name|confirmation
index|[
literal|2
index|]
operator|)
return|;
block|}
specifier|public
name|String
name|getConfirmationYesButtonTitle
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|defaultTitle
parameter_list|)
block|{
if|if
condition|(
name|iConfirmationSetup
operator|==
literal|null
condition|)
return|return
name|defaultTitle
return|;
name|String
index|[]
name|confirmation
init|=
name|iConfirmationSetup
operator|.
name|get
argument_list|(
name|confirm
argument_list|)
decl_stmt|;
return|return
operator|(
name|confirmation
operator|==
literal|null
operator|||
name|confirmation
index|[
literal|3
index|]
operator|==
literal|null
condition|?
name|defaultTitle
else|:
name|confirmation
index|[
literal|3
index|]
operator|)
return|;
block|}
specifier|public
name|String
name|getConfirmationNoButtonTitle
parameter_list|(
name|int
name|confirm
parameter_list|,
name|String
name|defaultTitle
parameter_list|)
block|{
if|if
condition|(
name|iConfirmationSetup
operator|==
literal|null
condition|)
return|return
name|defaultTitle
return|;
name|String
index|[]
name|confirmation
init|=
name|iConfirmationSetup
operator|.
name|get
argument_list|(
name|confirm
argument_list|)
decl_stmt|;
return|return
operator|(
name|confirmation
operator|==
literal|null
operator|||
name|confirmation
index|[
literal|4
index|]
operator|==
literal|null
condition|?
name|defaultTitle
else|:
name|confirmation
index|[
literal|4
index|]
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasErrorMessage
parameter_list|()
block|{
return|return
name|iErrorMessage
operator|!=
literal|null
operator|&&
operator|!
name|iErrorMessage
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|iErrorMessage
operator|==
literal|null
condition|)
name|iErrorMessage
operator|=
name|message
expr_stmt|;
if|else if
condition|(
operator|!
name|iErrorMessage
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
name|iErrorMessage
operator|+=
literal|"\n"
operator|+
name|message
expr_stmt|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
return|return
name|iErrorMessage
return|;
block|}
specifier|public
name|boolean
name|hasCreditWarning
parameter_list|()
block|{
return|return
name|iCreditWarning
operator|!=
literal|null
operator|&&
operator|!
name|iCreditWarning
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCreditWarning
parameter_list|()
block|{
return|return
name|iCreditWarning
return|;
block|}
specifier|public
name|void
name|setCreditWarning
parameter_list|(
name|String
name|warning
parameter_list|)
block|{
name|iCreditWarning
operator|=
name|warning
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCreditNote
parameter_list|()
block|{
return|return
name|iCreditNote
operator|!=
literal|null
operator|&&
operator|!
name|iCreditNote
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iCreditNote
argument_list|)
return|;
block|}
specifier|public
name|String
name|getCreditNote
parameter_list|()
block|{
return|return
name|iCreditNote
return|;
block|}
specifier|public
name|void
name|setCreditNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
name|iCreditNote
operator|=
name|note
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxCreditOverrideStatus
parameter_list|(
name|RequestedCourseStatus
name|status
parameter_list|)
block|{
name|iMaxCreditOverrideStatus
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|RequestedCourseStatus
name|getMaxCreditOverrideStatus
parameter_list|()
block|{
return|return
name|iMaxCreditOverrideStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|hasMessages
argument_list|()
condition|?
name|getMessages
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"[]"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CourseMessage
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|CourseMessage
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|Long
name|iCourseId
decl_stmt|;
specifier|private
name|String
name|iCourse
decl_stmt|;
specifier|private
name|boolean
name|iError
init|=
literal|true
decl_stmt|;
specifier|private
name|String
name|iMessage
decl_stmt|;
specifier|private
name|String
name|iCode
decl_stmt|;
specifier|private
name|Integer
name|iConfirm
decl_stmt|;
specifier|private
name|Integer
name|iOrder
decl_stmt|;
specifier|private
name|RequestedCourseStatus
name|iStatus
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iSuggestions
decl_stmt|;
specifier|public
name|CourseMessage
parameter_list|()
block|{
block|}
specifier|public
name|Long
name|getCourseId
parameter_list|()
block|{
return|return
name|iCourseId
return|;
block|}
specifier|public
name|boolean
name|hasCourseId
parameter_list|()
block|{
return|return
name|iCourseId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setCourseId
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
name|iCourseId
operator|=
name|courseId
expr_stmt|;
block|}
specifier|public
name|String
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|boolean
name|hasCourse
parameter_list|()
block|{
return|return
name|iCourse
operator|!=
literal|null
operator|&&
operator|!
name|iCourse
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setCourse
parameter_list|(
name|String
name|course
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
block|}
specifier|public
name|boolean
name|isError
parameter_list|()
block|{
return|return
name|iError
return|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|boolean
name|error
parameter_list|)
block|{
name|iError
operator|=
name|error
expr_stmt|;
block|}
specifier|public
name|boolean
name|isConfirm
parameter_list|()
block|{
return|return
name|iConfirm
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setConfirm
parameter_list|(
name|Integer
name|confirm
parameter_list|)
block|{
name|iConfirm
operator|=
name|confirm
expr_stmt|;
block|}
specifier|public
name|int
name|getConfirm
parameter_list|()
block|{
return|return
name|iConfirm
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|iConfirm
return|;
block|}
specifier|public
name|void
name|setOrder
parameter_list|(
name|Integer
name|order
parameter_list|)
block|{
name|iOrder
operator|=
name|order
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasOrder
parameter_list|()
block|{
return|return
name|iOrder
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getOrder
parameter_list|()
block|{
return|return
name|iOrder
operator|==
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|iOrder
return|;
block|}
specifier|public
name|String
name|getMessage
parameter_list|()
block|{
return|return
name|iMessage
return|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iMessage
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|String
name|getCode
parameter_list|()
block|{
return|return
name|iCode
return|;
block|}
specifier|public
name|void
name|setCode
parameter_list|(
name|String
name|code
parameter_list|)
block|{
name|iCode
operator|=
name|code
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasSuggestions
parameter_list|()
block|{
return|return
name|iSuggestions
operator|!=
literal|null
operator|&&
operator|!
name|iSuggestions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuggestions
parameter_list|()
block|{
return|return
name|iSuggestions
return|;
block|}
specifier|public
name|void
name|addSuggestion
parameter_list|(
name|String
name|suggestion
parameter_list|)
block|{
if|if
condition|(
name|iSuggestions
operator|==
literal|null
condition|)
name|iSuggestions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iSuggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RequestedCourseStatus
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|CourseMessage
name|setStatus
parameter_list|(
name|RequestedCourseStatus
name|status
parameter_list|)
block|{
name|iStatus
operator|=
name|status
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasCourse
argument_list|()
condition|?
name|getCourse
argument_list|()
operator|+
literal|": "
else|:
literal|""
operator|)
operator|+
name|getMessage
argument_list|()
operator|+
operator|(
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" ("
operator|+
name|getStatus
argument_list|()
operator|+
literal|")"
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|hasCourse
argument_list|()
condition|?
name|getCourse
argument_list|()
operator|+
literal|":"
operator|+
name|getCode
argument_list|()
else|:
name|getCode
argument_list|()
operator|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|x
parameter_list|,
name|int
name|y
parameter_list|)
block|{
return|return
operator|(
name|x
operator|<
name|y
operator|)
condition|?
operator|-
literal|1
else|:
operator|(
operator|(
name|x
operator|==
name|y
operator|)
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|CourseMessage
name|m
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|getConfirm
argument_list|()
argument_list|,
name|m
operator|.
name|getConfirm
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|compare
argument_list|(
name|getOrder
argument_list|()
argument_list|,
name|m
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|hasCourse
argument_list|()
operator|!=
name|m
operator|.
name|hasCourse
argument_list|()
condition|)
return|return
operator|(
name|hasCourse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|hasCourse
argument_list|()
condition|)
block|{
name|cmp
operator|=
name|getCourse
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|getCode
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|addConfirmationError
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|course
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|RequestedCourseStatus
name|status
parameter_list|,
name|Integer
name|order
parameter_list|)
block|{
if|if
condition|(
name|iConfirmations
operator|==
literal|null
condition|)
name|iConfirmations
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseMessage
argument_list|>
argument_list|()
expr_stmt|;
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|iConfirmations
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfirmationMessage
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|course
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|RequestedCourseStatus
name|status
parameter_list|,
name|Integer
name|order
parameter_list|)
block|{
if|if
condition|(
name|iConfirmations
operator|==
literal|null
condition|)
name|iConfirmations
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseMessage
argument_list|>
argument_list|()
expr_stmt|;
name|CourseMessage
name|m
init|=
operator|new
name|CourseMessage
argument_list|()
decl_stmt|;
name|m
operator|.
name|setCourseId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCourse
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|m
operator|.
name|setCode
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|m
operator|.
name|setError
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|setConfirm
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|m
operator|.
name|setStatus
argument_list|(
name|status
argument_list|)
expr_stmt|;
name|m
operator|.
name|setOrder
argument_list|(
name|order
argument_list|)
expr_stmt|;
name|iConfirmations
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addConfirmationMessage
parameter_list|(
name|Long
name|courseId
parameter_list|,
name|String
name|course
parameter_list|,
name|String
name|code
parameter_list|,
name|String
name|message
parameter_list|,
name|Integer
name|order
parameter_list|)
block|{
name|addConfirmationMessage
argument_list|(
name|courseId
argument_list|,
name|course
argument_list|,
name|code
argument_list|,
name|message
argument_list|,
literal|null
argument_list|,
name|order
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasErrorMessage
parameter_list|()
block|{
return|return
name|iErrorMessage
operator|!=
literal|null
operator|&&
operator|!
name|iErrorMessage
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|iErrorMessage
operator|==
literal|null
condition|)
name|iErrorMessage
operator|=
name|message
expr_stmt|;
if|else if
condition|(
operator|!
name|iErrorMessage
operator|.
name|contains
argument_list|(
name|message
argument_list|)
condition|)
name|iErrorMessage
operator|+=
literal|"\n"
operator|+
name|message
expr_stmt|;
block|}
specifier|public
name|String
name|getErrorMessaeg
parameter_list|()
block|{
return|return
name|iErrorMessage
return|;
block|}
specifier|public
name|String
name|getSpecRegDashboardUrl
parameter_list|()
block|{
return|return
name|iSpecRegDashboardUrl
return|;
block|}
specifier|public
name|boolean
name|hasSpecRegDashboardUrl
parameter_list|()
block|{
return|return
name|iSpecRegDashboardUrl
operator|!=
literal|null
operator|&&
operator|!
name|iSpecRegDashboardUrl
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSpecRegDashboardUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|iSpecRegDashboardUrl
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|void
name|setRequestorNote
parameter_list|(
name|String
name|note
parameter_list|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
condition|)
name|iRequestorNote
operator|=
literal|null
expr_stmt|;
else|else
name|iRequestorNote
operator|=
name|note
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRequestorNote
parameter_list|()
block|{
return|return
name|iRequestorNote
operator|!=
literal|null
operator|&&
operator|!
name|iRequestorNote
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iRequestorNote
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRequestorNote
parameter_list|()
block|{
return|return
name|iRequestorNote
return|;
block|}
specifier|public
name|boolean
name|hasRequestorNoteSuggestions
parameter_list|()
block|{
return|return
name|iRequestorNoteSuggestions
operator|!=
literal|null
operator|&&
operator|!
name|iRequestorNoteSuggestions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRequestorNoteSuggestions
parameter_list|()
block|{
return|return
name|iRequestorNoteSuggestions
return|;
block|}
specifier|public
name|void
name|addRequestorNoteSuggestion
parameter_list|(
name|String
name|suggestion
parameter_list|)
block|{
if|if
condition|(
name|iRequestorNoteSuggestions
operator|==
literal|null
condition|)
name|iRequestorNoteSuggestions
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iRequestorNoteSuggestions
operator|.
name|add
argument_list|(
name|suggestion
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setRequestId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|iRequestId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRequestId
parameter_list|()
block|{
return|return
name|iRequestId
operator|!=
literal|null
operator|&&
operator|!
name|iRequestId
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
literal|" "
operator|.
name|equals
argument_list|(
name|iRequestId
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRequestId
parameter_list|()
block|{
return|return
name|iRequestId
return|;
block|}
specifier|public
name|boolean
name|updateRequestorNote
parameter_list|(
name|String
name|requestId
parameter_list|,
name|String
name|note
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|requestId
operator|.
name|equals
argument_list|(
name|getRequestId
argument_list|()
argument_list|)
condition|)
block|{
name|setRequestorNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|requestId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setRequestorNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|requestId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getRequestId
argument_list|()
argument_list|)
condition|)
block|{
name|rc
operator|.
name|setRequestorNote
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|changed
return|;
block|}
specifier|public
name|void
name|removeInactiveDuplicates
parameter_list|()
block|{
name|Set
argument_list|<
name|RequestedCourse
argument_list|>
name|activeCourses
init|=
operator|new
name|HashSet
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
operator|&&
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
name|activeCourses
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|iAlternatives
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
operator|&&
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
name|activeCourses
operator|.
name|add
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Request
name|r
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RequestedCourse
argument_list|>
name|i
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RequestedCourse
name|rc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|isInactive
argument_list|()
operator|&&
name|rc
operator|.
name|isCourse
argument_list|()
operator|&&
name|activeCourses
operator|.
name|contains
argument_list|(
name|rc
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|iAlternatives
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RequestedCourse
argument_list|>
name|i
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RequestedCourse
name|rc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|isInactive
argument_list|()
operator|&&
name|rc
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|activeCourses
operator|.
name|contains
argument_list|(
name|rc
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|moveActiveSubstitutionsUp
parameter_list|()
block|{
comment|// Count the number of inactive course requests in the upper table
name|int
name|nrInactive
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|request
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|request
operator|.
name|isInactive
argument_list|()
condition|)
name|nrInactive
operator|++
expr_stmt|;
comment|// For each inactive request, move one active request from substitutes up
for|for
control|(
name|Iterator
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
name|i
init|=
name|getAlternatives
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|nrInactive
operator|>
literal|0
condition|;
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|request
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isActive
argument_list|()
condition|)
block|{
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|nrInactive
operator|--
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|removeDuplicates
parameter_list|()
block|{
name|Set
argument_list|<
name|RequestedCourse
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RequestedCourse
argument_list|>
name|i
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RequestedCourse
name|rc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
operator|&&
operator|!
name|courses
operator|.
name|add
argument_list|(
name|rc
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|iAlternatives
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RequestedCourse
argument_list|>
name|i
init|=
name|r
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RequestedCourse
name|rc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
operator|&&
operator|!
name|courses
operator|.
name|add
argument_list|(
name|rc
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|return
name|deleted
return|;
block|}
specifier|public
name|boolean
name|applyAdvisorRequests
parameter_list|(
name|CourseRequestInterface
name|req
parameter_list|)
block|{
if|if
condition|(
name|req
operator|==
literal|null
operator|||
name|req
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Request
name|r
range|:
name|req
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|getRequestPriority
argument_list|(
name|rc
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|skip
condition|)
block|{
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|Request
name|r
range|:
name|req
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
continue|continue;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|getRequestPriority
argument_list|(
name|rc
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|skip
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|skip
condition|)
block|{
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|changed
return|;
block|}
specifier|public
name|boolean
name|hasWaitListMode
parameter_list|()
block|{
return|return
name|iMode
operator|!=
literal|null
return|;
block|}
specifier|public
name|WaitListMode
name|getWaitListMode
parameter_list|()
block|{
if|if
condition|(
name|iMode
operator|==
literal|null
condition|)
return|return
name|WaitListMode
operator|.
name|None
return|;
return|return
name|iMode
return|;
block|}
specifier|public
name|void
name|setWaitListMode
parameter_list|(
name|WaitListMode
name|mode
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWaitListChecks
parameter_list|()
block|{
return|return
name|iWaitListChecks
operator|!=
literal|null
return|;
block|}
specifier|public
name|CheckCoursesResponse
name|getWaitListChecks
parameter_list|()
block|{
return|return
name|iWaitListChecks
return|;
block|}
specifier|public
name|void
name|setWaitListChecks
parameter_list|(
name|CheckCoursesResponse
name|waitListChecks
parameter_list|)
block|{
name|iWaitListChecks
operator|=
name|waitListChecks
expr_stmt|;
name|setConfirmations
argument_list|(
name|waitListChecks
operator|==
literal|null
condition|?
literal|null
else|:
name|waitListChecks
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
name|setErrorMessage
argument_list|(
name|waitListChecks
operator|==
literal|null
condition|?
literal|null
else|:
name|waitListChecks
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
name|setCreditNote
argument_list|(
name|waitListChecks
operator|==
literal|null
condition|?
literal|null
else|:
name|waitListChecks
operator|.
name|getCreditNote
argument_list|()
argument_list|)
expr_stmt|;
name|setCreditWarning
argument_list|(
name|waitListChecks
operator|==
literal|null
condition|?
literal|null
else|:
name|waitListChecks
operator|.
name|getCreditWarning
argument_list|()
argument_list|)
expr_stmt|;
name|setMaxCreditOverride
argument_list|(
name|waitListChecks
operator|==
literal|null
condition|?
literal|null
else|:
name|waitListChecks
operator|.
name|getMaxCreditNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|setMaxCreditOverrideStatus
argument_list|(
name|waitListChecks
operator|==
literal|null
condition|?
literal|null
else|:
name|waitListChecks
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RequestedCourseStatus
name|getStatus
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|RequestedCourseStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasConfirmations
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourse
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|m
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|>
name|status
operator|.
name|ordinal
argument_list|()
condition|)
name|status
operator|=
name|m
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
return|return
name|status
return|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseName
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
name|rc
operator|.
name|getStatus
argument_list|()
return|;
for|for
control|(
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseName
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
name|rc
operator|.
name|getStatus
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|RequestedCourseStatus
name|getStatus
parameter_list|(
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|RequestedCourseStatus
name|status
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasConfirmations
argument_list|()
condition|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|courseId
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
operator|||
name|m
operator|.
name|getStatus
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|>
name|status
operator|.
name|ordinal
argument_list|()
condition|)
name|status
operator|=
name|m
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|status
operator|!=
literal|null
condition|)
return|return
name|status
return|;
for|for
control|(
name|Request
name|r
range|:
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
name|rc
operator|.
name|getStatus
argument_list|()
return|;
for|for
control|(
name|Request
name|r
range|:
name|getAlternatives
argument_list|()
control|)
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|courseId
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
operator|!
name|rc
operator|.
name|isInactive
argument_list|()
condition|)
return|return
name|rc
operator|.
name|getStatus
argument_list|()
return|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

