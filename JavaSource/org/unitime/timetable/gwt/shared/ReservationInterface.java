begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ReservationInterface
implements|implements
name|IsSerializable
implements|,
name|Comparable
argument_list|<
name|ReservationInterface
argument_list|>
block|{
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|Offering
name|iOffering
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Config
argument_list|>
name|iConfigs
init|=
operator|new
name|ArrayList
argument_list|<
name|Config
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Clazz
argument_list|>
name|iClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Clazz
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|,
name|iEnrollment
init|=
literal|null
decl_stmt|,
name|iLastLike
init|=
literal|null
decl_stmt|,
name|iProjection
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|iStartDate
decl_stmt|,
name|iExpirationDate
decl_stmt|;
specifier|private
name|boolean
name|iEditable
init|=
literal|false
decl_stmt|,
name|iExpired
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iOverride
init|=
literal|false
decl_stmt|,
name|iAlwaysExpired
init|=
literal|false
decl_stmt|,
name|iAllowOverlaps
init|=
literal|false
decl_stmt|,
name|iOverLimit
init|=
literal|false
decl_stmt|,
name|iMustBeUsed
init|=
literal|false
decl_stmt|;
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Offering
name|getOffering
parameter_list|()
block|{
return|return
name|iOffering
return|;
block|}
specifier|public
name|void
name|setOffering
parameter_list|(
name|Offering
name|offering
parameter_list|)
block|{
name|iOffering
operator|=
name|offering
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLastLike
parameter_list|()
block|{
return|return
name|iLastLike
return|;
block|}
specifier|public
name|void
name|setLastLike
parameter_list|(
name|Integer
name|lastLike
parameter_list|)
block|{
name|iLastLike
operator|=
name|lastLike
expr_stmt|;
block|}
specifier|public
name|Integer
name|getEnrollment
parameter_list|()
block|{
return|return
name|iEnrollment
return|;
block|}
specifier|public
name|void
name|setEnrollment
parameter_list|(
name|Integer
name|enrollment
parameter_list|)
block|{
name|iEnrollment
operator|=
name|enrollment
expr_stmt|;
block|}
specifier|public
name|Integer
name|getProjection
parameter_list|()
block|{
return|return
name|iProjection
return|;
block|}
specifier|public
name|void
name|setProjection
parameter_list|(
name|Integer
name|projection
parameter_list|)
block|{
name|iProjection
operator|=
name|projection
expr_stmt|;
block|}
specifier|public
name|Date
name|getStartDate
parameter_list|()
block|{
return|return
name|iStartDate
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
name|iStartDate
operator|=
name|d
expr_stmt|;
block|}
specifier|public
name|Date
name|getExpirationDate
parameter_list|()
block|{
return|return
name|iExpirationDate
return|;
block|}
specifier|public
name|void
name|setExpirationDate
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
name|iExpirationDate
operator|=
name|d
expr_stmt|;
block|}
specifier|public
name|void
name|setEditable
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
specifier|public
name|void
name|setExpired
parameter_list|(
name|boolean
name|expired
parameter_list|)
block|{
name|iExpired
operator|=
name|expired
expr_stmt|;
block|}
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
name|iExpired
return|;
block|}
specifier|public
name|boolean
name|isOverride
parameter_list|()
block|{
return|return
name|iOverride
return|;
block|}
specifier|public
name|void
name|setOverride
parameter_list|(
name|boolean
name|override
parameter_list|)
block|{
name|iOverride
operator|=
name|override
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAlwaysExpired
parameter_list|()
block|{
return|return
name|iAlwaysExpired
return|;
block|}
specifier|public
name|void
name|setAlwaysExpired
parameter_list|(
name|boolean
name|alwaysExpired
parameter_list|)
block|{
name|iAlwaysExpired
operator|=
name|alwaysExpired
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowOverlaps
parameter_list|()
block|{
return|return
name|iAllowOverlaps
return|;
block|}
specifier|public
name|void
name|setAllowOverlaps
parameter_list|(
name|boolean
name|allowOverlaps
parameter_list|)
block|{
name|iAllowOverlaps
operator|=
name|allowOverlaps
expr_stmt|;
block|}
specifier|public
name|boolean
name|isOverLimit
parameter_list|()
block|{
return|return
name|iOverLimit
return|;
block|}
specifier|public
name|void
name|setOverLimit
parameter_list|(
name|boolean
name|overLimit
parameter_list|)
block|{
name|iOverLimit
operator|=
name|overLimit
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMustBeUsed
parameter_list|()
block|{
return|return
name|iMustBeUsed
return|;
block|}
specifier|public
name|void
name|setMustBeUsed
parameter_list|(
name|boolean
name|mustBeUsed
parameter_list|)
block|{
name|iMustBeUsed
operator|=
name|mustBeUsed
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Config
argument_list|>
name|getConfigs
parameter_list|()
block|{
return|return
name|iConfigs
return|;
block|}
specifier|public
name|List
argument_list|<
name|Clazz
argument_list|>
name|getClasses
parameter_list|()
block|{
return|return
name|iClasses
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|ReservationInterface
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ReservationInterface
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
specifier|abstract
name|int
name|getPriority
parameter_list|()
function_decl|;
specifier|public
name|int
name|compareTo
parameter_list|(
name|ReservationInterface
name|r2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|this
operator|.
name|toString
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|this
operator|.
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|r2
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|CourseReservation
extends|extends
name|ReservationInterface
block|{
specifier|private
name|Course
name|iCourse
decl_stmt|;
specifier|public
name|CourseReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Course
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|void
name|setCourse
parameter_list|(
name|Course
name|course
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
operator|(
name|iCourse
operator|==
literal|null
condition|?
literal|null
else|:
name|iCourse
operator|.
name|getLimit
argument_list|()
operator|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCourse
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|400
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GroupReservation
extends|extends
name|ReservationInterface
block|{
specifier|private
name|IdName
name|iGroup
decl_stmt|;
specifier|public
name|GroupReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|IdName
name|getGroup
parameter_list|()
block|{
return|return
name|iGroup
return|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|IdName
name|group
parameter_list|)
block|{
name|iGroup
operator|=
name|group
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getGroup
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|isOverride
argument_list|()
condition|?
literal|250
else|:
literal|200
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IndividualReservation
extends|extends
name|ReservationInterface
block|{
specifier|private
name|List
argument_list|<
name|IdName
argument_list|>
name|iStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|IndividualReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IdName
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iStudents
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|IdName
name|s
range|:
name|iStudents
control|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n"
expr_stmt|;
name|ret
operator|+=
name|s
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
name|isOverride
argument_list|()
condition|?
literal|150
else|:
literal|100
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|OverrideReservation
extends|extends
name|IndividualReservation
block|{
specifier|private
name|List
argument_list|<
name|IdName
argument_list|>
name|iStudents
init|=
operator|new
name|ArrayList
argument_list|<
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|OverrideType
name|iType
init|=
literal|null
decl_stmt|;
specifier|public
name|OverrideReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|OverrideReservation
parameter_list|(
name|OverrideType
name|type
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IdName
argument_list|>
name|getStudents
parameter_list|()
block|{
return|return
name|iStudents
return|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iStudents
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|OverrideType
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|OverrideType
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExpired
parameter_list|()
block|{
return|return
operator|(
name|getType
argument_list|()
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|isExpired
argument_list|()
else|:
name|getType
argument_list|()
operator|.
name|isExpired
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getExpirationDate
parameter_list|()
block|{
return|return
operator|(
name|getType
argument_list|()
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|getExpirationDate
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getStartDate
parameter_list|()
block|{
return|return
operator|(
name|getType
argument_list|()
operator|.
name|isCanHaveExpirationDate
argument_list|()
condition|?
name|super
operator|.
name|getStartDate
argument_list|()
else|:
literal|null
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|600
operator|+
operator|(
name|getType
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|+
name|getType
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CurriculumReservation
extends|extends
name|ReservationInterface
block|{
specifier|private
name|Area
name|iCurriculum
decl_stmt|;
specifier|public
name|CurriculumReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Area
name|getCurriculum
parameter_list|()
block|{
return|return
name|iCurriculum
return|;
block|}
specifier|public
name|void
name|setCurriculum
parameter_list|(
name|Area
name|curriculum
parameter_list|)
block|{
name|iCurriculum
operator|=
name|curriculum
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCurriculum
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|300
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LCReservation
extends|extends
name|ReservationInterface
block|{
specifier|private
name|IdName
name|iGroup
decl_stmt|;
specifier|private
name|Course
name|iCourse
decl_stmt|;
specifier|public
name|LCReservation
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|IdName
name|getGroup
parameter_list|()
block|{
return|return
name|iGroup
return|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|IdName
name|group
parameter_list|)
block|{
name|iGroup
operator|=
name|group
expr_stmt|;
block|}
specifier|public
name|Course
name|getCourse
parameter_list|()
block|{
return|return
name|iCourse
return|;
block|}
specifier|public
name|void
name|setCourse
parameter_list|(
name|Course
name|course
parameter_list|)
block|{
name|iCourse
operator|=
name|course
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getCourse
argument_list|()
operator|+
literal|" "
operator|+
name|getGroup
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPriority
parameter_list|()
block|{
return|return
literal|500
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IdName
implements|implements
name|IsSerializable
implements|,
name|Comparable
argument_list|<
name|IdName
argument_list|>
block|{
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|String
name|iAbbv
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|public
name|IdName
parameter_list|()
block|{
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
return|return
name|iAbbv
return|;
block|}
specifier|public
name|void
name|setAbbv
parameter_list|(
name|String
name|abbv
parameter_list|)
block|{
name|iAbbv
operator|=
name|abbv
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|IdName
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|IdName
operator|)
name|o
operator|)
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
operator|(
name|iAbbv
operator|==
literal|null
operator|||
name|iAbbv
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|iAbbv
operator|)
operator|+
operator|(
name|iName
operator|==
literal|null
operator|||
name|iName
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|iName
operator|)
operator|)
operator|.
name|trim
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|IdName
name|other
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|getAbbv
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getAbbv
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getAbbv
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|other
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|getName
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|other
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Course
extends|extends
name|IdName
block|{
specifier|private
name|boolean
name|iControl
init|=
literal|true
decl_stmt|;
specifier|public
name|Course
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isControl
parameter_list|()
block|{
return|return
name|iControl
return|;
block|}
specifier|public
name|void
name|setControl
parameter_list|(
name|boolean
name|control
parameter_list|)
block|{
name|iControl
operator|=
name|control
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Config
extends|extends
name|IdName
block|{
specifier|private
name|List
argument_list|<
name|Subpart
argument_list|>
name|iSubparts
init|=
operator|new
name|ArrayList
argument_list|<
name|Subpart
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iInstructionalMethod
init|=
literal|null
decl_stmt|;
specifier|public
name|Config
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Subpart
argument_list|>
name|getSubparts
parameter_list|()
block|{
return|return
name|iSubparts
return|;
block|}
specifier|public
name|boolean
name|hasInstructionalMethod
parameter_list|()
block|{
return|return
name|iInstructionalMethod
operator|!=
literal|null
operator|&&
operator|!
name|iInstructionalMethod
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getInstructionalMethod
parameter_list|()
block|{
return|return
name|iInstructionalMethod
return|;
block|}
specifier|public
name|void
name|setInstructionalMethod
parameter_list|(
name|String
name|instructionalMethod
parameter_list|)
block|{
name|iInstructionalMethod
operator|=
name|instructionalMethod
expr_stmt|;
block|}
specifier|public
name|int
name|getIndent
parameter_list|(
name|Subpart
name|subpart
parameter_list|)
block|{
name|Subpart
name|parent
init|=
name|getSubpart
argument_list|(
name|subpart
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|parent
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|+
name|getIndent
argument_list|(
name|parent
argument_list|)
return|;
block|}
specifier|public
name|String
name|getIndent
parameter_list|(
name|Subpart
name|subpart
parameter_list|,
name|String
name|indent
parameter_list|)
block|{
name|Subpart
name|parent
init|=
name|getSubpart
argument_list|(
name|subpart
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|parent
operator|==
literal|null
condition|?
literal|""
else|:
name|indent
operator|+
name|getIndent
argument_list|(
name|parent
argument_list|,
name|indent
argument_list|)
return|;
block|}
specifier|public
name|Subpart
name|getSubpart
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Subpart
name|subpart
range|:
name|iSubparts
control|)
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|subpart
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Subpart
name|a
parameter_list|,
name|Subpart
name|b
parameter_list|)
block|{
name|Subpart
name|parent
init|=
name|getSubpart
argument_list|(
name|b
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|parent
operator|!=
literal|null
operator|&&
operator|(
name|a
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|||
name|isParent
argument_list|(
name|a
argument_list|,
name|parent
argument_list|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|isParent
parameter_list|(
name|Clazz
name|a
parameter_list|,
name|Clazz
name|b
parameter_list|)
block|{
name|Subpart
name|parentSubpart
init|=
name|getSubpart
argument_list|(
name|b
operator|.
name|getSubpart
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
name|Clazz
name|parent
init|=
operator|(
name|parentSubpart
operator|==
literal|null
condition|?
literal|null
else|:
name|parentSubpart
operator|.
name|getClazz
argument_list|(
name|b
operator|.
name|getParentId
argument_list|()
argument_list|)
operator|)
decl_stmt|;
return|return
name|parent
operator|!=
literal|null
operator|&&
operator|(
name|a
operator|.
name|equals
argument_list|(
name|parent
argument_list|)
operator|||
name|isParent
argument_list|(
name|a
argument_list|,
name|parent
argument_list|)
operator|)
return|;
block|}
specifier|public
name|Clazz
name|getParentClazz
parameter_list|(
name|Clazz
name|clazz
parameter_list|,
name|Subpart
name|parentSubpart
parameter_list|)
block|{
name|Subpart
name|subpart
init|=
name|getSubpart
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Clazz
name|parent
init|=
name|subpart
operator|.
name|getClazz
argument_list|(
name|clazz
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|subpart
operator|.
name|equals
argument_list|(
name|parentSubpart
argument_list|)
condition|)
return|return
name|parent
return|;
return|return
name|getParentClazz
argument_list|(
name|parent
argument_list|,
name|parentSubpart
argument_list|)
return|;
block|}
specifier|public
name|int
index|[]
name|countChildClasses
parameter_list|(
name|Subpart
name|parent
parameter_list|,
name|Subpart
name|child
parameter_list|)
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|counts
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clazz
name|clazz
range|:
name|child
operator|.
name|getClasses
argument_list|()
control|)
block|{
name|Clazz
name|pc
init|=
name|getParentClazz
argument_list|(
name|clazz
argument_list|,
name|parent
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|==
literal|null
condition|)
continue|continue;
name|Integer
name|count
init|=
name|counts
operator|.
name|get
argument_list|(
name|pc
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|counts
operator|.
name|put
argument_list|(
name|pc
operator|.
name|getId
argument_list|()
argument_list|,
name|count
operator|==
literal|null
condition|?
literal|1
else|:
literal|1
operator|+
name|count
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|max
init|=
literal|0
decl_stmt|,
name|min
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|Integer
name|count
range|:
name|counts
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|max
operator|<
name|count
condition|)
name|max
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|min
operator|>
name|count
condition|)
name|min
operator|=
name|count
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|<=
name|max
condition|)
return|return
operator|new
name|int
index|[]
block|{
name|min
block|,
name|max
block|}
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Subpart
extends|extends
name|IdName
block|{
specifier|private
name|Long
name|iParentId
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Clazz
argument_list|>
name|iClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|Clazz
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Config
name|iConfig
decl_stmt|;
specifier|public
name|Subpart
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Config
name|getConfig
parameter_list|()
block|{
return|return
name|iConfig
return|;
block|}
specifier|public
name|void
name|setConfig
parameter_list|(
name|Config
name|config
parameter_list|)
block|{
name|iConfig
operator|=
name|config
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Clazz
argument_list|>
name|getClasses
parameter_list|()
block|{
return|return
name|iClasses
return|;
block|}
specifier|public
name|Long
name|getParentId
parameter_list|()
block|{
return|return
name|iParentId
return|;
block|}
specifier|public
name|void
name|setParentId
parameter_list|(
name|Long
name|parentId
parameter_list|)
block|{
name|iParentId
operator|=
name|parentId
expr_stmt|;
block|}
specifier|public
name|Clazz
name|getClazz
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|Clazz
name|clazz
range|:
name|iClasses
control|)
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|clazz
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Clazz
extends|extends
name|IdName
block|{
specifier|private
name|Subpart
name|iSubpart
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iParentId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iExternalId
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCancelled
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iTime
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDate
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iRoom
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iInstructor
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|iEnrollment
init|=
literal|null
decl_stmt|;
specifier|public
name|Clazz
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getParentId
parameter_list|()
block|{
return|return
name|iParentId
return|;
block|}
specifier|public
name|void
name|setParentId
parameter_list|(
name|Long
name|parentId
parameter_list|)
block|{
name|iParentId
operator|=
name|parentId
expr_stmt|;
block|}
specifier|public
name|Subpart
name|getSubpart
parameter_list|()
block|{
return|return
name|iSubpart
return|;
block|}
specifier|public
name|void
name|setSubpart
parameter_list|(
name|Subpart
name|subpart
parameter_list|)
block|{
name|iSubpart
operator|=
name|subpart
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasExternalId
parameter_list|()
block|{
return|return
name|iExternalId
operator|!=
literal|null
operator|&&
operator|!
name|iExternalId
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExternalId
parameter_list|()
block|{
return|return
name|iExternalId
return|;
block|}
specifier|public
name|void
name|setExternalId
parameter_list|(
name|String
name|externalId
parameter_list|)
block|{
name|iExternalId
operator|=
name|externalId
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCancelled
parameter_list|()
block|{
return|return
name|iCancelled
return|;
block|}
specifier|public
name|void
name|setCancelled
parameter_list|(
name|boolean
name|cancelled
parameter_list|)
block|{
name|iCancelled
operator|=
name|cancelled
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTime
parameter_list|()
block|{
return|return
name|iTime
operator|!=
literal|null
operator|&&
operator|!
name|iTime
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTime
parameter_list|()
block|{
return|return
name|iTime
return|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|String
name|time
parameter_list|)
block|{
name|iTime
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasDate
parameter_list|()
block|{
return|return
name|iDate
operator|!=
literal|null
operator|&&
operator|!
name|iDate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasRoom
parameter_list|()
block|{
return|return
name|iRoom
operator|!=
literal|null
operator|&&
operator|!
name|iRoom
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getRoom
parameter_list|()
block|{
return|return
name|iRoom
return|;
block|}
specifier|public
name|void
name|setRoom
parameter_list|(
name|String
name|room
parameter_list|)
block|{
name|iRoom
operator|=
name|room
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasInstructor
parameter_list|()
block|{
return|return
name|iInstructor
operator|!=
literal|null
operator|&&
operator|!
name|iInstructor
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getInstructor
parameter_list|()
block|{
return|return
name|iInstructor
return|;
block|}
specifier|public
name|void
name|setInstructor
parameter_list|(
name|String
name|instructor
parameter_list|)
block|{
name|iInstructor
operator|=
name|instructor
expr_stmt|;
block|}
specifier|public
name|Integer
name|getEnrollment
parameter_list|()
block|{
return|return
name|iEnrollment
return|;
block|}
specifier|public
name|void
name|setEnrollment
parameter_list|(
name|Integer
name|enrollment
parameter_list|)
block|{
name|iEnrollment
operator|=
name|enrollment
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Offering
extends|extends
name|IdName
block|{
specifier|private
name|boolean
name|iOffered
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iNeedUnlock
init|=
literal|false
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Course
argument_list|>
name|iCourses
init|=
operator|new
name|ArrayList
argument_list|<
name|Course
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Config
argument_list|>
name|iConfigs
init|=
operator|new
name|ArrayList
argument_list|<
name|Config
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Offering
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Course
argument_list|>
name|getCourses
parameter_list|()
block|{
return|return
name|iCourses
return|;
block|}
specifier|public
name|List
argument_list|<
name|Config
argument_list|>
name|getConfigs
parameter_list|()
block|{
return|return
name|iConfigs
return|;
block|}
specifier|public
name|boolean
name|isOffered
parameter_list|()
block|{
return|return
name|iOffered
return|;
block|}
specifier|public
name|void
name|setOffered
parameter_list|(
name|boolean
name|offered
parameter_list|)
block|{
name|iOffered
operator|=
name|offered
expr_stmt|;
block|}
specifier|public
name|boolean
name|isUnlockNeeded
parameter_list|()
block|{
return|return
name|iNeedUnlock
return|;
block|}
specifier|public
name|void
name|setUnlockNeeded
parameter_list|(
name|boolean
name|unlockNeeded
parameter_list|)
block|{
name|iNeedUnlock
operator|=
name|unlockNeeded
expr_stmt|;
block|}
specifier|public
name|Course
name|getControllingCourse
parameter_list|()
block|{
for|for
control|(
name|Course
name|course
range|:
name|iCourses
control|)
if|if
condition|(
name|course
operator|.
name|isControl
argument_list|()
condition|)
return|return
name|course
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Area
extends|extends
name|IdName
block|{
specifier|private
name|List
argument_list|<
name|IdName
argument_list|>
name|iClassifications
init|=
operator|new
name|ArrayList
argument_list|<
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|IdName
argument_list|>
name|iMajors
init|=
operator|new
name|ArrayList
argument_list|<
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|Area
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IdName
argument_list|>
name|getClassifications
parameter_list|()
block|{
return|return
name|iClassifications
return|;
block|}
specifier|public
name|List
argument_list|<
name|IdName
argument_list|>
name|getMajors
parameter_list|()
block|{
return|return
name|iMajors
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|getClassifications
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|getMajors
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Curriculum
extends|extends
name|IdName
block|{
specifier|private
name|List
argument_list|<
name|IdName
argument_list|>
name|iClassifications
init|=
operator|new
name|ArrayList
argument_list|<
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|IdName
argument_list|>
name|iMajors
init|=
operator|new
name|ArrayList
argument_list|<
name|IdName
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|IdName
name|iArea
init|=
literal|null
decl_stmt|;
specifier|private
name|Integer
name|iLimit
init|=
literal|null
decl_stmt|;
specifier|public
name|Curriculum
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|IdName
argument_list|>
name|getClassifications
parameter_list|()
block|{
return|return
name|iClassifications
return|;
block|}
specifier|public
name|List
argument_list|<
name|IdName
argument_list|>
name|getMajors
parameter_list|()
block|{
return|return
name|iMajors
return|;
block|}
specifier|public
name|IdName
name|getArea
parameter_list|()
block|{
return|return
name|iArea
return|;
block|}
specifier|public
name|void
name|setArea
parameter_list|(
name|IdName
name|area
parameter_list|)
block|{
name|iArea
operator|=
name|area
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLimit
parameter_list|()
block|{
return|return
name|iLimit
return|;
block|}
specifier|public
name|void
name|setLimit
parameter_list|(
name|Integer
name|limit
parameter_list|)
block|{
name|iLimit
operator|=
name|limit
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|getArea
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|getClassifications
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|getMajors
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|OverrideType
implements|implements
name|IsSerializable
block|{
name|AllowTimeConflict
argument_list|(
literal|"time-cnflt"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|AllowOverLimit
argument_list|(
literal|"closed"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|AllowOverLimitTimeConflict
argument_list|(
literal|"time-limit-cnflt"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|ClassificationOverride
argument_list|(
literal|"class"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|CoReqOverride
argument_list|(
literal|"co-req"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|CohortOverride
argument_list|(
literal|"cohort"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|CollegeRestrictionOverride
argument_list|(
literal|"college"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|DegreeOverride
argument_list|(
literal|"degree"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|DepartmentPermission
argument_list|(
literal|"dpt-permit"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|HonorsPermission
argument_list|(
literal|"honors"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|InstructorPermission
argument_list|(
literal|"inst-permt"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|LevelOverride
argument_list|(
literal|"level"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|MajorOverride
argument_list|(
literal|"major"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|PreReqOverride
argument_list|(
literal|"pre-req"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|Program
argument_list|(
literal|"program"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|Other
argument_list|(
literal|"other"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|, 		;
name|String
name|iReference
decl_stmt|;
name|boolean
name|iMustBeUsed
init|=
literal|false
decl_stmt|,
name|iAllowTimeConflict
init|=
literal|false
decl_stmt|,
name|iAllowOverLimit
init|=
literal|false
decl_stmt|,
name|iEditable
init|=
literal|false
decl_stmt|;
name|Boolean
name|iExpired
init|=
literal|false
decl_stmt|;
name|OverrideType
parameter_list|(
name|String
name|reference
parameter_list|,
name|boolean
name|mustBeUsed
parameter_list|,
name|boolean
name|timeConflict
parameter_list|,
name|boolean
name|overLimit
parameter_list|,
name|Boolean
name|expired
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|iReference
operator|=
name|reference
expr_stmt|;
name|iMustBeUsed
operator|=
name|mustBeUsed
expr_stmt|;
name|iAllowTimeConflict
operator|=
name|timeConflict
expr_stmt|;
name|iAllowOverLimit
operator|=
name|overLimit
expr_stmt|;
name|iExpired
operator|=
name|expired
expr_stmt|;
name|iEditable
operator|=
name|editable
expr_stmt|;
block|}
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|iReference
return|;
block|}
specifier|public
name|boolean
name|isMustBeUsed
parameter_list|()
block|{
return|return
name|iMustBeUsed
return|;
block|}
specifier|public
name|boolean
name|isAllowTimeConflict
parameter_list|()
block|{
return|return
name|iAllowTimeConflict
return|;
block|}
specifier|public
name|boolean
name|isAllowOverLimit
parameter_list|()
block|{
return|return
name|iAllowOverLimit
return|;
block|}
specifier|public
name|Boolean
name|isExpired
parameter_list|()
block|{
return|return
name|iExpired
return|;
block|}
specifier|public
name|boolean
name|isCanHaveExpirationDate
parameter_list|()
block|{
return|return
name|iExpired
operator|==
literal|null
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReservationFilterRpcRequest
extends|extends
name|FilterRpcRequest
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|ReservationFilterRpcRequest
parameter_list|()
block|{
block|}
block|}
specifier|public
specifier|static
class|class
name|DefaultExpirationDates
implements|implements
name|GwtRpcResponse
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
name|iExpirations
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
name|iStartDates
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Date
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DefaultExpirationDates
parameter_list|()
block|{
block|}
specifier|public
name|Date
name|getExpirationDate
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|iExpirations
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasExpirationDate
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|getExpirationDate
argument_list|(
name|type
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setExpirationDate
parameter_list|(
name|String
name|type
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
name|iExpirations
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|iExpirations
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Date
name|getStartDate
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|iStartDates
operator|.
name|get
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasStartDate
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|getStartDate
argument_list|(
name|type
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStartDate
parameter_list|(
name|String
name|type
parameter_list|,
name|Date
name|date
parameter_list|)
block|{
if|if
condition|(
name|date
operator|==
literal|null
condition|)
name|iStartDates
operator|.
name|remove
argument_list|(
name|type
argument_list|)
expr_stmt|;
else|else
name|iStartDates
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|date
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iExpirations
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ReservationDefaultExpirationDatesRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|DefaultExpirationDates
argument_list|>
block|{
specifier|private
name|Long
name|iSessionId
init|=
literal|null
decl_stmt|;
specifier|public
name|ReservationDefaultExpirationDatesRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|ReservationDefaultExpirationDatesRpcRequest
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
specifier|public
name|void
name|setSessionId
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|iSessionId
operator|==
literal|null
condition|?
literal|"null"
else|:
name|iSessionId
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

