begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ContactInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|SessionMonth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TaskInterface
implements|implements
name|GwtRpcResponse
implements|,
name|Comparable
argument_list|<
name|TaskInterface
argument_list|>
block|{
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|,
name|iEmail
decl_stmt|;
specifier|private
name|ScriptInterface
name|iScript
decl_stmt|;
specifier|private
name|boolean
name|iCanEdit
init|=
literal|false
decl_stmt|,
name|iCanView
init|=
literal|false
decl_stmt|;
specifier|private
name|Date
name|iLastExecuted
decl_stmt|;
specifier|private
name|ExecutionStatus
name|iLastStatus
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ContactInterface
name|iOwner
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|iExecutions
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|ExecutionStatus
block|{
name|CREATED
block|,
name|QUEUED
block|,
name|RUNNING
block|,
name|FINISHED
block|,
name|FAILED
block|, 	}
specifier|public
name|TaskInterface
parameter_list|()
block|{
block|}
specifier|public
name|TaskInterface
parameter_list|(
name|TaskInterface
name|t
parameter_list|)
block|{
name|iId
operator|=
name|t
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iName
operator|=
name|t
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iEmail
operator|=
name|t
operator|.
name|getEmail
argument_list|()
expr_stmt|;
name|iScript
operator|=
name|t
operator|.
name|getScript
argument_list|()
expr_stmt|;
name|iCanEdit
operator|=
name|t
operator|.
name|canEdit
argument_list|()
expr_stmt|;
name|iCanView
operator|=
name|t
operator|.
name|canView
argument_list|()
expr_stmt|;
name|iLastExecuted
operator|=
name|t
operator|.
name|getLastExecuted
argument_list|()
expr_stmt|;
name|iLastStatus
operator|=
name|t
operator|.
name|getLastStatus
argument_list|()
expr_stmt|;
name|iParameters
operator|=
operator|(
name|t
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|t
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|iOwner
operator|=
name|t
operator|.
name|getOwner
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|getExecutions
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|TaskExecutionInterface
name|e
range|:
name|t
operator|.
name|getExecutions
argument_list|()
control|)
name|addExecution
argument_list|(
operator|new
name|TaskExecutionInterface
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getEmail
parameter_list|()
block|{
return|return
name|iEmail
return|;
block|}
specifier|public
name|void
name|setEmail
parameter_list|(
name|String
name|email
parameter_list|)
block|{
name|iEmail
operator|=
name|email
expr_stmt|;
block|}
specifier|public
name|ScriptInterface
name|getScript
parameter_list|()
block|{
return|return
name|iScript
return|;
block|}
specifier|public
name|void
name|setScript
parameter_list|(
name|ScriptInterface
name|script
parameter_list|)
block|{
name|iScript
operator|=
name|script
expr_stmt|;
block|}
specifier|public
name|boolean
name|canEdit
parameter_list|()
block|{
return|return
name|iCanEdit
return|;
block|}
specifier|public
name|void
name|setCanEdit
parameter_list|(
name|boolean
name|canEdit
parameter_list|)
block|{
name|iCanEdit
operator|=
name|canEdit
expr_stmt|;
block|}
specifier|public
name|boolean
name|canView
parameter_list|()
block|{
return|return
name|iCanView
return|;
block|}
specifier|public
name|void
name|setCanView
parameter_list|(
name|boolean
name|canView
parameter_list|)
block|{
name|iCanView
operator|=
name|canView
expr_stmt|;
block|}
specifier|public
name|Date
name|getLastExecuted
parameter_list|()
block|{
return|return
name|iLastExecuted
return|;
block|}
specifier|public
name|void
name|setLastExecuted
parameter_list|(
name|Date
name|lastExecuted
parameter_list|)
block|{
name|iLastExecuted
operator|=
name|lastExecuted
expr_stmt|;
block|}
specifier|public
name|ExecutionStatus
name|getLastStatus
parameter_list|()
block|{
return|return
name|iLastStatus
return|;
block|}
specifier|public
name|void
name|setLastStatus
parameter_list|(
name|ExecutionStatus
name|lastStatus
parameter_list|)
block|{
name|iLastStatus
operator|=
name|lastStatus
expr_stmt|;
block|}
specifier|public
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|iParameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|iParameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|iParameters
return|;
block|}
specifier|public
name|void
name|clearParameters
parameter_list|()
block|{
if|if
condition|(
name|iParameters
operator|!=
literal|null
condition|)
name|iParameters
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ContactInterface
name|getOwner
parameter_list|()
block|{
return|return
name|iOwner
return|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|ContactInterface
name|owner
parameter_list|)
block|{
name|iOwner
operator|=
name|owner
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasExecutions
parameter_list|()
block|{
return|return
name|iExecutions
operator|!=
literal|null
operator|&&
operator|!
name|iExecutions
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addExecution
parameter_list|(
name|TaskExecutionInterface
name|execution
parameter_list|)
block|{
if|if
condition|(
name|iExecutions
operator|==
literal|null
condition|)
name|iExecutions
operator|=
operator|new
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iExecutions
operator|.
name|add
argument_list|(
name|execution
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|getExecutions
parameter_list|()
block|{
return|return
name|iExecutions
return|;
block|}
specifier|public
name|void
name|setExecutions
parameter_list|(
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|Executions
parameter_list|)
block|{
name|iExecutions
operator|=
name|Executions
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasExecutionsOfStatus
parameter_list|(
name|ExecutionStatus
name|status
parameter_list|)
block|{
if|if
condition|(
name|iExecutions
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|TaskExecutionInterface
name|execution
range|:
name|iExecutions
control|)
if|if
condition|(
name|status
operator|==
name|execution
operator|.
name|getStatus
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|clearExecutions
parameter_list|()
block|{
if|if
condition|(
name|iExecutions
operator|!=
literal|null
condition|)
name|iExecutions
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TaskInterface
name|o
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getId
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
else|:
name|getId
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|o
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|TaskExecutionInterface
implements|implements
name|IsSerializable
implements|,
name|Comparable
argument_list|<
name|TaskExecutionInterface
argument_list|>
block|{
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|Integer
name|iDayOfYear
decl_stmt|;
specifier|private
name|Integer
name|iSlot
decl_stmt|;
specifier|private
name|ExecutionStatus
name|iStatus
decl_stmt|;
specifier|private
name|Date
name|iCreated
decl_stmt|,
name|iQueued
decl_stmt|,
name|iStarted
decl_stmt|,
name|iFinished
decl_stmt|;
specifier|private
name|String
name|iOutput
decl_stmt|;
specifier|private
name|Date
name|iExecutionDate
decl_stmt|;
specifier|private
name|int
name|iDayOfWeek
decl_stmt|;
specifier|private
name|String
name|iStatusMessage
decl_stmt|;
specifier|public
name|TaskExecutionInterface
parameter_list|()
block|{
block|}
specifier|public
name|TaskExecutionInterface
parameter_list|(
name|TaskExecutionInterface
name|e
parameter_list|)
block|{
name|iId
operator|=
name|e
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iDayOfYear
operator|=
name|e
operator|.
name|getDayOfYear
argument_list|()
expr_stmt|;
name|iSlot
operator|=
name|e
operator|.
name|getSlot
argument_list|()
expr_stmt|;
name|iStatus
operator|=
name|e
operator|.
name|getStatus
argument_list|()
expr_stmt|;
name|iCreated
operator|=
name|e
operator|.
name|getCreated
argument_list|()
expr_stmt|;
name|iQueued
operator|=
name|e
operator|.
name|getQueued
argument_list|()
expr_stmt|;
name|iStarted
operator|=
name|e
operator|.
name|getStarted
argument_list|()
expr_stmt|;
name|iFinished
operator|=
name|e
operator|.
name|getFinished
argument_list|()
expr_stmt|;
name|iOutput
operator|=
name|e
operator|.
name|getOutput
argument_list|()
expr_stmt|;
name|iExecutionDate
operator|=
name|e
operator|.
name|getExecutionDate
argument_list|()
expr_stmt|;
name|iDayOfWeek
operator|=
name|e
operator|.
name|getDayOfWeek
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Integer
name|getDayOfYear
parameter_list|()
block|{
return|return
name|iDayOfYear
return|;
block|}
specifier|public
name|boolean
name|hasDayOfYear
parameter_list|()
block|{
return|return
name|iDayOfYear
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDayOfYear
parameter_list|(
name|Integer
name|dayOfYear
parameter_list|)
block|{
name|iDayOfYear
operator|=
name|dayOfYear
expr_stmt|;
block|}
specifier|public
name|Integer
name|getSlot
parameter_list|()
block|{
return|return
name|iSlot
return|;
block|}
specifier|public
name|boolean
name|hasSlot
parameter_list|()
block|{
return|return
name|iSlot
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSlot
parameter_list|(
name|Integer
name|slot
parameter_list|)
block|{
name|iSlot
operator|=
name|slot
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasStatus
parameter_list|()
block|{
return|return
name|iStatus
operator|!=
literal|null
return|;
block|}
specifier|public
name|ExecutionStatus
name|getStatus
parameter_list|()
block|{
return|return
name|iStatus
return|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|ExecutionStatus
name|status
parameter_list|)
block|{
name|iStatus
operator|=
name|status
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasCreated
parameter_list|()
block|{
return|return
name|iCreated
operator|!=
literal|null
return|;
block|}
specifier|public
name|Date
name|getCreated
parameter_list|()
block|{
return|return
name|iCreated
return|;
block|}
specifier|public
name|void
name|setCreated
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iCreated
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasQueued
parameter_list|()
block|{
return|return
name|iQueued
operator|!=
literal|null
return|;
block|}
specifier|public
name|Date
name|getQueued
parameter_list|()
block|{
return|return
name|iQueued
return|;
block|}
specifier|public
name|void
name|setQueued
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iQueued
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasStarted
parameter_list|()
block|{
return|return
name|iStarted
operator|!=
literal|null
return|;
block|}
specifier|public
name|Date
name|getStarted
parameter_list|()
block|{
return|return
name|iStarted
return|;
block|}
specifier|public
name|void
name|setStarted
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iStarted
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasFinished
parameter_list|()
block|{
return|return
name|iFinished
operator|!=
literal|null
return|;
block|}
specifier|public
name|Date
name|getFinished
parameter_list|()
block|{
return|return
name|iFinished
return|;
block|}
specifier|public
name|void
name|setFinished
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iFinished
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasOutput
parameter_list|()
block|{
return|return
name|iOutput
operator|!=
literal|null
operator|&&
operator|!
name|iOutput
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getOutput
parameter_list|()
block|{
return|return
name|iOutput
return|;
block|}
specifier|public
name|void
name|setOutput
parameter_list|(
name|String
name|output
parameter_list|)
block|{
name|iOutput
operator|=
name|output
expr_stmt|;
block|}
specifier|public
name|Date
name|getExecutionDate
parameter_list|()
block|{
return|return
name|iExecutionDate
return|;
block|}
specifier|public
name|void
name|setExecutionDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iExecutionDate
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
return|return
name|iDayOfWeek
return|;
block|}
specifier|public
name|void
name|setDayOfWeek
parameter_list|(
name|int
name|dayOfWeek
parameter_list|)
block|{
name|iDayOfWeek
operator|=
name|dayOfWeek
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasStatusMessage
parameter_list|()
block|{
return|return
name|iStatusMessage
operator|!=
literal|null
operator|&&
operator|!
name|iStatusMessage
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setStatusMessage
parameter_list|(
name|String
name|statusMessage
parameter_list|)
block|{
name|iStatusMessage
operator|=
name|statusMessage
expr_stmt|;
block|}
specifier|public
name|String
name|getStatusMessage
parameter_list|()
block|{
return|return
name|iStatusMessage
return|;
block|}
specifier|public
name|boolean
name|isPast
parameter_list|()
block|{
return|return
name|hasFinished
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExecutionTime
parameter_list|(
name|GwtConstants
name|constants
parameter_list|)
block|{
name|int
name|min
init|=
literal|5
operator|*
name|iSlot
decl_stmt|;
name|int
name|h
init|=
name|min
operator|/
literal|60
decl_stmt|;
name|int
name|m
init|=
name|min
operator|%
literal|60
decl_stmt|;
if|if
condition|(
name|constants
operator|!=
literal|null
operator|&&
name|min
operator|==
literal|0
condition|)
return|return
name|constants
operator|.
name|timeMidnight
argument_list|()
return|;
if|if
condition|(
name|constants
operator|!=
literal|null
operator|&&
name|min
operator|==
literal|720
condition|)
return|return
name|constants
operator|.
name|timeNoon
argument_list|()
return|;
if|if
condition|(
name|constants
operator|==
literal|null
operator|||
name|constants
operator|.
name|useAmPm
argument_list|()
condition|)
block|{
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
literal|"a"
else|:
name|h
operator|>=
literal|12
condition|?
literal|"p"
else|:
literal|"a"
operator|)
return|;
block|}
else|else
block|{
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TaskExecutionInterface
name|exec
parameter_list|)
block|{
name|int
name|cmp
init|=
name|getDayOfYear
argument_list|()
operator|.
name|compareTo
argument_list|(
name|exec
operator|.
name|getDayOfYear
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|getSlot
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|exec
operator|.
name|getSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|getId
argument_list|()
operator|==
literal|null
condition|?
name|exec
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|exec
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|getId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|exec
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MultiExecutionInterface
implements|implements
name|Comparable
argument_list|<
name|MultiExecutionInterface
argument_list|>
implements|,
name|IsSerializable
block|{
specifier|private
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|iExecutions
decl_stmt|;
specifier|private
name|boolean
name|iPast
init|=
literal|false
decl_stmt|;
specifier|public
name|MultiExecutionInterface
parameter_list|(
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|executions
parameter_list|,
name|boolean
name|past
parameter_list|)
block|{
name|iExecutions
operator|=
name|executions
expr_stmt|;
name|iPast
operator|=
name|past
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPast
parameter_list|()
block|{
return|return
name|iPast
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|getExecutions
parameter_list|()
block|{
return|return
name|iExecutions
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|MultiExecutionInterface
name|m
parameter_list|)
block|{
return|return
name|getExecutions
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|compareTo
argument_list|(
name|m
operator|.
name|getExecutions
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|()
block|{
return|return
name|getDays
argument_list|(
literal|0
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Mon"
block|,
literal|"Tue"
block|,
literal|"Wed"
block|,
literal|"Thu"
block|,
literal|"Fri"
block|,
literal|"Sat"
block|,
literal|"Sun"
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"Th"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"Su"
block|}
argument_list|,
literal|"Daily"
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|(
name|int
name|firstDayOfWeek
parameter_list|,
name|GwtConstants
name|constants
parameter_list|)
block|{
return|return
name|getDays
argument_list|(
name|firstDayOfWeek
argument_list|,
name|constants
operator|.
name|days
argument_list|()
argument_list|,
name|constants
operator|.
name|shortDays
argument_list|()
argument_list|,
name|constants
operator|.
name|daily
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|(
name|int
name|firstDayOfWeek
parameter_list|,
name|String
index|[]
name|dayNames
parameter_list|,
name|String
index|[]
name|shortDyNames
parameter_list|,
name|String
name|daily
parameter_list|)
block|{
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
name|int
name|dayCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|meeting
range|:
name|getExecutions
argument_list|()
control|)
block|{
name|int
name|dc
init|=
operator|(
literal|1
operator|<<
name|meeting
operator|.
name|getDayOfWeek
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
name|dc
operator|)
operator|==
literal|0
condition|)
name|nrDays
operator|++
expr_stmt|;
name|dayCode
operator||=
name|dc
expr_stmt|;
block|}
if|if
condition|(
name|nrDays
operator|==
literal|7
condition|)
return|return
name|daily
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|firstDayOfWeek
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|(
name|dayCode
operator|&
operator|(
literal|1
operator|<<
name|d
operator|)
operator|)
operator|!=
literal|0
condition|)
name|ret
operator|+=
operator|(
name|nrDays
operator|==
literal|1
condition|?
name|dayNames
else|:
name|shortDyNames
operator|)
index|[
name|d
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Date
name|getFirstExecutionDate
parameter_list|()
block|{
return|return
name|iExecutions
operator|.
name|first
argument_list|()
operator|.
name|getExecutionDate
argument_list|()
return|;
block|}
specifier|public
name|Date
name|getLastExecutionDate
parameter_list|()
block|{
return|return
name|iExecutions
operator|.
name|last
argument_list|()
operator|.
name|getExecutionDate
argument_list|()
return|;
block|}
specifier|public
name|String
name|getExecutionTime
parameter_list|(
name|GwtConstants
name|constants
parameter_list|)
block|{
return|return
name|iExecutions
operator|.
name|first
argument_list|()
operator|.
name|getExecutionTime
argument_list|(
name|constants
argument_list|)
return|;
block|}
specifier|public
name|int
name|getNrMeetings
parameter_list|()
block|{
return|return
name|iExecutions
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|ExecutionStatus
name|getStatus
parameter_list|()
block|{
return|return
name|iExecutions
operator|.
name|first
argument_list|()
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|TreeSet
argument_list|<
name|MultiExecutionInterface
argument_list|>
name|getMultiExecutions
parameter_list|(
name|Collection
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|executions
parameter_list|,
name|boolean
name|checkPast
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|MultiExecutionInterface
argument_list|>
name|ret
init|=
operator|new
name|TreeSet
argument_list|<
name|MultiExecutionInterface
argument_list|>
argument_list|()
decl_stmt|;
name|HashSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|executionSet
init|=
operator|(
name|executions
operator|==
literal|null
condition|?
operator|new
name|HashSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|()
else|:
operator|new
name|HashSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|(
name|executions
argument_list|)
operator|)
decl_stmt|;
while|while
condition|(
operator|!
name|executionSet
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TaskExecutionInterface
name|execution
init|=
literal|null
decl_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|t
range|:
name|executionSet
control|)
if|if
condition|(
name|execution
operator|==
literal|null
operator|||
name|execution
operator|.
name|compareTo
argument_list|(
name|t
argument_list|)
operator|>
literal|0
condition|)
name|execution
operator|=
name|t
expr_stmt|;
name|executionSet
operator|.
name|remove
argument_list|(
name|execution
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|TaskExecutionInterface
argument_list|>
name|similar
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|TaskExecutionInterface
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Integer
argument_list|>
name|dow
init|=
operator|new
name|TreeSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|dow
operator|.
name|add
argument_list|(
name|execution
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|TaskExecutionInterface
name|m
range|:
name|executionSet
control|)
block|{
if|if
condition|(
name|m
operator|.
name|getExecutionTime
argument_list|(
literal|null
argument_list|)
operator|.
name|equals
argument_list|(
name|execution
operator|.
name|getExecutionTime
argument_list|(
literal|null
argument_list|)
argument_list|)
operator|&&
operator|(
operator|!
name|checkPast
operator|||
name|m
operator|.
name|isPast
argument_list|()
operator|==
name|execution
operator|.
name|isPast
argument_list|()
operator|)
operator|&&
operator|(
name|m
operator|.
name|getStatus
argument_list|()
operator|==
name|execution
operator|.
name|getStatus
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|m
operator|.
name|getDayOfYear
argument_list|()
operator|-
name|execution
operator|.
name|getDayOfYear
argument_list|()
operator|<
literal|7
condition|)
name|dow
operator|.
name|add
argument_list|(
name|m
operator|.
name|getDayOfWeek
argument_list|()
argument_list|)
expr_stmt|;
name|similar
operator|.
name|put
argument_list|(
name|m
operator|.
name|getDayOfYear
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
name|multi
init|=
operator|new
name|TreeSet
argument_list|<
name|TaskExecutionInterface
argument_list|>
argument_list|()
decl_stmt|;
name|multi
operator|.
name|add
argument_list|(
name|execution
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|similar
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|w
init|=
name|execution
operator|.
name|getDayOfWeek
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|execution
operator|.
name|getDayOfYear
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
do|do
block|{
name|y
operator|++
expr_stmt|;
name|w
operator|=
operator|(
name|w
operator|+
literal|1
operator|)
operator|%
literal|7
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|dow
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
do|;
name|TaskExecutionInterface
name|m
init|=
name|similar
operator|.
name|get
argument_list|(
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
break|break;
name|multi
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|executionSet
operator|.
name|remove
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|.
name|add
argument_list|(
operator|new
name|MultiExecutionInterface
argument_list|(
name|multi
argument_list|,
name|execution
operator|.
name|isPast
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
specifier|static
class|class
name|TaskOptionsInterface
implements|implements
name|GwtRpcResponse
block|{
specifier|private
name|boolean
name|iCanAdd
decl_stmt|;
specifier|private
name|ContactInterface
name|iManager
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ScriptInterface
argument_list|>
name|iScripts
init|=
operator|new
name|ArrayList
argument_list|<
name|ScriptInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|AcademicSessionInfo
name|iSession
decl_stmt|;
specifier|private
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|iMonths
init|=
operator|new
name|ArrayList
argument_list|<
name|SessionMonth
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iFirstDayOfWeek
init|=
literal|0
decl_stmt|;
specifier|public
name|TaskOptionsInterface
parameter_list|()
block|{
block|}
specifier|public
name|void
name|addScript
parameter_list|(
name|ScriptInterface
name|script
parameter_list|)
block|{
name|iScripts
operator|.
name|add
argument_list|(
name|script
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|ScriptInterface
argument_list|>
name|getScripts
parameter_list|()
block|{
return|return
name|iScripts
return|;
block|}
specifier|public
name|void
name|setSession
parameter_list|(
name|AcademicSessionInfo
name|session
parameter_list|)
block|{
name|iSession
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|AcademicSessionInfo
name|getSession
parameter_list|()
block|{
return|return
name|iSession
return|;
block|}
specifier|public
name|boolean
name|canAdd
parameter_list|()
block|{
return|return
name|iCanAdd
return|;
block|}
specifier|public
name|void
name|setCanAdd
parameter_list|(
name|boolean
name|canAdd
parameter_list|)
block|{
name|iCanAdd
operator|=
name|canAdd
expr_stmt|;
block|}
specifier|public
name|ContactInterface
name|getManager
parameter_list|()
block|{
return|return
name|iManager
return|;
block|}
specifier|public
name|void
name|setManager
parameter_list|(
name|ContactInterface
name|manager
parameter_list|)
block|{
name|iManager
operator|=
name|manager
expr_stmt|;
block|}
specifier|public
name|void
name|setSessionMonth
parameter_list|(
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|months
parameter_list|)
block|{
name|iMonths
operator|=
name|months
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|SessionMonth
argument_list|>
name|getSessionMonths
parameter_list|()
block|{
return|return
name|iMonths
return|;
block|}
specifier|public
name|int
name|getFirstDayOfWeek
parameter_list|()
block|{
return|return
name|iFirstDayOfWeek
return|;
block|}
specifier|public
name|void
name|setFirstDayOfWeek
parameter_list|(
name|int
name|firstDayOfWeek
parameter_list|)
block|{
name|iFirstDayOfWeek
operator|=
name|firstDayOfWeek
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GetTasksRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|TaskInterface
argument_list|>
argument_list|>
block|{
specifier|public
name|GetTasksRpcRequest
parameter_list|()
block|{
block|}
block|}
specifier|public
specifier|static
class|class
name|GetTaskExecutionLogRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|TaskExecutionLogInterface
argument_list|>
block|{
specifier|private
name|Long
name|iTaskExecutionId
decl_stmt|;
specifier|public
name|GetTaskExecutionLogRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|GetTaskExecutionLogRpcRequest
parameter_list|(
name|Long
name|execId
parameter_list|)
block|{
name|iTaskExecutionId
operator|=
name|execId
expr_stmt|;
block|}
specifier|public
name|Long
name|getTaskExecutionId
parameter_list|()
block|{
return|return
name|iTaskExecutionId
return|;
block|}
specifier|public
name|void
name|setTaskExecutionId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iTaskExecutionId
operator|=
name|id
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TaskExecutionLogInterface
implements|implements
name|GwtRpcResponse
block|{
name|String
name|iLog
decl_stmt|;
specifier|public
name|TaskExecutionLogInterface
parameter_list|()
block|{
block|}
specifier|public
name|TaskExecutionLogInterface
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|iLog
operator|=
name|log
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasLog
parameter_list|()
block|{
return|return
name|iLog
operator|!=
literal|null
operator|&&
operator|!
name|iLog
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLog
parameter_list|()
block|{
return|return
name|iLog
return|;
block|}
specifier|public
name|void
name|setLog
parameter_list|(
name|String
name|log
parameter_list|)
block|{
name|iLog
operator|=
name|log
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SaveTaskDetailsRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|TaskInterface
argument_list|>
block|{
specifier|private
name|TaskInterface
name|iTask
decl_stmt|;
specifier|public
name|SaveTaskDetailsRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|SaveTaskDetailsRpcRequest
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
name|iTask
operator|=
name|task
expr_stmt|;
block|}
specifier|public
name|TaskInterface
name|getTask
parameter_list|()
block|{
return|return
name|iTask
return|;
block|}
specifier|public
name|void
name|setTask
parameter_list|(
name|TaskInterface
name|task
parameter_list|)
block|{
name|iTask
operator|=
name|task
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DeleteTaskDetailsRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|TaskInterface
argument_list|>
block|{
specifier|private
name|Long
name|iTaskId
decl_stmt|;
specifier|public
name|DeleteTaskDetailsRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|DeleteTaskDetailsRpcRequest
parameter_list|(
name|Long
name|taskId
parameter_list|)
block|{
name|iTaskId
operator|=
name|taskId
expr_stmt|;
block|}
specifier|public
name|Long
name|getTaskId
parameter_list|()
block|{
return|return
name|iTaskId
return|;
block|}
specifier|public
name|void
name|setTaskId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iTaskId
operator|=
name|id
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GetTaskOptionsRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|TaskOptionsInterface
argument_list|>
block|{
specifier|public
name|GetTaskOptionsRpcRequest
parameter_list|()
block|{
block|}
block|}
block|}
end_class

end_unit

