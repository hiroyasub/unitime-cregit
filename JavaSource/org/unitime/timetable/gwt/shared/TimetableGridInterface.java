begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|HasPageMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|IsSerializable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableGridInterface
implements|implements
name|GwtRpcResponse
block|{
specifier|public
specifier|static
class|class
name|TimetableGridFilterRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|TimetableGridFilterResponse
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TimetableGridFilterResponse
extends|extends
name|FilterInterface
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TimetableGridRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|TimetableGridResponse
argument_list|>
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
specifier|private
name|FilterInterface
name|iFilter
decl_stmt|;
specifier|public
name|FilterInterface
name|getFilter
parameter_list|()
block|{
return|return
name|iFilter
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|FilterInterface
name|filter
parameter_list|)
block|{
name|iFilter
operator|=
name|filter
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimetableGridResponse
implements|implements
name|GwtRpcResponse
implements|,
name|Serializable
implements|,
name|HasPageMessages
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimetableGridModel
argument_list|>
name|iModels
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridModel
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iDefaultDatePatternName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PageMessage
argument_list|>
name|iPageMessages
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimetableGridLegend
argument_list|>
name|iAssignedLegend
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridLegend
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimetableGridLegend
argument_list|>
name|iNotAssignedLegend
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridLegend
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iWeekOffset
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|addModel
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|)
block|{
name|iModels
operator|.
name|add
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TimetableGridModel
argument_list|>
name|getModels
parameter_list|()
block|{
return|return
name|iModels
return|;
block|}
specifier|public
name|void
name|setDefaultDatePatternName
parameter_list|(
name|String
name|datePatternName
parameter_list|)
block|{
name|iDefaultDatePatternName
operator|=
name|datePatternName
expr_stmt|;
block|}
specifier|public
name|String
name|getDefaultDatePatternName
parameter_list|()
block|{
return|return
name|iDefaultDatePatternName
return|;
block|}
specifier|public
name|boolean
name|hasPageMessages
parameter_list|()
block|{
return|return
name|iPageMessages
operator|!=
literal|null
operator|&&
operator|!
name|iPageMessages
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|PageMessage
argument_list|>
name|getPageMessages
parameter_list|()
block|{
return|return
name|iPageMessages
return|;
block|}
specifier|public
name|void
name|addPageMessage
parameter_list|(
name|PageMessage
name|message
parameter_list|)
block|{
if|if
condition|(
name|iPageMessages
operator|==
literal|null
condition|)
name|iPageMessages
operator|=
operator|new
name|ArrayList
argument_list|<
name|PageMessage
argument_list|>
argument_list|()
expr_stmt|;
name|iPageMessages
operator|.
name|add
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addAssignedLegend
parameter_list|(
name|String
name|color
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|iAssignedLegend
operator|.
name|add
argument_list|(
operator|new
name|TimetableGridLegend
argument_list|(
name|color
argument_list|,
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TimetableGridLegend
argument_list|>
name|getAssignedLegend
parameter_list|()
block|{
return|return
name|iAssignedLegend
return|;
block|}
specifier|public
name|void
name|addNotAssignedLegend
parameter_list|(
name|String
name|color
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|iNotAssignedLegend
operator|.
name|add
argument_list|(
operator|new
name|TimetableGridLegend
argument_list|(
name|color
argument_list|,
name|label
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TimetableGridLegend
argument_list|>
name|getNotAssignedLegend
parameter_list|()
block|{
return|return
name|iNotAssignedLegend
return|;
block|}
specifier|public
name|int
name|getWeekOffset
parameter_list|()
block|{
return|return
name|iWeekOffset
return|;
block|}
specifier|public
name|void
name|setWeekOffset
parameter_list|(
name|int
name|weekOffset
parameter_list|)
block|{
name|iWeekOffset
operator|=
name|weekOffset
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimetableGridModel
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
specifier|private
name|int
name|iResourceType
decl_stmt|;
specifier|private
name|Long
name|iResourceId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|iCells
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridCell
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TimetableGridBackground
argument_list|>
name|iBackgrounds
init|=
operator|new
name|ArrayList
argument_list|<
name|TimetableGridBackground
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|int
name|iSize
init|=
literal|0
decl_stmt|;
specifier|private
name|Long
name|iType
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iFirstDay
init|=
operator|-
literal|1
decl_stmt|,
name|iFirstSessionDay
init|=
literal|0
decl_stmt|;
specifier|private
name|double
name|iUtilization
init|=
literal|0.0
decl_stmt|;
specifier|private
name|Date
name|iFirstDate
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iNameColor
init|=
literal|null
decl_stmt|;
specifier|public
name|TimetableGridModel
parameter_list|()
block|{
block|}
specifier|public
name|TimetableGridModel
parameter_list|(
name|int
name|resourceType
parameter_list|,
name|long
name|resourceId
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|iResourceType
operator|=
name|resourceType
expr_stmt|;
name|iResourceId
operator|=
name|resourceId
expr_stmt|;
block|}
specifier|public
name|int
name|getResourceType
parameter_list|()
block|{
return|return
name|iResourceType
return|;
block|}
specifier|public
name|Long
name|getResourceId
parameter_list|()
block|{
return|return
name|iResourceId
return|;
block|}
specifier|public
name|void
name|setFirstDay
parameter_list|(
name|int
name|firstDay
parameter_list|)
block|{
name|iFirstDay
operator|=
name|firstDay
expr_stmt|;
block|}
specifier|public
name|int
name|getFirstDay
parameter_list|()
block|{
return|return
name|iFirstDay
return|;
block|}
specifier|public
name|void
name|setFirstSessionDay
parameter_list|(
name|int
name|firstDay
parameter_list|)
block|{
name|iFirstSessionDay
operator|=
name|firstDay
expr_stmt|;
block|}
specifier|public
name|int
name|getFirstSessionDay
parameter_list|()
block|{
return|return
name|iFirstSessionDay
return|;
block|}
specifier|public
name|void
name|setFirstDate
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
name|iFirstDate
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|Date
name|getFirstDate
parameter_list|()
block|{
return|return
name|iFirstDate
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|boolean
name|hasNameColor
parameter_list|()
block|{
return|return
name|iNameColor
operator|!=
literal|null
operator|&&
operator|!
name|iNameColor
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setNameColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|iNameColor
operator|=
name|color
expr_stmt|;
block|}
specifier|public
name|String
name|getNameColor
parameter_list|()
block|{
return|return
name|iNameColor
return|;
block|}
specifier|public
name|void
name|setSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|iSize
operator|=
name|size
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|iSize
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Long
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|Long
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setUtilization
parameter_list|(
name|double
name|utilization
parameter_list|)
block|{
name|iUtilization
operator|=
name|utilization
expr_stmt|;
block|}
specifier|public
name|double
name|getUtilization
parameter_list|()
block|{
return|return
name|iUtilization
return|;
block|}
specifier|public
name|void
name|addCell
parameter_list|(
name|TimetableGridCell
name|cell
parameter_list|)
block|{
name|iCells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TimetableGridCell
argument_list|>
name|getCells
parameter_list|()
block|{
return|return
name|iCells
return|;
block|}
specifier|public
name|void
name|addBackground
parameter_list|(
name|TimetableGridBackground
name|background
parameter_list|)
block|{
name|iBackgrounds
operator|.
name|add
argument_list|(
name|background
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TimetableGridBackground
argument_list|>
name|getBackgrounds
parameter_list|()
block|{
return|return
name|iBackgrounds
return|;
block|}
specifier|public
name|int
name|getNrLines
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|minLines
parameter_list|)
block|{
name|int
name|lines
init|=
name|minLines
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|getCells
argument_list|()
control|)
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
operator|&&
name|cell
operator|.
name|getIndex
argument_list|()
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|>
name|lines
condition|)
name|lines
operator|=
name|cell
operator|.
name|getIndex
argument_list|()
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
expr_stmt|;
return|return
name|lines
return|;
block|}
specifier|public
name|int
name|getNrDateLines
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|date
parameter_list|,
name|int
name|minLines
parameter_list|)
block|{
name|int
name|lines
init|=
name|minLines
decl_stmt|;
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|getCells
argument_list|()
control|)
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
operator|&&
name|cell
operator|.
name|getIndex
argument_list|()
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|>
name|lines
operator|&&
name|cell
operator|.
name|hasDate
argument_list|(
name|date
argument_list|)
condition|)
name|lines
operator|=
name|cell
operator|.
name|getIndex
argument_list|()
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
expr_stmt|;
return|return
name|lines
return|;
block|}
specifier|public
name|boolean
name|hasDate
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|date
parameter_list|)
block|{
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|getCells
argument_list|()
control|)
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
operator|&&
name|cell
operator|.
name|hasDate
argument_list|(
name|date
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isAvailable
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|slot
parameter_list|)
block|{
for|for
control|(
name|TimetableGridBackground
name|bg
range|:
name|getBackgrounds
argument_list|()
control|)
if|if
condition|(
operator|!
name|bg
operator|.
name|isAvailable
argument_list|()
operator|&&
name|bg
operator|.
name|getDay
argument_list|()
operator|==
name|day
operator|&&
name|bg
operator|.
name|getSlot
argument_list|()
operator|<=
name|slot
operator|&&
name|slot
operator|<
name|bg
operator|.
name|getSlot
argument_list|()
operator|+
name|bg
operator|.
name|getLength
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimetableGridCell
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|TimetableGridCell
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
specifier|private
name|Type
name|iType
decl_stmt|;
specifier|private
name|Long
name|iId
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iTitles
decl_stmt|;
specifier|private
name|String
name|iDate
decl_stmt|;
specifier|private
name|String
name|iTime
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iInstructors
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|iRooms
decl_stmt|;
specifier|private
name|String
name|iPreference
decl_stmt|;
specifier|private
name|int
name|iDay
decl_stmt|,
name|iSlot
decl_stmt|,
name|iLength
decl_stmt|;
specifier|private
name|String
name|iWeekCode
decl_stmt|;
specifier|private
name|Integer
name|iNrLines
init|=
literal|null
decl_stmt|,
name|iIndex
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iBackground
decl_stmt|;
specifier|private
name|boolean
name|iItalics
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|iGroup
decl_stmt|;
specifier|private
name|boolean
name|iCommitted
init|=
literal|false
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|iProperties
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iDays
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Type
implements|implements
name|IsSerializable
block|{
name|Class
block|,
name|Event
block|, 			; 		}
specifier|public
specifier|static
enum|enum
name|Property
implements|implements
name|IsSerializable
block|{
name|TimePreference
block|,
name|StudentConflicts
block|,
name|StudentConflictsHard
block|,
name|StudentConflictsCommitted
block|,
name|StudentConflictsDistance
block|,
name|RoomPreference
block|,
name|InstructorPreference
block|,
name|InitialAssignment
block|,
name|PerturbationPenalty
block|,
name|DepartmentBalance
block|,
name|DistributionPreference
block|,
name|Owner
block|,
name|NonConflictingPlacements
block|,
name|EventType
block|, 			; 		}
specifier|public
name|TimetableGridCell
parameter_list|()
block|{
block|}
specifier|public
name|TimetableGridCell
parameter_list|(
name|TimetableGridCell
name|cell
parameter_list|,
name|int
name|day
parameter_list|,
name|String
name|date
parameter_list|)
block|{
name|iType
operator|=
name|cell
operator|.
name|iType
expr_stmt|;
name|iId
operator|=
name|cell
operator|.
name|iId
expr_stmt|;
name|iNames
operator|=
operator|(
name|cell
operator|.
name|iNames
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cell
operator|.
name|iNames
argument_list|)
operator|)
expr_stmt|;
name|iTitles
operator|=
operator|(
name|cell
operator|.
name|iTitles
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cell
operator|.
name|iTitles
argument_list|)
operator|)
expr_stmt|;
name|iDate
operator|=
name|date
expr_stmt|;
name|iTime
operator|=
name|cell
operator|.
name|iTime
expr_stmt|;
name|iInstructors
operator|=
operator|(
name|cell
operator|.
name|iInstructors
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cell
operator|.
name|iInstructors
argument_list|)
operator|)
expr_stmt|;
name|iRooms
operator|=
operator|(
name|cell
operator|.
name|iRooms
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|cell
operator|.
name|iRooms
argument_list|)
operator|)
expr_stmt|;
name|iPreference
operator|=
name|cell
operator|.
name|iPreference
expr_stmt|;
name|iProperties
operator|=
name|cell
operator|.
name|iProperties
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|iSlot
operator|=
name|cell
operator|.
name|iSlot
expr_stmt|;
name|iLength
operator|=
name|cell
operator|.
name|iLength
expr_stmt|;
name|iWeekCode
operator|=
name|cell
operator|.
name|iWeekCode
expr_stmt|;
name|iBackground
operator|=
name|cell
operator|.
name|iBackground
expr_stmt|;
name|iItalics
operator|=
name|cell
operator|.
name|iItalics
expr_stmt|;
name|iGroup
operator|=
name|cell
operator|.
name|iGroup
expr_stmt|;
name|iDays
operator|=
name|cell
operator|.
name|iDays
expr_stmt|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasType
parameter_list|()
block|{
return|return
name|iType
operator|!=
literal|null
return|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|boolean
name|hasId
parameter_list|()
block|{
return|return
name|iId
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|clearName
parameter_list|()
block|{
name|iNames
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|addName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iNames
operator|==
literal|null
condition|)
name|iNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrNames
parameter_list|()
block|{
return|return
name|iNames
operator|==
literal|null
condition|?
literal|0
else|:
name|iNames
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNames
parameter_list|()
block|{
return|return
name|iNames
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|iNames
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|iNames
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|delim
operator|)
operator|+
name|name
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|addTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
if|if
condition|(
name|iTitles
operator|==
literal|null
condition|)
name|iTitles
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iTitles
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrTitles
parameter_list|()
block|{
return|return
name|iTitles
operator|==
literal|null
condition|?
literal|0
else|:
name|iTitles
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTitles
parameter_list|()
block|{
return|return
name|iTitles
return|;
block|}
specifier|public
name|String
name|getTitle
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|iTitles
operator|==
literal|null
operator|||
name|iTitles
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|getName
argument_list|(
name|delim
argument_list|)
return|;
if|if
condition|(
name|iTitles
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|iTitles
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|delim
operator|)
operator|+
name|name
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getDate
parameter_list|()
block|{
return|return
name|iDate
return|;
block|}
specifier|public
name|void
name|setDate
parameter_list|(
name|String
name|date
parameter_list|)
block|{
name|iDate
operator|=
name|date
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasDate
parameter_list|()
block|{
return|return
name|iDate
operator|!=
literal|null
operator|&&
operator|!
name|iDate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getTime
parameter_list|()
block|{
return|return
name|iTime
return|;
block|}
specifier|public
name|void
name|setTime
parameter_list|(
name|String
name|time
parameter_list|)
block|{
name|iTime
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTime
parameter_list|()
block|{
return|return
name|iTime
operator|!=
literal|null
operator|&&
operator|!
name|iTime
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getDays
parameter_list|()
block|{
return|return
name|iDays
return|;
block|}
specifier|public
name|void
name|setDays
parameter_list|(
name|String
name|days
parameter_list|)
block|{
name|iDays
operator|=
name|days
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasDays
parameter_list|()
block|{
return|return
name|iDays
operator|!=
literal|null
operator|&&
operator|!
name|iDays
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addInstructor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
name|iInstructors
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iInstructors
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrInstructors
parameter_list|()
block|{
return|return
name|iInstructors
operator|==
literal|null
condition|?
literal|0
else|:
name|iInstructors
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getInstructors
parameter_list|()
block|{
return|return
name|iInstructors
return|;
block|}
specifier|public
name|String
name|getInstructor
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|iInstructors
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|delim
operator|)
operator|+
name|name
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|resetInstructors
parameter_list|()
block|{
name|iInstructors
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setWeekCode
parameter_list|(
name|String
name|weekCode
parameter_list|)
block|{
name|iWeekCode
operator|=
name|weekCode
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasWeekCode
parameter_list|()
block|{
return|return
name|iWeekCode
operator|!=
literal|null
operator|&&
operator|!
name|iWeekCode
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iWeekCode
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
return|;
block|}
specifier|public
name|String
name|getWeekCode
parameter_list|()
block|{
return|return
name|iWeekCode
return|;
block|}
specifier|public
name|boolean
name|getWeekCode
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|iWeekCode
operator|!=
literal|null
operator|&&
name|n
operator|<
name|iWeekCode
operator|.
name|length
argument_list|()
operator|&&
name|iWeekCode
operator|.
name|charAt
argument_list|(
name|n
argument_list|)
operator|==
literal|'1'
return|;
block|}
specifier|public
name|int
name|getWeekCodeNextBitSet
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
name|iWeekCode
operator|!=
literal|null
operator|&&
name|n
operator|<
name|iWeekCode
operator|.
name|length
argument_list|()
condition|?
name|iWeekCode
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|,
name|n
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|getFirstDate
parameter_list|()
block|{
return|return
name|iWeekCode
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|iWeekCode
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasDate
parameter_list|(
name|int
name|n
parameter_list|)
block|{
return|return
operator|(
name|iWeekCode
operator|==
literal|null
operator|||
name|iWeekCode
operator|.
name|length
argument_list|()
operator|<=
name|n
condition|?
literal|false
else|:
name|iWeekCode
operator|.
name|charAt
argument_list|(
name|n
argument_list|)
operator|==
literal|'1'
operator|)
return|;
block|}
specifier|public
name|void
name|addRoom
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
name|iRooms
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iRooms
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrRooms
parameter_list|()
block|{
return|return
name|iRooms
operator|==
literal|null
condition|?
name|hasGroup
argument_list|()
condition|?
literal|1
else|:
literal|0
else|:
name|iRooms
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getRooms
parameter_list|()
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
operator|||
name|iRooms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasGroup
argument_list|()
condition|)
name|rooms
operator|.
name|add
argument_list|(
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rooms
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|iRooms
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasGroup
argument_list|()
condition|)
name|rooms
operator|.
name|set
argument_list|(
name|rooms
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|rooms
operator|.
name|get
argument_list|(
name|rooms
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
literal|" "
operator|+
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rooms
return|;
block|}
block|}
specifier|public
name|String
name|getRoom
parameter_list|(
name|String
name|delim
parameter_list|)
block|{
if|if
condition|(
name|iRooms
operator|==
literal|null
condition|)
return|return
operator|(
name|hasGroup
argument_list|()
condition|?
name|getGroup
argument_list|()
else|:
literal|""
operator|)
return|;
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|iRooms
control|)
name|ret
operator|+=
operator|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|delim
operator|)
operator|+
name|name
expr_stmt|;
if|if
condition|(
name|hasGroup
argument_list|()
condition|)
name|ret
operator|+=
literal|" "
operator|+
name|getGroup
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|getPreference
parameter_list|()
block|{
return|return
name|iPreference
return|;
block|}
specifier|public
name|void
name|setPreference
parameter_list|(
name|String
name|preference
parameter_list|)
block|{
name|iPreference
operator|=
name|preference
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasPreference
parameter_list|()
block|{
return|return
name|iPreference
operator|!=
literal|null
operator|&&
operator|!
name|iPreference
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasProperties
parameter_list|()
block|{
return|return
name|iProperties
operator|!=
literal|null
operator|&&
operator|!
name|iProperties
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|Property
name|p
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|iProperties
operator|==
literal|null
condition|)
name|iProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iProperties
operator|.
name|put
argument_list|(
name|p
operator|.
name|ordinal
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|Property
name|p
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|iProperties
operator|==
literal|null
condition|)
name|iProperties
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iProperties
operator|.
name|put
argument_list|(
name|p
operator|.
name|ordinal
argument_list|()
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|Property
name|p
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
if|if
condition|(
name|iProperties
operator|==
literal|null
condition|)
return|return
name|defaultValue
return|;
name|String
name|value
init|=
name|iProperties
operator|.
name|get
argument_list|(
name|p
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|value
operator|==
literal|null
condition|?
name|defaultValue
else|:
name|value
operator|)
return|;
block|}
specifier|public
name|boolean
name|hasProperty
parameter_list|(
name|Property
name|p
parameter_list|)
block|{
return|return
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|containsKey
argument_list|(
name|p
operator|.
name|ordinal
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|String
name|getBackground
parameter_list|()
block|{
return|return
name|iBackground
return|;
block|}
specifier|public
name|void
name|setBackground
parameter_list|(
name|String
name|background
parameter_list|)
block|{
name|iBackground
operator|=
name|background
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasBackground
parameter_list|()
block|{
return|return
name|iBackground
operator|!=
literal|null
operator|&&
operator|!
name|iBackground
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
return|return
name|iDay
return|;
block|}
specifier|public
name|void
name|setDay
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|iDay
operator|=
name|day
expr_stmt|;
block|}
specifier|public
name|int
name|getSlot
parameter_list|()
block|{
return|return
name|iSlot
return|;
block|}
specifier|public
name|void
name|setSlot
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|iSlot
operator|=
name|slot
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
name|iGroup
return|;
block|}
specifier|public
name|void
name|setGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|iGroup
operator|=
name|group
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasGroup
parameter_list|()
block|{
return|return
name|iGroup
operator|!=
literal|null
operator|&&
operator|!
name|iGroup
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
if|if
condition|(
name|hasId
argument_list|()
condition|)
return|return
name|getId
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
return|return
name|getName
argument_list|(
literal|":"
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|sameClassOrMeeting
parameter_list|(
name|TimetableGridCell
name|c
parameter_list|)
block|{
return|return
name|getType
argument_list|()
operator|==
name|c
operator|.
name|getType
argument_list|()
operator|&&
name|hasId
argument_list|()
operator|&&
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|TimetableGridCell
operator|)
condition|)
return|return
literal|false
return|;
name|TimetableGridCell
name|c
init|=
operator|(
name|TimetableGridCell
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|hasId
argument_list|()
operator|||
name|c
operator|.
name|hasId
argument_list|()
condition|)
return|return
name|hasId
argument_list|()
condition|?
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
else|:
literal|false
return|;
return|return
name|getSlot
argument_list|()
operator|==
name|c
operator|.
name|getSlot
argument_list|()
operator|&&
name|getDay
argument_list|()
operator|==
name|c
operator|.
name|getDay
argument_list|()
operator|&&
name|getLength
argument_list|()
operator|==
name|c
operator|.
name|getLength
argument_list|()
operator|&&
name|getName
argument_list|(
literal|":"
argument_list|)
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getName
argument_list|(
literal|":"
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimetableGridCell
name|c
parameter_list|)
block|{
if|if
condition|(
name|getFirstDate
argument_list|()
operator|!=
name|c
operator|.
name|getFirstDate
argument_list|()
condition|)
return|return
operator|(
name|getFirstDate
argument_list|()
operator|<
name|c
operator|.
name|getFirstDate
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|getDay
argument_list|()
operator|!=
name|c
operator|.
name|getDay
argument_list|()
condition|)
return|return
operator|(
name|getDay
argument_list|()
operator|<
name|c
operator|.
name|getDay
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|getSlot
argument_list|()
operator|!=
name|c
operator|.
name|getSlot
argument_list|()
condition|)
return|return
operator|(
name|getSlot
argument_list|()
operator|<
name|c
operator|.
name|getSlot
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|getLength
argument_list|()
operator|!=
name|c
operator|.
name|getLength
argument_list|()
condition|)
return|return
operator|(
name|getLength
argument_list|()
operator|>
name|c
operator|.
name|getLength
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
name|int
name|cmp
init|=
name|getName
argument_list|(
literal|":"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getName
argument_list|(
literal|":"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
if|if
condition|(
name|getType
argument_list|()
operator|!=
name|c
operator|.
name|getType
argument_list|()
condition|)
return|return
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|getType
argument_list|()
argument_list|)
return|;
return|return
operator|(
name|hasId
argument_list|()
condition|?
name|getId
argument_list|()
else|:
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|hasId
argument_list|()
condition|?
name|c
operator|.
name|getId
argument_list|()
else|:
operator|new
name|Long
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMinLines
parameter_list|(
name|boolean
name|showRoom
parameter_list|,
name|boolean
name|showInstructor
parameter_list|,
name|boolean
name|showTime
parameter_list|,
name|boolean
name|showPreference
parameter_list|,
name|boolean
name|showDate
parameter_list|)
block|{
name|int
name|lines
init|=
name|getNrNames
argument_list|()
operator|+
operator|(
name|showTime
operator|&&
name|hasTime
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|showDate
operator|&&
name|hasDate
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|showRoom
condition|?
name|getNrRooms
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|showInstructor
condition|?
name|getNrInstructors
argument_list|()
else|:
literal|0
operator|)
operator|+
operator|(
name|showPreference
operator|&&
name|hasPreference
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
return|return
name|lines
operator|<
literal|2
condition|?
literal|2
else|:
name|lines
return|;
block|}
specifier|public
name|int
name|getNrLines
parameter_list|()
block|{
return|return
operator|(
name|iNrLines
operator|==
literal|null
condition|?
literal|0
else|:
name|iNrLines
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setNrLines
parameter_list|(
name|int
name|lines
parameter_list|)
block|{
name|iNrLines
operator|=
name|lines
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
operator|(
name|iIndex
operator|==
literal|null
condition|?
literal|0
else|:
name|iIndex
operator|.
name|intValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|void
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|iIndex
operator|=
name|index
expr_stmt|;
block|}
specifier|public
name|boolean
name|isItalics
parameter_list|()
block|{
return|return
name|iItalics
return|;
block|}
specifier|public
name|void
name|setItalics
parameter_list|(
name|boolean
name|italics
parameter_list|)
block|{
name|iItalics
operator|=
name|italics
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCommitted
parameter_list|()
block|{
return|return
name|iCommitted
return|;
block|}
specifier|public
name|void
name|setCommitted
parameter_list|(
name|boolean
name|committed
parameter_list|)
block|{
name|iCommitted
operator|=
name|committed
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
index|[]
name|days
init|=
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"R"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"U"
block|}
decl_stmt|;
return|return
name|getNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" "
operator|+
name|days
index|[
name|getDay
argument_list|()
index|]
operator|+
operator|(
name|hasTime
argument_list|()
condition|?
literal|" "
operator|+
name|getTime
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|hasDate
argument_list|()
condition|?
literal|" "
operator|+
name|getDate
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimetableGridBackground
implements|implements
name|IsSerializable
implements|,
name|Serializable
implements|,
name|Comparable
argument_list|<
name|TimetableGridBackground
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
specifier|private
name|int
name|iDay
decl_stmt|,
name|iSlot
decl_stmt|,
name|iLength
decl_stmt|;
specifier|private
name|String
name|iBackground
decl_stmt|;
specifier|private
name|boolean
name|iAvailable
init|=
literal|true
decl_stmt|;
specifier|public
name|String
name|getBackground
parameter_list|()
block|{
return|return
name|iBackground
return|;
block|}
specifier|public
name|void
name|setBackground
parameter_list|(
name|String
name|background
parameter_list|)
block|{
name|iBackground
operator|=
name|background
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasBackground
parameter_list|()
block|{
return|return
name|iBackground
operator|!=
literal|null
operator|&&
operator|!
name|iBackground
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
return|return
name|iDay
return|;
block|}
specifier|public
name|void
name|setDay
parameter_list|(
name|int
name|day
parameter_list|)
block|{
name|iDay
operator|=
name|day
expr_stmt|;
block|}
specifier|public
name|int
name|getSlot
parameter_list|()
block|{
return|return
name|iSlot
return|;
block|}
specifier|public
name|void
name|setSlot
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|iSlot
operator|=
name|slot
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|iLength
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAvailable
parameter_list|()
block|{
return|return
name|iAvailable
return|;
block|}
specifier|public
name|void
name|setAvailable
parameter_list|(
name|boolean
name|available
parameter_list|)
block|{
name|iAvailable
operator|=
name|available
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimetableGridBackground
name|c
parameter_list|)
block|{
if|if
condition|(
name|getDay
argument_list|()
operator|!=
name|c
operator|.
name|getDay
argument_list|()
condition|)
return|return
operator|(
name|getDay
argument_list|()
operator|<
name|c
operator|.
name|getDay
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|getSlot
argument_list|()
operator|!=
name|c
operator|.
name|getSlot
argument_list|()
condition|)
return|return
operator|(
name|getSlot
argument_list|()
operator|<
name|c
operator|.
name|getSlot
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
if|if
condition|(
name|getLength
argument_list|()
operator|!=
name|c
operator|.
name|getLength
argument_list|()
condition|)
return|return
operator|(
name|getLength
argument_list|()
operator|>
name|c
operator|.
name|getLength
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
return|return
operator|(
name|hasBackground
argument_list|()
condition|?
name|getBackground
argument_list|()
else|:
literal|""
operator|)
operator|.
name|compareTo
argument_list|(
name|c
operator|.
name|hasBackground
argument_list|()
condition|?
name|c
operator|.
name|getBackground
argument_list|()
else|:
literal|""
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|slot2time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
index|[]
name|days
init|=
operator|new
name|String
index|[]
block|{
literal|"M"
block|,
literal|"T"
block|,
literal|"W"
block|,
literal|"R"
block|,
literal|"F"
block|,
literal|"S"
block|,
literal|"U"
block|}
decl_stmt|;
return|return
name|days
index|[
name|getDay
argument_list|()
index|]
operator|+
literal|" "
operator|+
name|slot2time
argument_list|(
name|getSlot
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|slot2time
argument_list|(
name|getSlot
argument_list|()
operator|+
name|getLength
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|getBackground
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TimetableGridLegend
implements|implements
name|IsSerializable
implements|,
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|0l
decl_stmt|;
specifier|private
name|String
name|iColor
decl_stmt|;
specifier|private
name|String
name|iLabel
decl_stmt|;
specifier|public
name|TimetableGridLegend
parameter_list|()
block|{
block|}
specifier|public
name|TimetableGridLegend
parameter_list|(
name|String
name|color
parameter_list|,
name|String
name|label
parameter_list|)
block|{
name|iColor
operator|=
name|color
expr_stmt|;
name|iLabel
operator|=
name|label
expr_stmt|;
block|}
specifier|public
name|String
name|getColor
parameter_list|()
block|{
return|return
name|iColor
return|;
block|}
specifier|public
name|void
name|setColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|iColor
operator|=
name|color
expr_stmt|;
block|}
specifier|public
name|String
name|getLabel
parameter_list|()
block|{
return|return
name|iLabel
return|;
block|}
specifier|public
name|void
name|setLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|iLabel
operator|=
name|label
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|iColor
operator|+
literal|": "
operator|+
name|iLabel
return|;
block|}
block|}
block|}
end_class

end_unit

