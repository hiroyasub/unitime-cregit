begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueBoxBase
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimeTextBox
extends|extends
name|TextBox
implements|implements
name|HasFocus
block|{
specifier|public
name|UniTimeTextBox
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTextBox
parameter_list|(
name|int
name|maxWidth
parameter_list|,
name|int
name|width
parameter_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
name|align
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setWidth
argument_list|(
name|width
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|setMaxLength
argument_list|(
name|maxWidth
argument_list|)
expr_stmt|;
if|if
condition|(
name|align
operator|!=
literal|null
condition|)
name|setAlignment
argument_list|(
name|align
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTextBox
parameter_list|(
name|int
name|maxWidth
parameter_list|,
name|int
name|width
parameter_list|)
block|{
name|this
argument_list|(
name|maxWidth
argument_list|,
name|width
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTextBox
parameter_list|(
name|int
name|maxWidth
parameter_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
name|align
parameter_list|)
block|{
name|this
argument_list|(
name|maxWidth
argument_list|,
literal|10
operator|*
name|maxWidth
argument_list|,
name|align
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTextBox
parameter_list|(
name|int
name|maxWidth
parameter_list|)
block|{
name|this
argument_list|(
name|maxWidth
argument_list|,
literal|10
operator|*
name|maxWidth
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTextBox
parameter_list|(
name|boolean
name|editable
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setReadOnly
argument_list|(
operator|!
name|editable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTextBox
parameter_list|(
name|int
name|maxWidth
parameter_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
name|align
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|this
argument_list|(
name|maxWidth
argument_list|,
name|align
argument_list|)
expr_stmt|;
name|setReadOnly
argument_list|(
operator|!
name|editable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|super
operator|.
name|setEnabled
argument_list|(
name|enabled
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|super
operator|.
name|isEnabled
argument_list|()
return|;
block|}
specifier|public
name|void
name|setReadOnly
parameter_list|(
name|boolean
name|readOnly
parameter_list|)
block|{
name|super
operator|.
name|setReadOnly
argument_list|(
name|readOnly
argument_list|)
expr_stmt|;
if|if
condition|(
name|readOnly
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBorderColor
argument_list|(
literal|"transparent"
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"transparent"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBorderColor
argument_list|()
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|focus
parameter_list|()
block|{
if|if
condition|(
name|isReadOnly
argument_list|()
condition|)
return|return
literal|false
return|;
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

