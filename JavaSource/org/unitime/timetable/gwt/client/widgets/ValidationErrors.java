begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DialogBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ValidationErrors
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DialogBox
name|iDialog
decl_stmt|;
specifier|private
name|Label
name|iProgress
decl_stmt|,
name|iError
decl_stmt|;
specifier|private
name|VerticalPanel
name|iErrorsPanel
decl_stmt|;
specifier|private
name|boolean
name|iAutoHide
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Validator
argument_list|>
name|iValidators
init|=
operator|new
name|ArrayList
argument_list|<
name|Validator
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iShowIndividualErrors
decl_stmt|;
specifier|private
name|String
name|iErrorMessage
decl_stmt|;
specifier|public
name|ValidationErrors
parameter_list|(
name|boolean
name|showIndividualErrors
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|errorMessage
parameter_list|,
name|boolean
name|autoHide
parameter_list|)
block|{
name|iDialog
operator|=
operator|new
name|DialogBox
argument_list|()
expr_stmt|;
name|iDialog
operator|.
name|setText
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setAnimationEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setAutoHideEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setGlassEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iAutoHide
operator|=
name|autoHide
expr_stmt|;
name|iProgress
operator|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|pleaseWait
argument_list|()
argument_list|)
expr_stmt|;
name|iProgress
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ProgressMessage"
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|add
argument_list|(
name|iProgress
argument_list|)
expr_stmt|;
name|iErrorsPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iErrorsPanel
operator|.
name|setSpacing
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|iErrorsPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ValidationErrors"
argument_list|)
expr_stmt|;
name|iError
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iErrorMessage
operator|=
name|errorMessage
expr_stmt|;
name|iShowIndividualErrors
operator|=
name|showIndividualErrors
expr_stmt|;
if|if
condition|(
operator|!
name|iShowIndividualErrors
condition|)
block|{
name|iError
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iErrorsPanel
operator|.
name|add
argument_list|(
name|iError
argument_list|)
expr_stmt|;
block|}
name|initWidget
argument_list|(
name|iErrorsPanel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addValidator
parameter_list|(
name|Validator
name|validator
parameter_list|)
block|{
name|iValidators
operator|.
name|add
argument_list|(
name|validator
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|validate
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|onResult
parameter_list|)
block|{
if|if
condition|(
name|iShowIndividualErrors
condition|)
for|for
control|(
name|int
name|i
init|=
name|iErrorsPanel
operator|.
name|getWidgetCount
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
name|iErrorsPanel
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|center
argument_list|()
expr_stmt|;
specifier|final
name|Counter
name|c
init|=
operator|new
name|Counter
argument_list|(
name|iValidators
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Validator
name|validator
range|:
name|iValidators
control|)
block|{
name|validator
operator|.
name|validate
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|onSuccess
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|iShowIndividualErrors
condition|)
block|{
name|Label
name|error
init|=
operator|new
name|Label
argument_list|(
name|result
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iErrorsPanel
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|c
operator|.
name|decrement
argument_list|(
name|result
operator|!=
literal|null
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|iAutoHide
condition|)
block|{
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
operator|.
name|schedule
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|isError
argument_list|()
condition|)
name|iError
operator|.
name|setText
argument_list|(
name|iErrorMessage
argument_list|)
expr_stmt|;
name|onResult
operator|.
name|onSuccess
argument_list|(
operator|!
name|c
operator|.
name|isError
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|hide
parameter_list|()
block|{
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Counter
block|{
specifier|private
name|int
name|iCounter
decl_stmt|;
specifier|private
name|boolean
name|iError
init|=
literal|false
decl_stmt|;
specifier|private
name|Counter
parameter_list|(
name|int
name|counter
parameter_list|)
block|{
name|iCounter
operator|=
name|counter
expr_stmt|;
block|}
specifier|private
name|boolean
name|decrement
parameter_list|(
name|boolean
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
condition|)
name|iError
operator|=
literal|true
expr_stmt|;
return|return
operator|--
name|iCounter
operator|==
literal|0
return|;
block|}
specifier|private
name|boolean
name|isError
parameter_list|()
block|{
return|return
name|iError
return|;
block|}
block|}
block|}
end_class

end_unit

