begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
operator|.
name|VerticalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBoxBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|UniTimeTable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|FlexTable
block|{
specifier|private
name|List
argument_list|<
name|MouseOverListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|iMouseOverListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|MouseOverListener
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MouseOutListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|iMouseOutListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|MouseOutListener
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MouseClickListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|iMouseClickListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|MouseClickListener
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|DataChangedListener
argument_list|<
name|T
argument_list|>
argument_list|>
name|iDataChangedListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|DataChangedListener
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PopupPanel
name|iHintPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|HintProvider
argument_list|<
name|T
argument_list|>
name|iHintProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iLastHoverRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|iLastHoverBackgroundColor
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAllowSelection
init|=
literal|false
decl_stmt|;
specifier|public
name|UniTimeTable
parameter_list|()
block|{
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONKEYDOWN
argument_list|)
expr_stmt|;
name|setStylePrimaryName
argument_list|(
literal|"unitime-MainTable"
argument_list|)
expr_stmt|;
name|iHintPanel
operator|=
operator|new
name|PopupPanel
argument_list|()
expr_stmt|;
name|iHintPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-PopupHint"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setAllowSelection
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|iAllowSelection
operator|=
name|allow
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAllowSelection
parameter_list|()
block|{
return|return
name|iAllowSelection
return|;
block|}
specifier|public
name|void
name|clearTable
parameter_list|(
name|int
name|headerRows
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
name|headerRows
condition|;
name|row
operator|--
control|)
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearTable
parameter_list|()
block|{
name|clearTable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRow
parameter_list|(
name|T
name|data
parameter_list|,
name|Widget
modifier|...
name|widgets
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Widget
name|widget
range|:
name|widgets
control|)
name|list
operator|.
name|add
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|data
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|addRow
parameter_list|(
name|T
name|data
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Widget
argument_list|>
name|widgets
parameter_list|)
block|{
name|int
name|row
init|=
name|getRowCount
argument_list|()
decl_stmt|;
name|setRow
argument_list|(
name|row
argument_list|,
name|data
argument_list|,
name|widgets
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
specifier|public
name|void
name|setRow
parameter_list|(
name|int
name|row
parameter_list|,
name|T
name|data
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Widget
argument_list|>
name|widgets
parameter_list|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|oldRow
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldRow
operator|!=
literal|null
operator|&&
name|oldRow
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
name|event
init|=
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|oldRow
operator|.
name|getData
argument_list|()
argument_list|,
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iDataChangedListeners
control|)
name|listener
operator|.
name|onDataRemoved
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|SmartTableRow
name|smartRow
init|=
operator|new
name|SmartTableRow
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|,
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Widget
name|widget
range|:
name|widgets
control|)
block|{
name|SmartTableCell
name|cell
init|=
operator|new
name|SmartTableCell
argument_list|(
name|smartRow
argument_list|,
name|widget
argument_list|)
decl_stmt|;
name|int
name|colspan
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|widget
operator|instanceof
name|HasColSpan
condition|)
block|{
name|colspan
operator|=
operator|(
operator|(
name|HasColSpan
operator|)
name|widget
operator|)
operator|.
name|getColSpan
argument_list|()
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|colspan
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|instanceof
name|HasStyleName
operator|&&
operator|(
operator|(
name|HasStyleName
operator|)
name|widget
operator|)
operator|.
name|getStyleName
argument_list|()
operator|!=
literal|null
condition|)
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|(
operator|(
name|HasStyleName
operator|)
name|widget
operator|)
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|instanceof
name|HasAdditionalStyleNames
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|styleNames
init|=
operator|(
operator|(
name|HasAdditionalStyleNames
operator|)
name|widget
operator|)
operator|.
name|getAdditionalStyleNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|styleNames
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|styleName
range|:
name|styleNames
control|)
name|getFlexCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|styleName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|widget
operator|instanceof
name|HasCellAlignment
condition|)
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|(
operator|(
name|HasCellAlignment
operator|)
name|widget
operator|)
operator|.
name|getCellAlignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|instanceof
name|HasVerticalCellAlignment
condition|)
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|(
operator|(
name|HasVerticalCellAlignment
operator|)
name|widget
operator|)
operator|.
name|getVerticalCellAlignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|instanceof
name|HasColumn
condition|)
operator|(
operator|(
name|HasColumn
operator|)
name|widget
operator|)
operator|.
name|setColumn
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|x
operator|+=
name|colspan
expr_stmt|;
if|if
condition|(
name|row
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|colspan
operator|==
literal|1
condition|)
block|{
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|getCellFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
literal|0
argument_list|,
name|x
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|span
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|h
init|=
name|x
operator|-
name|colspan
init|;
name|h
operator|<
name|x
condition|;
name|h
operator|++
control|)
if|if
condition|(
name|getCellFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
literal|0
argument_list|,
name|h
argument_list|)
condition|)
name|span
operator|++
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|span
operator|>
literal|0
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|span
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|col
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
name|event
init|=
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|data
argument_list|,
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iDataChangedListeners
control|)
name|listener
operator|.
name|onDataInserted
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isColumnVisible
parameter_list|(
name|int
name|col
parameter_list|)
block|{
return|return
name|getCellFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
literal|0
argument_list|,
name|col
argument_list|)
return|;
block|}
specifier|public
name|void
name|setColumnVisible
parameter_list|(
name|int
name|col
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|==
literal|0
condition|)
block|{
comment|// now colspans for the first row
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
name|col
argument_list|,
name|visible
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|x
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
name|int
name|colSpan
init|=
operator|(
name|w
operator|instanceof
name|HasColSpan
condition|?
operator|(
operator|(
name|HasColSpan
operator|)
name|w
operator|)
operator|.
name|getColSpan
argument_list|()
else|:
literal|1
operator|)
decl_stmt|;
name|x
operator|+=
name|colSpan
expr_stmt|;
if|if
condition|(
name|x
operator|>
name|col
condition|)
block|{
if|if
condition|(
name|colSpan
operator|>
literal|1
condition|)
block|{
comment|// use first row to count the colspan
name|int
name|span
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|h
init|=
name|x
operator|-
name|colSpan
init|;
name|h
operator|<
name|x
condition|;
name|h
operator|++
control|)
if|if
condition|(
name|getCellFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
literal|0
argument_list|,
name|h
argument_list|)
condition|)
name|span
operator|++
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|span
operator|>
literal|0
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|span
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|SmartTableRow
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|List
argument_list|<
name|SmartTableCell
argument_list|>
name|iCells
init|=
operator|new
name|ArrayList
argument_list|<
name|SmartTableCell
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|T
name|iData
init|=
literal|null
decl_stmt|;
specifier|public
name|SmartTableRow
parameter_list|(
name|T
name|data
parameter_list|)
block|{
name|iData
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|T
name|getData
parameter_list|()
block|{
return|return
name|iData
return|;
block|}
specifier|public
name|boolean
name|hasData
parameter_list|()
block|{
return|return
name|iData
operator|!=
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|SmartTableCell
argument_list|>
name|getCells
parameter_list|()
block|{
return|return
name|iCells
return|;
block|}
specifier|public
name|Comparator
argument_list|<
name|SmartTableRow
argument_list|<
name|T
argument_list|>
argument_list|>
name|getComparator
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|T
argument_list|>
name|cmp
parameter_list|)
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|SmartTableRow
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|a
parameter_list|,
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|b
parameter_list|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|a
operator|.
name|getData
argument_list|()
argument_list|,
name|b
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SmartTableCell
extends|extends
name|Composite
block|{
name|SmartTableRow
name|iRow
decl_stmt|;
specifier|public
name|SmartTableCell
parameter_list|(
name|SmartTableRow
name|row
parameter_list|,
name|Widget
name|widget
parameter_list|)
block|{
name|iRow
operator|=
name|row
expr_stmt|;
name|row
operator|.
name|getCells
argument_list|()
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SmartTableRow
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|boolean
name|focus
parameter_list|()
block|{
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|HasFocus
condition|)
block|{
return|return
operator|(
operator|(
name|HasFocus
operator|)
name|getWidget
argument_list|()
operator|)
operator|.
name|focus
argument_list|()
return|;
block|}
if|else if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|Focusable
condition|)
block|{
operator|(
operator|(
name|Focusable
operator|)
name|getWidget
argument_list|()
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|getWidget
argument_list|()
operator|instanceof
name|TextBoxBase
condition|)
operator|(
operator|(
name|TextBoxBase
operator|)
name|getWidget
argument_list|()
operator|)
operator|.
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|Widget
name|getInnerWidget
parameter_list|()
block|{
return|return
name|getWidget
argument_list|()
return|;
block|}
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|Widget
name|w
init|=
name|super
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|null
condition|)
return|return
name|w
return|;
if|if
condition|(
name|w
operator|instanceof
name|SmartTableCell
condition|)
return|return
operator|(
operator|(
name|SmartTableCell
operator|)
name|w
operator|)
operator|.
name|getInnerWidget
argument_list|()
return|;
return|return
name|w
return|;
block|}
specifier|public
name|Widget
name|replaceWidget
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
name|Widget
name|widget
parameter_list|)
block|{
name|Widget
name|w
init|=
name|super
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|null
condition|)
name|super
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|widget
argument_list|)
expr_stmt|;
if|else if
condition|(
name|w
operator|instanceof
name|SmartTableCell
condition|)
name|super
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|SmartTableCell
argument_list|(
operator|(
operator|(
name|SmartTableCell
operator|)
name|w
operator|)
operator|.
name|getRow
argument_list|()
argument_list|,
name|widget
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|super
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|widget
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
specifier|private
name|boolean
name|focus
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
operator|||
name|col
operator|>=
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
name|Widget
name|w
init|=
name|super
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|null
operator|||
operator|!
name|w
operator|.
name|isVisible
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|w
operator|instanceof
name|SmartTableCell
condition|)
block|{
return|return
operator|(
operator|(
name|SmartTableCell
operator|)
name|w
operator|)
operator|.
name|focus
argument_list|()
return|;
block|}
if|else if
condition|(
name|w
operator|instanceof
name|HasFocus
condition|)
block|{
return|return
operator|(
operator|(
name|HasFocus
operator|)
name|w
operator|)
operator|.
name|focus
argument_list|()
return|;
block|}
if|else if
condition|(
name|w
operator|instanceof
name|Focusable
condition|)
block|{
operator|(
operator|(
name|Focusable
operator|)
name|w
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|TextBoxBase
condition|)
operator|(
operator|(
name|TextBoxBase
operator|)
name|w
operator|)
operator|.
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|T
name|getData
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|r
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
operator|(
name|r
operator|==
literal|null
condition|?
literal|null
else|:
name|r
operator|.
name|getData
argument_list|()
operator|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getData
parameter_list|()
block|{
name|List
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|T
name|data
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|getSmartRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|row
operator|>=
name|getRowCount
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|super
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|SmartTableCell
condition|)
return|return
operator|(
operator|(
name|SmartTableCell
operator|)
name|w
operator|)
operator|.
name|getRow
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|swapRows
parameter_list|(
name|int
name|r0
parameter_list|,
name|int
name|r1
parameter_list|)
block|{
if|if
condition|(
name|r0
operator|==
name|r1
condition|)
return|return;
if|if
condition|(
name|r0
operator|>
name|r1
condition|)
block|{
name|swapRows
argument_list|(
name|r1
argument_list|,
name|r0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// r0< r1
name|Element
name|body
init|=
name|getBodyElement
argument_list|()
decl_stmt|;
name|Element
name|a
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|r0
argument_list|)
decl_stmt|;
name|Element
name|b
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|r1
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|removeChild
argument_list|(
name|body
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|removeChild
argument_list|(
name|body
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|insertChild
argument_list|(
name|body
argument_list|,
name|b
argument_list|,
name|r0
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|insertChild
argument_list|(
name|body
argument_list|,
name|a
argument_list|,
name|r1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|sort
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|T
argument_list|>
name|rowComparator
parameter_list|)
block|{
name|Element
name|body
init|=
name|getBodyElement
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|r
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|hasData
argument_list|()
condition|)
block|{
name|rows
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|r
block|,
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|rows
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|)
block|{
return|return
name|rowComparator
operator|.
name|compare
argument_list|(
operator|(
operator|(
name|SmartTableRow
argument_list|<
name|T
argument_list|>
operator|)
name|a
index|[
literal|0
index|]
operator|)
operator|.
name|getData
argument_list|()
argument_list|,
operator|(
operator|(
name|SmartTableRow
argument_list|<
name|T
argument_list|>
operator|)
name|b
index|[
literal|0
index|]
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
name|changeEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|a
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|hasData
argument_list|()
condition|)
block|{
name|Object
index|[]
name|o
init|=
name|rows
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
name|int
name|otherRow
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
operator|(
name|Element
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|swapRows
argument_list|(
name|row
argument_list|,
name|otherRow
argument_list|)
expr_stmt|;
name|changeEvents
operator|.
name|add
argument_list|(
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
operator|(
operator|(
name|SmartTableRow
argument_list|<
name|T
argument_list|>
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|getData
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iDataChangedListeners
control|)
name|listener
operator|.
name|onDataSorted
argument_list|(
name|changeEvents
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|sortByRow
parameter_list|(
specifier|final
name|Comparator
argument_list|<
name|Integer
argument_list|>
name|rowComparator
parameter_list|)
block|{
name|Element
name|body
init|=
name|getBodyElement
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|r
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|hasData
argument_list|()
condition|)
block|{
name|rows
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|r
block|,
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
block|,
name|row
block|}
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|rows
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|)
block|{
return|return
name|rowComparator
operator|.
name|compare
argument_list|(
operator|(
name|Integer
operator|)
name|a
index|[
literal|2
index|]
argument_list|,
operator|(
name|Integer
operator|)
name|b
index|[
literal|2
index|]
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
name|changeEvents
init|=
operator|new
name|ArrayList
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|a
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|a
operator|.
name|hasData
argument_list|()
condition|)
block|{
name|Object
index|[]
name|o
init|=
name|rows
operator|.
name|get
argument_list|(
name|idx
operator|++
argument_list|)
decl_stmt|;
name|int
name|otherRow
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
operator|(
name|Element
operator|)
name|o
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|swapRows
argument_list|(
name|row
argument_list|,
name|otherRow
argument_list|)
expr_stmt|;
name|changeEvents
operator|.
name|add
argument_list|(
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
operator|(
operator|(
name|SmartTableRow
argument_list|<
name|T
argument_list|>
operator|)
name|o
index|[
literal|0
index|]
operator|)
operator|.
name|getData
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iDataChangedListeners
control|)
name|listener
operator|.
name|onDataSorted
argument_list|(
name|changeEvents
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|canSwapRows
parameter_list|(
name|T
name|a
parameter_list|,
name|T
name|b
parameter_list|)
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
specifier|final
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|int
name|col
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
name|Widget
name|widget
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|r
init|=
name|getSmartRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|boolean
name|hasData
init|=
operator|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|)
decl_stmt|;
name|TableEvent
argument_list|<
name|T
argument_list|>
name|tableEvent
init|=
operator|new
name|TableEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|event
argument_list|,
name|row
argument_list|,
name|col
argument_list|,
name|tr
argument_list|,
name|td
argument_list|,
name|hasData
condition|?
name|r
operator|.
name|getData
argument_list|()
else|:
literal|null
argument_list|)
decl_stmt|;
name|Widget
name|hint
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|widget
operator|instanceof
name|HasHint
condition|)
block|{
name|String
name|html
init|=
operator|(
operator|(
name|HasHint
operator|)
name|widget
operator|)
operator|.
name|getHint
argument_list|()
decl_stmt|;
if|if
condition|(
name|html
operator|!=
literal|null
operator|&&
operator|!
name|html
operator|.
name|isEmpty
argument_list|()
condition|)
name|hint
operator|=
operator|new
name|HTML
argument_list|(
name|html
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hint
operator|==
literal|null
operator|&&
name|iHintProvider
operator|!=
literal|null
condition|)
name|hint
operator|=
name|iHintProvider
operator|.
name|getHint
argument_list|(
name|tableEvent
argument_list|)
expr_stmt|;
name|String
name|style
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
name|hasData
condition|)
block|{
if|if
condition|(
operator|!
name|iMouseClickListeners
operator|.
name|isEmpty
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowSelectedHover"
argument_list|)
expr_stmt|;
else|else
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
name|iLastHoverRow
operator|=
name|row
expr_stmt|;
name|iLastHoverBackgroundColor
operator|=
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|getBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
name|iLastHoverBackgroundColor
operator|!=
literal|null
operator|&&
operator|!
name|iLastHoverBackgroundColor
operator|.
name|isEmpty
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iHintPanel
operator|.
name|isShowing
argument_list|()
operator|&&
name|hint
operator|!=
literal|null
condition|)
block|{
name|iHintPanel
operator|.
name|setWidget
argument_list|(
name|hint
argument_list|)
expr_stmt|;
name|iHintPanel
operator|.
name|setPopupPositionAndShow
argument_list|(
operator|new
name|PopupPanel
operator|.
name|PositionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|offsetWidth
parameter_list|,
name|int
name|offsetHeight
parameter_list|)
block|{
name|boolean
name|top
init|=
operator|(
name|tr
operator|.
name|getAbsoluteBottom
argument_list|()
operator|-
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
literal|15
operator|+
name|offsetHeight
operator|>
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
decl_stmt|;
name|iHintPanel
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|event
operator|.
name|getClientX
argument_list|()
argument_list|,
name|tr
operator|.
name|getAbsoluteRight
argument_list|()
operator|-
name|offsetWidth
operator|-
literal|15
argument_list|)
argument_list|,
name|tr
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
literal|15
argument_list|)
argument_list|,
name|top
condition|?
name|tr
operator|.
name|getAbsoluteTop
argument_list|()
operator|-
name|offsetHeight
operator|-
literal|15
else|:
name|tr
operator|.
name|getAbsoluteBottom
argument_list|()
operator|+
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MouseOverListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iMouseOverListeners
control|)
name|listener
operator|.
name|onMouseOver
argument_list|(
name|tableEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|hasData
condition|)
block|{
if|if
condition|(
operator|!
name|iMouseClickListeners
operator|.
name|isEmpty
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|clearCursor
argument_list|()
expr_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
if|if
condition|(
literal|"unitime-TableRowHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLastHoverBackgroundColor
operator|!=
literal|null
operator|&&
operator|!
name|iLastHoverBackgroundColor
operator|.
name|isEmpty
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|iLastHoverBackgroundColor
argument_list|)
expr_stmt|;
name|iLastHoverRow
operator|=
operator|-
literal|1
expr_stmt|;
name|iLastHoverBackgroundColor
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|iHintPanel
operator|.
name|isShowing
argument_list|()
condition|)
name|iHintPanel
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|MouseOutListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iMouseOutListeners
control|)
name|listener
operator|.
name|onMouseOut
argument_list|(
name|tableEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
if|if
condition|(
name|iHintPanel
operator|.
name|isShowing
argument_list|()
condition|)
block|{
name|boolean
name|top
init|=
operator|(
name|tr
operator|.
name|getAbsoluteBottom
argument_list|()
operator|-
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
literal|15
operator|+
name|iHintPanel
operator|.
name|getOffsetHeight
argument_list|()
operator|>
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
decl_stmt|;
name|iHintPanel
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|event
operator|.
name|getClientX
argument_list|()
argument_list|,
name|tr
operator|.
name|getAbsoluteRight
argument_list|()
operator|-
name|iHintPanel
operator|.
name|getOffsetWidth
argument_list|()
operator|-
literal|15
argument_list|)
argument_list|,
name|tr
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
literal|15
argument_list|)
argument_list|,
name|top
condition|?
name|tr
operator|.
name|getAbsoluteTop
argument_list|()
operator|-
name|iHintPanel
operator|.
name|getOffsetHeight
argument_list|()
operator|-
literal|15
else|:
name|tr
operator|.
name|getAbsoluteBottom
argument_list|()
operator|+
literal|15
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONCLICK
case|:
if|if
condition|(
name|isAllowSelection
argument_list|()
operator|&&
name|hasData
condition|)
block|{
name|Element
name|element
init|=
name|DOM
operator|.
name|eventGetTarget
argument_list|(
name|event
argument_list|)
decl_stmt|;
while|while
condition|(
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|element
argument_list|,
literal|"tagName"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"div"
argument_list|)
condition|)
name|element
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|element
argument_list|,
literal|"tagName"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"td"
argument_list|)
condition|)
block|{
name|boolean
name|hover
init|=
operator|(
literal|"unitime-TableRowHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|||
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|selected
init|=
operator|!
operator|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|||
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRow"
operator|+
operator|(
name|selected
condition|?
literal|"Selected"
else|:
literal|""
operator|)
operator|+
operator|(
name|hover
condition|?
literal|"Hover"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iHintPanel
operator|!=
literal|null
operator|&&
name|iHintPanel
operator|.
name|isShowing
argument_list|()
condition|)
name|iHintPanel
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|MouseClickListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iMouseClickListeners
control|)
name|listener
operator|.
name|onMouseClick
argument_list|(
name|tableEvent
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONKEYDOWN
case|:
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_RIGHT
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|col
operator|++
expr_stmt|;
if|if
condition|(
name|col
operator|>=
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_LEFT
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|col
operator|--
expr_stmt|;
if|if
condition|(
name|col
operator|<
literal|0
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|row
operator|--
expr_stmt|;
if|if
condition|(
name|row
operator|<
literal|0
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|hasData
operator|&&
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
operator|&&
name|event
operator|.
name|getCtrlKey
argument_list|()
condition|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|up
init|=
name|getSmartRow
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|up
operator|!=
literal|null
operator|&&
name|up
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|canSwapRows
argument_list|(
name|r
operator|.
name|getData
argument_list|()
argument_list|,
name|up
operator|.
name|getData
argument_list|()
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
operator|-
literal|1
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
name|swapRows
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|focus
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iDataChangedListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
name|e
init|=
operator|new
name|ArrayList
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|e
operator|.
name|add
argument_list|(
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|up
operator|.
name|getData
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|add
argument_list|(
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|r
operator|.
name|getData
argument_list|()
argument_list|,
name|row
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iDataChangedListeners
control|)
block|{
name|listener
operator|.
name|onDataMoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|row
operator|++
expr_stmt|;
if|if
condition|(
name|row
operator|>=
name|getRowCount
argument_list|()
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|hasData
operator|&&
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
name|event
operator|.
name|getCtrlKey
argument_list|()
condition|)
block|{
name|SmartTableRow
argument_list|<
name|T
argument_list|>
name|dn
init|=
name|getSmartRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|dn
operator|!=
literal|null
operator|&&
name|dn
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|canSwapRows
argument_list|(
name|r
operator|.
name|getData
argument_list|()
argument_list|,
name|dn
operator|.
name|getData
argument_list|()
argument_list|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
operator|+
literal|1
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
name|swapRows
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|row
argument_list|)
expr_stmt|;
name|focus
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iDataChangedListeners
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
name|e
init|=
operator|new
name|ArrayList
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|e
operator|.
name|add
argument_list|(
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|dn
operator|.
name|getData
argument_list|()
argument_list|,
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|add
argument_list|(
operator|new
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|(
name|r
operator|.
name|getData
argument_list|()
argument_list|,
name|row
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
range|:
name|iDataChangedListeners
control|)
block|{
name|listener
operator|.
name|onDataMoved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|void
name|clearHover
parameter_list|()
block|{
if|if
condition|(
name|iLastHoverRow
operator|>=
literal|0
operator|&&
name|iLastHoverRow
operator|<
name|getRowCount
argument_list|()
condition|)
block|{
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
name|String
name|style
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|iLastHoverRow
argument_list|)
decl_stmt|;
name|boolean
name|selected
init|=
operator|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|||
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iLastHoverRow
argument_list|,
literal|"unitime-TableRow"
operator|+
operator|(
name|selected
condition|?
literal|"Selected"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|iLastHoverRow
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iLastHoverBackgroundColor
operator|!=
literal|null
operator|&&
operator|!
name|iLastHoverBackgroundColor
operator|.
name|isEmpty
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iLastHoverRow
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|iLastHoverBackgroundColor
argument_list|)
expr_stmt|;
block|}
name|iLastHoverRow
operator|=
operator|-
literal|1
expr_stmt|;
name|iLastHoverBackgroundColor
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
name|String
name|style
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|)
decl_stmt|;
return|return
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|||
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|setSelected
parameter_list|(
name|int
name|row
parameter_list|,
name|boolean
name|selected
parameter_list|)
block|{
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
name|String
name|style
init|=
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|boolean
name|hover
init|=
operator|(
literal|"unitime-TableRowHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|||
literal|"unitime-TableRowSelectedHover"
operator|.
name|equals
argument_list|(
name|style
argument_list|)
operator|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRow"
operator|+
operator|(
name|selected
condition|?
literal|"Selected"
else|:
literal|""
operator|)
operator|+
operator|(
name|hover
condition|?
literal|"Hover"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getSelectedCount
parameter_list|()
block|{
name|int
name|selected
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
if|if
condition|(
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
name|selected
operator|++
expr_stmt|;
return|return
name|selected
return|;
block|}
specifier|public
name|int
name|getSelectedRow
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
if|if
condition|(
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
return|return
name|row
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
specifier|static
class|class
name|TableEvent
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|Event
name|iSourceEvent
decl_stmt|;
specifier|private
name|int
name|iRow
decl_stmt|;
specifier|private
name|int
name|iCol
decl_stmt|;
specifier|private
name|Element
name|iTD
decl_stmt|;
specifier|private
name|Element
name|iTR
decl_stmt|;
specifier|private
name|T
name|iData
decl_stmt|;
specifier|public
name|TableEvent
parameter_list|(
name|Event
name|sourceEvent
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|,
name|Element
name|tr
parameter_list|,
name|Element
name|td
parameter_list|,
name|T
name|data
parameter_list|)
block|{
name|iRow
operator|=
name|row
expr_stmt|;
name|iCol
operator|=
name|col
expr_stmt|;
name|iTR
operator|=
name|tr
expr_stmt|;
name|iTD
operator|=
name|td
expr_stmt|;
name|iData
operator|=
name|data
expr_stmt|;
name|iSourceEvent
operator|=
name|sourceEvent
expr_stmt|;
block|}
specifier|public
name|int
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|int
name|getCol
parameter_list|()
block|{
return|return
name|iCol
return|;
block|}
specifier|public
name|T
name|getData
parameter_list|()
block|{
return|return
name|iData
return|;
block|}
specifier|public
name|Element
name|getRowElement
parameter_list|()
block|{
return|return
name|iTR
return|;
block|}
specifier|public
name|Element
name|getCellElement
parameter_list|()
block|{
return|return
name|iTD
return|;
block|}
specifier|public
name|Event
name|getSourceEvent
parameter_list|()
block|{
return|return
name|iSourceEvent
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|MouseOverListener
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|TableEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addMouseOverListener
parameter_list|(
name|MouseOverListener
argument_list|<
name|T
argument_list|>
name|mouseOverListener
parameter_list|)
block|{
name|iMouseOverListeners
operator|.
name|add
argument_list|(
name|mouseOverListener
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|MouseOutListener
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|TableEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addMouseOutListener
parameter_list|(
name|MouseOutListener
argument_list|<
name|T
argument_list|>
name|mouseOutListener
parameter_list|)
block|{
name|iMouseOutListeners
operator|.
name|add
argument_list|(
name|mouseOutListener
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
interface|interface
name|MouseClickListener
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addMouseClickListener
parameter_list|(
name|MouseClickListener
argument_list|<
name|T
argument_list|>
name|mouseClickListener
parameter_list|)
block|{
name|iMouseClickListeners
operator|.
name|add
argument_list|(
name|mouseClickListener
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|DataChangedEvent
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
name|T
name|iData
decl_stmt|;
specifier|private
name|int
name|iRow
decl_stmt|;
specifier|public
name|DataChangedEvent
parameter_list|(
name|T
name|data
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|iData
operator|=
name|data
expr_stmt|;
name|iRow
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|T
name|getData
parameter_list|()
block|{
return|return
name|iData
return|;
block|}
specifier|public
name|int
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
block|}
specifier|public
interface|interface
name|DataChangedListener
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|onDataInserted
parameter_list|(
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
function_decl|;
specifier|public
name|void
name|onDataRemoved
parameter_list|(
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
function_decl|;
specifier|public
name|void
name|onDataMoved
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
name|events
parameter_list|)
function_decl|;
specifier|public
name|void
name|onDataSorted
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|T
argument_list|>
argument_list|>
name|events
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addDataChangedListener
parameter_list|(
name|DataChangedListener
argument_list|<
name|T
argument_list|>
name|listener
parameter_list|)
block|{
name|iDataChangedListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTableHeader
name|getHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|getRowCount
argument_list|()
operator|<=
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
return|return
operator|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|UniTimeTableHeader
condition|?
operator|(
name|UniTimeTableHeader
operator|)
name|w
else|:
literal|null
operator|)
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|UniTimeTableHeader
condition|)
block|{
name|UniTimeTableHeader
name|h
init|=
operator|(
name|UniTimeTableHeader
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|h
return|;
block|}
block|}
name|Window
operator|.
name|alert
argument_list|(
literal|"Header named "
operator|+
name|name
operator|+
literal|" does not exist!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|UniTimeTableHeader
name|getHeader
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|getRowCount
argument_list|()
operator|<=
literal|0
operator|||
name|getCellCount
argument_list|(
literal|0
argument_list|)
operator|<=
name|col
condition|)
return|return
literal|null
return|;
name|Widget
name|w
init|=
name|getWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|)
decl_stmt|;
return|return
operator|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|UniTimeTableHeader
condition|?
operator|(
name|UniTimeTableHeader
operator|)
name|w
else|:
literal|null
operator|)
return|;
block|}
specifier|public
specifier|static
interface|interface
name|HasFocus
block|{
specifier|public
name|boolean
name|focus
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasHint
block|{
specifier|public
name|String
name|getHint
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasColSpan
block|{
specifier|public
name|int
name|getColSpan
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasCellAlignment
block|{
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasVerticalCellAlignment
block|{
specifier|public
name|VerticalAlignmentConstant
name|getVerticalCellAlignment
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasStyleName
block|{
specifier|public
name|String
name|getStyleName
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasAdditionalStyleNames
block|{
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAdditionalStyleNames
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasDataUpdate
block|{
specifier|public
name|void
name|update
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HasColumn
block|{
specifier|public
name|int
name|getColumn
parameter_list|()
function_decl|;
specifier|public
name|void
name|setColumn
parameter_list|(
name|int
name|column
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|HintProvider
parameter_list|<
name|T
parameter_list|>
block|{
name|Widget
name|getHint
parameter_list|(
name|TableEvent
argument_list|<
name|T
argument_list|>
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|setHintProvider
parameter_list|(
name|HintProvider
argument_list|<
name|T
argument_list|>
name|hintProvider
parameter_list|)
block|{
name|iHintProvider
operator|=
name|hintProvider
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|NumberCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|NumberCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NumberCell
parameter_list|(
name|int
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CenterredCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|CenterredCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CheckBoxCell
extends|extends
name|CheckBox
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|CheckBoxCell
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
block|}
block|}
block|}
end_class

end_unit

