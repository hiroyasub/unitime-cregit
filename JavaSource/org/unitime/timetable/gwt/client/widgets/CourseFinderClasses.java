begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaCheckBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaHiddenLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|IdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseFinderClasses
extends|extends
name|UniTimeTable
argument_list|<
name|ClassAssignment
argument_list|>
implements|implements
name|CourseFinder
operator|.
name|CourseFinderCourseDetails
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CourseAssignment
name|iValue
init|=
literal|null
decl_stmt|;
specifier|private
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|iDataProvider
init|=
literal|null
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Preference
argument_list|>
name|iSelectedClasses
init|=
operator|new
name|HashSet
argument_list|<
name|Preference
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSpecReg
decl_stmt|;
specifier|private
name|CheckBox
name|iRequired
init|=
literal|null
decl_stmt|;
specifier|public
name|CourseFinderClasses
parameter_list|(
name|boolean
name|allowSelection
parameter_list|)
block|{
name|this
argument_list|(
name|allowSelection
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseFinderClasses
parameter_list|(
name|boolean
name|allowSelection
parameter_list|,
name|SpecialRegistrationContext
name|specreg
parameter_list|)
block|{
name|this
argument_list|(
name|allowSelection
argument_list|,
name|specreg
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseFinderClasses
parameter_list|(
name|boolean
name|allowSelection
parameter_list|,
name|SpecialRegistrationContext
name|specreg
parameter_list|,
name|CheckBox
name|required
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setAllowSelection
argument_list|(
name|allowSelection
argument_list|)
expr_stmt|;
name|iSpecReg
operator|=
name|specreg
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClassSelection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDays
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnd
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colHighDemand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNoteIcon
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|ClassAssignment
argument_list|>
name|event
parameter_list|)
block|{
name|selectClass
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|isSelected
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseDoubleClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseDoubleClickListener
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDoubleClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|event
parameter_list|)
block|{
name|selectClass
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|isSelected
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRequired
operator|=
name|required
expr_stmt|;
if|if
condition|(
name|iRequired
operator|!=
literal|null
condition|)
name|iRequired
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
for|for
control|(
name|Preference
name|p
range|:
name|iSelectedClasses
control|)
name|p
operator|.
name|setRequired
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|isSpecialRegistration
parameter_list|()
block|{
return|return
name|iSpecReg
operator|!=
literal|null
operator|&&
name|iSpecReg
operator|.
name|isEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Widget
name|asWidget
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|CourseAssignment
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|iValue
argument_list|)
condition|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionLoadingClasses
argument_list|()
argument_list|)
expr_stmt|;
name|iDataProvider
operator|.
name|getData
argument_list|(
name|value
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setEmptyMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|result
parameter_list|)
block|{
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Long
name|lastSubpartId
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|ClassAssignment
name|clazz
range|:
name|result
control|)
block|{
specifier|final
name|Preference
name|p
init|=
name|getSelection
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isCancelled
argument_list|()
operator|&&
operator|(
name|clazz
operator|.
name|isSaved
argument_list|()
operator|||
name|clazz
operator|.
name|isAvailable
argument_list|()
operator|||
name|isSpecialRegistration
argument_list|()
operator|||
name|iValue
operator|.
name|isCanWaitList
argument_list|()
operator|)
condition|)
block|{
name|AriaCheckBox
name|ch
init|=
operator|new
name|Selection
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|iSelectedClasses
operator|.
name|contains
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderPreferClass
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|,
name|clazz
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|setEnabled
argument_list|(
name|isEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|setSelected
argument_list|(
name|getRow
argument_list|(
name|clazz
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
name|iSelectedClasses
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
else|else
name|iSelectedClasses
operator|.
name|remove
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|ArrangeHours
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasDatePattern
argument_list|()
condition|?
name|clazz
operator|.
name|getDatePattern
argument_list|()
else|:
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Rooms
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|RoomsOrInstructors
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|!=
literal|null
condition|?
name|clazz
operator|.
name|getParentSection
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|saved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|saved
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|getWidget
argument_list|()
else|:
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|cancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|classCancelled
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|getWidget
argument_list|()
else|:
name|clazz
operator|.
name|isOfHighDemand
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|clazz
operator|.
name|getExpected
argument_list|()
argument_list|,
name|clazz
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
operator|.
name|getWidget
argument_list|()
else|:
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|hasNote
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|getNote
argument_list|()
operator|.
name|equals
argument_list|(
name|iValue
operator|.
name|getNote
argument_list|()
argument_list|)
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|note
argument_list|()
argument_list|,
name|clazz
operator|.
name|getNote
argument_list|()
argument_list|,
literal|""
argument_list|)
operator|.
name|getWidget
argument_list|()
else|:
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isAvailable
argument_list|()
operator|&&
operator|!
name|isSpecialRegistration
argument_list|()
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|AriaHiddenLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderClassNotAvailable
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|,
name|clazz
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|line
operator|.
name|add
argument_list|(
operator|new
name|AriaHiddenLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderClassAvailable
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|clazz
operator|.
name|getSubject
argument_list|()
argument_list|,
name|clazz
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|,
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|addRow
argument_list|(
name|clazz
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSubpartId
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|getSubpartId
argument_list|()
operator|.
name|equals
argument_list|(
name|lastSubpartId
argument_list|)
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|c
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|c
argument_list|,
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
operator|||
operator|(
operator|!
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isAvailable
argument_list|()
operator|)
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|c
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|c
argument_list|,
literal|"text-gray"
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllowSelection
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isCancelled
argument_list|()
operator|&&
operator|(
name|clazz
operator|.
name|isSaved
argument_list|()
operator|||
name|clazz
operator|.
name|isAvailable
argument_list|()
operator|||
name|isSpecialRegistration
argument_list|()
operator|)
operator|&&
name|iSelectedClasses
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
name|setSelected
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|lastSubpartId
operator|=
name|clazz
operator|.
name|getSubpartId
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoClasses
argument_list|(
name|MESSAGES
operator|.
name|courseName
argument_list|(
name|iValue
operator|.
name|getSubject
argument_list|()
argument_list|,
name|iValue
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CourseAssignment
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDataProvider
parameter_list|(
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|provider
parameter_list|)
block|{
name|iDataProvider
operator|=
name|provider
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|courseSelectionClasses
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|RoomsOrInstructors
extends|extends
name|P
block|{
specifier|public
name|RoomsOrInstructors
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|super
argument_list|(
literal|"itemize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
name|DOM
operator|.
name|createSpan
argument_list|()
argument_list|,
literal|"item"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|delimiter
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Rooms
extends|extends
name|P
block|{
specifier|public
name|Rooms
parameter_list|(
name|List
argument_list|<
name|IdValue
argument_list|>
name|list
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|super
argument_list|(
literal|"itemize"
argument_list|)
expr_stmt|;
if|if
condition|(
name|list
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|IdValue
argument_list|>
name|i
init|=
name|list
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|P
name|p
init|=
operator|new
name|P
argument_list|(
name|DOM
operator|.
name|createSpan
argument_list|()
argument_list|,
literal|"item"
argument_list|)
decl_stmt|;
specifier|final
name|IdValue
name|room
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|room
operator|.
name|getValue
argument_list|()
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|delimiter
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|p
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ArrangeHours
extends|extends
name|HTML
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
specifier|public
name|ArrangeHours
parameter_list|()
block|{
name|super
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|3
return|;
block|}
block|}
specifier|public
name|Boolean
name|isClassSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
return|return
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isClassSelected
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAllowSelection
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignment
name|record
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
operator|&&
name|record
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
return|return
name|isClassSelected
argument_list|(
name|row
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getRow
parameter_list|(
name|Long
name|classId
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignment
name|record
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
operator|&&
name|record
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
return|return
name|row
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|selectClass
parameter_list|(
name|Long
name|classId
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAllowSelection
argument_list|()
condition|)
return|return;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignment
name|record
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
operator|&&
name|record
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|classId
argument_list|)
condition|)
block|{
name|selectClass
argument_list|(
name|row
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|protected
name|boolean
name|isSelectedClassRequired
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Preference
name|p
range|:
name|iSelectedClasses
control|)
if|if
condition|(
name|p
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|id
argument_list|)
condition|)
return|return
name|p
operator|.
name|isRequired
argument_list|()
return|;
return|return
name|iRequired
operator|!=
literal|null
operator|&&
name|iRequired
operator|.
name|isEnabled
argument_list|()
operator|&&
name|iRequired
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|protected
name|Preference
name|getSelection
parameter_list|(
name|ClassAssignment
name|a
parameter_list|)
block|{
return|return
name|a
operator|.
name|getSelection
argument_list|(
name|isSelectedClassRequired
argument_list|(
name|a
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|selectClass
parameter_list|(
name|int
name|row
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|ClassAssignment
name|a
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
condition|)
name|iSelectedClasses
operator|.
name|add
argument_list|(
name|getSelection
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSelectedClasses
operator|.
name|remove
argument_list|(
name|getSelection
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CheckBox
name|getClassSelection
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
return|return
operator|(
name|CheckBox
operator|)
name|w
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCanSelectRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
name|getClassSelection
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSetValue
parameter_list|(
name|RequestedCourse
modifier|...
name|courses
parameter_list|)
block|{
name|iSelectedClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|courses
operator|!=
literal|null
condition|)
for|for
control|(
name|RequestedCourse
name|course
range|:
name|courses
control|)
if|if
condition|(
name|course
operator|!=
literal|null
operator|&&
name|course
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|iSelectedClasses
operator|.
name|addAll
argument_list|(
name|course
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Preference
name|p
range|:
name|course
operator|.
name|getSelectedClasses
argument_list|()
control|)
if|if
condition|(
name|p
operator|.
name|isRequired
argument_list|()
operator|&&
name|iRequired
operator|!=
literal|null
condition|)
name|iRequired
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignment
name|a
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|CheckBox
name|ch
init|=
name|getClassSelection
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
operator|&&
name|a
operator|!=
literal|null
condition|)
block|{
name|ch
operator|.
name|setValue
argument_list|(
name|iSelectedClasses
operator|.
name|contains
argument_list|(
name|getSelection
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setSelected
argument_list|(
name|row
argument_list|,
name|iSelectedClasses
operator|.
name|contains
argument_list|(
name|getSelection
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onGetValue
parameter_list|(
name|RequestedCourse
name|course
parameter_list|)
block|{
name|course
operator|.
name|setSelectedClasses
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignment
name|clazz
init|=
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
name|course
operator|.
name|setSelectedClass
argument_list|(
name|getSelection
argument_list|(
name|clazz
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Selection
extends|extends
name|AriaCheckBox
implements|implements
name|UniTimeTable
operator|.
name|HasCellAlignment
block|{
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
block|}
block|}
specifier|public
name|Set
argument_list|<
name|Preference
argument_list|>
name|getAllSelectedClasses
parameter_list|()
block|{
return|return
name|iSelectedClasses
return|;
block|}
block|}
end_class

end_unit

