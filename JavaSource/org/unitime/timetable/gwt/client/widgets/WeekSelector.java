begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|IntervalSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcImplementedBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|WeekInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|regexp
operator|.
name|shared
operator|.
name|MatchResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|regexp
operator|.
name|shared
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_class
specifier|public
class|class
name|WeekSelector
extends|extends
name|IntervalSelector
argument_list|<
name|WeekInterface
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|RegExp
name|iRegExp
init|=
name|RegExp
operator|.
name|compile
argument_list|(
literal|"[^0-9]*([0-9]+)[/ ]*([0-9]*)[ -]*([0-9]*)[/ ]*([0-9]*)"
argument_list|)
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iAcademicSession
decl_stmt|;
specifier|public
name|WeekSelector
parameter_list|(
name|AcademicSessionProvider
name|session
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iAcademicSession
operator|=
name|session
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|init
argument_list|(
name|iAcademicSession
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
name|init
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
if|if
condition|(
name|sessionId
operator|==
literal|null
condition|)
block|{
name|setHint
argument_list|(
literal|"No academic session is selected."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHint
argument_list|(
literal|"Loading data for "
operator|+
name|iAcademicSession
operator|.
name|getAcademicSessionName
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|WeekSelectorRequest
argument_list|(
name|sessionId
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|WeekInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|WeekInterface
argument_list|>
name|result
parameter_list|)
block|{
name|clearHint
argument_list|()
expr_stmt|;
name|setValues
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|setDefaultValue
argument_list|(
operator|new
name|Interval
argument_list|()
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|GwtRpcImplementedBy
argument_list|(
literal|"org.unitime.timetable.events.WeekSelectorBackend"
argument_list|)
specifier|public
specifier|static
class|class
name|WeekSelectorRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|WeekInterface
argument_list|>
argument_list|>
block|{
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|public
name|WeekSelectorRequest
parameter_list|()
block|{
block|}
specifier|public
name|WeekSelectorRequest
parameter_list|(
name|Long
name|sessionId
parameter_list|)
block|{
name|iSessionId
operator|=
name|sessionId
expr_stmt|;
block|}
specifier|public
name|Long
name|getSessionId
parameter_list|()
block|{
return|return
name|iSessionId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Interval
name|parse
parameter_list|(
name|String
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|==
literal|null
operator|||
name|getValues
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|new
name|Interval
argument_list|()
return|;
name|MatchResult
name|match
init|=
name|iRegExp
operator|.
name|exec
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|int
name|m1
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|d1
init|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|WeekInterface
name|first
init|=
name|find
argument_list|(
name|m1
argument_list|,
name|d1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|int
name|m2
init|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|int
name|d2
init|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|4
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|match
operator|.
name|getGroup
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|m2
operator|==
name|m1
operator|&&
name|d2
operator|<
name|d1
condition|)
name|d2
operator|=
name|d1
expr_stmt|;
name|WeekInterface
name|last
init|=
operator|(
name|match
operator|.
name|getGroup
argument_list|(
literal|3
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|find
argument_list|(
name|m2
argument_list|,
name|d2
argument_list|,
name|first
argument_list|)
operator|)
decl_stmt|;
return|return
operator|new
name|Interval
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
return|;
block|}
return|return
operator|new
name|Interval
argument_list|()
return|;
block|}
specifier|public
name|WeekInterface
name|find
parameter_list|(
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|,
name|WeekInterface
name|after
parameter_list|)
block|{
name|WeekInterface
name|first
init|=
literal|null
decl_stmt|;
for|for
control|(
name|WeekInterface
name|w
range|:
name|getValues
argument_list|()
control|)
block|{
if|if
condition|(
name|after
operator|!=
literal|null
operator|&&
name|w
operator|.
name|getDayOfYear
argument_list|()
operator|<
name|after
operator|.
name|getDayOfYear
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
name|first
operator|=
name|w
expr_stmt|;
for|for
control|(
name|String
name|dayName
range|:
name|w
operator|.
name|getDayNames
argument_list|()
control|)
block|{
name|int
name|m
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dayName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dayName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|dayName
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|dayName
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
name|month
operator|&&
name|d
operator|==
name|day
condition|)
return|return
name|w
return|;
block|}
block|}
name|String
name|firstDay
init|=
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|m
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|firstDay
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|firstDay
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|firstDay
operator|.
name|substring
argument_list|(
literal|1
operator|+
name|firstDay
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|month
operator|<
name|m
operator|||
operator|(
name|m
operator|==
name|month
operator|&&
name|day
operator|<
name|d
operator|)
condition|?
name|first
operator|==
literal|null
condition|?
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|first
else|:
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|.
name|isAll
argument_list|()
condition|)
return|return
name|interval
operator|.
name|isEnableFilter
argument_list|()
condition|?
name|MESSAGES
operator|.
name|itemAllWeeksWithFilter
argument_list|()
else|:
name|MESSAGES
operator|.
name|itemAllWeeks
argument_list|()
return|;
if|if
condition|(
name|interval
operator|.
name|isOne
argument_list|()
condition|)
return|return
name|MESSAGES
operator|.
name|itemWeek
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
return|return
literal|"&nbsp;&nbsp;&nbsp;"
operator|+
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|" - "
operator|+
name|interval
operator|.
name|getLast
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|6
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplaceString
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|.
name|isAll
argument_list|()
condition|)
return|return
name|interval
operator|.
name|isEnableFilter
argument_list|()
condition|?
name|MESSAGES
operator|.
name|itemAllWeeksWithFilter
argument_list|()
else|:
name|MESSAGES
operator|.
name|itemAllWeeks
argument_list|()
return|;
if|if
condition|(
name|interval
operator|.
name|isOne
argument_list|()
condition|)
return|return
name|MESSAGES
operator|.
name|itemWeek
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
return|return
name|MESSAGES
operator|.
name|itemWeeks
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|interval
operator|.
name|getLast
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getSelection
parameter_list|()
block|{
if|if
condition|(
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|getValue
argument_list|()
operator|.
name|isAll
argument_list|()
condition|)
return|return
literal|""
return|;
return|return
operator|(
name|getValue
argument_list|()
operator|.
name|isOne
argument_list|()
condition|?
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"-"
operator|+
name|getValue
argument_list|()
operator|.
name|getLast
argument_list|()
operator|.
name|getDayNames
argument_list|()
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|)
return|;
block|}
specifier|public
name|int
name|getFirstDayOfYear
parameter_list|()
block|{
if|if
condition|(
name|getValues
argument_list|()
operator|==
literal|null
operator|||
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLastDayOfYear
parameter_list|()
block|{
if|if
condition|(
name|getValues
argument_list|()
operator|==
literal|null
operator|||
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getDayOfYear
argument_list|()
operator|+
literal|6
return|;
block|}
block|}
end_class

end_unit

