begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_class
specifier|public
class|class
name|NumberBox
extends|extends
name|TextBox
block|{
specifier|private
name|boolean
name|iDecimal
init|=
literal|false
decl_stmt|,
name|iNegative
init|=
literal|false
decl_stmt|;
specifier|public
name|NumberBox
parameter_list|()
block|{
name|setStyleName
argument_list|(
literal|"gwt-SuggestBox"
argument_list|)
expr_stmt|;
name|setWidth
argument_list|(
literal|"100px"
argument_list|)
expr_stmt|;
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|()
operator|||
name|isReadOnly
argument_list|()
condition|)
return|return;
name|int
name|keyCode
init|=
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|keyCode
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_BACKSPACE
case|:
case|case
name|KeyCodes
operator|.
name|KEY_DELETE
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
case|case
name|KeyCodes
operator|.
name|KEY_RIGHT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_LEFT
case|:
case|case
name|KeyCodes
operator|.
name|KEY_TAB
case|:
return|return;
block|}
if|if
condition|(
name|isDecimal
argument_list|()
operator|&&
name|event
operator|.
name|getCharCode
argument_list|()
operator|==
literal|'.'
operator|&&
operator|!
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
return|return;
if|if
condition|(
name|isNegative
argument_list|()
operator|&&
name|event
operator|.
name|getCharCode
argument_list|()
operator|==
literal|'-'
operator|&&
operator|!
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
literal|"-"
argument_list|)
operator|&&
operator|(
name|getCursorPos
argument_list|()
operator|==
literal|0
operator|||
name|getSelectionLength
argument_list|()
operator|==
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|)
condition|)
return|return;
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|event
operator|.
name|getCharCode
argument_list|()
argument_list|)
condition|)
return|return;
name|cancelKey
argument_list|( )
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDecimal
parameter_list|()
block|{
return|return
name|iDecimal
return|;
block|}
specifier|public
name|void
name|setDecimal
parameter_list|(
name|boolean
name|decimal
parameter_list|)
block|{
name|iDecimal
operator|=
name|decimal
expr_stmt|;
block|}
specifier|public
name|boolean
name|isNegative
parameter_list|()
block|{
return|return
name|iNegative
return|;
block|}
specifier|public
name|void
name|setNegative
parameter_list|(
name|boolean
name|negative
parameter_list|)
block|{
name|iNegative
operator|=
name|negative
expr_stmt|;
block|}
specifier|public
name|Double
name|toDouble
parameter_list|()
block|{
try|try
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Integer
name|toInteger
parameter_list|()
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|getValue
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|Number
name|number
parameter_list|)
block|{
name|super
operator|.
name|setValue
argument_list|(
name|number
operator|==
literal|null
condition|?
literal|""
else|:
name|number
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

