begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|HasMouseDownHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_class
specifier|public
class|class
name|IntervalSelector
parameter_list|<
name|T
parameter_list|>
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|IntervalSelector
argument_list|<
name|T
argument_list|>
operator|.
name|Interval
argument_list|>
block|{
specifier|private
name|boolean
name|iAllowMultiSelection
decl_stmt|;
specifier|private
name|Interval
name|iValue
decl_stmt|;
specifier|private
name|Interval
name|iDefaultValue
decl_stmt|;
specifier|private
name|List
argument_list|<
name|T
argument_list|>
name|iValues
init|=
literal|null
decl_stmt|;
specifier|private
name|TextBox
name|iFilter
decl_stmt|;
specifier|private
name|PopupPanel
name|iPopup
decl_stmt|;
specifier|private
name|Menu
name|iPopupMenu
decl_stmt|;
specifier|private
name|ScrollPanel
name|iPopupScroll
decl_stmt|;
specifier|private
name|P
name|iPanel
decl_stmt|;
specifier|private
name|Button
name|iPrev
decl_stmt|,
name|iNext
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|AbsolutePanel
argument_list|>
name|iWidget
decl_stmt|;
specifier|public
name|IntervalSelector
parameter_list|(
name|boolean
name|allowMultiSelection
parameter_list|)
block|{
name|iAllowMultiSelection
operator|=
name|allowMultiSelection
expr_stmt|;
name|iPanel
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-IntervalSelector"
argument_list|)
expr_stmt|;
name|P
name|row
init|=
operator|new
name|P
argument_list|(
literal|"row"
argument_list|)
decl_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|iPrev
operator|=
operator|new
name|Button
argument_list|(
literal|"&laquo;"
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|Interval
name|prev
init|=
operator|(
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|previous
argument_list|(
name|getValue
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|setValue
argument_list|(
name|prev
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iNext
operator|=
operator|new
name|Button
argument_list|(
literal|"&raquo;"
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|addMouseDownHandler
argument_list|(
operator|new
name|MouseDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseDown
parameter_list|(
name|MouseDownEvent
name|event
parameter_list|)
block|{
name|Interval
name|next
init|=
operator|(
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|next
argument_list|(
name|getValue
argument_list|()
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|setValue
argument_list|(
name|next
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
name|iFilter
operator|.
name|addStyleName
argument_list|(
literal|"selection"
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isSuggestionsShowing
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|iPopupMenu
operator|.
name|getSelectedItemIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
if|if
condition|(
name|iPopupMenu
operator|.
name|getSelectedItemIndex
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|iPopupMenu
operator|.
name|getNumItems
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|iPopupMenu
operator|.
name|getSelectedItemIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_TAB
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|iPopupMenu
operator|.
name|executeSelected
argument_list|()
expr_stmt|;
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
operator|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getAltKey
argument_list|()
operator|||
name|iFilter
operator|.
name|getCursorPos
argument_list|()
operator|==
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|showSuggestions
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|selectASuggestion
argument_list|()
operator|&&
operator|!
name|isSuggestionsShowing
argument_list|()
condition|)
name|showSuggestions
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iValues
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isAllowMultiSelection
argument_list|()
operator|&&
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|getDisplayString
argument_list|(
operator|new
name|Interval
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|setValue
argument_list|(
operator|new
name|Interval
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Interval
name|value
init|=
literal|null
decl_stmt|;
name|iterator
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|getDisplayString
argument_list|(
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
break|break
name|iterator
break|;
block|}
if|if
condition|(
name|isAllowMultiSelection
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|iValues
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|getDisplayString
argument_list|(
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|iValues
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|value
operator|=
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|iValues
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
break|break
name|iterator
break|;
block|}
block|}
block|}
block|}
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|showSuggestions
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iPopupMenu
operator|=
operator|new
name|Menu
argument_list|()
expr_stmt|;
name|iPopupScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iPopupMenu
argument_list|)
expr_stmt|;
name|iPopupScroll
operator|.
name|addStyleName
argument_list|(
literal|"scroll"
argument_list|)
expr_stmt|;
name|iPopup
operator|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setPreviewingAllNativeEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setStyleName
argument_list|(
literal|"unitime-IntervalSelectorPopup"
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setWidget
argument_list|(
name|iPopupScroll
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|iPrev
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|iNext
argument_list|)
expr_stmt|;
name|iWidget
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|AbsolutePanel
argument_list|>
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iWidget
operator|.
name|setHint
argument_list|(
literal|"Loading academic sessions..."
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iWidget
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hideSuggestions
parameter_list|()
block|{
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|showSuggestions
parameter_list|()
block|{
if|if
condition|(
name|iValues
operator|==
literal|null
operator|||
name|iValues
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|iPopup
operator|.
name|showRelativeTo
argument_list|(
name|iFilter
argument_list|)
expr_stmt|;
name|iPopupMenu
operator|.
name|scrollToView
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|boolean
name|isSuggestionsShowing
parameter_list|()
block|{
return|return
name|iPopup
operator|.
name|isShowing
argument_list|()
return|;
block|}
specifier|protected
name|void
name|createSuggestions
parameter_list|()
block|{
name|iPopupMenu
operator|.
name|clearItems
argument_list|()
expr_stmt|;
if|if
condition|(
name|isAllowMultiSelection
argument_list|()
condition|)
block|{
name|Interval
name|all
init|=
operator|new
name|Interval
argument_list|()
decl_stmt|;
name|iPopupMenu
operator|.
name|addItem
argument_list|(
operator|new
name|IntervalMenuItem
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|all
operator|.
name|equals
argument_list|(
name|iDefaultValue
argument_list|)
operator|||
name|getDisplayString
argument_list|(
name|all
argument_list|)
operator|.
name|equals
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|select
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Interval
name|one
init|=
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|iPopupMenu
operator|.
name|addItem
argument_list|(
operator|new
name|IntervalMenuItem
argument_list|(
name|one
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|one
operator|.
name|equals
argument_list|(
name|iDefaultValue
argument_list|)
operator|&&
name|select
operator|<
literal|0
operator|)
operator|||
name|getReplaceString
argument_list|(
name|one
argument_list|)
operator|.
name|equals
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|one
operator|.
name|equals
argument_list|(
name|iValue
argument_list|)
condition|)
name|select
operator|=
name|iPopupMenu
operator|.
name|getNumItems
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|isAllowMultiSelection
argument_list|()
operator|&&
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
name|getValue
argument_list|()
operator|.
name|getFirst
argument_list|()
operator|.
name|equals
argument_list|(
name|one
operator|.
name|getFirst
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|iValues
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Interval
name|multi
init|=
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|iValues
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|iPopupMenu
operator|.
name|addItem
argument_list|(
operator|new
name|IntervalMenuItem
argument_list|(
name|multi
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|multi
operator|.
name|equals
argument_list|(
name|iDefaultValue
argument_list|)
operator|&&
name|select
operator|<
literal|0
operator|)
operator|||
name|getReplaceString
argument_list|(
name|multi
argument_list|)
operator|.
name|equals
argument_list|(
name|iFilter
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|multi
operator|.
name|equals
argument_list|(
name|iValue
argument_list|)
condition|)
name|select
operator|=
name|iPopupMenu
operator|.
name|getNumItems
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|select
operator|>=
literal|0
condition|)
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|select
argument_list|)
expr_stmt|;
name|iLastSelected
operator|=
name|iFilter
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
specifier|private
name|String
name|iLastSelected
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|selectASuggestion
parameter_list|()
block|{
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastSelected
argument_list|)
condition|)
return|return
literal|false
return|;
name|iLastSelected
operator|=
name|iFilter
operator|.
name|getText
argument_list|()
expr_stmt|;
name|Interval
name|parsed
init|=
name|parse
argument_list|(
name|iLastSelected
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsed
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isAllowMultiSelection
argument_list|()
condition|)
return|return
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|parsed
argument_list|)
operator|>=
literal|0
return|;
if|if
condition|(
name|parsed
operator|.
name|isAll
argument_list|()
condition|)
return|return
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
literal|0
argument_list|)
return|;
name|int
name|idx
init|=
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|parsed
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>=
literal|0
operator|&&
operator|!
name|parsed
operator|.
name|isOne
argument_list|()
condition|)
return|return
literal|true
return|;
name|idx
operator|=
name|iPopupMenu
operator|.
name|indexOf
argument_list|(
operator|new
name|Interval
argument_list|(
name|parsed
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iPopupMenu
operator|.
name|getNumItems
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|IntervalMenuItem
name|item
init|=
operator|(
name|IntervalMenuItem
operator|)
name|iPopupMenu
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getInterval
argument_list|()
operator|.
name|getLast
argument_list|()
operator|!=
literal|null
condition|)
name|iPopupMenu
operator|.
name|removeItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|iValues
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|j
operator|>
name|iValues
operator|.
name|indexOf
argument_list|(
name|parsed
operator|.
name|getFirst
argument_list|()
argument_list|)
condition|;
name|j
operator|--
control|)
block|{
name|Interval
name|multi
init|=
operator|new
name|Interval
argument_list|(
name|parsed
operator|.
name|getFirst
argument_list|()
argument_list|,
name|iValues
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|iPopupMenu
operator|.
name|insertItem
argument_list|(
operator|new
name|IntervalMenuItem
argument_list|(
name|multi
argument_list|)
argument_list|,
name|idx
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|parsed
argument_list|)
operator|>=
literal|0
return|;
block|}
else|else
block|{
name|suggestions
label|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iPopupMenu
operator|.
name|getNumItems
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|IntervalMenuItem
name|item
init|=
operator|(
name|IntervalMenuItem
operator|)
name|iPopupMenu
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|getDisplayString
argument_list|(
name|item
operator|.
name|getInterval
argument_list|()
argument_list|)
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|c
range|:
name|iLastSelected
operator|.
name|split
argument_list|(
literal|"[ \\(\\),]"
argument_list|)
control|)
if|if
condition|(
operator|!
name|text
operator|.
name|contains
argument_list|(
name|c
operator|.
name|trim
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
continue|continue
name|suggestions
continue|;
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|iDefaultValue
operator|!=
literal|null
condition|)
return|return
name|iPopupMenu
operator|.
name|selectItem
argument_list|(
name|iDefaultValue
argument_list|)
operator|>=
literal|0
return|;
return|return
literal|false
return|;
block|}
specifier|protected
name|Interval
name|parse
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isAllowMultiSelection
parameter_list|()
block|{
return|return
name|iAllowMultiSelection
return|;
block|}
specifier|public
name|void
name|setAllowMultiSelection
parameter_list|(
name|boolean
name|allowMultiSelection
parameter_list|)
block|{
name|iAllowMultiSelection
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|setValues
parameter_list|(
name|List
argument_list|<
name|T
argument_list|>
name|values
parameter_list|)
block|{
name|iValues
operator|=
name|values
expr_stmt|;
if|if
condition|(
name|iValue
operator|!=
literal|null
operator|&&
operator|!
name|iValues
operator|.
name|contains
argument_list|(
name|iValue
argument_list|)
condition|)
name|setValue
argument_list|(
name|iDefaultValue
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|createSuggestions
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|iValues
return|;
block|}
specifier|public
class|class
name|Interval
block|{
specifier|private
name|T
name|iFirst
init|=
literal|null
decl_stmt|,
name|iLast
init|=
literal|null
decl_stmt|;
specifier|public
name|Interval
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Interval
parameter_list|(
name|T
name|first
parameter_list|)
block|{
name|this
argument_list|(
name|first
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Interval
parameter_list|(
name|T
name|first
parameter_list|,
name|T
name|last
parameter_list|)
block|{
name|iFirst
operator|=
name|first
expr_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|!
name|last
operator|.
name|equals
argument_list|(
name|first
argument_list|)
condition|)
block|{
if|if
condition|(
name|iValues
operator|.
name|indexOf
argument_list|(
name|first
argument_list|)
operator|<
name|iValues
operator|.
name|indexOf
argument_list|(
name|last
argument_list|)
condition|)
block|{
name|iLast
operator|=
name|last
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|T
name|getFirst
parameter_list|()
block|{
return|return
name|iFirst
return|;
block|}
specifier|public
name|T
name|getLast
parameter_list|()
block|{
return|return
name|iLast
return|;
block|}
specifier|public
name|boolean
name|isAll
parameter_list|()
block|{
return|return
name|iFirst
operator|==
literal|null
return|;
block|}
specifier|public
name|boolean
name|isOne
parameter_list|()
block|{
return|return
name|iFirst
operator|!=
literal|null
operator|&&
name|iLast
operator|==
literal|null
return|;
block|}
specifier|public
name|int
name|getNrSelected
parameter_list|()
block|{
return|return
operator|(
name|isAll
argument_list|()
condition|?
name|iValues
operator|.
name|size
argument_list|()
else|:
name|isOne
argument_list|()
condition|?
literal|1
else|:
name|iValues
operator|.
name|indexOf
argument_list|(
name|iLast
argument_list|)
operator|-
name|iValues
operator|.
name|indexOf
argument_list|(
name|iFirst
argument_list|)
operator|+
literal|1
operator|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|T
argument_list|>
name|getSelected
parameter_list|()
block|{
name|List
argument_list|<
name|T
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAll
argument_list|()
condition|)
block|{
for|for
control|(
name|T
name|t
range|:
name|iValues
control|)
name|ret
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isOne
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|iFirst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|iValues
operator|.
name|indexOf
argument_list|(
name|iFirst
argument_list|)
init|;
name|i
operator|<=
name|iValues
operator|.
name|indexOf
argument_list|(
name|iLast
argument_list|)
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|add
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getReplaceString
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|IntervalSelector
operator|.
name|Interval
operator|)
condition|)
return|return
literal|false
return|;
name|Interval
name|i
init|=
operator|(
name|Interval
operator|)
name|o
decl_stmt|;
return|return
operator|(
name|getFirst
argument_list|()
operator|==
literal|null
condition|?
name|i
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
else|:
name|getFirst
argument_list|()
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|getLast
argument_list|()
operator|==
literal|null
condition|?
name|i
operator|.
name|getLast
argument_list|()
operator|==
literal|null
else|:
name|getLast
argument_list|()
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getLast
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
specifier|protected
name|Interval
name|previous
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|.
name|isOne
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
name|iValues
operator|.
name|indexOf
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|(
name|idx
operator|<=
literal|0
condition|?
name|isAllowMultiSelection
argument_list|()
condition|?
operator|new
name|Interval
argument_list|()
else|:
literal|null
else|:
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|Interval
name|next
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|.
name|isOne
argument_list|()
condition|)
block|{
name|int
name|idx
init|=
operator|(
name|iValues
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|iValues
operator|.
name|indexOf
argument_list|(
name|interval
operator|.
name|getFirst
argument_list|()
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|iValues
operator|==
literal|null
condition|?
literal|null
else|:
name|idx
operator|+
literal|1
operator|<
name|iValues
operator|.
name|size
argument_list|()
condition|?
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
if|else if
condition|(
name|interval
operator|.
name|isAll
argument_list|()
condition|)
block|{
return|return
operator|(
name|iValues
operator|==
literal|null
operator|||
name|iValues
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|new
name|Interval
argument_list|(
name|iValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|protected
name|String
name|getDisplayString
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|.
name|isAll
argument_list|()
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|interval
operator|.
name|isOne
argument_list|()
condition|)
return|return
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|toString
argument_list|()
return|;
return|return
literal|"&nbsp;&nbsp;&nbsp;"
operator|+
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
name|interval
operator|.
name|getLast
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|String
name|getReplaceString
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
if|if
condition|(
name|interval
operator|.
name|isAll
argument_list|()
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|interval
operator|.
name|isOne
argument_list|()
condition|)
return|return
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|toString
argument_list|()
return|;
return|return
name|interval
operator|.
name|getFirst
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" - "
operator|+
name|interval
operator|.
name|getLast
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|IntervalSelector
argument_list|<
name|T
argument_list|>
operator|.
name|Interval
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|IntervalSelector
argument_list|<
name|T
argument_list|>
operator|.
name|Interval
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|Interval
name|getDefaultValue
parameter_list|()
block|{
return|return
name|iDefaultValue
return|;
block|}
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|Interval
name|defaultValue
parameter_list|)
block|{
name|iDefaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|IntervalSelector
argument_list|<
name|T
argument_list|>
operator|.
name|Interval
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|IntervalSelector
argument_list|<
name|T
argument_list|>
operator|.
name|Interval
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|iValue
operator|==
literal|null
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|getReplaceString
argument_list|(
name|iValue
argument_list|)
argument_list|)
expr_stmt|;
name|iPrev
operator|.
name|setEnabled
argument_list|(
name|previous
argument_list|(
name|iValue
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iNext
operator|.
name|setEnabled
argument_list|(
name|next
argument_list|(
name|iValue
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
name|createSuggestions
argument_list|()
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|Menu
extends|extends
name|MenuBar
block|{
name|Menu
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setFocusOnHoverEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNumItems
parameter_list|()
block|{
return|return
name|getItems
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSelectedItemIndex
parameter_list|()
block|{
name|MenuItem
name|selectedItem
init|=
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedItem
operator|!=
literal|null
condition|)
return|return
name|getItems
argument_list|()
operator|.
name|indexOf
argument_list|(
name|selectedItem
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|selectItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
block|{
name|selectItem
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|iPopupScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|selectItem
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|IntervalMenuItem
operator|)
name|items
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getInterval
argument_list|()
operator|.
name|equals
argument_list|(
name|interval
argument_list|)
condition|)
block|{
name|selectItem
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|iPopupScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|int
name|indexOf
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|IntervalMenuItem
operator|)
name|items
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getInterval
argument_list|()
operator|.
name|equals
argument_list|(
name|interval
argument_list|)
condition|)
return|return
name|i
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|scrollToView
parameter_list|()
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getSelectedItemIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
block|{
name|iPopupScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|executeSelected
parameter_list|()
block|{
name|MenuItem
name|selected
init|=
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
name|selected
operator|.
name|getCommand
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MenuItem
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
return|return
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Button
extends|extends
name|AbsolutePanel
implements|implements
name|HasMouseDownHandlers
block|{
specifier|private
name|boolean
name|iEnabled
init|=
literal|true
decl_stmt|;
specifier|private
name|Button
parameter_list|(
name|String
name|caption
parameter_list|)
block|{
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|caption
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|iEnabled
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|iEnabled
operator|==
name|enabled
condition|)
return|return;
name|iEnabled
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|iEnabled
condition|)
block|{
name|addStyleName
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addStyleName
argument_list|(
literal|"disabled"
argument_list|)
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|MouseDownEvent
operator|.
name|fireNativeEvent
argument_list|(
name|event
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addMouseDownHandler
parameter_list|(
name|MouseDownHandler
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|MouseDownEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|IntervalCommand
implements|implements
name|Command
block|{
specifier|private
name|Interval
name|iInterval
decl_stmt|;
specifier|private
name|IntervalCommand
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
name|iInterval
operator|=
name|interval
expr_stmt|;
block|}
specifier|public
name|Interval
name|getInterval
parameter_list|()
block|{
return|return
name|iInterval
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getDisplayString
argument_list|(
name|getInterval
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|hideSuggestions
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|getInterval
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iLastSelected
operator|=
name|getReplaceString
argument_list|(
name|getInterval
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|IntervalMenuItem
extends|extends
name|MenuItem
block|{
specifier|private
name|Interval
name|iInterval
decl_stmt|;
specifier|private
name|IntervalMenuItem
parameter_list|(
name|Interval
name|interval
parameter_list|)
block|{
name|super
argument_list|(
name|getDisplayString
argument_list|(
name|interval
argument_list|)
argument_list|,
literal|true
argument_list|,
operator|new
name|IntervalCommand
argument_list|(
name|interval
argument_list|)
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"whiteSpace"
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|iInterval
operator|=
name|interval
expr_stmt|;
block|}
specifier|public
name|Interval
name|getInterval
parameter_list|()
block|{
return|return
name|iInterval
return|;
block|}
block|}
specifier|public
name|void
name|setErrorHint
parameter_list|(
name|String
name|hint
parameter_list|)
block|{
name|iWidget
operator|.
name|setErrorHint
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setHint
parameter_list|(
name|String
name|hint
parameter_list|)
block|{
name|iWidget
operator|.
name|setHint
argument_list|(
name|hint
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearHint
parameter_list|()
block|{
name|iWidget
operator|.
name|clearHint
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

