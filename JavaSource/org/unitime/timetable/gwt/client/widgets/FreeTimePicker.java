begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|FreeTimePicker
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|List
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|CellSelectingGrid
name|iGrid
decl_stmt|;
specifier|private
name|boolean
index|[]
index|[]
name|iSelected
decl_stmt|;
specifier|private
name|long
index|[]
index|[]
name|iLastSelectedTime
decl_stmt|;
specifier|private
name|long
name|iTime
init|=
literal|0
decl_stmt|;
specifier|public
name|FreeTimePicker
parameter_list|()
block|{
name|iGrid
operator|=
operator|new
name|CellSelectingGrid
argument_list|(
literal|1
operator|+
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
argument_list|,
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iSelected
operator|=
operator|new
name|boolean
index|[
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
index|]
index|[
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|iLastSelectedTime
operator|=
operator|new
name|long
index|[
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
index|]
index|[
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
expr_stmt|;
name|iGrid
operator|.
name|setHTML
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|"unitime-FreeTimePicker-TopLeftCorner"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
literal|1
operator|+
name|i
argument_list|,
literal|0
argument_list|,
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|1
operator|+
name|i
argument_list|,
literal|0
argument_list|,
literal|"unitime-FreeTimePicker-VerticalHeader"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|1
operator|+
name|i
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|i
argument_list|,
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|i
argument_list|,
literal|"unitime-FreeTimePicker-HorizontalHeader"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p
operator|++
control|)
block|{
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
literal|false
expr_stmt|;
name|iLastSelectedTime
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
literal|0
expr_stmt|;
name|iGrid
operator|.
name|setHTML
argument_list|(
literal|1
operator|+
name|d
argument_list|,
literal|1
operator|+
name|p
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|1
operator|+
name|d
argument_list|,
literal|1
operator|+
name|p
argument_list|,
literal|"unitime-FreeTimePicker-Slot"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|td
argument_list|(
name|d
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|update
argument_list|()
expr_stmt|;
name|initWidget
argument_list|(
name|iGrid
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelected
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|period
parameter_list|)
block|{
return|return
name|iSelected
index|[
name|day
index|]
index|[
name|period
index|]
return|;
block|}
specifier|private
name|Element
name|td
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|period
parameter_list|)
block|{
return|return
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|day
operator|+
literal|1
argument_list|,
name|period
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|private
name|String
name|bg
parameter_list|(
name|int
name|day
parameter_list|,
name|int
name|period
parameter_list|)
block|{
name|boolean
name|mwf
init|=
operator|(
name|day
operator|%
literal|2
operator|==
literal|0
operator|)
decl_stmt|;
name|boolean
name|odd
init|=
operator|(
name|mwf
condition|?
name|period
operator|%
literal|4
operator|<=
literal|1
else|:
name|period
operator|%
literal|6
operator|>
literal|2
operator|)
decl_stmt|;
name|boolean
name|block
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|iDownDay
operator|>=
literal|0
operator|&&
name|iOverDay
operator|>=
literal|0
condition|)
block|{
name|int
name|d0
init|=
operator|(
name|iDownDay
operator|<
name|iOverDay
condition|?
name|iDownDay
else|:
name|iOverDay
operator|)
decl_stmt|;
name|int
name|d1
init|=
operator|(
name|iDownDay
operator|<
name|iOverDay
condition|?
name|iOverDay
else|:
name|iDownDay
operator|)
decl_stmt|;
name|int
name|p0
init|=
operator|(
name|iDownPeriod
operator|<
name|iOverPeriod
condition|?
name|iDownPeriod
else|:
name|iOverPeriod
operator|)
decl_stmt|;
name|int
name|p1
init|=
operator|(
name|iDownPeriod
operator|<
name|iOverPeriod
condition|?
name|iOverPeriod
else|:
name|iDownPeriod
operator|)
decl_stmt|;
name|boolean
name|mwfDown
init|=
operator|(
name|iDownDay
operator|%
literal|2
operator|==
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|d0
operator|<=
name|day
operator|&&
name|day
operator|<=
name|d1
operator|&&
name|p0
operator|<=
name|period
operator|&&
name|period
operator|<=
name|p1
operator|&&
operator|(
name|d1
operator|-
name|d0
operator|<=
literal|1
operator|||
name|mwfDown
operator|==
name|mwf
operator|)
condition|)
name|block
operator|=
literal|true
expr_stmt|;
block|}
name|int
name|r
init|=
literal|255
decl_stmt|;
name|int
name|g
init|=
literal|255
decl_stmt|;
name|int
name|b
init|=
literal|255
decl_stmt|;
if|if
condition|(
name|isSelected
argument_list|(
name|day
argument_list|,
name|period
argument_list|)
condition|)
block|{
name|b
operator|-=
literal|55
expr_stmt|;
name|g
operator|-=
literal|55
expr_stmt|;
block|}
if|else if
condition|(
name|mwf
condition|)
block|{
name|r
operator|-=
operator|(
name|odd
condition|?
literal|15
else|:
literal|30
operator|)
expr_stmt|;
name|g
operator|-=
operator|(
name|odd
condition|?
literal|15
else|:
literal|30
operator|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|-=
operator|(
name|odd
condition|?
literal|15
else|:
literal|30
operator|)
expr_stmt|;
name|b
operator|-=
operator|(
name|odd
condition|?
literal|15
else|:
literal|30
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|block
condition|)
block|{
name|r
operator|-=
literal|25
expr_stmt|;
name|g
operator|-=
literal|25
expr_stmt|;
name|b
operator|-=
literal|25
expr_stmt|;
block|}
return|return
literal|"#"
operator|+
operator|(
name|r
operator|<
literal|16
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|r
argument_list|)
operator|+
operator|(
name|g
operator|<
literal|16
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|g
argument_list|)
operator|+
operator|(
name|b
operator|<
literal|16
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|b
argument_list|)
return|;
block|}
specifier|public
name|int
name|toSlot
parameter_list|(
name|int
name|period
parameter_list|)
block|{
return|return
literal|6
operator|*
operator|(
name|period
operator|+
literal|15
operator|)
return|;
block|}
specifier|public
name|int
name|toPeriod
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
name|int
name|p
init|=
name|slot
operator|/
literal|6
operator|-
literal|15
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|p
operator|>=
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
condition|)
return|return
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
return|;
return|return
name|p
return|;
block|}
specifier|private
name|CourseRequestInterface
operator|.
name|FreeTime
name|generateOneFreeTime
parameter_list|(
name|boolean
index|[]
index|[]
name|s
parameter_list|)
block|{
for|for
control|(
name|int
name|p0
init|=
literal|0
init|;
name|p0
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p0
operator|++
control|)
block|{
for|for
control|(
name|int
name|d0
init|=
literal|0
init|;
name|d0
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d0
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
name|d0
index|]
index|[
name|p0
index|]
condition|)
block|{
name|int
name|lastP1
init|=
name|p0
decl_stmt|;
name|p1
label|:
for|for
control|(
name|int
name|p1
init|=
name|p0
operator|+
literal|1
init|;
name|p1
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p1
operator|++
control|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
name|d
index|]
index|[
name|p0
index|]
operator|&&
operator|!
name|s
index|[
name|d
index|]
index|[
name|p1
index|]
condition|)
break|break
name|p1
break|;
block|}
name|lastP1
operator|=
name|p1
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|s
index|[
name|d
index|]
index|[
name|p0
index|]
condition|)
name|s
index|[
name|d
index|]
index|[
name|p1
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
if|if
condition|(
name|s
index|[
name|d
index|]
index|[
name|p0
index|]
condition|)
block|{
name|ft
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|s
index|[
name|d
index|]
index|[
name|p0
index|]
operator|=
literal|false
expr_stmt|;
block|}
name|ft
operator|.
name|setStart
argument_list|(
name|toSlot
argument_list|(
name|p0
argument_list|)
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|toSlot
argument_list|(
name|lastP1
operator|+
literal|1
argument_list|)
operator|-
name|toSlot
argument_list|(
name|p0
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ft
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|boolean
name|generateOnePriority
parameter_list|(
name|boolean
index|[]
index|[]
name|s
parameter_list|,
name|int
name|priority
parameter_list|)
block|{
for|for
control|(
name|int
name|p0
init|=
literal|0
init|;
name|p0
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p0
operator|++
control|)
for|for
control|(
name|int
name|d0
init|=
literal|0
init|;
name|d0
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d0
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
name|d0
index|]
index|[
name|p0
index|]
condition|)
block|{
name|boolean
name|mwf0
init|=
operator|(
name|d0
operator|%
literal|2
operator|==
literal|0
operator|)
decl_stmt|;
name|boolean
name|odd0
init|=
operator|(
name|mwf0
condition|?
name|p0
operator|%
literal|4
operator|<=
literal|1
else|:
name|p0
operator|%
literal|6
operator|>
literal|2
operator|)
decl_stmt|;
name|int
name|first
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|freeTimeOneDay150
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeOneDay150
argument_list|()
index|[
name|i
index|]
argument_list|)
operator|<=
name|p0
condition|)
name|first
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|CONSTANTS
operator|.
name|freeTimeOneDay150
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|mwf0
condition|)
block|{
name|boolean
name|hasM
init|=
literal|false
decl_stmt|,
name|hasF
init|=
literal|false
decl_stmt|;
name|boolean
name|hasS
init|=
literal|false
decl_stmt|,
name|hasT
init|=
literal|false
decl_stmt|;
name|boolean
name|allTheSame
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|p1
init|=
name|first
init|;
name|p1
operator|<
name|Math
operator|.
name|min
argument_list|(
name|first
operator|+
literal|6
argument_list|,
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
argument_list|)
condition|;
name|p1
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
literal|0
index|]
index|[
name|p1
index|]
condition|)
name|hasM
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|s
index|[
literal|4
index|]
index|[
name|p1
index|]
condition|)
name|hasF
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p1
operator|-
name|first
operator|>=
literal|2
operator|&&
name|p1
operator|-
name|first
operator|<
literal|4
operator|&&
operator|(
name|s
index|[
literal|0
index|]
index|[
name|p1
index|]
operator|||
name|s
index|[
literal|2
index|]
index|[
name|p1
index|]
operator|||
name|s
index|[
literal|4
index|]
index|[
name|p1
index|]
operator|)
condition|)
name|hasS
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p1
operator|-
name|first
operator|>=
literal|4
operator|&&
operator|(
name|s
index|[
literal|0
index|]
index|[
name|p1
index|]
operator|||
name|s
index|[
literal|2
index|]
index|[
name|p1
index|]
operator|||
name|s
index|[
literal|4
index|]
index|[
name|p1
index|]
operator|)
condition|)
name|hasT
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d0
operator|!=
literal|0
operator|&&
name|s
index|[
literal|0
index|]
index|[
name|p1
index|]
condition|)
name|allTheSame
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d0
operator|!=
literal|2
operator|&&
name|s
index|[
literal|2
index|]
index|[
name|p1
index|]
condition|)
name|allTheSame
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d0
operator|!=
literal|4
operator|&&
name|s
index|[
literal|4
index|]
index|[
name|p1
index|]
condition|)
name|allTheSame
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|(
operator|(
operator|!
name|hasM
operator|||
operator|!
name|hasT
operator|||
operator|!
name|hasF
operator|)
operator|&&
name|hasS
operator|&&
name|hasT
operator|)
operator|||
operator|(
name|allTheSame
operator|&&
operator|(
name|hasS
operator|||
name|hasT
operator|)
operator|)
condition|)
block|{
for|for
control|(
name|int
name|p1
init|=
name|first
init|;
name|p1
operator|<
name|Math
operator|.
name|min
argument_list|(
name|first
operator|+
literal|6
argument_list|,
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
argument_list|)
condition|;
name|p1
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
name|d0
index|]
index|[
name|p1
index|]
condition|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
literal|1
operator|+
name|d0
argument_list|,
literal|1
operator|+
name|p1
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|s
index|[
name|d0
index|]
index|[
name|p1
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
name|boolean
name|allTheSame
init|=
literal|true
decl_stmt|;
name|boolean
name|hasT
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|p1
init|=
name|first
init|;
name|p1
operator|<
name|Math
operator|.
name|min
argument_list|(
name|first
operator|+
literal|6
argument_list|,
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
argument_list|)
condition|;
name|p1
operator|++
control|)
block|{
if|if
condition|(
name|p1
operator|-
name|first
operator|>=
literal|4
operator|&&
operator|(
name|s
index|[
literal|1
index|]
index|[
name|p1
index|]
operator|||
name|s
index|[
literal|3
index|]
index|[
name|p1
index|]
operator|)
condition|)
name|hasT
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|d0
operator|!=
literal|1
operator|&&
name|s
index|[
literal|1
index|]
index|[
name|p1
index|]
condition|)
name|allTheSame
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|d0
operator|!=
literal|3
operator|&&
name|s
index|[
literal|3
index|]
index|[
name|p1
index|]
condition|)
name|allTheSame
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|allTheSame
operator|||
operator|(
name|hasT
operator|&&
literal|3
operator|*
operator|(
name|first
operator|/
literal|3
operator|)
operator|!=
name|first
operator|)
condition|)
block|{
for|for
control|(
name|int
name|p1
init|=
name|first
init|;
name|p1
operator|<
name|Math
operator|.
name|min
argument_list|(
name|first
operator|+
literal|6
argument_list|,
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
argument_list|)
condition|;
name|p1
operator|++
control|)
block|{
if|if
condition|(
name|s
index|[
name|d0
index|]
index|[
name|p1
index|]
condition|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
literal|1
operator|+
name|d0
argument_list|,
literal|1
operator|+
name|p1
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|s
index|[
name|d0
index|]
index|[
name|p1
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
name|p1
label|:
for|for
control|(
name|int
name|p1
init|=
name|p0
init|;
name|p1
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p1
operator|++
control|)
for|for
control|(
name|int
name|d1
init|=
literal|0
init|;
name|d1
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d1
operator|++
control|)
block|{
name|boolean
name|mwf1
init|=
operator|(
name|d1
operator|%
literal|2
operator|==
literal|0
operator|)
decl_stmt|;
name|boolean
name|odd1
init|=
operator|(
name|mwf1
condition|?
name|p1
operator|%
literal|4
operator|<=
literal|1
else|:
name|p1
operator|%
literal|6
operator|>
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|mwf0
operator|==
name|mwf1
operator|&&
name|odd0
operator|!=
name|odd1
condition|)
break|break
name|p1
break|;
if|if
condition|(
name|s
index|[
name|d1
index|]
index|[
name|p1
index|]
condition|)
block|{
if|if
condition|(
name|mwf0
operator|==
name|mwf1
operator|&&
name|odd0
operator|==
name|odd1
condition|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
literal|1
operator|+
name|d1
argument_list|,
literal|1
operator|+
name|p1
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|priority
argument_list|)
argument_list|)
expr_stmt|;
name|s
index|[
name|d1
index|]
index|[
name|p1
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|generatePriorities
parameter_list|()
block|{
name|boolean
index|[]
index|[]
name|s
init|=
operator|new
name|boolean
index|[
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
index|]
index|[
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p
operator|++
control|)
block|{
name|s
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
condition|)
name|iGrid
operator|.
name|setHTML
argument_list|(
literal|1
operator|+
name|d
argument_list|,
literal|1
operator|+
name|p
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
name|int
name|priority
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|generateOnePriority
argument_list|(
name|s
argument_list|,
name|priority
argument_list|)
condition|)
name|priority
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p
operator|++
control|)
block|{
name|td
argument_list|(
name|d
argument_list|,
name|p
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|bg
argument_list|(
name|d
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|int
name|iDownDay
init|=
operator|-
literal|1
decl_stmt|,
name|iDownPeriod
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|iOverDay
init|=
operator|-
literal|1
decl_stmt|,
name|iOverPeriod
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|void
name|processMouseEvent
parameter_list|(
name|int
name|eventType
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|period
parameter_list|)
block|{
switch|switch
condition|(
name|eventType
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEDOWN
case|:
name|iDownDay
operator|=
name|day
expr_stmt|;
name|iDownPeriod
operator|=
name|period
expr_stmt|;
name|iOverDay
operator|=
name|day
expr_stmt|;
name|iOverPeriod
operator|=
name|period
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEUP
case|:
if|if
condition|(
name|iDownDay
operator|>=
literal|0
operator|&&
name|iOverDay
operator|>=
literal|0
condition|)
block|{
name|int
name|d0
init|=
operator|(
name|iDownDay
operator|<
name|iOverDay
condition|?
name|iDownDay
else|:
name|iOverDay
operator|)
decl_stmt|;
name|int
name|d1
init|=
operator|(
name|iDownDay
operator|<
name|iOverDay
condition|?
name|iOverDay
else|:
name|iDownDay
operator|)
decl_stmt|;
name|int
name|p0
init|=
operator|(
name|iDownPeriod
operator|<
name|iOverPeriod
condition|?
name|iDownPeriod
else|:
name|iOverPeriod
operator|)
decl_stmt|;
name|int
name|p1
init|=
operator|(
name|iDownPeriod
operator|<
name|iOverPeriod
condition|?
name|iOverPeriod
else|:
name|iDownPeriod
operator|)
decl_stmt|;
name|boolean
name|allSelected
init|=
literal|true
decl_stmt|;
name|boolean
name|mwfDown
init|=
operator|(
name|iDownDay
operator|%
literal|2
operator|==
literal|0
operator|)
decl_stmt|;
name|all
label|:
for|for
control|(
name|int
name|d
init|=
name|d0
init|;
name|d
operator|<=
name|d1
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d1
operator|-
name|d0
operator|<=
literal|0
operator|||
operator|(
name|d
operator|%
literal|2
operator|==
literal|0
operator|)
operator|==
name|mwfDown
condition|)
block|{
for|for
control|(
name|int
name|p
init|=
name|p0
init|;
name|p
operator|<=
name|p1
condition|;
name|p
operator|++
control|)
if|if
condition|(
operator|!
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
condition|)
block|{
name|allSelected
operator|=
literal|false
expr_stmt|;
break|break
name|all
break|;
block|}
block|}
block|}
name|long
name|ts
init|=
name|iTime
operator|++
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
name|d0
init|;
name|d
operator|<=
name|d1
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
name|d1
operator|-
name|d0
operator|<=
literal|1
operator|||
operator|(
name|d
operator|%
literal|2
operator|==
literal|0
operator|)
operator|==
name|mwfDown
condition|)
block|{
for|for
control|(
name|int
name|p
init|=
name|p0
init|;
name|p
operator|<=
name|p1
condition|;
name|p
operator|++
control|)
block|{
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
operator|!
name|allSelected
expr_stmt|;
name|iLastSelectedTime
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
name|ts
expr_stmt|;
block|}
block|}
block|}
block|}
name|iDownDay
operator|=
operator|-
literal|1
expr_stmt|;
name|iDownPeriod
operator|=
operator|-
literal|1
expr_stmt|;
name|iOverDay
operator|=
operator|-
literal|1
expr_stmt|;
name|iOverPeriod
operator|=
operator|-
literal|1
expr_stmt|;
name|generatePriorities
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
name|iOverDay
operator|=
name|day
expr_stmt|;
name|iOverPeriod
operator|=
name|period
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
name|iOverDay
operator|=
operator|-
literal|1
expr_stmt|;
name|iOverPeriod
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
specifier|private
class|class
name|CellSelectingGrid
extends|extends
name|Grid
block|{
specifier|private
name|CellSelectingGrid
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|cols
parameter_list|)
block|{
name|super
argument_list|(
name|rows
argument_list|,
name|cols
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEDOWN
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEUP
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
name|int
name|col
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|0
operator|||
name|col
operator|==
literal|0
condition|)
return|return;
name|processMouseEvent
argument_list|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
argument_list|,
name|row
operator|-
literal|1
argument_list|,
name|col
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|List
argument_list|<
name|FreeTime
argument_list|>
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FreeTime
argument_list|>
name|getValue
parameter_list|()
block|{
name|boolean
index|[]
index|[]
name|s
init|=
operator|new
name|boolean
index|[
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
index|]
index|[
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
block|{
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p
operator|++
control|)
name|s
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|>
argument_list|()
decl_stmt|;
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|ft
operator|=
name|generateOneFreeTime
argument_list|(
name|s
argument_list|)
operator|)
operator|!=
literal|null
condition|)
name|ret
operator|.
name|add
argument_list|(
name|ft
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|FreeTime
argument_list|>
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|FreeTime
argument_list|>
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|;
name|d
operator|++
control|)
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
name|CONSTANTS
operator|.
name|freeTimePeriods
argument_list|()
operator|.
name|length
operator|-
literal|1
condition|;
name|p
operator|++
control|)
block|{
name|iSelected
index|[
name|d
index|]
index|[
name|p
index|]
operator|=
literal|false
expr_stmt|;
name|td
argument_list|(
name|d
argument_list|,
name|p
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|bg
argument_list|(
name|d
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setHTML
argument_list|(
literal|1
operator|+
name|d
argument_list|,
literal|1
operator|+
name|p
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|f
range|:
name|value
control|)
block|{
for|for
control|(
name|int
name|day
range|:
name|f
operator|.
name|getDays
argument_list|()
control|)
block|{
if|if
condition|(
name|day
operator|<
name|CONSTANTS
operator|.
name|freeTimeDays
argument_list|()
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|p
init|=
name|toPeriod
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
argument_list|)
init|;
name|p
operator|<
name|toPeriod
argument_list|(
name|f
operator|.
name|getStart
argument_list|()
operator|+
name|f
operator|.
name|getLength
argument_list|()
argument_list|)
condition|;
name|p
operator|++
control|)
name|iSelected
index|[
name|day
index|]
index|[
name|p
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|generatePriorities
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

