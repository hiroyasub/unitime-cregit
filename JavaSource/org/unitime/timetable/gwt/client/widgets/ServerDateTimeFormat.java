begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 - 3.5 (University Timetabling Application)  * Copyright (C) 2012 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ServerDateTimeFormat
extends|extends
name|DateTimeFormat
block|{
specifier|protected
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|TimeZone
name|sServerTimeZone
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Integer
name|sTimeZoneOffsetInMinutes
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ServerDateTimeFormat
argument_list|>
name|sFormatCache
decl_stmt|;
static|static
block|{
name|String
name|cookie
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:ServerTimeZoneOffsetInMinutes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cookie
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sTimeZoneOffsetInMinutes
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
name|sServerTimeZone
operator|=
name|TimeZone
operator|.
name|createTimeZone
argument_list|(
name|sTimeZoneOffsetInMinutes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|sServerTimeZone
operator|==
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|ServerTimeZoneRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ServerTimeZoneResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ServerTimeZoneResponse
name|result
parameter_list|)
block|{
name|sTimeZoneOffsetInMinutes
operator|=
name|result
operator|.
name|getTimeZoneOffsetInMinutes
argument_list|()
expr_stmt|;
name|sServerTimeZone
operator|=
name|TimeZone
operator|.
name|createTimeZone
argument_list|(
name|sTimeZoneOffsetInMinutes
argument_list|)
expr_stmt|;
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:ServerTimeZoneOffsetInMinutes"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|result
operator|.
name|getTimeZoneOffsetInMinutes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|sFormatCache
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ServerDateTimeFormat
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ServerDateTimeFormat
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|super
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|TimeZone
name|getServerTimeZone
parameter_list|()
block|{
return|return
name|sServerTimeZone
return|;
block|}
specifier|public
specifier|static
name|Integer
name|getServerTimeZoneOffsetInMinutes
parameter_list|()
block|{
return|return
name|sTimeZoneOffsetInMinutes
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|Date
name|toLocalDate
parameter_list|(
name|Date
name|serverDate
parameter_list|)
block|{
if|if
condition|(
name|serverDate
operator|==
literal|null
operator|||
name|sTimeZoneOffsetInMinutes
operator|==
literal|null
condition|)
return|return
name|serverDate
return|;
return|return
operator|new
name|Date
argument_list|(
name|serverDate
operator|.
name|getTime
argument_list|()
operator|+
literal|60000
operator|*
operator|(
name|serverDate
operator|.
name|getTimezoneOffset
argument_list|()
operator|-
name|sTimeZoneOffsetInMinutes
operator|)
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|public
specifier|static
name|Date
name|toServerDate
parameter_list|(
name|Date
name|localDate
parameter_list|)
block|{
if|if
condition|(
name|localDate
operator|==
literal|null
operator|||
name|sTimeZoneOffsetInMinutes
operator|==
literal|null
condition|)
return|return
name|localDate
return|;
return|return
operator|new
name|Date
argument_list|(
name|localDate
operator|.
name|getTime
argument_list|()
operator|+
literal|60000
operator|*
operator|(
name|sTimeZoneOffsetInMinutes
operator|-
name|localDate
operator|.
name|getTimezoneOffset
argument_list|()
operator|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|format
parameter_list|(
name|Date
name|date
parameter_list|)
block|{
return|return
name|super
operator|.
name|format
argument_list|(
name|date
argument_list|,
name|sServerTimeZone
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DateTimeFormat
name|getFormat
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|ServerDateTimeFormat
name|format
init|=
name|sFormatCache
operator|.
name|get
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|null
condition|)
block|{
name|format
operator|=
operator|new
name|ServerDateTimeFormat
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|sFormatCache
operator|.
name|put
argument_list|(
name|pattern
argument_list|,
name|format
argument_list|)
expr_stmt|;
block|}
return|return
name|format
return|;
block|}
specifier|public
specifier|static
class|class
name|ServerTimeZoneRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|ServerTimeZoneResponse
argument_list|>
block|{}
specifier|public
specifier|static
class|class
name|ServerTimeZoneResponse
implements|implements
name|GwtRpcResponse
block|{
specifier|private
name|int
name|iTimeZoneOffsetInMinutes
decl_stmt|;
specifier|public
name|ServerTimeZoneResponse
parameter_list|()
block|{
block|}
specifier|public
name|ServerTimeZoneResponse
parameter_list|(
name|int
name|timeZoneOffsetInMinutes
parameter_list|)
block|{
name|iTimeZoneOffsetInMinutes
operator|=
name|timeZoneOffsetInMinutes
expr_stmt|;
block|}
specifier|public
name|int
name|getTimeZoneOffsetInMinutes
parameter_list|()
block|{
return|return
name|iTimeZoneOffsetInMinutes
return|;
block|}
block|}
block|}
end_class

end_unit

