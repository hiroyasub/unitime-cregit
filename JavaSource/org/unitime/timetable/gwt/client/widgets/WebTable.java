begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ImageResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Panel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
operator|.
name|VerticalAlignmentConstant
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WebTable
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Row
index|[]
name|iHeader
decl_stmt|;
specifier|private
name|String
name|iEmptyMessage
init|=
name|MESSAGES
operator|.
name|tableEmpty
argument_list|()
decl_stmt|;
specifier|private
name|Row
index|[]
name|iRows
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|RowClickHandler
argument_list|>
name|iRowClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|RowClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|RowDoubleClickHandler
argument_list|>
name|iRowDoubleClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|RowDoubleClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|RowSelectingFlexTable
name|iTable
decl_stmt|;
specifier|private
name|int
name|iSelectedRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iSelectSameIdRows
init|=
literal|false
decl_stmt|;
specifier|public
name|WebTable
parameter_list|()
block|{
name|iTable
operator|=
operator|new
name|RowSelectingFlexTable
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Widget
name|getPrintWidget
parameter_list|(
name|int
modifier|...
name|skipColumns
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|skip
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
range|:
name|skipColumns
control|)
name|skip
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|getPrintWidget
argument_list|(
name|skip
argument_list|)
return|;
block|}
specifier|public
name|Widget
name|getPrintWidget
parameter_list|(
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|skipColumns
parameter_list|)
block|{
name|WebTable
name|x
init|=
operator|new
name|WebTable
argument_list|()
decl_stmt|;
if|if
condition|(
name|iHeader
operator|!=
literal|null
condition|)
block|{
name|Row
index|[]
name|header
init|=
operator|new
name|Row
index|[
name|iHeader
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHeader
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iHeader
index|[
name|i
index|]
operator|.
name|getNrCells
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|iHeader
index|[
name|i
index|]
operator|.
name|getCell
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|newColSpan
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|cell
operator|.
name|getColSpan
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|skipColumns
operator|.
name|contains
argument_list|(
name|col
operator|+
name|c
argument_list|)
condition|)
name|newColSpan
operator|++
expr_stmt|;
block|}
name|col
operator|+=
name|cell
operator|.
name|getColSpan
argument_list|()
expr_stmt|;
if|if
condition|(
name|newColSpan
operator|==
literal|0
condition|)
continue|continue;
name|Cell
name|c
init|=
operator|new
name|Cell
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|,
name|newColSpan
argument_list|,
name|cell
operator|.
name|getWidth
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setStyleName
argument_list|(
name|cell
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|header
index|[
name|i
index|]
operator|=
operator|new
name|Row
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRows
operator|!=
literal|null
operator|&&
name|iRows
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Row
index|[]
name|data
init|=
operator|new
name|Row
index|[
name|iRows
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iRows
index|[
name|i
index|]
operator|.
name|getNrCells
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|iRows
index|[
name|i
index|]
operator|.
name|getCell
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|int
name|newColSpan
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|cell
operator|.
name|getColSpan
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|skipColumns
operator|.
name|contains
argument_list|(
name|col
operator|+
name|c
argument_list|)
condition|)
name|newColSpan
operator|++
expr_stmt|;
block|}
name|col
operator|+=
name|cell
operator|.
name|getColSpan
argument_list|()
expr_stmt|;
if|if
condition|(
name|newColSpan
operator|==
literal|0
condition|)
continue|continue;
name|Cell
name|c
init|=
operator|new
name|Cell
argument_list|(
name|cell
operator|.
name|getValue
argument_list|()
argument_list|,
name|newColSpan
argument_list|,
name|cell
operator|.
name|getWidth
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setStyleName
argument_list|(
name|cell
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|data
index|[
name|i
index|]
operator|=
operator|new
name|Row
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
name|x
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x
operator|.
name|setEmptyMessage
argument_list|(
name|iEmptyMessage
argument_list|)
expr_stmt|;
block|}
return|return
name|x
return|;
block|}
specifier|public
name|void
name|setHeader
parameter_list|(
name|Row
modifier|...
name|header
parameter_list|)
block|{
name|iHeader
operator|=
name|header
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|header
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|header
index|[
name|i
index|]
operator|.
name|getNrCells
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|header
index|[
name|i
index|]
operator|.
name|getCell
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getWidget
argument_list|()
operator|==
literal|null
condition|)
name|iTable
operator|.
name|setHTML
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
operator|(
name|cell
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"&nbsp;"
else|:
name|cell
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
else|else
name|iTable
operator|.
name|setWidget
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getWidget
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getWordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
operator|(
name|cell
operator|.
name|getStyleName
argument_list|()
operator|==
literal|null
condition|?
literal|"unitime-TableHeader"
else|:
name|cell
operator|.
name|getStyleName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
operator|(
name|cell
operator|.
name|getWidth
argument_list|()
operator|==
literal|null
condition|?
operator|(
literal|100
operator|/
name|header
operator|.
name|length
operator|)
operator|+
literal|"%"
else|:
name|cell
operator|.
name|getWidth
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getColSpan
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getVerticalAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getHorizontalAlignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setColumnVisible
parameter_list|(
name|int
name|col
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumnsCount
parameter_list|()
block|{
if|if
condition|(
name|iHeader
operator|==
literal|null
operator|||
name|iHeader
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|1
return|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHeader
index|[
literal|0
index|]
operator|.
name|getNrCells
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
operator|+=
name|iHeader
index|[
literal|0
index|]
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
operator|.
name|getColSpan
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|getHeaderRowsCount
parameter_list|()
block|{
if|if
condition|(
name|iHeader
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
name|iHeader
operator|.
name|length
return|;
block|}
specifier|public
name|int
name|getRowsCount
parameter_list|()
block|{
if|if
condition|(
name|iRows
operator|==
literal|null
condition|)
return|return
literal|0
return|;
return|return
name|iRows
operator|.
name|length
return|;
block|}
specifier|public
name|void
name|setEmptyMessage
parameter_list|(
name|String
name|emptyMessage
parameter_list|)
block|{
name|iEmptyMessage
operator|=
name|emptyMessage
expr_stmt|;
if|if
condition|(
name|iRows
operator|==
literal|null
operator|||
name|iRows
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|iTable
operator|.
name|setHTML
argument_list|(
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|0
argument_list|,
name|iEmptyMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEmptyMessage
operator|!=
literal|null
condition|)
block|{
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|0
argument_list|,
name|getColumnsCount
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|"unitime-TableEmpty"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|clearData
parameter_list|(
name|boolean
name|showEmptyMessage
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
condition|;
name|row
operator|--
control|)
block|{
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|iRows
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|showEmptyMessage
condition|)
name|setEmptyMessage
argument_list|(
name|iEmptyMessage
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearData
parameter_list|(
name|int
name|keepRows
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
operator|+
name|keepRows
condition|;
name|row
operator|--
control|)
block|{
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|Row
modifier|...
name|rows
parameter_list|)
block|{
name|setSelectedRow
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rows
operator|==
literal|null
operator|||
name|rows
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|clearData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|clearData
argument_list|(
name|rows
operator|.
name|length
argument_list|)
expr_stmt|;
name|iRows
operator|=
name|rows
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iRows
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
name|iRows
index|[
name|i
index|]
operator|.
name|setRowIdx
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|iRows
index|[
name|i
index|]
operator|.
name|setTable
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iRows
index|[
name|i
index|]
operator|.
name|getNrCells
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|Cell
name|cell
init|=
name|iRows
index|[
name|i
index|]
operator|.
name|getCell
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setColIdx
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setRow
argument_list|(
name|iRows
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getWidget
argument_list|()
operator|==
literal|null
condition|)
name|iTable
operator|.
name|setHTML
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
operator|(
name|cell
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"&nbsp;"
else|:
name|cell
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
else|else
name|iTable
operator|.
name|setWidget
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getWidget
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getWordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getColSpan
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getVerticalAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|,
name|cell
operator|.
name|getHorizontalAlignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
name|iTable
operator|.
name|getCellCount
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|)
operator|-
literal|1
init|;
name|j
operator|>=
name|iRows
index|[
name|i
index|]
operator|.
name|getNrCells
argument_list|()
condition|;
name|j
operator|--
control|)
name|iTable
operator|.
name|removeCell
argument_list|(
name|i
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|String
index|[]
modifier|...
name|lines
parameter_list|)
block|{
name|Row
index|[]
name|rows
init|=
operator|new
name|Row
index|[
name|lines
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|rows
index|[
name|i
index|]
operator|=
operator|new
name|Row
argument_list|(
name|lines
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|setData
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRowClickHandler
parameter_list|(
name|RowClickHandler
name|rowClickHandler
parameter_list|)
block|{
name|iRowClickHandlers
operator|.
name|add
argument_list|(
name|rowClickHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addRowDoubleClickHandler
parameter_list|(
name|RowDoubleClickHandler
name|rowDoubleClickHandler
parameter_list|)
block|{
name|iRowDoubleClickHandlers
operator|.
name|add
argument_list|(
name|rowDoubleClickHandler
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fireRowClickEvent
parameter_list|(
name|Event
name|event
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|RowClickEvent
name|e
init|=
operator|new
name|RowClickEvent
argument_list|(
name|event
argument_list|,
name|iRows
index|[
name|row
index|]
argument_list|,
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|RowClickHandler
name|h
range|:
name|iRowClickHandlers
control|)
name|h
operator|.
name|onRowClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fireDoubleRowClickEvent
parameter_list|(
name|Event
name|event
parameter_list|,
name|int
name|row
parameter_list|)
block|{
name|RowDoubleClickEvent
name|e
init|=
operator|new
name|RowDoubleClickEvent
argument_list|(
name|event
argument_list|,
name|iRows
index|[
name|row
index|]
argument_list|,
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|RowDoubleClickHandler
name|h
range|:
name|iRowDoubleClickHandlers
control|)
name|h
operator|.
name|onRowDoubleClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectedRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|iSelectedRow
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|isSelectSameIdRows
argument_list|()
operator|&&
name|iRows
operator|!=
literal|null
operator|&&
name|iSelectedRow
operator|<
name|iRows
operator|.
name|length
condition|)
block|{
name|String
name|id
init|=
name|iRows
index|[
name|iSelectedRow
index|]
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
name|iRows
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getHeaderRowsCount
argument_list|()
operator|+
name|r
operator|.
name|getRowIdx
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iSelectedRow
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|iRows
operator|==
literal|null
operator|||
name|iRows
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|iSelectedRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|iSelectedRow
operator|=
name|row
operator|%
name|iRows
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|isSelectSameIdRows
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iRows
index|[
name|iSelectedRow
index|]
operator|.
name|getId
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
name|iRows
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getHeaderRowsCount
argument_list|()
operator|+
name|r
operator|.
name|getRowIdx
argument_list|()
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iSelectedRow
operator|+
name|getHeaderRowsCount
argument_list|()
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getSelectedRow
parameter_list|()
block|{
return|return
name|iSelectedRow
return|;
block|}
specifier|public
name|Row
index|[]
name|getRows
parameter_list|()
block|{
return|return
name|iRows
return|;
block|}
specifier|public
name|void
name|setSelectSameIdRows
parameter_list|(
name|boolean
name|selectSameIdRows
parameter_list|)
block|{
name|iSelectSameIdRows
operator|=
name|selectSameIdRows
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSelectSameIdRows
parameter_list|()
block|{
return|return
name|iSelectSameIdRows
return|;
block|}
specifier|public
name|String
name|getSelectedRowId
parameter_list|()
block|{
if|if
condition|(
name|iSelectedRow
operator|<
literal|0
operator|||
name|iSelectedRow
operator|>=
name|iRows
operator|.
name|length
condition|)
return|return
literal|null
return|;
return|return
name|iRows
index|[
name|iSelectedRow
index|]
operator|.
name|getId
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|Row
block|{
specifier|private
name|String
name|iId
decl_stmt|;
specifier|private
name|Cell
index|[]
name|iCells
decl_stmt|;
specifier|private
name|int
name|iRowIdx
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|WebTable
name|iTable
decl_stmt|;
specifier|private
name|boolean
name|iSelectable
init|=
literal|true
decl_stmt|;
specifier|public
name|Row
parameter_list|(
name|Cell
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
block|}
specifier|public
name|Row
parameter_list|(
name|ArrayList
argument_list|<
name|Cell
argument_list|>
name|cells
parameter_list|)
block|{
name|iCells
operator|=
operator|new
name|Cell
index|[
name|cells
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iCells
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iCells
index|[
name|i
index|]
operator|=
name|cells
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Row
parameter_list|(
name|String
modifier|...
name|cells
parameter_list|)
block|{
name|iCells
operator|=
operator|new
name|Cell
index|[
name|cells
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cells
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iCells
index|[
name|i
index|]
operator|=
operator|new
name|Cell
argument_list|(
name|cells
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrCells
parameter_list|()
block|{
return|return
name|iCells
operator|.
name|length
return|;
block|}
specifier|public
name|Cell
name|getCell
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
return|return
name|iCells
index|[
name|idx
index|]
return|;
block|}
specifier|public
name|Cell
index|[]
name|getCells
parameter_list|()
block|{
return|return
name|iCells
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|iId
return|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|iId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|int
name|getRowIdx
parameter_list|()
block|{
return|return
name|iRowIdx
return|;
block|}
specifier|public
name|void
name|setRowIdx
parameter_list|(
name|int
name|rowIdx
parameter_list|)
block|{
name|iRowIdx
operator|=
name|rowIdx
expr_stmt|;
block|}
specifier|public
name|void
name|setTable
parameter_list|(
name|WebTable
name|table
parameter_list|)
block|{
name|iTable
operator|=
name|table
expr_stmt|;
block|}
specifier|public
name|WebTable
name|getTable
parameter_list|()
block|{
return|return
name|iTable
return|;
block|}
specifier|public
name|boolean
name|isSelectable
parameter_list|()
block|{
return|return
name|iSelectable
return|;
block|}
specifier|public
name|void
name|setSelectable
parameter_list|(
name|boolean
name|selectable
parameter_list|)
block|{
name|iSelectable
operator|=
name|selectable
expr_stmt|;
block|}
specifier|public
name|void
name|setCell
parameter_list|(
name|int
name|col
parameter_list|,
name|Cell
name|cell
parameter_list|)
block|{
name|iCells
index|[
name|col
index|]
operator|=
name|cell
expr_stmt|;
if|if
condition|(
name|iTable
operator|!=
literal|null
condition|)
block|{
name|FlexTable
name|t
init|=
name|iTable
operator|.
name|iTable
decl_stmt|;
name|cell
operator|.
name|setColIdx
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|cell
operator|.
name|setRow
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|getWidget
argument_list|()
operator|==
literal|null
condition|)
name|t
operator|.
name|setHTML
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
operator|(
name|cell
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|||
name|cell
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"&nbsp;"
else|:
name|cell
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
expr_stmt|;
else|else
name|t
operator|.
name|setWidget
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getWidget
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getWordWrap
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getColSpan
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getWidth
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVerticalAlignment
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getVerticalAlignment
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|getRowIdx
argument_list|()
operator|+
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
argument_list|,
name|col
argument_list|,
name|cell
operator|.
name|getHorizontalAlignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Cell
block|{
name|String
name|iValue
decl_stmt|;
name|int
name|iColSpan
init|=
literal|1
decl_stmt|;
name|String
name|iStyleName
init|=
literal|null
decl_stmt|;
name|String
name|iWidth
init|=
literal|null
decl_stmt|;
name|Row
name|iRow
init|=
literal|null
decl_stmt|;
name|int
name|iColIdx
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|iWrap
init|=
literal|false
decl_stmt|;
name|VerticalAlignmentConstant
name|iVerticalAlignment
init|=
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
decl_stmt|;
name|HorizontalAlignmentConstant
name|iHorizontalAlignment
init|=
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
decl_stmt|;
specifier|public
name|Cell
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|Cell
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|colSpan
parameter_list|,
name|String
name|width
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
name|iWidth
operator|=
name|width
expr_stmt|;
block|}
specifier|public
name|Cell
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|wrap
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
name|iWrap
operator|=
name|wrap
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
name|iStyleName
return|;
block|}
specifier|public
name|void
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|iStyleName
operator|=
name|styleName
expr_stmt|;
if|if
condition|(
name|iRow
operator|!=
literal|null
condition|)
name|iRow
operator|.
name|iTable
operator|.
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iRow
operator|.
name|iTable
operator|.
name|getHeaderRowsCount
argument_list|()
operator|+
name|iRow
operator|.
name|iRowIdx
argument_list|,
name|iColIdx
argument_list|,
name|iStyleName
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getWidth
parameter_list|()
block|{
return|return
name|iWidth
return|;
block|}
specifier|public
name|void
name|setWitdh
parameter_list|(
name|String
name|width
parameter_list|)
block|{
name|iWidth
operator|=
name|width
expr_stmt|;
block|}
specifier|public
name|void
name|setColIdx
parameter_list|(
name|int
name|colIdx
parameter_list|)
block|{
name|iColIdx
operator|=
name|colIdx
expr_stmt|;
block|}
specifier|public
name|int
name|getColIdx
parameter_list|()
block|{
return|return
name|iColIdx
return|;
block|}
specifier|public
name|void
name|setRow
parameter_list|(
name|Row
name|row
parameter_list|)
block|{
name|iRow
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|Row
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|VerticalAlignmentConstant
name|getVerticalAlignment
parameter_list|()
block|{
return|return
name|iVerticalAlignment
return|;
block|}
specifier|public
name|void
name|setVerticalAlignment
parameter_list|(
name|VerticalAlignmentConstant
name|vertical
parameter_list|)
block|{
name|iVerticalAlignment
operator|=
name|vertical
expr_stmt|;
block|}
specifier|public
name|HorizontalAlignmentConstant
name|getHorizontalAlignment
parameter_list|()
block|{
return|return
name|iHorizontalAlignment
return|;
block|}
specifier|public
name|void
name|setHorizontalAlignment
parameter_list|(
name|HorizontalAlignmentConstant
name|vertical
parameter_list|)
block|{
name|iHorizontalAlignment
operator|=
name|vertical
expr_stmt|;
block|}
specifier|public
name|boolean
name|getWordWrap
parameter_list|()
block|{
return|return
name|iWrap
return|;
block|}
specifier|public
name|void
name|setWordWrap
parameter_list|(
name|boolean
name|wrap
parameter_list|)
block|{
name|iWrap
operator|=
name|wrap
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CheckboxCell
extends|extends
name|Cell
block|{
specifier|private
name|CheckBox
name|iCheck
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
specifier|public
name|CheckboxCell
parameter_list|(
name|boolean
name|check
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iCheck
operator|.
name|setValue
argument_list|(
name|check
argument_list|)
expr_stmt|;
name|iCheck
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isChecked
parameter_list|()
block|{
return|return
name|iCheck
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iCheck
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iCheck
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IconCell
extends|extends
name|Cell
block|{
specifier|private
name|Image
name|iIcon
init|=
literal|null
decl_stmt|;
specifier|private
name|HTML
name|iLabel
init|=
literal|null
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iPanel
init|=
literal|null
decl_stmt|;
specifier|public
name|IconCell
parameter_list|(
name|ImageResource
name|resource
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iIcon
operator|=
operator|new
name|Image
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|iIcon
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|iLabel
operator|=
operator|new
name|HTML
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iIcon
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iLabel
argument_list|)
expr_stmt|;
name|iIcon
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingRight
argument_list|(
literal|3
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iIcon
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iLabel
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iPanel
return|;
block|}
specifier|public
name|void
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|super
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
name|iLabel
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
name|iLabel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NoteCell
extends|extends
name|Cell
block|{
specifier|private
name|P
name|iNote
init|=
literal|null
decl_stmt|;
specifier|public
name|NoteCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iNote
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-Note"
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setHTML
argument_list|(
name|text
operator|==
literal|null
condition|?
literal|""
else|:
name|text
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
name|iNote
operator|.
name|setTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iNote
operator|.
name|getHTML
argument_list|()
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|void
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|super
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AbbvTextCell
extends|extends
name|Cell
block|{
specifier|private
name|P
name|iNote
init|=
literal|null
decl_stmt|;
specifier|public
name|AbbvTextCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iNote
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-Note"
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
name|text
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|iNote
operator|.
name|setHTML
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iNote
operator|.
name|setTitle
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
literal|'|'
argument_list|)
operator|+
literal|1
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iNote
operator|.
name|setHTML
argument_list|(
name|text
operator|==
literal|null
condition|?
literal|""
else|:
name|text
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
name|iNote
operator|.
name|setTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iNote
operator|.
name|getHTML
argument_list|()
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iNote
return|;
block|}
specifier|public
name|void
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|super
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WidgetCell
extends|extends
name|Cell
block|{
specifier|private
name|Widget
name|iWidget
init|=
literal|null
decl_stmt|;
specifier|public
name|WidgetCell
parameter_list|(
name|Widget
name|widget
parameter_list|,
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|,
name|String
name|width
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
name|colspan
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|iWidget
operator|=
name|widget
expr_stmt|;
block|}
specifier|public
name|WidgetCell
parameter_list|(
name|Widget
name|widget
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|iWidget
operator|=
name|widget
expr_stmt|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iWidget
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|MultiCell
extends|extends
name|Cell
block|{
specifier|protected
name|Panel
name|iPanel
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
specifier|protected
name|String
name|iText
init|=
literal|""
decl_stmt|;
specifier|protected
name|ArrayList
argument_list|<
name|UIObject
argument_list|>
name|iContent
init|=
operator|new
name|ArrayList
argument_list|<
name|UIObject
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MultiCell
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
condition|)
block|{
name|separator
operator|=
name|separator
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|add
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
operator|(
name|i
operator|+
literal|1
operator|<
name|names
operator|.
name|size
argument_list|()
condition|?
name|separator
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|add
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|iText
operator|+=
name|text
expr_stmt|;
name|HTML
name|h
init|=
operator|new
name|HTML
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|iContent
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|iText
return|;
block|}
specifier|public
name|Widget
name|getWidget
parameter_list|()
block|{
return|return
name|iPanel
return|;
block|}
specifier|public
name|void
name|setStyleName
parameter_list|(
name|String
name|styleName
parameter_list|)
block|{
name|super
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
for|for
control|(
name|UIObject
name|c
range|:
name|iContent
control|)
block|{
name|c
operator|.
name|setStyleName
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
name|c
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBorderWidth
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|InstructorCell
extends|extends
name|MultiCell
block|{
specifier|public
name|InstructorCell
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|emails
parameter_list|,
name|String
name|separator
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
name|separator
argument_list|)
expr_stmt|;
if|if
condition|(
name|names
operator|!=
literal|null
operator|&&
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|separator
operator|=
name|separator
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|text
init|=
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
operator|(
name|i
operator|+
literal|1
operator|<
name|names
operator|.
name|size
argument_list|()
condition|?
name|separator
else|:
literal|""
operator|)
decl_stmt|;
name|String
name|email
init|=
operator|(
name|emails
operator|!=
literal|null
operator|&&
name|i
operator|<
name|emails
operator|.
name|size
argument_list|()
condition|?
name|emails
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iText
operator|+=
name|text
expr_stmt|;
name|HorizontalPanel
name|p
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|Anchor
name|a
init|=
operator|new
name|Anchor
argument_list|()
decl_stmt|;
name|a
operator|.
name|setHref
argument_list|(
literal|"mailto:"
operator|+
name|email
argument_list|)
expr_stmt|;
name|a
operator|.
name|setHTML
argument_list|(
name|DOM
operator|.
name|toString
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|email
argument_list|()
argument_list|)
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|sendEmail
argument_list|(
name|names
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStyleName
argument_list|(
literal|"unitime-SimpleLink"
argument_list|)
expr_stmt|;
name|a
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCellVerticalAlignment
argument_list|(
name|a
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|HTML
name|h
init|=
operator|new
name|HTML
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|h
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|iContent
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
else|else
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|add
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|RowSelectingFlexTable
extends|extends
name|FlexTable
block|{
specifier|public
name|RowSelectingFlexTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONDBLCLICK
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iRows
operator|==
literal|null
operator|||
name|iRows
operator|.
name|length
operator|==
literal|0
condition|)
return|return;
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
operator|&&
name|row
operator|<
name|getHeaderRowsCount
argument_list|()
operator|+
name|iRows
operator|.
name|length
operator|&&
operator|!
name|iRows
index|[
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
index|]
operator|.
name|isSelectable
argument_list|()
condition|)
return|return;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
operator|&&
name|row
operator|<
name|getHeaderRowsCount
argument_list|()
operator|+
name|iRows
operator|.
name|length
condition|)
block|{
if|if
condition|(
name|isSelectSameIdRows
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iRows
index|[
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
index|]
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|sid
init|=
name|getSelectedRowId
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
name|iRows
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getHeaderRowsCount
argument_list|()
operator|+
name|r
operator|.
name|getRowIdx
argument_list|()
argument_list|,
operator|(
name|id
operator|.
name|equals
argument_list|(
name|sid
argument_list|)
condition|?
literal|"unitime-TableRowSelectedHover"
else|:
literal|"unitime-TableRowHover"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
operator|(
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
operator|==
name|iSelectedRow
condition|?
literal|"unitime-TableRowSelectedHover"
else|:
literal|"unitime-TableRowHover"
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
operator|&&
name|row
operator|<
name|getHeaderRowsCount
argument_list|()
operator|+
name|iRows
operator|.
name|length
operator|&&
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
operator|!=
name|iSelectedRow
condition|)
block|{
if|if
condition|(
name|isSelectSameIdRows
argument_list|()
condition|)
block|{
name|String
name|id
init|=
name|iRows
index|[
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
index|]
operator|.
name|getId
argument_list|()
decl_stmt|;
name|String
name|sid
init|=
name|getSelectedRowId
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|r
range|:
name|iRows
control|)
block|{
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|getHeaderRowsCount
argument_list|()
operator|+
name|r
operator|.
name|getRowIdx
argument_list|()
argument_list|,
operator|(
name|id
operator|.
name|equals
argument_list|(
name|sid
argument_list|)
condition|?
literal|"unitime-TableRowSelectedHover"
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
operator|(
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
operator|==
name|iSelectedRow
condition|?
literal|"unitime-TableRowSelectedHover"
else|:
literal|null
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|Event
operator|.
name|ONCLICK
case|:
if|if
condition|(
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
operator|&&
name|row
operator|<
name|getHeaderRowsCount
argument_list|()
operator|+
name|iRows
operator|.
name|length
condition|)
block|{
name|RowClickEvent
name|e
init|=
operator|new
name|RowClickEvent
argument_list|(
name|event
argument_list|,
name|iRows
index|[
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
index|]
argument_list|,
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RowClickHandler
name|h
range|:
name|iRowClickHandlers
control|)
name|h
operator|.
name|onRowClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONDBLCLICK
case|:
if|if
condition|(
name|row
operator|>=
name|getHeaderRowsCount
argument_list|()
operator|&&
name|row
operator|<
name|getHeaderRowsCount
argument_list|()
operator|+
name|iRows
operator|.
name|length
condition|)
block|{
name|RowDoubleClickEvent
name|e
init|=
operator|new
name|RowDoubleClickEvent
argument_list|(
name|event
argument_list|,
name|iRows
index|[
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
index|]
argument_list|,
name|row
operator|-
name|getHeaderRowsCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|RowDoubleClickHandler
name|h
range|:
name|iRowDoubleClickHandlers
control|)
name|h
operator|.
name|onRowDoubleClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|public
name|FlexTable
name|getTable
parameter_list|()
block|{
return|return
name|iTable
return|;
block|}
specifier|public
specifier|static
class|class
name|RowClickEvent
block|{
specifier|private
name|Event
name|iEvent
decl_stmt|;
specifier|private
name|Row
name|iRow
decl_stmt|;
specifier|private
name|int
name|iRowIdx
decl_stmt|;
specifier|private
name|RowClickEvent
parameter_list|(
name|Event
name|event
parameter_list|,
name|Row
name|row
parameter_list|,
name|int
name|rowIdx
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
name|iRow
operator|=
name|row
expr_stmt|;
name|iRowIdx
operator|=
name|rowIdx
expr_stmt|;
block|}
specifier|public
name|Event
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|Row
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|int
name|getRowIdx
parameter_list|()
block|{
return|return
name|iRowIdx
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|RowClickHandler
block|{
specifier|public
name|void
name|onRowClick
parameter_list|(
name|RowClickEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|RowDoubleClickEvent
block|{
specifier|private
name|Event
name|iEvent
decl_stmt|;
specifier|private
name|Row
name|iRow
decl_stmt|;
specifier|private
name|int
name|iRowIdx
decl_stmt|;
specifier|private
name|RowDoubleClickEvent
parameter_list|(
name|Event
name|event
parameter_list|,
name|Row
name|row
parameter_list|,
name|int
name|rowIdx
parameter_list|)
block|{
name|iEvent
operator|=
name|event
expr_stmt|;
name|iRow
operator|=
name|row
expr_stmt|;
name|iRowIdx
operator|=
name|rowIdx
expr_stmt|;
block|}
specifier|public
name|Event
name|getEvent
parameter_list|()
block|{
return|return
name|iEvent
return|;
block|}
specifier|public
name|Row
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|int
name|getRowIdx
parameter_list|()
block|{
return|return
name|iRowIdx
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|RowDoubleClickHandler
block|{
specifier|public
name|void
name|onRowDoubleClick
parameter_list|(
name|RowDoubleClickEvent
name|event
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

