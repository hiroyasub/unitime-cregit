begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2012, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_class
specifier|public
class|class
name|TimeSelector
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TimeSelector
name|iStart
decl_stmt|;
specifier|private
name|TimeMenu
name|iTimes
decl_stmt|;
specifier|private
name|ScrollPanel
name|iTimeScroll
decl_stmt|;
specifier|private
name|PopupPanel
name|iPopup
decl_stmt|;
specifier|private
name|TextBox
name|iText
decl_stmt|;
specifier|private
name|Integer
name|iDiff
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|iSuggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TimeSelector
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeSelector
parameter_list|(
name|TimeSelector
name|start
parameter_list|)
block|{
name|iStart
operator|=
name|start
expr_stmt|;
name|iText
operator|=
operator|new
name|TextBox
argument_list|()
expr_stmt|;
name|iText
operator|.
name|setStyleName
argument_list|(
literal|"gwt-SuggestBox"
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addStyleName
argument_list|(
literal|"unitime-TimeSelector"
argument_list|)
expr_stmt|;
name|iTimes
operator|=
operator|new
name|TimeMenu
argument_list|()
expr_stmt|;
name|iTimeScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iTimes
argument_list|)
expr_stmt|;
name|iTimeScroll
operator|.
name|addStyleName
argument_list|(
literal|"scroll"
argument_list|)
expr_stmt|;
name|iPopup
operator|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setPreviewingAllNativeEvents
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TimeSelectorPopup"
argument_list|)
expr_stmt|;
name|iPopup
operator|.
name|setWidget
argument_list|(
name|iTimeScroll
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iText
argument_list|)
expr_stmt|;
name|createSuggestions
argument_list|()
expr_stmt|;
name|iText
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isSuggestionsShowing
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
name|iTimes
operator|.
name|selectItem
argument_list|(
name|iTimes
operator|.
name|getSelectedItemIndex
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
if|if
condition|(
name|iTimes
operator|.
name|getSelectedItemIndex
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|iTimes
operator|.
name|selectItem
argument_list|(
name|iTimes
operator|.
name|getNumItems
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTimes
operator|.
name|selectItem
argument_list|(
name|iTimes
operator|.
name|getSelectedItemIndex
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
name|iTimes
operator|.
name|executeSelected
argument_list|()
expr_stmt|;
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_TAB
case|:
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|hideSuggestions
argument_list|()
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
condition|)
block|{
case|case
name|KeyCodes
operator|.
name|KEY_DOWN
case|:
case|case
name|KeyCodes
operator|.
name|KEY_UP
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ENTER
case|:
case|case
name|KeyCodes
operator|.
name|KEY_ESCAPE
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
operator|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getAltKey
argument_list|()
operator|||
name|iText
operator|.
name|getCursorPos
argument_list|()
operator|==
name|iText
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|)
condition|)
block|{
name|showSuggestions
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|selectASuggestion
argument_list|()
operator|&&
operator|!
name|isSuggestionsShowing
argument_list|()
condition|)
name|showSuggestions
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|setValue
argument_list|(
name|parseTime
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStart
operator|!=
literal|null
condition|)
name|iStart
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|createSuggestions
argument_list|()
expr_stmt|;
if|if
condition|(
name|iDiff
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|setValue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|+
name|iDiff
argument_list|,
literal|288
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iText
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|showSuggestions
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|iLastSelected
init|=
literal|null
decl_stmt|;
name|MenuItem
name|iInsertedSuggestion
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|selectASuggestion
parameter_list|()
block|{
if|if
condition|(
name|iText
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastSelected
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|iInsertedSuggestion
operator|!=
literal|null
condition|)
block|{
name|iTimes
operator|.
name|removeItem
argument_list|(
name|iInsertedSuggestion
argument_list|)
expr_stmt|;
name|iInsertedSuggestion
operator|=
literal|null
expr_stmt|;
block|}
name|iLastSelected
operator|=
name|iText
operator|.
name|getText
argument_list|()
expr_stmt|;
name|Integer
name|slot
init|=
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|slot
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iStart
operator|==
literal|null
condition|)
name|slot
operator|=
name|CONSTANTS
operator|.
name|eventStartDefault
argument_list|()
expr_stmt|;
comment|// 730a
if|else if
condition|(
name|iStart
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
name|slot
operator|=
name|CONSTANTS
operator|.
name|eventStopDefault
argument_list|()
expr_stmt|;
comment|// 530p
else|else
name|slot
operator|=
name|iStart
operator|.
name|getValue
argument_list|()
operator|+
name|CONSTANTS
operator|.
name|eventLengthDefault
argument_list|()
expr_stmt|;
comment|// 1 hour
block|}
name|int
name|select
init|=
operator|-
literal|1
decl_stmt|,
name|diff
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSuggestions
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|suggestion
init|=
name|iSuggestions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|select
operator|<
literal|0
operator|||
name|Math
operator|.
name|abs
argument_list|(
name|slot
operator|-
name|suggestion
argument_list|)
operator|<
name|diff
operator|&&
name|slot
operator|>=
name|suggestion
condition|)
block|{
name|diff
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|slot
operator|-
name|suggestion
argument_list|)
expr_stmt|;
name|select
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|diff
operator|!=
literal|0
condition|)
block|{
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|hideSuggestions
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iLastSelected
operator|=
name|iText
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iInsertedSuggestion
operator|=
operator|new
name|MenuItem
argument_list|(
name|slot2time
argument_list|(
name|slot
argument_list|,
name|iStart
operator|==
literal|null
operator|||
name|iStart
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|slot
operator|-
name|iStart
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|iInsertedSuggestion
operator|.
name|setStyleName
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|iInsertedSuggestion
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"whiteSpace"
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
if|if
condition|(
name|select
operator|==
literal|0
operator|&&
name|iStart
operator|!=
literal|null
operator|&&
name|slot
operator|<
name|iSuggestions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
name|select
operator|--
expr_stmt|;
name|iTimes
operator|.
name|insertItem
argument_list|(
name|iInsertedSuggestion
argument_list|,
name|select
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|selectItem
argument_list|(
name|select
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTimes
operator|.
name|selectItem
argument_list|(
name|select
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|createSuggestions
parameter_list|()
block|{
name|iLastSelected
operator|=
literal|null
expr_stmt|;
name|iTimes
operator|.
name|clearItems
argument_list|()
expr_stmt|;
name|iSuggestions
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|iStart
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
literal|288
condition|;
name|t
operator|+=
name|CONSTANTS
operator|.
name|eventSlotIncrement
argument_list|()
control|)
block|{
specifier|final
name|int
name|slot
init|=
name|t
decl_stmt|;
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|hideSuggestions
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|slot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iLastSelected
operator|=
name|iText
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MenuItem
name|item
init|=
operator|new
name|MenuItem
argument_list|(
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|t
argument_list|)
argument_list|,
literal|true
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|item
operator|.
name|setStyleName
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|item
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"whiteSpace"
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|iSuggestions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|iTimeScroll
operator|.
name|setWidth
argument_list|(
literal|"77px"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|prev
init|=
name|iStart
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|t
init|=
name|CONSTANTS
operator|.
name|eventSlotIncrement
argument_list|()
operator|+
operator|(
name|prev
operator|==
literal|null
condition|?
literal|0
else|:
name|prev
operator|)
init|;
name|t
operator|<=
literal|288
condition|;
name|t
operator|+=
name|CONSTANTS
operator|.
name|eventSlotIncrement
argument_list|()
control|)
block|{
specifier|final
name|int
name|slot
init|=
name|t
decl_stmt|;
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|hideSuggestions
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|slot
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iLastSelected
operator|=
name|iText
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|MenuItem
name|item
init|=
operator|new
name|MenuItem
argument_list|(
name|slot2time
argument_list|(
name|t
argument_list|,
name|prev
operator|==
literal|null
condition|?
literal|0
else|:
name|t
operator|-
name|prev
argument_list|)
argument_list|,
literal|true
argument_list|,
name|command
argument_list|)
decl_stmt|;
name|item
operator|.
name|setStyleName
argument_list|(
literal|"item"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setStyleAttribute
argument_list|(
name|item
operator|.
name|getElement
argument_list|()
argument_list|,
literal|"whiteSpace"
argument_list|,
literal|"nowrap"
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|iSuggestions
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|iTimeScroll
operator|.
name|setWidth
argument_list|(
name|prev
operator|==
literal|null
condition|?
literal|"77px"
else|:
literal|"137px"
argument_list|)
expr_stmt|;
block|}
name|selectASuggestion
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|hideSuggestions
parameter_list|()
block|{
if|if
condition|(
name|iPopup
operator|.
name|isShowing
argument_list|()
condition|)
name|iPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|showSuggestions
parameter_list|()
block|{
name|iPopup
operator|.
name|showRelativeTo
argument_list|(
name|iText
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|scrollToView
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|isSuggestionsShowing
parameter_list|()
block|{
return|return
name|iPopup
operator|.
name|isShowing
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|slot2time
parameter_list|(
name|int
name|slot
parameter_list|,
name|int
name|diff
parameter_list|)
block|{
if|if
condition|(
name|diff
operator|<=
literal|0
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
return|;
if|if
condition|(
name|diff
operator|<
literal|24
operator|&&
name|diff
operator|!=
literal|12
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
literal|5
operator|*
name|diff
operator|)
operator|+
literal|" mins)"
return|;
if|else if
condition|(
name|diff
operator|==
literal|12
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" (1 hr)"
return|;
if|else if
condition|(
name|diff
operator|%
literal|12
operator|==
literal|0
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|diff
operator|/
literal|12
operator|)
operator|+
literal|" hrs)"
return|;
if|else if
condition|(
name|diff
operator|%
literal|12
operator|==
literal|3
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|diff
operator|/
literal|12
operator|)
operator|+
literal|"&frac14; hrs)"
return|;
if|else if
condition|(
name|diff
operator|%
literal|12
operator|==
literal|6
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|diff
operator|/
literal|12
operator|)
operator|+
literal|"&frac12; hrs)"
return|;
if|else if
condition|(
name|diff
operator|%
literal|12
operator|==
literal|9
condition|)
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|diff
operator|/
literal|12
operator|)
operator|+
literal|"&frac34; hrs)"
return|;
return|return
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|slot
argument_list|)
operator|+
literal|" ("
operator|+
name|diff
operator|/
literal|12
operator|+
literal|":"
operator|+
operator|(
name|diff
operator|%
literal|12
operator|==
literal|1
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
operator|(
literal|5
operator|*
operator|(
name|diff
operator|%
literal|12
operator|)
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
name|Integer
name|parseTime
parameter_list|(
name|String
name|text
parameter_list|)
block|{
return|return
name|TimeUtils
operator|.
name|parseTime
argument_list|(
name|CONSTANTS
argument_list|,
name|text
argument_list|,
operator|(
name|iStart
operator|==
literal|null
condition|?
literal|null
else|:
name|iStart
operator|.
name|getValue
argument_list|()
operator|)
argument_list|)
return|;
block|}
specifier|private
class|class
name|TimeMenu
extends|extends
name|MenuBar
block|{
name|TimeMenu
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|setFocusOnHoverEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNumItems
parameter_list|()
block|{
return|return
name|getItems
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|getSelectedItemIndex
parameter_list|()
block|{
name|MenuItem
name|selectedItem
init|=
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selectedItem
operator|!=
literal|null
condition|)
return|return
name|getItems
argument_list|()
operator|.
name|indexOf
argument_list|(
name|selectedItem
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|selectItem
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
block|{
name|selectItem
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|iTimeScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|scrollToView
parameter_list|()
block|{
name|List
argument_list|<
name|MenuItem
argument_list|>
name|items
init|=
name|getItems
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|getSelectedItemIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|>
operator|-
literal|1
operator|&&
name|index
operator|<
name|items
operator|.
name|size
argument_list|()
condition|)
block|{
name|iTimeScroll
operator|.
name|ensureVisible
argument_list|(
name|items
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|executeSelected
parameter_list|()
block|{
name|MenuItem
name|selected
init|=
name|getSelectedItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
condition|)
name|selected
operator|.
name|getScheduledCommand
argument_list|()
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|parseTime
argument_list|(
name|iText
operator|.
name|getText
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Integer
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
name|iText
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|iStart
operator|!=
literal|null
operator|&&
name|iStart
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|iDiff
operator|=
name|value
operator|-
name|iStart
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|iText
operator|.
name|setText
argument_list|(
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TimeUtils
block|{
specifier|public
specifier|static
name|Integer
name|parseTime
parameter_list|(
name|GwtConstants
name|constants
parameter_list|,
name|String
name|text
parameter_list|,
name|Integer
name|start
parameter_list|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|noon
range|:
name|constants
operator|.
name|parseTimeNoon
argument_list|()
control|)
block|{
if|if
condition|(
name|noon
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
return|return
literal|144
return|;
block|}
for|for
control|(
name|String
name|midnight
range|:
name|constants
operator|.
name|parseTimeMidnight
argument_list|()
control|)
block|{
if|if
condition|(
name|midnight
operator|.
name|startsWith
argument_list|(
name|text
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
return|return
operator|(
name|start
operator|==
literal|null
condition|?
literal|0
else|:
literal|288
operator|)
return|;
block|}
block|}
if|if
condition|(
name|start
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|h
range|:
name|constants
operator|.
name|parseTimeHours
argument_list|()
control|)
block|{
if|if
condition|(
name|text
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|h
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|start
operator|+
name|Math
operator|.
name|round
argument_list|(
literal|12
operator|*
name|Float
operator|.
name|parseFloat
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|h
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
for|for
control|(
name|String
name|m
range|:
name|constants
operator|.
name|parseTimeMinutes
argument_list|()
control|)
block|{
if|if
condition|(
name|text
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
name|m
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|start
operator|+
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|m
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|trim
argument_list|()
argument_list|)
operator|/
literal|5
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
name|int
name|startHour
init|=
literal|0
decl_stmt|,
name|startMin
init|=
literal|0
decl_stmt|;
name|String
name|token
init|=
name|text
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|number
init|=
literal|""
decl_stmt|;
name|boolean
name|plus
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"+"
argument_list|)
condition|)
block|{
name|plus
operator|=
literal|true
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|number
operator|.
name|length
argument_list|()
operator|>
literal|2
condition|)
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|/
literal|100
expr_stmt|;
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
operator|%
literal|100
expr_stmt|;
block|}
else|else
block|{
name|startHour
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
operator|||
name|token
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
operator|||
operator|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
operator|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|number
operator|=
literal|""
expr_stmt|;
while|while
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|>=
literal|'0'
operator|&&
name|token
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|<=
literal|'9'
condition|)
block|{
name|number
operator|+=
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|number
operator|.
name|isEmpty
argument_list|()
condition|)
name|startMin
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|" "
argument_list|)
condition|)
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasAmOrPm
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isEmpty
argument_list|()
operator|&&
name|plus
operator|&&
name|start
operator|!=
literal|null
condition|)
block|{
name|int
name|slot
init|=
name|start
operator|+
operator|(
literal|60
operator|*
name|startHour
operator|+
name|startMin
operator|)
operator|/
literal|5
decl_stmt|;
if|if
condition|(
name|slot
operator|>
name|start
operator|&&
name|slot
operator|<=
literal|288
condition|)
return|return
name|slot
return|;
if|if
condition|(
name|startMin
operator|==
literal|0
condition|)
block|{
name|slot
operator|=
name|start
operator|+
name|startHour
operator|/
literal|5
expr_stmt|;
if|if
condition|(
name|slot
operator|>
name|start
operator|&&
name|slot
operator|<=
literal|288
condition|)
return|return
name|slot
return|;
block|}
block|}
for|for
control|(
name|String
name|am
range|:
name|constants
operator|.
name|parseTimeAm
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|am
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|==
literal|12
condition|)
name|startHour
operator|=
literal|24
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|String
name|pm
range|:
name|constants
operator|.
name|parseTimePm
argument_list|()
control|)
block|{
if|if
condition|(
name|token
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|pm
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hasAmOrPm
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|startHour
operator|<
literal|12
condition|)
name|startHour
operator|+=
literal|12
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|token
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
comment|// if (startHour< 7&& !hasAmOrPm) startHour += 12;
if|if
condition|(
name|startMin
operator|%
literal|5
operator|!=
literal|0
condition|)
name|startMin
operator|=
literal|5
operator|*
operator|(
operator|(
name|startMin
operator|+
literal|2
operator|)
operator|/
literal|5
operator|)
expr_stmt|;
comment|// if (startHour == 7&& startMin == 0&& !hasAmOrPm) startHour += 12;
name|int
name|slot
init|=
operator|(
literal|60
operator|*
name|startHour
operator|+
name|startMin
operator|)
operator|/
literal|5
decl_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
operator|&&
name|slot
operator|<=
name|start
operator|&&
name|slot
operator|<=
literal|144
operator|&&
operator|!
name|hasAmOrPm
condition|)
name|slot
operator|+=
literal|144
expr_stmt|;
if|if
condition|(
name|start
operator|!=
literal|null
operator|&&
name|slot
operator|<=
name|start
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|slot
operator|<
literal|0
operator|||
name|slot
operator|>
literal|288
condition|)
return|return
name|parseTime
argument_list|(
name|constants
argument_list|,
name|text
operator|+
literal|"0"
argument_list|,
name|start
argument_list|)
return|;
return|return
name|slot
return|;
block|}
specifier|public
specifier|static
name|String
name|slot2time
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
block|{
if|if
condition|(
name|slot
operator|==
literal|0
operator|||
name|slot
operator|==
literal|288
condition|)
return|return
name|CONSTANTS
operator|.
name|timeMidnight
argument_list|()
return|;
if|if
condition|(
name|slot
operator|==
literal|144
condition|)
return|return
name|CONSTANTS
operator|.
name|timeNoon
argument_list|()
return|;
block|}
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
literal|" "
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
name|CONSTANTS
operator|.
name|timeAm
argument_list|()
else|:
name|h
operator|>=
literal|12
condition|?
name|CONSTANTS
operator|.
name|timePm
argument_list|()
else|:
name|CONSTANTS
operator|.
name|timeAm
argument_list|()
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
specifier|public
specifier|static
name|String
name|slot2short
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
block|{
if|if
condition|(
name|slot
operator|==
literal|0
operator|||
name|slot
operator|==
literal|288
condition|)
return|return
name|CONSTANTS
operator|.
name|timeMidnight
argument_list|()
return|;
if|if
condition|(
name|slot
operator|==
literal|144
condition|)
return|return
name|CONSTANTS
operator|.
name|timeNoon
argument_list|()
return|;
block|}
name|int
name|h
init|=
name|slot
operator|/
literal|12
decl_stmt|;
name|int
name|m
init|=
literal|5
operator|*
operator|(
name|slot
operator|%
literal|12
operator|)
decl_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|)
return|return
operator|(
name|h
operator|>
literal|12
condition|?
name|h
operator|-
literal|12
else|:
name|h
operator|)
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
operator|+
operator|(
name|h
operator|==
literal|24
condition|?
name|CONSTANTS
operator|.
name|timeShortAm
argument_list|()
else|:
name|h
operator|>=
literal|12
condition|?
name|CONSTANTS
operator|.
name|timeShortPm
argument_list|()
else|:
name|CONSTANTS
operator|.
name|timeShortAm
argument_list|()
operator|)
return|;
else|else
return|return
name|h
operator|+
literal|":"
operator|+
operator|(
name|m
operator|<
literal|10
condition|?
literal|"0"
else|:
literal|""
operator|)
operator|+
name|m
return|;
block|}
block|}
block|}
end_class

end_unit

