begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|PageAccessException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|UmbrellaException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
operator|.
name|PredefinedFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ToolBox
block|{
specifier|public
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|native
specifier|static
name|void
name|disableTextSelectInternal
parameter_list|(
name|Element
name|e
parameter_list|)
comment|/*-{ 		e.ondrag = function () { return false; }; 		e.onselectstart = function () { return false; }; 		e.style.MozUserSelect="none" 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|int
name|getScrollBarWidth
parameter_list|()
comment|/*-{ 	 		var inner = document.createElement("p"); 		inner.style.width = "100%"; 		inner.style.height = "200px"; 		 		var outer = document.createElement("div"); 		outer.style.position = "absolute"; 		outer.style.top = "0px"; 		outer.style.left = "0px"; 		outer.style.visibility = "hidden"; 		outer.style.width = "200px"; 		outer.style.height = "150px"; 		outer.style.overflow = "hidden"; 		outer.appendChild (inner); 		 		document.body.appendChild (outer); 		var w1 = inner.offsetWidth; 		outer.style.overflow = "scroll"; 		var w2 = inner.offsetWidth; 		if (w1 == w2) w2 = outer.clientWidth; 		 		document.body.removeChild (outer); 		  		return (w1 - w2); 	}-*/
function_decl|;
specifier|public
specifier|static
specifier|native
name|void
name|printw
parameter_list|(
name|String
name|html
parameter_list|)
comment|/*-{ 		var win = (html ? $wnd.open("about:blank", "__printingWindow") : $wnd); 		var doc = win.document; 		 		if (html) { 			doc.open();  			doc.write(html); 			doc.write("<script type=\"text/javascript\" language=\"javascript\">" +  				"function invokePrint() { " + 				"if (document.readyState&& document.readyState!='complete') " + 				"setTimeout(function() { invokePrint(); }, 50); " + 				"else if (document.body&& document.body.innerHTML=='false') " + 				"setTimeout(function() { invokePrint(); }, 50); " + 				"else { focus(); print(); }}" +  				"setTimeout(function() { invokePrint(); }, 500);" + 				"</script>"); 			doc.close(); 		} 		 		win.focus(); 	}-*/
function_decl|;
specifier|public
specifier|static
specifier|native
name|void
name|printf
parameter_list|(
name|String
name|html
parameter_list|)
comment|/*-{ 		if (navigator.userAgent.toLowerCase().indexOf('chrome')> -1) { 			@org.unitime.timetable.gwt.client.ToolBox::printw(Ljava/lang/String;)(html); 			return; 		} 		     	var frame = $doc.frames ? $doc.frames['__printingFrame'] : $doc.getElementById('__printingFrame');         if (!frame) { 			@org.unitime.timetable.gwt.client.ToolBox::printw(Ljava/lang/String;)(html);             return;          }                  var doc = null;         if (frame.contentDocument)             doc = frame.contentDocument;         else if (frame.contentWindow)             doc = frame.contentWindow.document;         else if (frame.document)             doc = frame.document;         if (!doc)  { 			@org.unitime.timetable.gwt.client.ToolBox::printw(Ljava/lang/String;)(html);             return;          }                  if (html) {         	doc.open();          	doc.write(html);          	doc.close();         }                  if (doc.readyState&& doc.readyState!='complete') {         	setTimeout(function() {         		@org.unitime.timetable.gwt.client.ToolBox::printf(Ljava/lang/String;)(null);         	}, 50);         } else if (doc.body&& doc.body.innerHTML=='false') {         	setTimeout(function() {         		@org.unitime.timetable.gwt.client.ToolBox::printf(Ljava/lang/String;)(null);         	}, 50);         } else {         	if (frame.contentWindow) frame = frame.contentWindow;         	frame.focus();         	frame.print();         }     }-*/
function_decl|;
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|String
name|title
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|session
parameter_list|,
name|Widget
modifier|...
name|widgets
parameter_list|)
block|{
name|String
name|content
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Widget
name|w
range|:
name|widgets
control|)
name|content
operator|+=
literal|"<div class=\"unitime-PrintedComponent\">"
operator|+
name|w
operator|.
name|getElement
argument_list|()
operator|.
name|getString
argument_list|()
operator|+
literal|"</div>"
expr_stmt|;
name|String
name|html
init|=
literal|"<html><header>"
operator|+
literal|"<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">"
operator|+
literal|"<link type=\"text/css\" rel=\"stylesheet\" href=\""
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"unitime/gwt/standard/standard.css\">"
operator|+
literal|"<link type=\"text/css\" rel=\"stylesheet\" href=\""
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"styles/unitime.css\">"
operator|+
literal|"<link rel=\"shortcut icon\" href=\""
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"images/timetabling.ico\">"
operator|+
literal|"<title>UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|"| University Timetabling Application</title>"
operator|+
literal|"</header><body class='unitime-Body'>"
operator|+
literal|"<span class='unitime-Page'>"
operator|+
literal|"<span class='body'>"
operator|+
literal|"<span class='unitime-PageHeader'>"
operator|+
literal|"<span class='row'>"
operator|+
literal|"<span class='logo'><img src='"
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"images/unitime.png' border='0'/></span>"
operator|+
literal|"<span class='content'>"
operator|+
literal|"<span id='UniTimeGWT:Title' class='title'>"
operator|+
name|title
operator|+
literal|"</span>"
operator|+
literal|"<span class='unitime-Header'>"
operator|+
literal|"<span class='unitime-InfoPanel'>"
operator|+
literal|"<span class='row'>"
operator|+
literal|"<span class='cell middle'>"
operator|+
name|user
operator|+
literal|"</span>"
operator|+
literal|"<span class='cell right'>"
operator|+
name|session
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"<span class='content'>"
operator|+
name|content
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"<span class='footer'>"
operator|+
literal|"<span class='unitime-Footer'>"
operator|+
literal|"<span class='row'>"
operator|+
literal|"<span class='cell left'>Printed from UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|" | University Timetabling Application</span>"
operator|+
literal|"<span class='cell middle'>"
operator|+
name|CONSTANTS
operator|.
name|copyright
argument_list|()
operator|+
literal|"</span>"
operator|+
literal|"<span class='cell right'>"
operator|+
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|PredefinedFormat
operator|.
name|DATE_TIME_MEDIUM
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span></body></html>"
decl_stmt|;
name|printf
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|List
argument_list|<
name|Page
argument_list|>
name|pages
parameter_list|)
block|{
name|String
name|html
init|=
literal|"<html><header>"
operator|+
literal|"<meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\">"
operator|+
literal|"<link type=\"text/css\" rel=\"stylesheet\" href=\""
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"unitime/gwt/standard/standard.css\">"
operator|+
literal|"<link type=\"text/css\" rel=\"stylesheet\" href=\""
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"styles/unitime.css\">"
operator|+
literal|"<link rel=\"shortcut icon\" href=\""
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"images/timetabling.ico\">"
operator|+
literal|"<title>UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|"| University Timetabling Application</title>"
operator|+
literal|"</header><body class='unitime-Body'>"
decl_stmt|;
for|for
control|(
name|Page
name|p
range|:
name|pages
control|)
block|{
name|html
operator|+=
literal|"<span class='unitime-PrintedPage'>"
operator|+
literal|"<span class='unitime-Page'>"
operator|+
literal|"<span class='body'>"
operator|+
literal|"<span class='unitime-PageHeader'>"
operator|+
literal|"<span class='row'>"
operator|+
literal|"<span class='logo'><img src='"
operator|+
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"images/unitime.png' border='0'/></span>"
operator|+
literal|"<span class='content'>"
operator|+
literal|"<span id='UniTimeGWT:Title' class='title'>"
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|"</span>"
operator|+
literal|"<span class='unitime-Header'>"
operator|+
literal|"<span class='unitime-InfoPanel'>"
operator|+
literal|"<span class='row'>"
operator|+
literal|"<span class='cell middle'>"
operator|+
name|p
operator|.
name|getUser
argument_list|()
operator|+
literal|"</span>"
operator|+
literal|"<span class='cell right'>"
operator|+
name|p
operator|.
name|getSession
argument_list|()
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"<span class='content'>"
operator|+
name|p
operator|.
name|getBody
argument_list|()
operator|.
name|getString
argument_list|()
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"<span class='footer'>"
operator|+
literal|"<span class='unitime-Footer'>"
operator|+
literal|"<span class='row'>"
operator|+
literal|"<span class='cell left'>Printed from UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|" | University Timetabling Application</span>"
operator|+
literal|"<span class='cell middle'>"
operator|+
name|CONSTANTS
operator|.
name|copyright
argument_list|()
operator|+
literal|"</span>"
operator|+
literal|"<span class='cell right'>"
operator|+
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|PredefinedFormat
operator|.
name|DATE_TIME_MEDIUM
argument_list|)
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|html
operator|+=
literal|"</body></html>"
expr_stmt|;
name|printf
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|print
parameter_list|(
name|Page
modifier|...
name|pages
parameter_list|)
block|{
name|List
argument_list|<
name|Page
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Page
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Page
name|page
range|:
name|pages
control|)
name|list
operator|.
name|add
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|print
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|native
specifier|static
name|void
name|open
parameter_list|(
name|String
name|url
parameter_list|)
comment|/*-{ 		$wnd.location = url; 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|String
name|eval
parameter_list|(
name|String
name|script
parameter_list|)
comment|/*-{ 		return eval(script); 	}-*/
function_decl|;
specifier|public
specifier|static
name|void
name|checkAccess
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|instanceof
name|GwtRpcException
operator|&&
name|t
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
condition|)
name|t
operator|=
name|t
operator|.
name|getCause
argument_list|()
expr_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|instanceof
name|PageAccessException
condition|)
block|{
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"login.do?menu=hide&m="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|t
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|+
literal|"&target="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getHref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|/* 			UniTimeFrameDialog.openDialog("UniTime " + CONSTANTS.version() + "| Log In", "login.do?menu=hide&m=" + URL.encodeQueryString(t.getMessage()) 					+"&target=" + URL.encodeQueryString(Window.Location.getHref()), "700px", "420px"); 			*/
block|}
block|}
specifier|public
specifier|native
specifier|static
name|void
name|setWhiteSpace
parameter_list|(
name|Style
name|style
parameter_list|,
name|String
name|value
parameter_list|)
comment|/*-{ 		style.whiteSpace = value; 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|void
name|setMaxHeight
parameter_list|(
name|Style
name|style
parameter_list|,
name|String
name|value
parameter_list|)
comment|/*-{ 		style.maxHeight = value; 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|void
name|setMaxWidth
parameter_list|(
name|Style
name|style
parameter_list|,
name|String
name|value
parameter_list|)
comment|/*-{ 		style.maxWidth = value; 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|void
name|setMinWidth
parameter_list|(
name|Style
name|style
parameter_list|,
name|String
name|value
parameter_list|)
comment|/*-{ 		style.minWidth = value; 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|String
name|getMinWidth
parameter_list|(
name|Style
name|style
parameter_list|)
comment|/*-{ 		return style.minWidth; 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|int
name|getClientWidth
parameter_list|()
comment|/*-{ 		var sideMenu = $doc.getElementById("unitime-SideMenu"); 		if (!sideMenu) return $doc.body.clientWidth; 		var sideMenuSpans = sideMenu.getElementsByTagName("span");     	if (sideMenuSpans.length> 0) {     		return $doc.body.clientWidth - sideMenuSpans[0].clientWidth;     	} else {     		return $doc.body.clientWidth;     	} 	}-*/
function_decl|;
specifier|public
specifier|native
specifier|static
name|void
name|scrollToElement
parameter_list|(
name|Element
name|element
parameter_list|)
comment|/*-{ 		element.scrollIntoView(); 	}-*/
function_decl|;
specifier|public
specifier|static
name|Throwable
name|unwrap
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|e
operator|instanceof
name|UmbrellaException
condition|)
block|{
name|UmbrellaException
name|ue
init|=
operator|(
name|UmbrellaException
operator|)
name|e
decl_stmt|;
if|if
condition|(
name|ue
operator|.
name|getCauses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|unwrap
argument_list|(
name|ue
operator|.
name|getCauses
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|e
return|;
block|}
specifier|public
specifier|static
interface|interface
name|Page
block|{
specifier|public
name|String
name|getName
parameter_list|()
function_decl|;
specifier|public
name|String
name|getUser
parameter_list|()
function_decl|;
specifier|public
name|String
name|getSession
parameter_list|()
function_decl|;
specifier|public
name|Element
name|getBody
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|Collection
argument_list|<
name|?
argument_list|>
name|items
parameter_list|)
block|{
if|if
condition|(
name|items
operator|==
literal|null
operator|||
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|items
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|items
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
return|;
if|if
condition|(
name|items
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
name|MESSAGES
operator|.
name|itemSeparatorPair
argument_list|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|i
init|=
name|items
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|String
name|list
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|item
init|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|list
operator|=
name|MESSAGES
operator|.
name|itemSeparatorMiddle
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
expr_stmt|;
else|else
name|list
operator|=
name|MESSAGES
operator|.
name|itemSeparatorLast
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
block|}
end_class

end_unit

