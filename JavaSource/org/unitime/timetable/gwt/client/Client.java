begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeMenu
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|EntryPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
operator|.
name|UncaughtExceptionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|RunAsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|Client
implements|implements
name|EntryPoint
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|List
argument_list|<
name|GwtPageChangedHandler
argument_list|>
name|iGwtPageChangedHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|GwtPageChangedHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|Logger
name|sLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Client
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|void
name|onModuleLoad
parameter_list|()
block|{
name|GWT
operator|.
name|setUncaughtExceptionHandler
argument_list|(
operator|new
name|UncaughtExceptionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onUncaughtException
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|u
init|=
name|ToolBox
operator|.
name|unwrap
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|sLogger
operator|.
name|log
argument_list|(
name|Level
operator|.
name|WARNING
argument_list|,
name|MESSAGES
operator|.
name|failedUncaughtException
argument_list|(
name|u
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|u
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|onModuleLoadDeferred
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onModuleLoadDeferred
parameter_list|()
block|{
comment|// register triggers
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|RunAsyncCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
for|for
control|(
name|Triggers
name|t
range|:
name|Triggers
operator|.
name|values
argument_list|()
control|)
name|t
operator|.
name|register
argument_list|()
expr_stmt|;
name|callGwtOnLoadIfExists
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
comment|// load page
if|if
condition|(
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingPage
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|initPageAsync
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"page"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// load components
for|for
control|(
specifier|final
name|Components
name|c
range|:
name|Components
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|RootPanel
name|p
init|=
name|RootPanel
operator|.
name|get
argument_list|(
name|c
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|initComponentAsync
argument_list|(
name|p
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|==
literal|null
operator|&&
name|c
operator|.
name|isMultiple
argument_list|()
condition|)
block|{
name|NodeList
argument_list|<
name|Element
argument_list|>
name|x
init|=
name|getElementsByName
argument_list|(
name|c
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|!=
literal|null
operator|&&
name|x
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|x
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Element
name|e
init|=
name|x
operator|.
name|getItem
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|e
operator|.
name|setId
argument_list|(
name|DOM
operator|.
name|createUniqueId
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RootPanel
name|q
init|=
name|RootPanel
operator|.
name|get
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|initComponentAsync
argument_list|(
name|q
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|initPageAsync
parameter_list|(
specifier|final
name|String
name|page
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|RunAsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|init
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
name|Label
name|error
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadPage
argument_list|(
name|reason
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|RootPanel
name|loading
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Loading"
argument_list|)
decl_stmt|;
if|if
condition|(
name|loading
operator|!=
literal|null
condition|)
name|loading
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|init
parameter_list|(
name|String
name|page
parameter_list|)
block|{
try|try
block|{
name|RootPanel
name|loading
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Loading"
argument_list|)
decl_stmt|;
if|if
condition|(
name|loading
operator|!=
literal|null
condition|)
name|loading
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Pages
name|p
range|:
name|Pages
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|page
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|waitLoading
argument_list|(
name|p
operator|.
name|name
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|p
operator|.
name|name
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
name|Window
operator|.
name|setTitle
argument_list|(
literal|"UniTime "
operator|+
name|CONSTANTS
operator|.
name|version
argument_list|()
operator|+
literal|"| "
operator|+
name|p
operator|.
name|name
argument_list|(
name|MESSAGES
argument_list|)
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|p
operator|.
name|widget
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|Label
name|error
init|=
operator|new
name|Label
argument_list|(
name|page
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|failedToLoadPageNotProvided
argument_list|()
else|:
name|MESSAGES
operator|.
name|failedToLoadPageNotRegistered
argument_list|(
name|page
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|Label
name|error
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadPage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:Body"
argument_list|)
operator|.
name|add
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initComponentAsync
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|,
specifier|final
name|Components
name|comp
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|RunAsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|comp
operator|.
name|insert
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|GwtPageChangeEvent
block|{ 		 	}
specifier|public
interface|interface
name|GwtPageChangedHandler
block|{
specifier|public
name|void
name|onChange
parameter_list|(
name|GwtPageChangeEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
name|void
name|addGwtPageChangedHandler
parameter_list|(
name|GwtPageChangedHandler
name|h
parameter_list|)
block|{
name|iGwtPageChangedHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|fireGwtPageChanged
parameter_list|(
name|GwtPageChangeEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|GwtPageChangedHandler
name|h
range|:
name|iGwtPageChangedHandlers
control|)
name|h
operator|.
name|onChange
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|native
name|void
name|callGwtOnLoadIfExists
parameter_list|()
comment|/*-{ 		if ($wnd.gwtOnLoad) 			$wnd.gwtOnLoad(); 	}-*/
function_decl|;
specifier|public
specifier|static
name|void
name|reloadMenu
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Components
name|c
range|:
name|Components
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|RootPanel
name|p
init|=
name|RootPanel
operator|.
name|get
argument_list|(
name|c
operator|.
name|id
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|instanceof
name|UniTimeMenu
condition|)
operator|(
operator|(
name|UniTimeMenu
operator|)
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
specifier|native
specifier|static
name|NodeList
argument_list|<
name|Element
argument_list|>
name|getElementsByName
parameter_list|(
name|String
name|name
parameter_list|)
comment|/*-{     	return $doc.getElementsByName(name);   	}-*/
function_decl|;
block|}
end_class

end_unit

