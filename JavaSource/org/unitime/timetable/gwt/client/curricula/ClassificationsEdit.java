begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
operator|.
name|CurriculaCourses
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|DataChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|DataChangedListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseOutListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseOverListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumClassificationInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueBoxBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ClassificationsEdit
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CurriculaServiceAsync
name|iService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|CurriculaService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iPanel
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeaderPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|CurriculumInterface
argument_list|>
name|iTable
decl_stmt|;
specifier|private
name|List
argument_list|<
name|EditFinishedHandler
argument_list|>
name|iEditFinishedHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|EditFinishedHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ClassificationsEdit
parameter_list|()
block|{
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|ClickHandler
name|save
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitSavingData
argument_list|()
argument_list|)
expr_stmt|;
name|iService
operator|.
name|saveClassifications
argument_list|(
name|iTable
operator|.
name|getData
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iHeaderPanel
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToSaveCurricula
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToSaveCurricula
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iHeaderPanel
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|EditFinishedEvent
name|e
init|=
operator|new
name|EditFinishedEvent
argument_list|()
decl_stmt|;
for|for
control|(
name|EditFinishedHandler
name|h
range|:
name|iEditFinishedHandlers
control|)
block|{
name|h
operator|.
name|onSave
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|back
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|EditFinishedEvent
name|e
init|=
operator|new
name|EditFinishedEvent
argument_list|()
decl_stmt|;
for|for
control|(
name|EditFinishedHandler
name|h
range|:
name|iEditFinishedHandlers
control|)
block|{
name|h
operator|.
name|onBack
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ClickHandler
name|print
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|Window
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iHeaderPanel
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeaderPanel
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|buttonSave
argument_list|()
argument_list|,
literal|75
argument_list|,
name|save
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
literal|75
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|addButton
argument_list|(
literal|"print"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrint
argument_list|()
argument_list|,
literal|75
argument_list|,
name|print
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeaderPanel
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|iHeaderPanel
operator|.
name|clonePanel
argument_list|()
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateAll
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
operator|(
operator|(
name|Updatable
operator|)
name|w
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|curricula
parameter_list|)
block|{
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
specifier|final
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|academicClassifications
init|=
operator|new
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumInterface
name|curriculum
range|:
name|curricula
control|)
block|{
if|if
condition|(
name|curriculum
operator|.
name|hasClassifications
argument_list|()
condition|)
block|{
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
name|academicClassifications
operator|.
name|add
argument_list|(
name|clasf
operator|.
name|getAcademicClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|operations
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Mode
name|m
range|:
name|Mode
operator|.
name|values
argument_list|()
control|)
block|{
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesMode
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|int
name|c
init|=
literal|1
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|header
operator|.
name|get
argument_list|(
name|c
operator|++
argument_list|)
operator|.
name|setText
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
operator|(
name|m
operator|==
name|Mode
operator|.
name|NONE
condition|?
literal|""
else|:
literal|" "
operator|+
name|MESSAGES
operator|.
name|abbvRequestedEnrollment
argument_list|()
operator|+
literal|" / "
operator|+
name|m
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|header
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|setText
argument_list|(
name|m
operator|==
name|Mode
operator|.
name|NONE
condition|?
name|MESSAGES
operator|.
name|colTotal
argument_list|()
else|:
name|MESSAGES
operator|.
name|colTotalOf
argument_list|(
name|MESSAGES
operator|.
name|abbvRequestedEnrollment
argument_list|()
operator|+
literal|" / "
operator|+
name|m
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|!=
name|m
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|m
operator|==
name|Mode
operator|.
name|NONE
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|operations
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|hasEmptyColumns
argument_list|()
condition|)
block|{
name|hideEmptyColumns
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|showAllColumns
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|hasEmptyColumns
argument_list|()
operator|||
name|hasHiddenColumn
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|hasEmptyColumns
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opHideEmptyClassifications
argument_list|()
else|:
name|MESSAGES
operator|.
name|opShowAllClassifications
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hCurriculum
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCurriculum
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCurriculum
argument_list|)
expr_stmt|;
name|hCurriculum
operator|.
name|getOperations
argument_list|()
operator|.
name|addAll
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|hCurriculum
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|hCurriculum
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colCurriculum
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Mode
name|m
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
specifier|final
name|UniTimeTableHeader
name|hClasf
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
operator|(
name|m
operator|==
name|Mode
operator|.
name|NONE
condition|?
literal|""
else|:
literal|" "
operator|+
name|MESSAGES
operator|.
name|abbvRequestedEnrollment
argument_list|()
operator|+
literal|" / "
operator|+
name|m
operator|.
name|getAbbv
argument_list|()
operator|)
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hClasf
argument_list|)
expr_stmt|;
name|hClasf
operator|.
name|getOperations
argument_list|()
operator|.
name|addAll
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|hClasf
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|hClasf
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|CurriculumClassificationInterface
name|f
init|=
literal|null
decl_stmt|,
name|g
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|c
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
argument_list|)
condition|)
block|{
name|f
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|CurriculumClassificationInterface
name|c
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
argument_list|)
condition|)
block|{
name|g
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|int
name|t1
init|=
operator|(
name|f
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|f
operator|.
name|getExpected
argument_list|()
operator|)
decl_stmt|;
name|int
name|t2
init|=
operator|(
name|g
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|g
operator|.
name|getExpected
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|t2
operator|>
name|t1
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|t1
operator|>
name|t2
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|fieldRequestedEnrollment
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hClasf
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|hClasf
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|CurriculumClassificationInterface
name|f
init|=
literal|null
decl_stmt|,
name|g
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|c
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
argument_list|)
condition|)
block|{
name|f
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|CurriculumClassificationInterface
name|c
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
argument_list|)
condition|)
block|{
name|g
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
name|int
name|t1
init|=
literal|0
decl_stmt|,
name|t2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|)
block|{
case|case
name|ENRL
case|:
name|t1
operator|=
operator|(
name|f
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|f
operator|.
name|getEnrollment
argument_list|()
operator|)
expr_stmt|;
name|t2
operator|=
operator|(
name|g
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|g
operator|.
name|getEnrollment
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
name|LAST
case|:
name|t1
operator|=
operator|(
name|f
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|f
operator|.
name|getLastLike
argument_list|()
operator|)
expr_stmt|;
name|t2
operator|=
operator|(
name|g
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|g
operator|.
name|getLastLike
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
name|PROJ
case|:
name|t1
operator|=
operator|(
name|f
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|f
operator|.
name|getProjection
argument_list|()
operator|)
expr_stmt|;
name|t2
operator|=
operator|(
name|g
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|g
operator|.
name|getProjection
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
name|REQ
case|:
name|t1
operator|=
operator|(
name|f
operator|.
name|getRequested
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|f
operator|.
name|getRequested
argument_list|()
operator|)
expr_stmt|;
name|t2
operator|=
operator|(
name|g
operator|.
name|getRequested
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|g
operator|.
name|getRequested
argument_list|()
operator|)
expr_stmt|;
break|break;
case|case
name|SSPROJ
case|:
name|t1
operator|=
operator|(
name|f
operator|.
name|getSnapshotProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|f
operator|.
name|getSnapshotProjection
argument_list|()
operator|)
expr_stmt|;
name|t2
operator|=
operator|(
name|g
operator|.
name|getSnapshotProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|g
operator|.
name|getSnapshotProjection
argument_list|()
operator|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|t2
operator|>
name|t1
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|t1
operator|>
name|t2
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|!=
name|Mode
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UniTimeTableHeader
name|hTotal
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|m
operator|==
name|Mode
operator|.
name|NONE
condition|?
name|MESSAGES
operator|.
name|colTotal
argument_list|()
else|:
name|MESSAGES
operator|.
name|colTotalOf
argument_list|(
name|MESSAGES
operator|.
name|abbvRequestedEnrollment
argument_list|()
operator|+
literal|" / "
operator|+
name|m
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTotal
argument_list|)
expr_stmt|;
name|hTotal
operator|.
name|getOperations
argument_list|()
operator|.
name|addAll
argument_list|(
name|operations
argument_list|)
expr_stmt|;
name|hTotal
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|hTotal
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|int
name|t1
init|=
literal|0
decl_stmt|,
name|t2
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getExpected
argument_list|()
operator|!=
literal|null
condition|)
name|t1
operator|+=
name|clasf
operator|.
name|getExpected
argument_list|()
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getExpected
argument_list|()
operator|!=
literal|null
condition|)
name|t2
operator|+=
name|clasf
operator|.
name|getExpected
argument_list|()
expr_stmt|;
if|if
condition|(
name|t2
operator|>
name|t1
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|t1
operator|>
name|t2
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colTotalOf
argument_list|(
name|MESSAGES
operator|.
name|fieldRequestedEnrollment
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hTotal
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sort
argument_list|(
name|hTotal
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|int
name|t1
init|=
literal|0
decl_stmt|,
name|t2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|)
block|{
case|case
name|ENRL
case|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|t1
operator|+=
name|clasf
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|t2
operator|+=
name|clasf
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
break|break;
case|case
name|LAST
case|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getLastLike
argument_list|()
operator|!=
literal|null
condition|)
name|t1
operator|+=
name|clasf
operator|.
name|getLastLike
argument_list|()
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getLastLike
argument_list|()
operator|!=
literal|null
condition|)
name|t2
operator|+=
name|clasf
operator|.
name|getLastLike
argument_list|()
expr_stmt|;
break|break;
case|case
name|PROJ
case|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getProjection
argument_list|()
operator|!=
literal|null
condition|)
name|t1
operator|+=
name|clasf
operator|.
name|getProjection
argument_list|()
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getProjection
argument_list|()
operator|!=
literal|null
condition|)
name|t2
operator|+=
name|clasf
operator|.
name|getProjection
argument_list|()
expr_stmt|;
break|break;
case|case
name|REQ
case|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|)
name|t1
operator|+=
name|clasf
operator|.
name|getRequested
argument_list|()
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|)
name|t2
operator|+=
name|clasf
operator|.
name|getRequested
argument_list|()
expr_stmt|;
break|break;
case|case
name|SSPROJ
case|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|a
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getSnapshotProjection
argument_list|()
operator|!=
literal|null
condition|)
name|t1
operator|+=
name|clasf
operator|.
name|getSnapshotProjection
argument_list|()
expr_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|b
operator|.
name|getClassifications
argument_list|()
control|)
if|if
condition|(
name|clasf
operator|.
name|getSnapshotProjection
argument_list|()
operator|!=
literal|null
condition|)
name|t2
operator|+=
name|clasf
operator|.
name|getSnapshotProjection
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|t2
operator|>
name|t1
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|t1
operator|>
name|t2
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|!=
name|Mode
operator|.
name|NONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colTotalOf
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|allCells
init|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|List
argument_list|<
name|MyCell
argument_list|>
argument_list|>
name|clasf2cells
init|=
operator|new
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|List
argument_list|<
name|MyCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumInterface
name|curriculum
range|:
name|curricula
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|acadClasf
range|:
name|academicClassifications
control|)
block|{
name|CurriculumClassificationInterface
name|clasf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|hasClassifications
argument_list|()
condition|)
for|for
control|(
name|CurriculumClassificationInterface
name|c
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|equals
argument_list|(
name|acadClasf
argument_list|)
condition|)
block|{
name|clasf
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|clasf
operator|==
literal|null
condition|)
block|{
name|clasf
operator|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
expr_stmt|;
name|clasf
operator|.
name|setAcademicClassification
argument_list|(
name|acadClasf
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|addClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
name|MyCell
name|c
init|=
operator|new
name|MyCell
argument_list|(
name|curriculum
argument_list|,
name|clasf
argument_list|)
decl_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|allCells
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|cellsThisClasf
init|=
name|clasf2cells
operator|.
name|get
argument_list|(
name|acadClasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellsThisClasf
operator|==
literal|null
condition|)
block|{
name|cellsThisClasf
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|clasf2cells
operator|.
name|put
argument_list|(
name|acadClasf
argument_list|,
name|cellsThisClasf
argument_list|)
expr_stmt|;
block|}
name|cellsThisClasf
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|MySumCell
argument_list|(
name|cells
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
name|curriculum
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Widget
argument_list|>
name|totals
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|totals
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|"Total"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|academicClassifications
control|)
block|{
name|totals
operator|.
name|add
argument_list|(
operator|new
name|MySumCell
argument_list|(
name|clasf2cells
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totals
operator|.
name|add
argument_list|(
operator|new
name|MySumCell
argument_list|(
name|allCells
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|totals
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|i
argument_list|,
name|iTable
operator|.
name|getCellCount
argument_list|(
name|i
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|i
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseOverListener
argument_list|(
operator|new
name|MouseOverListener
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|TableEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
parameter_list|)
block|{
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|iTable
operator|.
name|getCellCount
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseOutListener
argument_list|(
operator|new
name|MouseOutListener
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|TableEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
parameter_list|)
block|{
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|iTable
operator|.
name|getCellCount
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addDataChangedListener
argument_list|(
operator|new
name|DataChangedListener
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onDataInserted
parameter_list|(
name|DataChangedEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataMoved
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|>
name|events
parameter_list|)
block|{
for|for
control|(
name|DataChangedEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
range|:
name|events
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|iTable
operator|.
name|getCellCount
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataRemoved
parameter_list|(
name|DataChangedEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDataSorted
parameter_list|(
name|List
argument_list|<
name|DataChangedEvent
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|>
name|event
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hideEmptyColumns
argument_list|()
expr_stmt|;
block|}
specifier|private
interface|interface
name|Updatable
block|{
specifier|public
name|void
name|update
parameter_list|()
function_decl|;
block|}
specifier|private
class|class
name|MyCell
extends|extends
name|Composite
implements|implements
name|Updatable
implements|,
name|HasFocus
implements|,
name|HasHint
block|{
specifier|private
name|CurriculumInterface
name|iCurriculum
decl_stmt|;
specifier|private
name|CurriculumClassificationInterface
name|iClasf
decl_stmt|;
specifier|private
name|TextBox
name|iTextBox
decl_stmt|;
specifier|private
name|HTML
name|iRearLabel
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iPanel
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MySumCell
argument_list|>
name|iSums
init|=
operator|new
name|ArrayList
argument_list|<
name|MySumCell
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MyCell
parameter_list|(
name|CurriculumInterface
name|curriculum
parameter_list|,
name|CurriculumClassificationInterface
name|classification
parameter_list|)
block|{
name|iCurriculum
operator|=
name|curriculum
expr_stmt|;
name|iClasf
operator|=
name|classification
expr_stmt|;
name|iPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iTextBox
operator|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iClasf
operator|.
name|setExpected
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iClasf
operator|.
name|setExpected
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|iTextBox
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iClasf
operator|.
name|setExpected
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|MySumCell
name|sum
range|:
name|iSums
control|)
name|sum
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRearLabel
operator|=
operator|new
name|HTML
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setWidth
argument_list|(
literal|"50px"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iTextBox
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iTextBox
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iRearLabel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iRearLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getHint
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|propCurriculum
argument_list|()
operator|+
literal|" "
operator|+
name|iCurriculum
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|iCurriculum
operator|.
name|getName
argument_list|()
operator|+
literal|"<br>"
operator|+
name|MESSAGES
operator|.
name|propAcademicArea
argument_list|()
operator|+
literal|" "
operator|+
name|iCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|iCurriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<br>"
operator|+
operator|(
name|iCurriculum
operator|.
name|hasMajors
argument_list|()
condition|?
name|MESSAGES
operator|.
name|propMajor
argument_list|()
operator|+
literal|" "
operator|+
name|iCurriculum
operator|.
name|getCodeMajorNames
argument_list|(
literal|", "
argument_list|)
operator|+
literal|"<br>"
else|:
literal|""
operator|)
operator|+
name|MESSAGES
operator|.
name|propAcademicClassification
argument_list|()
operator|+
literal|" "
operator|+
operator|(
name|iClasf
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|?
name|iClasf
operator|.
name|getName
argument_list|()
else|:
name|iClasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getCode
argument_list|()
operator|)
operator|+
literal|" - "
operator|+
name|iClasf
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|iTextBox
operator|.
name|setText
argument_list|(
name|iClasf
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|iClasf
operator|.
name|getExpected
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
comment|// None
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENRL
case|:
comment|// Enrollment
if|if
condition|(
name|iClasf
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
operator|||
name|iClasf
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|iClasf
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAST
case|:
comment|// Last-like
if|if
condition|(
name|iClasf
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
operator|||
name|iClasf
operator|.
name|getLastLike
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|iClasf
operator|.
name|getLastLike
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROJ
case|:
comment|// Projection
if|if
condition|(
name|iClasf
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
operator|||
name|iClasf
operator|.
name|getProjection
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|iClasf
operator|.
name|getProjection
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|REQ
case|:
comment|// Course Requests
if|if
condition|(
name|iClasf
operator|.
name|getRequested
argument_list|()
operator|==
literal|null
operator|||
name|iClasf
operator|.
name|getRequested
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|iClasf
operator|.
name|getRequested
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|SSPROJ
case|:
comment|// Snapshot Projection
if|if
condition|(
name|iClasf
operator|.
name|getSnapshotProjection
argument_list|()
operator|==
literal|null
operator|||
name|iClasf
operator|.
name|getSnapshotProjection
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|iClasf
operator|.
name|getSnapshotProjection
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|public
name|CurriculumClassificationInterface
name|getClassification
parameter_list|()
block|{
return|return
name|iClasf
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
name|iRearLabel
operator|.
name|isVisible
argument_list|()
operator|||
name|iRearLabel
operator|.
name|getHTML
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|focus
parameter_list|()
block|{
name|iTextBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|selectAll
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
specifier|private
class|class
name|MySumCell
extends|extends
name|Composite
implements|implements
name|Updatable
block|{
specifier|private
name|HTML
name|iTextBox
decl_stmt|;
specifier|private
name|HTML
name|iRearLabel
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iPanel
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MyCell
argument_list|>
name|iCells
init|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MySumCell
parameter_list|(
name|List
argument_list|<
name|MyCell
argument_list|>
name|cells
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
name|cell
operator|.
name|iSums
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iTextBox
operator|=
operator|new
name|HTML
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|setWidth
argument_list|(
literal|"60px"
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iRearLabel
operator|=
operator|new
name|HTML
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setWidth
argument_list|(
literal|"55px"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iTextBox
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iTextBox
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iRearLabel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iRearLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|sumExpected
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|c
range|:
name|iCells
control|)
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getExpected
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getExpected
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|sumEnrollment
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|c
range|:
name|iCells
control|)
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getEnrollment
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|sumLastLike
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|c
range|:
name|iCells
control|)
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getLastLike
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getLastLike
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|sumProjection
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|c
range|:
name|iCells
control|)
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getProjection
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getProjection
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|sumRequested
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|c
range|:
name|iCells
control|)
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getRequested
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getRequested
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|int
name|sumSnapshotProjection
parameter_list|()
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|c
range|:
name|iCells
control|)
if|if
condition|(
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getSnapshotProjection
argument_list|()
operator|!=
literal|null
condition|)
name|ret
operator|+=
name|c
operator|.
name|getClassification
argument_list|()
operator|.
name|getSnapshotProjection
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|iTextBox
operator|.
name|setHTML
argument_list|(
name|sumExpected
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|sumExpected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
comment|// None
name|iRearLabel
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENRL
case|:
comment|// Enrollment
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|sumEnrollment
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|sumEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|LAST
case|:
comment|// Last-like
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|sumLastLike
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|sumLastLike
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|PROJ
case|:
comment|// Projection
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|sumProjection
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|sumProjection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|REQ
case|:
comment|// Course Requests
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|sumRequested
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|sumRequested
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|SSPROJ
case|:
comment|// Snapshot Projection
name|iRearLabel
operator|.
name|setHTML
argument_list|(
name|sumSnapshotProjection
argument_list|()
operator|==
literal|0
condition|?
literal|""
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|sumSnapshotProjection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasHiddenColumn
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
literal|0
argument_list|)
operator|-
literal|1
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isColumnEmpty
parameter_list|(
name|int
name|col
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|MyCell
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
name|col
argument_list|)
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasEmptyColumns
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
literal|0
argument_list|)
operator|-
literal|1
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|iTable
operator|.
name|isColumnVisible
argument_list|(
name|c
argument_list|)
operator|&&
name|isColumnEmpty
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|hideEmptyColumns
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
literal|0
argument_list|)
operator|-
literal|1
condition|;
name|c
operator|++
control|)
block|{
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|c
argument_list|,
operator|!
name|isColumnEmpty
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|showAllColumns
parameter_list|()
block|{
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
literal|0
argument_list|)
operator|-
literal|1
condition|;
name|c
operator|++
control|)
block|{
name|iTable
operator|.
name|setColumnVisible
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EditFinishedEvent
block|{ 		 	}
specifier|public
specifier|static
interface|interface
name|EditFinishedHandler
block|{
specifier|public
name|void
name|onBack
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
function_decl|;
specifier|public
name|void
name|onSave
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addEditFinishedHandler
parameter_list|(
name|EditFinishedHandler
name|h
parameter_list|)
block|{
name|iEditFinishedHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

