begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
operator|.
name|CurriculaClassifications
operator|.
name|NameChangedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelectionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelectionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HintProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumCourseGroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumCourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumStudentsInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|FontStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|HasOpenHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueBoxBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculaCourses
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|String
argument_list|>
name|iTable
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|NumberFormat
name|NF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"##0.0"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Mode
block|{
name|LAST
argument_list|(
name|MESSAGES
operator|.
name|abbvLastLikeEnrollment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|fieldLastLikeEnrollment
argument_list|()
argument_list|)
block|,
name|PROJ
argument_list|(
name|MESSAGES
operator|.
name|abbvProjectedByRule
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|fieldProjectedByRule
argument_list|()
argument_list|)
block|,
name|ENRL
argument_list|(
name|MESSAGES
operator|.
name|abbvCurrentEnrollment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|fieldCurrentEnrollment
argument_list|()
argument_list|)
block|,
name|REQ
argument_list|(
name|MESSAGES
operator|.
name|abbvCourseRequests
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|fieldCourseRequests
argument_list|()
argument_list|)
block|,
name|NONE
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|"NONE"
argument_list|)
block|;
specifier|private
name|String
name|iAbbv
decl_stmt|,
name|iName
decl_stmt|;
name|Mode
parameter_list|(
name|String
name|abbv
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|iAbbv
operator|=
name|abbv
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getAbbv
parameter_list|()
block|{
return|return
name|iAbbv
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Group
argument_list|>
name|iGroups
init|=
operator|new
name|ArrayList
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|CurriculaClassifications
name|iClassifications
decl_stmt|;
specifier|private
name|CourseSelectionHandler
name|iCourseChangedHandler
init|=
literal|null
decl_stmt|;
specifier|private
name|GroupDialogBox
name|iNewGroupDialog
decl_stmt|;
specifier|private
name|boolean
name|iEditable
init|=
literal|true
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iBgColors
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|sColors
init|=
operator|new
name|String
index|[]
block|{
literal|"red"
block|,
literal|"blue"
block|,
literal|"green"
block|,
literal|"orange"
block|,
literal|"yellow"
block|,
literal|"pink"
block|,
literal|"purple"
block|,
literal|"teal"
block|,
literal|"darkpurple"
block|,
literal|"steelblue"
block|,
literal|"lightblue"
block|,
literal|"lightgreen"
block|,
literal|"yellowgreen"
block|,
literal|"redorange"
block|,
literal|"lightbrown"
block|,
literal|"lightpurple"
block|,
literal|"grey"
block|,
literal|"bluegrey"
block|,
literal|"lightteal"
block|,
literal|"yellowgrey"
block|,
literal|"brown"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|sBgColors
init|=
operator|new
name|String
index|[]
block|{
literal|"#f0fff0"
block|,
comment|//Honeydew
literal|"#f0f8ff"
block|,
comment|//AliceBlue
literal|"#faebd7"
block|,
comment|//AntiqueWhite
literal|"#f0ffff"
block|,
comment|//Azure
literal|"#f5f5dc"
block|,
comment|//Beige
literal|"#fff0f5"
block|,
comment|//LavenderBlush
literal|"#f5fffa"
block|,
comment|//MintCream
literal|"#faf0e6"
block|,
comment|//Linen
literal|"#ffe4e1"
block|,
comment|//MistyRose
literal|"#fffafa"
block|,
comment|//Snow
literal|"#fdf5e6"
block|,
comment|//OldLace
literal|"#f8f8ff"
block|,
comment|//GhostWhite
literal|"#f5f5f5"
block|,
comment|//WhiteSmoke
literal|"#fff5ee"
block|,
comment|//SeeShell
literal|"#fffaf0"
block|,
comment|//FloralWhite
literal|"#fffff0"
block|,
comment|//Ivory
block|}
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|String
argument_list|>
name|iVisibleCourses
init|=
literal|null
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|iLastCourses
init|=
literal|null
decl_stmt|;
specifier|public
name|String
name|getBackgroundColor
parameter_list|(
name|String
name|template
parameter_list|)
block|{
name|String
name|color
init|=
name|iBgColors
operator|.
name|get
argument_list|(
name|template
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|==
literal|null
condition|)
block|{
name|color
operator|=
name|sBgColors
index|[
name|iBgColors
operator|.
name|size
argument_list|()
operator|%
name|sBgColors
operator|.
name|length
index|]
expr_stmt|;
name|iBgColors
operator|.
name|put
argument_list|(
name|template
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
return|return
name|color
return|;
block|}
specifier|public
name|CurriculaCourses
parameter_list|()
block|{
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|addStyleName
argument_list|(
literal|"unitime-CurriculaCourseProjections"
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iCourseChangedHandler
operator|=
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
name|CurriculumStudentsInterface
index|[]
name|c
init|=
operator|(
name|iLastCourses
operator|==
literal|null
condition|?
literal|null
else|:
name|iLastCourses
operator|.
name|get
argument_list|(
name|event
operator|.
name|getCourse
argument_list|()
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
name|setEnrollmentAndLastLike
argument_list|(
name|event
operator|.
name|getCourse
argument_list|()
argument_list|,
name|col
argument_list|,
name|c
operator|==
literal|null
operator|||
name|c
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|c
index|[
name|col
index|]
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|c
operator|==
literal|null
operator|||
name|c
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|c
index|[
name|col
index|]
operator|.
name|getLastLike
argument_list|()
argument_list|,
name|c
operator|==
literal|null
operator|||
name|c
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|c
index|[
name|col
index|]
operator|.
name|getProjection
argument_list|()
argument_list|,
name|c
operator|==
literal|null
operator|||
name|c
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|c
index|[
name|col
index|]
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Element
name|td
init|=
operator|(
operator|(
name|Widget
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
while|while
condition|(
name|td
operator|!=
literal|null
operator|&&
operator|!
name|td
operator|.
name|getPropertyString
argument_list|(
literal|"tagName"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"td"
argument_list|)
condition|)
block|{
name|td
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
expr_stmt|;
block|}
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getCourse
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|+
literal|1
operator|==
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|&&
operator|!
name|event
operator|.
name|getCourse
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|addBlankLine
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iNewGroupDialog
operator|=
operator|new
name|GroupDialogBox
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setHintProvider
argument_list|(
operator|new
name|HintProvider
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Widget
name|getHint
parameter_list|(
name|TableEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|canShowStudentsTable
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
condition|)
return|return
literal|null
return|;
name|StudentsTable
name|studentsTable
init|=
operator|new
name|StudentsTable
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|studentsTable
operator|.
name|canShow
argument_list|()
condition|)
return|return
name|studentsTable
return|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|link
parameter_list|(
name|CurriculaClassifications
name|cx
parameter_list|)
block|{
name|iClassifications
operator|=
name|cx
expr_stmt|;
name|iClassifications
operator|.
name|addExpectedChangedHandler
argument_list|(
operator|new
name|CurriculaClassifications
operator|.
name|ExpectedChangedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|expectedChanged
parameter_list|(
name|CurriculaClassifications
operator|.
name|ExpectedChangedEvent
name|e
parameter_list|)
block|{
name|setVisible
argument_list|(
name|e
operator|.
name|getColumn
argument_list|()
argument_list|,
name|e
operator|.
name|getExpected
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getExpected
argument_list|()
operator|!=
literal|null
condition|)
name|CurriculaCourses
operator|.
name|this
operator|.
name|expectedChanged
argument_list|(
name|e
operator|.
name|getColumn
argument_list|()
argument_list|,
name|e
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iClassifications
operator|.
name|addNameChangedHandler
argument_list|(
operator|new
name|CurriculaClassifications
operator|.
name|NameChangedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|nameChanged
parameter_list|(
name|NameChangedEvent
name|e
parameter_list|)
block|{
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|CurriculumInterface
name|curriculum
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|iEditable
operator|=
name|curriculum
operator|.
name|isEditable
argument_list|()
operator|&&
name|editable
expr_stmt|;
name|iTable
operator|.
name|setAllowSelection
argument_list|(
name|iEditable
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
comment|// iTable.clear(true);
name|iGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// header
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|hGroup
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Operation
argument_list|>
name|getOperations
parameter_list|()
block|{
name|List
argument_list|<
name|Operation
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculaCourses
operator|.
name|Group
name|g
range|:
name|getGroups
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|g
operator|.
name|getOperation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|addAll
argument_list|(
name|super
operator|.
name|getOperations
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hGroup
argument_list|)
expr_stmt|;
name|hGroup
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opNewGroup
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|iNewGroupDialog
operator|.
name|openNew
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hGroup
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sortByRow
argument_list|(
name|hGroup
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
return|return
name|compareTwoRows
argument_list|(
literal|0
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hCourse
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCourse
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|showAllCourses
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opShowAllCourses
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
operator|!
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAllCourses
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|String
name|course
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isEmpty
argument_list|()
operator|&&
name|row
operator|+
literal|1
operator|==
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
name|iTable
operator|.
name|setSelected
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|iEditable
operator|||
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|==
literal|0
operator|||
name|iVisibleCourses
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
operator|&&
operator|!
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|isEnabled
argument_list|()
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opRemoveSelectedCourses
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
operator|&&
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setPercent
argument_list|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opShowNumbers
argument_list|()
else|:
name|MESSAGES
operator|.
name|opShowPercentages
argument_list|()
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Operation
argument_list|>
name|modeOps
init|=
operator|new
name|ArrayList
argument_list|<
name|Operation
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Mode
name|m
range|:
name|Mode
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|m
operator|==
name|Mode
operator|.
name|NONE
condition|)
continue|continue;
name|modeOps
operator|.
name|add
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setMode
argument_list|(
name|m
operator|==
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|?
name|Mode
operator|.
name|NONE
else|:
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|m
operator|==
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Operation
name|op
range|:
name|modeOps
control|)
name|hCourse
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|updateEnrollmentsAndLastLike
argument_list|(
name|iLastCourses
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iLastCourses
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opShowEmptyCourses
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
comment|// boolean selectedOnly = (iTable.getSelectedCount()> 0);
name|rows
label|:
for|for
control|(
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>
literal|0
condition|;
name|row
operator|--
control|)
block|{
name|String
name|course
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isEmpty
argument_list|()
operator|&&
name|row
operator|+
literal|1
operator|==
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|)
continue|continue;
comment|/* 					if (selectedOnly&& !iTable.isSelected(row)) { 						iTable.setSelected(row, false); 						continue; 					} 					*/
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|int
name|x
init|=
literal|2
operator|+
literal|2
operator|*
name|c
decl_stmt|;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|getDisplayedShare
argument_list|()
operator|!=
literal|null
condition|)
continue|continue
name|rows
continue|;
block|}
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|iLastCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opHideEmptyCourses
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|int
name|x
init|=
literal|2
operator|+
literal|2
operator|*
name|c
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|text
operator|.
name|setShare
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opClearRequestedEnrollmentAllClassificationsSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opClearRequestedEnrollmentAllClassifications
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|int
name|x
init|=
literal|2
operator|+
literal|2
operator|*
name|c
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getLastLikePercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getLastLike
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|LAST
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyLastLikeToRequestedAllClassificationsSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyLastLikeToRequestedAllClassifications
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|int
name|x
init|=
literal|2
operator|+
literal|2
operator|*
name|c
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getEnrollmentPercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|ENRL
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyCurrentToRequestedAllClassificationsSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyCurrentToRequestedAllClassifications
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|int
name|x
init|=
literal|2
operator|+
literal|2
operator|*
name|c
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getRequestedPercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|REQ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyCourseRequestsToRequestedAllClassificationsSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyCourseRequestsToRequestedAllClassifications
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|int
name|x
init|=
literal|2
operator|+
literal|2
operator|*
name|c
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|x
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getProjectionPercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getProjection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|PROJ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyProjectionToRequestedAllClassificationsSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyProjectionToRequestedAllClassifications
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sortByRow
argument_list|(
name|hCourse
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
return|return
name|compareTwoRows
argument_list|(
literal|1
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|OpenHandler
argument_list|<
name|PopupPanel
argument_list|>
name|fx
init|=
operator|new
name|OpenHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|iTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|int
name|col
init|=
literal|2
decl_stmt|;
for|for
control|(
specifier|final
name|AcademicClassificationInterface
name|clasf
range|:
name|iClassifications
operator|.
name|getClassifications
argument_list|()
control|)
block|{
specifier|final
name|UniTimeTableHeader
name|hExp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hExp
argument_list|)
expr_stmt|;
specifier|final
name|int
name|expCol
init|=
name|col
operator|++
decl_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
operator|!
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
name|expCol
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
operator|&&
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setPercent
argument_list|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opShowNumbers
argument_list|()
else|:
name|MESSAGES
operator|.
name|opShowPercentages
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Operation
name|op
range|:
name|modeOps
control|)
name|hExp
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
argument_list|)
decl_stmt|;
name|text
operator|.
name|setShare
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opClearRequestedEnrollmentSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opClearRequestedEnrollment
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getLastLikePercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getLastLike
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|LAST
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyLastLikeToRequestedSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyLastLikeToRequested
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getEnrollmentPercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|ENRL
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyCurrentToRequestedSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyCurrentToRequested
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getRequestedPercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|REQ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyCourseRequestsToRequestedSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyCourseRequestsToRequested
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|selectedOnly
init|=
operator|(
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
operator|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|selectedOnly
operator|&&
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
argument_list|)
decl_stmt|;
name|EnrollmentLabel
name|label
init|=
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|expCol
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
name|text
operator|.
name|setShare
argument_list|(
name|label
operator|.
name|getProjectionPercent
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|text
operator|.
name|setExpected
argument_list|(
name|label
operator|.
name|getProjection
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
operator|&&
name|iEditable
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|PROJ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
condition|?
name|MESSAGES
operator|.
name|opCopyProjectionToRequestedSelectedCoursesOnly
argument_list|()
else|:
name|MESSAGES
operator|.
name|opCopyProjectionToRequested
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hExp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sortByRow
argument_list|(
name|hExp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
return|return
name|compareTwoRows
argument_list|(
name|expCol
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hCmp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCmp
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cmpCol
init|=
name|col
operator|++
decl_stmt|;
name|hCmp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
operator|!
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
name|cmpCol
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCmp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
operator|&&
name|iTable
operator|.
name|getSelectedCount
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hCmp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setPercent
argument_list|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|?
name|MESSAGES
operator|.
name|opShowNumbers
argument_list|()
else|:
name|MESSAGES
operator|.
name|opShowPercentages
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Operation
name|op
range|:
name|modeOps
control|)
name|hCmp
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|hCmp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iVisibleCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iTable
operator|.
name|sortByRow
argument_list|(
name|hCmp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Integer
name|a
parameter_list|,
name|Integer
name|b
parameter_list|)
block|{
return|return
name|compareTwoRows
argument_list|(
name|cmpCol
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
comment|// body
name|iBgColors
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseInterface
name|course
range|:
name|curriculum
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|hp
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|hasGroups
argument_list|()
condition|)
block|{
for|for
control|(
name|CurriculumCourseGroupInterface
name|g
range|:
name|course
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|Group
name|gr
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Group
name|x
range|:
name|iGroups
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|gr
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|gr
operator|==
literal|null
condition|)
block|{
name|gr
operator|=
operator|new
name|Group
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|g
operator|.
name|getType
argument_list|()
argument_list|,
name|g
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|setColor
argument_list|(
name|g
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|colors
label|:
for|for
control|(
name|String
name|c
range|:
name|sColors
control|)
block|{
for|for
control|(
name|Group
name|x
range|:
name|iGroups
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getColor
argument_list|()
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
continue|continue
name|colors
continue|;
block|}
name|gr
operator|.
name|setColor
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|gr
operator|.
name|getColor
argument_list|()
operator|==
literal|null
condition|)
name|gr
operator|.
name|setColor
argument_list|(
name|sColors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
name|iGroups
operator|.
name|add
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
name|hp
operator|.
name|add
argument_list|(
name|gr
operator|.
name|cloneGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|CurriculaCourseSelectionBox
name|cx
init|=
operator|new
name|CurriculaCourseSelectionBox
argument_list|()
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setValue
argument_list|(
name|course
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setWidth
argument_list|(
literal|"130px"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|getCourseFinder
argument_list|()
operator|instanceof
name|HasOpenHandlers
condition|)
operator|(
operator|(
name|HasOpenHandlers
argument_list|<
name|PopupPanel
argument_list|>
operator|)
name|cx
operator|.
name|getCourseFinder
argument_list|()
operator|)
operator|.
name|addOpenHandler
argument_list|(
name|fx
argument_list|)
expr_stmt|;
name|cx
operator|.
name|addCourseSelectionHandler
argument_list|(
name|iCourseChangedHandler
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iEditable
operator|||
name|course
operator|.
name|hasDefaultShare
argument_list|()
condition|)
name|cx
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cx
argument_list|)
expr_stmt|;
for|for
control|(
name|col
operator|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
name|CurriculumCourseInterface
name|cci
init|=
name|course
operator|.
name|getCurriculumCourse
argument_list|(
name|col
argument_list|)
decl_stmt|;
name|ShareTextBox
name|ex
init|=
operator|new
name|ShareTextBox
argument_list|(
name|col
argument_list|,
name|cci
operator|==
literal|null
condition|?
literal|null
else|:
name|cci
operator|.
name|hasShare
argument_list|()
condition|?
name|cci
operator|.
name|getShare
argument_list|()
else|:
literal|null
argument_list|,
name|cci
operator|==
literal|null
condition|?
literal|null
else|:
name|cci
operator|.
name|getDefaultShare
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iEditable
condition|)
name|ex
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cci
operator|!=
literal|null
operator|&&
name|cci
operator|.
name|hasTemplates
argument_list|()
operator|&&
name|cci
operator|.
name|getDefaultShare
argument_list|()
operator|!=
literal|null
condition|)
name|ex
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintDefaultPercentShare
argument_list|(
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|cci
operator|.
name|getDefaultShare
argument_list|()
argument_list|)
operator|+
literal|"%"
argument_list|,
name|ToolBox
operator|.
name|toString
argument_list|(
name|cci
operator|.
name|getTemplates
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|EnrollmentLabel
name|note
init|=
operator|new
name|EnrollmentLabel
argument_list|(
name|col
argument_list|,
name|cci
operator|==
literal|null
condition|?
literal|null
else|:
name|cci
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|cci
operator|==
literal|null
condition|?
literal|null
else|:
name|cci
operator|.
name|getLastLike
argument_list|()
argument_list|,
name|cci
operator|==
literal|null
condition|?
literal|null
else|:
name|cci
operator|.
name|getProjection
argument_list|()
argument_list|,
name|cci
operator|==
literal|null
condition|?
literal|null
else|:
name|cci
operator|.
name|getRequested
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|int
name|row
init|=
name|iTable
operator|.
name|addRow
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|hasTemplate
argument_list|()
condition|)
block|{
name|String
name|color
init|=
name|getBackgroundColor
argument_list|(
name|course
operator|.
name|getTemplate
argument_list|()
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintTakenFromTemplate
argument_list|(
name|course
operator|.
name|getTemplate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|iEditable
condition|)
name|addBlankLine
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|saveCurriculum
parameter_list|(
name|CurriculumInterface
name|c
parameter_list|)
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroupInterface
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroupInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|hasCourses
argument_list|()
condition|)
name|c
operator|.
name|getCourses
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|String
name|course
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
condition|)
block|{
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|setError
argument_list|(
name|MESSAGES
operator|.
name|errorDuplicateCourse
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
name|CourseInterface
name|cr
init|=
operator|new
name|CourseInterface
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setCourseName
argument_list|(
name|course
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Float
name|share
init|=
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|i
argument_list|)
operator|)
operator|.
name|getShare
argument_list|()
decl_stmt|;
if|if
condition|(
name|share
operator|==
literal|null
condition|)
continue|continue;
name|Integer
name|lastLike
init|=
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|i
argument_list|)
operator|)
operator|.
name|iLastLike
decl_stmt|;
name|CurriculumCourseInterface
name|cx
init|=
operator|new
name|CurriculumCourseInterface
argument_list|()
decl_stmt|;
name|cx
operator|.
name|setShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setLastLike
argument_list|(
name|lastLike
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setCurriculumClassificationId
argument_list|(
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCurriculumCourse
argument_list|(
name|i
argument_list|,
name|cx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cr
operator|.
name|hasCurriculumCourses
argument_list|()
condition|)
continue|continue;
name|HorizontalPanel
name|hp
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hp
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g
init|=
operator|(
name|Group
operator|)
name|hp
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CurriculumCourseGroupInterface
name|gr
init|=
name|groups
operator|.
name|get
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|==
literal|null
condition|)
block|{
name|gr
operator|=
operator|new
name|CurriculumCourseGroupInterface
argument_list|()
expr_stmt|;
name|gr
operator|.
name|setName
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setType
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setEditable
argument_list|(
name|g
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setColor
argument_list|(
name|g
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|gr
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|addGroup
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
name|c
operator|.
name|addCourse
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|boolean
name|hasDefaultShare
parameter_list|(
name|int
name|row
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Float
name|share
init|=
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|i
argument_list|)
operator|)
operator|.
name|getDefaultShare
argument_list|()
decl_stmt|;
if|if
condition|(
name|share
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|populateTemplate
parameter_list|(
name|CurriculumInterface
name|c
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|courses
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroupInterface
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumCourseGroupInterface
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|hasCourses
argument_list|()
condition|)
for|for
control|(
name|CourseInterface
name|cr
range|:
name|c
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|cr
operator|.
name|hasGroups
argument_list|()
condition|)
for|for
control|(
name|CurriculumCourseGroupInterface
name|g
range|:
name|cr
operator|.
name|getGroups
argument_list|()
control|)
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|g
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|String
name|course
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
condition|)
continue|continue;
name|CourseInterface
name|cr
init|=
name|c
operator|.
name|getCourse
argument_list|(
name|course
argument_list|)
decl_stmt|;
if|if
condition|(
name|cr
operator|==
literal|null
condition|)
block|{
name|cr
operator|=
operator|new
name|CourseInterface
argument_list|()
expr_stmt|;
name|cr
operator|.
name|setCourseName
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|c
operator|.
name|addCourse
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasShare
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Float
name|share
init|=
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|i
argument_list|)
operator|)
operator|.
name|getShare
argument_list|()
decl_stmt|;
if|if
condition|(
name|share
operator|==
literal|null
condition|)
continue|continue;
name|CurriculumCourseInterface
name|cx
init|=
name|cr
operator|.
name|getCurriculumCourse
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|cx
operator|==
literal|null
condition|)
block|{
name|cx
operator|=
operator|new
name|CurriculumCourseInterface
argument_list|()
expr_stmt|;
name|cx
operator|.
name|setCurriculumClassificationId
argument_list|(
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setCurriculumCourse
argument_list|(
name|i
argument_list|,
name|cx
argument_list|)
expr_stmt|;
block|}
name|cx
operator|.
name|setShare
argument_list|(
name|share
argument_list|)
expr_stmt|;
name|hasShare
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cr
operator|.
name|hasCurriculumCourses
argument_list|()
operator|||
operator|!
name|hasShare
condition|)
continue|continue;
name|HorizontalPanel
name|hp
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hp
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|g
init|=
operator|(
name|Group
operator|)
name|hp
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CurriculumCourseGroupInterface
name|gr
init|=
name|groups
operator|.
name|get
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|gr
operator|==
literal|null
condition|)
block|{
name|gr
operator|=
operator|new
name|CurriculumCourseGroupInterface
argument_list|()
expr_stmt|;
name|gr
operator|.
name|setName
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setType
argument_list|(
name|g
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setColor
argument_list|(
name|g
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setEditable
argument_list|(
name|g
operator|.
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|,
name|gr
argument_list|)
expr_stmt|;
block|}
name|cr
operator|.
name|addGroup
argument_list|(
name|gr
argument_list|)
expr_stmt|;
block|}
block|}
name|populate
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|i
argument_list|)
operator|==
literal|null
condition|)
name|setVisible
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addBlankLine
parameter_list|()
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|hp
argument_list|)
expr_stmt|;
name|CurriculaCourseSelectionBox
name|cx
init|=
operator|new
name|CurriculaCourseSelectionBox
argument_list|()
decl_stmt|;
name|cx
operator|.
name|setWidth
argument_list|(
literal|"130px"
argument_list|)
expr_stmt|;
name|cx
operator|.
name|addCourseSelectionHandler
argument_list|(
name|iCourseChangedHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|cx
operator|.
name|getCourseFinder
argument_list|()
operator|instanceof
name|HasOpenHandlers
condition|)
operator|(
operator|(
name|HasOpenHandlers
argument_list|<
name|PopupPanel
argument_list|>
operator|)
name|cx
operator|.
name|getCourseFinder
argument_list|()
operator|)
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|iTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iEditable
condition|)
name|cx
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cx
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
name|ShareTextBox
name|ex
init|=
operator|new
name|ShareTextBox
argument_list|(
name|col
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|iEditable
condition|)
name|ex
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
name|EnrollmentLabel
name|note
init|=
operator|new
name|EnrollmentLabel
argument_list|(
name|col
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|note
argument_list|)
expr_stmt|;
block|}
name|int
name|row
init|=
name|iTable
operator|.
name|addRow
argument_list|(
literal|""
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iVisibleCourses
operator|!=
literal|null
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|line
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
if|if
condition|(
operator|!
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
literal|0
argument_list|,
name|col
argument_list|)
condition|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|compareTwoRows
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|r0
parameter_list|,
name|int
name|r1
parameter_list|)
block|{
name|boolean
name|e1
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r0
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|boolean
name|e2
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r1
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|e1
operator|&&
operator|!
name|e2
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|&&
operator|!
name|e1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|column
operator|==
literal|0
condition|)
block|{
name|HorizontalPanel
name|p0
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|HorizontalPanel
name|p1
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TreeSet
argument_list|<
name|Group
argument_list|>
name|g0
init|=
operator|new
name|TreeSet
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
name|TreeSet
argument_list|<
name|Group
argument_list|>
name|g1
init|=
operator|new
name|TreeSet
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p0
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|g0
operator|.
name|add
argument_list|(
operator|(
name|Group
operator|)
name|p0
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p1
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|g1
operator|.
name|add
argument_list|(
operator|(
name|Group
operator|)
name|p1
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|i0
init|=
name|g0
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Group
argument_list|>
name|i1
init|=
name|g1
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i0
operator|.
name|hasNext
argument_list|()
operator|||
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|i0
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|i0
operator|.
name|next
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i1
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
name|compareTwoRows
argument_list|(
literal|2
argument_list|,
name|r0
argument_list|,
name|r1
argument_list|)
return|;
block|}
if|if
condition|(
name|column
operator|==
literal|1
condition|)
return|return
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r0
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r1
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|column
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|Float
name|s0
init|=
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r0
argument_list|,
name|column
argument_list|)
operator|)
operator|.
name|getDisplayedShare
argument_list|()
decl_stmt|;
name|Float
name|s1
init|=
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r1
argument_list|,
name|column
argument_list|)
operator|)
operator|.
name|getDisplayedShare
argument_list|()
decl_stmt|;
return|return
operator|-
operator|(
name|s0
operator|==
literal|null
condition|?
operator|new
name|Float
argument_list|(
literal|0
argument_list|)
else|:
name|s0
operator|)
operator|.
name|compareTo
argument_list|(
name|s1
operator|==
literal|null
condition|?
operator|new
name|Float
argument_list|(
literal|0
argument_list|)
else|:
name|s1
argument_list|)
return|;
block|}
else|else
block|{
name|EnrollmentLabel
name|l0
init|=
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r0
argument_list|,
name|column
argument_list|)
operator|)
decl_stmt|;
name|EnrollmentLabel
name|l1
init|=
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r1
argument_list|,
name|column
argument_list|)
operator|)
decl_stmt|;
name|Mode
name|mode
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
decl_stmt|;
name|Integer
name|i0
init|=
operator|(
name|mode
operator|==
name|Mode
operator|.
name|ENRL
condition|?
name|l0
operator|.
name|iEnrollment
else|:
name|mode
operator|==
name|Mode
operator|.
name|LAST
condition|?
name|l0
operator|.
name|iLastLike
else|:
name|mode
operator|==
name|Mode
operator|.
name|REQ
condition|?
name|l0
operator|.
name|iRequested
else|:
name|l0
operator|.
name|iProjection
operator|)
decl_stmt|;
name|Integer
name|i1
init|=
operator|(
name|mode
operator|==
name|Mode
operator|.
name|ENRL
condition|?
name|l1
operator|.
name|iEnrollment
else|:
name|mode
operator|==
name|Mode
operator|.
name|LAST
condition|?
name|l1
operator|.
name|iLastLike
else|:
name|mode
operator|==
name|Mode
operator|.
name|REQ
condition|?
name|l0
operator|.
name|iRequested
else|:
name|l1
operator|.
name|iProjection
operator|)
decl_stmt|;
return|return
operator|-
operator|(
name|i0
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|i0
operator|)
operator|.
name|compareTo
argument_list|(
name|i1
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|i1
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|getCourseIndex
parameter_list|(
name|String
name|course
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|String
name|c
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
return|return
name|row
operator|-
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|setEnrollmentAndLastLike
parameter_list|(
name|String
name|course
parameter_list|,
name|int
name|clasf
parameter_list|,
name|Integer
name|enrollment
parameter_list|,
name|Integer
name|lastLike
parameter_list|,
name|Integer
name|projection
parameter_list|,
name|Integer
name|requested
parameter_list|)
block|{
name|boolean
name|changed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|String
name|c
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|course
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
continue|continue;
name|EnrollmentLabel
name|note
init|=
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|clasf
argument_list|)
operator|)
decl_stmt|;
name|note
operator|.
name|iEnrollment
operator|=
name|enrollment
expr_stmt|;
name|note
operator|.
name|iLastLike
operator|=
name|lastLike
expr_stmt|;
name|note
operator|.
name|iProjection
operator|=
name|projection
expr_stmt|;
name|note
operator|.
name|iRequested
operator|=
name|requested
expr_stmt|;
name|note
operator|.
name|update
argument_list|()
expr_stmt|;
name|changed
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|changed
return|;
block|}
specifier|public
name|void
name|updateEnrollmentsAndLastLike
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|courses
parameter_list|,
name|boolean
name|showEmptyCourses
parameter_list|)
block|{
name|iLastCourses
operator|=
name|courses
expr_stmt|;
name|rows
label|:
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
name|ShareTextBox
name|text
init|=
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|text
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|++
expr_stmt|;
continue|continue
name|rows
continue|;
block|}
block|}
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|HashSet
argument_list|<
name|String
argument_list|>
name|updated
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|String
name|c
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|updated
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|CurriculumStudentsInterface
index|[]
name|cc
init|=
name|courses
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
name|EnrollmentLabel
name|note
init|=
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
decl_stmt|;
name|note
operator|.
name|iEnrollment
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getEnrollment
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|iLastLike
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getLastLike
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|iProjection
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getProjection
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|iRequested
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getRequested
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
name|CurriculumStudentsInterface
index|[]
name|total
init|=
name|courses
operator|.
name|get
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|==
literal|null
condition|)
return|return;
name|int
name|totalEnrollment
init|=
literal|0
decl_stmt|,
name|totalLastLike
init|=
literal|0
decl_stmt|,
name|totalRequested
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|total
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|totalEnrollment
operator|+=
name|total
index|[
name|i
index|]
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
if|if
condition|(
name|total
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|totalLastLike
operator|+=
name|total
index|[
name|i
index|]
operator|.
name|getLastLike
argument_list|()
expr_stmt|;
if|if
condition|(
name|total
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|totalRequested
operator|+=
name|total
index|[
name|i
index|]
operator|.
name|getRequested
argument_list|()
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
argument_list|>
name|include
init|=
operator|new
name|TreeSet
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
argument_list|>
argument_list|()
block|{
comment|/* 			private int highestClassification(CurriculumStudentsInterface[] a) { 				int best = a.length; 				int bestVal = -1; 				for (int i = 0; i< a.length; i++) { 					if (a[i] == null) continue; 					if (a[i].getEnrollment()> bestVal) { 						bestVal = a[i].getEnrollment(); best = i; 					} 					if (a[i].getLastLike()> bestVal) { 						bestVal = a[i].getLastLike(); best = i; 					} 				} 				return best; 			} 			*/
specifier|private
name|int
name|firstClassification
parameter_list|(
name|CurriculumStudentsInterface
index|[]
name|a
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|a
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|getEnrollment
argument_list|()
operator|>
literal|0
condition|)
return|return
name|i
return|;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|getLastLike
argument_list|()
operator|>
literal|0
condition|)
return|return
name|i
return|;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|getProjection
argument_list|()
operator|>
literal|0
condition|)
return|return
name|i
return|;
if|if
condition|(
name|a
index|[
name|i
index|]
operator|.
name|getRequested
argument_list|()
operator|>
literal|0
condition|)
return|return
name|i
return|;
block|}
return|return
name|a
operator|.
name|length
return|;
block|}
specifier|public
name|int
name|compare
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|c0
parameter_list|,
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|c1
parameter_list|)
block|{
comment|/* 				int a0 = highestClassification(c0.getValue()); 				int a1 = highestClassification(c1.getValue()); 				if (a0< a1) return -1; 				if (a0> a1) return 1; 				if (a0< c0.getValue().length) { 					int v0 = (c0.getValue()[a0][0] == null ? 0 : c0.getValue()[a0][0]); 					int v1 = (c1.getValue()[a0][0] == null ? 0 : c1.getValue()[a0][0]); 					int w0 = (c0.getValue()[a0][1] == null ? 0 : c0.getValue()[a0][1]); 					int w1 = (c1.getValue()[a0][1] == null ? 0 : c1.getValue()[a0][1]); 					if (v0< v1 || w0< w1) return -1; 					if (v0> v1 || w0> w1) return 1; 				} 				*/
name|int
name|b0
init|=
name|firstClassification
argument_list|(
name|c0
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|b1
init|=
name|firstClassification
argument_list|(
name|c1
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|b0
operator|<
name|b1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|b0
operator|>
name|b1
condition|)
return|return
literal|1
return|;
while|while
condition|(
name|b0
operator|<
name|c0
operator|.
name|getValue
argument_list|()
operator|.
name|length
condition|)
block|{
name|int
name|v0
init|=
operator|(
name|c0
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|c0
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|.
name|getEnrollment
argument_list|()
operator|)
decl_stmt|;
name|int
name|v1
init|=
operator|(
name|c1
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|c1
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|.
name|getEnrollment
argument_list|()
operator|)
decl_stmt|;
name|int
name|w0
init|=
operator|(
name|c0
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|c0
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|.
name|getLastLike
argument_list|()
operator|)
decl_stmt|;
name|int
name|w1
init|=
operator|(
name|c1
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|c1
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|.
name|getLastLike
argument_list|()
operator|)
decl_stmt|;
name|int
name|x0
init|=
operator|(
name|c0
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|c0
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|.
name|getRequested
argument_list|()
operator|)
decl_stmt|;
name|int
name|x1
init|=
operator|(
name|c1
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|==
literal|null
condition|?
literal|0
else|:
name|c1
operator|.
name|getValue
argument_list|()
index|[
name|b0
index|]
operator|.
name|getRequested
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|v0
operator|>
name|v1
operator|||
name|w0
operator|>
name|w1
operator|||
name|x0
operator|>
name|x1
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|v0
operator|<
name|v1
operator|||
name|w0
operator|<
name|w1
operator|||
name|x0
operator|<
name|x1
condition|)
return|return
literal|1
return|;
name|b0
operator|++
expr_stmt|;
block|}
return|return
name|c0
operator|.
name|getKey
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c1
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|course
range|:
name|courses
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|updated
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getKey
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|getKey
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|CurriculumStudentsInterface
index|[]
name|cc
init|=
name|course
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|enrollment
init|=
literal|0
decl_stmt|,
name|lastLike
init|=
literal|0
decl_stmt|,
name|requested
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cc
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|enrollment
operator|+=
name|cc
index|[
name|i
index|]
operator|.
name|getEnrollment
argument_list|()
expr_stmt|;
if|if
condition|(
name|cc
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|lastLike
operator|+=
name|cc
index|[
name|i
index|]
operator|.
name|getLastLike
argument_list|()
expr_stmt|;
if|if
condition|(
name|cc
index|[
name|i
index|]
operator|!=
literal|null
condition|)
name|requested
operator|+=
name|cc
index|[
name|i
index|]
operator|.
name|getRequested
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|totalEnrollment
operator|>
literal|0
operator|&&
literal|100.0f
operator|*
name|enrollment
operator|/
name|totalEnrollment
operator|>
literal|3.0f
operator|)
operator|||
operator|(
name|totalLastLike
operator|>
literal|0
operator|&&
literal|100.0f
operator|*
name|lastLike
operator|/
name|totalLastLike
operator|>
literal|3.0f
operator|)
operator|||
operator|(
name|totalRequested
operator|>
literal|0
operator|&&
literal|100.0f
operator|*
name|requested
operator|/
name|totalRequested
operator|>
literal|3.0f
operator|)
condition|)
block|{
name|include
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|showEmptyCourses
condition|)
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|course
range|:
name|include
control|)
block|{
name|CurriculumStudentsInterface
index|[]
name|cc
init|=
name|course
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|iEditable
condition|)
name|row
operator|++
expr_stmt|;
name|addBlankLine
argument_list|()
expr_stmt|;
name|CurriculaCourseSelectionBox
name|c
init|=
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|c
operator|.
name|setValue
argument_list|(
name|course
operator|.
name|getKey
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
name|EnrollmentLabel
name|note
init|=
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
decl_stmt|;
name|note
operator|.
name|iEnrollment
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getEnrollment
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|iLastLike
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getLastLike
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|iProjection
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getProjection
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|iRequested
operator|=
operator|(
name|cc
operator|==
literal|null
operator|||
name|cc
index|[
name|col
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|cc
index|[
name|col
index|]
operator|.
name|getRequested
argument_list|()
operator|)
expr_stmt|;
name|note
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iVisibleCourses
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iVisibleCourses
operator|.
name|contains
argument_list|(
name|course
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|expectedChanged
parameter_list|(
name|int
name|col
parameter_list|,
name|int
name|expected
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setPercent
parameter_list|(
name|boolean
name|percent
parameter_list|)
block|{
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
operator|==
name|percent
condition|)
return|return;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesPercent
argument_list|(
name|percent
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
operator|(
operator|(
name|ShareTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setMode
parameter_list|(
name|Mode
name|mode
parameter_list|)
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
operator|(
operator|(
name|HTML
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
operator|.
name|setHTML
argument_list|(
name|mode
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
operator|(
operator|(
name|EnrollmentLabel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|col
argument_list|)
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setVisible
parameter_list|(
name|int
name|col
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|2
operator|+
literal|2
operator|*
name|col
argument_list|,
name|visible
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|3
operator|+
literal|2
operator|*
name|col
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|EnrollmentLabel
extends|extends
name|Label
implements|implements
name|HasCellAlignment
block|{
specifier|private
name|int
name|iColumn
decl_stmt|;
specifier|private
name|Integer
name|iEnrollment
decl_stmt|,
name|iLastLike
decl_stmt|,
name|iProjection
decl_stmt|,
name|iRequested
decl_stmt|;
specifier|public
name|EnrollmentLabel
parameter_list|(
name|int
name|column
parameter_list|,
name|Integer
name|enrollment
parameter_list|,
name|Integer
name|lastLike
parameter_list|,
name|Integer
name|projection
parameter_list|,
name|Integer
name|requested
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iEnrollment
operator|=
name|enrollment
expr_stmt|;
name|iLastLike
operator|=
name|lastLike
expr_stmt|;
name|iProjection
operator|=
name|projection
expr_stmt|;
name|iRequested
operator|=
name|requested
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
switch|switch
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
condition|)
block|{
case|case
name|NONE
case|:
comment|// None
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
break|break;
case|case
name|ENRL
case|:
comment|// Enrollment
if|if
condition|(
name|iEnrollment
operator|==
literal|null
operator|||
name|iEnrollment
operator|==
literal|0
condition|)
block|{
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
block|{
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getEnrollment
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
name|setText
argument_list|(
name|total
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iEnrollment
operator|/
name|total
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
name|iEnrollment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LAST
case|:
comment|// Last-like
if|if
condition|(
name|iLastLike
operator|==
literal|null
operator|||
name|iLastLike
operator|==
literal|0
condition|)
block|{
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
block|{
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getLastLike
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
name|setText
argument_list|(
name|total
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iLastLike
operator|/
name|total
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
name|iLastLike
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PROJ
case|:
comment|// Projection
if|if
condition|(
name|iProjection
operator|==
literal|null
operator|||
name|iProjection
operator|==
literal|0
condition|)
block|{
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
block|{
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getProjection
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
name|setText
argument_list|(
name|total
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iProjection
operator|/
name|total
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
name|iProjection
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|REQ
case|:
comment|// Course Requests
if|if
condition|(
name|iRequested
operator|==
literal|null
operator|||
name|iRequested
operator|==
literal|0
condition|)
block|{
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|)
block|{
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getRequested
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
name|setText
argument_list|(
name|total
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iRequested
operator|/
name|total
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
name|iRequested
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Integer
name|getLastLike
parameter_list|()
block|{
return|return
operator|(
name|iLastLike
operator|==
literal|null
operator|||
name|iLastLike
operator|==
literal|0
condition|?
literal|null
else|:
name|iLastLike
operator|)
return|;
block|}
specifier|public
name|Integer
name|getEnrollment
parameter_list|()
block|{
return|return
operator|(
name|iEnrollment
operator|==
literal|null
operator|||
name|iEnrollment
operator|==
literal|0
condition|?
literal|null
else|:
name|iEnrollment
operator|)
return|;
block|}
specifier|public
name|Integer
name|getProjection
parameter_list|()
block|{
return|return
operator|(
name|iProjection
operator|==
literal|null
operator|||
name|iProjection
operator|==
literal|0
condition|?
literal|null
else|:
name|iProjection
operator|)
return|;
block|}
specifier|public
name|Integer
name|getRequested
parameter_list|()
block|{
return|return
operator|(
name|iRequested
operator|==
literal|null
operator|||
name|iRequested
operator|==
literal|0
condition|?
literal|null
else|:
name|iRequested
operator|)
return|;
block|}
specifier|public
name|Float
name|getLastLikePercent
parameter_list|()
block|{
if|if
condition|(
name|iLastLike
operator|==
literal|null
operator|||
name|iLastLike
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getLastLike
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
operator|(
name|float
operator|)
name|iLastLike
operator|)
operator|/
name|total
return|;
block|}
specifier|public
name|Float
name|getEnrollmentPercent
parameter_list|()
block|{
if|if
condition|(
name|iEnrollment
operator|==
literal|null
operator|||
name|iEnrollment
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getEnrollment
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
operator|(
name|float
operator|)
name|iEnrollment
operator|)
operator|/
name|total
return|;
block|}
specifier|public
name|Float
name|getProjectionPercent
parameter_list|()
block|{
if|if
condition|(
name|iProjection
operator|==
literal|null
operator|||
name|iProjection
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getProjection
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
operator|(
name|float
operator|)
name|iProjection
operator|)
operator|/
name|total
return|;
block|}
specifier|public
name|Float
name|getRequestedPercent
parameter_list|()
block|{
if|if
condition|(
name|iRequested
operator|==
literal|null
operator|||
name|iRequested
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getRequested
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|(
operator|(
name|float
operator|)
name|iRequested
operator|)
operator|/
name|total
return|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
class|class
name|ShareTextBox
extends|extends
name|UniTimeTextBox
block|{
specifier|private
name|int
name|iColumn
decl_stmt|;
specifier|private
name|Float
name|iShare
init|=
literal|null
decl_stmt|,
name|iDefaultShare
init|=
literal|null
decl_stmt|;
specifier|public
name|ShareTextBox
parameter_list|(
name|int
name|column
parameter_list|,
name|Float
name|share
parameter_list|,
name|Float
name|defaultShare
parameter_list|)
block|{
name|super
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iShare
operator|=
name|share
expr_stmt|;
name|iDefaultShare
operator|=
name|defaultShare
expr_stmt|;
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iShare
operator|=
literal|null
expr_stmt|;
block|}
if|else if
condition|(
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|iShare
operator|=
operator|(
name|float
operator|)
name|NF
operator|.
name|parse
argument_list|(
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|/
literal|100.0f
expr_stmt|;
if|if
condition|(
name|iShare
operator|>
literal|1.0f
condition|)
name|iShare
operator|=
literal|1.0f
expr_stmt|;
if|if
condition|(
name|iShare
operator|<=
literal|0.0f
condition|)
name|iShare
operator|=
literal|0.0f
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|exp
init|=
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|==
literal|null
operator|||
name|exp
operator|==
literal|0
condition|)
name|iShare
operator|=
operator|(
name|float
operator|)
name|NF
operator|.
name|parse
argument_list|(
name|getText
argument_list|()
argument_list|)
operator|/
literal|100.0f
expr_stmt|;
else|else
name|iShare
operator|=
operator|(
name|float
operator|)
name|NF
operator|.
name|parse
argument_list|(
name|getText
argument_list|()
argument_list|)
operator|/
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
expr_stmt|;
if|if
condition|(
name|iShare
operator|>
literal|1.0f
condition|)
name|iShare
operator|=
literal|1.0f
expr_stmt|;
if|if
condition|(
name|iShare
operator|<
literal|0.0f
condition|)
name|iShare
operator|=
literal|0.0f
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iShare
operator|=
literal|null
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setShare
parameter_list|(
name|Float
name|share
parameter_list|)
block|{
name|iShare
operator|=
name|share
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setExpected
parameter_list|(
name|Integer
name|expected
parameter_list|)
block|{
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|iShare
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|total
init|=
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|total
operator|==
literal|null
condition|)
block|{
name|iShare
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|iShare
operator|=
operator|(
operator|(
name|float
operator|)
name|expected
operator|)
operator|/
name|total
expr_stmt|;
block|}
block|}
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Float
name|getShare
parameter_list|()
block|{
return|return
name|iShare
return|;
block|}
specifier|public
name|Float
name|getDisplayedShare
parameter_list|()
block|{
return|return
name|iShare
operator|==
literal|null
condition|?
name|iDefaultShare
else|:
name|iShare
return|;
block|}
specifier|public
name|Float
name|getDefaultShare
parameter_list|()
block|{
return|return
name|iDefaultShare
return|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
if|if
condition|(
name|iShare
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iDefaultShare
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
operator|||
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
argument_list|)
condition|)
name|setText
argument_list|(
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iDefaultShare
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
else|else
block|{
name|Integer
name|exp
init|=
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
name|setText
argument_list|(
name|exp
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|exp
operator|*
name|iDefaultShare
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"gray"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearColor
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
operator|||
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
argument_list|)
condition|)
block|{
name|setText
argument_list|(
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|iShare
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Integer
name|exp
init|=
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|iColumn
argument_list|)
decl_stmt|;
name|setText
argument_list|(
name|exp
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|notApplicable
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|exp
operator|*
name|iShare
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearColor
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|CourseChangedEvent
block|{
specifier|private
name|String
name|iCourseName
init|=
literal|null
decl_stmt|;
specifier|public
name|CourseChangedEvent
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|iCourseName
operator|=
name|courseName
expr_stmt|;
block|}
specifier|public
name|String
name|getCourseName
parameter_list|()
block|{
return|return
name|iCourseName
return|;
block|}
block|}
specifier|public
class|class
name|Group
extends|extends
name|Label
implements|implements
name|Comparable
argument_list|<
name|Group
argument_list|>
block|{
specifier|private
name|String
name|iName
decl_stmt|;
specifier|private
name|int
name|iType
decl_stmt|;
specifier|private
name|String
name|iColor
decl_stmt|;
specifier|private
name|Operation
name|iOperation
decl_stmt|;
specifier|private
name|boolean
name|iGroupEditable
decl_stmt|;
specifier|public
name|Group
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|iGroupEditable
operator|=
name|editable
expr_stmt|;
name|setStylePrimaryName
argument_list|(
literal|"unitime-TinyLabel"
operator|+
operator|(
name|iType
operator|==
literal|1
condition|?
literal|"White"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
operator|!
name|iGroupEditable
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setFontStyle
argument_list|(
name|FontStyle
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
operator|&&
name|iGroupEditable
condition|)
block|{
name|addClickHandler
argument_list|(
name|iNewGroupDialog
operator|.
name|getClickHandler
argument_list|()
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
block|}
name|iOperation
operator|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|getElement
argument_list|()
operator|.
name|getString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iEditable
operator|&&
name|iGroupEditable
operator|&&
name|iVisibleCourses
operator|==
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|assignGroup
argument_list|(
literal|null
argument_list|,
name|iName
argument_list|,
name|iType
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|Group
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|iType
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|iType
operator|=
name|type
expr_stmt|;
name|setStylePrimaryName
argument_list|(
literal|"unitime-TinyLabel"
operator|+
operator|(
name|iType
operator|==
literal|1
condition|?
literal|"White"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
operator|||
operator|!
operator|(
name|o
operator|instanceof
name|Group
operator|)
condition|)
return|return
literal|false
return|;
return|return
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|Group
operator|)
name|o
operator|)
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Group
name|cloneGroup
parameter_list|()
block|{
name|Group
name|g
init|=
operator|new
name|Group
argument_list|(
name|iName
argument_list|,
name|iType
argument_list|,
name|iGroupEditable
argument_list|)
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
specifier|public
name|String
name|getColor
parameter_list|()
block|{
return|return
name|iColor
return|;
block|}
specifier|public
name|void
name|setColor
parameter_list|(
name|String
name|color
parameter_list|)
block|{
name|iColor
operator|=
name|color
expr_stmt|;
name|addStyleName
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Group
name|g
parameter_list|)
block|{
return|return
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|g
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Operation
name|getOperation
parameter_list|()
block|{
return|return
name|iOperation
return|;
block|}
specifier|public
name|boolean
name|isEditable
parameter_list|()
block|{
return|return
name|iGroupEditable
return|;
block|}
block|}
specifier|public
name|void
name|assignGroup
parameter_list|(
name|String
name|oldName
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|type
parameter_list|)
block|{
name|Group
name|g
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Group
name|x
range|:
name|iGroups
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|oldName
operator|==
literal|null
condition|?
name|name
else|:
name|oldName
argument_list|)
condition|)
block|{
name|g
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|g
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|g
operator|=
operator|new
name|Group
argument_list|(
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|colors
label|:
for|for
control|(
name|String
name|c
range|:
name|sColors
control|)
block|{
for|for
control|(
name|Group
name|x
range|:
name|iGroups
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getColor
argument_list|()
operator|.
name|equals
argument_list|(
name|c
argument_list|)
condition|)
continue|continue
name|colors
continue|;
block|}
name|g
operator|.
name|setColor
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
name|iGroups
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rows
label|:
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|HorizontalPanel
name|p
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|x
init|=
operator|(
name|Group
operator|)
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|g
argument_list|)
condition|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|p
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
continue|continue
name|rows
continue|;
block|}
else|else
block|{
name|x
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|x
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|name
operator|==
literal|null
operator|||
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iGroups
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|g
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|g
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oldName
operator|!=
literal|null
condition|)
return|return;
name|boolean
name|nothing
init|=
literal|true
decl_stmt|;
name|boolean
name|hasNoGroup
init|=
literal|false
decl_stmt|;
name|rows
label|:
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|nothing
operator|=
literal|false
expr_stmt|;
name|HorizontalPanel
name|p
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|x
init|=
operator|(
name|Group
operator|)
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|g
argument_list|)
condition|)
continue|continue
name|rows
continue|;
block|}
name|hasNoGroup
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|nothing
condition|)
block|{
name|boolean
name|select
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|HorizontalPanel
name|p
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|x
init|=
operator|(
name|Group
operator|)
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|setSelected
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|select
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|select
condition|)
return|return;
block|}
name|rows
label|:
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|row
argument_list|)
condition|)
continue|continue;
name|iTable
operator|.
name|setSelected
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|HorizontalPanel
name|p
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|x
init|=
operator|(
name|Group
operator|)
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|g
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|hasNoGroup
condition|)
name|p
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
continue|continue
name|rows
continue|;
block|}
block|}
name|p
operator|.
name|add
argument_list|(
name|g
operator|.
name|cloneGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|found
init|=
literal|false
decl_stmt|;
name|rows
label|:
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|HorizontalPanel
name|p
init|=
operator|(
name|HorizontalPanel
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Group
name|x
init|=
operator|(
name|Group
operator|)
name|p
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|x
operator|.
name|equals
argument_list|(
name|g
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break
name|rows
break|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|iGroups
operator|.
name|remove
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Group
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|iGroups
return|;
block|}
specifier|public
name|void
name|showOnlyCourses
parameter_list|(
name|TreeSet
argument_list|<
name|CourseInterface
argument_list|>
name|courses
parameter_list|)
block|{
name|iVisibleCourses
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CourseInterface
name|c
range|:
name|courses
control|)
name|iVisibleCourses
operator|.
name|add
argument_list|(
name|c
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|String
name|courseName
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|iVisibleCourses
operator|.
name|contains
argument_list|(
name|courseName
argument_list|)
condition|)
block|{
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|showAllCourses
parameter_list|()
block|{
if|if
condition|(
name|iVisibleCourses
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|courseName
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|iTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
name|iVisibleCourses
operator|.
name|contains
argument_list|(
name|courseName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iVisibleCourses
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|setEnabled
argument_list|(
operator|!
name|hasDefaultShare
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|canShowStudentsTable
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|NONE
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|row
operator|<
literal|1
operator|||
name|row
operator|>=
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|)
return|return
literal|false
return|;
name|String
name|course
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|iLastCourses
operator|==
literal|null
operator|||
operator|!
name|iLastCourses
operator|.
name|containsKey
argument_list|(
name|course
argument_list|)
condition|)
return|return
literal|false
return|;
name|int
name|nrOther
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|==
name|row
operator|||
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|r
argument_list|)
condition|)
continue|continue;
name|nrOther
operator|++
expr_stmt|;
block|}
return|return
operator|(
name|nrOther
operator|>
literal|0
operator|)
return|;
block|}
specifier|public
class|class
name|StudentsTable
extends|extends
name|Composite
block|{
specifier|private
name|FlexTable
name|iT
init|=
operator|new
name|FlexTable
argument_list|()
decl_stmt|;
specifier|private
name|VerticalPanel
name|iP
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iCanShow
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|count
parameter_list|(
name|CurriculumStudentsInterface
name|c
parameter_list|,
name|Set
argument_list|<
name|Long
argument_list|>
name|students
parameter_list|)
block|{
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|!=
name|Mode
operator|.
name|PROJ
operator|||
name|c
operator|==
literal|null
condition|)
return|return
name|students
operator|.
name|size
argument_list|()
return|;
return|return
name|c
operator|.
name|countProjectedStudents
argument_list|(
name|students
argument_list|)
return|;
block|}
specifier|private
name|StudentsTable
parameter_list|(
name|int
name|currentRow
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|String
name|course
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|currentRow
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
name|iP
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|hintComparingStudentsWithOtherCourses
argument_list|(
name|course
operator|+
literal|" "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|replace
argument_list|(
literal|" enrollment"
argument_list|,
literal|""
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iP
operator|.
name|add
argument_list|(
name|iT
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iP
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLastCourses
operator|==
literal|null
condition|)
return|return;
name|CurriculumStudentsInterface
index|[]
name|thisCourse
init|=
name|iLastCourses
operator|.
name|get
argument_list|(
name|course
argument_list|)
decl_stmt|;
name|CurriculumStudentsInterface
index|[]
name|totals
init|=
name|iLastCourses
operator|.
name|get
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisCourse
operator|==
literal|null
condition|)
return|return;
name|int
name|column
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|c
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|iT
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|column
argument_list|,
name|iClassifications
operator|.
name|getName
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|iT
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|column
argument_list|,
literal|"50px"
argument_list|)
expr_stmt|;
name|iT
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|column
argument_list|,
literal|"unitime-DashedBottom"
argument_list|)
expr_stmt|;
name|column
operator|++
expr_stmt|;
block|}
name|iT
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|hintStudentsInOneOtherCourse
argument_list|()
argument_list|)
expr_stmt|;
name|iT
operator|.
name|setText
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|hintStudentsInTwoOtherCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iT
operator|.
name|setText
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|hintStudentsInThreeOtherCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iT
operator|.
name|setText
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|hintStudentsInAllOtherCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iT
operator|.
name|setText
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|hintStudentsNotInAnyOtherCourse
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CurriculumStudentsInterface
index|[]
argument_list|>
name|other
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumStudentsInterface
index|[]
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|r
operator|==
name|currentRow
operator|||
operator|!
name|iTable
operator|.
name|isSelected
argument_list|(
name|r
argument_list|)
condition|)
continue|continue;
name|String
name|c
init|=
operator|(
operator|(
name|CurriculaCourseSelectionBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|other
operator|.
name|add
argument_list|(
name|iLastCourses
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|iT
operator|.
name|setText
argument_list|(
literal|6
operator|+
name|row
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|hinStudentsSharedWith
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
name|column
operator|=
literal|0
expr_stmt|;
name|int
name|totalC
index|[]
init|=
operator|new
name|int
index|[
name|other
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalC
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|totalC
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
name|boolean
name|has1
init|=
literal|false
decl_stmt|,
name|has2
init|=
literal|false
decl_stmt|,
name|has3
init|=
literal|false
decl_stmt|,
name|hasAll
init|=
literal|false
decl_stmt|,
name|hasNone
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|CurriculumStudentsInterface
name|tc
init|=
name|totals
index|[
name|c
index|]
decl_stmt|;
if|if
condition|(
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|c
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
name|Set
argument_list|<
name|Long
argument_list|>
name|thisEnrollment
init|=
operator|(
name|thisCourse
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|ENRL
condition|?
name|thisCourse
index|[
name|c
index|]
operator|.
name|getEnrolledStudents
argument_list|()
else|:
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|REQ
condition|?
name|thisCourse
index|[
name|c
index|]
operator|.
name|getRequestedStudents
argument_list|()
else|:
name|thisCourse
index|[
name|c
index|]
operator|.
name|getLastLikeStudents
argument_list|()
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|thisEnrollment
operator|!=
literal|null
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|sharedWithOneOther
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sharedWithTwoOther
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sharedWithThreeOther
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|sharedWithAll
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|thisEnrollment
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|notShared
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|(
name|thisEnrollment
argument_list|)
decl_stmt|;
name|row
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|CurriculumStudentsInterface
index|[]
name|o
range|:
name|other
control|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|enrl
init|=
operator|(
name|o
operator|==
literal|null
operator|||
name|o
index|[
name|c
index|]
operator|==
literal|null
condition|?
literal|null
else|:
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|ENRL
condition|?
name|o
index|[
name|c
index|]
operator|.
name|getEnrolledStudents
argument_list|()
else|:
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesMode
argument_list|()
operator|==
name|Mode
operator|.
name|REQ
condition|?
name|o
index|[
name|c
index|]
operator|.
name|getRequestedStudents
argument_list|()
else|:
name|o
index|[
name|c
index|]
operator|.
name|getLastLikeStudents
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|enrl
operator|==
literal|null
condition|)
block|{
name|sharedWithAll
operator|.
name|clear
argument_list|()
expr_stmt|;
name|row
operator|++
expr_stmt|;
continue|continue;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|share
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Long
name|s
range|:
name|thisEnrollment
control|)
block|{
if|if
condition|(
name|enrl
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|sharedWithOneOther
operator|.
name|add
argument_list|(
name|s
argument_list|)
condition|)
if|if
condition|(
operator|!
name|sharedWithTwoOther
operator|.
name|add
argument_list|(
name|s
argument_list|)
condition|)
name|sharedWithThreeOther
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|share
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|i
init|=
name|sharedWithAll
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
operator|!
name|enrl
operator|.
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Long
argument_list|>
name|i
init|=
name|notShared
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
if|if
condition|(
name|enrl
operator|.
name|contains
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|share
operator|.
name|isEmpty
argument_list|()
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|share
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|totalC
index|[
name|row
index|]
operator|+=
name|share
operator|.
name|size
argument_list|()
expr_stmt|;
name|iT
operator|.
name|setText
argument_list|(
literal|6
operator|+
name|row
argument_list|,
literal|1
operator|+
name|column
argument_list|,
operator|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
condition|?
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|count
argument_list|(
name|tc
argument_list|,
name|share
argument_list|)
operator|/
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
argument_list|)
operator|+
literal|"%"
else|:
literal|""
operator|+
name|count
argument_list|(
name|tc
argument_list|,
name|share
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|++
expr_stmt|;
block|}
name|boolean
name|percent
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesPercent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sharedWithOneOther
operator|.
name|isEmpty
argument_list|()
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithOneOther
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|iT
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|1
operator|+
name|column
argument_list|,
operator|(
name|percent
condition|?
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithOneOther
argument_list|)
operator|/
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
argument_list|)
operator|+
literal|"%"
else|:
literal|""
operator|+
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithOneOther
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|has1
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sharedWithTwoOther
operator|.
name|isEmpty
argument_list|()
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithTwoOther
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|iT
operator|.
name|setText
argument_list|(
literal|2
argument_list|,
literal|1
operator|+
name|column
argument_list|,
operator|(
name|percent
condition|?
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithTwoOther
argument_list|)
operator|/
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
argument_list|)
operator|+
literal|"%"
else|:
literal|""
operator|+
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithTwoOther
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|has2
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sharedWithThreeOther
operator|.
name|isEmpty
argument_list|()
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithThreeOther
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|iT
operator|.
name|setText
argument_list|(
literal|3
argument_list|,
literal|1
operator|+
name|column
argument_list|,
operator|(
name|percent
condition|?
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithThreeOther
argument_list|)
operator|/
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
argument_list|)
operator|+
literal|"%"
else|:
literal|""
operator|+
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithThreeOther
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|has3
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sharedWithAll
operator|.
name|isEmpty
argument_list|()
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithAll
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|iT
operator|.
name|setText
argument_list|(
literal|4
argument_list|,
literal|1
operator|+
name|column
argument_list|,
operator|(
name|percent
condition|?
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithAll
argument_list|)
operator|/
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
argument_list|)
operator|+
literal|"%"
else|:
literal|""
operator|+
name|count
argument_list|(
name|tc
argument_list|,
name|sharedWithAll
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|hasAll
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|notShared
operator|.
name|isEmpty
argument_list|()
operator|&&
name|count
argument_list|(
name|tc
argument_list|,
name|notShared
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|iT
operator|.
name|setText
argument_list|(
literal|5
argument_list|,
literal|1
operator|+
name|column
argument_list|,
operator|(
name|percent
condition|?
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|count
argument_list|(
name|tc
argument_list|,
name|notShared
argument_list|)
operator|/
name|count
argument_list|(
name|tc
argument_list|,
name|thisEnrollment
argument_list|)
argument_list|)
operator|+
literal|"%"
else|:
literal|""
operator|+
name|count
argument_list|(
name|tc
argument_list|,
name|notShared
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|hasNone
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|column
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|has1
operator|||
name|other
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|has2
operator|||
name|other
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|has3
operator|||
name|other
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasAll
operator|||
name|other
operator|.
name|size
argument_list|()
operator|<=
literal|3
condition|)
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasNone
operator|||
name|other
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|minTotal
init|=
operator|-
literal|1
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|visible
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|row
operator|=
name|other
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|totalC
index|[
name|row
index|]
operator|<
literal|1
condition|)
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|6
operator|+
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
block|{
name|visible
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|minTotal
operator|<
literal|0
operator|||
name|minTotal
operator|<
name|totalC
index|[
name|row
index|]
condition|)
name|minTotal
operator|=
name|totalC
index|[
name|row
index|]
expr_stmt|;
block|}
block|}
while|while
condition|(
name|visible
operator|.
name|size
argument_list|()
operator|>
literal|10
condition|)
block|{
name|int
name|limit
init|=
name|minTotal
decl_stmt|;
name|minTotal
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|i
init|=
name|visible
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
name|visible
operator|.
name|size
argument_list|()
operator|>
literal|10
condition|;
control|)
block|{
name|row
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|totalC
index|[
name|row
index|]
operator|<=
name|limit
condition|)
block|{
name|iT
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|6
operator|+
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|minTotal
operator|<
literal|0
operator|||
name|minTotal
operator|<
name|totalC
index|[
name|row
index|]
condition|)
name|minTotal
operator|=
name|totalC
index|[
name|row
index|]
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|visible
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|r
init|=
literal|6
operator|+
name|visible
operator|.
name|get
argument_list|(
name|visible
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|int
name|col
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iClassifications
operator|.
name|getClassifications
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|iClassifications
operator|.
name|getExpected
argument_list|(
name|c
argument_list|)
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|iT
operator|.
name|getCellCount
argument_list|(
name|r
argument_list|)
operator|<=
name|col
operator|||
name|iT
operator|.
name|getText
argument_list|(
name|r
argument_list|,
name|col
argument_list|)
operator|==
literal|null
operator|||
name|iT
operator|.
name|getText
argument_list|(
name|r
argument_list|,
name|col
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|iT
operator|.
name|setHTML
argument_list|(
name|r
argument_list|,
name|col
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|iT
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|r
argument_list|,
name|col
argument_list|,
literal|"unitime-DashedTop"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
block|}
block|}
name|iCanShow
operator|=
name|has1
operator|||
name|has2
operator|||
name|hasAll
operator|||
name|hasNone
expr_stmt|;
block|}
specifier|public
name|boolean
name|canShow
parameter_list|()
block|{
return|return
name|iCanShow
return|;
block|}
block|}
specifier|private
class|class
name|GroupDialogBox
extends|extends
name|UniTimeDialogBox
block|{
specifier|private
name|TextBox
name|iGrName
decl_stmt|;
specifier|private
name|ListBox
name|iGrType
decl_stmt|;
specifier|private
name|Button
name|iGrAssign
decl_stmt|,
name|iGrDelete
decl_stmt|,
name|iGrUpdate
decl_stmt|;
specifier|private
name|String
name|iGrOldName
init|=
literal|null
decl_stmt|;
specifier|private
name|ClickHandler
name|iGrHandler
decl_stmt|;
specifier|private
name|GroupDialogBox
parameter_list|()
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|FlexTable
name|groupTable
init|=
operator|new
name|FlexTable
argument_list|()
decl_stmt|;
name|groupTable
operator|.
name|setCellSpacing
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|groupTable
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propName
argument_list|()
argument_list|)
expr_stmt|;
name|iGrName
operator|=
operator|new
name|UniTimeTextBox
argument_list|()
expr_stmt|;
name|groupTable
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|iGrName
argument_list|)
expr_stmt|;
name|groupTable
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propType
argument_list|()
argument_list|)
expr_stmt|;
name|iGrType
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iGrType
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|groupDifferentStudents
argument_list|()
argument_list|)
expr_stmt|;
name|iGrType
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|groupSameStudents
argument_list|()
argument_list|)
expr_stmt|;
name|iGrType
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|groupTable
operator|.
name|setWidget
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|iGrType
argument_list|)
expr_stmt|;
name|HorizontalPanel
name|grButtons
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|grButtons
operator|.
name|setSpacing
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iGrAssign
operator|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|opGroupAssign
argument_list|()
argument_list|)
expr_stmt|;
name|grButtons
operator|.
name|add
argument_list|(
name|iGrAssign
argument_list|)
expr_stmt|;
name|iGrUpdate
operator|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|opGroupUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|grButtons
operator|.
name|add
argument_list|(
name|iGrUpdate
argument_list|)
expr_stmt|;
name|iGrDelete
operator|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|opGroupDelete
argument_list|()
argument_list|)
expr_stmt|;
name|grButtons
operator|.
name|add
argument_list|(
name|iGrDelete
argument_list|)
expr_stmt|;
name|groupTable
operator|.
name|setWidget
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|grButtons
argument_list|)
expr_stmt|;
name|groupTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|groupTable
argument_list|)
expr_stmt|;
name|iGrAssign
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
name|assignGroup
argument_list|(
name|iGrOldName
argument_list|,
name|iGrName
operator|.
name|getText
argument_list|()
argument_list|,
name|iGrType
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setEnterToSubmit
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|hide
argument_list|()
expr_stmt|;
name|assignGroup
argument_list|(
name|iGrOldName
argument_list|,
name|iGrName
operator|.
name|getText
argument_list|()
argument_list|,
name|iGrType
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/* 			iGrName.addKeyUpHandler(new KeyUpHandler() { 				@Override 				public void onKeyUp(KeyUpEvent event) { 					if (event.getNativeKeyCode() == KeyCodes.KEY_ENTER) { 						hide(); 						assignGroup(iGrOldName, iGrName.getText(), iGrType.getSelectedIndex()); 					} 					if (event.getNativeKeyCode() == KeyCodes.KEY_ESCAPE) { 						hide(); 					} 				} 			}); 			*/
name|iGrUpdate
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
name|assignGroup
argument_list|(
name|iGrOldName
argument_list|,
name|iGrName
operator|.
name|getText
argument_list|()
argument_list|,
name|iGrType
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrDelete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
name|assignGroup
argument_list|(
name|iGrOldName
argument_list|,
literal|null
argument_list|,
name|iGrType
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrHandler
operator|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogEditGroup
argument_list|()
argument_list|)
expr_stmt|;
name|iGrOldName
operator|=
operator|(
operator|(
name|Group
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|iGrName
operator|.
name|setText
argument_list|(
operator|(
operator|(
name|Group
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|iGrType
operator|.
name|setSelectedIndex
argument_list|(
operator|(
operator|(
name|Group
operator|)
name|event
operator|.
name|getSource
argument_list|()
operator|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|iGrAssign
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iGrDelete
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iGrUpdate
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iGrName
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iGrName
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|public
name|ClickHandler
name|getClickHandler
parameter_list|()
block|{
return|return
name|iGrHandler
return|;
block|}
specifier|public
name|void
name|openNew
parameter_list|()
block|{
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogNewGroup
argument_list|()
argument_list|)
expr_stmt|;
name|iGrOldName
operator|=
literal|null
expr_stmt|;
name|iGrName
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|'A'
operator|+
name|getGroups
argument_list|()
operator|.
name|size
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iGrType
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iGrAssign
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iGrDelete
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iGrUpdate
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iGrName
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iGrName
operator|.
name|selectAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

