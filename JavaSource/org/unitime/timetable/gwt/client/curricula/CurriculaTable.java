begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
operator|.
name|CurriculumProjectionRulesPage
operator|.
name|ProjectionRulesEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HintProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DialogBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculaTable
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CurriculaServiceAsync
name|iService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|CurriculaService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|VerticalPanel
name|iPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|Image
name|iLoadingImage
init|=
literal|null
decl_stmt|;
specifier|private
name|Label
name|iErrorLabel
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|CurriculumInterface
argument_list|>
name|iTable
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iLastQuery
init|=
literal|null
decl_stmt|;
specifier|private
name|Button
name|iOperations
init|=
literal|null
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
argument_list|>
name|iLoadClassifications
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CurriculumClickHandler
argument_list|>
name|iCurriculumClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
name|iLastSort
init|=
literal|null
decl_stmt|;
specifier|private
name|Long
name|iLastCurriculumId
init|=
literal|null
decl_stmt|;
specifier|private
name|CurriculaClassifications
name|iClassifications
init|=
literal|null
decl_stmt|;
specifier|private
name|PopupPanel
name|iClassificationsPopup
init|=
literal|null
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|iSelectedCurricula
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iIsAdmin
init|=
literal|false
decl_stmt|;
specifier|private
name|EditClassificationHandler
name|iEditClassificationHandler
init|=
literal|null
decl_stmt|;
specifier|public
name|CurriculaTable
parameter_list|()
block|{
name|iOperations
operator|=
operator|new
name|Button
argument_list|(
literal|"<u>M</u>ore&or;"
argument_list|)
expr_stmt|;
name|iOperations
operator|.
name|setAccessKey
argument_list|(
literal|'m'
argument_list|)
expr_stmt|;
name|iOperations
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|hSelect
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&otimes;"
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSelect
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|setWidth
argument_list|(
literal|"10px"
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addAdditionalStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Select All"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|iSelectedCurricula
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CheckBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Clear All"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
condition|)
block|{
operator|(
operator|(
name|CheckBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Edit Requested Enrollments"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
if|if
condition|(
name|iSelectedCurricula
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|||
name|iEditClassificationHandler
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|CurriculumInterface
name|c
range|:
name|selected
argument_list|()
control|)
if|if
condition|(
operator|!
name|c
operator|.
name|hasClassifications
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEditClassificationHandler
operator|.
name|doEdit
argument_list|(
name|selected
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Delete Selected Curricula"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|!
name|iSelectedCurricula
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|deleteIds
init|=
name|markSelected
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|deleteIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Do you realy want to delete the selected "
operator|+
operator|(
name|deleteIds
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"curriculum"
else|:
literal|"curricula"
operator|)
operator|+
literal|"?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Deleting selected curricula ..."
argument_list|)
expr_stmt|;
name|iService
operator|.
name|deleteCurricula
argument_list|(
name|deleteIds
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setError
argument_list|(
literal|"Unable to delete selected curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Merge Selected Curricula"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
if|if
condition|(
name|iSelectedCurricula
operator|.
name|size
argument_list|()
operator|<=
literal|1
condition|)
return|return
literal|false
return|;
name|Long
name|areaId
init|=
literal|null
decl_stmt|;
name|Long
name|deptId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurriculumInterface
name|c
range|:
name|selected
argument_list|()
control|)
block|{
if|if
condition|(
name|areaId
operator|==
literal|null
condition|)
block|{
name|areaId
operator|=
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|areaId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|deptId
operator|==
literal|null
condition|)
block|{
name|deptId
operator|=
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|deptId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|mergeIds
init|=
name|markSelected
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mergeIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Do you realy want to merge the selected "
operator|+
operator|(
name|mergeIds
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"curriculum"
else|:
literal|"curricula"
operator|)
operator|+
literal|"?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Merging selected curricula ..."
argument_list|)
expr_stmt|;
name|iService
operator|.
name|mergeCurricula
argument_list|(
name|mergeIds
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setError
argument_list|(
literal|"Unable to merge selected curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Curriculum Projection Rules"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|openCurriculumProjectionRules
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Update Requested Enrollment by Projection Rules"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|curIds
init|=
name|markSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedCurricula
operator|.
name|isEmpty
argument_list|()
condition|)
name|curIds
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Do you realy want to update "
operator|+
operator|(
name|curIds
operator|==
literal|null
condition|?
literal|"all "
operator|+
operator|(
name|iIsAdmin
condition|?
literal|""
else|:
literal|"your "
operator|)
operator|+
literal|"curricula"
else|:
literal|"the selected "
operator|+
operator|(
name|curIds
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"curriculum"
else|:
literal|"curricula"
operator|)
operator|)
operator|+
literal|"?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Updating "
operator|+
operator|(
name|curIds
operator|==
literal|null
condition|?
literal|"all "
operator|+
operator|(
name|iIsAdmin
condition|?
literal|""
else|:
literal|"your "
operator|)
operator|+
literal|"curricula"
else|:
literal|"the selected "
operator|+
operator|(
name|curIds
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"curriculum"
else|:
literal|"curricula"
operator|)
operator|)
operator|+
literal|" ... "
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;This could take a while ..."
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
name|iService
operator|.
name|updateCurriculaByProjections
argument_list|(
name|curIds
argument_list|,
literal|false
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setError
argument_list|(
literal|"Unable to update curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Update Requested Enrollment And Course Projections"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|curIds
init|=
name|markSelected
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedCurricula
operator|.
name|isEmpty
argument_list|()
condition|)
name|curIds
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Do you realy want to update "
operator|+
operator|(
name|curIds
operator|==
literal|null
condition|?
literal|"all "
operator|+
operator|(
name|iIsAdmin
condition|?
literal|""
else|:
literal|"your "
operator|)
operator|+
literal|"curricula"
else|:
literal|"the selected "
operator|+
operator|(
name|curIds
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"curriculum"
else|:
literal|"curricula"
operator|)
operator|)
operator|+
literal|"?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Updating "
operator|+
operator|(
name|curIds
operator|==
literal|null
condition|?
literal|"all "
operator|+
operator|(
name|iIsAdmin
condition|?
literal|""
else|:
literal|"your "
operator|)
operator|+
literal|"curricula"
else|:
literal|"the selected "
operator|+
operator|(
name|curIds
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|?
literal|"curriculum"
else|:
literal|"curricula"
operator|)
operator|)
operator|+
literal|" ... "
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;This could take a while ..."
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
name|iService
operator|.
name|updateCurriculaByProjections
argument_list|(
name|curIds
argument_list|,
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setError
argument_list|(
literal|"Unable to update curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unmarkSelected
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Populate Course Projected Demands"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iIsAdmin
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Do you really want to populate projected demands for all courses?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Populating projected demands for all courses ..."
argument_list|)
expr_stmt|;
name|iService
operator|.
name|populateCourseProjectedDemands
argument_list|(
literal|false
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setError
argument_list|(
literal|"Unable to populate course projected demands ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Populate Course Projected Demands (Include Other Students)"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iIsAdmin
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Do you really want to populate projected demands for all courses?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Populating projected demands for all courses ... "
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;You may also go grab a coffee ...&nbsp;&nbsp;&nbsp;&nbsp;This will take a while ..."
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
name|iService
operator|.
name|populateCourseProjectedDemands
argument_list|(
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setError
argument_list|(
literal|"Unable to populate course projected demands ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|?
literal|"Recreate"
else|:
literal|"Create"
operator|)
operator|+
literal|" Curricula from Last-Like Enrollments&amp; Projections"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iIsAdmin
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|markAll
argument_list|()
expr_stmt|;
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"This will delete all existing curricula and create them from scratch. Are you sure you want to do it?"
argument_list|)
condition|)
block|{
if|if
condition|(
name|Window
operator|.
name|confirm
argument_list|(
literal|"Are you REALLY sure you want to recreate all curricula?"
argument_list|)
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
operator|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|?
literal|"Recreating"
else|:
literal|"Creating"
operator|)
operator|+
literal|" all curricula ... "
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;You may also go grab a coffee ...&nbsp;&nbsp;&nbsp;&nbsp;This will take a while ..."
argument_list|,
literal|300000
argument_list|)
expr_stmt|;
name|iService
operator|.
name|makeupCurriculaFromLastLikeDemands
argument_list|(
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setError
argument_list|(
literal|"Unable to create curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|unmarkAll
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unmarkAll
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|unmarkAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCurriculum
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Curriculum"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCurriculum
argument_list|)
expr_stmt|;
name|hCurriculum
operator|.
name|setWidth
argument_list|(
literal|"100px"
argument_list|)
expr_stmt|;
name|hCurriculum
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isCurriculumAbbv
argument_list|()
condition|?
literal|"Show Names"
else|:
literal|"Show Abbreviations"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|abbv
init|=
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isCurriculumAbbv
argument_list|()
decl_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|setCurriculumAbbv
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|abbv
condition|?
name|c
operator|.
name|getAbbv
argument_list|()
else|:
name|c
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hCurriculum
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Curriculum"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|boolean
name|abbv
init|=
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isCurriculumAbbv
argument_list|()
decl_stmt|;
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|abbv
condition|?
name|a
operator|.
name|getAbbv
argument_list|()
else|:
name|a
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|abbv
condition|?
name|b
operator|.
name|getAbbv
argument_list|()
else|:
name|b
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hArea
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Academic Area"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hArea
argument_list|)
expr_stmt|;
name|hArea
operator|.
name|setWidth
argument_list|(
literal|"100px"
argument_list|)
expr_stmt|;
name|hArea
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isAreaAbbv
argument_list|()
condition|?
literal|"Show Names"
else|:
literal|"Show Abbreviations"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|abbv
init|=
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isAreaAbbv
argument_list|()
decl_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|setAreaAbbv
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|2
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|abbv
condition|?
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
else|:
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hArea
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Academic Area"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|boolean
name|abbv
init|=
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isAreaAbbv
argument_list|()
decl_stmt|;
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|abbv
condition|?
name|a
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
else|:
name|a
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|abbv
condition|?
name|b
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
else|:
name|b
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hMajor
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Major(s)"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hMajor
argument_list|)
expr_stmt|;
name|hMajor
operator|.
name|setWidth
argument_list|(
literal|"100px"
argument_list|)
expr_stmt|;
name|hMajor
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isMajorAbbv
argument_list|()
condition|?
literal|"Show Names"
else|:
literal|"Show Codes"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|abbv
init|=
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isMajorAbbv
argument_list|()
decl_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|setMajorAbbv
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|HTML
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
argument_list|)
operator|)
operator|.
name|setHTML
argument_list|(
name|abbv
condition|?
name|c
operator|.
name|getMajorCodes
argument_list|(
literal|", "
argument_list|)
else|:
name|c
operator|.
name|getMajorNames
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HTML
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|3
argument_list|)
operator|)
operator|.
name|setWordWrap
argument_list|(
name|abbv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hMajor
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Major(s)"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|boolean
name|abbv
init|=
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|isMajorAbbv
argument_list|()
decl_stmt|;
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|abbv
condition|?
name|a
operator|.
name|getMajorCodes
argument_list|(
literal|"|"
argument_list|)
else|:
name|a
operator|.
name|getMajorNames
argument_list|(
literal|"|"
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|abbv
condition|?
name|b
operator|.
name|getMajorCodes
argument_list|(
literal|"|"
argument_list|)
else|:
name|b
operator|.
name|getMajorNames
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hDept
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Department"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hDept
argument_list|)
expr_stmt|;
name|hDept
operator|.
name|setWidth
argument_list|(
literal|"100px"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|DeptMode
name|m
range|:
name|DeptMode
operator|.
name|values
argument_list|()
control|)
block|{
name|hDept
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Show "
operator|+
name|m
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|m
operator|!=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|getDeptMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
operator|.
name|setDeptMode
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|DisplayMode
name|dm
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|4
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|dm
operator|.
name|formatDepartment
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|hDept
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Department"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|DisplayMode
name|dm
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
decl_stmt|;
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
name|dm
operator|.
name|formatDepartment
argument_list|(
name|a
operator|.
name|getDepartment
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|dm
operator|.
name|formatDepartment
argument_list|(
name|b
operator|.
name|getDepartment
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLastLike
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Last-Like<br>Enrollment"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLastLike
argument_list|)
expr_stmt|;
name|hLastLike
operator|.
name|setWidth
argument_list|(
literal|"90px"
argument_list|)
expr_stmt|;
name|hLastLike
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Last-Like Enrollment"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|Integer
name|e
init|=
operator|(
name|a
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|a
operator|.
name|getLastLike
argument_list|()
operator|)
decl_stmt|;
name|Integer
name|f
init|=
operator|(
name|b
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|b
operator|.
name|getLastLike
argument_list|()
operator|)
decl_stmt|;
name|int
name|cmp
init|=
name|f
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hProjected
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Projection<br>by&nbsp;Rule"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hProjected
argument_list|)
expr_stmt|;
name|hProjected
operator|.
name|setWidth
argument_list|(
literal|"90px"
argument_list|)
expr_stmt|;
name|hProjected
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Curriculum Projection Rules"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|openCurriculumProjectionRules
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hProjected
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Projection by Rule"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|Integer
name|e
init|=
operator|(
name|a
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|a
operator|.
name|getProjection
argument_list|()
operator|)
decl_stmt|;
name|Integer
name|f
init|=
operator|(
name|b
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|b
operator|.
name|getProjection
argument_list|()
operator|)
decl_stmt|;
name|int
name|cmp
init|=
name|f
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hExpected
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Requested<br>Enrollment"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hExpected
argument_list|)
expr_stmt|;
name|hExpected
operator|.
name|setWidth
argument_list|(
literal|"90px"
argument_list|)
expr_stmt|;
name|hExpected
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Requested Enrollment"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|Integer
name|e
init|=
operator|(
name|a
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|a
operator|.
name|getExpected
argument_list|()
operator|)
decl_stmt|;
name|Integer
name|f
init|=
operator|(
name|b
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|b
operator|.
name|getExpected
argument_list|()
operator|)
decl_stmt|;
name|int
name|cmp
init|=
name|f
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hEnrolled
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"Current<br>Enrollment"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEnrolled
argument_list|)
expr_stmt|;
name|hEnrolled
operator|.
name|setWidth
argument_list|(
literal|"90px"
argument_list|)
expr_stmt|;
name|hEnrolled
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sort by Current Enrollment"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLastSort
operator|=
operator|new
name|Comparator
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|CurriculumInterface
name|a
parameter_list|,
name|CurriculumInterface
name|b
parameter_list|)
block|{
name|Integer
name|e
init|=
operator|(
name|a
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|a
operator|.
name|getEnrollment
argument_list|()
operator|)
decl_stmt|;
name|Integer
name|f
init|=
operator|(
name|b
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|-
literal|1
else|:
name|b
operator|.
name|getEnrollment
argument_list|()
operator|)
decl_stmt|;
name|int
name|cmp
init|=
name|f
operator|.
name|compareTo
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|a
operator|.
name|compareTo
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMargin
argument_list|(
literal|20
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iLoadingImage
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iLoadingImage
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iLoadingImage
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|=
operator|new
name|Label
argument_list|(
literal|"No data."
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Message"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iErrorLabel
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|setLastSelectedRow
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
expr_stmt|;
name|CurriculumClickedEvent
name|e
init|=
operator|new
name|CurriculumClickedEvent
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|CurriculumClickHandler
name|h
range|:
name|iCurriculumClickHandlers
control|)
block|{
name|h
operator|.
name|onClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iLoadClassifications
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
name|classifications
parameter_list|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|<=
literal|1
condition|)
return|return;
name|List
argument_list|<
name|Integer
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|CurriculumInterface
name|last
init|=
literal|null
decl_stmt|;
name|clasf
label|:
for|for
control|(
name|CurriculumClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
name|last
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getCurriculumId
argument_list|()
argument_list|)
condition|)
block|{
name|last
operator|.
name|addClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
continue|continue
name|clasf
continue|;
block|}
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getCurriculumId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|hasClassifications
argument_list|()
condition|)
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|c
operator|.
name|addClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|last
operator|=
name|c
expr_stmt|;
continue|continue
name|clasf
continue|;
block|}
block|}
block|}
for|for
control|(
name|int
name|row
range|:
name|rows
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|5
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|c
operator|.
name|getLastLikeString
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|6
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|c
operator|.
name|getProjectionString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|7
argument_list|)
operator|instanceof
name|Image
condition|)
block|{
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|7
argument_list|,
operator|new
name|Label
argument_list|(
name|c
operator|.
name|getExpectedString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
literal|7
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|7
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|c
operator|.
name|getExpectedString
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|Label
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|8
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|c
operator|.
name|getEnrollmentString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Long
argument_list|>
name|noEnrl
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
operator|!
name|c
operator|.
name|hasClassifications
argument_list|()
condition|)
block|{
name|noEnrl
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|noEnrl
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|7
argument_list|,
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
literal|7
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|noEnrl
operator|.
name|size
argument_list|()
operator|>=
literal|10
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|noEnrl
operator|.
name|isEmpty
argument_list|()
condition|)
name|iService
operator|.
name|loadClassifications
argument_list|(
name|noEnrl
argument_list|,
name|iLoadClassifications
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iLastSort
operator|!=
literal|null
condition|)
name|iTable
operator|.
name|sort
argument_list|(
name|iLastSort
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iClassifications
operator|=
operator|new
name|CurriculaClassifications
argument_list|()
expr_stmt|;
name|iClassificationsPopup
operator|=
operator|new
name|PopupPanel
argument_list|()
expr_stmt|;
name|iClassificationsPopup
operator|.
name|setWidget
argument_list|(
name|iClassifications
argument_list|)
expr_stmt|;
name|iClassificationsPopup
operator|.
name|setStyleName
argument_list|(
literal|"unitime-PopupHint"
argument_list|)
expr_stmt|;
name|iService
operator|.
name|isAdmin
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|iIsAdmin
operator|=
name|result
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setHintProvider
argument_list|(
operator|new
name|HintProvider
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Widget
name|getHint
parameter_list|(
name|TableEvent
argument_list|<
name|CurriculumInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|event
operator|.
name|getData
argument_list|()
operator|.
name|hasClassifications
argument_list|()
condition|)
return|return
literal|null
return|;
name|iClassifications
operator|.
name|populate
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClassifications
argument_list|()
argument_list|)
expr_stmt|;
name|iClassifications
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|iClassifications
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iOperations
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|PopupPanel
name|popup
init|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hSelect
operator|.
name|setMenu
argument_list|(
name|popup
argument_list|)
condition|)
return|return;
name|popup
operator|.
name|showRelativeTo
argument_list|(
name|iOperations
argument_list|)
expr_stmt|;
operator|(
operator|(
name|MenuBar
operator|)
name|popup
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLastSelectedRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
if|if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|r
argument_list|)
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|r
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|iLastCurriculumId
operator|=
name|c
operator|.
name|getId
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLastCurriculumId
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|iLastCurriculumId
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|selected
parameter_list|()
block|{
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|selected
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
operator|&&
name|iSelectedCurricula
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|selected
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|selected
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|Long
argument_list|>
name|markSelected
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|markedIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
operator|&&
operator|(
name|iSelectedCurricula
operator|.
name|isEmpty
argument_list|()
operator|||
name|iSelectedCurricula
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|markedIds
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowProblem"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|markedIds
return|;
block|}
specifier|protected
name|void
name|unmarkSelected
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
operator|&&
operator|(
name|iSelectedCurricula
operator|.
name|isEmpty
argument_list|()
operator|||
name|iSelectedCurricula
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastCurriculumId
argument_list|)
condition|?
literal|"unitime-TableRowSelected"
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|markAll
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowProblem"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|unmarkAll
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|c
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|c
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastCurriculumId
argument_list|)
condition|?
literal|"unitime-TableRowSelected"
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setup
parameter_list|(
name|List
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|classifications
parameter_list|)
block|{
name|iClassifications
operator|.
name|setup
argument_list|(
name|classifications
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iErrorLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Message"
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setText
argument_list|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iErrorLabel
operator|.
name|isVisible
argument_list|()
condition|)
name|iErrorLabel
operator|.
name|getElement
argument_list|()
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iErrorLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setText
argument_list|(
name|message
operator|==
literal|null
condition|?
literal|""
else|:
name|message
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iErrorLabel
operator|.
name|isVisible
argument_list|()
condition|)
name|iErrorLabel
operator|.
name|getElement
argument_list|()
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|fillRow
parameter_list|(
name|CurriculumInterface
name|c
parameter_list|)
block|{
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isEditable
argument_list|()
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|cid
init|=
name|c
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|iSelectedCurricula
operator|.
name|contains
argument_list|(
name|cid
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
name|iSelectedCurricula
operator|.
name|add
argument_list|(
name|cid
argument_list|)
expr_stmt|;
else|else
name|iSelectedCurricula
operator|.
name|remove
argument_list|(
name|cid
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DisplayMode
name|m
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaDisplayMode
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|isCurriculumAbbv
argument_list|()
condition|?
name|c
operator|.
name|getAbbv
argument_list|()
else|:
name|c
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|isAreaAbbv
argument_list|()
condition|?
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
else|:
name|c
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|m
operator|.
name|isMajorAbbv
argument_list|()
condition|?
name|c
operator|.
name|getMajorCodes
argument_list|(
literal|", "
argument_list|)
else|:
name|c
operator|.
name|getMajorNames
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
name|m
operator|.
name|isMajorAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|m
operator|.
name|formatDepartment
argument_list|(
name|c
operator|.
name|getDepartment
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|c
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c
operator|.
name|getLastLikeString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|c
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c
operator|.
name|getProjectionString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|c
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c
operator|.
name|getExpectedString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|c
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|c
operator|.
name|getEnrollmentString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setRow
argument_list|(
name|row
argument_list|,
name|c
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
literal|5
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
literal|6
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
literal|7
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
literal|8
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|result
parameter_list|,
name|boolean
name|editable
parameter_list|)
block|{
name|iTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setError
argument_list|(
literal|"No curricula matching the above filter found."
argument_list|)
expr_stmt|;
return|return;
block|}
name|setMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|rowToScroll
init|=
operator|-
literal|1
decl_stmt|;
name|boolean
name|hasEditable
init|=
literal|false
decl_stmt|;
name|HashSet
argument_list|<
name|Long
argument_list|>
name|newlySelected
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CurriculumInterface
name|curriculum
range|:
name|result
control|)
block|{
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|<
literal|10
operator|&&
operator|!
name|curriculum
operator|.
name|hasClassifications
argument_list|()
condition|)
name|ids
operator|.
name|add
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|isEditable
argument_list|()
operator|&&
name|editable
condition|)
name|hasEditable
operator|=
literal|true
expr_stmt|;
name|fillRow
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastCurriculumId
argument_list|)
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|1
operator|+
name|row
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
name|rowToScroll
operator|=
literal|1
operator|+
name|row
expr_stmt|;
block|}
if|if
condition|(
name|curriculum
operator|.
name|isEditable
argument_list|()
operator|&&
name|editable
operator|&&
name|iSelectedCurricula
operator|.
name|contains
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|newlySelected
operator|.
name|add
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iTable
operator|.
name|setWidget
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|1
argument_list|,
literal|7
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
block|}
name|iSelectedCurricula
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iSelectedCurricula
operator|.
name|addAll
argument_list|(
name|newlySelected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasEditable
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|iOperations
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iOperations
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rowToScroll
operator|>=
literal|0
condition|)
block|{
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|rowToScroll
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
name|iService
operator|.
name|loadClassifications
argument_list|(
name|ids
argument_list|,
name|iLoadClassifications
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|query
parameter_list|(
name|String
name|filter
parameter_list|,
specifier|final
name|Command
name|next
parameter_list|)
block|{
name|iLastQuery
operator|=
name|filter
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|setMessage
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iService
operator|.
name|findCurricula
argument_list|(
name|filter
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setError
argument_list|(
literal|"Unable to retrieve curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|scrollIntoView
parameter_list|()
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
if|if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|r
argument_list|)
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|r
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|openCurriculumProjectionRules
parameter_list|()
block|{
specifier|final
name|DialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|CurriculumProjectionRulesPage
name|rules
init|=
operator|new
name|CurriculumProjectionRulesPage
argument_list|()
decl_stmt|;
name|rules
operator|.
name|setAllowClose
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rules
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginRight
argument_list|(
name|ToolBox
operator|.
name|getScrollBarWidth
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|rules
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|rules
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingRight
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
specifier|final
name|ScrollPanel
name|panel
init|=
operator|new
name|ScrollPanel
argument_list|(
name|rules
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|round
argument_list|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
literal|"Curriculum Projection Rules"
argument_list|)
expr_stmt|;
name|rules
operator|.
name|addProjectionRulesHandler
argument_list|(
operator|new
name|CurriculumProjectionRulesPage
operator|.
name|ProjectionRulesHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onRulesSaved
parameter_list|(
name|ProjectionRulesEvent
name|evt
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|query
argument_list|(
name|iLastQuery
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRulesLoaded
parameter_list|(
name|ProjectionRulesEvent
name|evt
parameter_list|)
block|{
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
comment|//panel.setWidth((ToolBox.getScrollBarWidth() + rules.getOffsetWidth()) + "px");
block|}
annotation|@
name|Override
specifier|public
name|void
name|onRulesClosed
parameter_list|(
name|ProjectionRulesEvent
name|evt
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onException
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setError
argument_list|(
literal|"Unable to open curriculum projection rules ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|CurriculumClickedEvent
block|{
specifier|private
name|CurriculumInterface
name|iCurriculum
decl_stmt|;
specifier|public
name|CurriculumClickedEvent
parameter_list|(
name|CurriculumInterface
name|curriculum
parameter_list|)
block|{
name|iCurriculum
operator|=
name|curriculum
expr_stmt|;
block|}
specifier|public
name|CurriculumInterface
name|getCurriculum
parameter_list|()
block|{
return|return
name|iCurriculum
return|;
block|}
block|}
specifier|public
interface|interface
name|CurriculumClickHandler
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|CurriculumClickedEvent
name|evt
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addCurriculumClickHandler
parameter_list|(
name|CurriculumClickHandler
name|h
parameter_list|)
block|{
name|iCurriculumClickHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|getCurricula
parameter_list|()
block|{
return|return
name|iTable
operator|.
name|getData
argument_list|()
return|;
block|}
specifier|public
interface|interface
name|EditClassificationHandler
block|{
specifier|public
name|void
name|doEdit
parameter_list|(
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|curricula
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|setEditClassificationHandler
parameter_list|(
name|EditClassificationHandler
name|h
parameter_list|)
block|{
name|iEditClassificationHandler
operator|=
name|h
expr_stmt|;
block|}
specifier|public
name|Button
name|getOperations
parameter_list|()
block|{
return|return
name|iOperations
return|;
block|}
specifier|public
specifier|static
enum|enum
name|DeptMode
block|{
name|CODE
argument_list|(
literal|'0'
argument_list|,
literal|"Code"
argument_list|)
block|,
name|ABBV
argument_list|(
literal|'1'
argument_list|,
literal|"Abbreviation"
argument_list|)
block|,
name|NAME
argument_list|(
literal|'2'
argument_list|,
literal|"Name"
argument_list|)
block|,
name|ABBV_NAME
argument_list|(
literal|'3'
argument_list|,
literal|"Abbv - Name"
argument_list|)
block|,
name|CODE_NAME
argument_list|(
literal|'4'
argument_list|,
literal|"Code - Name"
argument_list|)
block|;
specifier|private
name|char
name|iCode
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
name|DeptMode
parameter_list|(
name|char
name|code
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|iCode
operator|=
name|code
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|char
name|getCode
parameter_list|()
block|{
return|return
name|iCode
return|;
block|}
block|}
specifier|public
specifier|abstract
specifier|static
class|class
name|DisplayMode
block|{
specifier|private
name|boolean
name|iCurriculumAbbv
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iAreaAbbv
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iMajorAbbv
init|=
literal|false
decl_stmt|;
specifier|private
name|DeptMode
name|iDeptMode
init|=
name|DeptMode
operator|.
name|ABBV_NAME
decl_stmt|;
specifier|public
name|boolean
name|isCurriculumAbbv
parameter_list|()
block|{
return|return
name|iCurriculumAbbv
return|;
block|}
specifier|public
name|void
name|setCurriculumAbbv
parameter_list|(
name|boolean
name|curriculumAbbv
parameter_list|)
block|{
name|iCurriculumAbbv
operator|=
name|curriculumAbbv
expr_stmt|;
name|changed
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isAreaAbbv
parameter_list|()
block|{
return|return
name|iAreaAbbv
return|;
block|}
specifier|public
name|void
name|setAreaAbbv
parameter_list|(
name|boolean
name|areaAbbv
parameter_list|)
block|{
name|iAreaAbbv
operator|=
name|areaAbbv
expr_stmt|;
name|changed
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isMajorAbbv
parameter_list|()
block|{
return|return
name|iMajorAbbv
return|;
block|}
specifier|public
name|void
name|setMajorAbbv
parameter_list|(
name|boolean
name|majorAbbv
parameter_list|)
block|{
name|iMajorAbbv
operator|=
name|majorAbbv
expr_stmt|;
name|changed
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DeptMode
name|getDeptMode
parameter_list|()
block|{
return|return
name|iDeptMode
return|;
block|}
specifier|public
name|void
name|setDeptMode
parameter_list|(
name|DeptMode
name|deptMode
parameter_list|)
block|{
name|iDeptMode
operator|=
name|deptMode
expr_stmt|;
name|changed
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|formatDepartment
parameter_list|(
name|DepartmentInterface
name|dept
parameter_list|)
block|{
switch|switch
condition|(
name|iDeptMode
condition|)
block|{
case|case
name|CODE
case|:
return|return
name|dept
operator|.
name|getCode
argument_list|()
return|;
case|case
name|ABBV
case|:
return|return
operator|(
name|dept
operator|.
name|getAbbv
argument_list|()
operator|==
literal|null
operator|||
name|dept
operator|.
name|getAbbv
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|dept
operator|.
name|getCode
argument_list|()
else|:
name|dept
operator|.
name|getAbbv
argument_list|()
operator|)
return|;
case|case
name|NAME
case|:
return|return
name|dept
operator|.
name|getName
argument_list|()
return|;
case|case
name|CODE_NAME
case|:
return|return
name|dept
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|dept
operator|.
name|getName
argument_list|()
return|;
default|default:
return|return
operator|(
name|dept
operator|.
name|getAbbv
argument_list|()
operator|==
literal|null
operator|||
name|dept
operator|.
name|getAbbv
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|dept
operator|.
name|getCode
argument_list|()
else|:
name|dept
operator|.
name|getAbbv
argument_list|()
operator|)
operator|+
literal|" - "
operator|+
name|dept
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|ret
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|iCurriculumAbbv
condition|)
name|ret
operator|+=
literal|"c"
expr_stmt|;
if|if
condition|(
name|iAreaAbbv
condition|)
name|ret
operator|+=
literal|"a"
expr_stmt|;
if|if
condition|(
name|iMajorAbbv
condition|)
name|ret
operator|+=
literal|"m"
expr_stmt|;
name|ret
operator|+=
name|iDeptMode
operator|.
name|getCode
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|public
name|void
name|fromString
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|iCurriculumAbbv
operator|=
operator|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'c'
argument_list|)
operator|>=
literal|0
operator|)
expr_stmt|;
name|iAreaAbbv
operator|=
operator|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'a'
argument_list|)
operator|>=
literal|0
operator|)
expr_stmt|;
name|iMajorAbbv
operator|=
operator|(
name|str
operator|.
name|indexOf
argument_list|(
literal|'m'
argument_list|)
operator|>=
literal|0
operator|)
expr_stmt|;
for|for
control|(
name|DeptMode
name|m
range|:
name|DeptMode
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|str
operator|.
name|indexOf
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|iDeptMode
operator|=
name|m
expr_stmt|;
break|break;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|changed
parameter_list|()
function_decl|;
block|}
specifier|public
name|CurriculumInterface
name|next
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|iTable
operator|.
name|getData
argument_list|(
literal|1
operator|+
name|row
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|CurriculumInterface
name|previous
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|CurriculumInterface
name|c
init|=
name|iTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|id
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|iTable
operator|.
name|getData
argument_list|(
name|row
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

