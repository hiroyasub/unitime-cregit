begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|MenuServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicAreaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|MajorInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueBoxBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculumProjectionRulesPage
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CurriculaServiceAsync
name|iService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|CurriculaService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MenuServiceAsync
name|iMenuService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|MenuService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|NumberFormat
name|NF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"##0.0"
argument_list|)
decl_stmt|;
specifier|private
name|MyFlexTable
name|iTable
decl_stmt|;
specifier|private
name|SimpleForm
name|iPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
init|=
literal|null
decl_stmt|,
name|iBottom
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iEditable
init|=
literal|false
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|iRules
init|=
literal|null
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iOrder
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ProjectionRulesHandler
argument_list|>
name|iProjectionRulesHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ProjectionRulesHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CurriculumProjectionRulesPage
parameter_list|()
block|{
name|iPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|ClickHandler
name|save
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Saving curriculum projection rules ..."
argument_list|)
expr_stmt|;
name|iService
operator|.
name|saveProjectionRules
argument_list|(
name|iRules
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to save curricula projection rules ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|ProjectionRulesHandler
name|h
range|:
name|iProjectionRulesHandlers
control|)
block|{
name|h
operator|.
name|onException
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|ProjectionRulesEvent
name|e
init|=
operator|new
name|ProjectionRulesEvent
argument_list|()
decl_stmt|;
for|for
control|(
name|ProjectionRulesHandler
name|h
range|:
name|iProjectionRulesHandlers
control|)
block|{
name|h
operator|.
name|onRulesSaved
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iHeader
operator|.
name|isEnabled
argument_list|(
literal|"close"
argument_list|)
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iEditable
operator|=
literal|false
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|close
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|ProjectionRulesEvent
name|e
init|=
operator|new
name|ProjectionRulesEvent
argument_list|()
decl_stmt|;
for|for
control|(
name|ProjectionRulesHandler
name|h
range|:
name|iProjectionRulesHandlers
control|)
block|{
name|h
operator|.
name|onRulesClosed
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|ClickHandler
name|print
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|Window
operator|.
name|print
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|edit
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEditable
operator|=
literal|true
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ClickHandler
name|back
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEditable
operator|=
literal|false
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"edit"
argument_list|,
literal|"<u>E</u>dit"
argument_list|,
literal|'s'
argument_list|,
literal|75
argument_list|,
name|edit
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
literal|"<u>S</u>ave"
argument_list|,
literal|'s'
argument_list|,
literal|75
argument_list|,
name|save
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"print"
argument_list|,
literal|"<u>P</u>rint"
argument_list|,
literal|'p'
argument_list|,
literal|75
argument_list|,
name|print
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
literal|"<u>C</u>lose"
argument_list|,
literal|'c'
argument_list|,
literal|75
argument_list|,
name|close
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
literal|"<u>B</u>ack"
argument_list|,
literal|'b'
argument_list|,
literal|75
argument_list|,
name|back
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|MyFlexTable
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iBottom
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addNotPrintableBottomRow
argument_list|(
name|iBottom
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"close"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|reload
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"back"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Loading curriculum projection rules ..."
argument_list|)
expr_stmt|;
name|iService
operator|.
name|loadProjectionRules
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Loading failed ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|ProjectionRulesHandler
name|h
range|:
name|iProjectionRulesHandlers
control|)
block|{
name|h
operator|.
name|onException
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HashMap
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
name|iRules
operator|=
name|result
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ordRequest
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ordRequest
operator|.
name|add
argument_list|(
literal|"CurProjRules.Order"
argument_list|)
expr_stmt|;
for|for
control|(
name|AcademicAreaInterface
name|area
range|:
name|iRules
operator|.
name|keySet
argument_list|()
control|)
name|ordRequest
operator|.
name|add
argument_list|(
literal|"CurProjRules.Order["
operator|+
name|area
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iMenuService
operator|.
name|getUserData
argument_list|(
name|ordRequest
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
parameter_list|)
block|{
name|iOrder
operator|=
name|result
expr_stmt|;
name|refreshTableAndAll
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|refreshTableAndAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshTableAndAll
parameter_list|()
block|{
try|try
block|{
name|refreshTable
argument_list|()
expr_stmt|;
name|iService
operator|.
name|canEditProjectionRules
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
block|{
if|if
condition|(
name|iHeader
operator|.
name|isEnabled
argument_list|(
literal|"close"
argument_list|)
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iEditable
operator|=
literal|true
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"edit"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|ProjectionRulesEvent
name|e
init|=
operator|new
name|ProjectionRulesEvent
argument_list|()
decl_stmt|;
for|for
control|(
name|ProjectionRulesHandler
name|h
range|:
name|iProjectionRulesHandlers
control|)
block|{
name|h
operator|.
name|onRulesLoaded
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Loading failed ("
operator|+
name|t
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProjectionRulesHandler
name|h
range|:
name|iProjectionRulesHandlers
control|)
block|{
name|h
operator|.
name|onException
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setAllowClose
parameter_list|(
name|boolean
name|allow
parameter_list|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"close"
argument_list|,
name|allow
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isUsed
parameter_list|(
name|AcademicClassificationInterface
name|c
parameter_list|)
block|{
name|MajorInterface
name|defaultMajor
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|defaultMajor
operator|.
name|setId
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|iRules
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|defaultMajor
argument_list|)
operator|.
name|get
argument_list|(
name|c
argument_list|)
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|canCombine
parameter_list|(
name|AcademicClassificationInterface
name|c1
parameter_list|,
name|Set
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|s2
parameter_list|)
block|{
name|MajorInterface
name|defaultMajor
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|defaultMajor
operator|.
name|setId
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|AcademicAreaInterface
argument_list|,
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|iRules
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|defaultMajor
argument_list|)
operator|.
name|get
argument_list|(
name|c1
argument_list|)
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
for|for
control|(
name|AcademicClassificationInterface
name|c2
range|:
name|s2
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
name|defaultMajor
argument_list|)
operator|.
name|get
argument_list|(
name|c2
argument_list|)
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|updateAll
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|1
init|;
name|col
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
operator|(
operator|(
name|Updatable
operator|)
name|w
operator|)
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|refreshTable
parameter_list|()
throws|throws
name|CurriculaException
block|{
for|for
control|(
name|int
name|row
init|=
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
name|iTable
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRules
operator|==
literal|null
operator|||
name|iRules
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"No academic areas defined."
argument_list|)
throw|;
name|String
name|areaOrd
init|=
operator|(
name|iOrder
operator|==
literal|null
condition|?
literal|null
else|:
name|iOrder
operator|.
name|get
argument_list|(
literal|"CurProjRules.Order"
argument_list|)
operator|)
decl_stmt|;
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|areas
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|areaOrd
operator|!=
literal|null
operator|&&
name|areaOrd
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|ord
init|=
literal|"|"
operator|+
name|areaOrd
operator|+
literal|"|"
decl_stmt|;
name|areas
operator|=
operator|new
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|AcademicAreaInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|AcademicAreaInterface
name|a1
parameter_list|,
name|AcademicAreaInterface
name|a2
parameter_list|)
block|{
name|int
name|i1
init|=
name|ord
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|a1
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i1
operator|>=
literal|0
condition|)
block|{
name|int
name|i2
init|=
name|ord
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|a2
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i2
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|i1
operator|<
name|i2
condition|?
operator|-
literal|1
else|:
name|i1
operator|>
name|i2
condition|?
literal|1
else|:
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
operator|)
return|;
block|}
block|}
return|return
name|a1
operator|.
name|compareTo
argument_list|(
name|a2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|areas
operator|.
name|addAll
argument_list|(
name|iRules
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|areas
operator|=
operator|new
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
argument_list|(
name|iRules
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|classifications
init|=
literal|null
decl_stmt|;
name|MajorInterface
name|defaultMajor
init|=
operator|new
name|MajorInterface
argument_list|()
decl_stmt|;
name|defaultMajor
operator|.
name|setId
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Set
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|>
name|col2clasf
init|=
operator|new
name|ArrayList
argument_list|<
name|Set
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Integer
argument_list|>
name|clasf2col
init|=
operator|new
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|MyCell
argument_list|>
argument_list|>
name|col2cells
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|MyCell
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|row
init|=
literal|1
decl_stmt|;
for|for
control|(
name|AcademicAreaInterface
name|area
range|:
name|areas
control|)
block|{
name|HashMap
argument_list|<
name|MajorInterface
argument_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
argument_list|>
name|rules
init|=
name|iRules
operator|.
name|get
argument_list|(
name|area
argument_list|)
decl_stmt|;
name|MyRow
name|rr
init|=
operator|new
name|MyRow
argument_list|(
name|area
argument_list|,
literal|null
argument_list|,
name|rules
operator|.
name|get
argument_list|(
name|defaultMajor
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|classifications
operator|==
literal|null
condition|)
block|{
name|classifications
operator|=
name|rr
operator|.
name|getClassifications
argument_list|()
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
if|if
condition|(
operator|!
name|isUsed
argument_list|(
name|clasf
argument_list|)
condition|)
continue|continue;
name|Integer
name|col
init|=
name|clasf2col
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|col2clasf
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
if|if
condition|(
name|canCombine
argument_list|(
name|clasf
argument_list|,
name|col2clasf
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|col2clasf
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|clasf2col
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|col
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
name|Set
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|s
init|=
operator|new
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|()
decl_stmt|;
name|s
operator|.
name|add
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
name|col
operator|=
name|col2clasf
operator|.
name|size
argument_list|()
expr_stmt|;
name|col2clasf
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|clasf2col
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|rr
operator|.
name|hasLastLike
argument_list|()
condition|)
continue|continue;
name|iTable
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|area
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
if|if
condition|(
name|rr
operator|.
name|getLastLike
argument_list|(
name|clasf
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|Integer
name|col
init|=
name|clasf2col
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
name|MyCell
name|cell
init|=
operator|new
name|MyCell
argument_list|(
name|rr
argument_list|,
name|clasf
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|cellsThisCol
init|=
name|col2cells
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellsThisCol
operator|==
literal|null
condition|)
block|{
name|cellsThisCol
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|col2cells
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|cellsThisCol
argument_list|)
expr_stmt|;
block|}
name|cellsThisCol
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|MySumCell
argument_list|(
name|cells
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|String
name|majorOrd
init|=
operator|(
name|iOrder
operator|==
literal|null
condition|?
literal|null
else|:
name|iOrder
operator|.
name|get
argument_list|(
literal|"CurProjRules.Order["
operator|+
name|area
operator|.
name|getAbbv
argument_list|()
operator|+
literal|"]"
argument_list|)
operator|)
decl_stmt|;
name|TreeSet
argument_list|<
name|MajorInterface
argument_list|>
name|majors
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|majorOrd
operator|!=
literal|null
operator|&&
name|majorOrd
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
name|ord
init|=
literal|"|"
operator|+
name|majorOrd
operator|+
literal|"|"
decl_stmt|;
name|majors
operator|=
operator|new
name|TreeSet
argument_list|<
name|MajorInterface
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|MajorInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|MajorInterface
name|m1
parameter_list|,
name|MajorInterface
name|m2
parameter_list|)
block|{
name|int
name|i1
init|=
name|ord
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|m1
operator|.
name|getCode
argument_list|()
operator|+
literal|"|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i1
operator|>=
literal|0
condition|)
block|{
name|int
name|i2
init|=
name|ord
operator|.
name|indexOf
argument_list|(
literal|"|"
operator|+
name|m2
operator|.
name|getCode
argument_list|()
operator|+
literal|"|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|i2
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|i1
operator|<
name|i2
condition|?
operator|-
literal|1
else|:
name|i1
operator|>
name|i2
condition|?
literal|1
else|:
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
operator|)
return|;
block|}
block|}
return|return
name|m1
operator|.
name|compareTo
argument_list|(
name|m2
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|majors
operator|.
name|addAll
argument_list|(
name|iRules
operator|.
name|get
argument_list|(
name|area
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|majors
operator|=
operator|new
name|TreeSet
argument_list|<
name|MajorInterface
argument_list|>
argument_list|(
name|iRules
operator|.
name|get
argument_list|(
name|area
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MajorInterface
name|major
range|:
name|majors
control|)
block|{
if|if
condition|(
name|major
operator|.
name|getId
argument_list|()
operator|<
literal|0
condition|)
continue|continue;
name|MyRow
name|r
init|=
operator|new
name|MyRow
argument_list|(
name|area
argument_list|,
name|major
argument_list|,
name|rules
operator|.
name|get
argument_list|(
name|major
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|r
operator|.
name|hasLastLike
argument_list|()
condition|)
continue|continue;
name|r
operator|.
name|setParent
argument_list|(
name|rr
argument_list|)
expr_stmt|;
name|rr
operator|.
name|addChild
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Label
name|majorLabel
init|=
operator|new
name|Label
argument_list|(
name|major
operator|.
name|getCode
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|majorLabel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|majorLabel
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|mcells
init|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|classifications
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getLastLike
argument_list|(
name|clasf
argument_list|)
operator|<=
literal|0
condition|)
continue|continue;
name|Integer
name|col
init|=
name|clasf2col
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
decl_stmt|;
name|MyCell
name|cell
init|=
operator|new
name|MyCell
argument_list|(
name|r
argument_list|,
name|clasf
argument_list|)
decl_stmt|;
name|mcells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|cellsThisCol
init|=
name|col2cells
operator|.
name|get
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellsThisCol
operator|==
literal|null
condition|)
block|{
name|cellsThisCol
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
expr_stmt|;
name|col2cells
operator|.
name|put
argument_list|(
name|col
argument_list|,
name|cellsThisCol
argument_list|)
expr_stmt|;
block|}
name|cellsThisCol
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|MySumCell
argument_list|(
name|mcells
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|r
operator|.
name|hasProjection
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|classifications
operator|==
literal|null
operator|||
name|classifications
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"No academic classifications defined."
argument_list|)
throw|;
name|ClickHandler
name|menu
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|PopupPanel
name|popup
init|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MenuBar
name|menu
init|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
condition|)
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Show Numbers"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculumProjectionRulesPercent
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Show Percentages"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculumProjectionRulesPercent
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesShowLastLike
argument_list|()
condition|)
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Hide Last-Like Enrollments"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculumProjectionRulesShowLastLike
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Show Last-Like Enrollments"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculumProjectionRulesShowLastLike
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateAll
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|canCollapse
init|=
literal|false
decl_stmt|,
name|canExpand
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|MyRow
name|r
init|=
name|iTable
operator|.
name|getMyRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|hasProjection
argument_list|()
condition|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
condition|)
name|canCollapse
operator|=
literal|true
expr_stmt|;
else|else
name|canExpand
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|canCollapse
condition|)
block|{
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Collapse All"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|MyRow
name|r
init|=
name|iTable
operator|.
name|getMyRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|hasProjection
argument_list|()
condition|)
block|{
if|if
condition|(
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canExpand
condition|)
block|{
name|menu
operator|.
name|addItem
argument_list|(
operator|new
name|MenuItem
argument_list|(
literal|"Expand All"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|MyRow
name|r
init|=
name|iTable
operator|.
name|getMyRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|r
operator|.
name|hasProjection
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
condition|)
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|popup
operator|.
name|showRelativeTo
argument_list|(
operator|(
name|Widget
operator|)
name|event
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|col2clasf
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|String
name|text
init|=
literal|""
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|col2clasf
operator|.
name|get
argument_list|(
name|c
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|+=
literal|" / "
expr_stmt|;
name|text
operator|+=
name|clasf
operator|.
name|getCode
argument_list|()
expr_stmt|;
block|}
name|Label
name|label
init|=
operator|new
name|Label
argument_list|(
name|text
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|label
operator|.
name|addClickHandler
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|c
operator|+
literal|1
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|c
operator|+
literal|1
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
name|c
operator|+
literal|1
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
name|HTML
name|label
init|=
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|label
operator|.
name|addClickHandler
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|HTML
name|totals
init|=
operator|new
name|HTML
argument_list|(
literal|"Total"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|totals
operator|.
name|addClickHandler
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col2clasf
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col2clasf
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|totals
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|==
literal|1
condition|)
throw|throw
operator|new
name|CurriculaException
argument_list|(
literal|"No last-like enrollments."
argument_list|)
throw|;
name|iTable
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
literal|"Total"
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MyCell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|col2clasf
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|List
argument_list|<
name|MyCell
argument_list|>
name|cellsThisCol
init|=
name|col2cells
operator|.
name|get
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|cellsThisCol
operator|==
literal|null
operator|||
name|cellsThisCol
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|cells
operator|.
name|addAll
argument_list|(
name|cellsThisCol
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|c
argument_list|,
operator|new
name|MySumCell
argument_list|(
name|cellsThisCol
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|c
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|MySumCell
argument_list|(
name|cells
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
name|iTable
operator|.
name|getCellCount
argument_list|(
name|r
argument_list|)
init|;
name|c
operator|<
literal|1
operator|+
name|col2clasf
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|iTable
operator|.
name|setHTML
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
name|iBottom
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iHeader
operator|.
name|isEnabled
argument_list|(
literal|"close"
argument_list|)
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|Updatable
block|{
specifier|public
name|void
name|update
parameter_list|()
function_decl|;
specifier|public
name|void
name|focus
parameter_list|()
function_decl|;
block|}
specifier|private
class|class
name|MyCell
extends|extends
name|Composite
implements|implements
name|Updatable
block|{
specifier|private
name|MyRow
name|iRow
decl_stmt|;
specifier|private
name|AcademicClassificationInterface
name|iClasf
decl_stmt|;
specifier|private
name|UniTimeTextBox
name|iTextBox
decl_stmt|;
specifier|private
name|HTML
name|iFrontLabel
decl_stmt|,
name|iRearLabel
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iPanel
decl_stmt|;
specifier|private
name|HTML
name|iHint
init|=
literal|null
decl_stmt|;
specifier|private
name|PopupPanel
name|iHintPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iCellEditable
init|=
literal|true
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MySumCell
argument_list|>
name|iSums
init|=
operator|new
name|ArrayList
argument_list|<
name|MySumCell
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MyCell
parameter_list|(
name|MyRow
name|row
parameter_list|,
name|AcademicClassificationInterface
name|clasf
parameter_list|)
block|{
name|iRow
operator|=
name|row
expr_stmt|;
name|iClasf
operator|=
name|clasf
expr_stmt|;
name|iRow
operator|.
name|setCell
argument_list|(
name|iClasf
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iTextBox
operator|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iRow
operator|.
name|setProjection
argument_list|(
name|iClasf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|iRow
operator|.
name|setProjection
argument_list|(
name|iClasf
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|/
literal|100.0f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRow
operator|.
name|setProjection
argument_list|(
name|iClasf
argument_list|,
name|Float
operator|.
name|valueOf
argument_list|(
name|iTextBox
operator|.
name|getText
argument_list|()
argument_list|)
operator|/
name|iRow
operator|.
name|getLastLike
argument_list|(
name|iClasf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iRow
operator|.
name|setProjection
argument_list|(
name|iClasf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRow
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
operator|&&
name|iRow
operator|.
name|getProjection
argument_list|(
name|iClasf
argument_list|)
operator|==
name|iRow
operator|.
name|getParent
argument_list|()
operator|.
name|getProjection
argument_list|(
name|iClasf
argument_list|)
condition|)
block|{
name|iRow
operator|.
name|setProjection
argument_list|(
name|iClasf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|MySumCell
name|sum
range|:
name|iSums
control|)
name|sum
operator|.
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|MyRow
name|r
range|:
name|iRow
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|iData
operator|.
name|get
argument_list|(
name|iClasf
argument_list|)
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|MyCell
name|c
init|=
name|r
operator|.
name|getCell
argument_list|(
name|iClasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|update
argument_list|()
expr_stmt|;
for|for
control|(
name|MySumCell
name|sum
range|:
name|c
operator|.
name|iSums
control|)
name|sum
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|=
operator|new
name|HTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iRow
operator|.
name|getLastLike
argument_list|(
name|iClasf
argument_list|)
argument_list|)
operator|+
literal|"&nbsp;&rarr;&nbsp;"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|.
name|setWidth
argument_list|(
literal|"55px"
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iRearLabel
operator|=
operator|new
name|HTML
argument_list|(
literal|"&nbsp;(of&nbsp;"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|iRow
operator|.
name|getLastLike
argument_list|(
name|iClasf
argument_list|)
argument_list|)
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setWidth
argument_list|(
literal|"55px"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iFrontLabel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iFrontLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iTextBox
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iTextBox
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iRearLabel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iRearLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|iHint
operator|=
operator|new
name|HTML
argument_list|(
literal|"Academic Area: "
operator|+
name|iRow
operator|.
name|getArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|iRow
operator|.
name|getArea
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<br>"
operator|+
operator|(
name|iRow
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"Major: "
operator|+
name|iRow
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|iRow
operator|.
name|getMajor
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"<br>"
operator|)
operator|+
literal|"Academic Classification: "
operator|+
name|iClasf
operator|.
name|getCode
argument_list|()
operator|+
literal|" - "
operator|+
name|iClasf
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHintPanel
operator|=
operator|new
name|PopupPanel
argument_list|()
expr_stmt|;
name|iHintPanel
operator|.
name|setWidget
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
name|iHintPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-PopupHint"
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addSum
parameter_list|(
name|MySumCell
name|sum
parameter_list|)
block|{
name|iSums
operator|.
name|add
argument_list|(
name|sum
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MySumCell
argument_list|>
name|getSums
parameter_list|()
block|{
return|return
name|iSums
return|;
block|}
specifier|public
name|void
name|focus
parameter_list|()
block|{
name|iTextBox
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
name|Element
name|tr
init|=
name|getElement
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|tr
operator|!=
literal|null
condition|;
name|tr
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
control|)
block|{
if|if
condition|(
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|tr
argument_list|,
literal|"tagName"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"tr"
argument_list|)
condition|)
break|break;
block|}
specifier|final
name|Element
name|e
init|=
name|tr
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
operator|!
name|iHintPanel
operator|.
name|isShowing
argument_list|()
condition|)
block|{
name|iHintPanel
operator|.
name|setPopupPositionAndShow
argument_list|(
operator|new
name|PopupPanel
operator|.
name|PositionCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|setPosition
parameter_list|(
name|int
name|offsetWidth
parameter_list|,
name|int
name|offsetHeight
parameter_list|)
block|{
name|boolean
name|top
init|=
operator|(
name|e
operator|.
name|getAbsoluteBottom
argument_list|()
operator|-
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
literal|15
operator|+
name|offsetHeight
operator|>
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
decl_stmt|;
name|iHintPanel
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|event
operator|.
name|getClientX
argument_list|()
argument_list|,
name|e
operator|.
name|getAbsoluteRight
argument_list|()
operator|-
name|offsetWidth
operator|-
literal|15
argument_list|)
argument_list|,
name|e
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
literal|15
argument_list|)
argument_list|,
name|top
condition|?
name|e
operator|.
name|getAbsoluteTop
argument_list|()
operator|-
name|offsetHeight
operator|-
literal|15
else|:
name|e
operator|.
name|getAbsoluteBottom
argument_list|()
operator|+
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|iHintPanel
operator|.
name|isShowing
argument_list|()
condition|)
name|iHintPanel
operator|.
name|hide
argument_list|()
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
if|if
condition|(
name|iHintPanel
operator|.
name|isShowing
argument_list|()
condition|)
block|{
name|boolean
name|top
init|=
operator|(
name|e
operator|.
name|getAbsoluteBottom
argument_list|()
operator|-
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
literal|15
operator|+
name|iHintPanel
operator|.
name|getOffsetHeight
argument_list|()
operator|>
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
decl_stmt|;
name|iHintPanel
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|event
operator|.
name|getClientX
argument_list|()
argument_list|,
name|e
operator|.
name|getAbsoluteRight
argument_list|()
operator|-
name|iHintPanel
operator|.
name|getOffsetWidth
argument_list|()
operator|-
literal|15
argument_list|)
argument_list|,
name|e
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
literal|15
argument_list|)
argument_list|,
name|top
condition|?
name|e
operator|.
name|getAbsoluteTop
argument_list|()
operator|-
name|iHintPanel
operator|.
name|getOffsetHeight
argument_list|()
operator|-
literal|15
else|:
name|e
operator|.
name|getAbsoluteBottom
argument_list|()
operator|+
literal|15
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|float
name|projection
init|=
name|iRow
operator|.
name|getProjection
argument_list|(
name|iClasf
argument_list|)
decl_stmt|;
name|int
name|lastLike
init|=
name|iRow
operator|.
name|getLastLike
argument_list|(
name|iClasf
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
condition|)
block|{
name|iTextBox
operator|.
name|setText
argument_list|(
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|projection
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTextBox
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|projection
operator|*
name|lastLike
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRow
operator|.
name|isDefaultProjection
argument_list|(
name|iClasf
argument_list|)
condition|)
name|iTextBox
operator|.
name|addStyleName
argument_list|(
literal|"unitime-GrayText"
argument_list|)
expr_stmt|;
else|else
name|iTextBox
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-GrayText"
argument_list|)
expr_stmt|;
comment|//iTextBox.getElement().getStyle().setColor(iRow.isDefaultProjection(iClasf) ? "#777777" : null);
name|setVisible
argument_list|(
name|lastLike
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCellEditable
operator|!=
name|iEditable
condition|)
block|{
name|iCellEditable
operator|=
name|iEditable
expr_stmt|;
name|iTextBox
operator|.
name|setReadOnly
argument_list|(
operator|!
name|iCellEditable
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCellEditable
condition|)
block|{
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBorderColor
argument_list|()
expr_stmt|;
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBorderColor
argument_list|(
literal|"transparent"
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"transparent"
argument_list|)
expr_stmt|;
block|}
block|}
name|iFrontLabel
operator|.
name|setVisible
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesShowLastLike
argument_list|()
operator|&&
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesShowLastLike
argument_list|()
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projection
operator|==
literal|1.0f
condition|)
block|{
name|iFrontLabel
operator|.
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFrontLabel
operator|.
name|setHTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iRow
operator|.
name|getLastLike
argument_list|(
name|iClasf
argument_list|)
argument_list|)
operator|+
literal|"&nbsp;&rarr;&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|MyRow
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|AcademicClassificationInterface
name|getClassification
parameter_list|()
block|{
return|return
name|iClasf
return|;
block|}
block|}
specifier|private
class|class
name|MySumCell
extends|extends
name|Composite
implements|implements
name|Updatable
block|{
specifier|private
name|List
argument_list|<
name|MyCell
argument_list|>
name|iCells
decl_stmt|;
specifier|private
name|boolean
name|iVertical
decl_stmt|;
specifier|private
name|UniTimeTextBox
name|iTextBox
decl_stmt|;
specifier|private
name|HTML
name|iFrontLabel
decl_stmt|,
name|iRearLabel
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iPanel
decl_stmt|;
specifier|private
name|boolean
name|iCellEditable
init|=
literal|true
decl_stmt|;
specifier|public
name|MySumCell
parameter_list|(
name|List
argument_list|<
name|MyCell
argument_list|>
name|cells
parameter_list|,
name|boolean
name|vertical
parameter_list|)
block|{
name|iCells
operator|=
name|cells
expr_stmt|;
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
name|cell
operator|.
name|addSum
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|iVertical
operator|=
name|vertical
expr_stmt|;
name|iPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iTextBox
operator|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|HashSet
argument_list|<
name|MySumCell
argument_list|>
name|sums
init|=
operator|new
name|HashSet
argument_list|<
name|MySumCell
argument_list|>
argument_list|()
decl_stmt|;
name|sums
operator|.
name|add
argument_list|(
name|MySumCell
operator|.
name|this
argument_list|)
expr_stmt|;
name|Float
name|projection
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
block|}
if|else if
condition|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
block|{
name|projection
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|iTextBox
operator|.
name|getText
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|/
literal|100.0f
expr_stmt|;
block|}
else|else
block|{
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
block|{
if|if
condition|(
name|iVertical
operator|&&
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|lastLike
operator|+=
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getLastLike
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|projection
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|iTextBox
operator|.
name|getText
argument_list|()
argument_list|)
operator|/
name|lastLike
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
block|{
if|if
condition|(
name|iVertical
operator|&&
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|setProjection
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
else|else
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|setProjection
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|,
name|projection
argument_list|)
expr_stmt|;
name|cell
operator|.
name|update
argument_list|()
expr_stmt|;
name|sums
operator|.
name|addAll
argument_list|(
name|cell
operator|.
name|getSums
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|iVertical
condition|)
block|{
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
block|{
for|for
control|(
name|MyRow
name|r
range|:
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|iData
operator|.
name|get
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
index|[
literal|0
index|]
operator|==
literal|null
condition|)
block|{
name|MyCell
name|c
init|=
name|r
operator|.
name|getCell
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|update
argument_list|()
expr_stmt|;
name|sums
operator|.
name|addAll
argument_list|(
name|c
operator|.
name|getSums
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|MySumCell
name|sum
range|:
name|sums
control|)
name|sum
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
block|{
if|if
condition|(
name|iVertical
operator|&&
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|lastLike
operator|+=
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getLastLike
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iFrontLabel
operator|=
operator|new
name|HTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|lastLike
argument_list|)
operator|+
literal|"&nbsp;&rarr;&nbsp;"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|.
name|setWidth
argument_list|(
literal|"55px"
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iFrontLabel
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iRearLabel
operator|=
operator|new
name|HTML
argument_list|(
literal|"&nbsp;(of&nbsp;"
operator|+
name|String
operator|.
name|valueOf
argument_list|(
name|lastLike
argument_list|)
operator|+
literal|")"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setWidth
argument_list|(
literal|"55px"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Label"
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iFrontLabel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iFrontLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iTextBox
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iTextBox
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iRearLabel
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iFrontLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|focus
parameter_list|()
block|{
name|iTextBox
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|()
block|{
name|int
name|lastLike
init|=
literal|0
decl_stmt|;
name|float
name|projected
init|=
literal|0.0f
decl_stmt|;
name|boolean
name|allDefault
init|=
literal|true
decl_stmt|;
for|for
control|(
name|MyCell
name|cell
range|:
name|iCells
control|)
block|{
if|if
condition|(
name|allDefault
operator|&&
operator|!
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|isDefaultProjection
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
condition|)
name|allDefault
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|iVertical
operator|&&
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
name|lastLike
operator|+=
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getLastLike
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
name|projected
operator|+=
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getProjection
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
operator|*
name|cell
operator|.
name|getRow
argument_list|()
operator|.
name|getLastLike
argument_list|(
name|cell
operator|.
name|getClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|float
name|projection
init|=
name|projected
operator|/
name|lastLike
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
condition|)
block|{
name|iTextBox
operator|.
name|setText
argument_list|(
name|NF
operator|.
name|format
argument_list|(
literal|100.0
operator|*
name|projection
argument_list|)
operator|+
literal|"%"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTextBox
operator|.
name|setText
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|Math
operator|.
name|round
argument_list|(
name|projection
operator|*
name|lastLike
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allDefault
condition|)
name|iTextBox
operator|.
name|addStyleName
argument_list|(
literal|"unitime-GrayText"
argument_list|)
expr_stmt|;
else|else
name|iTextBox
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-GrayText"
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
name|lastLike
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCellEditable
operator|!=
name|iEditable
condition|)
block|{
name|iCellEditable
operator|=
name|iEditable
expr_stmt|;
name|iTextBox
operator|.
name|setReadOnly
argument_list|(
operator|!
name|iCellEditable
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCellEditable
condition|)
block|{
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBorderColor
argument_list|()
expr_stmt|;
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBorderColor
argument_list|(
literal|"transparent"
argument_list|)
expr_stmt|;
name|iTextBox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"transparent"
argument_list|)
expr_stmt|;
block|}
block|}
name|iFrontLabel
operator|.
name|setVisible
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesShowLastLike
argument_list|()
operator|&&
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
argument_list|)
expr_stmt|;
name|iRearLabel
operator|.
name|setVisible
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesShowLastLike
argument_list|()
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculumProjectionRulesPercent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|projection
operator|==
literal|1.0f
condition|)
block|{
name|iFrontLabel
operator|.
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFrontLabel
operator|.
name|setHTML
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|lastLike
argument_list|)
operator|+
literal|"&nbsp;&rarr;&nbsp;"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|MyRow
block|{
specifier|private
name|AcademicAreaInterface
name|iArea
decl_stmt|;
specifier|private
name|MajorInterface
name|iMajor
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
name|iData
decl_stmt|;
specifier|private
name|MyRow
name|iParent
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MyRow
argument_list|>
name|iChildren
init|=
operator|new
name|ArrayList
argument_list|<
name|MyRow
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|MyCell
argument_list|>
name|iCells
init|=
operator|new
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|MyCell
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|MyRow
parameter_list|(
name|AcademicAreaInterface
name|area
parameter_list|,
name|MajorInterface
name|major
parameter_list|,
name|HashMap
argument_list|<
name|AcademicClassificationInterface
argument_list|,
name|Number
index|[]
argument_list|>
name|data
parameter_list|)
block|{
name|iArea
operator|=
name|area
expr_stmt|;
name|iMajor
operator|=
name|major
expr_stmt|;
name|iData
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|AcademicAreaInterface
name|getArea
parameter_list|()
block|{
return|return
name|iArea
return|;
block|}
specifier|public
name|MajorInterface
name|getMajor
parameter_list|()
block|{
return|return
name|iMajor
return|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|getClassifications
parameter_list|()
block|{
return|return
operator|new
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|(
name|iData
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|float
name|getProjection
parameter_list|(
name|AcademicClassificationInterface
name|clasf
parameter_list|)
block|{
name|Number
name|proj
init|=
name|iData
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|proj
operator|==
literal|null
operator|&&
name|iParent
operator|!=
literal|null
condition|)
name|proj
operator|=
name|iParent
operator|.
name|iData
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
return|return
operator|(
name|proj
operator|==
literal|null
condition|?
literal|1.0f
else|:
name|proj
operator|.
name|floatValue
argument_list|()
operator|)
return|;
block|}
specifier|public
name|boolean
name|isDefaultProjection
parameter_list|(
name|AcademicClassificationInterface
name|clasf
parameter_list|)
block|{
return|return
operator|(
name|iData
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
index|[
literal|0
index|]
operator|==
literal|null
operator|||
operator|(
name|iMajor
operator|==
literal|null
operator|&&
name|iData
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
index|[
literal|0
index|]
operator|.
name|floatValue
argument_list|()
operator|==
literal|1.0f
operator|)
operator|)
return|;
block|}
specifier|public
name|void
name|setProjection
parameter_list|(
name|AcademicClassificationInterface
name|clasf
parameter_list|,
name|Float
name|projection
parameter_list|)
block|{
name|iData
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
index|[
literal|0
index|]
operator|=
name|projection
expr_stmt|;
block|}
specifier|public
name|int
name|getLastLike
parameter_list|(
name|AcademicClassificationInterface
name|clasf
parameter_list|)
block|{
return|return
name|iData
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|hasLastLike
parameter_list|()
block|{
for|for
control|(
name|Number
index|[]
name|n
range|:
name|iData
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|n
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
operator|>
literal|0
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasProjection
parameter_list|()
block|{
for|for
control|(
name|Number
index|[]
name|n
range|:
name|iData
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|n
index|[
literal|1
index|]
operator|.
name|intValue
argument_list|()
operator|>
literal|0
operator|&&
name|n
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
return|return
literal|true
return|;
comment|/* 				if (iParent == null) { 					if (iData.get(i)[0].floatValue() != 1.0f) return true; 				} else { 					if (iData.get(i)[0].floatValue() != iParent.iData.get(i)[1].floatValue()) return true; 				}  				*/
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|MyRow
name|row
parameter_list|)
block|{
name|iParent
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|MyRow
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|void
name|addChild
parameter_list|(
name|MyRow
name|row
parameter_list|)
block|{
if|if
condition|(
name|iChildren
operator|==
literal|null
condition|)
name|iChildren
operator|=
operator|new
name|ArrayList
argument_list|<
name|MyRow
argument_list|>
argument_list|()
expr_stmt|;
name|iChildren
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|MyRow
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|iChildren
return|;
block|}
specifier|public
name|void
name|setCell
parameter_list|(
name|AcademicClassificationInterface
name|clasf
parameter_list|,
name|MyCell
name|cell
parameter_list|)
block|{
name|iCells
operator|.
name|put
argument_list|(
name|clasf
argument_list|,
name|cell
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MyCell
name|getCell
parameter_list|(
name|AcademicClassificationInterface
name|clasf
parameter_list|)
block|{
return|return
name|iCells
operator|.
name|get
argument_list|(
name|clasf
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|MyFlexTable
extends|extends
name|FlexTable
block|{
specifier|private
name|Timer
name|iTimer
init|=
literal|null
decl_stmt|;
specifier|public
name|MyFlexTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONKEYDOWN
argument_list|)
expr_stmt|;
name|setStylePrimaryName
argument_list|(
literal|"unitime-MainTable"
argument_list|)
expr_stmt|;
name|iTimer
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|saveOrder
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
specifier|private
name|boolean
name|focus
parameter_list|(
name|Event
name|event
parameter_list|,
name|int
name|oldRow
parameter_list|,
name|int
name|oldCol
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
operator|||
name|col
operator|>=
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|final
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|null
operator|||
operator|!
name|w
operator|.
name|isVisible
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|w
operator|instanceof
name|Updatable
condition|)
block|{
operator|(
operator|(
name|Updatable
operator|)
name|w
operator|)
operator|.
name|focus
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|MyRow
name|getMyRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|==
literal|0
operator|||
name|row
operator|+
literal|1
operator|>=
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|c
init|=
literal|1
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
condition|;
name|c
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
return|return
operator|(
operator|(
name|MyCell
operator|)
name|w
operator|)
operator|.
name|getRow
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|moveRow
parameter_list|(
name|Element
name|tr
parameter_list|,
name|Element
name|before
parameter_list|)
block|{
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|removeChild
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|insertBefore
argument_list|(
name|body
argument_list|,
name|tr
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|saveOrder
parameter_list|()
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
literal|"Saving order..."
argument_list|)
expr_stmt|;
name|String
name|areaOrd
init|=
literal|""
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|area2majorOrd
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|MyRow
name|r
init|=
name|getMyRow
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|r
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|areaOrd
operator|.
name|isEmpty
argument_list|()
condition|)
name|areaOrd
operator|+=
literal|"|"
expr_stmt|;
name|areaOrd
operator|+=
name|r
operator|.
name|getArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|majorOrd
init|=
name|area2majorOrd
operator|.
name|get
argument_list|(
name|r
operator|.
name|getArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
decl_stmt|;
name|area2majorOrd
operator|.
name|put
argument_list|(
name|r
operator|.
name|getArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|,
operator|(
name|majorOrd
operator|==
literal|null
condition|?
literal|""
else|:
name|majorOrd
operator|+
literal|"|"
operator|)
operator|+
name|r
operator|.
name|getMajor
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|ord
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ord
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"CurProjRules.Order"
block|,
name|areaOrd
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|area2majorOrd
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ord
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"CurProjRules.Order["
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"]"
block|,
name|e
operator|.
name|getValue
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
name|iMenuService
operator|.
name|setUserData
argument_list|(
name|ord
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to save table order ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|int
name|col
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|==
literal|0
condition|)
return|return;
name|MyRow
name|r
init|=
name|getMyRow
argument_list|(
name|row
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
name|DOM
operator|.
name|getChildCount
argument_list|(
name|tr
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getChildren
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|AUTO
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
name|DOM
operator|.
name|getChildCount
argument_list|(
name|tr
argument_list|)
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#EEEEEE"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONCLICK
case|:
if|if
condition|(
name|r
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|r
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
condition|)
break|break;
name|Element
name|element
init|=
name|DOM
operator|.
name|eventGetTarget
argument_list|(
name|event
argument_list|)
decl_stmt|;
while|while
condition|(
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|element
argument_list|,
literal|"tagName"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"div"
argument_list|)
condition|)
name|element
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|element
argument_list|)
expr_stmt|;
if|if
condition|(
name|DOM
operator|.
name|getElementProperty
argument_list|(
name|element
argument_list|,
literal|"tagName"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"td"
argument_list|)
condition|)
block|{
if|if
condition|(
name|r
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|boolean
name|canCollapse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|rx
init|=
name|row
operator|+
literal|1
init|;
name|rx
operator|<
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|rx
operator|++
control|)
block|{
name|r
operator|=
name|getMyRow
argument_list|(
name|rx
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|r
operator|.
name|hasProjection
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|rx
argument_list|)
condition|)
block|{
name|canCollapse
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|int
name|rx
init|=
name|row
operator|+
literal|1
init|;
name|rx
operator|<
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|rx
operator|++
control|)
block|{
name|r
operator|=
name|getMyRow
argument_list|(
name|rx
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|r
operator|.
name|hasProjection
argument_list|()
condition|)
continue|continue;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|rx
argument_list|,
operator|!
name|canCollapse
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
case|case
name|Event
operator|.
name|ONKEYDOWN
case|:
name|int
name|oldRow
init|=
name|row
decl_stmt|,
name|oldCol
init|=
name|col
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_RIGHT
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|col
operator|++
expr_stmt|;
if|if
condition|(
name|col
operator|>=
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|event
argument_list|,
name|oldRow
argument_list|,
name|oldCol
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_LEFT
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|col
operator|--
expr_stmt|;
if|if
condition|(
name|col
operator|<
literal|0
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|event
argument_list|,
name|oldRow
argument_list|,
name|oldCol
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|row
operator|--
expr_stmt|;
if|if
condition|(
name|row
operator|<=
literal|0
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|event
argument_list|,
name|oldRow
argument_list|,
name|oldCol
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
operator|(
name|event
operator|.
name|getAltKey
argument_list|()
operator|||
name|event
operator|.
name|getMetaKey
argument_list|()
operator|)
condition|)
block|{
do|do
block|{
name|row
operator|++
expr_stmt|;
if|if
condition|(
name|row
operator|>=
name|getRowCount
argument_list|()
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|focus
argument_list|(
name|event
argument_list|,
name|oldRow
argument_list|,
name|oldCol
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
condition|)
do|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
operator|&&
name|event
operator|.
name|getCtrlKey
argument_list|()
condition|)
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|Updatable
name|u
init|=
operator|(
name|Updatable
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MyRow
name|p
init|=
name|getMyRow
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|moveRow
argument_list|(
name|tr
argument_list|,
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|row
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MyRow
name|p
init|=
name|getMyRow
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Element
name|x
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|row
operator|-
literal|1
operator|-
name|p
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|r
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|moveRow
argument_list|(
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|row
operator|+
name|i
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iTimer
operator|.
name|schedule
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|u
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
operator|&&
name|event
operator|.
name|getCtrlKey
argument_list|()
condition|)
block|{
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|Updatable
name|u
init|=
operator|(
name|Updatable
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|MyRow
name|p
init|=
name|getMyRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|getMajor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|moveRow
argument_list|(
name|tr
argument_list|,
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|row
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MyRow
name|p
init|=
name|getMyRow
argument_list|(
literal|1
operator|+
name|row
operator|+
name|r
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getMajor
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Element
name|x
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|row
operator|+
literal|2
operator|+
name|r
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|p
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|r
operator|.
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|moveRow
argument_list|(
name|DOM
operator|.
name|getChild
argument_list|(
name|body
argument_list|,
name|row
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iTimer
operator|.
name|schedule
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|u
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ProjectionRulesEvent
block|{ 	}
specifier|public
specifier|static
interface|interface
name|ProjectionRulesHandler
block|{
specifier|public
name|void
name|onRulesLoaded
parameter_list|(
name|ProjectionRulesEvent
name|evt
parameter_list|)
function_decl|;
specifier|public
name|void
name|onException
parameter_list|(
name|Throwable
name|caught
parameter_list|)
function_decl|;
specifier|public
name|void
name|onRulesSaved
parameter_list|(
name|ProjectionRulesEvent
name|evt
parameter_list|)
function_decl|;
specifier|public
name|void
name|onRulesClosed
parameter_list|(
name|ProjectionRulesEvent
name|evt
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addProjectionRulesHandler
parameter_list|(
name|ProjectionRulesHandler
name|h
parameter_list|)
block|{
name|iProjectionRulesHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

