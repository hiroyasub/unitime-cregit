begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumClassificationInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ValueBoxBase
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurriculaClassifications
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UniTimeTable
name|iTable
decl_stmt|;
specifier|private
name|List
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|iClassifications
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ExpectedChangedHandler
argument_list|>
name|iExpectedChangedHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|ExpectedChangedHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|NameChangedHandler
argument_list|>
name|iNameChangedHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|NameChangedHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CurriculaClassifications
parameter_list|()
block|{
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|getClassifications
parameter_list|()
block|{
return|return
name|iClassifications
return|;
block|}
specifier|public
name|void
name|setup
parameter_list|(
name|List
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|classifications
parameter_list|)
block|{
name|iTable
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iClassifications
operator|=
name|classifications
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propName
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propClassification
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propLastLikeEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propProjectedByRule
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propRequestedEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propCurrentEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
literal|5
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setText
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|propCourseRequests
argument_list|()
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setWordWrap
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|AcademicClassificationInterface
name|clasf
range|:
name|iClassifications
control|)
block|{
name|col
operator|++
expr_stmt|;
specifier|final
name|UniTimeTextBox
name|name
init|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|name
operator|.
name|setText
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|setWidth
argument_list|(
literal|"60px"
argument_list|)
expr_stmt|;
name|name
operator|.
name|setMaxLength
argument_list|(
literal|20
argument_list|)
expr_stmt|;
specifier|final
name|int
name|xcol
init|=
name|col
operator|-
literal|1
decl_stmt|;
name|name
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|NameChangedEvent
name|e
init|=
operator|new
name|NameChangedEvent
argument_list|(
name|clasf
argument_list|,
name|xcol
argument_list|,
name|name
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|NameChangedHandler
name|h
range|:
name|iNameChangedHandlers
control|)
name|h
operator|.
name|nameChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|1
argument_list|,
name|col
argument_list|,
operator|new
name|HTML
argument_list|(
name|clasf
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|" "
argument_list|,
literal|"<br>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|1
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|UniTimeTextBox
name|ll
init|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|2
argument_list|,
name|col
argument_list|,
name|ll
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|2
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|UniTimeTextBox
name|proj
init|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|3
argument_list|,
name|col
argument_list|,
name|proj
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|3
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTextBox
name|expected
init|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|4
argument_list|,
name|col
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|4
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|expected
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|Integer
name|exp
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|expected
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
name|exp
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|expected
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exp
operator|<
literal|0
condition|)
block|{
name|exp
operator|=
literal|null
expr_stmt|;
name|expected
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|expected
operator|.
name|setText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|ExpectedChangedEvent
name|e
init|=
operator|new
name|ExpectedChangedEvent
argument_list|(
name|clasf
argument_list|,
name|xcol
argument_list|,
name|exp
argument_list|)
decl_stmt|;
for|for
control|(
name|ExpectedChangedHandler
name|h
range|:
name|iExpectedChangedHandlers
control|)
name|h
operator|.
name|expectedChanged
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTextBox
name|enrl
init|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|5
argument_list|,
name|col
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|5
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|UniTimeTextBox
name|req
init|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|6
argument_list|,
name|ValueBoxBase
operator|.
name|TextAlignment
operator|.
name|RIGHT
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iTable
operator|.
name|setWidget
argument_list|(
literal|6
argument_list|,
name|col
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|6
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|TreeSet
argument_list|<
name|CurriculumClassificationInterface
argument_list|>
name|classifications
parameter_list|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|iClassifications
control|)
block|{
name|CurriculumClassificationInterface
name|ci
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|classifications
operator|!=
literal|null
operator|&&
operator|!
name|classifications
operator|.
name|isEmpty
argument_list|()
condition|)
for|for
control|(
name|CurriculumClassificationInterface
name|x
range|:
name|classifications
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|ci
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|ci
operator|==
literal|null
condition|)
block|{
name|setName
argument_list|(
name|col
argument_list|,
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
name|setExpected
argument_list|(
name|col
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setEnrollment
argument_list|(
name|col
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setLastLike
argument_list|(
name|col
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setProjection
argument_list|(
name|col
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|setRequested
argument_list|(
name|col
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
name|col
argument_list|,
name|ci
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|setExpected
argument_list|(
name|col
argument_list|,
name|ci
operator|.
name|getExpected
argument_list|()
argument_list|)
expr_stmt|;
name|setEnrollment
argument_list|(
name|col
argument_list|,
name|ci
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
name|setLastLike
argument_list|(
name|col
argument_list|,
name|ci
operator|.
name|getLastLike
argument_list|()
argument_list|)
expr_stmt|;
name|setProjection
argument_list|(
name|col
argument_list|,
name|ci
operator|.
name|getProjection
argument_list|()
argument_list|)
expr_stmt|;
name|setRequested
argument_list|(
name|col
argument_list|,
name|ci
operator|.
name|getRequested
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|saveCurriculum
parameter_list|(
name|CurriculumInterface
name|c
parameter_list|)
block|{
if|if
condition|(
name|c
operator|.
name|hasClassifications
argument_list|()
condition|)
name|c
operator|.
name|getClassifications
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|ac
range|:
name|iClassifications
control|)
block|{
name|Integer
name|exp
init|=
name|getExpected
argument_list|(
name|col
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|!=
literal|null
condition|)
block|{
name|CurriculumClassificationInterface
name|clasf
init|=
operator|new
name|CurriculumClassificationInterface
argument_list|()
decl_stmt|;
name|clasf
operator|.
name|setAcademicClassification
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setCurriculumId
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setExpected
argument_list|(
name|exp
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setLastLike
argument_list|(
name|getLastLike
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setProjection
argument_list|(
name|getProjection
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
name|clasf
operator|.
name|setName
argument_list|(
name|getName
argument_list|(
name|col
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|.
name|addClassification
argument_list|(
name|clasf
argument_list|)
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|UniTimeTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|i
argument_list|)
operator|)
operator|.
name|setReadOnly
argument_list|(
operator|!
name|enabled
argument_list|)
expr_stmt|;
operator|(
operator|(
name|UniTimeTextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|4
argument_list|,
literal|1
operator|+
name|i
argument_list|)
operator|)
operator|.
name|setReadOnly
argument_list|(
operator|!
name|enabled
argument_list|)
expr_stmt|;
name|boolean
name|visible
init|=
name|enabled
operator|||
name|getExpected
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getEnrollment
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getLastLike
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getProjection
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getRequested
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|6
condition|;
name|j
operator|++
control|)
name|iTable
operator|.
name|getWidget
argument_list|(
name|j
argument_list|,
literal|1
operator|+
name|i
argument_list|)
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getColumn
parameter_list|(
name|AcademicClassificationInterface
name|classification
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|classification
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|iClassifications
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|i
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|(
name|int
name|column
parameter_list|)
block|{
return|return
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|int
name|column
parameter_list|,
name|String
name|name
parameter_list|)
block|{
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getExpected
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|4
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setExpected
parameter_list|(
name|int
name|column
parameter_list|,
name|Integer
name|expected
parameter_list|)
block|{
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|4
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|expected
operator|==
literal|null
condition|?
literal|""
else|:
name|expected
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getEnrollment
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|5
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setEnrollment
parameter_list|(
name|int
name|column
parameter_list|,
name|Integer
name|enrollment
parameter_list|)
block|{
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|5
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|enrollment
operator|==
literal|null
operator|||
name|enrollment
operator|==
literal|0
condition|?
literal|""
else|:
name|enrollment
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getLastLike
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|2
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setLastLike
parameter_list|(
name|int
name|column
parameter_list|,
name|Integer
name|lastLike
parameter_list|)
block|{
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|2
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|lastLike
operator|==
literal|null
operator|||
name|lastLike
operator|==
literal|0
condition|?
literal|""
else|:
name|lastLike
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getProjection
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|3
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setProjection
parameter_list|(
name|int
name|column
parameter_list|,
name|Integer
name|projection
parameter_list|)
block|{
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|3
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|projection
operator|==
literal|null
operator|||
name|projection
operator|==
literal|0
condition|?
literal|""
else|:
name|projection
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Integer
name|getRequested
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|String
name|text
init|=
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|6
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|setRequested
parameter_list|(
name|int
name|column
parameter_list|,
name|Integer
name|requested
parameter_list|)
block|{
operator|(
operator|(
name|TextBox
operator|)
name|iTable
operator|.
name|getWidget
argument_list|(
literal|6
argument_list|,
literal|1
operator|+
name|column
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
name|requested
operator|==
literal|null
operator|||
name|requested
operator|==
literal|0
condition|?
literal|""
else|:
name|requested
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ExpectedChangedEvent
block|{
specifier|private
name|AcademicClassificationInterface
name|iClassification
decl_stmt|;
specifier|private
name|int
name|iColumn
decl_stmt|;
specifier|private
name|Integer
name|iExpected
decl_stmt|;
name|ExpectedChangedEvent
parameter_list|(
name|AcademicClassificationInterface
name|classification
parameter_list|,
name|int
name|column
parameter_list|,
name|Integer
name|expected
parameter_list|)
block|{
name|iClassification
operator|=
name|classification
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iExpected
operator|=
name|expected
expr_stmt|;
block|}
specifier|public
name|AcademicClassificationInterface
name|getClassification
parameter_list|()
block|{
return|return
name|iClassification
return|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
specifier|public
name|Integer
name|getExpected
parameter_list|()
block|{
return|return
name|iExpected
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|ExpectedChangedHandler
block|{
specifier|public
name|void
name|expectedChanged
parameter_list|(
name|ExpectedChangedEvent
name|e
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addExpectedChangedHandler
parameter_list|(
name|ExpectedChangedHandler
name|h
parameter_list|)
block|{
name|iExpectedChangedHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|NameChangedEvent
block|{
specifier|private
name|AcademicClassificationInterface
name|iClassification
decl_stmt|;
specifier|private
name|int
name|iColumn
decl_stmt|;
specifier|private
name|String
name|iName
decl_stmt|;
name|NameChangedEvent
parameter_list|(
name|AcademicClassificationInterface
name|classification
parameter_list|,
name|int
name|column
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|iClassification
operator|=
name|classification
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|AcademicClassificationInterface
name|getClassification
parameter_list|()
block|{
return|return
name|iClassification
return|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|public
specifier|static
interface|interface
name|NameChangedHandler
block|{
specifier|public
name|void
name|nameChanged
parameter_list|(
name|NameChangedEvent
name|e
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|addNameChangedHandler
parameter_list|(
name|NameChangedHandler
name|h
parameter_list|)
block|{
name|iNameChangedHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setVisible
parameter_list|(
name|int
name|col
parameter_list|,
name|boolean
name|visible
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|col
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hideEmptyColumns
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|setVisible
argument_list|(
name|i
argument_list|,
name|getExpected
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getLastLike
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getEnrollment
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getProjection
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
operator|||
name|getRequested
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|hideEmptyRows
parameter_list|()
block|{
name|boolean
name|last
init|=
literal|false
decl_stmt|,
name|proj
init|=
literal|false
decl_stmt|,
name|enrl
init|=
literal|false
decl_stmt|,
name|req
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getLastLike
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
name|last
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|getProjection
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
name|proj
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|getEnrollment
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
name|enrl
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|getRequested
argument_list|(
name|i
argument_list|)
operator|!=
literal|null
condition|)
name|req
operator|=
literal|true
expr_stmt|;
block|}
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|2
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|3
argument_list|,
name|proj
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|5
argument_list|,
name|enrl
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|6
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showAllColumns
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|setVisible
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

