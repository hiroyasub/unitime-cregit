begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 (University Timetabling Application)  * Copyright (C) 2010, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
operator|.
name|CurriculumEdit
operator|.
name|EditFinishedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|curricula
operator|.
name|CurriculumEdit
operator|.
name|EditFinishedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|CurriculaServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicAreaInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|AcademicClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumClassificationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|CurriculumCourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CurriculumInterface
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DialogBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseCurriculaTable
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|CurriculaServiceAsync
name|iCurriculaService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|CurriculaService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iCurriculaPanel
decl_stmt|;
specifier|private
name|MyFlexTable
name|iCurricula
decl_stmt|;
specifier|private
name|DialogBox
name|iDialog
decl_stmt|;
specifier|private
name|CurriculumEdit
name|iCurriculumEdit
decl_stmt|;
specifier|private
name|Label
name|iHint
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|>
name|iCourseCurriculaCallback
init|=
literal|null
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|iClassifications
init|=
literal|null
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|CourseInterface
argument_list|>
name|iCourses
init|=
operator|new
name|TreeSet
argument_list|<
name|CourseInterface
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ChainedCommand
argument_list|>
name|iRowClicks
init|=
operator|new
name|ArrayList
argument_list|<
name|ChainedCommand
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|iRowTypes
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|iRowAreaId
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iCourseName
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
index|[]
name|iUsed
init|=
literal|null
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|iExpandedAreas
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|Long
argument_list|>
name|iAllAreas
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iSelectedRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|boolean
name|iEditable
init|=
literal|true
decl_stmt|;
specifier|private
name|ClickHandler
name|iMenu
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Type
block|{
name|EXP
argument_list|(
literal|"Requested"
argument_list|)
block|,
name|ENRL
argument_list|(
literal|"Current"
argument_list|)
block|,
name|LAST
argument_list|(
literal|"Last-Like"
argument_list|)
block|,
name|PROJ
argument_list|(
literal|"Projected by Rule"
argument_list|)
block|,
name|EXP2ENRL
argument_list|(
literal|"Requested / Current"
argument_list|)
block|,
name|EXP2LAST
argument_list|(
literal|"Requested / Last-Like"
argument_list|)
block|,
name|EXP2PROJ
argument_list|(
literal|"Requested / Projected"
argument_list|)
block|,
name|LAST2ENRL
argument_list|(
literal|"Last-Like / Current"
argument_list|)
block|,
name|PROJ2ENRL
argument_list|(
literal|"Projected / Current"
argument_list|)
block|;
specifier|private
name|String
name|iName
decl_stmt|;
name|Type
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|sRowTypeHeader
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|int
name|sRowTypeArea
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
name|int
name|sRowTypeCurriculum
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
name|int
name|sRowTypeOtherArea
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
name|int
name|sRowTypeOther
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
name|int
name|sRowTypeTotal
init|=
literal|5
decl_stmt|;
specifier|public
name|CourseCurriculaTable
parameter_list|(
name|boolean
name|editable
parameter_list|,
specifier|final
name|boolean
name|showHeader
parameter_list|)
block|{
name|iEditable
operator|=
name|editable
expr_stmt|;
name|iCurriculaPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iCurriculaPanel
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
comment|// Menu
name|iMenu
operator|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|PopupPanel
name|popup
init|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MenuBar
name|menu
init|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|MenuItem
name|showHide
init|=
operator|new
name|MenuItem
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|?
literal|"Hide Details"
else|:
literal|"Show Details"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesDetails
argument_list|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
name|showHeader
condition|?
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
operator|&&
operator|(
name|rowType
operator|==
name|sRowTypeCurriculum
operator|||
name|rowType
operator|==
name|sRowTypeOtherArea
operator|)
condition|)
continue|continue;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
operator|+
literal|2
condition|;
name|col
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|col
argument_list|,
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|?
literal|"unitime-TotalRow"
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|showHide
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|showHide
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
operator|&&
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|)
block|{
name|boolean
name|canExpand
init|=
literal|false
decl_stmt|,
name|canCollapse
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowType
operator|==
name|sRowTypeArea
operator|||
name|rowType
operator|==
name|sRowTypeOther
condition|)
block|{
if|if
condition|(
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|row
argument_list|)
condition|)
name|canExpand
operator|=
literal|true
expr_stmt|;
else|else
name|canCollapse
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|canExpand
condition|)
block|{
name|MenuItem
name|expandAll
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Expand All"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|boolean
name|visible
init|=
operator|(
name|rowType
operator|!=
name|sRowTypeArea
operator|&&
name|rowType
operator|!=
name|sRowTypeOther
operator|)
decl_stmt|;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|visible
argument_list|)
expr_stmt|;
name|iExpandedAreas
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iExpandedAreas
operator|.
name|addAll
argument_list|(
name|iAllAreas
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|expandAll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|expandAll
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|canCollapse
condition|)
block|{
name|MenuItem
name|collapseAll
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Collapse All"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|boolean
name|visible
init|=
operator|(
name|rowType
operator|!=
name|sRowTypeCurriculum
operator|&&
name|rowType
operator|!=
name|sRowTypeOtherArea
operator|)
decl_stmt|;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|visible
argument_list|)
expr_stmt|;
name|iExpandedAreas
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
name|collapseAll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|collapseAll
argument_list|)
expr_stmt|;
block|}
block|}
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Type
name|t
range|:
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
name|MenuItem
name|item
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Show "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCourseCurriculaTableType
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setText
argument_list|(
literal|"Showing "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|int
name|hc
init|=
name|getHeaderCols
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<=
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
operator|(
operator|(
name|MyLabel
operator|)
name|iCurricula
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|hc
operator|+
name|col
argument_list|)
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
comment|//((MyLabel)iCurricula.getWidget(iCurricula.getRowCount() - 1, 1)).refresh();
operator|(
operator|(
name|Label
operator|)
name|iCurricula
operator|.
name|getWidget
argument_list|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
literal|"Total "
operator|+
name|t
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
condition|)
name|item
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"#666666"
argument_list|)
expr_stmt|;
name|item
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|menu
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|MenuItem
name|populateProjectedDemands
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Populate Course Projected Demands"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Populating projected demands for this offering ..."
argument_list|)
expr_stmt|;
name|iCurriculaService
operator|.
name|populateCourseProjectedDemands
argument_list|(
literal|false
argument_list|,
name|iOfferingId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Unable to populate course projected demands ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iOfferingId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|populateProjectedDemands
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|populateProjectedDemands
argument_list|)
expr_stmt|;
name|MenuItem
name|populateProjectedDemands2
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Populate Course Projected Demands (Include Other Students)"
argument_list|,
literal|true
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Populating projected demands for this course ..."
argument_list|)
expr_stmt|;
name|iCurriculaService
operator|.
name|populateCourseProjectedDemands
argument_list|(
literal|true
argument_list|,
name|iOfferingId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Unable to populate course projected demands ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iOfferingId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|populateProjectedDemands2
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addItem
argument_list|(
name|populateProjectedDemands2
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setFocusOnHoverEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|popup
operator|.
name|showRelativeTo
argument_list|(
operator|(
name|Widget
operator|)
name|event
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|showHeader
condition|?
literal|"Curricula"
else|:
literal|""
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
name|showHeader
condition|?
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setTitleStyleName
argument_list|(
literal|"unitime3-HeaderTitle"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showHeader
condition|)
block|{
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"operations"
argument_list|,
literal|"Curricula&nbsp;<u>O</u>perations&nbsp;&or;"
argument_list|,
operator|(
name|Integer
operator|)
literal|null
argument_list|,
name|iMenu
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"operations"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|addCollapsibleHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesDetails
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
operator|&&
operator|(
name|rowType
operator|==
name|sRowTypeCurriculum
operator|||
name|rowType
operator|==
name|sRowTypeOtherArea
operator|)
condition|)
continue|continue;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
operator|+
literal|2
condition|;
name|col
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|col
argument_list|,
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|?
literal|"unitime-TotalRow"
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|showHeader
condition|)
name|iCurriculaPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|VerticalPanel
name|tableAndHint
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
name|iCurricula
operator|=
operator|new
name|MyFlexTable
argument_list|()
expr_stmt|;
name|tableAndHint
operator|.
name|add
argument_list|(
name|iCurricula
argument_list|)
expr_stmt|;
name|iHint
operator|=
operator|new
name|Label
argument_list|(
literal|"Showing "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Hint"
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tableAndHint
operator|.
name|add
argument_list|(
name|iHint
argument_list|)
expr_stmt|;
name|tableAndHint
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iHint
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurriculaPanel
operator|.
name|addRow
argument_list|(
name|tableAndHint
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCourseCurriculaTableType
argument_list|(
name|Type
operator|.
name|values
argument_list|()
index|[
operator|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
operator|.
name|ordinal
argument_list|()
operator|+
literal|1
operator|)
operator|%
name|Type
operator|.
name|values
argument_list|()
operator|.
name|length
index|]
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setText
argument_list|(
literal|"Showing "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<=
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|col
operator|++
control|)
block|{
operator|(
operator|(
name|MyLabel
operator|)
name|iCurricula
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|getHeaderCols
argument_list|(
name|row
argument_list|)
operator|+
name|col
argument_list|)
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
comment|//((MyLabel)iCurricula.getWidget(iCurricula.getRowCount() - 1, 1)).refresh();
operator|(
operator|(
name|Label
operator|)
name|iCurricula
operator|.
name|getWidget
argument_list|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
literal|"Total "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showHeader
condition|)
name|iCurriculaPanel
operator|.
name|addRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iCurriculaPanel
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openDialog
parameter_list|(
specifier|final
name|CurriculumInterface
name|curriculum
parameter_list|,
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
if|if
condition|(
name|iDialog
operator|==
literal|null
condition|)
block|{
name|iDialog
operator|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|=
operator|new
name|CurriculumEdit
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|ScrollPanel
name|panel
init|=
operator|new
name|ScrollPanel
argument_list|(
name|iCurriculumEdit
argument_list|)
decl_stmt|;
comment|// panel.setSize(Math.round(0.9 * Window.getClientWidth()) + "px", Math.round(0.9 * Window.getClientHeight()) + "px");
name|panel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setWidget
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|.
name|addEditFinishedHandler
argument_list|(
operator|new
name|CurriculumEdit
operator|.
name|EditFinishedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSave
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
block|{
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDelete
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
block|{
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBack
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
block|{
if|if
condition|(
name|iSelectedRow
operator|>=
literal|0
condition|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iSelectedRow
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|iDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|.
name|setupClassifications
argument_list|(
name|iClassifications
argument_list|)
expr_stmt|;
name|iCurriculaService
operator|.
name|loadAcademicAreas
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to load academic areas ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|next
operator|.
name|executeOnFailure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TreeSet
argument_list|<
name|AcademicAreaInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iCurriculumEdit
operator|.
name|setupAreas
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iCurriculaService
operator|.
name|loadDepartments
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|TreeSet
argument_list|<
name|DepartmentInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to load departments ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|next
operator|.
name|executeOnFailure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TreeSet
argument_list|<
name|DepartmentInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iCurriculumEdit
operator|.
name|setupDepartments
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|setText
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|.
name|edit
argument_list|(
name|curriculum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|.
name|showOnlyCourses
argument_list|(
name|iCourses
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|center
argument_list|()
expr_stmt|;
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iDialog
operator|.
name|setText
argument_list|(
name|curriculum
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|.
name|edit
argument_list|(
name|curriculum
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iCurriculumEdit
operator|.
name|showOnlyCourses
argument_list|(
name|iCourses
argument_list|)
expr_stmt|;
name|iDialog
operator|.
name|center
argument_list|()
expr_stmt|;
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
name|iCurriculumEdit
operator|.
name|addEditFinishedHandler
argument_list|(
operator|new
name|EditFinishedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSave
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDelete
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onBack
parameter_list|(
name|EditFinishedEvent
name|evt
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
specifier|final
name|Command
name|next
parameter_list|)
block|{
name|iCurriculaService
operator|.
name|loadAcademicClassifications
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TreeSet
argument_list|<
name|AcademicClassificationInterface
argument_list|>
name|result
parameter_list|)
block|{
name|iClassifications
operator|=
name|result
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to load classifications ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|(
name|boolean
name|loading
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
name|iCurricula
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|iCurricula
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|loading
condition|)
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
else|else
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHint
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|populate
parameter_list|(
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|curricula
parameter_list|)
block|{
comment|// Create header
name|int
name|col
init|=
literal|0
decl_stmt|;
specifier|final
name|Label
name|curriculumLabel
init|=
operator|new
name|Label
argument_list|(
literal|"Curriculum"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|curriculumLabel
operator|.
name|addClickHandler
argument_list|(
name|iMenu
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|curriculumLabel
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"100px"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
specifier|final
name|Label
name|areaLabel
init|=
operator|new
name|Label
argument_list|(
literal|"Area"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|areaLabel
operator|.
name|addClickHandler
argument_list|(
name|iMenu
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|areaLabel
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"100px"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
specifier|final
name|Label
name|majorLabel
init|=
operator|new
name|Label
argument_list|(
literal|"Major(s)"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|majorLabel
operator|.
name|addClickHandler
argument_list|(
name|iMenu
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|majorLabel
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"100px"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|iClassifications
control|)
block|{
specifier|final
name|Label
name|clasfLabel
init|=
operator|new
name|Label
argument_list|(
name|clasf
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|clasfLabel
operator|.
name|addClickHandler
argument_list|(
name|iMenu
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|clasfLabel
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"75px"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
specifier|final
name|Label
name|totalLabel
init|=
operator|new
name|Label
argument_list|(
literal|"Total"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|totalLabel
operator|.
name|addClickHandler
argument_list|(
name|iMenu
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|totalLabel
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"75px"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
comment|// Create body
name|iCourses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iRowClicks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// for header row
name|iRowTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeHeader
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
operator|-
literal|2l
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|otherCurricula
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CurriculumInterface
argument_list|>
name|lastArea
init|=
operator|new
name|ArrayList
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
decl_stmt|;
name|iAllAreas
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iUsed
operator|=
operator|new
name|boolean
index|[
name|iClassifications
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iUsed
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|iUsed
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|int
index|[]
index|[]
name|total
init|=
operator|new
name|int
index|[
name|iClassifications
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|total
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|int
index|[]
index|[]
name|totalThisArea
init|=
operator|new
name|int
index|[
name|iClassifications
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalThisArea
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|totalThisArea
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
for|for
control|(
specifier|final
name|CurriculumInterface
name|curriculum
range|:
name|curricula
control|)
block|{
for|for
control|(
name|CourseInterface
name|course
range|:
name|curriculum
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CourseInterface
name|cx
init|=
operator|new
name|CourseInterface
argument_list|()
decl_stmt|;
name|cx
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|cx
operator|.
name|setCourseName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|cx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|curriculum
operator|.
name|getId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|otherCurricula
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|iAllAreas
operator|.
name|add
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastArea
operator|.
name|isEmpty
argument_list|()
operator|||
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|equals
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
condition|)
block|{
name|lastArea
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|lastArea
operator|.
name|equals
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
argument_list|)
condition|)
block|{
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//iCurricula.getCellFormatter().setHorizontalAlignment(row, col, HasHorizontalAlignment.ALIGN_CENTER);
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
operator|++
argument_list|,
operator|new
name|HTML
argument_list|(
literal|"<i>"
operator|+
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|lastArea
operator|.
name|size
argument_list|()
operator|+
literal|")</i>"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|tExp
init|=
literal|0
decl_stmt|,
name|tLast
init|=
literal|0
decl_stmt|,
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tProj
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|clasfIdx
init|=
literal|0
init|;
name|clasfIdx
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|clasfIdx
operator|++
control|)
block|{
name|int
name|exp
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|last
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|enrl
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
decl_stmt|;
name|int
name|proj
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
decl_stmt|;
name|tExp
operator|+=
name|exp
expr_stmt|;
name|tLast
operator|+=
name|last
expr_stmt|;
name|tEnrl
operator|+=
name|enrl
expr_stmt|;
name|tProj
operator|+=
name|proj
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|exp
argument_list|,
name|enrl
argument_list|,
name|last
argument_list|,
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|tExp
argument_list|,
name|tEnrl
argument_list|,
name|tLast
argument_list|,
name|tProj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalRow
init|=
name|row
decl_stmt|;
specifier|final
name|int
name|lastAreas
init|=
name|lastArea
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|lastAreaId
init|=
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|iExpandedAreas
operator|.
name|add
argument_list|(
name|lastAreaId
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|finalRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
name|lastAreas
condition|;
name|row
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|finalRow
operator|-
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeArea
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
name|lastAreaId
argument_list|)
expr_stmt|;
name|lastArea
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalThisArea
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|totalThisArea
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
name|lastArea
operator|.
name|add
argument_list|(
name|curriculum
argument_list|)
expr_stmt|;
block|}
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|iCurricula
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
operator|++
argument_list|,
name|curriculum
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
operator|++
argument_list|,
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
operator|++
argument_list|,
name|curriculum
operator|.
name|getMajorCodes
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|clasfIdx
init|=
literal|0
decl_stmt|;
name|int
name|tExp
init|=
literal|0
decl_stmt|,
name|tLast
init|=
literal|0
decl_stmt|,
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tProj
init|=
literal|0
decl_stmt|;
for|for
control|(
name|AcademicClassificationInterface
name|clasf
range|:
name|iClassifications
control|)
block|{
name|CurriculumClassificationInterface
name|f
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CurriculumClassificationInterface
name|x
range|:
name|curriculum
operator|.
name|getClassifications
argument_list|()
control|)
block|{
if|if
condition|(
name|x
operator|.
name|getAcademicClassification
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|clasf
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|f
operator|=
name|x
expr_stmt|;
break|break;
block|}
block|}
name|int
name|exp
init|=
literal|0
decl_stmt|,
name|last
init|=
literal|0
decl_stmt|,
name|enrl
init|=
literal|0
decl_stmt|,
name|proj
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseInterface
name|course
range|:
name|curriculum
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CurriculumCourseInterface
name|cx
init|=
name|course
operator|.
name|getCurriculumCourse
argument_list|(
name|clasfIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cx
operator|!=
literal|null
condition|)
block|{
name|iUsed
index|[
name|clasfIdx
index|]
operator|=
literal|true
expr_stmt|;
name|exp
operator|+=
operator|(
name|f
operator|==
literal|null
operator|||
name|f
operator|.
name|getExpected
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|Math
operator|.
name|round
argument_list|(
name|f
operator|.
name|getExpected
argument_list|()
operator|*
name|cx
operator|.
name|getShare
argument_list|()
argument_list|)
operator|)
expr_stmt|;
name|last
operator|+=
operator|(
name|cx
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|getLastLike
argument_list|()
operator|)
expr_stmt|;
name|enrl
operator|+=
operator|(
name|cx
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|getEnrollment
argument_list|()
operator|)
expr_stmt|;
name|proj
operator|+=
operator|(
name|cx
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|getProjection
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
name|total
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
operator|+=
name|exp
expr_stmt|;
name|total
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
operator|+=
name|last
expr_stmt|;
name|total
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
operator|+=
name|enrl
expr_stmt|;
name|total
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
operator|+=
name|proj
expr_stmt|;
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
operator|+=
name|exp
expr_stmt|;
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
operator|+=
name|last
expr_stmt|;
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
operator|+=
name|enrl
expr_stmt|;
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
operator|+=
name|proj
expr_stmt|;
name|tExp
operator|+=
name|exp
expr_stmt|;
name|tLast
operator|+=
name|last
expr_stmt|;
name|tEnrl
operator|+=
name|enrl
expr_stmt|;
name|tProj
operator|+=
name|proj
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|exp
argument_list|,
name|enrl
argument_list|,
name|last
argument_list|,
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
name|clasfIdx
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|tExp
argument_list|,
name|tEnrl
argument_list|,
name|tLast
argument_list|,
name|tProj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEditable
condition|)
block|{
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|iCurriculaService
operator|.
name|loadCurriculum
argument_list|(
name|curriculum
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to load details for "
operator|+
name|curriculum
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|next
operator|.
name|executeOnFailure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|CurriculumInterface
name|result
parameter_list|)
block|{
name|openDialog
argument_list|(
name|result
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|"Loading details for "
operator|+
name|curriculum
operator|.
name|getName
argument_list|()
operator|+
literal|" ..."
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Long
name|lastAreaId
init|=
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|int
name|finalRow
init|=
name|row
decl_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|int
name|row
init|=
name|finalRow
decl_stmt|;
while|while
condition|(
name|row
operator|>
literal|0
operator|&&
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
operator|==
name|sRowTypeCurriculum
condition|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|row
operator|--
expr_stmt|;
block|}
name|row
operator|=
name|finalRow
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
operator|==
name|sRowTypeCurriculum
condition|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iExpandedAreas
operator|.
name|remove
argument_list|(
name|lastAreaId
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeCurriculum
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
name|curriculum
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lastArea
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//iCurricula.getCellFormatter().setHorizontalAlignment(row, col, HasHorizontalAlignment.ALIGN_CENTER);
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
operator|++
argument_list|,
operator|new
name|HTML
argument_list|(
literal|"<i>"
operator|+
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|lastArea
operator|.
name|size
argument_list|()
operator|+
literal|")</i>"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|tExp
init|=
literal|0
decl_stmt|,
name|tLast
init|=
literal|0
decl_stmt|,
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tProj
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|clasfIdx
init|=
literal|0
init|;
name|clasfIdx
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|clasfIdx
operator|++
control|)
block|{
name|int
name|exp
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|last
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|enrl
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
decl_stmt|;
name|int
name|proj
init|=
name|totalThisArea
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
decl_stmt|;
name|tExp
operator|+=
name|exp
expr_stmt|;
name|tLast
operator|+=
name|last
expr_stmt|;
name|tEnrl
operator|+=
name|enrl
expr_stmt|;
name|tProj
operator|+=
name|proj
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|exp
argument_list|,
name|enrl
argument_list|,
name|last
argument_list|,
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|tExp
argument_list|,
name|tEnrl
argument_list|,
name|tLast
argument_list|,
name|tProj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalRow
init|=
name|row
decl_stmt|;
specifier|final
name|int
name|lastAreas
init|=
name|lastArea
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Long
name|lastAreaId
init|=
name|lastArea
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getAcademicArea
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|iExpandedAreas
operator|.
name|add
argument_list|(
name|lastAreaId
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|finalRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
name|lastAreas
condition|;
name|row
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|finalRow
operator|-
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeArea
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
name|lastAreaId
argument_list|)
expr_stmt|;
block|}
comment|// Other line
if|if
condition|(
operator|!
name|otherCurricula
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
index|[]
index|[]
name|totalOther
init|=
operator|new
name|int
index|[
name|iClassifications
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalOther
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|totalOther
index|[
name|i
index|]
operator|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
expr_stmt|;
for|for
control|(
name|CurriculumInterface
name|other
range|:
name|otherCurricula
control|)
block|{
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//iCurricula.getCellFormatter().setHorizontalAlignment(row, col, HasHorizontalAlignment.ALIGN_CENTER);
name|iCurricula
operator|.
name|setHTML
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"<i>"
operator|+
name|other
operator|.
name|getAbbv
argument_list|()
operator|+
literal|" - "
operator|+
name|other
operator|.
name|getName
argument_list|()
operator|+
literal|"</i>"
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-OtherRow"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
name|int
name|tExp
init|=
literal|0
decl_stmt|,
name|tLast
init|=
literal|0
decl_stmt|,
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tProj
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|clasfIdx
init|=
literal|0
init|;
name|clasfIdx
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|clasfIdx
operator|++
control|)
block|{
name|int
name|exp
init|=
literal|0
decl_stmt|,
name|last
init|=
literal|0
decl_stmt|,
name|enrl
init|=
literal|0
decl_stmt|,
name|proj
init|=
literal|0
decl_stmt|;
empty_stmt|;
for|for
control|(
name|CourseInterface
name|course
range|:
name|other
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|CurriculumCourseInterface
name|cx
init|=
name|course
operator|.
name|getCurriculumCourse
argument_list|(
name|clasfIdx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cx
operator|!=
literal|null
condition|)
block|{
name|iUsed
index|[
name|clasfIdx
index|]
operator|=
literal|true
expr_stmt|;
name|exp
operator|+=
literal|0
expr_stmt|;
name|last
operator|+=
operator|(
name|cx
operator|.
name|getLastLike
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|getLastLike
argument_list|()
operator|)
expr_stmt|;
name|enrl
operator|+=
operator|(
name|cx
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|getEnrollment
argument_list|()
operator|)
expr_stmt|;
name|proj
operator|+=
operator|(
name|cx
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|cx
operator|.
name|getProjection
argument_list|()
operator|)
expr_stmt|;
block|}
block|}
name|total
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
operator|+=
name|exp
expr_stmt|;
name|total
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
operator|+=
name|last
expr_stmt|;
name|total
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
operator|+=
name|enrl
expr_stmt|;
name|total
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
operator|+=
name|proj
expr_stmt|;
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
operator|+=
name|exp
expr_stmt|;
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
operator|+=
name|last
expr_stmt|;
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
operator|+=
name|enrl
expr_stmt|;
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
operator|+=
name|proj
expr_stmt|;
name|tExp
operator|+=
name|exp
expr_stmt|;
name|tLast
operator|+=
name|last
expr_stmt|;
name|tEnrl
operator|+=
name|enrl
expr_stmt|;
name|tProj
operator|+=
name|proj
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|exp
argument_list|,
name|enrl
argument_list|,
name|last
argument_list|,
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-OtherRow"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|tExp
argument_list|,
name|tEnrl
argument_list|,
name|tLast
argument_list|,
name|tProj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-OtherRow"
argument_list|)
expr_stmt|;
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeOtherArea
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalRow
init|=
name|row
decl_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|int
name|row
init|=
name|finalRow
decl_stmt|;
while|while
condition|(
name|row
operator|>
literal|0
operator|&&
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
operator|==
name|sRowTypeOtherArea
condition|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|row
operator|--
expr_stmt|;
block|}
name|row
operator|=
name|finalRow
operator|+
literal|1
expr_stmt|;
while|while
condition|(
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
operator|==
name|sRowTypeOtherArea
condition|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iExpandedAreas
operator|.
name|remove
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//iCurricula.getCellFormatter().setHorizontalAlignment(row, col, HasHorizontalAlignment.ALIGN_CENTER);
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|HTML
argument_list|(
literal|"<i>Other Students</i>"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-OtherRow"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
name|int
name|tExp
init|=
literal|0
decl_stmt|,
name|tLast
init|=
literal|0
decl_stmt|,
name|tEnrl
init|=
literal|0
decl_stmt|,
name|tProj
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|clasfIdx
init|=
literal|0
init|;
name|clasfIdx
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|clasfIdx
operator|++
control|)
block|{
name|int
name|exp
init|=
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|last
init|=
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|enrl
init|=
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
decl_stmt|;
name|int
name|proj
init|=
name|totalOther
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
decl_stmt|;
name|tExp
operator|+=
name|exp
expr_stmt|;
name|tLast
operator|+=
name|last
expr_stmt|;
name|tEnrl
operator|+=
name|enrl
expr_stmt|;
name|tProj
operator|+=
name|proj
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|exp
argument_list|,
name|enrl
argument_list|,
name|last
argument_list|,
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-OtherRow"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|tExp
argument_list|,
name|tEnrl
argument_list|,
name|tLast
argument_list|,
name|tProj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-OtherRow"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|finalRow
init|=
name|row
decl_stmt|;
specifier|final
name|int
name|lastAreas
init|=
name|otherCurricula
operator|.
name|size
argument_list|()
decl_stmt|;
name|iAllAreas
operator|.
name|add
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|iExpandedAreas
operator|.
name|add
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|finalRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<=
name|lastAreas
condition|;
name|row
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|finalRow
operator|-
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeOther
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
block|}
comment|// Total line
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
name|iRowClicks
operator|.
name|add
argument_list|(
operator|new
name|ChainedCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ConditionalCommand
name|next
parameter_list|)
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesDetails
argument_list|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iHeader
operator|.
name|isCollapsible
argument_list|()
operator|!=
literal|null
condition|)
name|iHeader
operator|.
name|setCollapsible
argument_list|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
operator|&&
operator|(
name|rowType
operator|==
name|sRowTypeCurriculum
operator|||
name|rowType
operator|==
name|sRowTypeOtherArea
operator|)
condition|)
continue|continue;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
operator|+
literal|2
condition|;
name|col
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|col
argument_list|,
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|?
literal|"unitime-TotalRow"
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
name|next
operator|.
name|executeOnSuccess
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iRowTypes
operator|.
name|add
argument_list|(
name|sRowTypeTotal
argument_list|)
expr_stmt|;
name|iRowAreaId
operator|.
name|add
argument_list|(
operator|-
literal|3l
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|Label
argument_list|(
literal|"Total "
operator|+
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-TotalRow"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
for|for
control|(
name|int
name|clasfIdx
init|=
literal|0
init|;
name|clasfIdx
operator|<
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|clasfIdx
operator|++
control|)
block|{
name|int
name|exp
init|=
name|total
index|[
name|clasfIdx
index|]
index|[
literal|0
index|]
decl_stmt|;
name|int
name|last
init|=
name|total
index|[
name|clasfIdx
index|]
index|[
literal|1
index|]
decl_stmt|;
name|int
name|enrl
init|=
name|total
index|[
name|clasfIdx
index|]
index|[
literal|2
index|]
decl_stmt|;
name|int
name|proj
init|=
name|total
index|[
name|clasfIdx
index|]
index|[
literal|3
index|]
decl_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|exp
argument_list|,
name|enrl
argument_list|,
name|last
argument_list|,
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-TotalRow"
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
name|int
index|[]
name|tx
init|=
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|total
operator|.
name|length
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
name|tx
index|[
name|j
index|]
operator|+=
name|total
index|[
name|i
index|]
index|[
name|j
index|]
expr_stmt|;
name|iCurricula
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|MyLabel
argument_list|(
name|tx
index|[
literal|0
index|]
argument_list|,
name|tx
index|[
literal|2
index|]
argument_list|,
name|tx
index|[
literal|1
index|]
argument_list|,
name|tx
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"unitime-TotalRow"
argument_list|)
expr_stmt|;
comment|// Hide all lines if requested
if|if
condition|(
operator|!
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|r
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|int
name|r
init|=
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|hc
init|=
name|getHeaderCols
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|hc
operator|+
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// else collapse all
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|r
operator|++
control|)
block|{
name|int
name|rowType
init|=
name|iRowTypes
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|boolean
name|visible
init|=
operator|(
name|rowType
operator|!=
name|sRowTypeCurriculum
operator|&&
name|rowType
operator|!=
name|sRowTypeOtherArea
operator|)
decl_stmt|;
if|if
condition|(
name|iExpandedAreas
operator|.
name|contains
argument_list|(
name|iRowAreaId
operator|.
name|get
argument_list|(
name|r
argument_list|)
argument_list|)
condition|)
name|visible
operator|=
operator|!
name|visible
expr_stmt|;
name|iCurricula
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
name|visible
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Hide not-used classifications
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iUsed
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|iUsed
index|[
name|i
index|]
condition|)
block|{
name|iCurricula
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
name|getHeaderCols
argument_list|(
name|r
argument_list|)
operator|+
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|boolean
name|typeChanged
init|=
literal|false
decl_stmt|;
name|Type
name|type
init|=
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|EXP
operator|&&
name|tx
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|tx
index|[
literal|2
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|ENRL
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tx
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|LAST
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|ENRL
operator|&&
name|tx
index|[
literal|2
index|]
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|tx
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|EXP
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tx
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|LAST
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|LAST
operator|&&
name|tx
index|[
literal|1
index|]
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|tx
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|EXP
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tx
index|[
literal|2
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|ENRL
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|PROJ
operator|&&
name|tx
index|[
literal|3
index|]
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|tx
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|EXP
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tx
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|ENRL
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|tx
index|[
literal|2
index|]
operator|>
literal|0
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|LAST
expr_stmt|;
name|typeChanged
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|typeChanged
condition|)
block|{
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCourseCurriculaTableType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setText
argument_list|(
literal|"Showing "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iCurricula
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|int
name|hc
init|=
name|getHeaderCols
argument_list|(
name|r
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<=
name|iClassifications
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
operator|(
operator|(
name|MyLabel
operator|)
name|iCurricula
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
name|hc
operator|+
name|c
argument_list|)
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
comment|//((MyLabel)iCurricula.getWidget(iCurricula.getRowCount() - 1, 1)).refresh();
operator|(
operator|(
name|Label
operator|)
name|iCurricula
operator|.
name|getWidget
argument_list|(
name|iCurricula
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setText
argument_list|(
literal|"Total "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" Enrollment"
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"operations"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHint
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|int
name|getHeaderCols
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
name|int
name|left
init|=
literal|3
decl_stmt|;
while|while
condition|(
name|left
operator|>
literal|0
condition|)
block|{
name|left
operator|-=
name|iCurricula
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getColSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
return|return
name|col
return|;
block|}
specifier|private
name|void
name|initCallbacks
parameter_list|()
block|{
if|if
condition|(
name|iCourseCurriculaCallback
operator|==
literal|null
condition|)
block|{
name|iCourseCurriculaCallback
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Failed to load curricula ("
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
operator|+
literal|")."
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setCurriculaCoursesDetails
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TreeSet
argument_list|<
name|CurriculumInterface
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
literal|"The selected offering has no curricula."
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"operations"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"operations"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|Command
name|populate
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingId
operator|!=
literal|null
condition|)
name|iCurriculaService
operator|.
name|findCurriculaForAnInstructionalOffering
argument_list|(
name|iOfferingId
argument_list|,
name|iCourseCurriculaCallback
argument_list|)
expr_stmt|;
else|else
name|iCurriculaService
operator|.
name|findCurriculaForACourse
argument_list|(
name|iCourseName
argument_list|,
name|iCourseCurriculaCallback
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|iClassifications
operator|==
literal|null
condition|)
block|{
name|init
argument_list|(
name|populate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populate
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
name|initCallbacks
argument_list|()
expr_stmt|;
name|iOfferingId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
argument_list|)
expr_stmt|;
name|iCourseName
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCurriculaCoursesDetails
argument_list|()
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCourseName
parameter_list|(
name|String
name|courseName
parameter_list|)
block|{
name|initCallbacks
argument_list|()
expr_stmt|;
name|iOfferingId
operator|=
literal|null
expr_stmt|;
name|iCourseName
operator|=
name|courseName
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
specifier|public
class|class
name|MyLabel
extends|extends
name|HTML
block|{
specifier|private
name|int
name|iExp
decl_stmt|,
name|iLast
decl_stmt|,
name|iEnrl
decl_stmt|,
name|iProj
decl_stmt|;
specifier|public
name|MyLabel
parameter_list|(
name|int
name|exp
parameter_list|,
name|int
name|enrl
parameter_list|,
name|int
name|last
parameter_list|,
name|int
name|proj
parameter_list|)
block|{
comment|//super(exp> 0 || enrl> 0 || last> 0 ? ((exp> 0 ? exp : "-") + " / " + (enrl> 0 ? enrl : "-") + " / " + (last> 0 ? last : "-")) : "", false);
name|super
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iExp
operator|=
name|exp
expr_stmt|;
name|iLast
operator|=
name|last
expr_stmt|;
name|iEnrl
operator|=
name|enrl
expr_stmt|;
name|iProj
operator|=
name|proj
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|showExpected
parameter_list|()
block|{
name|setHTML
argument_list|(
name|iExp
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iExp
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showEnrolled
parameter_list|()
block|{
name|setHTML
argument_list|(
name|iEnrl
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iEnrl
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showLastLike
parameter_list|()
block|{
name|setHTML
argument_list|(
name|iLast
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iLast
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showProjected
parameter_list|()
block|{
name|setHTML
argument_list|(
name|iProj
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iProj
argument_list|)
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showExpectedEnrolled
parameter_list|()
block|{
if|if
condition|(
name|iExp
operator|>
literal|0
operator|||
name|iEnrl
operator|>
literal|0
condition|)
name|setHTML
argument_list|(
operator|(
name|iExp
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iExp
argument_list|)
else|:
literal|"-"
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|iEnrl
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iEnrl
argument_list|)
else|:
literal|"-"
operator|)
argument_list|)
expr_stmt|;
else|else
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showExpectedLastLike
parameter_list|()
block|{
if|if
condition|(
name|iExp
operator|>
literal|0
operator|||
name|iLast
operator|>
literal|0
condition|)
name|setHTML
argument_list|(
operator|(
name|iExp
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iExp
argument_list|)
else|:
literal|"-"
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|iLast
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iLast
argument_list|)
else|:
literal|"-"
operator|)
argument_list|)
expr_stmt|;
else|else
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showExpectedProjected
parameter_list|()
block|{
if|if
condition|(
name|iExp
operator|>
literal|0
operator|||
name|iProj
operator|>
literal|0
condition|)
name|setHTML
argument_list|(
operator|(
name|iExp
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iExp
argument_list|)
else|:
literal|"-"
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|iProj
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iProj
argument_list|)
else|:
literal|"-"
operator|)
argument_list|)
expr_stmt|;
else|else
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showLastLikeEnrolled
parameter_list|()
block|{
if|if
condition|(
name|iLast
operator|>
literal|0
operator|||
name|iEnrl
operator|>
literal|0
condition|)
name|setHTML
argument_list|(
operator|(
name|iLast
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iLast
argument_list|)
else|:
literal|"-"
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|iEnrl
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iEnrl
argument_list|)
else|:
literal|"-"
operator|)
argument_list|)
expr_stmt|;
else|else
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showProjectedEnrolled
parameter_list|()
block|{
if|if
condition|(
name|iProj
operator|>
literal|0
operator|||
name|iEnrl
operator|>
literal|0
condition|)
name|setHTML
argument_list|(
operator|(
name|iProj
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iProj
argument_list|)
else|:
literal|"-"
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|iEnrl
operator|>
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|iEnrl
argument_list|)
else|:
literal|"-"
operator|)
argument_list|)
expr_stmt|;
else|else
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|refresh
parameter_list|()
block|{
switch|switch
condition|(
name|CurriculumCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getCourseCurriculaTableType
argument_list|()
condition|)
block|{
case|case
name|EXP
case|:
name|showExpected
argument_list|()
expr_stmt|;
break|break;
case|case
name|ENRL
case|:
name|showEnrolled
argument_list|()
expr_stmt|;
break|break;
case|case
name|LAST
case|:
name|showLastLike
argument_list|()
expr_stmt|;
break|break;
case|case
name|PROJ
case|:
name|showProjected
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXP2LAST
case|:
name|showExpectedLastLike
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXP2ENRL
case|:
name|showExpectedEnrolled
argument_list|()
expr_stmt|;
break|break;
case|case
name|EXP2PROJ
case|:
name|showExpectedProjected
argument_list|()
expr_stmt|;
break|break;
case|case
name|LAST2ENRL
case|:
name|showLastLikeEnrolled
argument_list|()
expr_stmt|;
break|break;
case|case
name|PROJ2ENRL
case|:
name|showProjectedEnrolled
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|MyFlexTable
extends|extends
name|FlexTable
block|{
specifier|public
name|MyFlexTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
return|return;
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
specifier|final
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
specifier|final
name|ChainedCommand
name|command
init|=
name|iRowClicks
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|==
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|AUTO
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
name|Event
operator|.
name|ONCLICK
case|:
if|if
condition|(
name|command
operator|==
literal|null
condition|)
break|break;
if|if
condition|(
name|command
operator|.
name|getLoadingMessage
argument_list|()
operator|!=
literal|null
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|command
operator|.
name|getLoadingMessage
argument_list|()
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
name|iSelectedRow
operator|=
name|row
expr_stmt|;
name|command
operator|.
name|execute
argument_list|(
operator|new
name|ConditionalCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|executeOnSuccess
parameter_list|()
block|{
comment|//getRowFormatter().setStyleName(row, null);
if|if
condition|(
name|command
operator|.
name|getLoadingMessage
argument_list|()
operator|!=
literal|null
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|executeOnFailure
parameter_list|()
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"unitime-TableRowHover"
argument_list|)
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|getLoadingMessage
argument_list|()
operator|!=
literal|null
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
specifier|static
interface|interface
name|ChainedCommand
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|ConditionalCommand
name|command
parameter_list|)
function_decl|;
specifier|public
name|String
name|getLoadingMessage
parameter_list|()
function_decl|;
block|}
specifier|public
specifier|static
interface|interface
name|ConditionalCommand
block|{
specifier|public
name|void
name|executeOnSuccess
parameter_list|()
function_decl|;
specifier|public
name|void
name|executeOnFailure
parameter_list|()
function_decl|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

