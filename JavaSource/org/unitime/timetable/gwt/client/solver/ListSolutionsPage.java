begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|SolverPage
operator|.
name|SolverStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|ListSolutionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|ListSolutionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseTimetablingSolverInterface
operator|.
name|SolutionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|InfoPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|ProgressMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolutionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableRowInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasText
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ListSolutionsPage
extends|extends
name|SimpleForm
block|{
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iTableHeader
decl_stmt|;
specifier|private
name|DataTable
name|iTable
decl_stmt|;
specifier|private
name|ListSolutionsResponse
name|iResponse
decl_stmt|;
specifier|private
name|TextArea
name|iCurrentSolutionNote
decl_stmt|;
specifier|private
name|ListBox
name|iSolverConfig
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iSolverOwner
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iSolverHost
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iSolutionLine
decl_stmt|,
name|iSolutionButtonsLine
decl_stmt|,
name|iSolutionsTableHeaderLine
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iSelectedSolutionLine
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|iSelectedSolutionButtonsLine
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ListSolutionsPage
parameter_list|()
block|{
name|addStyleName
argument_list|(
literal|"unitime-ListSolutionsPage"
argument_list|)
expr_stmt|;
name|iTableHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectSavedSolutions
argument_list|()
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iTableHeader
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|iTableHeader
argument_list|,
name|SolutionOperation
operator|.
name|INIT
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|execute
parameter_list|(
specifier|final
name|UniTimeHeaderPanel
name|header
parameter_list|,
name|SolutionOperation
name|operation
parameter_list|)
block|{
name|execute
argument_list|(
name|header
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|execute
parameter_list|(
specifier|final
name|UniTimeHeaderPanel
name|header
parameter_list|,
name|SolutionOperation
name|operation
parameter_list|,
name|Long
name|solutionId
parameter_list|)
block|{
name|execute
argument_list|(
name|header
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|,
name|solutionId
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|execute
parameter_list|(
specifier|final
name|UniTimeHeaderPanel
name|header
parameter_list|,
specifier|final
name|SolutionOperation
name|operation
parameter_list|,
specifier|final
name|HasText
name|note
parameter_list|,
specifier|final
name|Long
name|solutionId
parameter_list|)
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|EXPORT
case|:
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"export?output=solution.csv&type=course"
operator|+
operator|(
name|solutionId
operator|==
literal|null
condition|?
literal|""
else|:
literal|"&solution="
operator|+
name|solutionId
operator|)
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|ListSolutionsRequest
name|request
init|=
operator|new
name|ListSolutionsRequest
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|String
name|confirmation
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|UNLOAD
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverUnload
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSave
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCurrentSolutionNote
operator|!=
literal|null
condition|)
name|request
operator|.
name|setNote
argument_list|(
name|iCurrentSolutionNote
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVE_AS_NEW
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSaveAsNew
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCurrentSolutionNote
operator|!=
literal|null
condition|)
name|request
operator|.
name|setNote
argument_list|(
name|iCurrentSolutionNote
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVE_COMMIT
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSaveCommit
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCurrentSolutionNote
operator|!=
literal|null
condition|)
name|request
operator|.
name|setNote
argument_list|(
name|iCurrentSolutionNote
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVE_AS_NEW_COMMIT
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSaveAsNewCommit
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCurrentSolutionNote
operator|!=
literal|null
condition|)
name|request
operator|.
name|setNote
argument_list|(
name|iCurrentSolutionNote
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNCOMMIT
case|:
name|request
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|addSolutionId
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverUncommit
argument_list|()
expr_stmt|;
break|break;
case|case
name|COMMIT
case|:
name|request
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|addSolutionId
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverCommit
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|request
operator|.
name|addSolutionId
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverDelete
argument_list|()
expr_stmt|;
break|break;
case|case
name|RELOAD
case|:
if|if
condition|(
name|iCurrentSolutionNote
operator|!=
literal|null
condition|)
name|request
operator|.
name|setNote
argument_list|(
name|iCurrentSolutionNote
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
case|case
name|DESELECT
case|:
name|request
operator|.
name|addSolutionId
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
break|break;
case|case
name|UPDATE_NOTE
case|:
name|request
operator|.
name|setNote
argument_list|(
name|note
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|addSolutionId
argument_list|(
name|solutionId
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOAD
case|:
name|request
operator|.
name|setConfigurationId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverConfig
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHost
argument_list|(
name|iSolverHost
operator|==
literal|null
condition|?
literal|null
else|:
name|iSolverHost
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LOAD_EMPTY
case|:
name|request
operator|.
name|setConfigurationId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverConfig
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setHost
argument_list|(
name|iSolverHost
operator|==
literal|null
condition|?
literal|null
else|:
name|iSolverHost
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOwnerId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverOwner
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|final
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|operation
operator|==
name|SolutionOperation
operator|.
name|INIT
operator|||
name|operation
operator|==
name|SolutionOperation
operator|.
name|CHECK
condition|)
name|header
operator|.
name|showLoading
argument_list|()
expr_stmt|;
else|else
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitSolverExecution
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ListSolutionsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|header
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ListSolutionsResponse
name|response
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|header
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|reloadSolverInfo
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|confirmation
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|confirmation
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|ClickHandler
name|createClickHandler
parameter_list|(
specifier|final
name|UniTimeHeaderPanel
name|header
parameter_list|,
name|SolutionOperation
name|operation
parameter_list|)
block|{
return|return
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|ClickHandler
name|createClickHandler
parameter_list|(
specifier|final
name|UniTimeHeaderPanel
name|header
parameter_list|,
name|SolutionOperation
name|operation
parameter_list|,
name|Long
name|solutionId
parameter_list|)
block|{
return|return
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|operation
argument_list|,
literal|null
argument_list|,
name|solutionId
argument_list|)
return|;
block|}
specifier|protected
name|ClickHandler
name|createClickHandler
parameter_list|(
specifier|final
name|UniTimeHeaderPanel
name|header
parameter_list|,
specifier|final
name|SolutionOperation
name|operation
parameter_list|,
specifier|final
name|HasText
name|parameter
parameter_list|,
specifier|final
name|Long
name|solutionId
parameter_list|)
block|{
return|return
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|execute
argument_list|(
name|header
argument_list|,
name|operation
argument_list|,
name|parameter
argument_list|,
name|solutionId
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|populate
parameter_list|(
name|ListSolutionsRequest
name|request
parameter_list|,
name|ListSolutionsResponse
name|response
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iResponse
operator|=
name|response
expr_stmt|;
name|RootPanel
name|cpm
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:CustomPageMessages"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpm
operator|!=
literal|null
condition|)
block|{
name|cpm
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasPageMessages
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|PageMessage
name|pm
range|:
name|response
operator|.
name|getPageMessages
argument_list|()
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|PageMessageType
operator|.
name|ERROR
condition|?
literal|"unitime-PageError"
else|:
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|PageMessageType
operator|.
name|WARNING
condition|?
literal|"unitime-PageWarn"
else|:
literal|"unitime-PageMessage"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|pm
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|hasUrl
argument_list|()
condition|)
block|{
name|p
operator|.
name|addStyleName
argument_list|(
literal|"unitime-ClickablePageMessage"
argument_list|)
expr_stmt|;
name|p
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|pm
operator|.
name|hasUrl
argument_list|()
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|pm
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|cpm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iSolutionLine
operator|=
operator|-
literal|1
expr_stmt|;
name|iSolutionButtonsLine
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasCurrentSolution
argument_list|()
condition|)
block|{
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectListSolutionsCurrentSolution
argument_list|()
argument_list|)
decl_stmt|;
name|iSolutionLine
operator|=
name|addHeaderRow
argument_list|(
name|header
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getSolverStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SolverStatus
name|status
init|=
operator|new
name|SolverStatus
argument_list|()
decl_stmt|;
name|status
operator|.
name|setStatus
argument_list|(
name|response
operator|.
name|getSolverStatus
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverStatus
argument_list|()
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getSolverProgress
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverProgress
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|response
operator|.
name|getSolverProgress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SolutionInfo
name|solution
init|=
name|response
operator|.
name|getCurrentSolution
argument_list|()
decl_stmt|;
if|if
condition|(
name|solution
operator|.
name|getCreated
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionCreated
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|solution
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionOwner
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|solution
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|solution
operator|.
name|getCommitted
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionCommitted
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|solution
operator|.
name|getCommitted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|UPDATE_NOTE
argument_list|)
condition|)
block|{
name|iCurrentSolutionNote
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iCurrentSolutionNote
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iCurrentSolutionNote
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|iCurrentSolutionNote
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|iCurrentSolutionNote
operator|.
name|setText
argument_list|(
name|solution
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionNote
argument_list|()
argument_list|)
argument_list|,
name|iCurrentSolutionNote
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|solution
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|solution
operator|.
name|getNote
argument_list|()
argument_list|)
decl_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionNote
argument_list|()
argument_list|)
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InfoPair
name|pair
range|:
name|solution
operator|.
name|getPairs
argument_list|()
control|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasLog
argument_list|()
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionLog
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ProgressLog
argument_list|(
name|response
operator|.
name|getLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|UNLOAD
argument_list|)
operator|||
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|CHECK
argument_list|)
condition|)
block|{
name|UniTimeHeaderPanel
name|buttons
init|=
name|header
operator|.
name|clonePanel
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSave
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|SAVE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save new"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveAsNew
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_COMMIT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save commit"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveCommit
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save new commit"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveAsNewCommit
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|RELOAD
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"reload"
argument_list|,
name|MESSAGES
operator|.
name|opSolverReload
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|RELOAD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|UNLOAD
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"unload"
argument_list|,
name|MESSAGES
operator|.
name|opSolverUnload
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|UNLOAD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|CHECK
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"refresh"
argument_list|,
name|MESSAGES
operator|.
name|opSolverRefresh
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|CHECK
argument_list|)
argument_list|)
expr_stmt|;
name|iSolutionButtonsLine
operator|=
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|iSolutionButtonsLine
argument_list|,
literal|0
argument_list|,
literal|"unitime-TopLine"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasConfigurations
argument_list|()
condition|)
block|{
name|iSolverConfig
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|SolverConfiguration
name|config
range|:
name|response
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|iSolverConfig
operator|.
name|addItem
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|config
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|config
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getConfigurationId
argument_list|()
argument_list|)
condition|)
name|iSolverConfig
operator|.
name|setSelectedIndex
argument_list|(
name|iSolverConfig
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iSolverConfig
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasHosts
argument_list|()
condition|)
block|{
name|iSolverHost
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|response
operator|.
name|getHosts
argument_list|()
control|)
block|{
name|iSolverHost
operator|.
name|addItem
argument_list|(
name|host
argument_list|)
expr_stmt|;
if|if
condition|(
name|host
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
name|iSolverHost
operator|.
name|setSelectedIndex
argument_list|(
name|iSolverHost
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iSolverHost
operator|=
literal|null
expr_stmt|;
block|}
name|iSelectedSolutionLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iSelectedSolutionButtonsLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
name|load
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|hasSelectedSolutions
argument_list|()
condition|)
block|{
name|load
operator|=
literal|true
expr_stmt|;
for|for
control|(
specifier|final
name|SolutionInfo
name|selected
range|:
name|response
operator|.
name|getSelectedSolutions
argument_list|()
control|)
block|{
name|UniTimeHeaderPanel
name|header
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectSolverSelectedSolution
argument_list|(
name|selected
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iSelectedSolutionLine
operator|.
name|put
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|addHeaderRow
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|.
name|getCreated
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionCreated
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|selected
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionOwner
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|selected
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|.
name|getCommitted
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionCommitted
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|selected
operator|.
name|getCommitted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TextArea
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|UPDATE_NOTE
argument_list|)
condition|)
block|{
name|note
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|note
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|note
operator|.
name|setVisibleLines
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|note
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|note
operator|.
name|setText
argument_list|(
name|selected
operator|.
name|getNote
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionNote
argument_list|()
argument_list|)
argument_list|,
name|note
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|selected
operator|.
name|getNote
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|selected
operator|.
name|getNote
argument_list|()
argument_list|)
decl_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionNote
argument_list|()
argument_list|)
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|InfoPair
name|pair
range|:
name|selected
operator|.
name|getPairs
argument_list|()
control|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|.
name|hasLog
argument_list|()
condition|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|propSolutionLog
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ProgressLog
argument_list|(
name|selected
operator|.
name|getLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeHeaderPanel
name|buttons
init|=
name|header
operator|.
name|clonePanel
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"deselect"
argument_list|,
name|MESSAGES
operator|.
name|opSolutionDeselect
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|DESELECT
argument_list|,
name|selected
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|UPDATE_NOTE
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"update note"
argument_list|,
name|MESSAGES
operator|.
name|opSolutionUpdateNote
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|UPDATE_NOTE
argument_list|,
name|note
argument_list|,
name|selected
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|COMMIT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"commit"
argument_list|,
name|MESSAGES
operator|.
name|opSolutionCommit
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|COMMIT
argument_list|,
name|note
argument_list|,
name|selected
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|UNCOMMIT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"uncommit"
argument_list|,
name|MESSAGES
operator|.
name|opSolutionUncommit
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|UNCOMMIT
argument_list|,
name|note
argument_list|,
name|selected
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|EXPORT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"export"
argument_list|,
name|MESSAGES
operator|.
name|opSolutionExport
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|EXPORT
argument_list|,
name|selected
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|DELETE
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"delete"
argument_list|,
name|MESSAGES
operator|.
name|opSolutionDelete
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|header
argument_list|,
name|SolutionOperation
operator|.
name|DELETE
argument_list|,
name|selected
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|canExecute
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|SolutionOperation
operator|.
name|LOAD
argument_list|)
condition|)
name|load
operator|=
literal|false
expr_stmt|;
name|int
name|row
init|=
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
decl_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
literal|"unitime-TopLine"
argument_list|)
expr_stmt|;
name|iSelectedSolutionButtonsLine
operator|.
name|put
argument_list|(
name|selected
operator|.
name|getId
argument_list|()
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|load
operator|&&
name|iSolverConfig
operator|!=
literal|null
condition|)
block|{
name|P
name|loadPanel
init|=
operator|new
name|P
argument_list|(
literal|"load-panel"
argument_list|)
decl_stmt|;
name|P
name|configLabel
init|=
operator|new
name|P
argument_list|(
literal|"config-label"
argument_list|)
decl_stmt|;
name|configLabel
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propSolverConfig
argument_list|()
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|configLabel
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|iSolverConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSolverHost
operator|!=
literal|null
condition|)
block|{
name|P
name|hostLabel
init|=
operator|new
name|P
argument_list|(
literal|"host-label"
argument_list|)
decl_stmt|;
name|hostLabel
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propSolverHost
argument_list|()
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|hostLabel
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|iSolverHost
argument_list|)
expr_stmt|;
block|}
name|AriaButton
name|button
init|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|opSolverLoad
argument_list|()
argument_list|)
decl_stmt|;
name|button
operator|.
name|addClickHandler
argument_list|(
name|createClickHandler
argument_list|(
name|iTableHeader
argument_list|,
name|SolutionOperation
operator|.
name|LOAD
argument_list|)
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propLoadInteractiveSolver
argument_list|()
argument_list|,
name|loadPanel
argument_list|)
expr_stmt|;
block|}
block|}
name|iTableHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iSolutionsTableHeaderLine
operator|=
name|addHeaderRow
argument_list|(
name|iTableHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|response
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getRows
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|response
operator|.
name|hasMessage
argument_list|()
condition|)
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorListSolutionsNoDataReturned
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iTable
operator|==
literal|null
condition|)
block|{
name|iTable
operator|=
operator|new
name|DataTable
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|SolverCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setListSolutionsSort
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|TableRowInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|boolean
name|selected
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|iResponse
operator|.
name|hasSelectedSolutions
argument_list|()
condition|)
for|for
control|(
name|SolutionInfo
name|solution
range|:
name|iResponse
operator|.
name|getSelectedSolutions
argument_list|()
control|)
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|solution
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|selected
operator|=
literal|true
expr_stmt|;
name|execute
argument_list|(
name|iTableHeader
argument_list|,
name|selected
condition|?
name|SolutionOperation
operator|.
name|DESELECT
else|:
name|SolutionOperation
operator|.
name|SELECT
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTable
operator|.
name|populate
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|setValue
argument_list|(
name|SolverCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getListSolutionsSort
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|load
operator|&&
name|iSolverConfig
operator|!=
literal|null
operator|&&
name|response
operator|.
name|canExecute
argument_list|(
operator|-
literal|1l
argument_list|,
name|SolutionOperation
operator|.
name|LOAD_EMPTY
argument_list|)
operator|&&
name|response
operator|.
name|hasSolverOwners
argument_list|()
condition|)
block|{
name|P
name|loadPanel
init|=
operator|new
name|P
argument_list|(
literal|"load-panel"
argument_list|)
decl_stmt|;
name|iSolverOwner
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|SolverOwner
name|owner
range|:
name|response
operator|.
name|getSolverOwners
argument_list|()
control|)
block|{
name|iSolverOwner
operator|.
name|addItem
argument_list|(
name|owner
operator|.
name|getName
argument_list|()
argument_list|,
name|owner
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|P
name|ownerLabel
init|=
operator|new
name|P
argument_list|(
literal|"owner-label"
argument_list|)
decl_stmt|;
name|ownerLabel
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propSolverOwner
argument_list|()
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|ownerLabel
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|iSolverOwner
argument_list|)
expr_stmt|;
name|P
name|configLabel
init|=
operator|new
name|P
argument_list|(
literal|"config-label"
argument_list|)
decl_stmt|;
name|configLabel
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propSolverConfig
argument_list|()
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|configLabel
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|iSolverConfig
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSolverHost
operator|!=
literal|null
condition|)
block|{
name|P
name|hostLabel
init|=
operator|new
name|P
argument_list|(
literal|"host-label"
argument_list|)
decl_stmt|;
name|hostLabel
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|propSolverHost
argument_list|()
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|hostLabel
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|iSolverHost
argument_list|)
expr_stmt|;
block|}
name|AriaButton
name|button
init|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|opSolverLoadEmptySolution
argument_list|()
argument_list|)
decl_stmt|;
name|button
operator|.
name|addClickHandler
argument_list|(
name|createClickHandler
argument_list|(
name|iTableHeader
argument_list|,
name|SolutionOperation
operator|.
name|LOAD_EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|loadPanel
operator|.
name|add
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propLoadInteractiveSolver
argument_list|()
argument_list|,
name|loadPanel
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasErrors
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|alert
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|id
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Integer
name|row
init|=
name|iSelectedSolutionButtonsLine
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
operator|(
operator|(
name|UniTimeHeaderPanel
operator|)
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setErrorMessage
argument_list|(
name|response
operator|.
name|getErrorMessage
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
switch|switch
condition|(
name|response
operator|.
name|getOperation
argument_list|()
condition|)
block|{
case|case
name|LOAD
case|:
case|case
name|LOAD_EMPTY
case|:
if|if
condition|(
name|iSolutionLine
operator|>=
literal|0
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iSolutionLine
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
break|break;
case|case
name|SELECT
case|:
if|if
condition|(
name|request
operator|.
name|hasSolutionIds
argument_list|()
condition|)
block|{
for|for
control|(
name|Long
name|id
range|:
name|request
operator|.
name|getSolutionIds
argument_list|()
control|)
block|{
name|Integer
name|row
init|=
name|iSelectedSolutionLine
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
break|break;
case|case
name|DESELECT
case|:
case|case
name|UNLOAD
case|:
if|if
condition|(
name|iSolutionsTableHeaderLine
operator|>=
literal|0
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iSolutionsTableHeaderLine
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
specifier|public
specifier|static
class|class
name|ProgressLog
extends|extends
name|HTML
implements|implements
name|TakesValue
argument_list|<
name|List
argument_list|<
name|ProgressMessage
argument_list|>
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|iLog
decl_stmt|;
specifier|public
name|ProgressLog
parameter_list|(
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|log
parameter_list|)
block|{
name|setValue
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|htmlTraceLog
parameter_list|(
name|ProgressMessage
name|m
parameter_list|)
block|{
name|String
name|trace
index|[]
init|=
name|m
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
operator|==
literal|null
operator|||
name|trace
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<BR>"
operator|+
name|trace
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|append
argument_list|(
literal|"<BR>&nbsp;&nbsp;&nbsp;&nbsp;at "
operator|+
name|trace
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|ProgressMessage
name|m
parameter_list|)
block|{
switch|switch
condition|(
name|m
operator|.
name|getLevel
argument_list|()
condition|)
block|{
case|case
name|WARN
case|:
return|return
literal|"<span style='color:orange;font-weight:bold;'>"
operator|+
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
index|[
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|":</span> "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|ERROR
case|:
return|return
literal|"<span style='color:red;font-weight:bold;'>"
operator|+
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
index|[
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|":</span> "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|FATAL
case|:
return|return
literal|"<span style='color:red;font-weight:bold;'>&gt;&gt;&gt;"
operator|+
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
index|[
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|": "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"&lt;&lt;&lt;</span>"
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|value
parameter_list|)
block|{
name|iLog
operator|=
name|value
expr_stmt|;
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|iLog
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProgressMessage
name|m
range|:
name|iLog
control|)
block|{
name|String
name|html
init|=
name|toString
argument_list|(
name|m
argument_list|)
decl_stmt|;
if|if
condition|(
name|html
operator|==
literal|null
operator|||
name|html
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|s
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
name|setHTML
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|iLog
return|;
block|}
specifier|public
name|Date
name|getLastDate
parameter_list|()
block|{
if|if
condition|(
name|iLog
operator|==
literal|null
operator|||
name|iLog
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iLog
operator|.
name|get
argument_list|(
name|iLog
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getDate
argument_list|()
return|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|log
parameter_list|)
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|(
name|getHTML
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProgressMessage
name|m
range|:
name|log
control|)
block|{
name|iLog
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|s
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setHTML
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

