begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|ProgressLogLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|ProgressMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolutionLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverLogPageRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverLogPageResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverLogPage
extends|extends
name|SimpleForm
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DateTimeFormat
name|sLogDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormatSolverLog
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|SolverType
name|iType
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|;
specifier|private
name|ProgressLog
name|iLog
decl_stmt|;
specifier|private
name|ListBox
name|iLevel
decl_stmt|;
specifier|private
name|int
name|iLevelRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|Timer
name|iTimer
init|=
literal|null
decl_stmt|;
specifier|public
name|SolverLogPage
parameter_list|()
block|{
name|addStyleName
argument_list|(
literal|"unitime-SolverPage"
argument_list|)
expr_stmt|;
name|iType
operator|=
name|SolverType
operator|.
name|valueOf
argument_list|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|iType
condition|)
block|{
case|case
name|COURSE
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageCourseTimetablingSolverLog
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageExaminationTimetablingSolverLog
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageInstructorSchedulingSolverLog
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageStudentSchedulingSolverLog
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectSolverLog
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"refresh"
argument_list|,
name|MESSAGES
operator|.
name|opSolverLogRefresh
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iLevel
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|level
range|:
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
control|)
name|iLevel
operator|.
name|addItem
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|iLevel
operator|.
name|setSelectedIndex
argument_list|(
name|SolverCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getLogLevel
argument_list|()
argument_list|)
expr_stmt|;
name|iLevelRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverLogLevel
argument_list|()
argument_list|,
name|iLevel
argument_list|)
expr_stmt|;
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iLevelRow
argument_list|,
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|,
name|Unit
operator|.
name|PCT
argument_list|)
expr_stmt|;
name|iLevel
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iTimer
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|iLog
operator|!=
literal|null
operator|&&
name|iLog
operator|.
name|getLastDate
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|level
init|=
name|SolverCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getLogLevel
argument_list|()
decl_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|SolverLogPageRequest
argument_list|(
name|iType
argument_list|,
name|ProgressLogLevel
operator|.
name|values
argument_list|()
index|[
name|level
index|]
argument_list|,
name|iLog
operator|.
name|getLastDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SolverLogPageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SolverLogPageResponse
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|hasLog
argument_list|()
condition|)
name|iLog
operator|.
name|append
argument_list|(
name|result
operator|.
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|int
name|level
init|=
name|iLevel
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
name|SolverCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setLogLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|SolverLogPageRequest
argument_list|(
name|iType
argument_list|,
name|ProgressLogLevel
operator|.
name|values
argument_list|()
index|[
name|level
index|]
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SolverLogPageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SolverLogPageResponse
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>
name|iLevelRow
condition|;
name|row
operator|--
control|)
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasLog
argument_list|()
condition|)
block|{
name|iLog
operator|=
operator|new
name|ProgressLog
argument_list|(
name|result
operator|.
name|getLog
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|iLog
argument_list|)
expr_stmt|;
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|iTimer
operator|.
name|scheduleRepeating
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|result
operator|.
name|hasSolutionLogs
argument_list|()
condition|)
block|{
for|for
control|(
name|SolutionLog
name|log
range|:
name|result
operator|.
name|getSolutionLogs
argument_list|()
control|)
block|{
if|if
condition|(
name|log
operator|.
name|hasLog
argument_list|()
condition|)
block|{
name|addHeaderRow
argument_list|(
name|log
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|ProgressLog
argument_list|(
name|log
operator|.
name|getLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|ProgressLog
extends|extends
name|HTML
implements|implements
name|TakesValue
argument_list|<
name|List
argument_list|<
name|ProgressMessage
argument_list|>
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|iLog
decl_stmt|;
specifier|public
name|ProgressLog
parameter_list|(
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|log
parameter_list|)
block|{
name|setValue
argument_list|(
name|log
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|htmlTraceLog
parameter_list|(
name|ProgressMessage
name|m
parameter_list|)
block|{
name|String
name|trace
index|[]
init|=
name|m
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
if|if
condition|(
name|trace
operator|==
literal|null
operator|||
name|trace
operator|.
name|length
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|StringBuffer
name|ret
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"<BR>"
operator|+
name|trace
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|ret
operator|.
name|append
argument_list|(
literal|"<BR>&nbsp;&nbsp;&nbsp;&nbsp;at "
operator|+
name|trace
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|toString
parameter_list|(
name|ProgressMessage
name|m
parameter_list|)
block|{
switch|switch
condition|(
name|m
operator|.
name|getLevel
argument_list|()
condition|)
block|{
case|case
name|TRACE
case|:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"&nbsp;&nbsp;&nbsp;&nbsp;-- "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|DEBUG
case|:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"&nbsp;&nbsp;-- "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|PROGRESS
case|:
case|case
name|INFO
case|:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|STAGE
case|:
return|return
literal|"<br>"
operator|+
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"<span style='font-weight:bold;'>"
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</span>"
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|WARN
case|:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"<span style='color:orange;font-weight:bold;'>"
operator|+
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
index|[
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|":</span> "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|ERROR
case|:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"<span style='color:red;font-weight:bold;'>"
operator|+
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
index|[
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|":</span> "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
case|case
name|FATAL
case|:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|"<span style='color:red;font-weight:bold;'>&gt;&gt;&gt;"
operator|+
name|CONSTANTS
operator|.
name|progressLogLevel
argument_list|()
index|[
name|m
operator|.
name|getLevel
argument_list|()
operator|.
name|ordinal
argument_list|()
index|]
operator|.
name|toUpperCase
argument_list|()
operator|+
literal|": "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"&lt;&lt;&lt;</span>"
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
default|default:
return|return
name|sLogDateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getDate
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
name|htmlTraceLog
argument_list|(
name|m
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|value
parameter_list|)
block|{
name|iLog
operator|=
name|value
expr_stmt|;
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|iLog
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ProgressMessage
name|m
range|:
name|iLog
control|)
block|{
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|s
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|setHTML
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|iLog
return|;
block|}
specifier|public
name|Date
name|getLastDate
parameter_list|()
block|{
if|if
condition|(
name|iLog
operator|==
literal|null
operator|||
name|iLog
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|iLog
operator|.
name|get
argument_list|(
name|iLog
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getDate
argument_list|()
return|;
block|}
specifier|public
name|void
name|append
parameter_list|(
name|List
argument_list|<
name|ProgressMessage
argument_list|>
name|log
parameter_list|)
block|{
name|StringBuffer
name|s
init|=
operator|new
name|StringBuffer
argument_list|(
name|getHTML
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProgressMessage
name|m
range|:
name|log
control|)
block|{
name|iLog
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|s
operator|.
name|append
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setHTML
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

