begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|suggestions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|TimeHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|BtbInstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|CurriculumInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|DateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|DistributionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|RoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|SelectedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|StudentConflictInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|SuggestionProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|TimeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|TextDecoration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SuggestionsPageContext
block|{
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|NumberFormat
name|sDF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"0.###"
argument_list|)
decl_stmt|;
specifier|private
name|SuggestionProperties
name|iProperties
decl_stmt|;
specifier|public
name|SuggestionProperties
name|getProperties
parameter_list|()
block|{
return|return
name|iProperties
return|;
block|}
specifier|public
name|void
name|setSuggestionProperties
parameter_list|(
name|SuggestionProperties
name|properties
parameter_list|)
block|{
name|iProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|select
parameter_list|(
name|ClassInfo
name|clazz
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|remove
parameter_list|(
name|ClassInfo
name|clazz
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|onSelection
parameter_list|(
name|Command
name|undo
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|void
name|assign
parameter_list|(
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|assignment
parameter_list|,
name|UniTimeHeaderPanel
name|panel
parameter_list|)
function_decl|;
specifier|public
name|DateLabel
name|createDateLabel
parameter_list|(
name|DateInfo
name|date
parameter_list|)
block|{
return|return
operator|new
name|DateLabel
argument_list|(
name|date
argument_list|)
return|;
block|}
specifier|protected
class|class
name|DateLabel
extends|extends
name|P
block|{
specifier|public
name|DateLabel
parameter_list|(
name|DateInfo
name|date
parameter_list|)
block|{
name|super
argument_list|(
literal|"date"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|date
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|.
name|getDatePatternPreference
argument_list|()
operator|!=
literal|0
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|date
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|TimeLabel
name|createTimeLabel
parameter_list|(
name|TimeInfo
name|time
parameter_list|,
name|Long
name|classId
parameter_list|,
name|boolean
name|endTime
parameter_list|)
block|{
return|return
operator|new
name|TimeLabel
argument_list|(
name|time
argument_list|,
name|classId
argument_list|,
name|endTime
argument_list|)
return|;
block|}
specifier|protected
class|class
name|TimeLabel
extends|extends
name|P
block|{
specifier|public
name|TimeLabel
parameter_list|(
name|TimeInfo
name|time
parameter_list|,
name|Long
name|classId
parameter_list|,
name|boolean
name|endTime
parameter_list|)
block|{
name|super
argument_list|(
literal|"time"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|time
operator|.
name|getName
argument_list|(
name|iProperties
operator|.
name|getFirstDay
argument_list|()
argument_list|,
name|endTime
argument_list|,
name|CONSTANTS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|getPref
argument_list|()
operator|!=
literal|0
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|time
operator|.
name|getPref
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|isStriked
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextDecoration
argument_list|(
name|TextDecoration
operator|.
name|LINE_THROUGH
argument_list|)
expr_stmt|;
specifier|final
name|String
name|timeHint
init|=
name|classId
operator|+
literal|","
operator|+
name|time
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|time
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|e
parameter_list|)
block|{
name|TimeHint
operator|.
name|showHint
argument_list|(
name|TimeLabel
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|timeHint
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|e
parameter_list|)
block|{
name|TimeHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|RoomsLabel
name|createRoomsLabel
parameter_list|(
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
parameter_list|)
block|{
return|return
operator|new
name|RoomsLabel
argument_list|(
name|rooms
argument_list|)
return|;
block|}
specifier|protected
class|class
name|RoomsLabel
extends|extends
name|P
block|{
specifier|public
name|RoomsLabel
parameter_list|(
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
parameter_list|)
block|{
name|super
argument_list|(
literal|"rooms"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
name|withSeparator
argument_list|(
operator|new
name|RoomLabel
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|AssignmentLabel
name|createAssignmentLabel
parameter_list|(
name|TimeInfo
name|time
parameter_list|,
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
parameter_list|,
name|Long
name|classId
parameter_list|,
name|boolean
name|showDate
parameter_list|)
block|{
return|return
operator|new
name|AssignmentLabel
argument_list|(
name|time
argument_list|,
name|rooms
argument_list|,
name|classId
argument_list|,
name|showDate
argument_list|)
return|;
block|}
specifier|protected
class|class
name|AssignmentLabel
extends|extends
name|P
block|{
specifier|public
name|AssignmentLabel
parameter_list|(
name|TimeInfo
name|time
parameter_list|,
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
parameter_list|,
name|Long
name|classId
parameter_list|,
name|boolean
name|showDate
parameter_list|)
block|{
name|super
argument_list|(
literal|"assignment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showDate
operator|&&
name|time
operator|.
name|hasDatePattern
argument_list|()
condition|)
name|add
argument_list|(
operator|new
name|DateLabel
argument_list|(
name|time
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
operator|new
name|TimeLabel
argument_list|(
name|time
argument_list|,
name|classId
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rooms
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
name|withSeparator
argument_list|(
operator|new
name|RoomLabel
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
class|class
name|RoomLabel
extends|extends
name|P
block|{
specifier|public
name|RoomLabel
parameter_list|(
specifier|final
name|RoomInfo
name|room
parameter_list|)
block|{
name|super
argument_list|(
literal|"room"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getPref
argument_list|()
operator|!=
literal|0
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|room
operator|.
name|getPref
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|isStriked
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextDecoration
argument_list|(
name|TextDecoration
operator|.
name|LINE_THROUGH
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|e
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|RoomLabel
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|e
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|InstructorsLabel
name|createInstructorsLabel
parameter_list|(
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|instructors
parameter_list|)
block|{
return|return
operator|new
name|InstructorsLabel
argument_list|(
name|instructors
argument_list|)
return|;
block|}
specifier|protected
class|class
name|InstructorsLabel
extends|extends
name|P
block|{
specifier|public
name|InstructorsLabel
parameter_list|(
name|List
argument_list|<
name|InstructorInfo
argument_list|>
name|instructors
parameter_list|)
block|{
name|super
argument_list|(
literal|"instructors"
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|InstructorInfo
argument_list|>
name|i
init|=
name|instructors
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|InstructorInfo
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|P
name|r
init|=
operator|new
name|P
argument_list|(
literal|"instructor"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setText
argument_list|(
name|instructor
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
name|r
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
literal|"instructorDetail.do?instructorId="
operator|+
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|StudentConflicts
name|createStudentConflicts
parameter_list|(
name|List
argument_list|<
name|StudentConflictInfo
argument_list|>
name|conflicts
parameter_list|)
block|{
return|return
operator|new
name|StudentConflicts
argument_list|(
name|conflicts
argument_list|)
return|;
block|}
specifier|protected
class|class
name|StudentConflicts
extends|extends
name|P
block|{
specifier|public
name|StudentConflicts
parameter_list|(
name|List
argument_list|<
name|StudentConflictInfo
argument_list|>
name|conflicts
parameter_list|)
block|{
name|super
argument_list|(
literal|"conflicts"
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|conflicts
argument_list|)
expr_stmt|;
for|for
control|(
name|StudentConflictInfo
name|conflict
range|:
name|conflicts
control|)
block|{
name|add
argument_list|(
operator|new
name|StudentConflict
argument_list|(
name|conflict
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
specifier|static
name|String
name|getCurriculumText
parameter_list|(
name|Set
argument_list|<
name|CurriculumInfo
argument_list|>
name|curricula
parameter_list|)
block|{
name|int
name|top
init|=
literal|0
decl_stmt|;
name|double
name|total
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|CurriculumInfo
name|i
range|:
name|curricula
control|)
block|{
name|total
operator|+=
name|i
operator|.
name|getNrStudents
argument_list|()
expr_stmt|;
block|}
name|String
name|ret
init|=
literal|""
decl_stmt|;
for|for
control|(
name|CurriculumInfo
name|i
range|:
name|curricula
control|)
block|{
name|double
name|fraction
init|=
name|i
operator|.
name|getNrStudents
argument_list|()
operator|/
name|total
decl_stmt|;
if|if
condition|(
name|top
operator|<
literal|3
condition|)
block|{
name|top
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
expr_stmt|;
name|ret
operator|+=
operator|(
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
literal|100.0
operator|*
name|fraction
argument_list|)
operator|)
operator|+
literal|"% "
operator|+
name|i
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|fraction
operator|==
literal|1.0
condition|)
return|return
name|i
operator|.
name|getName
argument_list|()
return|;
block|}
else|else
block|{
name|ret
operator|+=
name|CONSTANTS
operator|.
name|itemMore
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
specifier|protected
class|class
name|StudentConflict
extends|extends
name|FlexTable
block|{
specifier|public
name|StudentConflict
parameter_list|(
name|StudentConflictInfo
name|conflict
parameter_list|)
block|{
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
name|setHTML
argument_list|(
literal|0
argument_list|,
name|col
operator|++
argument_list|,
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|getJenrl
argument_list|()
operator|+
literal|"&times;"
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
operator|-
literal|1
argument_list|,
literal|"counter"
argument_list|)
expr_stmt|;
name|P
name|clazz
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isCommited
argument_list|()
condition|)
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|setPref
argument_list|(
literal|"R"
argument_list|)
expr_stmt|;
name|clazz
operator|.
name|add
argument_list|(
operator|new
name|ClassLabel
argument_list|(
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|clazz
operator|.
name|add
argument_list|(
operator|new
name|TimeLabel
argument_list|(
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|conflict
operator|.
name|getOther
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|clazz
operator|.
name|add
argument_list|(
name|withSeparator
argument_list|(
operator|new
name|RoomLabel
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setWidget
argument_list|(
literal|0
argument_list|,
name|col
operator|++
argument_list|,
name|clazz
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
operator|-
literal|1
argument_list|,
literal|"class-assignment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getAnother
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|P
name|another
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|another
operator|.
name|add
argument_list|(
operator|new
name|ClassLabel
argument_list|(
name|conflict
operator|.
name|getAnother
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getAnother
argument_list|()
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|another
operator|.
name|add
argument_list|(
operator|new
name|TimeLabel
argument_list|(
name|conflict
operator|.
name|getAnother
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|conflict
operator|.
name|getAnother
argument_list|()
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getAnother
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|conflict
operator|.
name|getAnother
argument_list|()
operator|.
name|getRoom
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|another
operator|.
name|add
argument_list|(
name|withSeparator
argument_list|(
operator|new
name|RoomLabel
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setWidget
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|another
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|"class-assignment"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|props
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isCommited
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictCommitted
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isFixed
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictFixed
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isHard
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictHard
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isDistance
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictDistance
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isImportant
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictImportant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isWorkDay
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictWorkday
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isInstructor
argument_list|()
condition|)
name|props
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|studentConflictInstructor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|text
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|props
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|text
operator|+=
name|i
operator|.
name|next
argument_list|()
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
else|:
literal|""
operator|)
expr_stmt|;
name|setText
argument_list|(
literal|0
argument_list|,
name|col
operator|++
argument_list|,
literal|"["
operator|+
name|text
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
operator|-
literal|1
argument_list|,
literal|"properties"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|hasCurricula
argument_list|()
condition|)
block|{
name|setText
argument_list|(
literal|0
argument_list|,
name|col
operator|++
argument_list|,
name|getCurriculumText
argument_list|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|getCurricula
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
operator|-
literal|1
argument_list|,
literal|"curricula"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conflict
operator|.
name|getAnother
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|col
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|1
condition|)
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
class|class
name|ClassLabel
extends|extends
name|P
block|{
specifier|public
name|ClassLabel
parameter_list|(
specifier|final
name|ClassInfo
name|clazz
parameter_list|)
block|{
name|super
argument_list|(
literal|"class"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|getPref
argument_list|()
operator|!=
literal|null
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|clazz
operator|.
name|getPref
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|select
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ViolatedConstraints
name|createViolatedConstraints
parameter_list|(
name|List
argument_list|<
name|DistributionInfo
argument_list|>
name|conflicts
parameter_list|,
name|List
argument_list|<
name|BtbInstructorInfo
argument_list|>
name|btbConflicts
parameter_list|)
block|{
return|return
operator|new
name|ViolatedConstraints
argument_list|(
name|conflicts
argument_list|,
name|btbConflicts
argument_list|)
return|;
block|}
specifier|protected
class|class
name|ViolatedConstraints
extends|extends
name|P
block|{
specifier|public
name|ViolatedConstraints
parameter_list|(
name|List
argument_list|<
name|DistributionInfo
argument_list|>
name|conflicts
parameter_list|,
name|List
argument_list|<
name|BtbInstructorInfo
argument_list|>
name|btbConflicts
parameter_list|)
block|{
name|super
argument_list|(
literal|"constraints"
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|DistributionInfo
name|conflict
range|:
name|conflicts
control|)
block|{
if|if
condition|(
operator|!
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|isSatisfied
argument_list|()
condition|)
name|add
argument_list|(
operator|new
name|ViolatedConstraint
argument_list|(
name|conflict
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|btbConflicts
operator|!=
literal|null
condition|)
for|for
control|(
name|BtbInstructorInfo
name|conflict
range|:
name|btbConflicts
control|)
name|add
argument_list|(
operator|new
name|ViolatedConstraint
argument_list|(
name|conflict
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|ViolatedConstraint
extends|extends
name|P
block|{
specifier|public
name|ViolatedConstraint
parameter_list|(
name|DistributionInfo
name|conflict
parameter_list|)
block|{
name|super
argument_list|(
literal|"constraint"
argument_list|)
expr_stmt|;
name|P
name|h
init|=
operator|new
name|P
argument_list|(
literal|"header"
argument_list|)
decl_stmt|;
name|P
name|pref
init|=
operator|new
name|P
argument_list|(
literal|"preference"
argument_list|)
decl_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
name|pref
operator|.
name|setText
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pref
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setText
argument_list|(
name|conflict
operator|.
name|getInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentDetails
name|other
range|:
name|conflict
operator|.
name|getOtherClasses
argument_list|()
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|ClassLabel
argument_list|(
name|other
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|add
argument_list|(
operator|new
name|TimeLabel
argument_list|(
name|other
operator|.
name|getTime
argument_list|()
argument_list|,
name|other
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|other
operator|.
name|getRoom
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|withSeparator
argument_list|(
operator|new
name|RoomLabel
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|ViolatedConstraint
parameter_list|(
name|BtbInstructorInfo
name|conflict
parameter_list|)
block|{
name|super
argument_list|(
literal|"constraint"
argument_list|)
expr_stmt|;
name|P
name|h
init|=
operator|new
name|P
argument_list|(
literal|"header"
argument_list|)
decl_stmt|;
name|P
name|pref
init|=
operator|new
name|P
argument_list|(
literal|"preference"
argument_list|)
decl_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|conflict
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
name|pref
operator|.
name|setText
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|pref
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|.
name|add
argument_list|(
name|pref
argument_list|)
expr_stmt|;
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|btbInstructorConflictConstraint
argument_list|()
argument_list|)
expr_stmt|;
name|h
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|ClassAssignmentDetails
name|other
init|=
name|conflict
operator|.
name|getOther
argument_list|()
decl_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"other"
argument_list|)
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
operator|new
name|ClassLabel
argument_list|(
name|other
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|p
operator|.
name|add
argument_list|(
operator|new
name|TimeLabel
argument_list|(
name|other
operator|.
name|getTime
argument_list|()
argument_list|,
name|other
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|other
operator|.
name|getRoom
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|.
name|add
argument_list|(
name|withSeparator
argument_list|(
operator|new
name|RoomLabel
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|DateLocations
name|createDateLocations
parameter_list|(
name|List
argument_list|<
name|TimeInfo
argument_list|>
name|times
parameter_list|)
block|{
return|return
operator|new
name|DateLocations
argument_list|(
name|times
argument_list|)
return|;
block|}
specifier|protected
class|class
name|DateLocations
extends|extends
name|P
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|DateLocation
argument_list|>
name|iDates
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|DateLocation
argument_list|>
argument_list|()
decl_stmt|;
name|DateLocation
name|iSelectedDate
init|=
literal|null
decl_stmt|;
specifier|public
name|DateLocations
parameter_list|(
name|List
argument_list|<
name|TimeInfo
argument_list|>
name|times
parameter_list|)
block|{
name|super
argument_list|(
literal|"dates"
argument_list|,
literal|"selection"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|DateInfo
argument_list|>
name|dates
init|=
operator|new
name|TreeSet
argument_list|<
name|DateInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TimeInfo
name|time
range|:
name|times
control|)
block|{
if|if
condition|(
name|time
operator|.
name|hasDatePattern
argument_list|()
condition|)
name|dates
operator|.
name|add
argument_list|(
name|time
operator|.
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|DateInfo
argument_list|>
name|i
init|=
name|dates
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|DateInfo
name|date
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|DateLocation
name|location
init|=
operator|new
name|DateLocation
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|iDates
operator|.
name|put
argument_list|(
name|date
operator|.
name|getDatePatternId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|withSeparator
argument_list|(
name|location
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|DateLocation
extends|extends
name|P
block|{
specifier|private
name|DateInfo
name|iDate
decl_stmt|;
specifier|public
name|DateLocation
parameter_list|(
name|DateInfo
name|date
parameter_list|)
block|{
name|super
argument_list|(
literal|"date"
argument_list|,
literal|"item"
argument_list|)
expr_stmt|;
name|iDate
operator|=
name|date
expr_stmt|;
name|setText
argument_list|(
name|date
operator|.
name|getDatePatternName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|date
operator|.
name|getDatePatternPreference
argument_list|()
operator|!=
literal|0
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|date
operator|.
name|getDatePatternPreference
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|invert
argument_list|(
name|DateLocation
operator|.
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|invert
parameter_list|(
specifier|final
name|DateLocation
name|date
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
if|if
condition|(
name|iSelectedDate
operator|!=
literal|null
condition|)
block|{
name|iSelectedDate
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectedDate
operator|.
name|equals
argument_list|(
name|date
argument_list|)
condition|)
block|{
name|iSelectedDate
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
name|iSelectedDate
operator|=
name|date
expr_stmt|;
if|if
condition|(
name|iSelectedDate
operator|!=
literal|null
condition|)
name|iSelectedDate
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireUpdate
condition|)
name|onSelection
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|invert
argument_list|(
name|date
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
specifier|final
name|DateLocation
name|date
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
if|if
condition|(
name|iSelectedDate
operator|!=
literal|null
condition|)
name|iSelectedDate
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iSelectedDate
operator|=
name|date
expr_stmt|;
if|if
condition|(
name|iSelectedDate
operator|!=
literal|null
condition|)
name|iSelectedDate
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireUpdate
condition|)
name|onSelection
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|invert
argument_list|(
name|date
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
name|DateInfo
name|date
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
name|select
argument_list|(
name|date
operator|==
literal|null
condition|?
operator|(
name|DateLocation
operator|)
literal|null
else|:
name|iDates
operator|.
name|get
argument_list|(
name|date
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
argument_list|,
name|fireUpdate
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|DateInfo
name|getSelectedDate
parameter_list|()
block|{
return|return
operator|(
name|iSelectedDate
operator|==
literal|null
condition|?
literal|null
else|:
name|iSelectedDate
operator|.
name|iDate
operator|)
return|;
block|}
block|}
specifier|protected
name|TimeLocations
name|createTimeLocations
parameter_list|(
name|Long
name|classId
parameter_list|,
name|List
argument_list|<
name|TimeInfo
argument_list|>
name|times
parameter_list|)
block|{
return|return
operator|new
name|TimeLocations
argument_list|(
name|classId
argument_list|,
name|times
argument_list|)
return|;
block|}
specifier|protected
class|class
name|TimeLocations
extends|extends
name|P
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TimeLocation
argument_list|>
name|iTimes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|TimeLocation
argument_list|>
argument_list|()
decl_stmt|;
name|TimeLocation
name|iSelectedTime
init|=
literal|null
decl_stmt|;
name|P
name|iMore
init|=
literal|null
decl_stmt|;
specifier|public
name|TimeLocations
parameter_list|(
name|Long
name|classId
parameter_list|,
name|List
argument_list|<
name|TimeInfo
argument_list|>
name|times
parameter_list|)
block|{
name|super
argument_list|(
literal|"times"
argument_list|,
literal|"selection"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|TimeInfo
argument_list|>
name|t
init|=
operator|new
name|TreeSet
argument_list|<
name|TimeInfo
argument_list|>
argument_list|(
operator|new
name|Comparator
argument_list|<
name|TimeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TimeInfo
name|t1
parameter_list|,
name|TimeInfo
name|t2
parameter_list|)
block|{
if|if
condition|(
name|t1
operator|.
name|isStriked
argument_list|()
operator|&&
operator|!
name|t2
operator|.
name|isStriked
argument_list|()
condition|)
return|return
literal|1
return|;
if|if
condition|(
operator|!
name|t1
operator|.
name|isStriked
argument_list|()
operator|&&
name|t2
operator|.
name|isStriked
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|-
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getDays
argument_list|()
argument_list|,
name|t2
operator|.
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getStartSlot
argument_list|()
argument_list|,
name|t2
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|Double
operator|.
name|compare
argument_list|(
name|t1
operator|.
name|getMin
argument_list|()
argument_list|,
name|t2
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cmp
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|t
operator|.
name|addAll
argument_list|(
name|times
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|TimeInfo
argument_list|>
name|i
init|=
name|t
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|TimeInfo
name|time
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|.
name|isStriked
argument_list|()
operator|&&
name|iMore
operator|==
literal|null
condition|)
block|{
name|iMore
operator|=
operator|new
name|P
argument_list|(
literal|"more"
argument_list|)
expr_stmt|;
name|iMore
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|selectionMore
argument_list|()
argument_list|)
expr_stmt|;
name|iMore
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|P
name|panel
init|=
name|TimeLocations
operator|.
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|panel
operator|.
name|getWidgetIndex
argument_list|(
name|iMore
argument_list|)
operator|+
literal|1
init|;
name|i
operator|<
name|panel
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|panel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iMore
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iMore
argument_list|)
expr_stmt|;
block|}
name|TimeLocation
name|location
init|=
operator|new
name|TimeLocation
argument_list|(
name|classId
argument_list|,
name|time
argument_list|)
decl_stmt|;
name|iTimes
operator|.
name|put
argument_list|(
name|code
argument_list|(
name|time
argument_list|)
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|P
name|p
init|=
name|withSeparator
argument_list|(
name|location
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|.
name|isStriked
argument_list|()
condition|)
name|p
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|TimeLocation
extends|extends
name|P
block|{
specifier|private
name|TimeInfo
name|iTime
decl_stmt|;
specifier|public
name|TimeLocation
parameter_list|(
name|Long
name|classId
parameter_list|,
name|TimeInfo
name|time
parameter_list|)
block|{
name|super
argument_list|(
literal|"time"
argument_list|,
literal|"item"
argument_list|)
expr_stmt|;
name|iTime
operator|=
name|time
expr_stmt|;
name|setText
argument_list|(
name|time
operator|.
name|getName
argument_list|(
name|iProperties
operator|.
name|getFirstDay
argument_list|()
argument_list|,
literal|false
argument_list|,
name|CONSTANTS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|getPref
argument_list|()
operator|!=
literal|0
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|time
operator|.
name|getPref
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|time
operator|.
name|isStriked
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextDecoration
argument_list|(
name|TextDecoration
operator|.
name|LINE_THROUGH
argument_list|)
expr_stmt|;
specifier|final
name|String
name|timeHint
init|=
name|classId
operator|+
literal|","
operator|+
name|time
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|time
operator|.
name|getStartSlot
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|time
operator|.
name|isStriked
argument_list|()
condition|)
block|{
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|e
parameter_list|)
block|{
name|TimeHint
operator|.
name|showHint
argument_list|(
name|TimeLocation
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|timeHint
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|e
parameter_list|)
block|{
name|TimeHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|invert
argument_list|(
name|TimeLocation
operator|.
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|String
name|code
parameter_list|(
name|TimeInfo
name|time
parameter_list|)
block|{
return|return
name|time
operator|.
name|getPatternId
argument_list|()
operator|+
literal|","
operator|+
name|time
operator|.
name|getDays
argument_list|()
operator|+
literal|","
operator|+
name|time
operator|.
name|getStartSlot
argument_list|()
return|;
block|}
specifier|protected
name|void
name|invert
parameter_list|(
specifier|final
name|TimeLocation
name|time
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
if|if
condition|(
name|iSelectedTime
operator|!=
literal|null
condition|)
block|{
name|iSelectedTime
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectedTime
operator|.
name|equals
argument_list|(
name|time
argument_list|)
condition|)
block|{
name|iSelectedTime
operator|=
literal|null
expr_stmt|;
return|return;
block|}
block|}
name|iSelectedTime
operator|=
name|time
expr_stmt|;
if|if
condition|(
name|iSelectedTime
operator|!=
literal|null
condition|)
name|iSelectedTime
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireUpdate
condition|)
name|onSelection
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|invert
argument_list|(
name|time
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
specifier|final
name|TimeLocation
name|time
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
if|if
condition|(
name|iSelectedTime
operator|!=
literal|null
condition|)
name|iSelectedTime
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iSelectedTime
operator|=
name|time
expr_stmt|;
if|if
condition|(
name|iSelectedTime
operator|!=
literal|null
condition|)
name|iSelectedTime
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireUpdate
condition|)
name|onSelection
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|invert
argument_list|(
name|time
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
name|TimeInfo
name|time
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
name|select
argument_list|(
name|time
operator|==
literal|null
condition|?
operator|(
name|TimeLocation
operator|)
literal|null
else|:
name|iTimes
operator|.
name|get
argument_list|(
name|code
argument_list|(
name|time
argument_list|)
argument_list|)
argument_list|,
name|fireUpdate
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeInfo
name|getSelectedTime
parameter_list|()
block|{
return|return
name|iSelectedTime
operator|==
literal|null
condition|?
literal|null
else|:
name|iSelectedTime
operator|.
name|iTime
return|;
block|}
block|}
specifier|public
name|RoomLocations
name|createRoomLocations
parameter_list|(
name|int
name|nrRooms
parameter_list|,
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
parameter_list|)
block|{
return|return
operator|new
name|RoomLocations
argument_list|(
name|nrRooms
argument_list|,
name|rooms
argument_list|)
return|;
block|}
specifier|protected
class|class
name|RoomLocations
extends|extends
name|P
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|RoomLocation
argument_list|>
name|iRooms
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|iNrRooms
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RoomLocation
argument_list|>
name|iSelectedRooms
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomLocation
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|iMore
init|=
literal|null
decl_stmt|;
specifier|public
name|RoomLocations
parameter_list|(
name|int
name|nrRooms
parameter_list|,
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
parameter_list|)
block|{
name|super
argument_list|(
literal|"rooms"
argument_list|,
literal|"selection"
argument_list|)
expr_stmt|;
name|iNrRooms
operator|=
name|nrRooms
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|rooms
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|RoomInfo
argument_list|>
name|i
init|=
name|rooms
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|RoomInfo
name|room
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|isStriked
argument_list|()
operator|&&
name|iMore
operator|==
literal|null
condition|)
block|{
name|iMore
operator|=
operator|new
name|P
argument_list|(
literal|"more"
argument_list|)
expr_stmt|;
name|iMore
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|selectionMore
argument_list|()
argument_list|)
expr_stmt|;
name|iMore
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|P
name|panel
init|=
name|RoomLocations
operator|.
name|this
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|panel
operator|.
name|getWidgetIndex
argument_list|(
name|iMore
argument_list|)
operator|+
literal|1
init|;
name|i
operator|<
name|panel
operator|.
name|getWidgetCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|panel
operator|.
name|getWidget
argument_list|(
name|i
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iMore
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iMore
argument_list|)
expr_stmt|;
block|}
name|RoomLocation
name|location
init|=
operator|new
name|RoomLocation
argument_list|(
name|room
argument_list|)
decl_stmt|;
name|iRooms
operator|.
name|put
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|P
name|p
init|=
name|withSeparator
argument_list|(
name|location
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|room
operator|.
name|isStriked
argument_list|()
condition|)
name|p
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|RoomLocation
extends|extends
name|P
block|{
specifier|private
name|RoomInfo
name|iRoom
decl_stmt|;
specifier|public
name|RoomLocation
parameter_list|(
specifier|final
name|RoomInfo
name|room
parameter_list|)
block|{
name|super
argument_list|(
literal|"room"
argument_list|,
literal|"item"
argument_list|)
expr_stmt|;
name|iRoom
operator|=
name|room
expr_stmt|;
name|setText
argument_list|(
name|room
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|getPref
argument_list|()
operator|!=
literal|0
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
name|room
operator|.
name|getPref
argument_list|()
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|room
operator|.
name|isStriked
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextDecoration
argument_list|(
name|TextDecoration
operator|.
name|LINE_THROUGH
argument_list|)
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|e
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|RoomLocation
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|room
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|e
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|invert
argument_list|(
name|RoomLocation
operator|.
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|invert
parameter_list|(
specifier|final
name|RoomLocation
name|room
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelectedRooms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iSelectedRooms
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|room
argument_list|)
condition|)
block|{
name|iSelectedRooms
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iSelectedRooms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|iSelectedRooms
operator|.
name|size
argument_list|()
operator|>=
name|iNrRooms
condition|)
block|{
name|iSelectedRooms
operator|.
name|get
argument_list|(
name|iNrRooms
operator|-
literal|1
argument_list|)
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iSelectedRooms
operator|.
name|remove
argument_list|(
name|iNrRooms
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
block|{
name|iSelectedRooms
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|room
argument_list|)
expr_stmt|;
name|room
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireUpdate
condition|)
name|onSelection
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|invert
argument_list|(
name|room
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
specifier|final
name|RoomLocation
name|room
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSelectedRooms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iSelectedRooms
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|room
argument_list|)
condition|)
block|{
name|iSelectedRooms
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iSelectedRooms
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSelectedRooms
operator|.
name|size
argument_list|()
operator|>=
name|iNrRooms
condition|)
block|{
name|iSelectedRooms
operator|.
name|get
argument_list|(
name|iNrRooms
operator|-
literal|1
argument_list|)
operator|.
name|removeStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|iSelectedRooms
operator|.
name|remove
argument_list|(
name|iNrRooms
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|room
operator|!=
literal|null
condition|)
block|{
name|iSelectedRooms
operator|.
name|add
argument_list|(
literal|0
argument_list|,
name|room
argument_list|)
expr_stmt|;
name|room
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireUpdate
condition|)
name|onSelection
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|invert
argument_list|(
name|room
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
name|RoomInfo
name|room
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
name|select
argument_list|(
name|room
operator|==
literal|null
condition|?
literal|null
else|:
name|iRooms
operator|.
name|get
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|fireUpdate
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getNrSelectedRooms
parameter_list|()
block|{
return|return
name|iSelectedRooms
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|getSelectedRooms
parameter_list|()
block|{
name|List
argument_list|<
name|RoomInfo
argument_list|>
name|rooms
init|=
operator|new
name|ArrayList
argument_list|<
name|RoomInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|RoomLocation
name|loc
range|:
name|iSelectedRooms
control|)
name|rooms
operator|.
name|add
argument_list|(
name|loc
operator|.
name|iRoom
argument_list|)
expr_stmt|;
return|return
name|rooms
return|;
block|}
block|}
specifier|protected
class|class
name|Separator
extends|extends
name|P
block|{
specifier|public
name|Separator
parameter_list|()
block|{
name|super
argument_list|(
literal|"separator"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|Composite
extends|extends
name|P
block|{
specifier|public
name|Composite
parameter_list|(
name|P
modifier|...
name|items
parameter_list|)
block|{
name|super
argument_list|(
literal|"composite"
argument_list|)
expr_stmt|;
for|for
control|(
name|P
name|item
range|:
name|items
control|)
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|P
name|withSeparator
parameter_list|(
name|P
name|item
parameter_list|,
name|boolean
name|hasNext
parameter_list|)
block|{
if|if
condition|(
name|hasNext
condition|)
return|return
operator|new
name|Composite
argument_list|(
name|item
argument_list|,
operator|new
name|Separator
argument_list|()
argument_list|)
return|;
else|else
return|return
operator|new
name|Composite
argument_list|(
name|item
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|int
name|number
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
literal|""
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|String
name|prefix
parameter_list|,
name|int
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
literal|0
condition|)
return|return
literal|"<font color='red'>"
operator|+
name|prefix
operator|+
literal|"+"
operator|+
name|number
operator|+
literal|"</font>"
return|;
if|if
condition|(
name|number
operator|<
literal|0
condition|)
return|return
literal|"<font color='green'>"
operator|+
name|prefix
operator|+
name|number
operator|+
literal|"</font>"
return|;
return|return
name|prefix
operator|+
literal|"0"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|int
name|n1
parameter_list|,
name|int
name|n2
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
name|n1
operator|-
name|n2
argument_list|)
operator|+
literal|" ("
operator|+
name|n2
operator|+
operator|(
name|n1
operator|==
name|n2
condition|?
literal|""
else|:
literal|"&rarr; "
operator|+
name|n1
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|double
name|n1
parameter_list|,
name|double
name|n2
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
name|n1
operator|-
name|n2
argument_list|)
operator|+
literal|" ("
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n2
argument_list|)
operator|+
operator|(
name|n1
operator|==
name|n2
condition|?
literal|""
else|:
literal|"&rarr; "
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|n1
argument_list|)
operator|)
operator|+
literal|")"
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|double
name|number
parameter_list|)
block|{
return|return
name|dispNumber
argument_list|(
literal|""
argument_list|,
name|number
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|dispNumber
parameter_list|(
name|String
name|prefix
parameter_list|,
name|double
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|>
literal|0
condition|)
return|return
literal|"<font color='red'>"
operator|+
name|prefix
operator|+
literal|"+"
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|number
argument_list|)
operator|+
literal|"</font>"
return|;
if|if
condition|(
name|number
operator|<
literal|0
condition|)
return|return
literal|"<font color='green'>"
operator|+
name|prefix
operator|+
name|sDF
operator|.
name|format
argument_list|(
name|number
argument_list|)
operator|+
literal|"</font>"
return|;
return|return
name|prefix
operator|+
literal|"0"
return|;
block|}
block|}
end_class

end_unit

