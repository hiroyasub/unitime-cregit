begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|suggestions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SelectedSuggestion
extends|extends
name|SimpleForm
implements|implements
name|TakesValue
argument_list|<
name|Suggestion
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SuggestionsPageContext
name|iContext
decl_stmt|;
specifier|private
name|Suggestion
name|iSuggestion
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iFooter
init|=
literal|null
decl_stmt|;
specifier|public
name|SelectedSuggestion
parameter_list|(
name|SuggestionsPageContext
name|context
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iFooter
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iFooter
operator|.
name|addButton
argument_list|(
literal|"assign"
argument_list|,
name|MESSAGES
operator|.
name|buttonAssign
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iContext
operator|.
name|assign
argument_list|(
name|iSuggestion
operator|.
name|getAssignment
argument_list|(
literal|true
argument_list|)
argument_list|,
name|iFooter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeHeaderPanel
name|getFooter
parameter_list|()
block|{
return|return
name|iFooter
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|iSuggestion
operator|=
name|suggestion
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|suggestion
operator|==
literal|null
operator|||
operator|!
name|suggestion
operator|.
name|hasDifferentAssignments
argument_list|()
condition|)
return|return;
if|if
condition|(
name|suggestion
operator|.
name|hasDifferentAssignments
argument_list|()
condition|)
block|{
name|AssignmentTable
name|at
init|=
operator|new
name|AssignmentTable
argument_list|(
name|iContext
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onRemove
parameter_list|(
name|ClassAssignmentDetails
name|details
parameter_list|)
block|{
name|iContext
operator|.
name|remove
argument_list|(
name|details
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|ClassAssignmentDetails
name|d
range|:
name|suggestion
operator|.
name|getDifferentAssignments
argument_list|()
control|)
block|{
name|at
operator|.
name|addRow
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|hasConflict
argument_list|()
condition|)
name|at
operator|.
name|setColumnVisible
argument_list|(
name|at
operator|.
name|getCellIndex
argument_list|(
name|AssignmentTable
operator|.
name|AssignmentColumn
operator|.
name|CONSTRAINT
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|headerSelectedAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|at
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|ClassAssignmentDetails
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
name|iContext
operator|.
name|select
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestion
operator|.
name|hasUnresolvedConflicts
argument_list|()
condition|)
block|{
name|AssignmentTable
name|at
init|=
operator|new
name|AssignmentTable
argument_list|(
name|iContext
operator|.
name|getProperties
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|ClassAssignmentDetails
name|d
range|:
name|suggestion
operator|.
name|getUnresolvedConflicts
argument_list|()
control|)
block|{
name|at
operator|.
name|addRow
argument_list|(
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|hasConflict
argument_list|()
condition|)
name|at
operator|.
name|setColumnVisible
argument_list|(
name|at
operator|.
name|getCellIndex
argument_list|(
name|AssignmentTable
operator|.
name|AssignmentColumn
operator|.
name|CONSTRAINT
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|headerConflictingAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|at
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|ClassAssignmentDetails
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|ClassAssignmentDetails
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
name|iContext
operator|.
name|select
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestion
operator|.
name|getUnassignedVariables
argument_list|()
operator|!=
name|suggestion
operator|.
name|getBaseUnassignedVariables
argument_list|()
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propNotAssignedClasses
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|SuggestionsPageContext
operator|.
name|dispNumber
argument_list|(
name|suggestion
operator|.
name|getUnassignedVariables
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getBaseUnassignedVariables
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|criterion
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|suggestion
operator|.
name|getCriteria
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|double
name|value
init|=
name|suggestion
operator|.
name|getCriterion
argument_list|(
name|criterion
argument_list|)
decl_stmt|;
name|double
name|base
init|=
name|suggestion
operator|.
name|getBaseCriterion
argument_list|(
name|criterion
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|base
condition|)
name|addRow
argument_list|(
name|criterion
operator|+
literal|":"
argument_list|,
operator|new
name|HTML
argument_list|(
name|SuggestionsPageContext
operator|.
name|dispNumber
argument_list|(
name|value
argument_list|,
name|base
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/* 		if (suggestion.getViolatedStudentConflicts() != suggestion.getBaseViolatedStudentConflicts()) 			addRow(MESSAGES.propStudentConflicts(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getViolatedStudentConflicts(),suggestion.getBaseViolatedStudentConflicts()), false)); 		if (suggestion.getCommitedStudentConflicts() != suggestion.getBaseCommitedStudentConflicts()) 			addRow(MESSAGES.propCommittedStudentConflicts(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getCommitedStudentConflicts(),suggestion.getBaseCommitedStudentConflicts()), false)); 		if (suggestion.getHardStudentConflicts() != suggestion.getBaseHardStudentConflicts()) 			addRow(MESSAGES.propHardStudentConflicts(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getHardStudentConflicts(),suggestion.getBaseHardStudentConflicts()), false)); 		if (suggestion.getGlobalTimePreference() != suggestion.getBaseGlobalTimePreference()) 			addRow(MESSAGES.propTimePreferences(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getGlobalTimePreference(),suggestion.getBaseGlobalTimePreference()), false)); 		if (suggestion.getGlobalRoomPreference() != suggestion.getBaseGlobalRoomPreference()) 			addRow(MESSAGES.propRoomPreferences(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getGlobalRoomPreference(),suggestion.getBaseGlobalRoomPreference()), false)); 		if (suggestion.getGlobalGroupConstraintPreference() != suggestion.getBaseGlobalGroupConstraintPreference()) 			addRow(MESSAGES.propDistributionPreferences(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getGlobalGroupConstraintPreference(),suggestion.getBaseGlobalGroupConstraintPreference()), false)); 		if (suggestion.getInstructorDistancePreference() != suggestion.getBaseInstructorDistancePreference()) 			addRow(MESSAGES.propBackToBackInstructorPreferences(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getInstructorDistancePreference(),suggestion.getBaseInstructorDistancePreference()), false)); 		if (suggestion.getTooBigRooms() != suggestion.getBaseTooBigRooms()) 			addRow(MESSAGES.propTooBigRooms(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getTooBigRooms(),suggestion.getBaseTooBigRooms()), false)); 		if (suggestion.getUselessSlots() != suggestion.getBaseUselessSlots()) 			addRow(MESSAGES.propUselessSlots(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getUselessSlots(),suggestion.getBaseUselessSlots()), false)); 		if (suggestion.getDepartmentSpreadPenalty() != suggestion.getBaseDepartmentSpreadPenalty()) 			addRow(MESSAGES.propDepartmentalBalancingPenalty(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getDepartmentSpreadPenalty(),suggestion.getBaseDepartmentSpreadPenalty()), false)); 		if (suggestion.getSpreadPenalty() != suggestion.getBaseSpreadPenalty()) 			addRow(MESSAGES.propSameSubpartBalancingPenalty(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getSpreadPenalty(),suggestion.getBaseSpreadPenalty()), false)); 		if (suggestion.getPerturbationPenalty() != suggestion.getBasePerturbationPenalty()) 			addRow(MESSAGES.propPerturbationPenalty(), new HTML(SuggestionsPageContext.dispNumber(suggestion.getPerturbationPenalty(),suggestion.getBasePerturbationPenalty()), false)); 		*/
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propOverallSolutionValue
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|SuggestionsPageContext
operator|.
name|dispNumber
argument_list|(
name|suggestion
operator|.
name|getValue
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getBaseValue
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|hasStudentConflicts
argument_list|()
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propStudentConflicts
argument_list|()
argument_list|,
name|iContext
operator|.
name|createStudentConflicts
argument_list|(
name|suggestion
operator|.
name|getStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|hasViolatedDistributionConflicts
argument_list|()
operator|||
name|suggestion
operator|.
name|hasBtbInstructorConflicts
argument_list|()
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propViolatedConstraints
argument_list|()
argument_list|,
name|iContext
operator|.
name|createViolatedConstraints
argument_list|(
name|suggestion
operator|.
name|getDistributionConflicts
argument_list|()
argument_list|,
name|suggestion
operator|.
name|getBtbInstructorConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"assign"
argument_list|,
name|iSuggestion
operator|.
name|isCanAssign
argument_list|()
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Suggestion
name|getValue
parameter_list|()
block|{
return|return
name|iSuggestion
return|;
block|}
block|}
end_class

end_unit

