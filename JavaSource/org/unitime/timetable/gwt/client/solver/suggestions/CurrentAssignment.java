begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|suggestions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|PreferenceLegend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|suggestions
operator|.
name|SuggestionsPageContext
operator|.
name|DateLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|suggestions
operator|.
name|SuggestionsPageContext
operator|.
name|RoomLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
operator|.
name|suggestions
operator|.
name|SuggestionsPageContext
operator|.
name|TimeLocations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|ClassAssignmentDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|DateInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|RoomInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|SelectedAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SuggestionsInterface
operator|.
name|TimeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CurrentAssignment
extends|extends
name|SimpleForm
implements|implements
name|TakesValue
argument_list|<
name|ClassAssignmentDetails
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SuggestionsPageContext
name|iContext
init|=
literal|null
decl_stmt|;
specifier|private
name|ClassAssignmentDetails
name|iDetails
decl_stmt|;
specifier|private
name|TimeLocations
name|iTimes
init|=
literal|null
decl_stmt|;
specifier|private
name|DateLocations
name|iDates
init|=
literal|null
decl_stmt|;
specifier|private
name|RoomLocations
name|iRooms
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iMessageRow
init|=
literal|0
decl_stmt|;
specifier|private
name|HTML
name|iMessage
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iFooter
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iFooterRow
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iLegendRow
init|=
literal|0
decl_stmt|;
specifier|public
name|CurrentAssignment
parameter_list|(
name|SuggestionsPageContext
name|context
parameter_list|)
block|{
name|iContext
operator|=
name|context
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iFooter
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iFooter
operator|.
name|addButton
argument_list|(
literal|"unassign"
argument_list|,
name|MESSAGES
operator|.
name|buttonUnassign
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|List
argument_list|<
name|SelectedAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<
name|SelectedAssignment
argument_list|>
argument_list|()
decl_stmt|;
name|assignments
operator|.
name|add
argument_list|(
operator|new
name|SelectedAssignment
argument_list|(
name|iDetails
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iContext
operator|.
name|assign
argument_list|(
name|assignments
argument_list|,
name|iFooter
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentDetails
name|getValue
parameter_list|()
block|{
return|return
name|iDetails
return|;
block|}
specifier|public
name|void
name|clearMessage
parameter_list|()
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMessage
operator|!=
literal|null
condition|)
block|{
name|iMessage
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iMessageRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMessage
operator|!=
literal|null
condition|)
block|{
name|iMessage
operator|.
name|setHTML
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iMessageRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|showLoading
parameter_list|()
block|{
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
if|if
condition|(
name|iMessage
operator|!=
literal|null
condition|)
block|{
name|iMessage
operator|.
name|setHTML
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iMessageRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|ClassAssignmentDetails
name|details
parameter_list|)
block|{
name|iDetails
operator|=
name|details
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|headerCurrentAssignment
argument_list|(
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|details
operator|.
name|getTime
argument_list|()
operator|.
name|hasDatePattern
argument_list|()
condition|)
block|{
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAssignedDate
argument_list|()
argument_list|,
name|iContext
operator|.
name|createDateLabel
argument_list|(
name|details
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAssignedTime
argument_list|()
argument_list|,
name|iContext
operator|.
name|createTimeLabel
argument_list|(
name|details
operator|.
name|getTime
argument_list|()
argument_list|,
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAssignedRooms
argument_list|()
argument_list|,
name|iContext
operator|.
name|createRoomsLabel
argument_list|(
name|details
operator|.
name|getRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Label
name|notAssigned
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|classNotAssigned
argument_list|()
argument_list|)
decl_stmt|;
name|notAssigned
operator|.
name|addStyleName
argument_list|(
literal|"not-assigned"
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|notAssigned
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propInstructor
argument_list|()
argument_list|,
name|iContext
operator|.
name|createInstructorsLabel
argument_list|(
name|details
operator|.
name|getInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getInitialTime
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propInitialAssignment
argument_list|()
argument_list|,
name|iContext
operator|.
name|createAssignmentLabel
argument_list|(
name|details
operator|.
name|getInitialTime
argument_list|()
argument_list|,
name|details
operator|.
name|getInitialRoom
argument_list|()
argument_list|,
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|details
operator|.
name|getNrDates
argument_list|()
operator|>
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|hasStudentConflicts
argument_list|()
condition|)
block|{
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propStudentConflicts
argument_list|()
argument_list|,
name|iContext
operator|.
name|createStudentConflicts
argument_list|(
name|details
operator|.
name|getStudentConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|hasViolatedDistributionConflicts
argument_list|()
operator|||
name|details
operator|.
name|hasBtbInstructorConflicts
argument_list|()
condition|)
block|{
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propViolatedConstraints
argument_list|()
argument_list|,
name|iContext
operator|.
name|createViolatedConstraints
argument_list|(
name|details
operator|.
name|getDistributionConflicts
argument_list|()
argument_list|,
name|details
operator|.
name|getBtbInstructorConflicts
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|hasTimes
argument_list|()
operator|&&
name|details
operator|.
name|getNrDates
argument_list|()
operator|>
literal|1
condition|)
block|{
name|iDates
operator|=
name|iContext
operator|.
name|createDateLocations
argument_list|(
name|details
operator|.
name|getTimes
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propDateLocations
argument_list|()
argument_list|,
name|iDates
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
operator|&&
name|details
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|hasDatePattern
argument_list|()
condition|)
name|iDates
operator|.
name|select
argument_list|(
name|details
operator|.
name|getAssignedTime
argument_list|()
operator|.
name|getDatePattern
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|details
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|details
operator|.
name|getTime
argument_list|()
operator|.
name|hasDatePattern
argument_list|()
condition|)
name|iDates
operator|.
name|select
argument_list|(
name|details
operator|.
name|getTime
argument_list|()
operator|.
name|getDatePattern
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iDates
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|hasTimes
argument_list|()
condition|)
block|{
name|iTimes
operator|=
name|iContext
operator|.
name|createTimeLocations
argument_list|(
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|,
name|details
operator|.
name|getTimes
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeLocations
argument_list|()
argument_list|,
name|iTimes
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getAssignedTime
argument_list|()
operator|!=
literal|null
condition|)
name|iTimes
operator|.
name|select
argument_list|(
name|details
operator|.
name|getAssignedTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|details
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
condition|)
name|iTimes
operator|.
name|select
argument_list|(
name|details
operator|.
name|getTime
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTimes
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|hasRooms
argument_list|()
condition|)
block|{
name|iRooms
operator|=
name|iContext
operator|.
name|createRoomLocations
argument_list|(
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
argument_list|,
name|details
operator|.
name|getRooms
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRoomLocations
argument_list|()
argument_list|,
name|iRooms
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getAssignedRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|RoomInfo
name|r
range|:
name|details
operator|.
name|getAssignedRoom
argument_list|()
control|)
name|iRooms
operator|.
name|select
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|details
operator|.
name|getRoom
argument_list|()
operator|!=
literal|null
condition|)
for|for
control|(
name|RoomInfo
name|r
range|:
name|details
operator|.
name|getRoom
argument_list|()
control|)
name|iRooms
operator|.
name|select
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRooms
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
operator|>
literal|0
operator|&&
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
operator|>
literal|0
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propMinimumRoomSize
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|details
operator|.
name|getClazz
argument_list|()
operator|.
name|getRoomCapacity
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iMessage
operator|=
operator|new
name|HTML
argument_list|()
expr_stmt|;
name|iMessage
operator|.
name|addStyleName
argument_list|(
literal|"error-message"
argument_list|)
expr_stmt|;
name|iMessageRow
operator|=
name|addRow
argument_list|(
name|iMessage
argument_list|)
expr_stmt|;
if|if
condition|(
name|details
operator|.
name|getTime
argument_list|()
operator|!=
literal|null
operator|&&
name|details
operator|.
name|isCanUnassign
argument_list|()
condition|)
block|{
name|iFooterRow
operator|=
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"unassign"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFooterRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|iLegendRow
operator|=
name|addRow
argument_list|(
operator|new
name|PreferenceLegend
argument_list|(
name|iContext
operator|.
name|getProperties
argument_list|()
operator|.
name|getPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLegendRow
argument_list|,
name|iFooterRow
operator|<
literal|0
operator|||
operator|!
name|iFooter
operator|.
name|isEnabled
argument_list|(
literal|"unassign"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setShowUnassign
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
if|if
condition|(
name|show
operator|&&
name|iFooterRow
operator|>=
literal|0
condition|)
block|{
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"unassign"
argument_list|,
name|iDetails
operator|!=
literal|null
operator|&&
name|iDetails
operator|.
name|isCanUnassign
argument_list|()
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iFooterRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|show
operator|&&
name|iFooterRow
operator|>=
literal|0
condition|)
block|{
name|iFooter
operator|.
name|setEnabled
argument_list|(
literal|"unassign"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iFooterRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLegendRow
argument_list|,
name|iFooterRow
operator|<
literal|0
operator|||
operator|!
name|iFooter
operator|.
name|isEnabled
argument_list|(
literal|"unassign"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SelectedAssignment
name|getSelectedAssignment
parameter_list|()
block|{
name|SelectedAssignment
name|selection
init|=
operator|new
name|SelectedAssignment
argument_list|()
decl_stmt|;
name|selection
operator|.
name|setClassId
argument_list|(
name|iDetails
operator|.
name|getClazz
argument_list|()
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDates
operator|!=
literal|null
condition|)
block|{
name|DateInfo
name|date
init|=
name|iDates
operator|.
name|getSelectedDate
argument_list|()
decl_stmt|;
if|if
condition|(
name|date
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|selection
operator|.
name|setDatePatternId
argument_list|(
name|date
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iDetails
operator|.
name|getNrDates
argument_list|()
operator|==
literal|1
condition|)
block|{
name|selection
operator|.
name|setDatePatternId
argument_list|(
name|iDetails
operator|.
name|getTimes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDatePatternId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|iTimes
operator|!=
literal|null
condition|)
block|{
name|TimeInfo
name|time
init|=
name|iTimes
operator|.
name|getSelectedTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|selection
operator|.
name|setDays
argument_list|(
name|time
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setPatternId
argument_list|(
name|time
operator|.
name|getPatternId
argument_list|()
argument_list|)
expr_stmt|;
name|selection
operator|.
name|setStartSlot
argument_list|(
name|time
operator|.
name|getStartSlot
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|iRooms
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iRooms
operator|.
name|getNrSelectedRooms
argument_list|()
operator|==
name|iDetails
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
condition|)
block|{
for|for
control|(
name|RoomInfo
name|room
range|:
name|iRooms
operator|.
name|getSelectedRooms
argument_list|()
control|)
name|selection
operator|.
name|addRoomId
argument_list|(
name|room
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|iDetails
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
operator|==
literal|0
condition|)
block|{
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
return|return
name|selection
return|;
block|}
specifier|public
name|void
name|setSelectedAssignment
parameter_list|(
name|SelectedAssignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|iDates
operator|!=
literal|null
condition|)
name|iDates
operator|.
name|select
argument_list|(
name|assignment
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|DateInfo
argument_list|(
name|assignment
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTimes
operator|!=
literal|null
condition|)
name|iTimes
operator|.
name|select
argument_list|(
name|assignment
operator|==
literal|null
condition|?
operator|(
name|TimeInfo
operator|)
literal|null
else|:
operator|new
name|TimeInfo
argument_list|(
name|assignment
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRooms
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDetails
operator|.
name|getClazz
argument_list|()
operator|.
name|nrRooms
argument_list|()
condition|;
name|i
operator|++
control|)
name|iRooms
operator|.
name|select
argument_list|(
name|assignment
operator|==
literal|null
condition|?
operator|(
name|RoomInfo
operator|)
literal|null
else|:
operator|new
name|RoomInfo
argument_list|(
name|assignment
operator|.
name|getRoomIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSelectedTime
parameter_list|(
name|TimeInfo
name|time
parameter_list|,
name|boolean
name|fireUpdate
parameter_list|)
block|{
if|if
condition|(
name|iDates
operator|!=
literal|null
condition|)
name|iDates
operator|.
name|select
argument_list|(
name|time
operator|==
literal|null
condition|?
literal|null
else|:
name|time
operator|.
name|getDatePattern
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTimes
operator|!=
literal|null
condition|)
name|iTimes
operator|.
name|select
argument_list|(
name|time
argument_list|,
name|fireUpdate
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

