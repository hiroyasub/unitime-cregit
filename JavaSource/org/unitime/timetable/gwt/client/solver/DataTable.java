begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|TimeHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableCellInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TableInterface
operator|.
name|TableRowInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DataTable
extends|extends
name|UniTimeTable
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
implements|implements
name|HasValue
argument_list|<
name|Integer
argument_list|>
block|{
specifier|private
name|Integer
name|iValue
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|DataTable
parameter_list|(
name|TableInterface
name|table
parameter_list|)
block|{
name|addStyleName
argument_list|(
literal|"unitime-DataTable"
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
name|populate
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|TableRowInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|hasLink
argument_list|()
condition|)
block|{
name|clearHover
argument_list|()
expr_stmt|;
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getLinkName
argument_list|()
operator|!=
literal|null
condition|)
name|UniTimeFrameDialog
operator|.
name|openDialog
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getLinkName
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getLink
argument_list|()
argument_list|,
literal|"900"
argument_list|,
literal|"85%"
argument_list|)
expr_stmt|;
else|else
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getLink
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|TableInterface
name|table
parameter_list|)
block|{
name|clearTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|TableInterface
operator|.
name|TableHeaderIterface
name|th
range|:
name|table
operator|.
name|getHeader
argument_list|()
control|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|th
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|th
operator|.
name|isComparable
argument_list|()
condition|)
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|asc
init|=
operator|(
name|h
operator|.
name|getOrder
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
operator|!
name|h
operator|.
name|getOrder
argument_list|()
operator|)
decl_stmt|;
name|setValue
argument_list|(
name|asc
condition|?
literal|1
operator|+
name|h
operator|.
name|getColumn
argument_list|()
else|:
operator|-
literal|1
operator|-
name|h
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|th
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|th
operator|.
name|getAlignment
argument_list|()
operator|!=
literal|null
condition|)
switch|switch
condition|(
name|th
operator|.
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|CENTER
case|:
name|h
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
break|break;
case|case
name|LEFT
case|:
name|h
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
break|break;
case|case
name|RIGHT
case|:
name|h
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
break|break;
block|}
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|TableInterface
operator|.
name|TableRowInterface
name|row
range|:
name|table
operator|.
name|getRows
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TableInterface
operator|.
name|TableCellInterface
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|DataTableCell
argument_list|(
name|table
operator|.
name|getHeader
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|,
name|cell
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|row
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DataTableCell
extends|extends
name|P
implements|implements
name|HasCellAlignment
block|{
specifier|private
name|TableInterface
operator|.
name|TableHeaderIterface
name|iHeader
decl_stmt|;
specifier|public
name|DataTableCell
parameter_list|(
name|TableInterface
operator|.
name|TableHeaderIterface
name|header
parameter_list|,
name|TableInterface
operator|.
name|TableCellInterface
name|cell
parameter_list|)
block|{
name|iHeader
operator|=
name|header
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasStyleName
argument_list|()
condition|)
name|addStyleName
argument_list|(
name|cell
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasColor
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|cell
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellTime
condition|)
block|{
specifier|final
name|TableInterface
operator|.
name|TableCellTime
name|time
init|=
operator|(
name|TableInterface
operator|.
name|TableCellTime
operator|)
name|cell
decl_stmt|;
if|if
condition|(
name|time
operator|.
name|hasId
argument_list|()
condition|)
block|{
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|TimeHint
operator|.
name|showHint
argument_list|(
name|DataTableCell
operator|.
name|this
operator|.
name|getElement
argument_list|()
argument_list|,
name|time
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|TimeHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellRooms
condition|)
block|{
name|addStyleName
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
specifier|final
name|TableInterface
operator|.
name|TableCellRooms
name|rooms
init|=
operator|(
name|TableInterface
operator|.
name|TableCellRooms
operator|)
name|cell
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|P
name|room
init|=
operator|new
name|P
argument_list|(
literal|"item"
argument_list|)
decl_stmt|;
name|room
operator|.
name|setText
argument_list|(
name|rooms
operator|.
name|getName
argument_list|(
name|index
argument_list|)
operator|+
operator|(
name|index
operator|+
literal|1
operator|<
name|rooms
operator|.
name|getNrRooms
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|room
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|rooms
operator|.
name|getColor
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|id
init|=
name|rooms
operator|.
name|getId
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|String
name|preference
init|=
name|rooms
operator|.
name|getPreference
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|room
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|room
operator|.
name|getElement
argument_list|()
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
name|id
argument_list|)
argument_list|,
name|preference
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|room
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellItems
condition|)
block|{
name|addStyleName
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
specifier|final
name|TableInterface
operator|.
name|TableCellItems
name|instructors
init|=
operator|(
name|TableInterface
operator|.
name|TableCellItems
operator|)
name|cell
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|instructors
operator|.
name|getNrItems
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|P
name|instructor
init|=
operator|new
name|P
argument_list|(
literal|"item"
argument_list|)
decl_stmt|;
name|instructor
operator|.
name|setText
argument_list|(
name|instructors
operator|.
name|getFormattedValue
argument_list|(
name|index
argument_list|)
operator|+
operator|(
name|index
operator|+
literal|1
operator|<
name|instructors
operator|.
name|getNrItems
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|instructors
operator|.
name|getColor
argument_list|(
name|index
argument_list|)
operator|!=
literal|null
condition|)
name|instructor
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|instructors
operator|.
name|getColor
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellMulti
condition|)
block|{
name|addStyleName
argument_list|(
literal|"multi"
argument_list|)
expr_stmt|;
name|TableInterface
operator|.
name|TableCellMulti
name|multi
init|=
operator|(
name|TableInterface
operator|.
name|TableCellMulti
operator|)
name|cell
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|multi
operator|.
name|getNrChunks
argument_list|()
condition|;
name|index
operator|++
control|)
block|{
specifier|final
name|P
name|chunk
init|=
operator|new
name|P
argument_list|(
literal|"chunk"
argument_list|)
decl_stmt|;
name|TableCellInterface
argument_list|<
name|?
argument_list|>
name|m
init|=
name|multi
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|hasStyleName
argument_list|()
condition|)
name|chunk
operator|.
name|addStyleName
argument_list|(
name|m
operator|.
name|getStyleName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m
operator|.
name|hasColor
argument_list|()
condition|)
name|chunk
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|m
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|chunk
operator|.
name|setText
argument_list|(
name|m
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellChange
condition|)
block|{
name|addStyleName
argument_list|(
literal|"change"
argument_list|)
expr_stmt|;
name|TableInterface
operator|.
name|TableCellChange
name|change
init|=
operator|(
name|TableInterface
operator|.
name|TableCellChange
operator|)
name|cell
decl_stmt|;
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getSecond
argument_list|()
operator|!=
literal|null
operator|&&
name|change
operator|.
name|getFirst
argument_list|()
operator|.
name|compareTo
argument_list|(
name|change
operator|.
name|getSecond
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
name|add
argument_list|(
operator|new
name|DataTableCell
argument_list|(
name|header
argument_list|,
name|change
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|change
operator|.
name|getFirst
argument_list|()
operator|==
literal|null
condition|)
block|{
name|P
name|notAssigned
init|=
operator|new
name|P
argument_list|(
literal|"not-assigned"
argument_list|)
decl_stmt|;
name|notAssigned
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|notAssigned
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
argument_list|(
operator|new
name|DataTableCell
argument_list|(
name|header
argument_list|,
name|change
operator|.
name|getFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|P
name|arrow
init|=
operator|new
name|P
argument_list|(
literal|"arrow"
argument_list|)
decl_stmt|;
name|arrow
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|assignmentArrow
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|arrow
argument_list|)
expr_stmt|;
if|if
condition|(
name|change
operator|.
name|getSecond
argument_list|()
operator|==
literal|null
condition|)
block|{
name|P
name|notAssigned
init|=
operator|new
name|P
argument_list|(
literal|"not-assigned"
argument_list|)
decl_stmt|;
name|notAssigned
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|notAssigned
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|notAssigned
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|add
argument_list|(
operator|new
name|DataTableCell
argument_list|(
name|header
argument_list|,
name|change
operator|.
name|getSecond
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|setHTML
argument_list|(
name|cell
operator|.
name|getFormattedValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|instanceof
name|TableInterface
operator|.
name|TableCellClassName
operator|&&
operator|(
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|cell
operator|)
operator|.
name|hasAlternatives
argument_list|()
condition|)
block|{
name|addStyleName
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
operator|(
operator|(
name|TableInterface
operator|.
name|TableCellClassName
operator|)
name|cell
operator|)
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
specifier|final
name|P
name|alternative
init|=
operator|new
name|P
argument_list|(
literal|"alternative"
argument_list|)
decl_stmt|;
name|alternative
operator|.
name|setText
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|alternative
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
if|if
condition|(
name|iHeader
operator|==
literal|null
operator|||
name|iHeader
operator|.
name|getAlignment
argument_list|()
operator|==
literal|null
condition|)
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
switch|switch
condition|(
name|iHeader
operator|.
name|getAlignment
argument_list|()
condition|)
block|{
case|case
name|CENTER
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
return|;
case|case
name|LEFT
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
case|case
name|RIGHT
case|:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|getValue
parameter_list|()
block|{
return|return
name|iValue
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Integer
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
specifier|final
name|Integer
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|iValue
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|intValue
argument_list|()
operator|!=
literal|0
condition|)
block|{
specifier|final
name|int
name|column
init|=
operator|(
name|value
operator|>
literal|0
condition|?
name|value
operator|-
literal|1
else|:
operator|-
name|value
operator|-
literal|1
operator|)
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|getHeader
argument_list|(
name|column
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
name|sort
argument_list|(
name|h
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TableInterface
operator|.
name|TableRowInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TableInterface
operator|.
name|TableRowInterface
name|r1
parameter_list|,
name|TableInterface
operator|.
name|TableRowInterface
name|r2
parameter_list|)
block|{
return|return
name|r1
operator|.
name|compareTo
argument_list|(
name|r2
argument_list|,
name|column
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
argument_list|,
name|value
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

