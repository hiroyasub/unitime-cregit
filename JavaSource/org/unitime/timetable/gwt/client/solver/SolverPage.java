begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
operator|.
name|PageNameInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|MenuInterface
operator|.
name|PageNameRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|InfoPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|PageMessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolutionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverPageRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverPageResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SolverInterface
operator|.
name|SolverType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasEnabled
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SolverPage
extends|extends
name|SimpleForm
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|DateTimeFormat
name|sLoadDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|SolverConfiguration
argument_list|>
name|iConfigurations
decl_stmt|;
specifier|private
name|SolverType
name|iType
decl_stmt|;
specifier|private
name|int
name|iLoadDateRow
decl_stmt|,
name|iSolverStatusRow
decl_stmt|,
name|iSolverProgressRow
decl_stmt|,
name|iSolverConfigRow
decl_stmt|,
name|iButtonsRow
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iSolverHeader
decl_stmt|,
name|iSolverButtons
decl_stmt|;
specifier|private
name|Label
name|iLoadDate
init|=
literal|null
decl_stmt|,
name|iSolverProgress
init|=
literal|null
decl_stmt|;
specifier|private
name|SolverStatus
name|iSolverStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iSolverConfig
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Parameter
argument_list|>
name|iParameters
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iSolverOwner
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iSolverHost
init|=
literal|null
decl_stmt|;
specifier|public
name|SolverPage
parameter_list|()
block|{
name|addStyleName
argument_list|(
literal|"unitime-SolverPage"
argument_list|)
expr_stmt|;
name|iType
operator|=
name|SolverType
operator|.
name|valueOf
argument_list|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"type"
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|iType
condition|)
block|{
case|case
name|COURSE
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageCourseTimetablingSolver
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EXAM
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageExaminationTimetablingSolver
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSTRUCTOR
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageInstructorSchedulingSolver
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageStudentSchedulingSolver
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|iSolverHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|CONSTANTS
operator|.
name|solverType
argument_list|()
index|[
name|iType
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iSolverHeader
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"load"
argument_list|,
name|MESSAGES
operator|.
name|opSolverLoad
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|LOAD
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"start"
argument_list|,
name|MESSAGES
operator|.
name|opSolverStart
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"stop"
argument_list|,
name|MESSAGES
operator|.
name|opSolverStop
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|STOP
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"sectioning"
argument_list|,
name|MESSAGES
operator|.
name|opSolverStudentSectioning
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|STUDENT_SECTIONING
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"reload"
argument_list|,
name|MESSAGES
operator|.
name|opSolverReload
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|RELOAD
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSave
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"save new"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveAsNew
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"clear"
argument_list|,
name|MESSAGES
operator|.
name|opSolverClear
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|CLEAR
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"csv"
argument_list|,
name|MESSAGES
operator|.
name|opSolverExportCSV
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_CSV
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"unload"
argument_list|,
name|MESSAGES
operator|.
name|opSolverUnload
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|UNLOAD
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|addButton
argument_list|(
literal|"refresh"
argument_list|,
name|MESSAGES
operator|.
name|opSolverRefresh
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|CHECK
argument_list|)
argument_list|)
expr_stmt|;
name|execute
argument_list|(
name|SolverOperation
operator|.
name|INIT
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|ClickHandler
name|createClickHandler
parameter_list|(
specifier|final
name|SolverOperation
name|operation
parameter_list|)
block|{
return|return
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|execute
argument_list|(
name|operation
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|protected
name|void
name|execute
parameter_list|(
specifier|final
name|SolverOperation
name|operation
parameter_list|)
block|{
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|EXPORT_CSV
case|:
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"export?output=solution.csv&type="
operator|+
name|iType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return;
case|case
name|EXPORT_XML
case|:
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"export?output=solution.xml&type="
operator|+
name|iType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|SolverPageRequest
name|request
init|=
operator|new
name|SolverPageRequest
argument_list|(
name|iType
argument_list|,
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSolverOwner
operator|!=
literal|null
operator|&&
name|iSolverOwner
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|iSolverOwner
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverOwner
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iSolverOwner
operator|.
name|isItemSelected
argument_list|(
name|i
argument_list|)
condition|)
name|request
operator|.
name|addOwnerId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverOwner
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|request
operator|.
name|hasOwerIds
argument_list|()
operator|&&
name|operation
operator|!=
name|SolverOperation
operator|.
name|CHECK
condition|)
block|{
name|iSolverHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorSolverNoOwnerSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|request
operator|.
name|addOwnerId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverOwner
operator|.
name|getValue
argument_list|(
name|iSolverOwner
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSolverHost
operator|!=
literal|null
operator|&&
name|iSolverHost
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|request
operator|.
name|setHost
argument_list|(
name|iSolverHost
operator|.
name|getItemText
argument_list|(
name|iSolverHost
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSolverConfig
operator|!=
literal|null
operator|&&
name|iSolverConfig
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|request
operator|.
name|setConfigurationId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverConfig
operator|.
name|getValue
argument_list|(
name|iSolverConfig
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iParameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Parameter
name|p
range|:
name|iParameters
control|)
block|{
if|if
condition|(
name|p
operator|.
name|isEnabled
argument_list|()
condition|)
name|request
operator|.
name|addParameter
argument_list|(
name|p
operator|.
name|getParameterId
argument_list|()
argument_list|,
name|p
operator|.
name|getParameterValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|confirmation
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|operation
condition|)
block|{
case|case
name|UNLOAD
case|:
if|if
condition|(
name|iType
operator|==
name|SolverType
operator|.
name|STUDENT
condition|)
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmStudentSolverUnload
argument_list|()
expr_stmt|;
else|else
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverUnload
argument_list|()
expr_stmt|;
break|break;
case|case
name|CLEAR
case|:
if|if
condition|(
name|iType
operator|==
name|SolverType
operator|.
name|STUDENT
condition|)
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmStudentSolverClear
argument_list|()
expr_stmt|;
else|else
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverClear
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE
case|:
if|if
condition|(
name|iType
operator|==
name|SolverType
operator|.
name|STUDENT
condition|)
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmStudentSolverSave
argument_list|()
expr_stmt|;
else|else
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSave
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE_AS_NEW
case|:
if|if
condition|(
name|iType
operator|==
name|SolverType
operator|.
name|STUDENT
condition|)
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmStudentSolverSaveAsNew
argument_list|()
expr_stmt|;
else|else
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSaveAsNew
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE_COMMIT
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSaveCommit
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVE_AS_NEW_COMMIT
case|:
name|confirmation
operator|=
name|MESSAGES
operator|.
name|confirmSolverSaveAsNewCommit
argument_list|()
expr_stmt|;
break|break;
block|}
specifier|final
name|Command
name|command
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|operation
operator|==
name|SolverOperation
operator|.
name|INIT
operator|||
name|operation
operator|==
name|SolverOperation
operator|.
name|CHECK
condition|)
name|iSolverHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
else|else
name|LoadingWidget
operator|.
name|showLoading
argument_list|(
name|MESSAGES
operator|.
name|waitSolverExecution
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SolverPageResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iSolverHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SolverPageResponse
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|hideLoading
argument_list|()
expr_stmt|;
name|iSolverHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|reloadSolverInfo
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
if|if
condition|(
name|confirmation
operator|==
literal|null
condition|)
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|confirmation
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|populate
parameter_list|(
name|SolverPageResponse
name|response
parameter_list|)
block|{
if|if
condition|(
name|iLoadDate
operator|==
literal|null
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iSolverHeader
argument_list|)
expr_stmt|;
name|iLoadDate
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iLoadDateRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverLoadDate
argument_list|()
argument_list|,
name|iLoadDate
argument_list|)
expr_stmt|;
name|iSolverStatus
operator|=
operator|new
name|SolverStatus
argument_list|()
expr_stmt|;
name|iSolverStatusRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverStatus
argument_list|()
argument_list|,
name|iSolverStatus
argument_list|)
expr_stmt|;
name|iSolverProgress
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iSolverProgressRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverProgress
argument_list|()
argument_list|,
name|iSolverProgress
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasSolverOwners
argument_list|()
condition|)
block|{
name|iSolverOwner
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isAllowMultipleOwners
argument_list|()
condition|)
block|{
name|iSolverOwner
operator|.
name|setMultipleSelect
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSolverOwner
operator|.
name|setVisibleItemCount
argument_list|(
name|response
operator|.
name|getSolverOwners
argument_list|()
operator|.
name|size
argument_list|()
operator|<
literal|5
condition|?
name|response
operator|.
name|getSolverOwners
argument_list|()
operator|.
name|size
argument_list|()
else|:
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSolverOwner
operator|.
name|setMultipleSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolverOwner
name|owner
range|:
name|response
operator|.
name|getSolverOwners
argument_list|()
control|)
block|{
name|iSolverOwner
operator|.
name|addItem
argument_list|(
name|owner
operator|.
name|getName
argument_list|()
argument_list|,
name|owner
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iType
operator|==
name|SolverType
operator|.
name|EXAM
operator|&&
name|iSolverOwner
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propExamSolverOwner
argument_list|()
argument_list|,
name|iSolverOwner
argument_list|)
expr_stmt|;
name|iSolverConfig
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iSolverConfigRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverProgress
argument_list|()
argument_list|,
name|iSolverConfig
argument_list|)
expr_stmt|;
name|iConfigurations
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SolverConfiguration
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasConfigurations
argument_list|()
condition|)
block|{
for|for
control|(
name|SolverConfiguration
name|config
range|:
name|response
operator|.
name|getConfigurations
argument_list|()
control|)
block|{
name|iSolverConfig
operator|.
name|addItem
argument_list|(
name|config
operator|.
name|getName
argument_list|()
argument_list|,
name|config
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|iConfigurations
operator|.
name|put
argument_list|(
name|config
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|config
argument_list|)
expr_stmt|;
block|}
name|iSolverConfig
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|SolverConfiguration
name|config
init|=
name|iConfigurations
operator|.
name|get
argument_list|(
name|iSolverConfig
operator|.
name|getValue
argument_list|(
name|iSolverConfig
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Parameter
name|p
range|:
name|iParameters
control|)
block|{
name|String
name|value
init|=
name|config
operator|.
name|getParameter
argument_list|(
name|p
operator|.
name|getParameterId
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setParameterValue
argument_list|(
name|value
operator|!=
literal|null
condition|?
name|value
else|:
name|p
operator|.
name|getParameterDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iParameters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Parameter
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasParameters
argument_list|()
condition|)
block|{
for|for
control|(
name|SolverParameter
name|parameter
range|:
name|response
operator|.
name|getParameters
argument_list|()
control|)
block|{
name|Parameter
name|p
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"boolean"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|=
operator|new
name|BooleanParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"double"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|=
operator|new
name|DoubleParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"integer"
operator|.
name|equalsIgnoreCase
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
name|p
operator|=
operator|new
name|IntegerParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|parameter
operator|.
name|getType
argument_list|()
operator|!=
literal|null
operator|&&
name|parameter
operator|.
name|getType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"enum("
argument_list|)
operator|&&
name|parameter
operator|.
name|getType
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
condition|)
block|{
name|p
operator|=
operator|new
name|EnumParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|=
operator|new
name|TextParameter
argument_list|(
name|parameter
argument_list|)
expr_stmt|;
block|}
name|iParameters
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|parameter
operator|.
name|getName
argument_list|()
operator|+
literal|":"
argument_list|,
operator|(
name|Widget
operator|)
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iType
operator|!=
name|SolverType
operator|.
name|EXAM
operator|&&
name|iSolverOwner
operator|!=
literal|null
condition|)
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverOwner
argument_list|()
argument_list|,
name|iSolverOwner
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasHosts
argument_list|()
condition|)
block|{
name|iSolverHost
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|host
range|:
name|response
operator|.
name|getHosts
argument_list|()
control|)
name|iSolverHost
operator|.
name|addItem
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSolverHost
argument_list|()
argument_list|,
name|iSolverHost
argument_list|)
expr_stmt|;
block|}
name|iButtonsRow
operator|=
name|addBottomRow
argument_list|(
name|iSolverButtons
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getLoadDate
argument_list|()
operator|==
literal|null
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLoadDateRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iLoadDateRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iLoadDate
operator|.
name|setText
argument_list|(
name|sLoadDateFormat
operator|.
name|format
argument_list|(
name|response
operator|.
name|getLoadDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getSolverStatus
argument_list|()
operator|==
literal|null
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSolverStatusRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSolverStatusRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iSolverStatus
operator|.
name|setStatus
argument_list|(
name|response
operator|.
name|getSolverStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|getSolverProgress
argument_list|()
operator|==
literal|null
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSolverProgressRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSolverProgressRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iSolverProgress
operator|.
name|setText
argument_list|(
name|response
operator|.
name|getSolverProgress
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSolverConfig
operator|.
name|getItemCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSolverConfigRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSolverConfigRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iSolverConfig
operator|.
name|setEnabled
argument_list|(
operator|!
name|response
operator|.
name|isWorking
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isRefresh
argument_list|()
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|getConfigurationId
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverConfig
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iSolverConfig
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getConfigurationId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|iSolverConfig
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|iSolverConfig
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iParameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Parameter
name|p
init|=
name|iParameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|p
operator|.
name|setEnabled
argument_list|(
operator|!
name|response
operator|.
name|isWorking
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isRefresh
argument_list|()
condition|)
block|{
name|SolverParameter
name|parameter
init|=
name|response
operator|.
name|getParameter
argument_list|(
name|p
operator|.
name|getParameterId
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setParameterValue
argument_list|(
name|parameter
operator|!=
literal|null
condition|?
operator|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|parameter
operator|.
name|getValue
argument_list|()
else|:
name|parameter
operator|.
name|getDefaultValue
argument_list|()
operator|)
else|:
name|p
operator|.
name|getParameterDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iSolverOwner
operator|!=
literal|null
condition|)
block|{
name|iSolverOwner
operator|.
name|setEnabled
argument_list|(
operator|!
name|response
operator|.
name|isWorking
argument_list|()
operator|&&
name|response
operator|.
name|getLoadDate
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isRefresh
argument_list|()
condition|)
block|{
if|if
condition|(
name|iSolverOwner
operator|.
name|isMultipleSelect
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverOwner
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iSolverOwner
operator|.
name|setItemSelected
argument_list|(
name|i
argument_list|,
name|response
operator|.
name|hasOwerIds
argument_list|()
operator|&&
name|response
operator|.
name|getOwnerIds
argument_list|()
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverOwner
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverOwner
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|response
operator|.
name|hasOwerIds
argument_list|()
operator|&&
name|response
operator|.
name|getOwnerIds
argument_list|()
operator|.
name|contains
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSolverOwner
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
condition|)
block|{
name|iSolverOwner
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|iSolverHost
operator|!=
literal|null
condition|)
block|{
name|iSolverHost
operator|.
name|setEnabled
argument_list|(
operator|!
name|response
operator|.
name|isWorking
argument_list|()
operator|&&
name|response
operator|.
name|getLoadDate
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isRefresh
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSolverHost
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iSolverHost
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getHost
argument_list|()
argument_list|)
condition|)
block|{
name|iSolverHost
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"load"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|LOAD
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"start"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|START
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"stop"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|STOP
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"sectioning"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|STUDENT_SECTIONING
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"reload"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|RELOAD
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"save"
argument_list|,
name|iType
operator|!=
name|SolverType
operator|.
name|COURSE
operator|&&
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"save new"
argument_list|,
name|iType
operator|!=
name|SolverType
operator|.
name|COURSE
operator|&&
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"clear"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|CLEAR
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"csv"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_CSV
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"unload"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|UNLOAD
argument_list|)
argument_list|)
expr_stmt|;
name|iSolverButtons
operator|.
name|setEnabled
argument_list|(
literal|"refresh"
argument_list|,
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|CHECK
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>
name|iButtonsRow
condition|;
name|row
operator|--
control|)
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasBestSolution
argument_list|()
condition|)
block|{
name|addHeaderRow
argument_list|(
name|iType
operator|==
name|SolverType
operator|.
name|STUDENT
condition|?
name|MESSAGES
operator|.
name|sectStudentSolverBestSolution
argument_list|()
else|:
name|MESSAGES
operator|.
name|sectSolverBestSolution
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InfoPair
name|pair
range|:
name|response
operator|.
name|getBestSolution
argument_list|()
operator|.
name|getPairs
argument_list|()
control|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iType
operator|==
name|SolverType
operator|.
name|COURSE
operator|&&
operator|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
operator|||
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
operator|)
condition|)
block|{
name|UniTimeHeaderPanel
name|buttons
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSave
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save new"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveAsNew
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_COMMIT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"commit"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveCommit
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"new commit"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveAsNewCommit
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE_AS_NEW_COMMIT
argument_list|)
argument_list|)
expr_stmt|;
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasCurrentSolution
argument_list|()
condition|)
block|{
name|addHeaderRow
argument_list|(
name|iType
operator|==
name|SolverType
operator|.
name|STUDENT
condition|?
name|MESSAGES
operator|.
name|sectStudentSolverCurrentSolution
argument_list|()
else|:
name|MESSAGES
operator|.
name|sectSolverCurrentSolution
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|InfoPair
name|pair
range|:
name|response
operator|.
name|getCurrentSolution
argument_list|()
operator|.
name|getPairs
argument_list|()
control|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_BEST
argument_list|)
operator|||
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|RESTORE_BEST
argument_list|)
operator|||
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
condition|)
block|{
name|UniTimeHeaderPanel
name|buttons
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|SAVE_BEST
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"save best"
argument_list|,
name|MESSAGES
operator|.
name|opSolverSaveBest
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|SAVE_BEST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|RESTORE_BEST
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"restore best"
argument_list|,
name|MESSAGES
operator|.
name|opSolverRestorBest
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|RESTORE_BEST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|canExecute
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
condition|)
name|buttons
operator|.
name|addButton
argument_list|(
literal|"xml"
argument_list|,
name|MESSAGES
operator|.
name|opSolverExportXML
argument_list|()
argument_list|,
name|createClickHandler
argument_list|(
name|SolverOperation
operator|.
name|EXPORT_XML
argument_list|)
argument_list|)
expr_stmt|;
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|response
operator|.
name|hasLog
argument_list|()
condition|)
block|{
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|sectSolverWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|response
operator|.
name|getLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|hasSelectedSolutions
argument_list|()
condition|)
block|{
for|for
control|(
name|SolutionInfo
name|selected
range|:
name|response
operator|.
name|getSelectedSolutions
argument_list|()
control|)
block|{
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|sectSolverSelectedSolution
argument_list|(
name|selected
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InfoPair
name|pair
range|:
name|selected
operator|.
name|getPairs
argument_list|()
control|)
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|.
name|hasLog
argument_list|()
condition|)
block|{
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|sectSolverSelectedWarnings
argument_list|(
name|selected
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
operator|new
name|HTML
argument_list|(
name|selected
operator|.
name|getLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|RootPanel
name|cpm
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:CustomPageMessages"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cpm
operator|!=
literal|null
condition|)
block|{
name|cpm
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|hasPageMessages
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|PageMessage
name|pm
range|:
name|response
operator|.
name|getPageMessages
argument_list|()
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|PageMessageType
operator|.
name|ERROR
condition|?
literal|"unitime-PageError"
else|:
name|pm
operator|.
name|getType
argument_list|()
operator|==
name|PageMessageType
operator|.
name|WARNING
condition|?
literal|"unitime-PageWarn"
else|:
literal|"unitime-PageMessage"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setHTML
argument_list|(
name|pm
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|pm
operator|.
name|hasUrl
argument_list|()
condition|)
block|{
name|p
operator|.
name|addStyleName
argument_list|(
literal|"unitime-ClickablePageMessage"
argument_list|)
expr_stmt|;
name|p
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|pm
operator|.
name|hasUrl
argument_list|()
operator|&&
operator|!
name|pm
operator|.
name|getUrl
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"gwt.jsp?page=solver"
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|pm
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|execute
argument_list|(
name|SolverOperation
operator|.
name|CHECK
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|cpm
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|addHeaderRow
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|int
name|row
init|=
name|super
operator|.
name|addHeaderRow
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"row-above"
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addBottomRow
parameter_list|(
name|Widget
name|widget
parameter_list|)
block|{
name|int
name|row
init|=
name|super
operator|.
name|addBottomRow
argument_list|(
name|widget
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
literal|"unitime-TopLine"
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
specifier|protected
specifier|static
class|class
name|SolverStatus
extends|extends
name|P
block|{
specifier|private
name|P
name|iStatus
decl_stmt|;
specifier|private
name|Image
name|iIcon
decl_stmt|;
specifier|public
name|SolverStatus
parameter_list|()
block|{
name|super
argument_list|(
literal|"unitime-SolverStatus"
argument_list|)
expr_stmt|;
name|iStatus
operator|=
operator|new
name|P
argument_list|(
literal|"status-label"
argument_list|)
expr_stmt|;
name|iIcon
operator|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|helpIcon
argument_list|()
argument_list|)
expr_stmt|;
name|iIcon
operator|.
name|addStyleName
argument_list|(
literal|"status-icon"
argument_list|)
expr_stmt|;
name|iIcon
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iIcon
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|PageNameRpcRequest
argument_list|(
literal|"Solver Status"
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|PageNameInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|PageNameInterface
name|result
parameter_list|)
block|{
name|iIcon
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|pageHelp
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iIcon
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iIcon
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|getHelpUrl
argument_list|()
operator|==
literal|null
operator|||
name|result
operator|.
name|getHelpUrl
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|UniTimeFrameDialog
operator|.
name|openDialog
argument_list|(
name|MESSAGES
operator|.
name|pageHelp
argument_list|(
name|result
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|result
operator|.
name|getHelpUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|status
parameter_list|)
block|{
name|iStatus
operator|.
name|setText
argument_list|(
name|status
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
interface|interface
name|Parameter
extends|extends
name|HasEnabled
block|{
specifier|public
name|Long
name|getParameterId
parameter_list|()
function_decl|;
specifier|public
name|String
name|getParameterValue
parameter_list|()
function_decl|;
specifier|public
name|String
name|getParameterDefaultValue
parameter_list|()
function_decl|;
specifier|public
name|void
name|setParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|TextParameter
extends|extends
name|TextBox
implements|implements
name|Parameter
block|{
specifier|private
name|SolverParameter
name|iParameter
decl_stmt|;
specifier|public
name|TextParameter
parameter_list|(
name|SolverParameter
name|parameter
parameter_list|)
block|{
name|iParameter
operator|=
name|parameter
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-TextBox"
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"parameter-text"
argument_list|)
expr_stmt|;
name|setParameterValue
argument_list|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|parameter
operator|.
name|getValue
argument_list|()
else|:
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getParameterId
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterValue
parameter_list|()
block|{
return|return
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|setText
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterDefaultValue
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getDefaultValue
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|IntegerParameter
extends|extends
name|NumberBox
implements|implements
name|Parameter
block|{
specifier|private
name|SolverParameter
name|iParameter
decl_stmt|;
specifier|public
name|IntegerParameter
parameter_list|(
name|SolverParameter
name|parameter
parameter_list|)
block|{
name|iParameter
operator|=
name|parameter
expr_stmt|;
name|addStyleName
argument_list|(
literal|"parameter-number"
argument_list|)
expr_stmt|;
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setParameterValue
argument_list|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|parameter
operator|.
name|getValue
argument_list|()
else|:
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getParameterId
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterValue
parameter_list|()
block|{
return|return
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|setText
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterDefaultValue
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getDefaultValue
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|DoubleParameter
extends|extends
name|NumberBox
implements|implements
name|Parameter
block|{
specifier|private
name|SolverParameter
name|iParameter
decl_stmt|;
specifier|public
name|DoubleParameter
parameter_list|(
name|SolverParameter
name|parameter
parameter_list|)
block|{
name|iParameter
operator|=
name|parameter
expr_stmt|;
name|addStyleName
argument_list|(
literal|"parameter-number"
argument_list|)
expr_stmt|;
name|setDecimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setNegative
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setParameterValue
argument_list|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|parameter
operator|.
name|getValue
argument_list|()
else|:
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getParameterId
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterValue
parameter_list|()
block|{
return|return
name|getText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|setText
argument_list|(
name|value
operator|==
literal|null
condition|?
literal|""
else|:
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterDefaultValue
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getDefaultValue
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BooleanParameter
extends|extends
name|CheckBox
implements|implements
name|Parameter
block|{
specifier|private
name|SolverParameter
name|iParameter
decl_stmt|;
specifier|public
name|BooleanParameter
parameter_list|(
name|SolverParameter
name|parameter
parameter_list|)
block|{
name|iParameter
operator|=
name|parameter
expr_stmt|;
name|addStyleName
argument_list|(
literal|"parameter-text"
argument_list|)
expr_stmt|;
name|setParameterValue
argument_list|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|parameter
operator|.
name|getValue
argument_list|()
else|:
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getParameterId
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterValue
parameter_list|()
block|{
return|return
name|super
operator|.
name|getValue
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterDefaultValue
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getDefaultValue
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnumParameter
extends|extends
name|ListBox
implements|implements
name|Parameter
block|{
specifier|private
name|SolverParameter
name|iParameter
decl_stmt|;
specifier|public
name|EnumParameter
parameter_list|(
name|SolverParameter
name|parameter
parameter_list|)
block|{
name|iParameter
operator|=
name|parameter
expr_stmt|;
name|addStyleName
argument_list|(
literal|"parameter-list"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|item
range|:
name|parameter
operator|.
name|getType
argument_list|()
operator|.
name|substring
argument_list|(
name|parameter
operator|.
name|getType
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
operator|+
literal|1
argument_list|,
name|parameter
operator|.
name|getType
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|')'
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|setParameterValue
argument_list|(
name|parameter
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|?
name|parameter
operator|.
name|getValue
argument_list|()
else|:
name|parameter
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|getParameterId
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterValue
parameter_list|()
block|{
if|if
condition|(
name|getSelectedIndex
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|getValue
argument_list|(
name|getSelectedIndex
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setParameterValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameterDefaultValue
parameter_list|()
block|{
return|return
name|iParameter
operator|.
name|getDefaultValue
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

