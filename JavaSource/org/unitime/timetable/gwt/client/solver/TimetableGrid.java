begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|solver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ServerDateTimeFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|TimeSelector
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|FilterInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridBackground
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TimetableGridInterface
operator|.
name|TimetableGridCell
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|EventTarget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|FontStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|WhiteSpace
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimetableGrid
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDateFormatMeeting
init|=
name|ServerDateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timetableGridDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|NumberFormat
name|sUtilizationFormat
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|utilizationFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|int
name|sHeaderWidth
init|=
literal|100
decl_stmt|;
specifier|private
specifier|static
name|int
name|sLineHeight
init|=
literal|15
decl_stmt|;
specifier|private
name|P
name|iContainer
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Meeting
argument_list|>
name|iMeetings
init|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Background
argument_list|>
name|iBackbrounds
init|=
operator|new
name|ArrayList
argument_list|<
name|Background
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iCellWidth
decl_stmt|;
specifier|public
name|TimetableGrid
parameter_list|(
name|FilterInterface
name|filter
parameter_list|,
specifier|final
name|TimetableGridModel
name|model
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|pageWidth
parameter_list|,
name|int
name|weekOffset
parameter_list|)
block|{
name|int
name|displayMode
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"dispMode"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|hasDay
index|[]
init|=
block|{
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|,
literal|false
block|,
literal|false
block|}
decl_stmt|;
name|String
name|days
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"days"
argument_list|)
decl_stmt|;
name|int
name|nrDays
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|days
operator|!=
literal|null
operator|&&
name|days
operator|.
name|length
argument_list|()
operator|==
literal|7
operator|&&
name|days
operator|.
name|indexOf
argument_list|(
literal|'1'
argument_list|)
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|days
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
name|nrDays
operator|++
expr_stmt|;
block|}
else|else
block|{
name|hasDay
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|int
name|nrTimes
init|=
literal|20
decl_stmt|;
name|int
name|startSlot
init|=
literal|90
decl_stmt|;
name|int
name|step
init|=
literal|6
decl_stmt|;
name|String
index|[]
name|times
init|=
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"times"
argument_list|,
literal|"90|222|6"
argument_list|)
operator|.
name|split
argument_list|(
literal|"\\|"
argument_list|)
decl_stmt|;
if|if
condition|(
name|times
operator|!=
literal|null
operator|&&
name|times
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|startSlot
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|step
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|nrTimes
operator|=
operator|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|times
index|[
literal|1
index|]
argument_list|)
operator|-
name|startSlot
operator|)
operator|/
name|step
expr_stmt|;
block|}
name|int
name|endSlot
init|=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
decl_stmt|;
name|boolean
name|showPreferences
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showPreferences"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showInstructors
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showInstructors"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showTimes
init|=
literal|"1"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"showTimes"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showRoom
init|=
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"resource"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|showDate
init|=
literal|"-100"
operator|.
name|equals
argument_list|(
name|filter
operator|.
name|getParameterValue
argument_list|(
literal|"weeks"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|comment
init|=
name|getComment
argument_list|(
name|model
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayMode
operator|==
literal|0
condition|)
block|{
name|int
name|headerLines
init|=
literal|2
decl_stmt|;
if|if
condition|(
operator|(
name|index
operator|%
literal|3
operator|)
operator|!=
literal|0
condition|)
name|headerLines
operator|=
literal|0
expr_stmt|;
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayIndex
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayLines
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|dayLines
index|[
name|d
index|]
operator|=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
operator|&&
name|nrLines
operator|<
name|dayLines
index|[
name|d
index|]
condition|)
name|nrLines
operator|=
name|dayLines
index|[
name|d
index|]
expr_stmt|;
name|dayIndex
index|[
name|d
index|]
operator|=
name|x
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|x
operator|++
expr_stmt|;
block|}
name|iContainer
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
expr_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
expr_stmt|;
if|if
condition|(
name|iCellWidth
operator|<
literal|50
condition|)
name|iCellWidth
operator|=
literal|50
expr_stmt|;
name|iContainer
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|nrDays
argument_list|,
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerLines
operator|>
literal|0
condition|)
block|{
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|nrDays
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|headerLines
operator|>
literal|0
condition|)
block|{
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
operator|(
name|nrDays
operator|*
name|nrTimes
operator|)
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|nrDays
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|nrTimes
condition|;
name|t
operator|++
control|)
block|{
name|int
name|j
init|=
name|dayIndex
index|[
name|d
index|]
operator|*
name|nrTimes
operator|+
name|t
decl_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setHTML
argument_list|(
name|CONSTANTS
operator|.
name|days
argument_list|()
index|[
name|d
index|]
operator|+
literal|"<br>"
operator|+
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|startSlot
operator|+
name|t
operator|*
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|0
operator|&&
name|dayIndex
index|[
name|d
index|]
operator|>
literal|0
condition|)
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-double-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs2
init|=
operator|new
name|P
argument_list|(
literal|"vertical-double-separator"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|vs2
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|j
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|7
condition|;
name|d
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
for|for
control|(
name|int
name|t
init|=
literal|0
init|;
name|t
operator|<
name|nrTimes
condition|;
name|t
operator|++
control|)
block|{
name|int
name|i
init|=
name|dayIndex
index|[
name|d
index|]
operator|*
name|nrTimes
operator|+
name|t
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|0
operator|&&
name|dayIndex
index|[
name|d
index|]
operator|>
literal|0
condition|)
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-double-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|iContainer
operator|.
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setHTML
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<br>"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|hi
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
literal|0
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|hi
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|hi
operator|.
name|getElement
argument_list|()
argument_list|,
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hi
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hi
operator|.
name|setTitle
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|nrLines
operator|*
name|sLineHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|stop
operator|*
name|iCellWidth
operator|/
name|step
operator|-
name|start
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|*
name|nrTimes
operator|*
name|iCellWidth
operator|+
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|int
name|lines
init|=
name|cell
operator|.
name|getNrLines
argument_list|()
decl_stmt|;
if|if
condition|(
name|dayLines
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|<
name|nrLines
operator|&&
operator|(
name|cell
operator|.
name|getIndex
argument_list|()
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|==
name|dayLines
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|)
condition|)
block|{
name|lines
operator|+=
name|nrLines
operator|-
name|dayLines
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
expr_stmt|;
block|}
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
name|lines
operator|*
name|sLineHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
operator|*
name|nrTimes
operator|*
name|iCellWidth
operator|+
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|+
literal|2
operator|*
name|dayIndex
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
argument_list|,
name|cell
operator|.
name|getIndex
argument_list|()
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|1
condition|)
block|{
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayIndex
init|=
operator|new
name|int
index|[
literal|8
index|]
decl_stmt|;
name|int
index|[]
name|toDayIdx
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|dayIndex
index|[
name|i
index|]
operator|=
name|nrLines
expr_stmt|;
name|toDayIdx
index|[
name|d
index|]
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|nrLines
operator|+=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
name|dayIndex
index|[
literal|7
index|]
operator|=
name|nrLines
expr_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|iContainer
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
expr_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
name|nrTimes
expr_stmt|;
name|iContainer
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|2
argument_list|,
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|name
operator|.
name|setHTML
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<br>"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
literal|0
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|name
operator|.
name|getElement
argument_list|()
argument_list|,
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|name
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|iContainer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrTimes
condition|;
name|i
operator|++
control|)
block|{
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|startSlot
operator|+
name|i
operator|*
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
operator|(
name|dayIndex
index|[
literal|1
operator|+
name|i
index|]
operator|-
name|dayIndex
index|[
name|i
index|]
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|d
index|]
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
decl_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
operator|(
name|dayIndex
index|[
name|i
operator|+
literal|1
index|]
operator|-
name|dayIndex
index|[
name|i
index|]
operator|)
operator|*
name|sLineHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|stop
operator|*
name|iCellWidth
operator|/
name|step
operator|-
name|start
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|dayIndex
index|[
name|i
index|]
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|*
name|sLineHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
operator|(
name|dayIndex
index|[
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
index|]
operator|+
name|cell
operator|.
name|getIndex
argument_list|()
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|2
condition|)
block|{
name|int
name|nrColumns
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|colIndex
init|=
operator|new
name|int
index|[
literal|8
index|]
decl_stmt|;
name|int
index|[]
name|toDayIdx
init|=
operator|new
name|int
index|[
literal|7
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
name|colIndex
index|[
name|i
index|]
operator|=
name|nrColumns
expr_stmt|;
name|toDayIdx
index|[
name|d
index|]
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|hasDay
index|[
name|d
index|]
condition|)
name|nrColumns
operator|+=
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|colIndex
index|[
literal|7
index|]
operator|=
name|nrColumns
expr_stmt|;
name|int
name|linesPerTime
init|=
literal|2
decl_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|iContainer
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
expr_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
name|nrColumns
expr_stmt|;
name|iContainer
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
name|nrColumns
operator|*
name|iCellWidth
operator|+
literal|2
argument_list|,
operator|(
name|headerLines
operator|+
name|linesPerTime
operator|*
name|nrTimes
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|name
operator|.
name|setHTML
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<br>"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
literal|0
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|name
operator|.
name|getElement
argument_list|()
argument_list|,
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|name
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|iContainer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|linesPerTime
operator|*
name|nrTimes
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
name|nrColumns
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
name|nrColumns
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|linesPerTime
operator|*
name|nrTimes
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|int
name|d
init|=
operator|(
name|i
operator|+
name|weekOffset
operator|)
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|d
index|]
condition|)
continue|continue;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
operator|*
name|model
operator|.
name|getNrLines
argument_list|(
name|d
argument_list|,
literal|1
argument_list|)
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|d
index|]
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|colIndex
index|[
name|i
index|]
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|colIndex
index|[
name|i
index|]
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrTimes
condition|;
name|i
operator|++
control|)
block|{
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|linesPerTime
operator|*
name|i
argument_list|)
expr_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|linesPerTime
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|startSlot
operator|+
name|step
operator|*
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|linesPerTime
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|stop
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
operator|-
name|start
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|i
init|=
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
decl_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
operator|(
name|colIndex
index|[
literal|1
operator|+
name|i
index|]
operator|-
name|colIndex
index|[
name|i
index|]
operator|)
operator|*
name|iCellWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
name|colIndex
index|[
name|i
index|]
operator|*
name|iCellWidth
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
name|iCellWidth
operator|*
name|cell
operator|.
name|getNrLines
argument_list|()
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
operator|(
name|colIndex
index|[
name|toDayIdx
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
index|]
operator|+
name|cell
operator|.
name|getIndex
argument_list|()
operator|)
operator|*
name|iCellWidth
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|sLineHeight
operator|*
name|linesPerTime
operator|/
name|step
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|displayMode
operator|==
literal|3
condition|)
block|{
name|int
name|nrLines
init|=
literal|0
decl_stmt|;
name|int
index|[]
name|dayIndex
init|=
operator|new
name|int
index|[
literal|366
index|]
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|dayIndex
index|[
name|d
index|]
operator|=
name|nrLines
expr_stmt|;
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|hasDay
index|[
name|day
index|]
operator|&&
name|model
operator|.
name|hasDate
argument_list|(
name|day
argument_list|,
name|date
argument_list|)
condition|)
block|{
name|nrLines
operator|+=
name|model
operator|.
name|getNrDateLines
argument_list|(
name|day
argument_list|,
name|date
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
name|dayIndex
index|[
literal|365
index|]
operator|=
name|nrLines
expr_stmt|;
name|int
name|headerLines
init|=
literal|1
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|iContainer
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimetableGrid"
argument_list|)
expr_stmt|;
name|iCellWidth
operator|=
operator|(
name|pageWidth
operator|-
name|sHeaderWidth
operator|)
operator|/
name|nrTimes
expr_stmt|;
name|iContainer
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
operator|+
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|2
argument_list|,
operator|(
name|headerLines
operator|+
name|nrLines
operator|)
operator|*
name|sLineHeight
operator|+
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|P
name|name
init|=
operator|new
name|P
argument_list|(
literal|"grid-name"
argument_list|)
decl_stmt|;
name|name
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|name
operator|.
name|setHTML
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"<br>"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|hasNameColor
argument_list|()
condition|)
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|model
operator|.
name|getNameColor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
literal|0
operator|&&
name|model
operator|.
name|getResourceId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|showHint
argument_list|(
name|name
operator|.
name|getElement
argument_list|()
argument_list|,
name|model
operator|.
name|getResourceId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|name
operator|.
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|RoomHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|model
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|comment
operator|!=
literal|null
operator|&&
operator|!
name|comment
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n"
operator|+
name|comment
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
name|iContainer
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|P
name|verticalHeader
init|=
operator|new
name|P
argument_list|(
literal|"vertical-header"
argument_list|)
decl_stmt|;
name|verticalHeader
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|verticalHeader
argument_list|,
literal|0
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|P
name|horizontalHeader
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-header"
argument_list|)
decl_stmt|;
name|horizontalHeader
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|horizontalHeader
argument_list|,
name|sHeaderWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"timetable-panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setSize
argument_list|(
name|nrTimes
operator|*
name|iCellWidth
operator|+
literal|1
argument_list|,
name|nrLines
operator|*
name|sLineHeight
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|panel
argument_list|,
name|sHeaderWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nrTimes
condition|;
name|i
operator|++
control|)
block|{
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|iCellWidth
argument_list|,
name|headerLines
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|TimeUtils
operator|.
name|slot2time
argument_list|(
name|startSlot
operator|+
name|i
operator|*
name|step
argument_list|)
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|P
name|vs
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|vs
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastVSpan
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastVSpan
argument_list|)
expr_stmt|;
name|P
name|lastVShead
init|=
operator|new
name|P
argument_list|(
literal|"vertical-separator"
argument_list|)
decl_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastVShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|horizontalHeader
operator|.
name|add
argument_list|(
name|lastVShead
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
operator|!
name|hasDay
index|[
name|day
index|]
operator|||
operator|!
name|model
operator|.
name|hasDate
argument_list|(
name|day
argument_list|,
name|date
argument_list|)
condition|)
continue|continue;
name|P
name|hs
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|hs
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|)
expr_stmt|;
name|P
name|hi
init|=
operator|new
name|P
argument_list|(
literal|"header-interval"
argument_list|)
decl_stmt|;
name|hi
operator|.
name|setSize
argument_list|(
name|sHeaderWidth
argument_list|,
operator|(
name|dayIndex
index|[
literal|1
operator|+
name|d
index|]
operator|-
name|dayIndex
index|[
name|d
index|]
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
name|hi
operator|.
name|setText
argument_list|(
name|sDateFormatMeeting
operator|.
name|format
argument_list|(
name|getDate
argument_list|(
name|model
operator|.
name|getFirstDate
argument_list|()
argument_list|,
name|d
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|hi
argument_list|,
literal|0
argument_list|,
name|sLineHeight
operator|*
name|dayIndex
index|[
name|d
index|]
argument_list|)
expr_stmt|;
block|}
name|P
name|lastHSpan
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHSpan
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|lastHSpan
argument_list|)
expr_stmt|;
name|P
name|lastHShead
init|=
operator|new
name|P
argument_list|(
literal|"horizontal-separator"
argument_list|)
decl_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastHShead
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|verticalHeader
operator|.
name|add
argument_list|(
name|lastHShead
argument_list|)
expr_stmt|;
for|for
control|(
name|TimetableGridBackground
name|cell
range|:
name|model
operator|.
name|getBackgrounds
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
condition|)
block|{
name|Background
name|b
init|=
operator|new
name|Background
argument_list|(
name|cell
argument_list|)
decl_stmt|;
name|iBackbrounds
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
operator|(
name|dayIndex
index|[
literal|1
operator|+
name|d
index|]
operator|-
name|dayIndex
index|[
name|d
index|]
operator|)
operator|*
name|sLineHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|b
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|stop
operator|*
name|iCellWidth
operator|/
name|step
operator|-
name|start
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|b
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|dayIndex
index|[
name|d
index|]
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|TimetableGridCell
name|cell
range|:
name|model
operator|.
name|getCells
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hasDay
index|[
name|cell
operator|.
name|getDay
argument_list|()
index|]
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
operator|<=
name|startSlot
condition|)
continue|continue;
if|if
condition|(
name|cell
operator|.
name|getSlot
argument_list|()
operator|>=
name|startSlot
operator|+
name|step
operator|*
name|nrTimes
condition|)
continue|continue;
for|for
control|(
name|int
name|d
init|=
literal|0
init|;
name|d
operator|<
literal|365
condition|;
name|d
operator|++
control|)
block|{
name|int
name|date
init|=
name|d
operator|+
name|model
operator|.
name|getFirstSessionDay
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|getFirstDay
argument_list|()
operator|>=
literal|0
operator|&&
operator|(
name|date
operator|<
name|model
operator|.
name|getFirstDay
argument_list|()
operator|||
name|date
operator|>
name|model
operator|.
name|getFirstDay
argument_list|()
operator|+
literal|6
operator|)
condition|)
continue|continue;
name|int
name|day
init|=
name|d
operator|%
literal|7
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|getDay
argument_list|()
operator|==
name|day
operator|&&
name|cell
operator|.
name|hasDate
argument_list|(
name|date
argument_list|)
condition|)
block|{
name|Meeting
name|m
init|=
operator|new
name|Meeting
argument_list|(
name|cell
argument_list|,
name|showRoom
argument_list|,
name|showInstructors
argument_list|,
name|showTimes
argument_list|,
name|showPreferences
argument_list|,
name|showDate
argument_list|)
decl_stmt|;
name|iMeetings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|1
operator|+
name|cell
operator|.
name|getNrLines
argument_list|()
operator|*
name|sLineHeight
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|int
name|start
init|=
name|cell
operator|.
name|getSlot
argument_list|()
decl_stmt|;
name|int
name|stop
init|=
name|cell
operator|.
name|getSlot
argument_list|()
operator|+
name|cell
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
name|startSlot
condition|)
name|start
operator|=
name|startSlot
expr_stmt|;
if|if
condition|(
name|stop
operator|>
name|endSlot
condition|)
name|stop
operator|=
name|endSlot
expr_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1
operator|+
operator|(
name|stop
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
operator|-
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|m
argument_list|,
operator|(
name|start
operator|-
name|startSlot
operator|)
operator|*
name|iCellWidth
operator|/
name|step
argument_list|,
operator|(
name|dayIndex
index|[
name|d
index|]
operator|+
name|cell
operator|.
name|getIndex
argument_list|()
operator|)
operator|*
name|sLineHeight
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|initWidget
argument_list|(
name|iContainer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|min
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|<
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
specifier|protected
name|int
name|max
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
return|return
operator|(
name|a
operator|>
name|b
condition|?
name|a
else|:
name|b
operator|)
return|;
block|}
specifier|public
class|class
name|Meeting
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|TimetableGridCell
name|iCell
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Meeting
argument_list|>
name|iSiblings
init|=
literal|null
decl_stmt|;
specifier|private
name|Widget
name|iTitle
init|=
literal|null
decl_stmt|;
specifier|private
name|Meeting
parameter_list|(
name|TimetableGridCell
name|cell
parameter_list|,
name|boolean
name|showRoom
parameter_list|,
name|boolean
name|showInstructor
parameter_list|,
name|boolean
name|showTime
parameter_list|,
name|boolean
name|showPreference
parameter_list|,
name|boolean
name|showDate
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iCell
operator|=
name|cell
expr_stmt|;
name|setStyleName
argument_list|(
literal|"meeting"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|hasBackground
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|cell
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"header"
argument_list|,
literal|"label"
argument_list|)
decl_stmt|;
name|header
operator|.
name|setHeight
argument_list|(
name|sLineHeight
operator|*
name|cell
operator|.
name|getNrNames
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|setHTML
argument_list|(
name|cell
operator|.
name|getName
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|NOWRAP
argument_list|)
expr_stmt|;
if|if
condition|(
name|cell
operator|.
name|isItalics
argument_list|()
condition|)
name|header
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setFontStyle
argument_list|(
name|FontStyle
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|P
name|footer
init|=
operator|new
name|P
argument_list|(
literal|"footer"
argument_list|)
decl_stmt|;
name|String
name|notes
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|showTime
operator|&&
name|cell
operator|.
name|hasTime
argument_list|()
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|cell
operator|.
name|getTime
argument_list|()
expr_stmt|;
if|if
condition|(
name|showDate
operator|&&
name|cell
operator|.
name|hasDate
argument_list|()
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|cell
operator|.
name|getDate
argument_list|()
expr_stmt|;
if|if
condition|(
name|showRoom
operator|&&
name|cell
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|cell
operator|.
name|getRoom
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showInstructor
operator|&&
name|cell
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|cell
operator|.
name|getInstructor
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showPreference
operator|&&
name|cell
operator|.
name|hasPreference
argument_list|()
condition|)
name|notes
operator|+=
operator|(
name|notes
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
literal|"<span style='color:rgb(200,200,200)'>"
operator|+
name|cell
operator|.
name|getPreference
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|footer
operator|.
name|setHTML
argument_list|(
name|notes
argument_list|)
expr_stmt|;
name|footer
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWhiteSpace
argument_list|(
name|WhiteSpace
operator|.
name|NOWRAP
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|footer
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
name|EventTarget
name|related
init|=
name|event
operator|.
name|getRelatedEventTarget
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
if|if
condition|(
name|getCell
argument_list|()
operator|.
name|hasId
argument_list|()
operator|&&
name|getCell
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|TimetableGridCell
operator|.
name|Type
operator|.
name|Class
condition|)
block|{
name|UniTimeFrameDialog
operator|.
name|openDialog
argument_list|(
name|MESSAGES
operator|.
name|dialogSuggestions
argument_list|()
argument_list|,
literal|"suggestions.do?id="
operator|+
name|getCell
argument_list|()
operator|.
name|getId
argument_list|()
operator|+
literal|"&op=Reset"
argument_list|,
literal|"900"
argument_list|,
literal|"90%"
argument_list|)
expr_stmt|;
name|select
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|select
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|select
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Meeting
argument_list|>
name|getSiblings
parameter_list|()
block|{
if|if
condition|(
name|iSiblings
operator|==
literal|null
condition|)
block|{
name|iSiblings
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|iMeetings
control|)
block|{
if|if
condition|(
name|getCell
argument_list|()
operator|.
name|sameClassOrMeeting
argument_list|(
name|m
operator|.
name|getCell
argument_list|()
argument_list|)
condition|)
name|iSiblings
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSiblings
operator|.
name|isEmpty
argument_list|()
condition|)
name|iSiblings
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|iSiblings
return|;
block|}
specifier|protected
name|Widget
name|getCellTitle
parameter_list|()
block|{
if|if
condition|(
name|iTitle
operator|==
literal|null
condition|)
block|{
name|SimpleForm
name|form
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|form
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propName
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getTitle
argument_list|(
literal|"<br>&nbsp;&nbsp;&nbsp;"
argument_list|)
operator|+
operator|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|EventType
argument_list|)
condition|?
literal|" ("
operator|+
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|EventType
argument_list|,
literal|""
argument_list|)
operator|+
literal|")"
else|:
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|Owner
argument_list|)
condition|?
literal|" ("
operator|+
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|Owner
argument_list|,
literal|""
argument_list|)
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasTime
argument_list|()
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridTime
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
operator|(
name|iCell
operator|.
name|hasDays
argument_list|()
condition|?
name|iCell
operator|.
name|getDays
argument_list|()
operator|+
literal|" "
else|:
literal|""
operator|)
operator|+
name|iCell
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasDate
argument_list|()
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridDate
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|getNrRooms
argument_list|()
operator|>
literal|0
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridLocation
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getRoom
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|getNrInstructors
argument_list|()
operator|>
literal|0
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridInstructor
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getInstructor
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|StudentConflicts
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridStudentConflicts
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|formatStudentConflicts
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|StudentConflicts
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsCommitted
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsDistance
argument_list|,
literal|"0"
argument_list|)
argument_list|,
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|StudentConflictsHard
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|TimePreference
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridTimePreferences
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|TimePreference
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|RoomPreference
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridRoomPreferences
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|RoomPreference
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|DistributionPreference
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridDistributionPreferences
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|DistributionPreference
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|InitialAssignment
argument_list|)
condition|)
block|{
name|String
name|initial
init|=
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|InitialAssignment
argument_list|,
literal|"-"
argument_list|)
decl_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridInitialAssignment
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
operator|(
literal|"-"
operator|.
name|equals
argument_list|(
name|initial
argument_list|)
condition|?
literal|"<i>"
operator|+
name|MESSAGES
operator|.
name|initialAssignmentCurrent
argument_list|()
operator|+
literal|"</i>"
else|:
name|initial
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|PerturbationPenalty
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridPerturbationPenalty
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|PerturbationPenalty
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|DepartmentBalance
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridDepartmentBalance
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|DepartmentBalance
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCell
operator|.
name|hasProperty
argument_list|(
name|Property
operator|.
name|NonConflictingPlacements
argument_list|)
condition|)
name|form
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTimeGridNonConflictingPlacements
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|iCell
operator|.
name|getProperty
argument_list|(
name|Property
operator|.
name|NonConflictingPlacements
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SimplePanel
name|panel
init|=
operator|new
name|SimplePanel
argument_list|(
name|form
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-RoomHint"
argument_list|)
expr_stmt|;
name|iTitle
operator|=
name|panel
expr_stmt|;
block|}
return|return
name|iTitle
return|;
block|}
specifier|protected
name|void
name|select
parameter_list|(
name|boolean
name|selected
parameter_list|)
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|getSiblings
argument_list|()
control|)
block|{
if|if
condition|(
name|selected
condition|)
block|{
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"rgb(223,231,242)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iCell
operator|.
name|hasBackground
argument_list|()
condition|)
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|iCell
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|getCellTitle
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|selected
condition|)
block|{
name|GwtHint
operator|.
name|showHint
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|getCellTitle
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|TimetableGridCell
name|getCell
parameter_list|()
block|{
return|return
name|iCell
return|;
block|}
block|}
specifier|public
class|class
name|Background
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|TimetableGridBackground
name|iBackground
decl_stmt|;
specifier|public
name|Background
parameter_list|(
name|TimetableGridBackground
name|background
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"background"
argument_list|)
expr_stmt|;
name|iBackground
operator|=
name|background
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
if|if
condition|(
name|background
operator|.
name|hasBackground
argument_list|()
condition|)
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
name|background
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimetableGridBackground
name|getBackground
parameter_list|()
block|{
return|return
name|iBackground
return|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|getComment
parameter_list|(
name|TimetableGridModel
name|model
parameter_list|)
block|{
if|if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|"("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|", "
operator|+
name|sUtilizationFormat
operator|.
name|format
argument_list|(
name|model
operator|.
name|getUtilization
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
if|else if
condition|(
name|model
operator|.
name|getResourceType
argument_list|()
operator|>=
literal|2
condition|)
block|{
return|return
literal|"("
operator|+
name|model
operator|.
name|getSize
argument_list|()
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|protected
specifier|static
name|Date
name|getDate
parameter_list|(
name|Date
name|firstDate
parameter_list|,
name|int
name|date
parameter_list|)
block|{
name|Date
name|ret
init|=
operator|new
name|Date
argument_list|(
name|firstDate
operator|.
name|getTime
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setDate
argument_list|(
name|ret
operator|.
name|getDate
argument_list|()
operator|+
name|date
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

