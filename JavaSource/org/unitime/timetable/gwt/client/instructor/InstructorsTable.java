begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|HasColumnName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeTypeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorAttributePropertiesInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorsColumn
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
operator|.
name|HorizontalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|InstructorsTable
extends|extends
name|UniTimeTable
argument_list|<
name|InstructorInterface
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|InstructorsColumn
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iAsc
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iSelectable
init|=
literal|false
decl_stmt|;
specifier|private
name|InstructorAttributePropertiesInterface
name|iProperties
init|=
literal|null
decl_stmt|;
specifier|public
name|InstructorsTable
parameter_list|(
name|InstructorAttributePropertiesInterface
name|properties
parameter_list|,
name|boolean
name|selectable
parameter_list|)
block|{
name|setStyleName
argument_list|(
literal|"unitime-Instructorss"
argument_list|)
expr_stmt|;
name|iSelectable
operator|=
name|selectable
expr_stmt|;
name|iProperties
operator|=
name|properties
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorsColumn
name|column
range|:
name|InstructorsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nrCells
condition|;
name|idx
operator|++
control|)
block|{
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|getColumnName
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|,
name|getColumnAlignment
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|InstructorsColumn
name|column
range|:
name|InstructorsColumn
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|InstructorComparator
operator|.
name|isApplicable
argument_list|(
name|column
argument_list|)
operator|&&
name|getNbrCells
argument_list|(
name|column
argument_list|)
operator|>
literal|0
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|header
operator|.
name|get
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|SortOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSort
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|h
operator|.
name|isVisible
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|i
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
literal|"unitime-ClickableTableHeader"
argument_list|)
expr_stmt|;
name|setSortBy
argument_list|(
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortAttributesBy
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSelectable
condition|)
block|{
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setSelected
argument_list|(
name|row
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSelectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|setSelected
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opClearSelection
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|InstructorInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|InstructorInterface
argument_list|>
name|event
parameter_list|)
block|{
name|selectInstructor
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
name|isSelected
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doSort
parameter_list|(
name|InstructorsColumn
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
name|iSortBy
condition|)
block|{
name|iAsc
operator|=
operator|!
name|iAsc
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|column
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortInstructorsBy
argument_list|(
name|getSortBy
argument_list|()
argument_list|)
expr_stmt|;
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getSortBy
parameter_list|()
block|{
return|return
name|iSortBy
operator|==
literal|null
condition|?
literal|0
else|:
name|iAsc
condition|?
literal|1
operator|+
name|iSortBy
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|iSortBy
operator|.
name|ordinal
argument_list|()
return|;
block|}
specifier|public
name|void
name|setSortBy
parameter_list|(
name|int
name|sortBy
parameter_list|)
block|{
if|if
condition|(
name|sortBy
operator|==
literal|0
condition|)
block|{
name|iSortBy
operator|=
literal|null
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|sortBy
operator|>
literal|0
condition|)
block|{
name|iSortBy
operator|=
name|InstructorsColumn
operator|.
name|values
argument_list|()
index|[
name|sortBy
operator|-
literal|1
index|]
expr_stmt|;
name|iAsc
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|iSortBy
operator|=
name|InstructorsColumn
operator|.
name|values
argument_list|()
index|[
operator|-
literal|1
operator|-
name|sortBy
index|]
expr_stmt|;
name|iAsc
operator|=
literal|false
expr_stmt|;
block|}
name|sort
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
block|{
if|if
condition|(
name|iSortBy
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|getNbrCells
argument_list|(
name|iSortBy
argument_list|)
operator|==
literal|0
condition|)
name|iSortBy
operator|=
name|InstructorsColumn
operator|.
name|NAME
expr_stmt|;
name|UniTimeTableHeader
name|header
init|=
name|getHeader
argument_list|(
name|getCellIndex
argument_list|(
name|iSortBy
argument_list|)
argument_list|)
decl_stmt|;
name|Comparator
argument_list|<
name|InstructorInterface
argument_list|>
name|ic
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iSelectable
operator|&&
name|iSortBy
operator|==
name|InstructorsColumn
operator|.
name|SELECTION
condition|)
block|{
name|ic
operator|=
operator|new
name|Comparator
argument_list|<
name|InstructorInterface
argument_list|>
argument_list|()
block|{
specifier|private
name|Comparator
argument_list|<
name|InstructorInterface
argument_list|>
name|iIC
init|=
operator|new
name|InstructorComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|InstructorInterface
name|r1
parameter_list|,
name|InstructorInterface
name|r2
parameter_list|)
block|{
name|boolean
name|s1
init|=
name|isInstructorSelected
argument_list|(
name|r1
argument_list|)
decl_stmt|,
name|s2
init|=
name|isInstructorSelected
argument_list|(
name|r2
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|!=
name|s2
condition|)
return|return
name|s1
condition|?
operator|-
literal|1
else|:
literal|1
return|;
return|return
name|iIC
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
name|ic
operator|=
operator|new
name|InstructorComparator
argument_list|(
name|iSortBy
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|sort
argument_list|(
name|header
argument_list|,
name|ic
argument_list|,
name|iAsc
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|int
name|getNbrCells
parameter_list|(
name|InstructorsColumn
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|SELECTION
case|:
return|return
name|iSelectable
condition|?
literal|1
else|:
literal|0
return|;
case|case
name|ATTRIBUTES
case|:
return|return
operator|(
name|iProperties
operator|==
literal|null
condition|?
literal|0
else|:
name|iProperties
operator|.
name|getAttributeTypes
argument_list|()
operator|.
name|size
argument_list|()
operator|)
return|;
default|default:
return|return
literal|1
return|;
block|}
block|}
specifier|protected
name|boolean
name|isVisible
parameter_list|(
name|InstructorsColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|ATTRIBUTES
case|:
return|return
literal|false
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|(
name|InstructorsColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|SELECTION
case|:
return|return
name|MESSAGES
operator|.
name|colSelection
argument_list|()
return|;
case|case
name|ID
case|:
return|return
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
return|;
case|case
name|POSITION
case|:
return|return
name|MESSAGES
operator|.
name|colPosition
argument_list|()
return|;
case|case
name|TEACHING_PREF
case|:
return|return
name|MESSAGES
operator|.
name|colTeachingPreference
argument_list|()
return|;
case|case
name|MAX_LOAD
case|:
return|return
name|MESSAGES
operator|.
name|colMaxLoad
argument_list|()
return|;
case|case
name|ATTRIBUTES
case|:
return|return
name|iProperties
operator|.
name|getAttributeTypes
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getLabel
argument_list|()
return|;
default|default:
return|return
name|column
operator|.
name|name
argument_list|()
return|;
block|}
block|}
specifier|protected
name|HorizontalAlignmentConstant
name|getColumnAlignment
parameter_list|(
name|InstructorsColumn
name|column
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
default|default:
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
return|;
block|}
block|}
specifier|protected
name|int
name|getCellIndex
parameter_list|(
name|InstructorsColumn
name|column
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorsColumn
name|c
range|:
name|InstructorsColumn
operator|.
name|values
argument_list|()
control|)
if|if
condition|(
name|c
operator|.
name|ordinal
argument_list|()
operator|<
name|column
operator|.
name|ordinal
argument_list|()
condition|)
name|ret
operator|+=
name|getNbrCells
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|protected
name|Widget
name|getCell
parameter_list|(
specifier|final
name|InstructorInterface
name|instructor
parameter_list|,
specifier|final
name|InstructorsColumn
name|column
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|ID
case|:
if|if
condition|(
name|instructor
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Image
name|warning
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|warning
argument_list|()
argument_list|)
decl_stmt|;
name|warning
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|warnInstructorHasNoExternalId
argument_list|(
name|instructor
operator|.
name|getFormattedName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|warning
return|;
block|}
else|else
block|{
return|return
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
block|}
case|case
name|NAME
case|:
return|return
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getFormattedName
argument_list|()
argument_list|)
return|;
case|case
name|POSITION
case|:
return|return
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getPosition
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|instructor
operator|.
name|getPosition
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
return|;
case|case
name|TEACHING_PREF
case|:
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
return|;
block|}
else|else
block|{
name|Label
name|pref
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getColor
argument_list|()
operator|!=
literal|null
condition|)
name|pref
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|pref
return|;
block|}
case|case
name|MAX_LOAD
case|:
return|return
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|hasMaxLoad
argument_list|()
condition|?
name|NumberFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
return|;
case|case
name|SELECTION
case|:
return|return
operator|new
name|SelectableCell
argument_list|(
name|instructor
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
name|AttributeTypeInterface
name|type
init|=
name|iProperties
operator|.
name|getAttributeTypes
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|attributes
init|=
name|instructor
operator|.
name|getAttributes
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attributes
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|isColumnVisible
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
operator|+
name|idx
argument_list|)
condition|)
block|{
name|setColumnVisible
argument_list|(
name|getCellIndex
argument_list|(
name|column
argument_list|)
operator|+
name|idx
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AttributesCell
argument_list|(
name|attributes
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|resetVisibility
parameter_list|()
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|InstructorsColumn
name|column
range|:
name|InstructorsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nbrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nbrCells
condition|;
name|idx
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|isVisible
argument_list|(
name|column
argument_list|,
name|idx
argument_list|)
condition|)
name|setColumnVisible
argument_list|(
name|col
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|addInstructor
parameter_list|(
specifier|final
name|InstructorInterface
name|attribute
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|widgets
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InstructorsColumn
name|column
range|:
name|InstructorsColumn
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|nbrCells
init|=
name|getNbrCells
argument_list|(
name|column
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|nbrCells
condition|;
name|idx
operator|++
control|)
block|{
name|Widget
name|cell
init|=
name|getCell
argument_list|(
name|attribute
argument_list|,
name|column
argument_list|,
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
operator|new
name|P
argument_list|()
expr_stmt|;
name|widgets
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|row
init|=
name|addRow
argument_list|(
name|attribute
argument_list|,
name|widgets
argument_list|)
decl_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|"row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|col
init|=
literal|0
init|;
name|col
operator|<
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|col
operator|++
control|)
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"cell"
argument_list|)
expr_stmt|;
return|return
name|row
return|;
block|}
specifier|public
specifier|static
class|class
name|InstructorsCell
extends|extends
name|P
block|{
specifier|public
name|InstructorsCell
parameter_list|(
name|AttributeInterface
name|attribute
parameter_list|)
block|{
name|super
argument_list|(
literal|"instructors"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attribute
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|InstructorInterface
argument_list|>
name|i
init|=
name|attribute
operator|.
name|getInstructors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|InstructorInterface
name|instructor
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|add
argument_list|(
operator|new
name|InstructorCell
argument_list|(
name|instructor
argument_list|,
name|i
operator|.
name|hasNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|InstructorCell
extends|extends
name|P
block|{
specifier|public
name|InstructorCell
parameter_list|(
specifier|final
name|InstructorInterface
name|instructor
parameter_list|,
name|boolean
name|hasNext
parameter_list|)
block|{
name|super
argument_list|(
literal|"instructor"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|instructor
operator|.
name|getFormattedName
argument_list|()
operator|+
operator|(
name|hasNext
condition|?
literal|","
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|refreshTable
parameter_list|()
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|HasRefresh
condition|)
operator|(
operator|(
name|HasRefresh
operator|)
name|w
operator|)
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|InstructorInterface
name|getAttribute
parameter_list|(
name|Long
name|instructorId
parameter_list|)
block|{
if|if
condition|(
name|instructorId
operator|==
literal|null
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|instructorId
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|getData
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|scrollTo
parameter_list|(
name|Long
name|instructorId
parameter_list|)
block|{
if|if
condition|(
name|instructorId
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|instructorId
operator|.
name|equals
argument_list|(
name|getData
argument_list|(
name|i
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|ToolBox
operator|.
name|scrollToElement
argument_list|(
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|public
specifier|static
interface|interface
name|SortOperation
extends|extends
name|Operation
extends|,
name|HasColumnName
block|{}
specifier|public
specifier|static
class|class
name|AttributesCell
extends|extends
name|P
block|{
specifier|public
name|AttributesCell
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|AttributeInterface
argument_list|>
name|attributes
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setStyleName
argument_list|(
literal|"attributes"
argument_list|)
expr_stmt|;
for|for
control|(
name|AttributeInterface
name|attribute
range|:
name|attributes
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|attribute
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Boolean
name|isInstructorSelected
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
return|return
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|boolean
name|isInstructorSelected
parameter_list|(
name|InstructorInterface
name|instructor
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iSelectable
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|isInstructorSelected
argument_list|(
name|row
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|getRow
parameter_list|(
name|InstructorInterface
name|instructor
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
return|return
name|row
return|;
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|selectInstructor
parameter_list|(
name|InstructorInterface
name|instructor
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iSelectable
condition|)
return|return;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|selectInstructor
argument_list|(
name|row
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|public
name|void
name|selectInstructor
parameter_list|(
name|int
name|row
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CheckBox
name|getInstructorSelection
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Widget
name|w
init|=
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
return|return
operator|(
name|CheckBox
operator|)
name|w
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
class|class
name|SelectableCell
extends|extends
name|CheckBox
block|{
name|SelectableCell
parameter_list|(
specifier|final
name|InstructorInterface
name|instructor
parameter_list|)
block|{
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|setSelected
argument_list|(
name|getRow
argument_list|(
name|instructor
argument_list|)
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

