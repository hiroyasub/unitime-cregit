begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AttributesCell
extends|extends
name|P
implements|implements
name|TakesValue
argument_list|<
name|List
argument_list|<
name|AttributeInterface
argument_list|>
argument_list|>
block|{
specifier|private
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|iAttributes
init|=
literal|null
decl_stmt|;
specifier|public
name|AttributesCell
parameter_list|()
block|{
name|super
argument_list|(
literal|"attributes"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AttributesCell
parameter_list|(
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|attributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AttributesCell
parameter_list|(
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|oldAttributes
parameter_list|,
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|newAttributes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|setValue
argument_list|(
name|oldAttributes
argument_list|,
name|newAttributes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|attributes
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iAttributes
operator|=
name|attributes
expr_stmt|;
if|if
condition|(
name|attributes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeInterface
name|a
range|:
name|attributes
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|oldAttributes
parameter_list|,
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|newAttributes
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iAttributes
operator|=
name|newAttributes
expr_stmt|;
if|if
condition|(
name|oldAttributes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeInterface
name|a
range|:
name|oldAttributes
control|)
block|{
if|if
condition|(
name|newAttributes
operator|==
literal|null
operator|||
operator|!
name|newAttributes
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|,
literal|"old"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newAttributes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|oldAttributes
operator|!=
literal|null
condition|)
for|for
control|(
name|AttributeInterface
name|a
range|:
name|newAttributes
control|)
block|{
if|if
condition|(
name|oldAttributes
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|,
literal|"same"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|AttributeInterface
name|a
range|:
name|newAttributes
control|)
block|{
if|if
condition|(
name|oldAttributes
operator|==
literal|null
operator|||
operator|!
name|oldAttributes
operator|.
name|contains
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|AttributeInterface
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|iAttributes
return|;
block|}
block|}
end_class

end_unit

