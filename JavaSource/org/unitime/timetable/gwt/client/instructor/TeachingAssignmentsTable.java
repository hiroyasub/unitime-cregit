begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingAssignmentsPage
operator|.
name|SingleTeachingAssingment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomCookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsPagePropertiesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|RoomInterface
operator|.
name|RoomSharingDisplayMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TeachingAssignmentsTable
extends|extends
name|UniTimeTable
argument_list|<
name|SingleTeachingAssingment
argument_list|>
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|SECTMSG
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|NumberFormat
name|sTeachingLoadFormat
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TeachingRequestDetailPage
name|iDetail
init|=
literal|null
decl_stmt|;
specifier|private
name|TeachingRequestsPagePropertiesResponse
name|iProperties
decl_stmt|;
specifier|public
name|TeachingAssignmentsTable
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-TeachingAssignments"
argument_list|)
expr_stmt|;
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|SingleTeachingAssingment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|SingleTeachingAssingment
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iDetail
operator|==
literal|null
condition|)
block|{
name|iDetail
operator|=
operator|new
name|TeachingRequestDetailPage
argument_list|(
name|iProperties
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onAssignmentChanged
parameter_list|(
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|assignments
parameter_list|)
block|{
name|TeachingAssignmentsTable
operator|.
name|this
operator|.
name|onAssignmentChanged
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|iDetail
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iDetail
operator|.
name|showInstructorDetail
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getInstructor
argument_list|()
operator|.
name|getInstructorId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
name|TeachingRequestsPagePropertiesResponse
name|properties
parameter_list|)
block|{
name|iProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|protected
name|void
name|onAssignmentChanged
parameter_list|(
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|assignments
parameter_list|)
block|{
block|}
name|void
name|populate
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|InstructorInfo
argument_list|>
name|results
parameter_list|)
block|{
name|clearTable
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|sortHeader
init|=
literal|null
decl_stmt|;
name|COLUMN
name|sortColumn
init|=
literal|null
decl_stmt|;
name|boolean
name|asc
init|=
literal|true
decl_stmt|;
name|int
name|sort
init|=
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getSortTeachingAssignmentsBy
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|getHeader
argument_list|(
name|column
argument_list|)
decl_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sort
argument_list|(
name|h
argument_list|,
operator|new
name|TableComparator
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setSortTeachingAssignmentsBy
argument_list|(
name|h
operator|.
name|getOrder
argument_list|()
condition|?
literal|1
operator|+
name|column
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|hideDuplicateInstructors
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
if|if
condition|(
name|sort
operator|!=
literal|0
operator|&&
name|Math
operator|.
name|abs
argument_list|(
name|sort
argument_list|)
operator|-
literal|1
operator|==
name|column
operator|.
name|ordinal
argument_list|()
condition|)
block|{
name|sortHeader
operator|=
name|h
expr_stmt|;
name|sortColumn
operator|=
name|column
expr_stmt|;
name|asc
operator|=
name|sort
operator|>
literal|0
expr_stmt|;
block|}
block|}
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorInfo
name|instructor
range|:
name|results
control|)
block|{
if|if
condition|(
name|instructor
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SingleTeachingAssingment
name|assignment
init|=
operator|new
name|SingleTeachingAssingment
argument_list|(
name|instructor
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
name|Widget
name|cell
init|=
name|getCell
argument_list|(
name|column
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|assignment
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|TeachingRequestInfo
name|request
range|:
name|instructor
operator|.
name|getAssignedRequests
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|isMatchingFilter
argument_list|()
condition|)
continue|continue;
name|SingleTeachingAssingment
name|assignment
init|=
operator|new
name|SingleTeachingAssingment
argument_list|(
name|instructor
argument_list|,
name|request
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
name|Widget
name|cell
init|=
name|getCell
argument_list|(
name|column
argument_list|,
name|assignment
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
name|cell
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|int
name|row
init|=
name|addRow
argument_list|(
name|assignment
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isConflict
argument_list|()
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|"enrollment-conflict"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sortHeader
operator|!=
literal|null
condition|)
name|sort
argument_list|(
name|sortHeader
argument_list|,
operator|new
name|TableComparator
argument_list|(
name|sortColumn
argument_list|)
argument_list|,
name|asc
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|UniTimeTableHeader
name|h
init|=
name|header
operator|.
name|get
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|colIdx
init|=
name|column
operator|.
name|ordinal
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|isCanHide
argument_list|()
condition|)
block|{
name|UniTimeTableHeader
operator|.
name|Operation
name|op
init|=
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
operator|!
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|,
name|visible
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
argument_list|,
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|COLUMN
operator|.
name|NAME
operator|==
name|column
operator|&&
operator|!
name|visible
condition|)
block|{
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setTeachingAssignmentsColumnVisible
argument_list|(
name|COLUMN
operator|.
name|EXTERNAL_ID
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|COLUMN
operator|.
name|EXTERNAL_ID
operator|==
name|column
operator|&&
operator|!
name|visible
condition|)
block|{
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setTeachingAssignmentsColumnVisible
argument_list|(
name|COLUMN
operator|.
name|NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
return|return
name|MESSAGES
operator|.
name|opHide
argument_list|(
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
else|else
return|return
name|MESSAGES
operator|.
name|opShow
argument_list|(
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperations
argument_list|()
operator|.
name|add
argument_list|(
name|header
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|header
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperations
argument_list|()
operator|.
name|add
argument_list|(
name|header
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getOperations
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|op
argument_list|)
expr_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|visible
init|=
operator|!
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|,
name|visible
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
argument_list|,
name|visible
argument_list|)
expr_stmt|;
if|if
condition|(
name|COLUMN
operator|.
name|NAME
operator|==
name|column
operator|&&
operator|!
name|visible
condition|)
block|{
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setTeachingAssignmentsColumnVisible
argument_list|(
name|COLUMN
operator|.
name|EXTERNAL_ID
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|COLUMN
operator|.
name|EXTERNAL_ID
operator|==
name|column
operator|&&
operator|!
name|visible
condition|)
block|{
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setTeachingAssignmentsColumnVisible
argument_list|(
name|COLUMN
operator|.
name|NAME
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setColumnVisible
argument_list|(
name|colIdx
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
if|if
condition|(
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
condition|)
return|return
name|MESSAGES
operator|.
name|opHideItem
argument_list|(
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
else|else
return|return
name|MESSAGES
operator|.
name|opShowItem
argument_list|(
name|h
operator|.
name|getHTML
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|setColumnVisible
argument_list|(
name|colIdx
argument_list|,
operator|!
name|column
operator|.
name|isCanHide
argument_list|()
operator|||
name|InstructorCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isTeachingAssignmentsColumnVisible
argument_list|(
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|hideDuplicateInstructors
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|hideDuplicateInstructors
parameter_list|()
block|{
name|InstructorInfo
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SingleTeachingAssingment
name|ta
init|=
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ta
operator|==
literal|null
condition|)
block|{
name|last
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|ta
operator|.
name|getInstructor
argument_list|()
operator|.
name|equals
argument_list|(
name|last
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
argument_list|,
name|column
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|column
operator|.
name|isHasRequest
argument_list|()
condition|)
name|getWidget
argument_list|(
name|i
argument_list|,
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
specifier|final
name|COLUMN
name|column
range|:
name|COLUMN
operator|.
name|values
argument_list|()
control|)
block|{
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
argument_list|,
name|column
operator|.
name|ordinal
argument_list|()
argument_list|,
literal|"first-line"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|column
operator|.
name|isHasRequest
argument_list|()
condition|)
name|getWidget
argument_list|(
name|i
argument_list|,
name|column
operator|.
name|ordinal
argument_list|()
argument_list|)
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|last
operator|=
name|ta
operator|.
name|getInstructor
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|UniTimeTableHeader
name|getHeader
parameter_list|(
name|COLUMN
name|column
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|COURSE
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
return|;
case|case
name|SECTION
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
return|;
case|case
name|ROOM
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
return|;
case|case
name|LOAD
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeachingLoad
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTE_PREFS
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAttributePreferences
argument_list|()
argument_list|)
return|;
case|case
name|INSTRUCTOR_PREFS
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructorPreferences
argument_list|()
argument_list|)
return|;
case|case
name|EXTERNAL_ID
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|)
return|;
case|case
name|NAME
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAttributes
argument_list|()
argument_list|)
return|;
case|case
name|COURSE_PREF
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoursePreferences
argument_list|()
argument_list|)
return|;
case|case
name|DISTRIBUTION_PREF
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistributionPreferences
argument_list|()
argument_list|)
return|;
case|case
name|TIME_PREF
case|:
name|UniTimeTableHeader
name|timePrefHeader
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimePreferences
argument_list|()
argument_list|)
decl_stmt|;
name|timePrefHeader
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setOrientation
argument_list|(
literal|true
argument_list|,
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|areRoomsHorizontal
argument_list|()
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|!
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isGridAsText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opOrientationAsText
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|timePrefHeader
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setOrientation
argument_list|(
literal|false
argument_list|,
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|areRoomsHorizontal
argument_list|()
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isGridAsText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opOrientationAsGrid
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|timePrefHeader
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setOrientation
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|!
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isGridAsText
argument_list|()
operator|&&
operator|!
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|areRoomsHorizontal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opOrientationHorizontal
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|timePrefHeader
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setOrientation
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|!
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isGridAsText
argument_list|()
operator|&&
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|areRoomsHorizontal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opOrientationVertical
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iProperties
operator|!=
literal|null
operator|&&
name|iProperties
operator|.
name|hasModes
argument_list|()
operator|&&
operator|!
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isGridAsText
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iProperties
operator|.
name|getModes
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|RoomSharingDisplayMode
name|mode
init|=
name|iProperties
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|int
name|index
init|=
name|i
decl_stmt|;
name|timePrefHeader
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setMode
argument_list|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|areRoomsHorizontal
argument_list|()
argument_list|,
name|mode
operator|.
name|toHex
argument_list|()
argument_list|)
expr_stmt|;
name|refreshTable
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|!
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isGridAsText
argument_list|()
operator|&&
operator|!
name|mode
operator|.
name|toHex
argument_list|()
operator|.
name|equals
argument_list|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
operator|(
name|index
operator|==
literal|0
operator|||
operator|(
name|index
operator|==
literal|1
operator|&&
name|iProperties
operator|.
name|getModes
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toHex
argument_list|()
operator|.
name|equals
argument_list|(
name|RoomCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getMode
argument_list|()
argument_list|)
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|mode
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|timePrefHeader
return|;
case|case
name|ASSIGNED_LOAD
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAssignedLoad
argument_list|()
argument_list|)
return|;
case|case
name|OBJECTIVES
case|:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
return|;
default|default:
return|return
operator|new
name|UniTimeTableHeader
argument_list|(
name|column
operator|.
name|name
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
name|Widget
name|getCell
parameter_list|(
name|COLUMN
name|column
parameter_list|,
specifier|final
name|SingleTeachingAssingment
name|assignment
parameter_list|)
block|{
name|InstructorInfo
name|instructor
init|=
name|assignment
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|TeachingRequestInfo
name|request
init|=
name|assignment
operator|.
name|getRequest
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|COURSE
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Label
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
case|case
name|SECTION
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"sections"
argument_list|)
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"section"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|i
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
case|case
name|TIME
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|p
operator|=
operator|new
name|P
argument_list|(
literal|"times"
argument_list|)
expr_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"time"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setHTML
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|i
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
case|case
name|DATE
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|p
operator|=
operator|new
name|P
argument_list|(
literal|"dates"
argument_list|)
expr_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setHTML
argument_list|(
name|s
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|s
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|i
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
case|case
name|ROOM
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|p
operator|=
operator|new
name|P
argument_list|(
literal|"rooms"
argument_list|)
expr_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setHTML
argument_list|(
name|s
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|s
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|i
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
case|case
name|LOAD
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getLoad
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|EXTERNAL_ID
case|:
if|if
condition|(
name|instructor
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Label
name|extId
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|extId
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|extId
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|extId
return|;
case|case
name|NAME
case|:
if|if
condition|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Label
name|name
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
case|case
name|ATTRIBUTE_PREFS
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|request
operator|.
name|getAttributePreferences
argument_list|()
argument_list|)
return|;
case|case
name|INSTRUCTOR_PREFS
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|request
operator|.
name|getInstructorPreferences
argument_list|()
argument_list|)
return|;
case|case
name|COURSE_PREF
case|:
return|return
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
return|;
case|case
name|DISTRIBUTION_PREF
case|:
return|return
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
return|;
case|case
name|TIME_PREF
case|:
return|return
operator|new
name|TimePreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|instructor
argument_list|)
return|;
case|case
name|ATTRIBUTES
case|:
return|return
operator|new
name|AttributesCell
argument_list|(
name|instructor
operator|.
name|getAttributes
argument_list|()
argument_list|)
return|;
case|case
name|ASSIGNED_LOAD
case|:
return|return
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
operator|+
literal|" / "
operator|+
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
argument_list|)
return|;
case|case
name|OBJECTIVES
case|:
if|if
condition|(
name|request
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|ObjectivesCell
argument_list|(
name|iProperties
argument_list|,
name|request
operator|.
name|getValues
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
enum|enum
name|COLUMN
block|{
name|EXTERNAL_ID
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|NAME
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|ASSIGNED_LOAD
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|ATTRIBUTES
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|COURSE_PREF
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|TIME_PREF
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|DISTRIBUTION_PREF
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|,
name|COURSE
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|SECTION
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
block|,
name|TIME
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|DATE
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|ROOM
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|LOAD
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|ATTRIBUTE_PREFS
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|INSTRUCTOR_PREFS
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|,
name|OBJECTIVES
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
block|, 		;
specifier|private
name|boolean
name|iCanHide
decl_stmt|;
specifier|private
name|boolean
name|iHasRequest
decl_stmt|;
name|COLUMN
parameter_list|(
name|boolean
name|canHide
parameter_list|,
name|boolean
name|hasRequest
parameter_list|)
block|{
name|iCanHide
operator|=
name|canHide
expr_stmt|;
name|iHasRequest
operator|=
name|hasRequest
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCanHide
parameter_list|()
block|{
return|return
name|iCanHide
return|;
block|}
specifier|public
name|boolean
name|isHasRequest
parameter_list|()
block|{
return|return
name|iHasRequest
return|;
block|}
specifier|public
name|int
name|flag
parameter_list|()
block|{
return|return
literal|1
operator|<<
name|ordinal
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TableComparator
implements|implements
name|Comparator
argument_list|<
name|SingleTeachingAssingment
argument_list|>
block|{
specifier|private
name|COLUMN
name|iColumn
decl_stmt|;
specifier|public
name|TableComparator
parameter_list|(
name|COLUMN
name|column
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
block|}
specifier|protected
name|int
name|compareSections
parameter_list|(
name|COLUMN
name|column
parameter_list|,
name|SectionInfo
name|s1
parameter_list|,
name|SectionInfo
name|s2
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|SECTION
case|:
return|return
name|compareOthers
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
return|;
case|case
name|TIME
case|:
return|return
name|compareStrings
argument_list|(
name|s1
operator|.
name|getTime
argument_list|()
argument_list|,
name|s2
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|compareStrings
argument_list|(
name|s1
operator|.
name|getDate
argument_list|()
argument_list|,
name|s2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
case|case
name|ROOM
case|:
return|return
name|compareStrings
argument_list|(
name|s1
operator|.
name|getRoom
argument_list|()
argument_list|,
name|s2
operator|.
name|getRoom
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
specifier|protected
name|int
name|comparePreferences
parameter_list|(
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|p1
parameter_list|,
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|p2
parameter_list|)
block|{
name|Iterator
argument_list|<
name|PreferenceInfo
argument_list|>
name|i1
init|=
name|p1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|PreferenceInfo
argument_list|>
name|i2
init|=
name|p2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|i1
operator|.
name|next
argument_list|()
operator|.
name|compareTo
argument_list|(
name|i2
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
operator|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|?
literal|1
else|:
name|i2
operator|.
name|hasNext
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
return|;
block|}
specifier|private
name|int
name|compareByColumn
parameter_list|(
name|COLUMN
name|column
parameter_list|,
name|SingleTeachingAssingment
name|a1
parameter_list|,
name|SingleTeachingAssingment
name|a2
parameter_list|)
block|{
name|InstructorInfo
name|i1
init|=
name|a1
operator|.
name|getInstructor
argument_list|()
decl_stmt|,
name|i2
init|=
name|a2
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|TeachingRequestInfo
name|r1
init|=
name|a1
operator|.
name|getRequest
argument_list|()
decl_stmt|,
name|r2
init|=
name|a2
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|column
operator|.
name|isHasRequest
argument_list|()
condition|)
block|{
if|if
condition|(
name|r1
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|r2
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
if|else if
condition|(
name|r2
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
block|}
switch|switch
condition|(
name|column
condition|)
block|{
case|case
name|COURSE
case|:
return|return
name|compareOthers
argument_list|(
name|r1
operator|.
name|getCourse
argument_list|()
argument_list|,
name|r2
operator|.
name|getCourse
argument_list|()
argument_list|)
return|;
case|case
name|SECTION
case|:
case|case
name|TIME
case|:
case|case
name|DATE
case|:
case|case
name|ROOM
case|:
name|Iterator
argument_list|<
name|SectionInfo
argument_list|>
name|t1
init|=
name|r1
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|SectionInfo
argument_list|>
name|t2
init|=
name|r2
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|t1
operator|.
name|hasNext
argument_list|()
operator|&&
name|t2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|compareSections
argument_list|(
name|column
argument_list|,
name|t1
operator|.
name|next
argument_list|()
argument_list|,
name|t2
operator|.
name|next
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|t2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|t1
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
return|return
operator|(
name|t1
operator|.
name|hasNext
argument_list|()
condition|?
literal|1
else|:
name|t2
operator|.
name|hasNext
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
return|;
case|case
name|ASSIGNED_LOAD
case|:
name|int
name|cmp
init|=
name|compareNumbers
argument_list|(
name|i1
operator|.
name|getAssignedLoad
argument_list|()
argument_list|,
name|i2
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|compareNumbers
argument_list|(
name|i1
operator|.
name|getMaxLoad
argument_list|()
argument_list|,
name|i2
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
return|;
case|case
name|NAME
case|:
return|return
name|compareStrings
argument_list|(
name|i1
operator|.
name|getInstructorName
argument_list|()
argument_list|,
name|i2
operator|.
name|getInstructorName
argument_list|()
argument_list|)
return|;
case|case
name|EXTERNAL_ID
case|:
return|return
name|compareStrings
argument_list|(
name|i1
operator|.
name|getExternalId
argument_list|()
argument_list|,
name|i2
operator|.
name|getExternalId
argument_list|()
argument_list|)
return|;
case|case
name|LOAD
case|:
return|return
name|compareNumbers
argument_list|(
name|r1
operator|.
name|getLoad
argument_list|()
argument_list|,
name|r2
operator|.
name|getLoad
argument_list|()
argument_list|)
return|;
case|case
name|OBJECTIVES
case|:
name|TreeSet
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|r1
operator|.
name|getValues
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|keys
operator|.
name|addAll
argument_list|(
name|r2
operator|.
name|getValues
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|keys
control|)
block|{
name|Double
name|d1
init|=
name|r1
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|Double
name|d2
init|=
name|r2
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|cmp
operator|=
name|compareNumbers
argument_list|(
name|d1
argument_list|,
name|d2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
case|case
name|ATTRIBUTES
case|:
name|TreeSet
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|i1
operator|.
name|getAttributes
argument_list|()
control|)
name|attributes
operator|.
name|add
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|i2
operator|.
name|getAttributes
argument_list|()
control|)
name|attributes
operator|.
name|add
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|a
range|:
name|attributes
control|)
block|{
name|cmp
operator|=
name|compareBooleans
argument_list|(
name|i1
operator|.
name|hasAttribute
argument_list|(
name|a
argument_list|)
argument_list|,
name|i2
operator|.
name|hasAttribute
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
case|case
name|ATTRIBUTE_PREFS
case|:
return|return
name|comparePreferences
argument_list|(
name|r1
operator|.
name|getAttributePreferences
argument_list|()
argument_list|,
name|r2
operator|.
name|getAttributePreferences
argument_list|()
argument_list|)
return|;
case|case
name|COURSE_PREF
case|:
return|return
name|comparePreferences
argument_list|(
name|i1
operator|.
name|getCoursePreferences
argument_list|()
argument_list|,
name|i2
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
return|;
case|case
name|INSTRUCTOR_PREFS
case|:
return|return
name|comparePreferences
argument_list|(
name|r1
operator|.
name|getInstructorPreferences
argument_list|()
argument_list|,
name|r2
operator|.
name|getInstructorPreferences
argument_list|()
argument_list|)
return|;
case|case
name|DISTRIBUTION_PREF
case|:
return|return
name|comparePreferences
argument_list|(
name|i1
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|,
name|i2
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
return|;
case|case
name|TIME_PREF
case|:
return|return
name|comparePreferences
argument_list|(
name|i1
operator|.
name|getTimePreferences
argument_list|()
argument_list|,
name|i2
operator|.
name|getTimePreferences
argument_list|()
argument_list|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SingleTeachingAssingment
name|a1
parameter_list|,
name|SingleTeachingAssingment
name|a2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compareByColumn
argument_list|(
name|iColumn
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|a1
operator|.
name|getInstructor
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a2
operator|.
name|getInstructor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|compareOthers
argument_list|(
name|a1
operator|.
name|getRequest
argument_list|()
argument_list|,
name|a2
operator|.
name|getRequest
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|int
name|compareStrings
parameter_list|(
name|String
name|s1
parameter_list|,
name|String
name|s2
parameter_list|)
block|{
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s1
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|s2
operator|==
literal|null
operator|||
name|s2
operator|.
name|isEmpty
argument_list|()
condition|?
operator|-
literal|1
else|:
name|s1
operator|.
name|compareToIgnoreCase
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
block|}
specifier|protected
name|int
name|compareNumbers
parameter_list|(
name|Number
name|n1
parameter_list|,
name|Number
name|n2
parameter_list|)
block|{
return|return
operator|(
name|n1
operator|==
literal|null
condition|?
name|n2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|n2
operator|==
literal|null
condition|?
literal|1
else|:
name|Double
operator|.
name|compare
argument_list|(
name|n1
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|n2
operator|.
name|doubleValue
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compareBooleans
parameter_list|(
name|Boolean
name|b1
parameter_list|,
name|Boolean
name|b2
parameter_list|)
block|{
return|return
operator|(
name|b1
operator|==
literal|null
condition|?
name|b2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|b2
operator|==
literal|null
condition|?
literal|1
else|:
operator|(
name|b1
operator|.
name|booleanValue
argument_list|()
operator|==
name|b2
operator|.
name|booleanValue
argument_list|()
operator|)
condition|?
literal|0
else|:
operator|(
name|b1
operator|.
name|booleanValue
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
operator|)
return|;
block|}
specifier|protected
name|int
name|compareOthers
parameter_list|(
name|Comparable
name|c1
parameter_list|,
name|Comparable
name|c2
parameter_list|)
block|{
return|return
operator|(
name|c1
operator|==
literal|null
condition|?
name|c2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
else|:
name|c2
operator|==
literal|null
condition|?
literal|1
else|:
name|c1
operator|.
name|compareTo
argument_list|(
name|c2
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

