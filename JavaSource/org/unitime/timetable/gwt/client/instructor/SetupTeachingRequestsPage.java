begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|NumberBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Clazz
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
operator|.
name|Subpart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|GetRequestsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|GetRequestsRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|IncludeLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|MultiRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|RequestedClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|Responsibility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|SaveRequestsRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|TeachingRequestInterface
operator|.
name|SingleRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|SelectElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SetupTeachingRequestsPage
extends|extends
name|SimpleForm
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|SECTMSG
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
init|=
literal|null
decl_stmt|;
specifier|private
name|Properties
name|iProperties
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|,
name|iFooter
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RequestPanel
argument_list|>
name|iRequests
init|=
operator|new
name|ArrayList
argument_list|<
name|RequestPanel
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SetupTeachingRequestsPage
parameter_list|()
block|{
name|addStyleName
argument_list|(
literal|"unitime-SetupTeachingRequests"
argument_list|)
expr_stmt|;
name|iOfferingId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"offeringId"
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAddTeachingRequest
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|RequestPanel
name|rp
init|=
operator|new
name|RequestPanel
argument_list|(
literal|null
argument_list|,
name|iRequests
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|iRequests
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|int
name|row
init|=
name|insertRow
argument_list|(
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|getColSpan
argument_list|()
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|requestsChanged
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|scrollToElement
argument_list|(
name|rp
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"save"
argument_list|,
name|MESSAGES
operator|.
name|buttonSaveTeachingRequests
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|SaveRequestsRpcRequest
name|request
init|=
operator|new
name|SaveRequestsRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setOfferingId
argument_list|(
name|iOfferingId
argument_list|)
expr_stmt|;
for|for
control|(
name|RequestPanel
name|rp
range|:
name|iRequests
control|)
block|{
name|Request
name|r
init|=
name|rp
operator|.
name|getRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
name|request
operator|.
name|addRequest
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitSaveTeachingRequests
argument_list|(
name|iProperties
operator|==
literal|null
condition|?
name|iOfferingId
operator|.
name|toString
argument_list|()
else|:
name|iProperties
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseNull
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedSave
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseNull
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iOfferingId
operator|+
literal|"&op=view#instructors"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"back"
argument_list|,
name|MESSAGES
operator|.
name|buttonBack
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?io="
operator|+
name|iOfferingId
operator|+
literal|"&op=view#instructors"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iFooter
operator|=
name|iHeader
operator|.
name|clonePanel
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingPage
argument_list|()
argument_list|)
expr_stmt|;
name|GetRequestsRpcRequest
name|request
init|=
operator|new
name|GetRequestsRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setOfferingId
argument_list|(
name|iOfferingId
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GetRequestsRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToInitialize
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToInitialize
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GetRequestsRpcResponse
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iProperties
operator|=
name|result
expr_stmt|;
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|result
operator|.
name|getOffering
argument_list|()
operator|.
name|getAbbv
argument_list|()
operator|+
operator|(
name|result
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" - "
operator|+
name|result
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Request
name|req
range|:
name|result
operator|.
name|getRequests
argument_list|()
control|)
block|{
name|RequestPanel
name|rp
init|=
operator|new
name|RequestPanel
argument_list|(
name|req
argument_list|,
name|iRequests
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|iRequests
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|RequestPanel
name|rp
init|=
operator|new
name|RequestPanel
argument_list|(
literal|null
argument_list|,
name|iRequests
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|iRequests
operator|.
name|add
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|rp
argument_list|)
expr_stmt|;
block|}
name|addBottomRow
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|requestsChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|requestsChanged
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iRequests
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|iRequests
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setIndex
argument_list|(
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequests
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|messageNoTeachingRequests
argument_list|(
name|iProperties
operator|==
literal|null
condition|?
name|iOfferingId
operator|.
name|toString
argument_list|()
else|:
name|iProperties
operator|.
name|getOffering
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|RequestPanel
extends|extends
name|SimpleForm
block|{
specifier|private
name|UniTimeHeaderPanel
name|iRequestHead
decl_stmt|;
specifier|private
name|Request
name|iRequest
decl_stmt|;
specifier|private
name|NumberBox
name|iNbrInstructors
decl_stmt|;
specifier|private
name|int
name|iNbrInstructorsRow
decl_stmt|;
specifier|private
name|NumberBox
name|iTeachingLoad
decl_stmt|;
specifier|private
name|CheckBox
name|iSimple
decl_stmt|;
specifier|private
name|ListBox
name|iSubpart
decl_stmt|;
specifier|private
name|int
name|iSubpartRow
decl_stmt|;
specifier|private
name|ListBox
name|iSameCouse
decl_stmt|;
specifier|private
name|ListBox
name|iSameCommon
decl_stmt|;
specifier|private
name|int
name|iSameCommonRow
decl_stmt|;
specifier|private
name|ListBox
name|iResponsibility
decl_stmt|;
specifier|private
name|int
name|iResponsibilityRow
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|Clazz
argument_list|>
name|iClasses
decl_stmt|;
specifier|private
name|int
name|iClassesRow
decl_stmt|;
specifier|private
name|CheckBox
name|iCoordinator
decl_stmt|;
specifier|private
name|int
name|iCoordinatorRow
decl_stmt|;
specifier|private
name|NumberBox
name|iPercentShare
decl_stmt|;
specifier|private
name|int
name|iPercentShareRow
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|Subpart
argument_list|>
name|iSubparts
decl_stmt|;
specifier|private
name|int
name|iSubpartsLine
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
argument_list|>
name|iAttributes
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
name|iInstructors
decl_stmt|;
name|RequestPanel
parameter_list|(
name|Request
name|request
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iRequestHead
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectTeachingRequest
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|iRequestHead
operator|.
name|addButton
argument_list|(
literal|"remove"
argument_list|,
name|MESSAGES
operator|.
name|buttonRemoveTeachingRequest
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|SetupTeachingRequestsPage
operator|.
name|this
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
comment|//getRowForWidget(RequestPanel.this);
if|if
condition|(
name|row
operator|>
literal|0
condition|)
block|{
name|SetupTeachingRequestsPage
operator|.
name|this
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|remove
argument_list|(
name|RequestPanel
operator|.
name|this
argument_list|)
expr_stmt|;
name|requestsChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addHeaderRow
argument_list|(
name|iRequestHead
argument_list|)
expr_stmt|;
name|iRequest
operator|=
name|request
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|iSimple
operator|=
operator|new
name|CheckBox
argument_list|()
expr_stmt|;
name|iSimple
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSetupTeachingRequestMulti
argument_list|()
argument_list|,
name|iSimple
argument_list|)
expr_stmt|;
name|iSimple
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|simpleChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iNbrInstructors
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iNbrInstructors
operator|.
name|setWidth
argument_list|(
literal|"20px"
argument_list|)
expr_stmt|;
name|iNbrInstructors
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iNbrInstructors
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|instanceof
name|SingleRequest
condition|)
name|iNbrInstructors
operator|.
name|setValue
argument_list|(
operator|(
operator|(
name|SingleRequest
operator|)
name|request
operator|)
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iNbrInstructors
operator|.
name|setValue
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iNbrInstructorsRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propNbrInstructors
argument_list|()
argument_list|,
name|iNbrInstructors
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iNbrInstructorsRow
argument_list|,
name|request
operator|!=
literal|null
operator|&&
name|request
operator|instanceof
name|SingleRequest
argument_list|)
expr_stmt|;
name|iTeachingLoad
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iTeachingLoad
operator|.
name|setWidth
argument_list|(
literal|"50px"
argument_list|)
expr_stmt|;
name|iTeachingLoad
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTeachingLoad
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
name|iTeachingLoad
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getTeachingLoad
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTeachingLoad
argument_list|()
argument_list|,
name|iTeachingLoad
argument_list|)
expr_stmt|;
name|iCoordinator
operator|=
operator|new
name|CheckBox
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
name|iCoordinator
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|isAssignCoordinator
argument_list|()
argument_list|)
expr_stmt|;
name|iCoordinator
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
comment|// simpleChanged();
name|changeResponsibilities
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCoordinatorRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAssignCoordinator
argument_list|()
argument_list|,
name|iCoordinator
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iCoordinatorRow
argument_list|,
name|request
operator|!=
literal|null
operator|&&
name|request
operator|instanceof
name|SingleRequest
argument_list|)
expr_stmt|;
name|iPercentShare
operator|=
operator|new
name|NumberBox
argument_list|()
expr_stmt|;
name|iPercentShare
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPercentShare
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPercentShare
operator|.
name|setMaxLength
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|iPercentShare
operator|.
name|setWidth
argument_list|(
literal|"50px"
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
name|iPercentShare
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getPercentShare
argument_list|()
argument_list|)
expr_stmt|;
name|iPercentShareRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCoordinatorPercentShare
argument_list|()
argument_list|,
name|iPercentShare
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPercentShareRow
argument_list|,
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|iCoordinatorRow
argument_list|)
operator|&&
name|iCoordinator
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iProperties
operator|.
name|getResponsibilities
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iResponsibility
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iResponsibilityRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propTeachingResponsibility
argument_list|()
argument_list|,
name|iResponsibility
argument_list|)
expr_stmt|;
name|changeResponsibilities
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|instanceof
name|MultiRequest
condition|)
block|{
name|iSubpart
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iSubpart
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|teachingRequestNoSubpart
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
name|SelectElement
name|select
init|=
name|iSubpart
operator|.
name|getElement
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|iProperties
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|iSubpart
operator|.
name|addItem
argument_list|(
name|subpart
operator|.
name|getName
argument_list|()
operator|+
operator|(
name|config
operator|.
name|hasInstructionalMethod
argument_list|()
condition|?
literal|" ("
operator|+
name|config
operator|.
name|getInstructionalMethod
argument_list|()
operator|+
literal|")"
else|:
literal|""
operator|)
argument_list|,
name|subpart
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|indent
init|=
name|config
operator|.
name|getIndent
argument_list|(
name|subpart
argument_list|)
decl_stmt|;
if|if
condition|(
name|indent
operator|>
literal|0
condition|)
name|select
operator|.
name|getOptions
argument_list|()
operator|.
name|getItem
argument_list|(
name|iSubpart
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setPadding
argument_list|(
literal|16
operator|*
name|indent
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|MultiRequest
operator|)
name|request
operator|)
operator|.
name|getClass
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iSubpart
operator|.
name|setSelectedIndex
argument_list|(
name|iSubpart
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|iSubpart
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|subpartChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSubpartRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSchedulingSubpart
argument_list|()
argument_list|,
name|iSubpart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|instanceof
name|SingleRequest
condition|)
block|{
name|SingleRequest
name|sr
init|=
operator|(
name|SingleRequest
operator|)
name|request
decl_stmt|;
if|if
condition|(
name|sr
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|P
name|instructors
init|=
operator|new
name|P
argument_list|(
literal|"instructors"
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|sr
operator|.
name|getInstructorIds
argument_list|()
control|)
block|{
name|InstructorInterface
name|instructor
init|=
name|iProperties
operator|.
name|getInstructor
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"instructor"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|instructor
operator|.
name|getFormattedName
argument_list|()
argument_list|)
expr_stmt|;
name|instructors
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAssignedInstructor
argument_list|()
argument_list|,
name|instructors
argument_list|)
expr_stmt|;
block|}
block|}
name|iClasses
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|Clazz
argument_list|>
argument_list|()
expr_stmt|;
name|iClasses
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|,
name|Unit
operator|.
name|PCT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|classesHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAssignInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPercentShare
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructorLead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCanOverlap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|classesHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCommonPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|classesHeader
argument_list|)
expr_stmt|;
name|iClassesRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propClasses
argument_list|()
argument_list|,
name|iClasses
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
operator|||
name|request
operator|instanceof
name|MultiRequest
condition|)
block|{
name|iSubparts
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|Subpart
argument_list|>
argument_list|()
expr_stmt|;
name|iSubparts
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|100
argument_list|,
name|Unit
operator|.
name|PCT
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|subpartsHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructionalType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAssignInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPercentShare
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructorLead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCanOverlap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subpartsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCommonPart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSubparts
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|subpartsHeader
argument_list|)
expr_stmt|;
name|iSubpartsLine
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propIncludeSubparts
argument_list|()
argument_list|,
name|iSubparts
argument_list|)
expr_stmt|;
block|}
name|iSameCouse
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|PreferenceInterface
name|pref
range|:
name|iProperties
operator|.
name|getPreferences
argument_list|()
control|)
block|{
name|iSameCouse
operator|.
name|addItem
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
argument_list|,
name|pref
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"R"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|iSameCouse
operator|.
name|setSelectedIndex
argument_list|(
name|iSameCouse
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|getSameCoursePreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pref
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getSameCoursePreference
argument_list|()
argument_list|)
condition|)
name|iSameCouse
operator|.
name|setSelectedIndex
argument_list|(
name|iSameCouse
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|iSameCouse
operator|.
name|setSelectedIndex
argument_list|(
name|iSameCouse
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSameCoursePreference
argument_list|()
argument_list|,
name|iSameCouse
argument_list|)
expr_stmt|;
name|iSameCommon
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
for|for
control|(
name|PreferenceInterface
name|pref
range|:
name|iProperties
operator|.
name|getPreferences
argument_list|()
control|)
block|{
name|iSameCommon
operator|.
name|addItem
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
argument_list|,
name|pref
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|iSameCommon
operator|.
name|setSelectedIndex
argument_list|(
name|iSameCommon
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|request
operator|.
name|getSameCommonPreference
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pref
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getSameCommonPreference
argument_list|()
argument_list|)
condition|)
name|iSameCommon
operator|.
name|setSelectedIndex
argument_list|(
name|iSameCommon
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|"0"
operator|.
name|equals
argument_list|(
name|pref
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
name|iSameCommon
operator|.
name|setSelectedIndex
argument_list|(
name|iSameCommon
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iSameCommonRow
operator|=
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSameCommonPreference
argument_list|()
argument_list|,
name|iSameCommon
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iProperties
operator|.
name|getAttributes
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|types
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|iProperties
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iAttributes
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
name|iAttributes
operator|.
name|put
argument_list|(
name|type
argument_list|,
operator|new
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasAttributePrefernces
argument_list|()
condition|)
block|{
for|for
control|(
name|Preference
name|p
range|:
name|request
operator|.
name|getAttributePreferences
argument_list|()
control|)
block|{
name|AttributeInterface
name|a
init|=
name|iProperties
operator|.
name|getAttribute
argument_list|(
name|p
operator|.
name|getOwnerId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
operator|&&
name|type
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
name|addAttributePreferenceLine
argument_list|(
name|type
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|addAttributePreferenceLine
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAttributeOfTypePrefs
argument_list|(
name|type
argument_list|)
argument_list|,
name|iAttributes
operator|.
name|get
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iProperties
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iInstructors
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasInstructorPrefernces
argument_list|()
condition|)
block|{
for|for
control|(
name|Preference
name|p
range|:
name|request
operator|.
name|getInstructorPreferences
argument_list|()
control|)
name|addInstructorPreferenceLine
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|addInstructorPreferenceLine
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propInstructorPrefs
argument_list|()
argument_list|,
name|iInstructors
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|iRequestHead
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|sectTeachingRequest
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addAttributePreferenceLine
parameter_list|(
specifier|final
name|String
name|type
parameter_list|,
name|Preference
name|p
parameter_list|)
block|{
specifier|final
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
name|attributes
init|=
name|iAttributes
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ListBox
name|attribute
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
name|ToolBox
operator|.
name|setMinWidth
argument_list|(
name|attribute
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
literal|"350px"
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|iProperties
operator|.
name|getAttributes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|type
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
argument_list|)
condition|)
continue|continue;
name|attribute
operator|.
name|addItem
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|,
name|a
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|attribute
operator|.
name|setSelectedIndex
argument_list|(
name|attribute
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|attribute
argument_list|)
expr_stmt|;
specifier|final
name|ListBox
name|preference
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
for|for
control|(
name|PreferenceInterface
name|x
range|:
name|iProperties
operator|.
name|getPreferences
argument_list|()
control|)
block|{
name|preference
operator|.
name|addItem
argument_list|(
name|x
operator|.
name|getName
argument_list|()
argument_list|,
name|x
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getPreferenceId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|p
operator|==
literal|null
operator|&&
name|x
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|)
condition|)
name|preference
operator|.
name|setSelectedIndex
argument_list|(
name|preference
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|Image
name|delete
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleDeleteRow
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|attributes
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
name|attributes
operator|.
name|removeRow
argument_list|(
name|attributes
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attribute
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|preference
operator|.
name|setSelectedIndex
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addRow
argument_list|(
name|p
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|attribute
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|attributes
operator|.
name|getRowForWidget
argument_list|(
name|attribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
operator|==
name|row
operator|&&
name|attribute
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addAttributePreferenceLine
argument_list|(
name|type
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addInstructorPreferenceLine
parameter_list|(
name|Preference
name|p
parameter_list|)
block|{
if|if
condition|(
name|iProperties
operator|.
name|getInstructors
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|ListBox
name|instructor
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
name|ToolBox
operator|.
name|setMinWidth
argument_list|(
name|instructor
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
literal|"350px"
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorInterface
name|a
range|:
name|iProperties
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|instructor
operator|.
name|addItem
argument_list|(
name|a
operator|.
name|getFormattedName
argument_list|()
argument_list|,
name|a
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getOwnerId
argument_list|()
operator|.
name|equals
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
name|instructor
operator|.
name|setSelectedIndex
argument_list|(
name|instructor
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
specifier|final
name|ListBox
name|preference
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
for|for
control|(
name|PreferenceInterface
name|x
range|:
name|iProperties
operator|.
name|getPreferences
argument_list|()
control|)
block|{
name|preference
operator|.
name|addItem
argument_list|(
name|x
operator|.
name|getName
argument_list|()
argument_list|,
name|x
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|!=
literal|null
operator|&&
name|p
operator|.
name|getPreferenceId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getId
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|p
operator|==
literal|null
operator|&&
name|x
operator|.
name|getCode
argument_list|()
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|)
condition|)
name|preference
operator|.
name|setSelectedIndex
argument_list|(
name|preference
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|preference
argument_list|)
expr_stmt|;
name|Image
name|delete
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleDeleteRow
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iInstructors
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
name|iInstructors
operator|.
name|removeRow
argument_list|(
name|iInstructors
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|instructor
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|preference
operator|.
name|setSelectedIndex
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
name|iInstructors
operator|.
name|addRow
argument_list|(
name|p
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|instructor
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|iInstructors
operator|.
name|getRowForWidget
argument_list|(
name|instructor
argument_list|)
decl_stmt|;
if|if
condition|(
name|iInstructors
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
operator|==
name|row
operator|&&
name|instructor
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|addInstructorPreferenceLine
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|simpleChanged
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|changeResponsibilities
parameter_list|()
block|{
name|boolean
name|coordinator
init|=
name|iCoordinator
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|iResponsibility
operator|!=
literal|null
condition|)
block|{
name|Responsibility
name|selected
init|=
operator|(
name|iRequest
operator|==
literal|null
condition|?
literal|null
else|:
name|iRequest
operator|.
name|getTeachingResponsibility
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|iResponsibility
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
name|selected
operator|=
name|iProperties
operator|.
name|getResponsibility
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iResponsibility
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iResponsibility
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iResponsibility
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|noTeachingResponsiblitySelected
argument_list|()
argument_list|,
literal|"-1"
argument_list|)
expr_stmt|;
for|for
control|(
name|Responsibility
name|resp
range|:
name|iProperties
operator|.
name|getResponsibilities
argument_list|()
control|)
block|{
if|if
condition|(
name|coordinator
operator|&&
operator|!
name|resp
operator|.
name|isCoordinator
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|coordinator
operator|&&
operator|!
name|resp
operator|.
name|isInstructor
argument_list|()
condition|)
continue|continue;
name|iResponsibility
operator|.
name|addItem
argument_list|(
name|resp
operator|.
name|getName
argument_list|()
argument_list|,
name|resp
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|selected
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|equals
argument_list|(
name|selected
argument_list|)
condition|)
name|iResponsibility
operator|.
name|setSelectedIndex
argument_list|(
name|iResponsibility
operator|.
name|getItemCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iResponsibilityRow
argument_list|,
name|iResponsibility
operator|.
name|getItemCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iPercentShare
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iPercentShareRow
argument_list|,
name|coordinator
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|simpleChanged
parameter_list|()
block|{
comment|/*if (iCoordinator.getValue()) { 				if (iSubpart != null) getRowFormatter().setVisible(iSubpartRow, false); 				getRowFormatter().setVisible(iSameCommonRow, false); 				getRowFormatter().setVisible(iClassesRow, false); 				if (iSubparts != null) getRowFormatter().setVisible(iSubpartsLine, false); 			} else*/
if|if
condition|(
operator|(
name|iSimple
operator|!=
literal|null
operator|&&
name|iSimple
operator|.
name|getValue
argument_list|()
operator|)
operator|||
operator|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|MultiRequest
operator|)
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iNbrInstructorsRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iCoordinatorRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubpart
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubparts
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartsLine
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|subpartChanged
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iCoordinatorRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iNbrInstructorsRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubpart
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubparts
operator|!=
literal|null
condition|)
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartsLine
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|iProperties
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
block|{
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
name|addClasses
argument_list|(
name|subpart
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|8
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|9
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|11
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|12
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|13
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iClassesRow
argument_list|,
name|iClasses
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasExternalId
init|=
literal|false
decl_stmt|;
name|boolean
name|hasAssignment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|iProperties
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|hasExternalId
argument_list|()
condition|)
name|hasExternalId
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasTime
argument_list|()
operator|||
name|clazz
operator|.
name|hasRoom
argument_list|()
condition|)
name|hasAssignment
operator|=
literal|true
expr_stmt|;
block|}
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|2
argument_list|,
name|hasExternalId
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|5
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|6
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|7
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|addClasses
parameter_list|(
name|Subpart
name|subpart
parameter_list|,
name|Long
name|parent
parameter_list|)
block|{
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|addClass
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
for|for
control|(
name|Subpart
name|child
range|:
name|subpart
operator|.
name|getConfig
argument_list|()
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpart
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getParentId
argument_list|()
argument_list|)
condition|)
name|addClasses
argument_list|(
name|child
argument_list|,
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addClass
parameter_list|(
name|Clazz
name|clazz
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CheckBox
name|select
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|int
name|indent
init|=
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|.
name|getConfig
argument_list|()
operator|.
name|getIndent
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
decl_stmt|;
comment|// select.getElement().getStyle().setPaddingLeft(16 * indent, Unit.PX);
name|line
operator|.
name|add
argument_list|(
name|select
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|select
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|select
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|Label
name|name
init|=
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|16
operator|*
name|indent
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasExternalId
argument_list|()
condition|?
name|clazz
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|clazz
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|hasTime
argument_list|()
condition|?
name|clazz
operator|.
name|getTime
argument_list|()
else|:
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|hasDate
argument_list|()
condition|?
name|clazz
operator|.
name|getDate
argument_list|()
else|:
name|SECTMSG
operator|.
name|noDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|hasRoom
argument_list|()
condition|?
name|clazz
operator|.
name|getRoom
argument_list|()
else|:
name|SECTMSG
operator|.
name|noRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|IncludeLine
name|include
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|SingleRequest
condition|)
block|{
name|include
operator|=
operator|(
operator|(
name|SingleRequest
operator|)
name|iRequest
operator|)
operator|.
name|getClazz
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|select
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|ass
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|ass
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isAssign
argument_list|()
else|:
literal|true
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ass
argument_list|)
expr_stmt|;
specifier|final
name|NumberBox
name|share
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|share
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|share
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|share
operator|.
name|setWidth
argument_list|(
literal|"50px"
argument_list|)
expr_stmt|;
name|share
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|getShare
argument_list|()
else|:
literal|100
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|share
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|lead
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|lead
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isLead
argument_list|()
else|:
literal|true
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|lead
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|overlap
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|overlap
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isCanOverlap
argument_list|()
else|:
literal|false
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|overlap
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|common
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|common
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isCommon
argument_list|()
else|:
literal|false
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|common
argument_list|)
expr_stmt|;
name|ass
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|share
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lead
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|overlap
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|common
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|select
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|ass
operator|.
name|setVisible
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|share
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lead
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|overlap
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|common
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ass
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|share
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lead
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"cancelled"
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|addRow
argument_list|(
name|clazz
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|subpartChanged
parameter_list|()
block|{
if|if
condition|(
name|iSubpart
operator|.
name|getSelectedIndex
argument_list|()
operator|==
literal|0
condition|)
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSameCommonRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iClassesRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartsLine
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSameCommonRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iClassesRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartsLine
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iSubparts
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Long
name|subpartId
init|=
name|Long
operator|.
name|valueOf
argument_list|(
name|iSubpart
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Config
name|config
range|:
name|iProperties
operator|.
name|getOffering
argument_list|()
operator|.
name|getConfigs
argument_list|()
control|)
for|for
control|(
name|Subpart
name|subpart
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
if|if
condition|(
name|subpartId
operator|.
name|equals
argument_list|(
name|subpart
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|hasInstructor
init|=
literal|false
decl_stmt|,
name|hasExternalId
init|=
literal|false
decl_stmt|,
name|hasAssignment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Clazz
name|clazz
range|:
name|subpart
operator|.
name|getClasses
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|hasExternalId
argument_list|()
condition|)
name|hasExternalId
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasTime
argument_list|()
operator|||
name|clazz
operator|.
name|hasRoom
argument_list|()
condition|)
name|hasAssignment
operator|=
literal|true
expr_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|NumberBox
name|ch
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setWidth
argument_list|(
literal|"20px"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|hasExternalId
argument_list|()
condition|?
name|clazz
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|clazz
operator|.
name|getEnrollment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|clazz
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|clazz
operator|.
name|getLimit
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|hasTime
argument_list|()
condition|?
name|clazz
operator|.
name|getTime
argument_list|()
else|:
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|hasDate
argument_list|()
condition|?
name|clazz
operator|.
name|getDate
argument_list|()
else|:
name|SECTMSG
operator|.
name|noDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|clazz
operator|.
name|hasRoom
argument_list|()
condition|?
name|clazz
operator|.
name|getRoom
argument_list|()
else|:
name|SECTMSG
operator|.
name|noRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RequestedClass
name|rc
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|MultiRequest
condition|)
name|rc
operator|=
operator|(
operator|(
name|MultiRequest
operator|)
name|iRequest
operator|)
operator|.
name|getClass
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|==
literal|null
condition|)
name|ch
operator|.
name|setValue
argument_list|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
if|else if
condition|(
name|rc
operator|!=
literal|null
condition|)
name|ch
operator|.
name|setValue
argument_list|(
name|rc
operator|.
name|getNbrInstructors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|null
operator|&&
name|rc
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|P
name|instructors
init|=
operator|new
name|P
argument_list|(
literal|"instructors"
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|id
range|:
name|rc
operator|.
name|getInstructorIds
argument_list|()
control|)
block|{
name|InstructorInterface
name|i
init|=
name|iProperties
operator|.
name|getInstructor
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"instructor"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|i
operator|.
name|getFormattedName
argument_list|()
argument_list|)
expr_stmt|;
name|instructors
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|hasInstructor
operator|=
literal|true
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|line
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"cancelled"
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|addRow
argument_list|(
name|clazz
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|2
argument_list|,
name|hasExternalId
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|5
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|6
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|7
argument_list|,
name|hasAssignment
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|8
argument_list|,
name|hasInstructor
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|9
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|11
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|12
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iClasses
operator|.
name|setColumnVisible
argument_list|(
literal|13
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|hasSameCommon
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Subpart
name|s
range|:
name|config
operator|.
name|getSubparts
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|CheckBox
name|select
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|select
argument_list|)
expr_stmt|;
name|IncludeLine
name|include
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|MultiRequest
condition|)
block|{
name|include
operator|=
operator|(
operator|(
name|MultiRequest
operator|)
name|iRequest
operator|)
operator|.
name|getSubpart
argument_list|(
name|s
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
condition|)
block|{
name|select
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|select
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|select
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|s
operator|.
name|getName
argument_list|()
decl_stmt|;
name|boolean
name|defaultOverlap
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
condition|)
block|{
block|}
if|else if
condition|(
name|config
operator|.
name|isParent
argument_list|(
name|s
argument_list|,
name|subpart
argument_list|)
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|subpart
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|hasSameCommon
operator|=
literal|true
expr_stmt|;
name|name
operator|=
name|MESSAGES
operator|.
name|subpartNameParent
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|config
operator|.
name|isParent
argument_list|(
name|subpart
argument_list|,
name|s
argument_list|)
condition|)
block|{
name|int
index|[]
name|minMax
init|=
name|config
operator|.
name|countChildClasses
argument_list|(
name|subpart
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|minMax
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|minMax
index|[
literal|0
index|]
operator|==
name|minMax
index|[
literal|1
index|]
condition|)
block|{
if|if
condition|(
name|minMax
index|[
literal|0
index|]
operator|==
literal|1
condition|)
name|name
operator|=
name|MESSAGES
operator|.
name|subpartNameOneChildClass
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|name
operator|=
name|MESSAGES
operator|.
name|subpartNameChildrenClases
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|minMax
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|MESSAGES
operator|.
name|subpartNameChildrenClasesRange
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|minMax
index|[
literal|0
index|]
argument_list|,
name|minMax
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|name
operator|=
name|MESSAGES
operator|.
name|subpartNameNoRelationSingleClass
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|MESSAGES
operator|.
name|subpartNameNoRelationClasses
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|defaultOverlap
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|ass
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|ass
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isAssign
argument_list|()
else|:
name|s
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
operator|||
name|config
operator|.
name|isParent
argument_list|(
name|subpart
argument_list|,
name|s
argument_list|)
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ass
argument_list|)
expr_stmt|;
specifier|final
name|NumberBox
name|share
init|=
operator|new
name|NumberBox
argument_list|()
decl_stmt|;
name|share
operator|.
name|setDecimal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|share
operator|.
name|setNegative
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|share
operator|.
name|setWidth
argument_list|(
literal|"50px"
argument_list|)
expr_stmt|;
name|share
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|getShare
argument_list|()
else|:
name|s
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
operator|||
name|config
operator|.
name|isParent
argument_list|(
name|subpart
argument_list|,
name|s
argument_list|)
condition|?
literal|100
else|:
literal|0
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|share
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|lead
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|lead
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isLead
argument_list|()
else|:
literal|true
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|lead
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|overlap
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|overlap
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isCanOverlap
argument_list|()
else|:
name|defaultOverlap
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|overlap
argument_list|)
expr_stmt|;
specifier|final
name|CheckBox
name|common
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|common
operator|.
name|setValue
argument_list|(
name|include
operator|!=
literal|null
condition|?
name|include
operator|.
name|isCommon
argument_list|()
else|:
name|s
operator|.
name|equals
argument_list|(
name|subpart
argument_list|)
operator|||
name|config
operator|.
name|isParent
argument_list|(
name|subpart
argument_list|,
name|s
argument_list|)
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|common
argument_list|)
expr_stmt|;
name|ass
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|share
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lead
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|overlap
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|common
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|select
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|ass
operator|.
name|setVisible
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|share
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lead
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|overlap
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|common
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ass
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|share
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|lead
operator|.
name|setVisible
argument_list|(
name|select
operator|.
name|getValue
argument_list|()
operator|&&
name|ass
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSubparts
operator|.
name|addRow
argument_list|(
name|s
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSubpartsLine
argument_list|,
operator|!
name|config
operator|.
name|getSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSameCommonRow
argument_list|,
name|hasSameCommon
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|Request
name|getRequest
parameter_list|()
block|{
name|Request
name|ret
init|=
literal|null
decl_stmt|;
comment|/* 			if (iCoordinator.getValue()) { 				SingleRequest r = new SingleRequest(); 				if (iRequest != null&& iRequest instanceof SingleRequest) { 					r.setInstructorIds(((SingleRequest)iRequest).getInstructorIds()); 					r.setRequestId(((SingleRequest)iRequest).getRequestId()); 				} 				ret = r; 			} else */
if|if
condition|(
operator|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|SingleRequest
operator|)
operator|||
operator|(
name|iSimple
operator|!=
literal|null
operator|&&
operator|!
name|iSimple
operator|.
name|getValue
argument_list|()
operator|)
condition|)
block|{
name|SingleRequest
name|r
init|=
operator|new
name|SingleRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|SingleRequest
condition|)
block|{
name|r
operator|.
name|setInstructorIds
argument_list|(
operator|(
operator|(
name|SingleRequest
operator|)
name|iRequest
operator|)
operator|.
name|getInstructorIds
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setRequestId
argument_list|(
operator|(
operator|(
name|SingleRequest
operator|)
name|iRequest
operator|)
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setNbrInstructors
argument_list|(
name|iNbrInstructors
operator|.
name|toInteger
argument_list|()
operator|==
literal|null
condition|?
literal|1
else|:
name|iNbrInstructors
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setAssignCoordinator
argument_list|(
name|iCoordinator
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPercentShare
argument_list|(
name|iPercentShare
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iClasses
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Clazz
name|clazz
init|=
name|iClasses
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|CheckBox
name|select
init|=
operator|(
name|CheckBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|select
operator|.
name|getValue
argument_list|()
condition|)
continue|continue;
name|CheckBox
name|assign
init|=
operator|(
name|CheckBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|9
argument_list|)
decl_stmt|;
name|NumberBox
name|share
init|=
operator|(
name|NumberBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|CheckBox
name|lead
init|=
operator|(
name|CheckBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|11
argument_list|)
decl_stmt|;
name|CheckBox
name|canOverlap
init|=
operator|(
name|CheckBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|12
argument_list|)
decl_stmt|;
name|CheckBox
name|common
init|=
operator|(
name|CheckBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|13
argument_list|)
decl_stmt|;
name|IncludeLine
name|include
init|=
operator|new
name|IncludeLine
argument_list|()
decl_stmt|;
name|include
operator|.
name|setAssign
argument_list|(
name|assign
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setCanOverlap
argument_list|(
name|canOverlap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|shr
init|=
name|share
operator|.
name|toInteger
argument_list|()
decl_stmt|;
name|include
operator|.
name|setShare
argument_list|(
name|shr
operator|==
literal|null
condition|?
literal|0
else|:
name|shr
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setOwnerId
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setLead
argument_list|(
name|lead
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setCommon
argument_list|(
name|common
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addClass
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|r
operator|.
name|isAssignCoordinator
argument_list|()
condition|)
return|return
literal|null
return|;
name|ret
operator|=
name|r
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iSubpart
operator|.
name|getSelectedIndex
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|MultiRequest
name|r
init|=
operator|new
name|MultiRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setAssignCoordinator
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|r
operator|.
name|setPercentShare
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iClasses
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Clazz
name|clazz
init|=
name|iClasses
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
continue|continue;
name|NumberBox
name|select
init|=
operator|(
name|NumberBox
operator|)
name|iClasses
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|select
operator|.
name|toInteger
argument_list|()
operator|==
literal|null
operator|||
name|select
operator|.
name|toInteger
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
name|RequestedClass
name|rc
init|=
operator|new
name|RequestedClass
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setClassId
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setNbrInstructors
argument_list|(
name|select
operator|.
name|toInteger
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|instanceof
name|MultiRequest
condition|)
block|{
name|RequestedClass
name|old
init|=
operator|(
operator|(
name|MultiRequest
operator|)
name|iRequest
operator|)
operator|.
name|getClass
argument_list|(
name|clazz
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|rc
operator|.
name|setInstructorIds
argument_list|(
name|old
operator|.
name|getInstructorIds
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|.
name|setRequestId
argument_list|(
name|old
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|addClass
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iSubparts
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Subpart
name|subpart
init|=
name|iSubparts
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|subpart
operator|==
literal|null
condition|)
continue|continue;
name|CheckBox
name|select
init|=
operator|(
name|CheckBox
operator|)
name|iSubparts
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|select
operator|.
name|getValue
argument_list|()
condition|)
continue|continue;
name|CheckBox
name|assign
init|=
operator|(
name|CheckBox
operator|)
name|iSubparts
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|NumberBox
name|share
init|=
operator|(
name|NumberBox
operator|)
name|iSubparts
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|CheckBox
name|lead
init|=
operator|(
name|CheckBox
operator|)
name|iSubparts
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|CheckBox
name|canOverlap
init|=
operator|(
name|CheckBox
operator|)
name|iSubparts
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|CheckBox
name|common
init|=
operator|(
name|CheckBox
operator|)
name|iSubparts
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|6
argument_list|)
decl_stmt|;
name|IncludeLine
name|include
init|=
operator|new
name|IncludeLine
argument_list|()
decl_stmt|;
name|include
operator|.
name|setAssign
argument_list|(
name|assign
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setCanOverlap
argument_list|(
name|canOverlap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|shr
init|=
name|share
operator|.
name|toInteger
argument_list|()
decl_stmt|;
name|include
operator|.
name|setShare
argument_list|(
name|shr
operator|==
literal|null
condition|?
literal|0
else|:
name|shr
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setOwnerId
argument_list|(
name|subpart
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setLead
argument_list|(
name|lead
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|include
operator|.
name|setCommon
argument_list|(
name|common
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|.
name|addSubpart
argument_list|(
name|include
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|.
name|getClasses
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|r
operator|.
name|getSubparts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
name|ret
operator|=
name|r
expr_stmt|;
block|}
name|Double
name|tl
init|=
name|iTeachingLoad
operator|.
name|toDouble
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setTeachingLoad
argument_list|(
name|tl
operator|==
literal|null
condition|?
literal|0f
else|:
name|tl
operator|.
name|floatValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iResponsibility
operator|!=
literal|null
operator|&&
name|iResponsibility
operator|.
name|getSelectedIndex
argument_list|()
operator|>
literal|0
condition|)
name|ret
operator|.
name|setTeachingResponsibility
argument_list|(
name|iProperties
operator|.
name|getResponsibility
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iResponsibility
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSameCoursePreference
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSameCouse
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSameCommonPreference
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|iSameCommon
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAttributes
operator|!=
literal|null
condition|)
for|for
control|(
name|UniTimeTable
argument_list|<
name|Preference
argument_list|>
name|attributes
range|:
name|iAttributes
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ListBox
name|attribute
init|=
operator|(
name|ListBox
operator|)
name|attributes
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ListBox
name|preference
init|=
operator|(
name|ListBox
operator|)
name|attributes
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
name|Preference
name|p
init|=
operator|new
name|Preference
argument_list|()
decl_stmt|;
name|p
operator|.
name|setPreferenceId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|preference
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOwnerId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|attribute
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addAttributePreference
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iInstructors
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iInstructors
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ListBox
name|instructor
init|=
operator|(
name|ListBox
operator|)
name|iInstructors
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ListBox
name|preference
init|=
operator|(
name|ListBox
operator|)
name|iInstructors
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
continue|continue;
name|Preference
name|p
init|=
operator|new
name|Preference
argument_list|()
decl_stmt|;
name|p
operator|.
name|setPreferenceId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|preference
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOwnerId
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|instructor
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addInstructorPreference
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

