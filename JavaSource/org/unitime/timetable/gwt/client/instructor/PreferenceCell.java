begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsPagePropertiesResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|PreferenceCell
extends|extends
name|P
implements|implements
name|TakesValue
argument_list|<
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
argument_list|>
block|{
specifier|protected
specifier|static
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TeachingRequestsPagePropertiesResponse
name|iProperties
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|iPreferences
init|=
literal|null
decl_stmt|;
specifier|public
name|PreferenceCell
parameter_list|(
name|TeachingRequestsPagePropertiesResponse
name|properties
parameter_list|)
block|{
name|super
argument_list|(
literal|"preferences"
argument_list|)
expr_stmt|;
name|iProperties
operator|=
name|properties
expr_stmt|;
block|}
specifier|public
name|PreferenceCell
parameter_list|(
name|TeachingRequestsPagePropertiesResponse
name|properties
parameter_list|,
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|prefs
parameter_list|)
block|{
name|this
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PreferenceCell
parameter_list|(
name|TeachingRequestsPagePropertiesResponse
name|properties
parameter_list|,
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|oldPrefs
parameter_list|,
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|newPrefs
parameter_list|)
block|{
name|this
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|oldPrefs
argument_list|,
name|newPrefs
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|prefs
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iPreferences
operator|=
name|prefs
expr_stmt|;
if|if
condition|(
name|prefs
operator|!=
literal|null
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|PreferenceInfo
argument_list|>
name|i
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|PreferenceInfo
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|P
name|prf
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|)
decl_stmt|;
name|prf
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|itemSeparator
argument_list|()
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|prf
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|prf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setValue
parameter_list|(
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|oldPrefs
parameter_list|,
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|newPrefs
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iPreferences
operator|=
name|newPrefs
expr_stmt|;
if|if
condition|(
name|oldPrefs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PreferenceInfo
name|p
range|:
name|oldPrefs
control|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|newPrefs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|PreferenceInfo
name|q
range|:
name|newPrefs
control|)
block|{
if|if
condition|(
name|p
operator|.
name|equals
argument_list|(
name|q
argument_list|)
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|getPreference
argument_list|()
operator|.
name|equals
argument_list|(
name|q
operator|.
name|getPreference
argument_list|()
argument_list|)
condition|)
block|{
name|P
name|prf
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|,
literal|"same"
argument_list|)
decl_stmt|;
name|prf
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|prf
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|prf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|cmp
init|=
operator|new
name|P
argument_list|(
literal|"compare"
argument_list|)
decl_stmt|;
name|P
name|p1
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|,
literal|"old"
argument_list|)
decl_stmt|;
name|p1
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|p1
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|p1
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cmp
operator|.
name|add
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|P
name|a
init|=
operator|new
name|P
argument_list|(
literal|"arrow"
argument_list|)
decl_stmt|;
name|a
operator|.
name|setHTML
argument_list|(
literal|"&rarr;"
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|cmp
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|P
name|p2
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|preference
operator|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|p2
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|p2
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cmp
operator|.
name|add
argument_list|(
name|p2
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|P
name|prf
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|,
literal|"old"
argument_list|)
decl_stmt|;
name|prf
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|prf
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|prf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|newPrefs
operator|!=
literal|null
condition|)
for|for
control|(
name|PreferenceInfo
name|p
range|:
name|newPrefs
control|)
block|{
if|if
condition|(
name|oldPrefs
operator|!=
literal|null
operator|&&
name|oldPrefs
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
continue|continue;
name|P
name|prf
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|,
literal|"new"
argument_list|)
decl_stmt|;
name|prf
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|prf
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|prf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|getValue
parameter_list|()
block|{
return|return
name|iPreferences
return|;
block|}
block|}
end_class

end_unit

