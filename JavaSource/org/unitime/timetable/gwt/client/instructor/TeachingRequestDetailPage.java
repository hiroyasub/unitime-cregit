begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|GwtHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AssignmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|ComputeSuggestionsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorAssignmentRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SuggestionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingAssignmentsDetailRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestDetailRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsPagePropertiesResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|FontStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TeachingRequestDetailPage
extends|extends
name|UniTimeDialogBox
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|SECTMSG
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|NumberFormat
name|sTeachingLoadFormat
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|NumberFormat
name|sSuggestionScoreFormat
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|suggestionScoreFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TeachingRequestsPagePropertiesResponse
name|iProperties
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|ScrollPanel
name|iScroll
decl_stmt|;
specifier|private
name|TeachingRequestDetails
name|iRequestDetails
init|=
literal|null
decl_stmt|;
specifier|private
name|InstructorDetails
name|iInstructorDetails
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iDetailsRow
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iAssignmentHeader
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|AssignmentInfo
argument_list|>
name|iAssignmentTable
decl_stmt|;
specifier|private
name|Label
name|iAssignmentScore
decl_stmt|;
specifier|private
name|ObjectivesCell
name|iAssignmentObjectives
decl_stmt|;
specifier|private
name|int
name|iAssignmentRow
decl_stmt|;
specifier|private
name|int
name|iAssignmentScoreRow
decl_stmt|,
name|iAssignmentObjectivesRow
decl_stmt|;
specifier|private
name|CheckBox
name|iIgnoreConflicts
decl_stmt|;
specifier|private
name|int
name|iIgnoreConflictsRow
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iDomainHeader
decl_stmt|;
specifier|private
name|int
name|iDomainRow
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|SuggestionInfo
argument_list|>
name|iDomainTable
decl_stmt|;
specifier|private
name|int
name|iSuggestionsRow
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iSuggestionsHeader
decl_stmt|;
specifier|private
name|TeachingRequestInfo
name|iRequest
decl_stmt|;
specifier|private
name|InstructorInfo
name|iInstructor
decl_stmt|;
specifier|private
name|ComputeSuggestionsRequest
name|iSuggestionsRequest
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|SuggestionInfo
argument_list|>
name|iSuggestionsTable
decl_stmt|;
specifier|public
name|TeachingRequestDetailPage
parameter_list|(
name|TeachingRequestsPagePropertiesResponse
name|properties
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-TeachingRequestDetail"
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addStyleName
argument_list|(
literal|"detail"
argument_list|)
expr_stmt|;
name|iScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|iScroll
operator|.
name|setStyleName
argument_list|(
literal|"scroll"
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iScroll
argument_list|)
expr_stmt|;
name|iProperties
operator|=
name|properties
expr_stmt|;
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setupDetails
argument_list|()
expr_stmt|;
name|setupSelectedAssignments
argument_list|()
expr_stmt|;
name|setupDomain
argument_list|()
expr_stmt|;
name|setupSuggestions
argument_list|()
expr_stmt|;
name|UniTimeHeaderPanel
name|footer
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|footer
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|footer
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onAssignmentChanged
parameter_list|(
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|assignments
parameter_list|)
block|{
block|}
specifier|public
name|void
name|showRequestDetail
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iAssignmentTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadTeachingRequestDetail
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setMaxHeight
argument_list|(
name|iScroll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingRequestDetailRequest
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadTeachingRequestDetail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TeachingRequestInfo
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showInstructorDetail
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iAssignmentTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadTeachingRequestDetail
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setMaxHeight
argument_list|(
name|iScroll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingAssignmentsDetailRequest
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadTeachingRequestDetail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|InstructorInfo
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|populate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|GwtHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|computeSuggestions
parameter_list|(
specifier|final
name|Integer
name|scrollToRow
parameter_list|)
block|{
comment|// if (!iProperties.isHasSolver()) return;
name|ComputeSuggestionsRequest
name|request
init|=
operator|new
name|ComputeSuggestionsRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|iAssignmentTable
operator|.
name|getData
argument_list|()
control|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|request
operator|.
name|addAssignment
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
block|}
name|computeSuggestions
argument_list|(
name|request
argument_list|,
name|scrollToRow
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|scrollToRow
parameter_list|(
name|Integer
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|!=
literal|null
condition|)
block|{
name|Element
name|scroll
init|=
name|iScroll
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Element
name|item
init|=
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|int
name|realOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|item
operator|!=
literal|null
operator|&&
operator|!
name|item
operator|.
name|equals
argument_list|(
name|scroll
argument_list|)
condition|)
block|{
name|realOffset
operator|+=
name|item
operator|.
name|getOffsetTop
argument_list|()
expr_stmt|;
name|item
operator|=
name|item
operator|.
name|getOffsetParent
argument_list|()
expr_stmt|;
block|}
name|scroll
operator|.
name|setScrollTop
argument_list|(
name|realOffset
operator|-
name|scroll
operator|.
name|getOffsetHeight
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|computeSuggestions
parameter_list|(
specifier|final
name|ComputeSuggestionsRequest
name|request
parameter_list|,
specifier|final
name|Integer
name|scrollToRow
parameter_list|)
block|{
comment|// if (!iProperties.isHasSolver()) return;
name|iSuggestionsRequest
operator|=
name|request
expr_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
block|{
name|iSuggestionsRequest
operator|.
name|setSelectedRequestId
argument_list|(
name|iRequest
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggestionsRequest
operator|.
name|setSelectedIndex
argument_list|(
name|iRequestDetails
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSuggestionsRequest
operator|.
name|setSelectedInstructorId
argument_list|(
name|iInstructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|index
init|=
name|iInstructorDetails
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
operator|&&
name|index
operator|<
name|iInstructor
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|iSuggestionsRequest
operator|.
name|setSelectedRequestId
argument_list|(
name|iInstructor
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iProperties
operator|.
name|isHasSolver
argument_list|()
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isComputeSuggestions
argument_list|()
condition|)
name|showSuggestionsLoading
argument_list|()
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isComputeDomain
argument_list|()
condition|)
name|showDomainLoading
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|showDomainLoading
argument_list|()
expr_stmt|;
name|hideSuggestions
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|isComputeDomain
argument_list|()
operator|&&
name|request
operator|.
name|isComputeSuggestions
argument_list|()
condition|)
name|showAssignmentLoading
argument_list|()
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|iSuggestionsRequest
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SuggestionsResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iSuggestionsHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToComputeSuggestions
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SuggestionsResponse
name|result
parameter_list|)
block|{
name|showAssignment
argument_list|(
name|result
operator|.
name|getCurrentAssignment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isComputeSuggestions
argument_list|()
condition|)
name|showSuggestions
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|isComputeDomain
argument_list|()
condition|)
block|{
name|showDomain
argument_list|(
name|result
operator|.
name|getDomainValues
argument_list|()
argument_list|,
name|result
operator|.
name|getDomainSize
argument_list|()
argument_list|)
expr_stmt|;
name|iDomainHeader
operator|.
name|setEnabled
argument_list|(
literal|"more"
argument_list|,
name|result
operator|.
name|hasDomainValues
argument_list|()
operator|&&
name|result
operator|.
name|getDomainValues
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|result
operator|.
name|getDomainSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|center
argument_list|()
expr_stmt|;
name|scrollToRow
argument_list|(
name|scrollToRow
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hideSuggestions
parameter_list|()
block|{
name|iSuggestionsTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSuggestionsRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSuggestionsRow
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|showSuggestionsLoading
parameter_list|()
block|{
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSuggestionsRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iSuggestionsRow
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|setEnabled
argument_list|(
literal|"longer"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|setEnabled
argument_list|(
literal|"deeper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|showSuggestions
parameter_list|(
name|SuggestionsResponse
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iProperties
operator|.
name|isHasSolver
argument_list|()
condition|)
block|{
name|hideSuggestions
argument_list|()
expr_stmt|;
return|return;
block|}
name|iSuggestionsHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iSuggestionsTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasSuggestions
argument_list|()
condition|)
block|{
for|for
control|(
name|SuggestionInfo
name|suggestion
range|:
name|result
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|Label
name|score
init|=
operator|new
name|Label
argument_list|(
name|sSuggestionScoreFormat
operator|.
name|format
argument_list|(
name|suggestion
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getValue
argument_list|()
operator|>
literal|0
condition|)
name|score
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getValue
argument_list|()
operator|<
literal|0
condition|)
name|score
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|score
argument_list|)
expr_stmt|;
name|P
name|courses
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|P
name|sections
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|P
name|extIdOld
init|=
operator|new
name|P
argument_list|(
literal|"initial"
argument_list|)
decl_stmt|;
name|P
name|extIdArrows
init|=
operator|new
name|P
argument_list|(
literal|"arrow"
argument_list|)
decl_stmt|;
name|P
name|extIdNew
init|=
operator|new
name|P
argument_list|(
literal|"current"
argument_list|)
decl_stmt|;
name|P
name|nameOld
init|=
operator|new
name|P
argument_list|(
literal|"initial"
argument_list|)
decl_stmt|;
name|P
name|nameArrows
init|=
operator|new
name|P
argument_list|(
literal|"arrow"
argument_list|)
decl_stmt|;
name|P
name|nameNew
init|=
operator|new
name|P
argument_list|(
literal|"current"
argument_list|)
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|suggestion
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|P
name|course
init|=
operator|new
name|P
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
name|course
operator|.
name|setText
argument_list|(
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|P
name|section
init|=
operator|new
name|P
argument_list|(
literal|"sections"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SectionInfo
argument_list|>
name|i
init|=
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SectionInfo
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"section"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|p
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|section
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|sections
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|InstructorInfo
name|initial
init|=
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|assignment
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorInfo
name|current
init|=
name|assignment
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
name|extIdOld
operator|.
name|add
argument_list|(
operator|new
name|InstructorExternalIdCell
argument_list|(
name|iProperties
argument_list|,
name|initial
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|extIdArrow
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|extIdArrow
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|assignmentArrow
argument_list|()
argument_list|)
expr_stmt|;
name|extIdArrows
operator|.
name|add
argument_list|(
name|extIdArrow
argument_list|)
expr_stmt|;
name|extIdNew
operator|.
name|add
argument_list|(
operator|new
name|InstructorExternalIdCell
argument_list|(
name|iProperties
argument_list|,
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|nameOld
operator|.
name|add
argument_list|(
operator|new
name|InstructorNameCell
argument_list|(
name|iProperties
argument_list|,
name|initial
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|nameArrow
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|nameArrow
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|assignmentArrow
argument_list|()
argument_list|)
expr_stmt|;
name|nameArrows
operator|.
name|add
argument_list|(
name|nameArrow
argument_list|)
expr_stmt|;
name|nameNew
operator|.
name|add
argument_list|(
operator|new
name|InstructorNameCell
argument_list|(
name|iProperties
argument_list|,
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|courses
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|sections
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|extIdOld
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|extIdArrows
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|extIdNew
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|nameOld
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|nameArrows
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|nameNew
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|ObjectivesCell
argument_list|(
name|iProperties
argument_list|,
name|suggestion
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
name|suggestion
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
operator|<
name|result
operator|.
name|getNrSolutions
argument_list|()
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|isTimeoutReached
argument_list|()
condition|)
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|suggestionsNoteTimeoutNResults
argument_list|(
name|iSuggestionsRequest
operator|.
name|getTimeout
argument_list|()
operator|/
literal|1000
argument_list|,
name|result
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|,
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|,
name|result
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|getNrSolutions
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|suggestionsNoteNoTimeoutNResults
argument_list|(
name|result
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|,
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|,
name|result
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|result
operator|.
name|getNrSolutions
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|isTimeoutReached
argument_list|()
condition|)
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|suggestionsNoteTimeoutAllResults
argument_list|(
name|iSuggestionsRequest
operator|.
name|getTimeout
argument_list|()
operator|/
literal|1000
argument_list|,
name|result
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|,
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|,
name|result
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|suggestionsNoteNoTimeoutAllResults
argument_list|(
name|result
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|,
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|,
name|result
operator|.
name|getSuggestions
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|result
operator|.
name|isTimeoutReached
argument_list|()
condition|)
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|suggestionsNoteTimeoutNoResults
argument_list|(
name|iSuggestionsRequest
operator|.
name|getTimeout
argument_list|()
operator|/
literal|1000
argument_list|,
name|result
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|,
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|suggestionsNoteNoTimeoutNoResults
argument_list|(
name|result
operator|.
name|getNrCombinationsConsidered
argument_list|()
argument_list|,
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iSuggestionsTable
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|setEnabled
argument_list|(
literal|"longer"
argument_list|,
name|result
operator|.
name|isTimeoutReached
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|setEnabled
argument_list|(
literal|"deeper"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|showAssignmentLoading
parameter_list|()
block|{
if|if
condition|(
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|iAssignmentHeader
operator|.
name|setEnabled
argument_list|(
literal|"assign"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iAssignmentHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|showAssignment
parameter_list|(
name|SuggestionInfo
name|suggestion
parameter_list|)
block|{
name|iAssignmentHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iAssignmentTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|AssignmentInfo
name|assignment
range|:
name|suggestion
operator|.
name|getAssignments
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|buttons
init|=
operator|new
name|P
argument_list|(
literal|"buttons"
argument_list|)
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|P
name|course
init|=
operator|new
name|P
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
name|course
operator|.
name|setText
argument_list|(
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|P
name|section
init|=
operator|new
name|P
argument_list|(
literal|"sections"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SectionInfo
argument_list|>
name|i
init|=
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SectionInfo
name|s
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"section"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|p
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|section
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|InstructorInfo
name|initial
init|=
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|assignment
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
name|InstructorInfo
name|current
init|=
name|assignment
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|initial
operator|==
literal|null
operator|&&
name|current
operator|==
literal|null
operator|)
operator|||
operator|(
name|initial
operator|!=
literal|null
operator|&&
name|initial
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|)
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|P
name|extIdOld
init|=
operator|new
name|InstructorExternalIdCell
argument_list|(
name|iProperties
argument_list|,
name|initial
argument_list|)
decl_stmt|;
name|extIdOld
operator|.
name|addStyleName
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|extIdOld
argument_list|)
expr_stmt|;
name|P
name|extIdArrow
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|extIdArrow
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|assignmentArrow
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|extIdArrow
argument_list|)
expr_stmt|;
block|}
name|InstructorExternalIdCell
name|extIdNew
init|=
operator|new
name|InstructorExternalIdCell
argument_list|(
name|iProperties
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|extIdNew
operator|.
name|addStyleName
argument_list|(
literal|"current"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|extIdNew
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|initial
operator|==
literal|null
operator|&&
name|current
operator|==
literal|null
operator|)
operator|||
operator|(
name|initial
operator|!=
literal|null
operator|&&
name|initial
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|)
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|InstructorNameCell
name|nameOld
init|=
operator|new
name|InstructorNameCell
argument_list|(
name|iProperties
argument_list|,
name|initial
argument_list|)
decl_stmt|;
name|nameOld
operator|.
name|addStyleName
argument_list|(
literal|"initial"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|nameOld
argument_list|)
expr_stmt|;
name|P
name|nameArrow
init|=
operator|new
name|P
argument_list|()
decl_stmt|;
name|nameArrow
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|assignmentArrow
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|nameArrow
argument_list|)
expr_stmt|;
block|}
name|InstructorNameCell
name|nameNew
init|=
operator|new
name|InstructorNameCell
argument_list|(
name|iProperties
argument_list|,
name|current
argument_list|)
decl_stmt|;
name|nameNew
operator|.
name|addStyleName
argument_list|(
literal|"current"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|nameNew
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|AttributesCell
argument_list|(
name|current
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|current
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|TimePreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|current
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|current
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|initial
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|AttributesCell
argument_list|(
name|initial
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|initial
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|TimePreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|initial
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|initial
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|P
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ObjectivesCell
name|obj
init|=
operator|new
name|ObjectivesCell
argument_list|(
name|iProperties
argument_list|,
name|initial
operator|==
literal|null
condition|?
literal|null
else|:
name|initial
operator|.
name|getValues
argument_list|()
argument_list|,
name|current
operator|==
literal|null
condition|?
literal|null
else|:
name|current
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignment
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
name|P
name|confs
init|=
operator|new
name|P
argument_list|(
literal|"conflicts"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|assignment
operator|.
name|getConflicts
argument_list|()
control|)
block|{
name|P
name|conf
init|=
operator|new
name|P
argument_list|(
literal|"conflict"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|confs
operator|.
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|obj
operator|.
name|add
argument_list|(
name|confs
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|Image
name|delete
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|delete
argument_list|()
argument_list|)
decl_stmt|;
name|delete
operator|.
name|addStyleName
argument_list|(
literal|"delete"
argument_list|)
expr_stmt|;
name|delete
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|titleDeleteRow
argument_list|()
argument_list|)
expr_stmt|;
name|delete
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|ComputeSuggestionsRequest
name|request
init|=
operator|new
name|ComputeSuggestionsRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|a
range|:
name|iAssignmentTable
operator|.
name|getData
argument_list|()
control|)
block|{
if|if
condition|(
name|a
operator|.
name|getInstructor
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|a
operator|.
name|equals
argument_list|(
name|assignment
argument_list|)
condition|)
block|{
name|request
operator|.
name|addAssignment
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|computeSuggestions
argument_list|(
name|request
argument_list|,
name|iAssignmentRow
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|delete
argument_list|)
expr_stmt|;
block|}
name|iAssignmentTable
operator|.
name|addRow
argument_list|(
name|assignment
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|iAssignmentScore
operator|.
name|setText
argument_list|(
name|sSuggestionScoreFormat
operator|.
name|format
argument_list|(
name|suggestion
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getValue
argument_list|()
operator|>
literal|0
condition|)
name|iAssignmentScore
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestion
operator|.
name|getValue
argument_list|()
operator|<
literal|0
condition|)
name|iAssignmentScore
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
name|iAssignmentObjectives
operator|.
name|setValue
argument_list|(
name|suggestion
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentRow
operator|+
literal|1
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentScoreRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|suggestion
operator|!=
literal|null
operator|&&
name|suggestion
operator|.
name|getValue
argument_list|()
operator|!=
literal|0.0
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentObjectivesRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|suggestion
operator|!=
literal|null
operator|&&
name|suggestion
operator|.
name|hasValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iIgnoreConflicts
operator|!=
literal|null
condition|)
block|{
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iIgnoreConflictsRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iIgnoreConflicts
operator|.
name|getValue
argument_list|()
condition|)
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AssignmentInfo
name|ai
init|=
name|iAssignmentTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
operator|&&
name|ai
operator|.
name|getInstructor
argument_list|()
operator|==
literal|null
condition|)
name|iAssignmentTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|iAssignmentHeader
operator|.
name|setEnabled
argument_list|(
literal|"assign"
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|hideDomain
parameter_list|()
block|{
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDomainRow
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDomainRow
operator|+
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|showDomainLoading
parameter_list|()
block|{
name|iDomainHeader
operator|.
name|setEnabled
argument_list|(
literal|"more"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDomainRow
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDomainRow
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
block|{
name|iDomainHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|headerAvailableInstructors
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iDomainHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|headerAvailableAssignments
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iDomainHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iDomainTable
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|showDomain
parameter_list|(
name|List
argument_list|<
name|SuggestionInfo
argument_list|>
name|suggestions
parameter_list|,
name|int
name|domainSize
parameter_list|)
block|{
name|iDomainTable
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDomainHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iDomainTable
operator|.
name|clearTable
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
block|{
name|iDomainHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|headerAvailableInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|domainHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAssignedLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictingRequests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDomainTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|domainHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestions
operator|!=
literal|null
operator|&&
name|iRequestDetails
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|iRequestDetails
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|SuggestionInfo
name|suggestion
range|:
name|suggestions
control|)
block|{
name|InstructorInfo
name|instructor
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<
name|AssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|suggestion
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|assignment
operator|.
name|getRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|&&
name|assignment
operator|.
name|getIndex
argument_list|()
operator|==
name|index
condition|)
name|instructor
operator|=
name|assignment
operator|.
name|getInstructor
argument_list|()
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|==
literal|null
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|Label
name|extId
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|extId
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|extId
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|Label
name|name
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
operator|+
literal|" / "
operator|+
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|AttributesCell
argument_list|(
name|instructor
operator|.
name|getAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|TimePreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|PreferenceCell
argument_list|(
name|iProperties
argument_list|,
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|RequestConflicts
argument_list|(
name|conflicts
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|ObjectivesCell
argument_list|(
name|iProperties
argument_list|,
name|suggestion
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDomainTable
operator|.
name|addRow
argument_list|(
name|suggestion
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestions
operator|.
name|size
argument_list|()
operator|<
name|domainSize
condition|)
block|{
name|iDomainTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|11
argument_list|,
name|MESSAGES
operator|.
name|domainNinstructors
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
argument_list|,
name|domainSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|iDomainHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|headerAvailableAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|domainHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTeachingLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictingRequests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDomainTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|domainHeader
argument_list|)
expr_stmt|;
if|if
condition|(
name|suggestions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SuggestionInfo
name|suggestion
range|:
name|suggestions
control|)
block|{
name|TeachingRequestInfo
name|request
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|conflicts
init|=
operator|new
name|ArrayList
argument_list|<
name|AssignmentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|suggestion
operator|.
name|getAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|iInstructor
operator|.
name|equals
argument_list|(
name|assignment
operator|.
name|getInstructor
argument_list|()
argument_list|)
condition|)
name|request
operator|=
name|assignment
operator|.
name|getRequest
argument_list|()
expr_stmt|;
if|if
condition|(
name|assignment
operator|.
name|getInstructor
argument_list|()
operator|==
literal|null
condition|)
name|conflicts
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|==
literal|null
condition|)
continue|continue;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|course
init|=
operator|new
name|P
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
name|course
operator|.
name|setText
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|P
name|section
init|=
operator|new
name|P
argument_list|(
literal|"sections"
argument_list|)
decl_stmt|,
name|time
init|=
operator|new
name|P
argument_list|(
literal|"times"
argument_list|)
decl_stmt|,
name|date
init|=
operator|new
name|P
argument_list|(
literal|"dates"
argument_list|)
decl_stmt|,
name|room
init|=
operator|new
name|P
argument_list|(
literal|"rooms"
argument_list|)
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"section"
argument_list|)
decl_stmt|;
name|p
operator|.
name|setText
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|p
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|section
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|P
name|t
init|=
operator|new
name|P
argument_list|(
literal|"time"
argument_list|)
decl_stmt|;
name|t
operator|.
name|setHTML
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|t
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|time
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|P
name|d
init|=
operator|new
name|P
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|d
operator|.
name|setHTML
argument_list|(
name|s
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|s
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|d
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|date
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|P
name|r
init|=
operator|new
name|P
argument_list|(
literal|"room"
argument_list|)
decl_stmt|;
name|r
operator|.
name|setHTML
argument_list|(
name|s
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|s
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|r
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|room
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
name|section
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|room
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getLoad
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|InstructorConflicts
argument_list|(
name|conflicts
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|ObjectivesCell
argument_list|(
name|iProperties
argument_list|,
name|suggestion
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iDomainTable
operator|.
name|addRow
argument_list|(
name|suggestion
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suggestions
operator|.
name|size
argument_list|()
operator|<
name|domainSize
condition|)
block|{
name|iDomainTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|Note
argument_list|(
literal|10
argument_list|,
name|MESSAGES
operator|.
name|domainNassignments
argument_list|(
name|suggestions
operator|.
name|size
argument_list|()
argument_list|,
name|domainSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDomainRow
argument_list|,
name|iDomainTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iDomainRow
operator|+
literal|1
argument_list|,
name|iDomainTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|populate
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|,
name|Integer
name|index
parameter_list|,
name|InstructorInfo
name|instructor
parameter_list|)
block|{
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iInstructor
operator|=
literal|null
expr_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|iDetailsRow
argument_list|,
literal|0
argument_list|,
name|iRequestDetails
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|sections
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|s
operator|.
name|isCommon
argument_list|()
condition|)
name|sections
operator|.
name|add
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogTeachingRequestDetail
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|ToolBox
operator|.
name|toString
argument_list|(
name|sections
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iRequestDetails
operator|.
name|setRequest
argument_list|(
name|request
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iRequest
operator|=
literal|null
expr_stmt|;
name|iInstructor
operator|=
name|instructor
expr_stmt|;
name|iForm
operator|.
name|setWidget
argument_list|(
name|iDetailsRow
argument_list|,
literal|0
argument_list|,
name|iInstructorDetails
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogDetailsOf
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iInstructorDetails
operator|.
name|setInstructor
argument_list|(
name|instructor
argument_list|)
expr_stmt|;
block|}
name|iAssignmentHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentRow
operator|+
literal|1
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentScoreRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|iAssignmentScore
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|sSuggestionScoreFormat
operator|.
name|parse
argument_list|(
name|iAssignmentScore
operator|.
name|getText
argument_list|()
argument_list|)
operator|!=
literal|0.0
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iAssignmentObjectivesRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
name|iAssignmentObjectives
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iAssignmentObjectives
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iIgnoreConflicts
operator|!=
literal|null
condition|)
name|iForm
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|iIgnoreConflictsRow
argument_list|,
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|hideDomain
argument_list|()
expr_stmt|;
name|iSuggestionsRequest
operator|=
literal|null
expr_stmt|;
name|hideDomain
argument_list|()
expr_stmt|;
name|hideSuggestions
argument_list|()
expr_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
operator|&&
name|iRequestDetails
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
name|computeSuggestions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iInstructor
operator|!=
literal|null
condition|)
name|computeSuggestions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|RequestConflicts
extends|extends
name|P
block|{
specifier|public
name|RequestConflicts
parameter_list|(
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|conflicts
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|super
argument_list|(
literal|"conflicts"
argument_list|)
expr_stmt|;
for|for
control|(
name|AssignmentInfo
name|conflict
range|:
name|conflicts
control|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SectionInfo
name|section
range|:
name|conflict
operator|.
name|getRequest
argument_list|()
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|conf
init|=
operator|new
name|P
argument_list|(
literal|"conflict"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|conf
operator|.
name|setText
argument_list|(
name|conflict
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|conf
operator|.
name|setHTML
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|conf
operator|.
name|setText
argument_list|(
name|section
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|section
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|section
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|conf
operator|.
name|setHTML
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|conf
operator|.
name|setHTML
argument_list|(
name|section
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|section
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|conf
operator|.
name|setHTML
argument_list|(
name|section
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|section
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
if|if
condition|(
name|idx
operator|==
literal|0
operator|&&
name|conflict
operator|.
name|hasConflicts
argument_list|()
condition|)
name|conf
operator|.
name|setText
argument_list|(
name|conflict
operator|.
name|getConflicts
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|conf
operator|.
name|setHTML
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|section
operator|.
name|isCommon
argument_list|()
condition|)
name|conf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setFontStyle
argument_list|(
name|FontStyle
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
class|class
name|InstructorConflicts
extends|extends
name|P
block|{
specifier|public
name|InstructorConflicts
parameter_list|(
name|List
argument_list|<
name|AssignmentInfo
argument_list|>
name|conflicts
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|super
argument_list|(
literal|"conflicts"
argument_list|)
expr_stmt|;
for|for
control|(
name|AssignmentInfo
name|conflict
range|:
name|conflicts
control|)
block|{
name|P
name|conf
init|=
operator|new
name|P
argument_list|(
literal|"conflict"
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SectionInfo
argument_list|>
name|i
init|=
name|conflict
operator|.
name|getRequest
argument_list|()
operator|.
name|getSections
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SectionInfo
name|section
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|P
name|sct
init|=
operator|new
name|P
argument_list|(
literal|"section"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|sct
operator|.
name|setText
argument_list|(
name|conflict
operator|.
name|getRequest
argument_list|()
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|sct
operator|.
name|setText
argument_list|(
name|section
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|section
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|section
operator|.
name|getExternalId
argument_list|()
operator|)
operator|+
operator|(
name|i
operator|.
name|hasNext
argument_list|()
condition|?
literal|","
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
block|{
name|InstructorInfo
name|instructor
init|=
name|conflict
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|conflict
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
name|sct
operator|.
name|setText
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|section
operator|.
name|isCommon
argument_list|()
condition|)
name|sct
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setFontStyle
argument_list|(
name|FontStyle
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|conf
operator|.
name|add
argument_list|(
name|sct
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|Note
extends|extends
name|P
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
name|int
name|iColSpan
decl_stmt|;
name|Note
parameter_list|(
name|int
name|colspan
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
name|setText
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
block|}
specifier|protected
name|void
name|setupDetails
parameter_list|()
block|{
name|iRequestDetails
operator|=
operator|new
name|TeachingRequestDetails
argument_list|(
name|iProperties
argument_list|)
expr_stmt|;
name|iDetailsRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|iRequestDetails
argument_list|)
expr_stmt|;
name|iInstructorDetails
operator|=
operator|new
name|InstructorDetails
argument_list|(
name|iProperties
argument_list|)
expr_stmt|;
name|iRequestDetails
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iSuggestionsRequest
operator|!=
literal|null
operator|&&
name|iRequest
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSuggestionsRequest
operator|.
name|getSelectedRequestId
argument_list|()
argument_list|)
operator|&&
name|event
operator|.
name|getValue
argument_list|()
operator|==
name|iSuggestionsRequest
operator|.
name|getSelectedIndex
argument_list|()
condition|)
block|{
name|InstructorInfo
name|instructor
init|=
name|iRequest
operator|.
name|getInstructor
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingAssignmentsDetailRequest
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|computeSuggestions
argument_list|(
name|iAssignmentRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|InstructorInfo
name|result
parameter_list|)
block|{
name|populate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|computeSuggestions
argument_list|(
name|iAssignmentRow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iInstructorDetails
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getValue
argument_list|()
operator|<
name|iInstructor
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|TeachingRequestInfo
name|req
init|=
name|iInstructor
operator|.
name|getAssignedRequests
argument_list|()
operator|.
name|get
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSuggestionsRequest
operator|!=
literal|null
operator|&&
name|iInstructor
operator|.
name|getInstructorId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSuggestionsRequest
operator|.
name|getSelectedInstructorId
argument_list|()
argument_list|)
operator|&&
name|req
operator|.
name|getRequestId
argument_list|()
operator|.
name|equals
argument_list|(
name|iSuggestionsRequest
operator|.
name|getSelectedRequestId
argument_list|()
argument_list|)
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingRequestDetailRequest
argument_list|(
name|req
operator|.
name|getRequestId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|computeSuggestions
argument_list|(
name|iAssignmentRow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TeachingRequestInfo
name|result
parameter_list|)
block|{
name|InstructorInfo
name|instructor
init|=
name|result
operator|.
name|getInstructor
argument_list|(
name|iInstructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
decl_stmt|;
name|populate
argument_list|(
name|result
argument_list|,
name|instructor
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Integer
argument_list|(
name|instructor
operator|.
name|getAssignmentIndex
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
name|computeSuggestions
argument_list|(
name|iAssignmentRow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupSelectedAssignments
parameter_list|()
block|{
name|iAssignmentHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerSelectedAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|iAssignmentRow
operator|=
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iAssignmentHeader
argument_list|)
expr_stmt|;
name|iAssignmentTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|AssignmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iAssignmentTable
operator|.
name|addStyleName
argument_list|(
literal|"selected"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|asgHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|asgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iAssignmentTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|asgHeader
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iAssignmentTable
argument_list|)
expr_stmt|;
name|iAssignmentHeader
operator|.
name|addButton
argument_list|(
literal|"assign"
argument_list|,
name|MESSAGES
operator|.
name|buttonAssign
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|iProperties
operator|.
name|isHasSolver
argument_list|()
operator|&&
operator|!
name|Window
operator|.
name|confirm
argument_list|(
name|MESSAGES
operator|.
name|confirmInstructorAssignmentChangesNoSolver
argument_list|()
argument_list|)
condition|)
return|return;
name|iAssignmentHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iAssignmentHeader
operator|.
name|setEnabled
argument_list|(
literal|"assign"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|InstructorAssignmentRequest
name|request
init|=
operator|new
name|InstructorAssignmentRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|AssignmentInfo
name|assignment
range|:
name|iAssignmentTable
operator|.
name|getData
argument_list|()
control|)
name|request
operator|.
name|addAssignment
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
if|if
condition|(
name|iIgnoreConflicts
operator|!=
literal|null
condition|)
name|request
operator|.
name|setIgnoreConflicts
argument_list|(
name|iIgnoreConflicts
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseNull
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iAssignmentHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseNull
name|result
parameter_list|)
block|{
name|iAssignmentHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|hide
argument_list|()
expr_stmt|;
name|onAssignmentChanged
argument_list|(
name|request
operator|.
name|getAssignments
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iAssignmentHeader
operator|.
name|setEnabled
argument_list|(
literal|"assign"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iAssignmentScore
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iAssignmentScoreRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSuggestionScore
argument_list|()
argument_list|,
name|iAssignmentScore
argument_list|)
expr_stmt|;
name|iAssignmentObjectives
operator|=
operator|new
name|ObjectivesCell
argument_list|(
name|iProperties
argument_list|)
expr_stmt|;
name|iAssignmentObjectivesRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSuggestionObjectives
argument_list|()
argument_list|,
name|iAssignmentObjectives
argument_list|)
expr_stmt|;
name|iAssignmentTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|AssignmentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
specifier|final
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|AssignmentInfo
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|TeachingRequestInfo
name|request
init|=
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|Integer
name|index
init|=
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
decl_stmt|;
name|InstructorInfo
name|instructor
init|=
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getInstructor
argument_list|()
decl_stmt|;
if|if
condition|(
name|instructor
operator|==
literal|null
condition|)
name|instructor
operator|=
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
operator|.
name|getInstructor
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|equals
argument_list|(
name|iRequest
argument_list|)
operator|&&
name|index
operator|.
name|equals
argument_list|(
name|iRequestDetails
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|instructor
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingAssignmentsDetailRequest
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|populate
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|InstructorInfo
name|result
parameter_list|)
block|{
name|populate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populate
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|instructor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|instructor
operator|.
name|equals
argument_list|(
name|iInstructor
argument_list|)
condition|)
block|{
name|populate
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingAssignmentsDetailRequest
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|populate
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|InstructorInfo
name|result
parameter_list|)
block|{
name|populate
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// populate(null, null, event.getData().getInstructor());
block|}
else|else
block|{
name|populate
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getIndex
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//populate(null, null, event.getData().getRequest().getInstructor(event.getData().getIndex()));
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iProperties
operator|.
name|isHasSolver
argument_list|()
condition|)
block|{
name|iIgnoreConflicts
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|checkIgnoreInstructorAssignmentConflicts
argument_list|()
argument_list|)
expr_stmt|;
name|iIgnoreConflicts
operator|.
name|addStyleName
argument_list|(
literal|"ignore-conflicts"
argument_list|)
expr_stmt|;
name|iIgnoreConflictsRow
operator|=
name|iForm
operator|.
name|addRow
argument_list|(
name|iIgnoreConflicts
argument_list|)
expr_stmt|;
name|iIgnoreConflicts
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iAssignmentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|AssignmentInfo
name|ai
init|=
name|iAssignmentTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|ai
operator|!=
literal|null
operator|&&
name|ai
operator|.
name|getInstructor
argument_list|()
operator|==
literal|null
condition|)
name|iAssignmentTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|i
argument_list|,
operator|!
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|setupDomain
parameter_list|()
block|{
name|iDomainHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerAvailableInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|iDomainRow
operator|=
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iDomainHeader
argument_list|)
expr_stmt|;
name|iDomainTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|SuggestionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iDomainTable
operator|.
name|addStyleName
argument_list|(
literal|"domain"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iDomainTable
argument_list|)
expr_stmt|;
name|iDomainTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|SuggestionInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|SuggestionInfo
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|showAssignment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|computeSuggestions
argument_list|(
name|iAssignmentRow
argument_list|)
expr_stmt|;
name|iScroll
operator|.
name|scrollToTop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iDomainHeader
operator|.
name|addButton
argument_list|(
literal|"more"
argument_list|,
name|MESSAGES
operator|.
name|buttonMoreAssignments
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSuggestionsRequest
operator|!=
literal|null
condition|)
block|{
name|iSuggestionsRequest
operator|.
name|setMaxDomain
argument_list|(
literal|2
operator|*
name|iSuggestionsRequest
operator|.
name|getMaxDomain
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggestionsRequest
operator|.
name|setComputeDomain
argument_list|()
expr_stmt|;
name|computeSuggestions
argument_list|(
name|iSuggestionsRequest
argument_list|,
name|iDomainRow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iDomainHeader
operator|.
name|setEnabled
argument_list|(
literal|"more"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupSuggestions
parameter_list|()
block|{
name|iSuggestionsHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|headerSuggestions
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggestionsRow
operator|=
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iSuggestionsHeader
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|SuggestionInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iSuggestionsTable
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|.
name|addStyleName
argument_list|(
literal|"suggestions"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|sgHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|sgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colScore
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|sgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|sgHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|sgHeader
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iSuggestionsTable
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|addButton
argument_list|(
literal|"longer"
argument_list|,
name|MESSAGES
operator|.
name|buttonSearchLonger
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSuggestionsRequest
operator|!=
literal|null
condition|)
block|{
name|iSuggestionsRequest
operator|.
name|setTimeout
argument_list|(
literal|2
operator|*
name|iSuggestionsRequest
operator|.
name|getTimeout
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggestionsRequest
operator|.
name|setComputeSuggestions
argument_list|()
expr_stmt|;
name|computeSuggestions
argument_list|(
name|iSuggestionsRequest
argument_list|,
name|iSuggestionsRow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|addButton
argument_list|(
literal|"deeper"
argument_list|,
name|MESSAGES
operator|.
name|buttonSearchDeeper
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iSuggestionsRequest
operator|!=
literal|null
condition|)
block|{
name|iSuggestionsRequest
operator|.
name|setMaxDept
argument_list|(
literal|1
operator|+
name|iSuggestionsRequest
operator|.
name|getMaxDept
argument_list|()
argument_list|)
expr_stmt|;
name|iSuggestionsRequest
operator|.
name|setComputeSuggestions
argument_list|()
expr_stmt|;
name|computeSuggestions
argument_list|(
name|iSuggestionsRequest
argument_list|,
name|iSuggestionsRow
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|setEnabled
argument_list|(
literal|"longer"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iSuggestionsHeader
operator|.
name|setEnabled
argument_list|(
literal|"deeper"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iSuggestionsTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|SuggestionInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|SuggestionInfo
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|showAssignment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
name|iScroll
operator|.
name|scrollToTop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

