begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|TeachingRequestsPage
operator|.
name|HasRefresh
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomCookie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasColSpan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|AttributeInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|InstructorInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|PreferenceInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|SectionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestDetailRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|InstructorInterface
operator|.
name|TeachingRequestsPagePropertiesResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|FontStyle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TeachingRequestDetailPage
extends|extends
name|UniTimeDialogBox
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|GwtConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|StudentSectioningMessages
name|SECTMSG
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|NumberFormat
name|sTeachingLoadFormat
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|teachingLoadFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TeachingRequestsPagePropertiesResponse
name|iProperties
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|ScrollPanel
name|iScroll
decl_stmt|;
specifier|public
name|TeachingRequestDetailPage
parameter_list|(
name|TeachingRequestsPagePropertiesResponse
name|properties
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-TeachingRequestDetail"
argument_list|)
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addStyleName
argument_list|(
literal|"detail"
argument_list|)
expr_stmt|;
name|iScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|iScroll
operator|.
name|setStyleName
argument_list|(
literal|"scroll"
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iScroll
argument_list|)
expr_stmt|;
name|iProperties
operator|=
name|properties
expr_stmt|;
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showDetail
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadTeachingRequestDetail
argument_list|()
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|setMaxHeight
argument_list|(
name|iScroll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
argument_list|,
name|Math
operator|.
name|round
argument_list|(
literal|0.9
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|TeachingRequestDetailRequest
argument_list|(
name|id
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|TeachingRequestInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadTeachingRequestDetaul
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TeachingRequestInfo
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|populate
parameter_list|(
name|TeachingRequestInfo
name|request
parameter_list|)
block|{
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogTeachingRequestDetail
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|request
operator|.
name|getSections
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|headerTeachingRequest
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propCourse
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|request
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|UniTimeTable
argument_list|<
name|SectionInfo
argument_list|>
name|sections
init|=
operator|new
name|UniTimeTable
argument_list|<
name|SectionInfo
argument_list|>
argument_list|()
decl_stmt|;
name|sections
operator|.
name|addStyleName
argument_list|(
literal|"sections"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|sectionHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|sectionHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sectionHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sectionHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sectionHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sections
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|sectionHeader
argument_list|)
expr_stmt|;
for|for
control|(
name|SectionInfo
name|s
range|:
name|request
operator|.
name|getSections
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|sectionLine
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|sectionLine
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|s
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|s
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|s
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|sectionLine
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|s
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|s
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sectionLine
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|s
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|s
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sectionLine
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|s
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|s
operator|.
name|getRoom
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|isCommon
argument_list|()
condition|)
for|for
control|(
name|Widget
name|w
range|:
name|sectionLine
control|)
name|w
operator|.
name|addStyleName
argument_list|(
literal|"common"
argument_list|)
expr_stmt|;
name|sections
operator|.
name|addRow
argument_list|(
name|s
argument_list|,
name|sectionLine
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propSections
argument_list|()
argument_list|,
name|sections
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propRequestLoad
argument_list|()
argument_list|,
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|request
operator|.
name|getLoad
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getAttributePreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAttributePrefs
argument_list|()
argument_list|,
operator|new
name|Pref
argument_list|(
name|request
operator|.
name|getAttributePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getInstructorPreferences
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propInstructorPrefs
argument_list|()
argument_list|,
operator|new
name|Pref
argument_list|(
name|request
operator|.
name|getInstructorPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|request
operator|.
name|getValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propObjectives
argument_list|()
argument_list|,
operator|new
name|Objectives
argument_list|(
name|request
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|UniTimeTable
argument_list|<
name|InstructorInfo
argument_list|>
name|instructors
init|=
operator|new
name|UniTimeTable
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
decl_stmt|;
name|instructors
operator|.
name|addStyleName
argument_list|(
literal|"instructors"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|instructorsHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAssignedLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorsHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructors
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|instructorsHeader
argument_list|)
expr_stmt|;
name|int
name|instrIndex
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
for|for
control|(
name|InstructorInfo
name|instructor
range|:
name|request
operator|.
name|getInstructors
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|instructorLine
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
operator|(
name|instrIndex
operator|++
operator|)
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|Label
name|extId
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|extId
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|extId
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|instructorLine
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|Label
name|name
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|instructorLine
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
operator|+
literal|" / "
operator|+
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|instructorLine
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|Pref
argument_list|(
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|TimePreferences
argument_list|(
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|Pref
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|Objectives
argument_list|(
name|instructor
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|instructors
operator|.
name|addRow
argument_list|(
name|instructor
argument_list|,
name|instructorLine
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
name|request
operator|.
name|getNrAssignedInstructors
argument_list|()
init|;
name|i
operator|<
name|request
operator|.
name|getNrInstructors
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|instructorLine
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
operator|(
name|instrIndex
operator|++
operator|)
operator|+
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|instructorLine
operator|.
name|add
argument_list|(
operator|new
name|NotAssignedInstructor
argument_list|()
argument_list|)
expr_stmt|;
name|instructors
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|instructorLine
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|request
operator|.
name|getNrInstructors
argument_list|()
operator|<=
literal|1
condition|)
name|instructors
operator|.
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propAssignedInstructors
argument_list|()
argument_list|,
name|instructors
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasDomainValues
argument_list|()
condition|)
block|{
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|MESSAGES
operator|.
name|headerAvailableInstructors
argument_list|()
argument_list|)
expr_stmt|;
name|UniTimeTable
argument_list|<
name|InstructorInfo
argument_list|>
name|domain
init|=
operator|new
name|UniTimeTable
argument_list|<
name|InstructorInfo
argument_list|>
argument_list|()
decl_stmt|;
name|domain
operator|.
name|addStyleName
argument_list|(
literal|"instructors"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|domainHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colExternalId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNamePerson
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAssignedLoad
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAttributes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictingRequests
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
name|domainHeader
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colObjectives
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|domainHeader
argument_list|)
expr_stmt|;
for|for
control|(
name|InstructorInfo
name|instructor
range|:
name|request
operator|.
name|getDomainValues
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|domainLine
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|Label
name|extId
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|extId
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|extId
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|domainLine
operator|.
name|add
argument_list|(
name|extId
argument_list|)
expr_stmt|;
name|Label
name|name
init|=
operator|new
name|Label
argument_list|(
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
literal|"0"
operator|.
name|equals
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
condition|)
block|{
name|PreferenceInterface
name|pref
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|instructor
operator|.
name|getTeachingPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pref
operator|!=
literal|null
condition|)
block|{
name|name
operator|.
name|setTitle
argument_list|(
name|pref
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|instructor
operator|.
name|getInstructorName
argument_list|()
argument_list|)
expr_stmt|;
name|name
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|pref
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|domainLine
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getAssignedLoad
argument_list|()
argument_list|)
operator|+
literal|" / "
operator|+
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|instructor
operator|.
name|getMaxLoad
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"attributes"
argument_list|)
decl_stmt|;
for|for
control|(
name|AttributeInterface
name|a
range|:
name|instructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|P
name|i
init|=
operator|new
name|P
argument_list|(
literal|"attribute"
argument_list|)
decl_stmt|;
name|i
operator|.
name|setText
argument_list|(
name|a
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setTitle
argument_list|(
name|a
operator|.
name|getName
argument_list|()
operator|+
literal|" ("
operator|+
name|a
operator|.
name|getType
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|domainLine
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|Pref
argument_list|(
name|instructor
operator|.
name|getCoursePreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|TimePreferences
argument_list|(
name|instructor
argument_list|)
argument_list|)
expr_stmt|;
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|Pref
argument_list|(
name|instructor
operator|.
name|getDistributionPreferences
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|instructor
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|Conflicts
argument_list|(
name|instructor
operator|.
name|getConflicts
argument_list|()
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|domainLine
operator|.
name|add
argument_list|(
operator|new
name|Objectives
argument_list|(
name|instructor
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|domain
operator|.
name|addRow
argument_list|(
name|instructor
argument_list|,
name|domainLine
argument_list|)
expr_stmt|;
block|}
name|iForm
operator|.
name|addRow
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
name|UniTimeHeaderPanel
name|footer
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|footer
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|footer
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Pref
extends|extends
name|P
block|{
specifier|public
name|Pref
parameter_list|(
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|prefs
parameter_list|)
block|{
name|super
argument_list|(
literal|"preferences"
argument_list|)
expr_stmt|;
for|for
control|(
name|PreferenceInfo
name|p
range|:
name|prefs
control|)
block|{
name|P
name|prf
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|)
decl_stmt|;
name|prf
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|prf
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|prf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|prf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|TimePreferences
extends|extends
name|P
implements|implements
name|HasRefresh
block|{
specifier|private
name|String
name|iInstructorId
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iPattern
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|PreferenceInfo
argument_list|>
name|iPreferences
init|=
literal|null
decl_stmt|;
specifier|public
name|TimePreferences
parameter_list|(
name|InstructorInfo
name|instructor
parameter_list|)
block|{
name|super
argument_list|(
literal|"preferences"
argument_list|)
expr_stmt|;
name|iInstructorId
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|instructor
operator|.
name|getInstructorId
argument_list|()
argument_list|)
expr_stmt|;
name|iPattern
operator|=
name|instructor
operator|.
name|getAvailability
argument_list|()
expr_stmt|;
name|iPreferences
operator|=
name|instructor
operator|.
name|getTimePreferences
argument_list|()
expr_stmt|;
name|addMouseOverHandler
argument_list|(
operator|new
name|MouseOverHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|InstructorAvailabilityHint
operator|.
name|showHint
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|iInstructorId
argument_list|,
literal|true
argument_list|,
name|iPattern
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
operator|new
name|MouseOutHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|InstructorAvailabilityHint
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|RoomCookie
name|cookie
init|=
name|RoomCookie
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|iPattern
operator|!=
literal|null
operator|&&
operator|!
name|iPattern
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|cookie
operator|.
name|isGridAsText
argument_list|()
condition|)
block|{
specifier|final
name|Image
name|availability
init|=
operator|new
name|Image
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"pattern?pref="
operator|+
name|iPattern
operator|+
literal|"&v="
operator|+
operator|(
name|cookie
operator|.
name|areRoomsHorizontal
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
operator|)
operator|+
operator|(
name|cookie
operator|.
name|hasMode
argument_list|()
condition|?
literal|"&s="
operator|+
name|cookie
operator|.
name|getMode
argument_list|()
else|:
literal|""
operator|)
argument_list|)
decl_stmt|;
name|availability
operator|.
name|setStyleName
argument_list|(
literal|"grid"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|availability
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|PreferenceInfo
name|p
range|:
name|iPreferences
control|)
block|{
name|P
name|prf
init|=
operator|new
name|P
argument_list|(
literal|"prf"
argument_list|)
decl_stmt|;
name|prf
operator|.
name|setText
argument_list|(
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|PreferenceInterface
name|preference
init|=
name|iProperties
operator|.
name|getPreference
argument_list|(
name|p
operator|.
name|getPreference
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preference
operator|!=
literal|null
condition|)
block|{
name|prf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|preference
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
name|prf
operator|.
name|setTitle
argument_list|(
name|preference
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|p
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|prf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
class|class
name|Objectives
extends|extends
name|P
block|{
specifier|public
name|Objectives
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|values
parameter_list|)
block|{
name|super
argument_list|(
literal|"objective"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|values
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|Double
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|P
name|obj
init|=
operator|new
name|P
argument_list|(
literal|"objective"
argument_list|)
decl_stmt|;
name|obj
operator|.
name|setText
argument_list|(
name|key
operator|+
literal|": "
operator|+
operator|(
name|value
operator|>
literal|0.0
condition|?
literal|"+"
else|:
literal|""
operator|)
operator|+
name|sTeachingLoadFormat
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
literal|" Preferences"
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|<=
operator|-
literal|50.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
literal|"R"
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|<=
operator|-
literal|2.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
literal|"-2"
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|<
literal|0.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
literal|"-1"
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>=
literal|50.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
literal|"P"
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>=
literal|2.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
literal|"2"
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
name|iProperties
operator|.
name|getPreference
argument_list|(
literal|"1"
argument_list|)
operator|.
name|getColor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|value
operator|<
literal|0.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"green"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|obj
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
class|class
name|Conflicts
extends|extends
name|P
block|{
specifier|public
name|Conflicts
parameter_list|(
name|List
argument_list|<
name|TeachingRequestInfo
argument_list|>
name|conflicts
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|super
argument_list|(
literal|"conflicts"
argument_list|)
expr_stmt|;
for|for
control|(
name|TeachingRequestInfo
name|conflict
range|:
name|conflicts
control|)
block|{
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|SectionInfo
name|section
range|:
name|conflict
operator|.
name|getSections
argument_list|()
control|)
block|{
name|P
name|conf
init|=
operator|new
name|P
argument_list|(
literal|"conflict"
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|idx
operator|==
literal|0
condition|)
name|conf
operator|.
name|setText
argument_list|(
name|conflict
operator|.
name|getCourse
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|conf
operator|.
name|setHTML
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|conf
operator|.
name|setText
argument_list|(
name|section
operator|.
name|getSectionType
argument_list|()
operator|+
operator|(
name|section
operator|.
name|getExternalId
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|" "
operator|+
name|section
operator|.
name|getExternalId
argument_list|()
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|conf
operator|.
name|setHTML
argument_list|(
name|section
operator|.
name|getTime
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|arrangeHours
argument_list|()
else|:
name|section
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|conf
operator|.
name|setHTML
argument_list|(
name|section
operator|.
name|getDate
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noDate
argument_list|()
else|:
name|section
operator|.
name|getDate
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|conf
operator|.
name|setHTML
argument_list|(
name|section
operator|.
name|getRoom
argument_list|()
operator|==
literal|null
condition|?
name|SECTMSG
operator|.
name|noRoom
argument_list|()
else|:
name|section
operator|.
name|getRoom
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|5
case|:
if|if
condition|(
name|idx
operator|==
literal|0
operator|&&
name|conflict
operator|.
name|hasConflict
argument_list|()
condition|)
name|conf
operator|.
name|setText
argument_list|(
name|conflict
operator|.
name|getConflict
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|conf
operator|.
name|setHTML
argument_list|(
literal|"<br>"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|section
operator|.
name|isCommon
argument_list|()
condition|)
name|conf
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setFontStyle
argument_list|(
name|FontStyle
operator|.
name|ITALIC
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|add
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
class|class
name|NotAssignedInstructor
extends|extends
name|P
implements|implements
name|HasColSpan
block|{
name|NotAssignedInstructor
parameter_list|()
block|{
name|super
argument_list|(
literal|"not-assigned"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|MESSAGES
operator|.
name|notAssignedInstructor
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
block|}
block|}
end_class

end_unit

