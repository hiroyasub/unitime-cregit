begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *   */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|departments
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
operator|.
name|GetDepartmentsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DepartmentInterface
operator|.
name|DepartmentsDataResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_class
specifier|public
class|class
name|DepartmentsPage
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimplePanel
name|iPanel
decl_stmt|;
specifier|private
name|SimpleForm
name|iListDepartmentsForm
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iListDepartmentsHeader
decl_stmt|,
name|iListDepartmentsFooter
decl_stmt|;
specifier|private
name|DepartmentsTable
name|iDepartmentsTable
decl_stmt|;
specifier|private
name|DepartmentsEdit
name|iDepartmentsEdit
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|CheckBox
argument_list|>
name|iShowAllDept
decl_stmt|;
specifier|public
name|DepartmentsPage
parameter_list|()
block|{
name|iPanel
operator|=
operator|new
name|SimplePanel
argument_list|()
expr_stmt|;
name|iListDepartmentsForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
comment|// Header
name|iListDepartmentsHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectDepartments
argument_list|()
argument_list|)
expr_stmt|;
comment|// Department ADD Button
name|iListDepartmentsHeader
operator|.
name|addButton
argument_list|(
literal|"add"
argument_list|,
name|MESSAGES
operator|.
name|buttonAddDepartment
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|addDepartment
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// iListDepartmentsHeader.setEnabled("add", true);
comment|// EXPORT PDF Button
name|iListDepartmentsHeader
operator|.
name|addButton
argument_list|(
literal|"export"
argument_list|,
name|MESSAGES
operator|.
name|buttonExportPDF
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"export?output=departments.pdf&sort="
operator|+
name|iDepartmentsTable
operator|.
name|getSortBy
argument_list|()
operator|+
literal|"&showAllDept="
operator|+
name|iShowAllDept
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// iListDepartmentsHeader.setEnabled("export", true);
name|iListDepartmentsForm
operator|.
name|addHeaderRow
argument_list|(
name|iListDepartmentsHeader
argument_list|)
expr_stmt|;
comment|// Grid
name|iDepartmentsTable
operator|=
operator|new
name|DepartmentsTable
argument_list|()
expr_stmt|;
name|iListDepartmentsForm
operator|.
name|addRow
argument_list|(
name|iDepartmentsTable
argument_list|)
expr_stmt|;
name|iDepartmentsTable
operator|.
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDepartmentsTable
operator|.
name|setAllowMultiSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iListDepartmentsFooter
operator|=
name|iListDepartmentsHeader
operator|.
name|clonePanel
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iListDepartmentsForm
operator|.
name|addBottomRow
argument_list|(
name|iListDepartmentsFooter
argument_list|)
expr_stmt|;
comment|// Footer Show All dept checkbox
name|iShowAllDept
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|CheckBox
argument_list|>
argument_list|(
operator|new
name|CheckBox
argument_list|()
argument_list|)
expr_stmt|;
name|iListDepartmentsForm
operator|.
name|addRow
argument_list|(
literal|"Show all departments (including departments with no manager and no subject area):"
argument_list|,
name|iShowAllDept
argument_list|)
expr_stmt|;
comment|// Hook up a handler to find out when it's clicked.
name|iShowAllDept
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
comment|// load
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get all departments
name|listDepartments
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// load
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get all departments
name|listDepartments
argument_list|()
expr_stmt|;
comment|// UI to update, add or back
name|iDepartmentsEdit
operator|=
operator|new
name|DepartmentsEdit
argument_list|()
block|{
comment|//Override on back event from DepartmentEdit page
annotation|@
name|Override
specifier|protected
name|void
name|onBack
parameter_list|(
name|boolean
name|refresh
parameter_list|,
specifier|final
name|Long
name|DepartmentId
parameter_list|)
block|{
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iListDepartmentsForm
argument_list|)
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageDepartments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|refresh
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitLoadingData
argument_list|()
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GetDepartmentsRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|DepartmentsDataResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DepartmentsDataResponse
name|result
parameter_list|)
block|{
name|iListDepartmentsHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
name|result
operator|.
name|isCanAdd
argument_list|()
argument_list|)
expr_stmt|;
name|iListDepartmentsHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
name|result
operator|.
name|isCanExportPdf
argument_list|()
argument_list|)
expr_stmt|;
name|iListDepartmentsHeader
operator|.
name|setEnabled
argument_list|(
literal|"updateData"
argument_list|,
name|result
operator|.
name|isCanUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|iDepartmentsTable
operator|.
name|setData
argument_list|(
name|result
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|iShowAllDept
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|DepartmentId
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDepartmentsTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DepartmentInterface
name|b
init|=
name|iDepartmentsTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
name|b
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|DepartmentId
argument_list|)
condition|)
block|{
name|iDepartmentsTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|i
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
name|iDepartmentsTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|iListDepartmentsHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iDepartmentsTable
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
condition|)
name|iDepartmentsTable
operator|.
name|setSelected
argument_list|(
name|iDepartmentsTable
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|DepartmentId
operator|!=
literal|null
condition|)
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDepartmentsTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DepartmentInterface
name|b
init|=
name|iDepartmentsTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
name|b
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|DepartmentId
argument_list|)
condition|)
block|{
name|iDepartmentsTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|i
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
name|iDepartmentsTable
operator|.
name|setSelected
argument_list|(
name|i
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|//Override isAbbreviationUnique from DepartmentEdit page
annotation|@
name|Override
specifier|protected
name|boolean
name|isAbbreviationUnique
parameter_list|(
name|DepartmentInterface
name|Department
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iDepartmentsTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DepartmentInterface
name|b
init|=
name|iDepartmentsTable
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
operator|&&
operator|!
name|b
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|Department
operator|.
name|getId
argument_list|()
argument_list|)
operator|&&
name|b
operator|.
name|getAbbreviation
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|Department
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
expr_stmt|;
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iListDepartmentsForm
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addDepartment
parameter_list|()
block|{
comment|// Logger log = Logger.getLogger(DepartmentsPage.class.getName());
comment|// log.info("addDepartment");
name|iDepartmentsEdit
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iDepartmentsEdit
argument_list|)
expr_stmt|;
name|iDepartmentsEdit
operator|.
name|show
argument_list|()
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageAddDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|iDepartmentsTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|editDepartment
parameter_list|(
name|DepartmentInterface
name|department
parameter_list|)
block|{
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DepartmentsPage
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// log.info("editDepartment");
comment|// log.info("department" + department.getName());
name|iDepartmentsEdit
operator|.
name|setValue
argument_list|(
name|department
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setWidget
argument_list|(
name|iDepartmentsEdit
argument_list|)
expr_stmt|;
name|iDepartmentsEdit
operator|.
name|show
argument_list|()
expr_stmt|;
name|UniTimePageLabel
operator|.
name|getInstance
argument_list|()
operator|.
name|setPageName
argument_list|(
name|MESSAGES
operator|.
name|pageEditDepartment
argument_list|()
argument_list|)
expr_stmt|;
name|iDepartmentsTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|listDepartments
parameter_list|()
block|{
comment|// Get all departments
name|RPC
operator|.
name|execute
argument_list|(
operator|new
name|GetDepartmentsRequest
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|DepartmentsDataResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DepartmentsDataResponse
name|result
parameter_list|)
block|{
name|iListDepartmentsHeader
operator|.
name|setEnabled
argument_list|(
literal|"add"
argument_list|,
name|result
operator|.
name|isCanAdd
argument_list|()
argument_list|)
expr_stmt|;
name|iListDepartmentsHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
name|result
operator|.
name|isCanExportPdf
argument_list|()
argument_list|)
expr_stmt|;
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DepartmentsPage
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// list departments
name|iDepartmentsTable
operator|.
name|setData
argument_list|(
name|result
operator|.
name|getDepartments
argument_list|()
argument_list|,
name|iShowAllDept
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
comment|// Click to edit
name|iDepartmentsTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|DepartmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|DepartmentInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|isCanEdit
argument_list|()
condition|)
block|{
name|iDepartmentsTable
operator|.
name|setSelected
argument_list|(
name|event
operator|.
name|getRow
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|editDepartment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|iListDepartmentsHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedLoadData
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

