begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|admin
operator|.
name|ClearHibernateCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|instructor
operator|.
name|InstructorAvailabilityHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|Refresh
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|rooms
operator|.
name|RoomSharingHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_enum
specifier|public
enum|enum
name|Triggers
block|{
name|gwtHint
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|GwtHint
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|lookup
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Lookup
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|gwtDialog
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|UniTimeFrameDialog
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|loading
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|LoadingWidget
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|refresh
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Refresh
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|notifications
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|UniTimeNotifications
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|roomAvailabilityHint
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomSharingHint
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|roomHint
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|RoomHint
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|timeHint
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|TimeHint
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|clearHibCache
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|ClearHibernateCache
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
name|instructorAvailabilityHint
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|InstructorAvailabilityHint
operator|.
name|createTriggers
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|, 	;
specifier|private
name|Command
name|iCommand
decl_stmt|;
name|Triggers
parameter_list|(
name|Command
name|registerCommand
parameter_list|)
block|{
name|iCommand
operator|=
name|registerCommand
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|()
block|{
name|iCommand
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
end_enum

end_unit

