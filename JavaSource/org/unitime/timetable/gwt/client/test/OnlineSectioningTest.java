begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|SectioningProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|OnlineSectioningTest
extends|extends
name|Composite
block|{
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DateTimeFormat
name|iDF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
literal|"HH:mm:ss.SSS"
argument_list|)
decl_stmt|;
specifier|private
name|NumberFormat
name|iDecF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"00"
argument_list|)
decl_stmt|;
specifier|private
name|NumberFormat
name|iAvgF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"0.000"
argument_list|)
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|UniTimeTextBox
argument_list|>
name|iNbrThreads
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|UniTimeTextBox
argument_list|>
name|iPin
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|TextArea
argument_list|>
name|iCourses
decl_stmt|,
name|iStudents
decl_stmt|;
specifier|private
name|CheckBox
name|iWaitList
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|;
specifier|private
name|VerticalPanel
name|iLog
decl_stmt|;
specifier|private
name|Test
index|[]
name|iTest
decl_stmt|;
specifier|private
name|Label
name|iAverage
decl_stmt|;
specifier|private
name|long
name|iTotal
init|=
literal|0
decl_stmt|,
name|iTotalEligibility
init|=
literal|0
decl_stmt|,
name|iTotalLookup
init|=
literal|0
decl_stmt|,
name|iTotalCheck
init|=
literal|0
decl_stmt|,
name|iTotalSectioning
init|=
literal|0
decl_stmt|,
name|iTotalSuggestions
init|=
literal|0
decl_stmt|,
name|iTotalEnrollment
init|=
literal|0
decl_stmt|,
name|iRunTime
init|=
literal|0
decl_stmt|,
name|iStartTime
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iCount
init|=
literal|0
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
name|iSessions
decl_stmt|;
specifier|public
name|OnlineSectioningTest
parameter_list|()
block|{
name|SimpleForm
name|form
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
literal|"Online Student Sectioning Test"
argument_list|)
expr_stmt|;
name|form
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iNbrThreads
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|UniTimeTextBox
argument_list|>
argument_list|(
operator|new
name|UniTimeTextBox
argument_list|()
argument_list|)
expr_stmt|;
name|iNbrThreads
operator|.
name|getWidget
argument_list|()
operator|.
name|setText
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|iNbrThreads
operator|.
name|setHint
argument_list|(
literal|"Number of student simulations to be run in parallel."
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Number of Threads:"
argument_list|,
name|iNbrThreads
argument_list|)
expr_stmt|;
name|iSessions
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
operator|new
name|ListBox
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Academic Session:"
argument_list|,
name|iSessions
argument_list|)
expr_stmt|;
name|iSessions
operator|.
name|setHint
argument_list|(
literal|"An academic session with enabled student sectioning."
argument_list|)
expr_stmt|;
name|iPin
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|UniTimeTextBox
argument_list|>
argument_list|(
operator|new
name|UniTimeTextBox
argument_list|()
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"PIN:"
argument_list|,
name|iPin
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
literal|"Loading..."
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|getProperties
argument_list|(
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SectioningProperties
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SectioningProperties
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isAdmin
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
literal|"Only administrators can use this page."
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
literal|"Only administrators can use this page."
argument_list|)
expr_stmt|;
return|return;
block|}
name|iSectioningService
operator|.
name|listAcademicSessions
argument_list|(
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iSessions
operator|.
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
name|s
range|:
name|result
control|)
block|{
name|iSessions
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|s
operator|.
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSectioningService
operator|.
name|lastAcademicSession
argument_list|(
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
name|result
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iSessions
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iSessions
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|result
operator|.
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
name|iSessions
operator|.
name|getWidget
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iSessions
operator|.
name|setErrorHint
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"start"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iWaitList
operator|=
operator|new
name|CheckBox
argument_list|()
expr_stmt|;
name|iWaitList
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Wait-list:"
argument_list|,
name|iWaitList
argument_list|)
expr_stmt|;
name|iCourses
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|TextArea
argument_list|>
argument_list|(
operator|new
name|TextArea
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|setVisibleLines
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setHint
argument_list|(
literal|"Courses to be used in the simulations."
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Courses:"
argument_list|,
name|iCourses
argument_list|)
expr_stmt|;
name|iStudents
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|TextArea
argument_list|>
argument_list|(
operator|new
name|TextArea
argument_list|()
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|setVisibleLines
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|setHint
argument_list|(
literal|"Students to be be enrolled in the simulated schedules (student unique ids), no enrollment will be made if empty."
argument_list|)
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Students:"
argument_list|,
name|iStudents
argument_list|)
expr_stmt|;
name|iAverage
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Average:"
argument_list|,
name|iAverage
argument_list|)
expr_stmt|;
name|iLog
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|form
operator|.
name|addRow
argument_list|(
literal|"Log:"
argument_list|,
name|iLog
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"start"
argument_list|,
literal|"<u>S</u>tart"
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"start"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"stop"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iNbrThreads
operator|.
name|getWidget
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|startTest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"stop"
argument_list|,
literal|"Sto<u>p</u>"
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
try|try
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"start"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"stop"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iNbrThreads
operator|.
name|getWidget
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stopTest
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"start"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"stop"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"clear"
argument_list|,
literal|"<u>C</u>lear"
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iLog
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|form
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|updateAverage
parameter_list|()
block|{
if|if
condition|(
name|iCount
operator|==
literal|0
condition|)
name|iAverage
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|iAverage
operator|.
name|setText
argument_list|(
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotal
operator|/
name|iCount
argument_list|)
operator|+
literal|" s ("
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotalEligibility
operator|/
name|iCount
argument_list|)
operator|+
literal|" s eligibility, "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotalLookup
operator|/
name|iCount
argument_list|)
operator|+
literal|" s lookup, "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotalCheck
operator|/
name|iCount
argument_list|)
operator|+
literal|" s check, "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotalSectioning
operator|/
name|iCount
argument_list|)
operator|+
literal|" s sectioning, "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotalSuggestions
operator|/
operator|(
literal|2
operator|*
name|iCount
operator|)
argument_list|)
operator|+
literal|" s suggestions, "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iTotalEnrollment
operator|/
name|iCount
argument_list|)
operator|+
literal|" s enrollment, average from "
operator|+
name|iCount
operator|+
literal|" runs, total runtime "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
name|iRunTime
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startTest
parameter_list|()
block|{
name|iTotal
operator|=
literal|0
expr_stmt|;
name|iTotalEligibility
operator|=
literal|0
expr_stmt|;
name|iTotalLookup
operator|=
literal|0
expr_stmt|;
name|iTotalCheck
operator|=
literal|0
expr_stmt|;
name|iTotalSectioning
operator|=
literal|0
expr_stmt|;
name|iTotalSuggestions
operator|=
literal|0
expr_stmt|;
name|iTotalEnrollment
operator|=
literal|0
expr_stmt|;
name|iCount
operator|=
literal|0
expr_stmt|;
name|iStartTime
operator|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|int
name|nbrTests
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iNbrThreads
operator|.
name|getWidget
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|iTest
operator|=
operator|new
name|Test
index|[
name|nbrTests
index|]
expr_stmt|;
name|String
index|[]
name|students
init|=
name|iStudents
operator|.
name|getWidget
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbrTests
condition|;
name|i
operator|++
control|)
block|{
name|iTest
index|[
name|i
index|]
operator|=
operator|new
name|Test
argument_list|(
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|students
operator|.
name|length
condition|)
block|{
try|try
block|{
name|iTest
index|[
name|i
index|]
operator|.
name|setStudentId
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|students
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|iTest
index|[
name|i
index|]
operator|.
name|scheduleNext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|stopTest
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iTest
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|iTest
index|[
name|i
index|]
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|Test
extends|extends
name|Timer
block|{
specifier|private
name|int
name|iIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|iStopped
init|=
literal|false
decl_stmt|;
specifier|private
name|String
index|[]
name|iChoices
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|,
name|iStudentId
decl_stmt|;
specifier|public
name|Test
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|iIndex
operator|=
name|index
expr_stmt|;
name|iChoices
operator|=
name|iCourses
operator|.
name|getWidget
argument_list|()
operator|.
name|getText
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
expr_stmt|;
name|iSessionId
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|iSessions
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iSessions
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iStudentId
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|setStudentId
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|long
name|T0
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|checkEligibility
argument_list|(
operator|new
name|Callback
argument_list|<
name|EligibilityCheck
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|EligibilityCheck
name|eligibility
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
if|if
condition|(
name|eligibility
operator|!=
literal|null
operator|&&
name|eligibility
operator|.
name|hasMessage
argument_list|()
condition|)
name|info
argument_list|(
literal|"eligibility: "
operator|+
name|eligibility
operator|.
name|getMessage
argument_list|()
operator|+
literal|" (enroll: "
operator|+
name|eligibility
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|T1
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|lookupCourses
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
literal|3
operator|+
operator|(
name|int
operator|)
operator|(
name|Random
operator|.
name|nextDouble
argument_list|()
operator|*
literal|5
operator|)
argument_list|,
operator|new
name|Callback
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|courses
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
specifier|final
name|CourseRequestInterface
name|request
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|request
operator|.
name|setAcademicSessionId
argument_list|(
name|iSessionId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|iStudentId
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|course
range|:
name|courses
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|r
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|RequestedCourse
name|rc
init|=
operator|new
name|RequestedCourse
argument_list|()
decl_stmt|;
name|rc
operator|.
name|setCourseName
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|r
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|r
operator|.
name|setWaitList
argument_list|(
name|iWaitList
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|T2
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|checkCourses
argument_list|(
name|request
argument_list|,
operator|new
name|Callback
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
specifier|final
name|long
name|T3
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|section
argument_list|(
name|request
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
argument_list|,
operator|new
name|Callback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|ClassAssignmentInterface
name|assignment
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
specifier|final
name|long
name|T4
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|computeSuggestions
argument_list|(
name|request
argument_list|,
name|assignment
argument_list|,
operator|new
name|Callback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|suggestions
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|computeSuggestions
argument_list|(
name|request
argument_list|,
name|assignment
argument_list|,
operator|new
name|Callback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
specifier|final
name|long
name|T5
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|enroll
argument_list|(
name|request
argument_list|,
name|assignment
argument_list|,
name|eligibility
argument_list|,
operator|new
name|Callback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|ClassAssignmentInterface
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
specifier|final
name|long
name|T6
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|info
argument_list|(
literal|"Run completed in "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|T6
operator|-
name|T0
operator|)
argument_list|)
operator|+
literal|" s "
operator|+
name|courses
operator|+
literal|" (lookup "
operator|+
name|iAvgF
operator|.
name|format
argument_list|(
literal|0.001
operator|*
operator|(
name|T2
operator|-
name|T1
operator|)
argument_list|)
operator|+
literal|" s)."
argument_list|)
expr_stmt|;
name|iTotal
operator|+=
operator|(
name|T6
operator|-
name|T0
operator|)
expr_stmt|;
name|iTotalEligibility
operator|+=
operator|(
name|T1
operator|-
name|T0
operator|)
expr_stmt|;
name|iTotalLookup
operator|+=
operator|(
name|T2
operator|-
name|T1
operator|)
expr_stmt|;
name|iTotalCheck
operator|+=
operator|(
name|T3
operator|-
name|T2
operator|)
expr_stmt|;
name|iTotalSectioning
operator|+=
operator|(
name|T4
operator|-
name|T3
operator|)
expr_stmt|;
name|iTotalSuggestions
operator|+=
operator|(
name|T5
operator|-
name|T4
operator|)
expr_stmt|;
name|iTotalEnrollment
operator|+=
operator|(
name|T6
operator|-
name|T5
operator|)
expr_stmt|;
name|iCount
operator|++
expr_stmt|;
name|iRunTime
operator|=
name|T6
operator|-
name|iStartTime
expr_stmt|;
name|updateAverage
argument_list|()
expr_stmt|;
name|scheduleNext
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|error
argument_list|(
literal|"Failure: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkEligibility
parameter_list|(
specifier|final
name|Callback
argument_list|<
name|EligibilityCheck
argument_list|>
name|callback
parameter_list|)
block|{
name|debug
argument_list|(
literal|"checkEligibility()"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|checkEligibility
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|iSessionId
argument_list|,
name|iStudentId
argument_list|,
name|iPin
operator|.
name|getWidget
argument_list|()
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EligibilityCheck
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EligibilityCheck
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;checkEligibility() failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|enroll
parameter_list|(
specifier|final
name|CourseRequestInterface
name|request
parameter_list|,
specifier|final
name|ClassAssignmentInterface
name|assignment
parameter_list|,
name|EligibilityCheck
name|eligibility
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|getStudentId
argument_list|()
operator|==
literal|null
operator|||
operator|(
name|eligibility
operator|!=
literal|null
operator|&&
operator|!
name|eligibility
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|)
condition|)
block|{
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|ArrayList
argument_list|<
name|ClassAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseAssignment
name|cx
range|:
name|assignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
name|assignments
operator|.
name|addAll
argument_list|(
name|cx
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|enroll
argument_list|(
literal|true
argument_list|,
name|request
argument_list|,
name|assignments
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;enroll("
operator|+
name|assignment
operator|.
name|getCourseAssignments
argument_list|()
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|computeSuggestions
parameter_list|(
specifier|final
name|CourseRequestInterface
name|request
parameter_list|,
specifier|final
name|ClassAssignmentInterface
name|assignment
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|List
argument_list|<
name|ClassAssignment
argument_list|>
name|assignments
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseAssignment
name|cx
range|:
name|assignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
name|assignments
operator|.
name|addAll
argument_list|(
name|cx
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|assignments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|warn
argument_list|(
literal|"No solution has been found to "
operator|+
name|request
operator|.
name|getCourses
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
name|ret
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|idx
init|=
operator|(
name|int
operator|)
operator|(
name|Random
operator|.
name|nextDouble
argument_list|()
operator|*
name|assignments
operator|.
name|size
argument_list|()
operator|)
decl_stmt|;
name|debug
argument_list|(
literal|"computeSuggestions("
operator|+
name|request
operator|+
literal|","
operator|+
name|assignments
operator|+
literal|","
operator|+
name|idx
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|computeSuggestions
argument_list|(
literal|true
argument_list|,
name|request
argument_list|,
name|assignments
argument_list|,
name|idx
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;computeSuggestions("
operator|+
name|request
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
name|ret
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|result
parameter_list|)
block|{
name|List
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|assignment
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
name|ret
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|section
parameter_list|(
specifier|final
name|CourseRequestInterface
name|request
parameter_list|,
name|ArrayList
argument_list|<
name|ClassAssignment
argument_list|>
name|assignment
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|callback
parameter_list|)
block|{
name|debug
argument_list|(
literal|"section("
operator|+
name|request
operator|+
literal|","
operator|+
name|assignment
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
literal|true
argument_list|,
name|request
argument_list|,
name|assignment
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;listClasses("
operator|+
name|request
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkCourses
parameter_list|(
specifier|final
name|CourseRequestInterface
name|request
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|debug
argument_list|(
literal|"checkCourses("
operator|+
name|request
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|checkCourses
argument_list|(
literal|true
argument_list|,
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;checkCourses("
operator|+
name|request
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|lookupCourses
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|courses
parameter_list|,
specifier|final
name|int
name|nbrCourses
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|>=
name|nbrCourses
condition|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|courses
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|courses
operator|.
name|size
argument_list|()
operator|<
name|nbrCourses
condition|)
block|{
specifier|final
name|String
name|course
init|=
name|iChoices
index|[
operator|(
name|int
operator|)
operator|(
name|Random
operator|.
name|nextDouble
argument_list|()
operator|*
name|iChoices
operator|.
name|length
operator|)
index|]
decl_stmt|;
if|if
condition|(
name|courses
operator|.
name|contains
argument_list|(
name|course
argument_list|)
condition|)
continue|continue;
name|courses
operator|.
name|add
argument_list|(
name|course
argument_list|)
expr_stmt|;
name|debug
argument_list|(
name|courses
operator|.
name|size
argument_list|()
operator|+
literal|". "
operator|+
name|course
argument_list|)
expr_stmt|;
name|listCourseOfferings
argument_list|(
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Callback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|listCourseOfferings
argument_list|(
name|course
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|Callback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|listCourseOfferings
argument_list|(
name|course
argument_list|,
operator|new
name|Callback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|retrieveCourseDetails
argument_list|(
name|course
argument_list|,
operator|new
name|Callback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|String
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|listClasses
argument_list|(
name|course
argument_list|,
operator|new
name|Callback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
block|{
name|lookupCourses
argument_list|(
name|courses
argument_list|,
name|nbrCourses
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
specifier|private
name|void
name|listClasses
parameter_list|(
specifier|final
name|String
name|course
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|debug
argument_list|(
literal|"listClasses("
operator|+
name|course
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|listClasses
argument_list|(
name|iSessionId
argument_list|,
name|course
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;listClasses("
operator|+
name|course
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|retrieveCourseDetails
parameter_list|(
specifier|final
name|String
name|course
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|String
argument_list|>
name|callback
parameter_list|)
block|{
name|debug
argument_list|(
literal|"retrieveCourseDetails("
operator|+
name|course
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iSessionId
argument_list|,
name|course
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;retrieveCourseDetails("
operator|+
name|course
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|listCourseOfferings
parameter_list|(
specifier|final
name|String
name|course
parameter_list|,
specifier|final
name|Callback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|debug
argument_list|(
literal|"listCourseOfferings("
operator|+
name|course
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iSessionId
argument_list|,
name|course
argument_list|,
literal|20
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|warn
argument_list|(
literal|"&nbsp;&nbsp;listCourseOfferings("
operator|+
name|course
operator|+
literal|") failed: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|callback
operator|.
name|execute
argument_list|(
literal|null
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
name|result
parameter_list|)
block|{
name|callback
operator|.
name|execute
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|scheduleNext
parameter_list|()
block|{
if|if
condition|(
name|iStopped
condition|)
return|return;
comment|// int delay = 100 + (int)(4900 * Random.nextDouble());
comment|// debug("Next run in " + delay + " ms.");
name|schedule
argument_list|(
name|iIndex
operator|*
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|stop
parameter_list|()
block|{
name|iStopped
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|HTML
name|message
parameter_list|(
name|String
name|message
parameter_list|)
block|{
return|return
operator|new
name|HTML
argument_list|(
literal|"["
operator|+
name|iDecF
operator|.
name|format
argument_list|(
name|iIndex
argument_list|)
operator|+
literal|" "
operator|+
name|iDF
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|+
literal|"] "
operator|+
name|message
argument_list|)
return|;
block|}
specifier|private
name|void
name|debug
parameter_list|(
name|String
name|message
parameter_list|)
block|{
comment|// iLog.add(message(message));
block|}
specifier|private
name|void
name|info
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iLog
operator|.
name|add
argument_list|(
name|message
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|warn
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|HTML
name|m
init|=
name|message
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"orange"
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|error
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|HTML
name|m
init|=
name|message
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|m
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setColor
argument_list|(
literal|"red"
argument_list|)
expr_stmt|;
name|iLog
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|Callback
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|execute
parameter_list|(
name|T
name|success
parameter_list|,
name|Throwable
name|failure
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

