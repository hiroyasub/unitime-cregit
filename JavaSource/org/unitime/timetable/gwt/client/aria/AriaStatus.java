begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|LiveValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasText
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|AriaStatus
extends|extends
name|Widget
implements|implements
name|HasHTML
implements|,
name|HasText
block|{
specifier|private
specifier|static
name|AriaStatus
name|sStatus
init|=
literal|null
decl_stmt|;
specifier|public
name|AriaStatus
parameter_list|(
name|boolean
name|assertive
parameter_list|)
block|{
name|this
argument_list|(
name|DOM
operator|.
name|createSpan
argument_list|()
argument_list|,
name|assertive
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|AriaStatus
parameter_list|(
name|Element
name|element
parameter_list|,
name|boolean
name|assertive
parameter_list|)
block|{
name|setElement
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|"unitime-AriaStatus"
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getStatusRole
argument_list|()
operator|.
name|set
argument_list|(
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getStatusRole
argument_list|()
operator|.
name|setAriaLiveProperty
argument_list|(
name|getElement
argument_list|()
argument_list|,
name|assertive
condition|?
name|LiveValue
operator|.
name|ASSERTIVE
else|:
name|LiveValue
operator|.
name|POLITE
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getStatusRole
argument_list|()
operator|.
name|setAriaAtomicProperty
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AriaStatus
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|AriaStatus
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|sStatus
operator|==
literal|null
condition|)
block|{
name|RootPanel
name|statusPanel
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"UniTimeGWT:AriaStatus"
argument_list|)
decl_stmt|;
if|if
condition|(
name|statusPanel
operator|!=
literal|null
operator|&&
literal|"1"
operator|.
name|equals
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"aria"
argument_list|)
argument_list|)
condition|)
block|{
name|sStatus
operator|=
operator|new
name|AriaStatus
argument_list|(
name|statusPanel
operator|.
name|getElement
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sStatus
operator|.
name|setStyleName
argument_list|(
literal|"unitime-VisibleAriaStatus"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sStatus
operator|=
operator|new
name|AriaStatus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|sStatus
argument_list|)
expr_stmt|;
block|}
name|RootPanel
operator|.
name|get
argument_list|()
operator|.
name|addDomHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
literal|191
operator|&&
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|)
condition|)
block|{
name|sStatus
operator|.
name|setHTML
argument_list|(
name|sStatus
operator|.
name|getHTML
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|KeyUpEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sStatus
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getText
parameter_list|()
block|{
return|return
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHTML
parameter_list|()
block|{
return|return
name|getElement
argument_list|()
operator|.
name|getInnerHTML
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHTML
parameter_list|(
name|String
name|html
parameter_list|)
block|{
name|getElement
argument_list|()
operator|.
name|setInnerHTML
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

