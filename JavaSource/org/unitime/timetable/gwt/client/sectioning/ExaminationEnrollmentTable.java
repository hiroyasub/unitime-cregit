begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.4 (University Timetabling Application)  * Copyright (C) 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EventRpcRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_class
specifier|public
class|class
name|ExaminationEnrollmentTable
extends|extends
name|EnrollmentTable
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ExaminationEnrollmentTable
parameter_list|(
name|boolean
name|showHeader
parameter_list|,
name|boolean
name|online
parameter_list|)
block|{
name|super
argument_list|(
name|showHeader
argument_list|,
name|online
argument_list|)
expr_stmt|;
name|getTable
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Enrollments"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|getHeader
argument_list|()
operator|.
name|showLoading
argument_list|()
expr_stmt|;
if|if
condition|(
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
name|ExaminationEnrollmentsRpcRequest
operator|.
name|getEnrollmentsForExam
argument_list|(
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|getHeader
argument_list|()
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedNoEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|Enrollment
argument_list|>
name|result
parameter_list|)
block|{
name|getHeader
argument_list|()
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExaminationEnrollmentsRpcRequest
extends|extends
name|EventRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
block|{
specifier|private
name|Long
name|iExamId
decl_stmt|;
specifier|public
name|ExaminationEnrollmentsRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|hasExamId
parameter_list|()
block|{
return|return
name|iExamId
operator|!=
literal|null
return|;
block|}
specifier|public
name|Long
name|getExamId
parameter_list|()
block|{
return|return
name|iExamId
return|;
block|}
specifier|public
name|void
name|setExamId
parameter_list|(
name|Long
name|examId
parameter_list|)
block|{
name|iExamId
operator|=
name|examId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasExamId
argument_list|()
condition|?
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"NULL"
operator|)
return|;
block|}
specifier|public
specifier|static
name|ExaminationEnrollmentsRpcRequest
name|getEnrollmentsForExam
parameter_list|(
name|Long
name|examId
parameter_list|)
block|{
name|ExaminationEnrollmentsRpcRequest
name|request
init|=
operator|new
name|ExaminationEnrollmentsRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setExamId
argument_list|(
name|examId
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
block|}
end_class

end_unit

