begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponseList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|RelatedObjectInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|ResourceInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|ExaminationEnrollmentTable
extends|extends
name|EnrollmentTable
block|{
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|ExaminationEnrollmentTable
parameter_list|(
name|boolean
name|showHeader
parameter_list|,
name|boolean
name|online
parameter_list|)
block|{
name|super
argument_list|(
name|showHeader
argument_list|,
name|online
argument_list|)
expr_stmt|;
name|getTable
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Enrollments"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|getHeader
argument_list|()
operator|.
name|showLoading
argument_list|()
expr_stmt|;
if|if
condition|(
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
name|ExaminationEnrollmentsRpcRequest
operator|.
name|getEnrollmentsForExam
argument_list|(
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|getHeader
argument_list|()
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedNoEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GwtRpcResponseList
argument_list|<
name|Enrollment
argument_list|>
name|result
parameter_list|)
block|{
name|getHeader
argument_list|()
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|showStudentSchedule
parameter_list|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|Student
name|student
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|RPC
operator|.
name|execute
argument_list|(
name|ExaminationScheduleRpcRequest
operator|.
name|getScheduleForStudent
argument_list|(
name|getId
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ExaminationScheduleRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ExaminationScheduleRpcResponse
name|result
parameter_list|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTable
argument_list|<
name|RelatedObjectInterface
argument_list|>
name|table
init|=
operator|new
name|UniTimeTable
argument_list|<
name|RelatedObjectInterface
argument_list|>
argument_list|()
decl_stmt|;
name|table
operator|.
name|setStyleName
argument_list|(
literal|"unitime-EventOwners"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|ownersHeader
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasConflicts
init|=
literal|false
decl_stmt|;
for|for
control|(
name|RelatedObjectInterface
name|obj
range|:
name|result
operator|.
name|getExams
argument_list|()
control|)
if|if
condition|(
name|obj
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
name|ownersHeader
operator|.
name|add
argument_list|(
operator|new
name|ClickableUniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflict
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|hasConflicts
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|table
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|ownersHeader
argument_list|)
expr_stmt|;
name|table
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|EventInterface
operator|.
name|RelatedObjectInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|RelatedObjectInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|hasDetailPage
argument_list|()
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getDetailPage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
operator|&&
name|event
operator|.
name|getCol
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|table
operator|.
name|sort
argument_list|(
name|event
operator|.
name|getCol
argument_list|()
argument_list|,
operator|new
name|RelatedObjectComparator
argument_list|(
name|event
operator|.
name|getCol
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|asc
init|=
name|table
operator|.
name|getHeader
argument_list|(
name|event
operator|.
name|getCol
argument_list|()
argument_list|)
operator|.
name|getOrder
argument_list|()
decl_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setRelatedSortBy
argument_list|(
name|asc
condition|?
literal|1
operator|+
name|event
operator|.
name|getCol
argument_list|()
else|:
operator|-
literal|1
operator|-
name|event
operator|.
name|getCol
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
for|for
control|(
name|RelatedObjectInterface
name|obj
range|:
name|result
operator|.
name|getExams
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|course
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|cn
range|:
name|obj
operator|.
name|getCourseNames
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|course
operator|+=
name|cn
expr_stmt|;
block|}
else|else
block|{
name|course
operator|+=
literal|"<span class='cross-list'>"
operator|+
name|cn
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|course
operator|=
name|obj
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|course
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasExternalIds
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ex
range|:
name|obj
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|+=
name|ex
expr_stmt|;
block|}
else|else
block|{
name|section
operator|+=
literal|"<span class='cross-list'>"
operator|+
name|ex
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|obj
operator|.
name|hasSectionNumber
argument_list|()
condition|)
block|{
name|section
operator|=
name|obj
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|section
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|type
init|=
operator|(
name|obj
operator|.
name|hasInstruction
argument_list|()
condition|?
name|obj
operator|.
name|getInstruction
argument_list|()
else|:
name|obj
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|)
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|title
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasCourseTitles
argument_list|()
condition|)
block|{
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|ct
range|:
name|obj
operator|.
name|getCourseTitles
argument_list|()
control|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|!
name|last
operator|.
name|isEmpty
argument_list|()
operator|&&
name|last
operator|.
name|equals
argument_list|(
name|ct
argument_list|)
condition|)
name|ct
operator|=
literal|""
expr_stmt|;
else|else
name|last
operator|=
name|ct
expr_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|title
operator|+=
name|ct
expr_stmt|;
block|}
else|else
block|{
name|title
operator|+=
literal|"<span class='cross-list'>"
operator|+
name|ct
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|title
operator|=
literal|""
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|title
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasDate
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|obj
operator|.
name|getDate
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|obj
operator|.
name|hasTime
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|obj
operator|.
name|getTime
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|location
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasLocations
argument_list|()
condition|)
block|{
for|for
control|(
name|ResourceInterface
name|loc
range|:
name|obj
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|location
operator|+=
operator|(
name|location
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|loc
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|location
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|obj
operator|.
name|getInstructorNames
argument_list|(
literal|"<br>"
argument_list|,
name|MESSAGES
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasConflicts
condition|)
block|{
if|if
condition|(
name|obj
operator|.
name|hasConflicts
argument_list|()
condition|)
block|{
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|obj
operator|.
name|getConflicts
argument_list|()
argument_list|)
decl_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|rowNumber
init|=
name|table
operator|.
name|addRow
argument_list|(
name|obj
argument_list|,
name|row
argument_list|)
decl_stmt|;
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
literal|"owner-row"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|rowNumber
argument_list|)
condition|;
name|i
operator|++
control|)
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowNumber
argument_list|,
name|i
argument_list|,
literal|"owner-cell"
argument_list|)
expr_stmt|;
block|}
name|int
name|sort
init|=
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getRelatedSortBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|sort
operator|>
literal|0
condition|)
name|table
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getHeader
argument_list|(
name|sort
operator|-
literal|1
argument_list|)
argument_list|,
operator|new
name|RelatedObjectComparator
argument_list|(
name|sort
operator|-
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
name|sort
operator|<
literal|0
condition|)
name|table
operator|.
name|sort
argument_list|(
name|table
operator|.
name|getHeader
argument_list|(
operator|-
literal|1
operator|-
name|sort
argument_list|)
argument_list|,
operator|new
name|RelatedObjectComparator
argument_list|(
operator|-
literal|1
operator|-
name|sort
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SimpleForm
name|form
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|table
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeHeaderPanel
name|buttons
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|form
operator|.
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogExaminations
argument_list|(
name|result
operator|.
name|getExamType
argument_list|()
argument_list|,
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|getTable
argument_list|()
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ClickableUniTimeTableHeader
extends|extends
name|UniTimeTableHeader
block|{
specifier|private
name|ClickableUniTimeTableHeader
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|super
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-ClickableTableHeader"
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExaminationEnrollmentsRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|GwtRpcResponseList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
block|{
specifier|private
name|Long
name|iExamId
decl_stmt|;
specifier|public
name|ExaminationEnrollmentsRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|hasExamId
parameter_list|()
block|{
return|return
name|iExamId
operator|!=
literal|null
return|;
block|}
specifier|public
name|Long
name|getExamId
parameter_list|()
block|{
return|return
name|iExamId
return|;
block|}
specifier|public
name|void
name|setExamId
parameter_list|(
name|Long
name|examId
parameter_list|)
block|{
name|iExamId
operator|=
name|examId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasExamId
argument_list|()
condition|?
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"NULL"
operator|)
return|;
block|}
specifier|public
specifier|static
name|ExaminationEnrollmentsRpcRequest
name|getEnrollmentsForExam
parameter_list|(
name|Long
name|examId
parameter_list|)
block|{
name|ExaminationEnrollmentsRpcRequest
name|request
init|=
operator|new
name|ExaminationEnrollmentsRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setExamId
argument_list|(
name|examId
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExaminationScheduleRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|ExaminationScheduleRpcResponse
argument_list|>
block|{
specifier|private
name|Long
name|iExamId
decl_stmt|,
name|iStudentId
decl_stmt|;
specifier|public
name|ExaminationScheduleRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|boolean
name|hasExamId
parameter_list|()
block|{
return|return
name|iExamId
operator|!=
literal|null
return|;
block|}
specifier|public
name|Long
name|getExamId
parameter_list|()
block|{
return|return
name|iExamId
return|;
block|}
specifier|public
name|void
name|setExamId
parameter_list|(
name|Long
name|examId
parameter_list|)
block|{
name|iExamId
operator|=
name|examId
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasStudentId
parameter_list|()
block|{
return|return
name|iStudentId
operator|!=
literal|null
return|;
block|}
specifier|public
name|Long
name|getStudentId
parameter_list|()
block|{
return|return
name|iStudentId
return|;
block|}
specifier|public
name|void
name|setStudentId
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
name|iStudentId
operator|=
name|studentId
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
operator|(
name|hasExamId
argument_list|()
condition|?
name|getExamId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"NULL"
operator|)
operator|+
literal|","
operator|+
operator|(
name|hasStudentId
argument_list|()
condition|?
name|getStudentId
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|"NULL"
operator|)
return|;
block|}
specifier|public
specifier|static
name|ExaminationScheduleRpcRequest
name|getScheduleForStudent
parameter_list|(
name|Long
name|examId
parameter_list|,
name|Long
name|studentId
parameter_list|)
block|{
name|ExaminationScheduleRpcRequest
name|request
init|=
operator|new
name|ExaminationScheduleRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setExamId
argument_list|(
name|examId
argument_list|)
expr_stmt|;
name|request
operator|.
name|setStudentId
argument_list|(
name|studentId
argument_list|)
expr_stmt|;
return|return
name|request
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExaminationScheduleRpcResponse
implements|implements
name|GwtRpcResponse
block|{
specifier|private
name|String
name|iExamType
decl_stmt|;
specifier|private
name|TreeSet
argument_list|<
name|EventInterface
operator|.
name|RelatedObjectInterface
argument_list|>
name|iExams
decl_stmt|;
specifier|public
name|ExaminationScheduleRpcResponse
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getExamType
parameter_list|()
block|{
return|return
name|iExamType
return|;
block|}
specifier|public
name|void
name|setExamType
parameter_list|(
name|String
name|examType
parameter_list|)
block|{
name|iExamType
operator|=
name|examType
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasExams
parameter_list|()
block|{
return|return
name|iExams
operator|!=
literal|null
operator|&&
operator|!
name|iExams
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|void
name|addExam
parameter_list|(
name|EventInterface
operator|.
name|RelatedObjectInterface
name|exam
parameter_list|)
block|{
if|if
condition|(
name|iExams
operator|==
literal|null
condition|)
name|iExams
operator|=
operator|new
name|TreeSet
argument_list|<
name|EventInterface
operator|.
name|RelatedObjectInterface
argument_list|>
argument_list|()
expr_stmt|;
name|iExams
operator|.
name|add
argument_list|(
name|exam
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TreeSet
argument_list|<
name|EventInterface
operator|.
name|RelatedObjectInterface
argument_list|>
name|getExams
parameter_list|()
block|{
return|return
name|iExams
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RelatedObjectComparator
implements|implements
name|Comparator
argument_list|<
name|EventInterface
operator|.
name|RelatedObjectInterface
argument_list|>
block|{
specifier|private
name|int
name|iColumn
decl_stmt|;
specifier|public
name|RelatedObjectComparator
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|iColumn
operator|=
name|column
expr_stmt|;
block|}
specifier|private
name|String
name|course
parameter_list|(
name|RelatedObjectInterface
name|obj
parameter_list|)
block|{
name|String
name|course
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasCourseNames
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|cn
range|:
name|obj
operator|.
name|getCourseNames
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|course
operator|+=
name|cn
expr_stmt|;
block|}
else|else
block|{
name|course
operator|+=
literal|","
operator|+
name|cn
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|course
operator|=
name|obj
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|course
return|;
block|}
specifier|private
name|String
name|section
parameter_list|(
name|RelatedObjectInterface
name|obj
parameter_list|)
block|{
name|String
name|section
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasExternalIds
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|ex
range|:
name|obj
operator|.
name|getExternalIds
argument_list|()
control|)
block|{
if|if
condition|(
name|section
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|section
operator|+=
name|ex
expr_stmt|;
block|}
else|else
block|{
name|section
operator|+=
literal|","
operator|+
name|ex
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|obj
operator|.
name|hasSectionNumber
argument_list|()
condition|)
block|{
name|section
operator|=
name|obj
operator|.
name|getSectionNumber
argument_list|()
expr_stmt|;
block|}
return|return
name|section
return|;
block|}
specifier|private
name|String
name|type
parameter_list|(
name|RelatedObjectInterface
name|obj
parameter_list|)
block|{
return|return
operator|(
name|obj
operator|.
name|hasInstruction
argument_list|()
condition|?
name|obj
operator|.
name|getInstruction
argument_list|()
else|:
name|obj
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
operator|)
return|;
block|}
specifier|private
name|String
name|title
parameter_list|(
name|RelatedObjectInterface
name|obj
parameter_list|)
block|{
name|String
name|title
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasCourseTitles
argument_list|()
condition|)
block|{
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|ct
range|:
name|obj
operator|.
name|getCourseTitles
argument_list|()
control|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
operator|&&
operator|!
name|last
operator|.
name|isEmpty
argument_list|()
operator|&&
name|last
operator|.
name|equals
argument_list|(
name|ct
argument_list|)
condition|)
name|ct
operator|=
literal|""
expr_stmt|;
else|else
name|last
operator|=
name|ct
expr_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|title
operator|+=
name|ct
expr_stmt|;
block|}
else|else
block|{
name|title
operator|+=
literal|","
operator|+
name|ct
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|title
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|title
return|;
block|}
specifier|private
name|String
name|location
parameter_list|(
name|RelatedObjectInterface
name|obj
parameter_list|)
block|{
name|String
name|location
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|obj
operator|.
name|hasLocations
argument_list|()
condition|)
block|{
for|for
control|(
name|ResourceInterface
name|loc
range|:
name|obj
operator|.
name|getLocations
argument_list|()
control|)
block|{
name|location
operator|+=
operator|(
name|location
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"<br>"
operator|)
operator|+
name|loc
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|location
return|;
block|}
specifier|private
name|int
name|compare
parameter_list|(
name|int
name|column
parameter_list|,
name|RelatedObjectInterface
name|o1
parameter_list|,
name|RelatedObjectInterface
name|o2
parameter_list|)
block|{
switch|switch
condition|(
name|column
condition|)
block|{
case|case
literal|0
case|:
return|return
name|course
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|course
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|section
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|section
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|type
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|type
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|title
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|title
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
case|case
literal|4
case|:
name|int
name|cmp
init|=
operator|(
name|o1
operator|.
name|hasDayOfYear
argument_list|()
condition|?
name|o1
operator|.
name|getDayOfYear
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|hasDayOfYear
argument_list|()
condition|?
name|o2
operator|.
name|getDayOfYear
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
case|case
literal|5
case|:
name|cmp
operator|=
operator|(
name|o1
operator|.
name|hasStartSlot
argument_list|()
condition|?
name|o1
operator|.
name|getStartSlot
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|hasStartSlot
argument_list|()
condition|?
name|o2
operator|.
name|getStartSlot
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|o1
operator|.
name|hasEndSlot
argument_list|()
condition|?
name|o1
operator|.
name|getEndSlot
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|hasEndSlot
argument_list|()
condition|?
name|o2
operator|.
name|getEndSlot
argument_list|()
else|:
operator|new
name|Integer
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
return|;
case|case
literal|6
case|:
return|return
name|location
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|location
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
case|case
literal|7
case|:
return|return
operator|(
name|o1
operator|.
name|hasInstructors
argument_list|()
condition|?
name|o1
operator|.
name|getInstructorNames
argument_list|(
literal|","
argument_list|,
name|MESSAGES
argument_list|)
else|:
literal|""
operator|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|hasInstructors
argument_list|()
condition|?
name|o2
operator|.
name|getInstructorNames
argument_list|(
literal|","
argument_list|,
name|MESSAGES
argument_list|)
else|:
literal|""
argument_list|)
return|;
case|case
literal|8
case|:
return|return
operator|(
name|o1
operator|.
name|hasConflicts
argument_list|()
condition|?
name|o1
operator|.
name|getConflicts
argument_list|()
else|:
literal|""
operator|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|o2
operator|.
name|hasConflicts
argument_list|()
condition|?
name|o2
operator|.
name|getConflicts
argument_list|()
else|:
literal|""
argument_list|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RelatedObjectInterface
name|o1
parameter_list|,
name|RelatedObjectInterface
name|o2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|compare
argument_list|(
name|iColumn
argument_list|,
name|o1
argument_list|,
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|course
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|course
argument_list|(
name|o2
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

