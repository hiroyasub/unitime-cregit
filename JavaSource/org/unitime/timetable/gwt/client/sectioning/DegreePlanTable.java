begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreeCourseInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreeGroupInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
operator|.
name|DegreePlaceHolderInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|TakesValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|DegreePlanTable
extends|extends
name|UniTimeTable
argument_list|<
name|Object
argument_list|>
implements|implements
name|TakesValue
argument_list|<
name|DegreePlanInterface
argument_list|>
block|{
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|DegreePlanInterface
name|iPlan
decl_stmt|;
specifier|public
name|DegreePlanTable
parameter_list|()
block|{
name|addStyleName
argument_list|(
literal|"unitine-DegreePlanTable"
argument_list|)
expr_stmt|;
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setAllowMultiSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hIndent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|hIndent
operator|.
name|setWidth
argument_list|(
literal|"16px"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hIndent
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hName
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDegreeItemName
argument_list|()
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|hName
operator|.
name|setWidth
argument_list|(
literal|"120px"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hName
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTitle
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colDegreeItemDescription
argument_list|()
argument_list|)
decl_stmt|;
name|hTitle
operator|.
name|setWidth
argument_list|(
literal|"250px"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTitle
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hLimit
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
decl_stmt|;
name|hLimit
operator|.
name|setWidth
argument_list|(
literal|"70px"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLimit
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hCredit
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|)
decl_stmt|;
name|hCredit
operator|.
name|setWidth
argument_list|(
literal|"50px"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCredit
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hNote
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
decl_stmt|;
name|hNote
operator|.
name|setWidth
argument_list|(
literal|"250px"
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hNote
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DegreePlanInterface
name|getValue
parameter_list|()
block|{
return|return
name|iPlan
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|DegreePlanInterface
name|plan
parameter_list|)
block|{
name|iPlan
operator|=
name|plan
expr_stmt|;
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|plan
operator|.
name|getGroup
argument_list|()
operator|!=
literal|null
condition|)
name|addGroup
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getGroup
argument_list|()
operator|.
name|getMaxDepth
argument_list|()
argument_list|,
name|plan
operator|.
name|getGroup
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addGroup
parameter_list|(
name|int
name|depth
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|DegreeGroupInterface
name|group
parameter_list|,
name|DegreeGroupInterface
name|parent
parameter_list|)
block|{
name|boolean
name|noChoice
init|=
name|group
operator|.
name|isChoiceGroupWithNoChoice
argument_list|()
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|1
operator|&&
operator|!
name|noChoice
condition|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|indent
init|=
operator|new
name|P
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
name|depth
operator|-
literal|1
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentMiddleLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentTopLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
name|depth
operator|+
literal|1
init|;
name|d
operator|<=
name|maxDepth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentTopSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|isChoice
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|ChoiceButton
argument_list|(
name|parent
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|GroupTitleCell
argument_list|(
name|group
operator|.
name|toString
argument_list|(
name|MESSAGES
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|GroupTitleCell
argument_list|(
name|group
operator|.
name|toString
argument_list|(
name|MESSAGES
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|group
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeCourseInterface
name|course
range|:
name|group
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|indent
init|=
operator|new
name|P
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
name|depth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentMiddleLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
name|depth
operator|+
literal|1
init|;
name|d
operator|<=
name|maxDepth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentBlankSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|isChoice
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|ChoiceButton
argument_list|(
name|group
argument_list|,
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|CourseLabel
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|CourseLabel
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|TitleLabel
argument_list|(
name|course
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|course
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|group
operator|.
name|isChoice
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|indent
init|=
operator|new
name|P
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
name|depth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentMiddleLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentTopLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
name|depth
operator|+
literal|2
init|;
name|d
operator|<=
name|maxDepth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentTopSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|isChoice
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|ChoiceButton
argument_list|(
name|group
argument_list|,
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|GroupTitleCell
argument_list|(
name|course
operator|.
name|hasTitle
argument_list|()
condition|?
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|,
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|GroupTitleCell
argument_list|(
name|course
operator|.
name|hasTitle
argument_list|()
condition|?
name|MESSAGES
operator|.
name|courseNameWithTitle
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|,
name|course
operator|.
name|getTitle
argument_list|()
argument_list|)
else|:
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourse
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|addRow
argument_list|(
name|course
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|CourseAssignment
argument_list|>
name|i
init|=
name|course
operator|.
name|getCourses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|CourseAssignment
name|ca
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|indent
init|=
operator|new
name|P
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
name|depth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentMiddleLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|||
name|group
operator|.
name|isChoice
argument_list|()
condition|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentBlankSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentMiddleLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentLastLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
name|depth
operator|+
literal|2
init|;
name|d
operator|<=
name|maxDepth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentBlankSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|indent
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|.
name|isChoice
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|ChoiceButton
argument_list|(
name|group
argument_list|,
name|course
argument_list|,
name|ca
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|CourseLabel
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|hasMultipleCourses
argument_list|()
condition|)
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|ChoiceButton
argument_list|(
name|course
argument_list|,
name|ca
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|CourseLabel
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|CourseLabel
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|ca
operator|.
name|getSubject
argument_list|()
argument_list|,
name|ca
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|TitleLabel
argument_list|(
name|ca
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ca
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|ca
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|ca
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
operator|||
name|ca
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|ca
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
operator|(
name|ca
operator|.
name|getLimit
argument_list|()
operator|-
name|ca
operator|.
name|getEnrollment
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
name|ca
operator|.
name|getLimit
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|ca
operator|.
name|hasCredit
argument_list|()
condition|?
name|ca
operator|.
name|getCreditAbbv
argument_list|()
else|:
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|NoteCell
argument_list|(
name|ca
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|ca
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|group
operator|.
name|hasGroups
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeGroupInterface
name|g
range|:
name|group
operator|.
name|getGroups
argument_list|()
control|)
name|addGroup
argument_list|(
name|depth
operator|+
operator|(
name|noChoice
condition|?
literal|0
else|:
literal|1
operator|)
argument_list|,
name|maxDepth
argument_list|,
name|g
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|.
name|hasPlaceHolders
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreePlaceHolderInterface
name|p
range|:
name|group
operator|.
name|getPlaceHolders
argument_list|()
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|P
name|indent
init|=
operator|new
name|P
argument_list|(
literal|"indent"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
name|depth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentMiddleLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
name|depth
operator|+
literal|1
init|;
name|d
operator|<=
name|maxDepth
condition|;
name|d
operator|++
control|)
name|indent
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentBlankSpace
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|indent
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|PlaceHolderCell
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addRow
argument_list|(
name|p
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|depth
operator|>
literal|1
operator|&&
name|getRowCount
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|noChoice
condition|)
block|{
name|P
name|indent
init|=
operator|(
name|P
operator|)
name|getWidget
argument_list|(
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|indent
operator|.
name|remove
argument_list|(
name|depth
operator|-
literal|2
argument_list|)
expr_stmt|;
name|indent
operator|.
name|insert
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|indentLastLine
argument_list|()
argument_list|)
argument_list|,
name|depth
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|GroupTitleCell
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
specifier|private
name|boolean
name|iHasChoice
decl_stmt|;
specifier|public
name|GroupTitleCell
parameter_list|(
name|String
name|label
parameter_list|,
name|boolean
name|hasChoice
parameter_list|)
block|{
name|super
argument_list|(
name|label
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"grouplabel"
argument_list|)
expr_stmt|;
name|iHasChoice
operator|=
name|hasChoice
expr_stmt|;
name|setTitle
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
operator|(
name|iHasChoice
condition|?
literal|5
else|:
literal|6
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|CourseLabel
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
specifier|private
name|boolean
name|iHasChoice
decl_stmt|;
specifier|public
name|CourseLabel
parameter_list|(
name|String
name|label
parameter_list|,
name|boolean
name|hasChoice
parameter_list|)
block|{
name|super
argument_list|(
name|label
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|iHasChoice
operator|=
name|hasChoice
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
operator|(
name|iHasChoice
condition|?
literal|1
else|:
literal|2
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TitleLabel
extends|extends
name|Label
block|{
specifier|public
name|TitleLabel
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|label
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"title"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PlaceHolderCell
extends|extends
name|Label
implements|implements
name|UniTimeTable
operator|.
name|HasColSpan
block|{
specifier|public
name|PlaceHolderCell
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|label
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"placeholder"
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|label
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|6
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ChoiceButton
extends|extends
name|RadioButton
block|{
specifier|public
name|ChoiceButton
parameter_list|(
specifier|final
name|DegreeGroupInterface
name|parent
parameter_list|,
specifier|final
name|DegreeCourseInterface
name|course
parameter_list|)
block|{
name|super
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|course
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeCourseInterface
name|c
range|:
name|parent
operator|.
name|getCourses
argument_list|()
control|)
name|c
operator|.
name|setSelected
argument_list|(
name|course
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
name|event
operator|.
name|getValue
argument_list|()
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|.
name|hasGroups
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeGroupInterface
name|g
range|:
name|parent
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|g
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ChoiceButton
parameter_list|(
specifier|final
name|DegreeGroupInterface
name|parent
parameter_list|,
specifier|final
name|DegreeGroupInterface
name|group
parameter_list|)
block|{
name|super
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|group
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|parent
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeCourseInterface
name|c
range|:
name|parent
operator|.
name|getCourses
argument_list|()
control|)
name|c
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parent
operator|.
name|hasGroups
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeGroupInterface
name|g
range|:
name|parent
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|g
operator|.
name|setSelected
argument_list|(
name|group
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
name|event
operator|.
name|getValue
argument_list|()
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ChoiceButton
parameter_list|(
specifier|final
name|DegreeCourseInterface
name|parent
parameter_list|,
specifier|final
name|CourseAssignment
name|course
parameter_list|)
block|{
name|super
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getCourseId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|parent
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ChoiceButton
parameter_list|(
specifier|final
name|DegreeGroupInterface
name|group
parameter_list|,
specifier|final
name|DegreeCourseInterface
name|parent
parameter_list|,
specifier|final
name|CourseAssignment
name|course
parameter_list|)
block|{
name|super
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
name|parent
operator|.
name|isSelected
argument_list|()
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|parent
operator|.
name|setCourseId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setName
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|setCourseId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|.
name|hasCourses
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeCourseInterface
name|c
range|:
name|group
operator|.
name|getCourses
argument_list|()
control|)
name|c
operator|.
name|setSelected
argument_list|(
name|parent
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|?
name|event
operator|.
name|getValue
argument_list|()
else|:
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|group
operator|.
name|hasGroups
argument_list|()
condition|)
block|{
for|for
control|(
name|DegreeGroupInterface
name|g
range|:
name|group
operator|.
name|getGroups
argument_list|()
control|)
block|{
name|g
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NoteCell
extends|extends
name|Label
block|{
specifier|public
name|NoteCell
parameter_list|(
name|String
name|label
parameter_list|)
block|{
name|super
argument_list|(
name|label
operator|==
literal|null
condition|?
literal|""
else|:
name|label
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|label
operator|!=
literal|null
operator|&&
operator|!
name|label
operator|.
name|isEmpty
argument_list|()
condition|)
name|setTitle
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

