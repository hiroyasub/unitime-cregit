begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaHiddenLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaTabBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|DataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinder
operator|.
name|CourseFinderCourseDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinder
operator|.
name|ResponseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CodeLabel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|IdValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|StudentSectioningContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|HasSelectionHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WaitListedRequestPreferences
extends|extends
name|UniTimeDialogBox
implements|implements
name|HasValue
argument_list|<
name|Request
argument_list|>
implements|,
name|HasSelectionHandlers
argument_list|<
name|Request
argument_list|>
implements|,
name|KeyUpHandler
block|{
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|GwtMessages
name|GWT_MSG
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|SectioningServiceAsync
name|sSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|Logger
name|sLogger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|WaitListedRequestPreferences
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|requestWaitListedDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|StudentSectioningContext
name|iContext
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|>
name|iTabAccessKeys
init|=
operator|new
name|HashMap
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|CourseAssignment
argument_list|>
name|iCourses
decl_stmt|;
specifier|private
name|FocusPanel
name|iCoursesPanel
decl_stmt|;
specifier|private
name|AriaTabBar
name|iCourseDetailsTabBar
decl_stmt|;
specifier|private
name|ScrollPanel
name|iCourseDetailsPanel
decl_stmt|;
specifier|private
name|CourseFinderCourseDetails
index|[]
name|iDetails
init|=
literal|null
decl_stmt|;
specifier|private
name|P
name|iInstructionalMethodsPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|Preference
argument_list|,
name|CheckBox
argument_list|>
name|iInstructionalMethods
init|=
operator|new
name|HashMap
argument_list|<
name|Preference
argument_list|,
name|CheckBox
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iButtons
decl_stmt|;
specifier|private
name|CourseAssignment
name|iLastDetails
init|=
literal|null
decl_stmt|;
specifier|private
name|Request
name|iRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|ListBox
name|iEnrolledCoursesList
init|=
literal|null
decl_stmt|;
specifier|private
name|CourseRequestLine
name|iLine
init|=
literal|null
decl_stmt|;
specifier|private
name|CheckBox
name|iWaitListed
decl_stmt|;
specifier|private
name|Long
name|iSelectCourseId
init|=
literal|null
decl_stmt|;
specifier|public
name|WaitListedRequestPreferences
parameter_list|(
name|StudentSectioningContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-WaitListedRequestPreferences"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogWaitListedRequestPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|iContext
operator|=
name|context
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iWaitListed
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|checkWaitListSwapWithNewWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propWaitListSwapWithWaitListed
argument_list|()
argument_list|,
name|iWaitListed
argument_list|)
expr_stmt|;
name|iCourses
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|iCourses
operator|.
name|setAllowMultiSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setAllowSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|head
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|head
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colWaitListAndAllowedOverrides
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|CourseAssignment
argument_list|>
name|event
parameter_list|)
block|{
name|updateCourseDetails
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|=
operator|new
name|FocusPanel
argument_list|(
name|iCourses
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|.
name|addStyleName
argument_list|(
literal|"course-table"
argument_list|)
expr_stmt|;
name|iCoursesPanel
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iCourses
operator|.
name|getRowCount
argument_list|()
operator|<
literal|2
operator|||
name|iCourses
operator|.
name|getData
argument_list|(
literal|1
argument_list|)
operator|==
literal|null
condition|)
return|return;
name|int
name|row
init|=
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
condition|)
block|{
if|if
condition|(
name|row
operator|<
literal|0
operator|||
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
operator|+
literal|1
operator|>=
name|iCourses
operator|.
name|getRowCount
argument_list|()
condition|)
name|iCourses
operator|.
name|setSelected
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|iCourses
operator|.
name|setSelected
argument_list|(
name|row
operator|+
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scrollToSelectedRow
argument_list|()
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
condition|)
block|{
if|if
condition|(
name|row
operator|-
literal|1
operator|<
literal|1
condition|)
name|iCourses
operator|.
name|setSelected
argument_list|(
name|iCourses
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|iCourses
operator|.
name|setSelected
argument_list|(
name|row
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scrollToSelectedRow
argument_list|()
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|iTabAccessKeys
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toLowerCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|iCourseDetailsTabBar
operator|.
name|selectTab
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourseDetailsTabBar
operator|=
operator|new
name|AriaTabBar
argument_list|()
expr_stmt|;
name|iCourseDetailsTabBar
operator|.
name|addStyleName
argument_list|(
literal|"course-details-tabs"
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|=
operator|new
name|ScrollPanel
argument_list|()
expr_stmt|;
name|iCourseDetailsPanel
operator|.
name|addStyleName
argument_list|(
literal|"course-details"
argument_list|)
expr_stmt|;
name|iCourseDetailsTabBar
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:WLPrefsTab"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|event
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseDetailsPanel
operator|.
name|setWidget
argument_list|(
name|iDetails
index|[
name|event
operator|.
name|getSelectedItem
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iInstructionalMethodsPanel
operator|=
operator|new
name|P
argument_list|(
literal|"instructional-methods"
argument_list|)
expr_stmt|;
name|iCourseDetailsTabBar
operator|.
name|setRestWidget
argument_list|(
name|iInstructionalMethodsPanel
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iCoursesPanel
argument_list|)
expr_stmt|;
name|P
name|courseDetailsPanel
init|=
operator|new
name|P
argument_list|(
literal|"course-details-panel"
argument_list|)
decl_stmt|;
name|courseDetailsPanel
operator|.
name|add
argument_list|(
name|iCourseDetailsTabBar
argument_list|)
expr_stmt|;
name|courseDetailsPanel
operator|.
name|add
argument_list|(
name|iCourseDetailsPanel
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|courseDetailsPanel
argument_list|)
expr_stmt|;
name|P
name|swapCoursePanel
init|=
operator|new
name|P
argument_list|(
literal|"swap-courses-panel"
argument_list|)
decl_stmt|;
name|iEnrolledCoursesList
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|iEnrolledCoursesList
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemWaitListSwapWithNoCourseOffering
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|swapCoursePanel
operator|.
name|add
argument_list|(
name|iEnrolledCoursesList
argument_list|)
expr_stmt|;
name|swapCoursePanel
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|descWaitListSwapWithCourseOffering
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propWaitListSwapWithCourseOffering
argument_list|()
argument_list|,
name|swapCoursePanel
argument_list|)
expr_stmt|;
name|iButtons
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
expr_stmt|;
name|iButtons
operator|.
name|addButton
argument_list|(
literal|"submit"
argument_list|,
name|MESSAGES
operator|.
name|buttonSubmitWaitListedRequestPreferences
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|onSubmit
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iButtons
operator|.
name|addButton
argument_list|(
literal|"cancel"
argument_list|,
name|MESSAGES
operator|.
name|buttonCloseWaitListedRequestPreferences
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|iButtons
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|CourseFinderDetails
name|details
init|=
operator|new
name|CourseFinderDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iContext
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderClasses
name|classes
init|=
operator|new
name|CourseFinderClasses
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|classes
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|sSectioningService
operator|.
name|listClasses
argument_list|(
name|iContext
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setCourseDetails
argument_list|(
name|classes
argument_list|,
name|details
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONKEYUP
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|onSubmit
parameter_list|()
block|{
name|hide
argument_list|()
expr_stmt|;
name|iLine
operator|.
name|setValue
argument_list|(
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|show
parameter_list|(
name|CourseRequestLine
name|line
parameter_list|)
block|{
name|show
argument_list|(
name|line
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|show
parameter_list|(
name|CourseRequestLine
name|line
parameter_list|,
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return;
name|iLine
operator|=
name|line
expr_stmt|;
name|iSelectCourseId
operator|=
name|courseId
expr_stmt|;
name|Request
name|r
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|setValue
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|iEnrolledCoursesList
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|r
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
block|{
name|iEnrolledCoursesList
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|center
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCoursesPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showWaitListAssigned
parameter_list|(
name|CourseRequestLine
name|line
parameter_list|,
name|Long
name|courseId
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return;
name|iLine
operator|=
name|line
expr_stmt|;
name|iSelectCourseId
operator|=
name|courseId
expr_stmt|;
name|Request
name|req
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|req
operator|.
name|setWaitList
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|req
operator|.
name|setWaitListSwapWithCourseOfferingId
argument_list|(
name|courseId
argument_list|)
expr_stmt|;
name|setValue
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|iEnrolledCoursesList
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCoursesPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showChecked
parameter_list|(
name|CourseRequestLine
name|line
parameter_list|)
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
return|return;
name|iLine
operator|=
name|line
expr_stmt|;
name|setValue
argument_list|(
name|line
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iWaitListed
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEnrolledCoursesList
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCoursesPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|selectLastTab
parameter_list|()
block|{
try|try
block|{
name|int
name|tab
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:WLPrefsTab"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tab
operator|>=
literal|0
operator|||
name|tab
operator|<
name|iCourseDetailsTabBar
operator|.
name|getTabCount
argument_list|()
operator|&&
name|tab
operator|!=
name|iCourseDetailsTabBar
operator|.
name|getSelectedTab
argument_list|()
condition|)
name|iCourseDetailsTabBar
operator|.
name|selectTab
argument_list|(
name|tab
argument_list|,
literal|true
argument_list|)
expr_stmt|;
else|else
name|iCourseDetailsTabBar
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|iCourseDetailsTabBar
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setCourseDetails
parameter_list|(
name|CourseFinderCourseDetails
modifier|...
name|details
parameter_list|)
block|{
name|iDetails
operator|=
name|details
expr_stmt|;
name|int
name|tabIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CourseFinderCourseDetails
name|detail
range|:
name|iDetails
control|)
block|{
name|ScrollPanel
name|panel
init|=
operator|new
name|ScrollPanel
argument_list|(
name|detail
operator|.
name|asWidget
argument_list|()
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel-inner"
argument_list|)
expr_stmt|;
name|panel
operator|.
name|addStyleName
argument_list|(
literal|"course-info"
argument_list|)
expr_stmt|;
name|iCourseDetailsTabBar
operator|.
name|addTab
argument_list|(
name|detail
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Character
name|ch
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|detail
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|null
condition|)
name|iTabAccessKeys
operator|.
name|put
argument_list|(
name|ch
argument_list|,
name|tabIndex
argument_list|)
expr_stmt|;
name|tabIndex
operator|++
expr_stmt|;
block|}
name|selectLastTab
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|updateCourseDetails
parameter_list|()
block|{
if|if
condition|(
name|iLastDetails
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequest
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|equals
argument_list|(
name|iLastDetails
argument_list|)
condition|)
block|{
name|rc
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Preference
argument_list|,
name|CheckBox
argument_list|>
name|e
range|:
name|iInstructionalMethods
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isEnabled
argument_list|()
operator|&&
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
name|rc
operator|.
name|setSelectedIntructionalMethod
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDetails
operator|!=
literal|null
condition|)
for|for
control|(
name|CourseFinderCourseDetails
name|d
range|:
name|iDetails
control|)
name|d
operator|.
name|onGetValue
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|row
init|=
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
name|CourseAssignment
name|record
init|=
name|iCourses
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|iLastDetails
operator|=
name|record
expr_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|iDetails
operator|!=
literal|null
condition|)
for|for
control|(
name|CourseFinderCourseDetails
name|detail
range|:
name|iDetails
control|)
block|{
name|detail
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isVisible
argument_list|()
operator|&&
name|isAttached
argument_list|()
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderNoCourse
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructionalMethodsPanel
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInstructionalMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|RequestedCourse
name|rc
init|=
name|iRequest
operator|.
name|getRequestedCourse
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|CourseFinderCourseDetails
name|detail
range|:
name|iDetails
control|)
block|{
name|detail
operator|.
name|setValue
argument_list|(
name|record
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|record
operator|.
name|hasTitle
argument_list|()
condition|)
block|{
if|if
condition|(
name|record
operator|.
name|hasNote
argument_list|()
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedWithTitleAndNote
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getTitle
argument_list|()
argument_list|,
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedWithTitle
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|record
operator|.
name|hasNote
argument_list|()
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelectedWithNote
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseFinderSelected
argument_list|(
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iCourses
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iInstructionalMethodsPanel
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iInstructionalMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|hasInstructionalMethodSelection
argument_list|()
condition|)
block|{
name|P
name|imp
init|=
operator|new
name|P
argument_list|(
literal|"preference-label"
argument_list|)
decl_stmt|;
name|imp
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|labelInstructionalMethodPreference
argument_list|()
argument_list|)
expr_stmt|;
name|iInstructionalMethodsPanel
operator|.
name|add
argument_list|(
name|imp
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|IdValue
name|m
range|:
name|record
operator|.
name|getInstructionalMethods
argument_list|()
control|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|(
name|m
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|ch
operator|.
name|setValue
argument_list|(
name|rc
operator|.
name|isSelectedIntructionalMethod
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addStyleName
argument_list|(
literal|"instructional-method"
argument_list|)
expr_stmt|;
name|iInstructionalMethodsPanel
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
specifier|final
name|Preference
name|p
init|=
operator|new
name|Preference
argument_list|(
name|m
operator|.
name|getId
argument_list|()
argument_list|,
name|m
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ch
operator|.
name|addStyleName
argument_list|(
literal|"instructional-method"
argument_list|)
expr_stmt|;
name|iInstructionalMethods
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addSelectionHandler
parameter_list|(
name|SelectionHandler
argument_list|<
name|Request
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|SelectionEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|Request
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Request
name|getValue
parameter_list|()
block|{
if|if
condition|(
name|iLastDetails
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequest
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|equals
argument_list|(
name|iLastDetails
argument_list|)
condition|)
block|{
name|rc
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Preference
argument_list|,
name|CheckBox
argument_list|>
name|e
range|:
name|iInstructionalMethods
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isEnabled
argument_list|()
operator|&&
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getValue
argument_list|()
condition|)
name|rc
operator|.
name|setSelectedIntructionalMethod
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDetails
operator|!=
literal|null
condition|)
for|for
control|(
name|CourseFinderCourseDetails
name|d
range|:
name|iDetails
control|)
name|d
operator|.
name|onGetValue
argument_list|(
name|rc
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
for|for
control|(
name|Preference
name|p
range|:
name|rc
operator|.
name|getSelectedClasses
argument_list|()
control|)
name|p
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|iRequest
operator|.
name|setWaitList
argument_list|(
name|iWaitListed
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iRequest
operator|.
name|setWaitListSwapWithCourseOfferingId
argument_list|(
name|iEnrolledCoursesList
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|iEnrolledCoursesList
operator|.
name|getSelectedValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|iRequest
return|;
block|}
specifier|public
name|void
name|setSchedule
parameter_list|(
name|ClassAssignmentInterface
name|lastEnrollment
parameter_list|)
block|{
name|iEnrolledCoursesList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iEnrolledCoursesList
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemWaitListSwapWithNoCourseOffering
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|lastEnrollment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isAssigned
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|isTeachingAssignment
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
name|iEnrolledCoursesList
operator|.
name|addItem
argument_list|(
name|course
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Request
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|Request
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|iRequest
operator|=
operator|new
name|Request
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|.
name|getWaitListedTimeStamp
argument_list|()
operator|==
literal|null
condition|)
block|{
name|iWaitListed
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|checkWaitListSwapWithNewWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|iWaitListed
operator|.
name|addStyleName
argument_list|(
literal|"new-wait-list"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iWaitListed
operator|.
name|setText
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
name|iRequest
operator|.
name|getWaitListedTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iWaitListed
operator|.
name|removeStyleName
argument_list|(
literal|"new-wait-list"
argument_list|)
expr_stmt|;
block|}
name|iWaitListed
operator|.
name|setValue
argument_list|(
name|iRequest
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|iLastDetails
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|iRequest
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|rc
operator|.
name|getSelectedClasses
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isRequired
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|p
operator|.
name|isRequired
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseFinderCourseDetails
name|detail
range|:
name|iDetails
control|)
block|{
name|detail
operator|.
name|onSetValue
argument_list|(
name|iRequest
operator|.
name|getRequestedCourse
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|RequestedCourse
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iEnrolledCoursesList
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequest
operator|.
name|hasWaitListSwapWithCourseOfferingId
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|iEnrolledCoursesList
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|iEnrolledCoursesList
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|iRequest
operator|.
name|getWaitListSwapWithCourseOfferingId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|iEnrolledCoursesList
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|sSectioningService
operator|.
name|getCoursesFromRequest
argument_list|(
name|iContext
argument_list|,
name|value
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
name|result
parameter_list|)
block|{
name|iCourses
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|boolean
name|hasCredit
init|=
literal|false
decl_stmt|,
name|hasNote
init|=
literal|false
decl_stmt|,
name|hasWaitList
init|=
literal|false
decl_stmt|;
name|int
name|selectLineIndex
init|=
literal|1
decl_stmt|;
for|for
control|(
specifier|final
name|CourseAssignment
name|record
range|:
name|result
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|record
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
operator|||
name|record
operator|.
name|getLimit
argument_list|()
operator|==
literal|0
operator|||
name|record
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|record
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
operator|(
name|record
operator|.
name|getLimit
argument_list|()
operator|-
name|record
operator|.
name|getEnrollment
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
name|record
operator|.
name|getLimit
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|record
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|record
operator|.
name|getTitle
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|hasCredit
argument_list|()
condition|)
block|{
name|Label
name|credit
init|=
operator|new
name|Label
argument_list|(
name|record
operator|.
name|getCreditAbbv
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|hasCredit
argument_list|()
condition|)
name|credit
operator|.
name|setTitle
argument_list|(
name|record
operator|.
name|getCreditText
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
name|hasCredit
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|record
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|hasNote
argument_list|()
condition|)
name|hasNote
operator|=
literal|true
expr_stmt|;
name|P
name|wl
init|=
operator|new
name|P
argument_list|(
literal|"courses-wl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|isCanWaitList
argument_list|()
condition|)
block|{
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|courseAllowsForWaitListing
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|courseAllowsForWaitListingTitle
argument_list|(
name|record
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|wl
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|hasWaitList
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|record
operator|.
name|hasOverrides
argument_list|()
condition|)
block|{
for|for
control|(
name|CodeLabel
name|override
range|:
name|record
operator|.
name|getOverrides
argument_list|()
control|)
block|{
name|Label
name|l
init|=
operator|new
name|Label
argument_list|(
name|override
operator|.
name|getCode
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|setTitle
argument_list|(
name|override
operator|.
name|getLabel
argument_list|()
argument_list|)
expr_stmt|;
name|wl
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|hasWaitList
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|line
operator|.
name|add
argument_list|(
name|wl
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|.
name|hasTitle
argument_list|()
condition|)
block|{
if|if
condition|(
name|record
operator|.
name|hasNote
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|AriaHiddenLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourseWithTitleAndNote
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getTitle
argument_list|()
argument_list|,
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|AriaHiddenLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourseWithTitle
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|record
operator|.
name|hasNote
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|AriaHiddenLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourseWithNote
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|record
operator|.
name|getNote
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|AriaHiddenLabel
argument_list|(
name|ARIA
operator|.
name|courseFinderCourse
argument_list|(
name|record
operator|.
name|getSubject
argument_list|()
argument_list|,
name|record
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|lineIdx
init|=
name|iCourses
operator|.
name|addRow
argument_list|(
name|record
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSelectCourseId
operator|!=
literal|null
operator|&&
name|iSelectCourseId
operator|.
name|equals
argument_list|(
name|record
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
name|selectLineIndex
operator|=
name|lineIdx
expr_stmt|;
block|}
name|iCourses
operator|.
name|setColumnVisible
argument_list|(
literal|5
argument_list|,
name|hasCredit
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setColumnVisible
argument_list|(
literal|6
argument_list|,
name|hasNote
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setColumnVisible
argument_list|(
literal|7
argument_list|,
name|hasWaitList
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setSelected
argument_list|(
name|selectLineIndex
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|scrollToSelectedRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|WaitListedRequestPreferences
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
name|ResponseEvent
operator|.
name|fire
argument_list|(
name|WaitListedRequestPreferences
operator|.
name|this
argument_list|,
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iCourses
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|setEmptyMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setText
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|updateCourseDetails
argument_list|()
expr_stmt|;
name|ResponseEvent
operator|.
name|fire
argument_list|(
name|WaitListedRequestPreferences
operator|.
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iInstructionalMethods
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|scrollToSelectedRow
parameter_list|()
block|{
name|int
name|row
init|=
name|iCourses
operator|.
name|getSelectedRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|>=
literal|0
condition|)
name|iCourses
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isAltKeyDown
argument_list|()
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Character
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|iTabAccessKeys
operator|.
name|entrySet
argument_list|()
control|)
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toLowerCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|iCourseDetailsTabBar
operator|.
name|selectTab
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

