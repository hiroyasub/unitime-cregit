begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaCheckBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|ImageButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelectionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelectionHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|RunAsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|VerticalAlign
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseRequestsTable
extends|extends
name|Composite
implements|implements
name|HasValue
argument_list|<
name|CourseRequestInterface
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FlexTable
name|iGrid
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iSessionProvider
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|CourseSelectionBox
index|[]
argument_list|>
name|iCourses
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|CourseSelectionBox
index|[]
argument_list|>
name|iAlternatives
decl_stmt|;
specifier|private
name|Label
name|iTip
decl_stmt|;
specifier|private
name|boolean
name|iOnline
decl_stmt|;
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
name|iCheckForDuplicities
decl_stmt|;
specifier|private
name|boolean
name|iCanWaitList
init|=
literal|true
decl_stmt|;
specifier|public
name|CourseRequestsTable
parameter_list|(
name|AcademicSessionProvider
name|sessionProvider
parameter_list|,
name|boolean
name|online
parameter_list|)
block|{
name|iOnline
operator|=
name|online
expr_stmt|;
name|iSessionProvider
operator|=
name|sessionProvider
expr_stmt|;
name|iGrid
operator|=
operator|new
name|FlexTable
argument_list|()
expr_stmt|;
name|iGrid
operator|.
name|setStylePrimaryName
argument_list|(
literal|"unitime-MainTable"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|addStyleName
argument_list|(
literal|"unitime-BottomLine"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setCellPadding
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setCellSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|"unitime-MainTableHeader"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|idx
argument_list|,
literal|"unitime-MainTableHeaderRow"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setText
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
literal|"unitime-MainTableHeaderNote"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setHTML
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|VerticalAlign
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
name|iCourses
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseSelectionBox
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|iAlternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseSelectionBox
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|iCheckForDuplicities
operator|=
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|source
operator|.
name|isFreeTime
argument_list|()
condition|)
return|return
literal|null
return|;
name|String
name|course
init|=
name|source
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|==
name|source
condition|)
continue|continue;
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
name|MESSAGES
operator|.
name|validationMultiple
argument_list|(
name|course
argument_list|)
return|;
block|}
block|}
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iAlternatives
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|==
name|source
condition|)
continue|continue;
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|course
argument_list|)
condition|)
return|return
name|MESSAGES
operator|.
name|validationMultiple
argument_list|(
name|course
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CourseSelectionBox
index|[]
name|c
init|=
operator|new
name|CourseSelectionBox
index|[]
block|{
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourse
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseFirstAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFirstAlternativeFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseSecondAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseSecondAlternativeFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|9
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setAccessKey
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'1'
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|==
literal|9
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setAccessKey
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
specifier|final
name|AriaCheckBox
name|ch
init|=
operator|new
name|AriaCheckBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedWaitList
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
specifier|final
name|CourseSelectionBox
index|[]
name|x
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|c
index|[
name|j
index|]
operator|.
name|setPrev
argument_list|(
name|x
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|x
index|[
name|j
index|]
operator|.
name|setNext
argument_list|(
name|c
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImageButton
name|up
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|up
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Over
argument_list|()
argument_list|)
decl_stmt|;
name|up
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapUp
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|5
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<=
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
condition|)
block|{
specifier|final
name|ImageButton
name|down
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Over
argument_list|()
argument_list|)
decl_stmt|;
name|down
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|6
argument_list|,
name|down
argument_list|)
expr_stmt|;
name|down
operator|.
name|setAltText
argument_list|(
name|i
operator|+
literal|1
operator|==
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
condition|?
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
else|:
name|ARIA
operator|.
name|altSwapCourseRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
index|[
literal|0
index|]
operator|.
name|setWidth
argument_list|(
literal|"260px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|2
argument_list|,
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|3
argument_list|,
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|4
argument_list|,
name|ch
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|idx
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setWaitList
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|iCourses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
index|[
literal|0
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint1
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
literal|3
argument_list|)
index|[
literal|0
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint3
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
literal|4
argument_list|)
index|[
literal|0
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint4
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
operator|-
literal|1
argument_list|)
index|[
literal|0
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint8
argument_list|()
argument_list|)
expr_stmt|;
name|iTip
operator|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iTip
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|iTip
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|oldText
init|=
name|iTip
operator|.
name|getText
argument_list|()
decl_stmt|;
do|do
block|{
name|iTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldText
operator|.
name|equals
argument_list|(
name|iTip
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
do|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|"unitime-Hint"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
operator|++
argument_list|,
literal|0
argument_list|,
name|iTip
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
literal|"unitime-MainTableHeader"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setText
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsAlternatives
argument_list|()
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
literal|"unitime-MainTableHeaderNote"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setHTML
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsAlternativesNote
argument_list|()
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|VerticalAlign
operator|.
name|BOTTOM
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|numberOfAlternatives
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|iGrid
operator|.
name|setText
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsAlternative
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CourseSelectionBox
index|[]
name|c
init|=
operator|new
name|CourseSelectionBox
index|[]
block|{
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternate
argument_list|(
literal|1
operator|+
name|i
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|i
operator|)
argument_list|)
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateFirstAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFirstFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateSecondAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateSecondFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setAccessKey
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
specifier|final
name|CourseSelectionBox
index|[]
name|x
init|=
operator|(
name|i
operator|==
literal|0
condition|?
name|iCourses
operator|.
name|get
argument_list|(
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|iAlternatives
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|c
index|[
name|j
index|]
operator|.
name|setPrev
argument_list|(
name|x
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|x
index|[
name|j
index|]
operator|.
name|setNext
argument_list|(
name|c
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImageButton
name|up
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|up
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Over
argument_list|()
argument_list|)
decl_stmt|;
name|up
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapUp
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|4
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAltText
argument_list|(
name|i
operator|==
literal|0
condition|?
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
argument_list|,
literal|1
argument_list|)
else|:
name|ARIA
operator|.
name|altSwapAlternateRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|CONSTANTS
operator|.
name|numberOfAlternatives
argument_list|()
operator|-
literal|1
condition|)
block|{
specifier|final
name|ImageButton
name|down
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Over
argument_list|()
argument_list|)
decl_stmt|;
name|down
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|5
argument_list|,
name|down
argument_list|)
expr_stmt|;
name|down
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapAlternateRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
index|[
literal|0
index|]
operator|.
name|setWidth
argument_list|(
literal|"260px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|2
argument_list|,
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|3
argument_list|,
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|idx
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|iAlternatives
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
name|iAlternatives
operator|.
name|get
argument_list|(
literal|0
argument_list|)
index|[
literal|0
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintA0
argument_list|()
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iGrid
argument_list|)
expr_stmt|;
name|initAsync
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|initAsync
parameter_list|()
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|RunAsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCourseLine
parameter_list|()
block|{
name|int
name|i
init|=
name|iCourses
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|1
operator|+
name|i
decl_stmt|;
name|iGrid
operator|.
name|insertRow
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setText
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CourseSelectionBox
index|[]
name|c
init|=
operator|new
name|CourseSelectionBox
index|[]
block|{
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourse
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseFirstAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseFirstAlternativeFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedCourseSecondAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedCourseSecondAlternativeFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
literal|9
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setAccessKey
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'1'
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|==
literal|9
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setAccessKey
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
specifier|final
name|AriaCheckBox
name|ch
init|=
operator|new
name|AriaCheckBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedWaitList
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|CourseSelectionBox
index|[]
name|x
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|c
index|[
name|j
index|]
operator|.
name|setPrev
argument_list|(
name|x
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|x
index|[
name|j
index|]
operator|.
name|setNext
argument_list|(
name|c
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|CourseSelectionBox
index|[]
name|y
init|=
name|iAlternatives
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|c
index|[
name|j
index|]
operator|.
name|setNext
argument_list|(
name|y
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|y
index|[
name|j
index|]
operator|.
name|setPrev
argument_list|(
name|c
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
specifier|final
name|ImageButton
name|up
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|up
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Over
argument_list|()
argument_list|)
decl_stmt|;
name|up
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapUp
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|5
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImageButton
name|down
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Over
argument_list|()
argument_list|)
decl_stmt|;
name|down
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|6
argument_list|,
name|down
argument_list|)
expr_stmt|;
name|down
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ImageButton
operator|)
name|iGrid
operator|.
name|getWidget
argument_list|(
name|idx
operator|-
literal|1
argument_list|,
literal|6
argument_list|)
operator|)
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseRequest
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ImageButton
operator|)
name|iGrid
operator|.
name|getWidget
argument_list|(
name|idx
operator|+
literal|3
argument_list|,
literal|4
argument_list|)
operator|)
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
index|[
literal|0
index|]
operator|.
name|setWidth
argument_list|(
literal|"260px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|2
argument_list|,
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|3
argument_list|,
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|4
argument_list|,
name|ch
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|idx
argument_list|,
literal|4
argument_list|,
name|iCanWaitList
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|idx
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setWaitList
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
name|c
operator|==
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
name|addCourseLine
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt2
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationNoCourse
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|1
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationSecondAltWithoutFirst
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|2
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAlternativeLine
parameter_list|()
block|{
name|int
name|i
init|=
name|iAlternatives
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
literal|3
operator|+
name|iCourses
operator|.
name|size
argument_list|()
operator|+
name|i
decl_stmt|;
name|iGrid
operator|.
name|insertRow
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setText
argument_list|(
name|idx
argument_list|,
literal|0
argument_list|,
name|MESSAGES
operator|.
name|courseRequestsAlternative
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CourseSelectionBox
index|[]
name|c
init|=
operator|new
name|CourseSelectionBox
index|[]
block|{
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|,
operator|new
name|CourseSelectionBox
argument_list|(
name|iSessionProvider
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
block|}
decl_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternate
argument_list|(
literal|1
operator|+
name|i
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|i
operator|)
argument_list|)
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateFirstAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateFirstFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setLabel
argument_list|(
name|ARIA
operator|.
name|titleRequestedAlternateSecondAlternative
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|,
name|ARIA
operator|.
name|altRequestedAlternateSecondFinder
argument_list|(
literal|1
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setAccessKey
argument_list|(
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
literal|'a'
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
condition|)
block|{
specifier|final
name|CourseSelectionBox
index|[]
name|x
init|=
name|iAlternatives
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
name|j
operator|++
control|)
block|{
name|c
index|[
name|j
index|]
operator|.
name|setPrev
argument_list|(
name|x
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|x
index|[
name|j
index|]
operator|.
name|setNext
argument_list|(
name|c
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ImageButton
name|up
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|up
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|up_Over
argument_list|()
argument_list|)
decl_stmt|;
name|up
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|swapUp
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|4
argument_list|,
name|up
argument_list|)
expr_stmt|;
name|up
operator|.
name|setAltText
argument_list|(
name|i
operator|==
literal|0
condition|?
name|ARIA
operator|.
name|altSwapCourseAlternateRequest
argument_list|(
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
argument_list|,
literal|1
argument_list|)
else|:
name|ARIA
operator|.
name|altSwapAlternateRequest
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ImageButton
name|down
init|=
operator|new
name|ImageButton
argument_list|(
name|RESOURCES
operator|.
name|down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Down
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|down_Over
argument_list|()
argument_list|)
decl_stmt|;
name|down
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|x
index|[
literal|0
index|]
operator|.
name|swapDown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
operator|-
literal|1
argument_list|,
literal|5
argument_list|,
name|down
argument_list|)
expr_stmt|;
name|down
operator|.
name|setAltText
argument_list|(
name|ARIA
operator|.
name|altSwapAlternateRequest
argument_list|(
name|i
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|c
index|[
literal|0
index|]
operator|.
name|setWidth
argument_list|(
literal|"260px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setWidth
argument_list|(
literal|"170px"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|1
argument_list|,
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|2
argument_list|,
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|setWidget
argument_list|(
name|idx
argument_list|,
literal|3
argument_list|,
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|idx
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
name|iAlternatives
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
name|c
operator|==
name|iAlternatives
operator|.
name|get
argument_list|(
name|iAlternatives
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
name|addAlternativeLine
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt2
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationNoCourse
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|1
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationSecondAltWithoutFirst
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|2
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
for|for
control|(
specifier|final
name|CourseSelectionBox
index|[]
name|c
range|:
name|iCourses
control|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
name|c
operator|==
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
name|addCourseLine
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt2
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationNoCourse
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|1
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationSecondAltWithoutFirst
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|2
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|CourseSelectionBox
index|[]
name|c
range|:
name|iAlternatives
control|)
block|{
name|c
index|[
literal|0
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|0
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|c
index|[
literal|1
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
name|c
operator|==
name|iAlternatives
operator|.
name|get
argument_list|(
name|iAlternatives
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
condition|)
name|addAlternativeLine
argument_list|()
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|1
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintAlt2
argument_list|(
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|,
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|c
index|[
literal|2
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addCourseSelectionHandler
argument_list|(
operator|new
name|CourseSelectionHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onCourseSelection
parameter_list|(
name|CourseSelectionEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isValid
argument_list|()
condition|)
name|c
index|[
literal|2
index|]
operator|.
name|setError
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationNoCourse
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|1
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationSecondAltWithoutFirst
argument_list|()
return|;
block|}
if|if
condition|(
operator|!
name|c
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|c
index|[
literal|0
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationFreeTimeWithAlt
argument_list|()
return|;
block|}
if|if
condition|(
name|c
index|[
literal|2
index|]
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
return|return
name|MESSAGES
operator|.
name|validationAltFreeTime
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setAlternative
argument_list|(
name|c
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|setPrimary
argument_list|(
name|c
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|c
index|[
literal|0
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|1
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
name|c
index|[
literal|2
index|]
operator|.
name|addValidator
argument_list|(
name|iCheckForDuplicities
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setCanWaitList
parameter_list|(
name|boolean
name|canWaitList
parameter_list|)
block|{
name|iCanWaitList
operator|=
name|canWaitList
expr_stmt|;
name|iGrid
operator|.
name|setHTML
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|iCanWaitList
condition|?
name|MESSAGES
operator|.
name|courseRequestsWaitList
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iCourses
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|iGrid
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|1
operator|+
name|i
argument_list|,
literal|4
argument_list|,
name|iCanWaitList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|String
name|failed
init|=
literal|null
decl_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsValidating
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CourseSelectionBox
index|[]
name|c
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|CourseSelectionBox
name|x
range|:
name|c
control|)
block|{
name|String
name|message
init|=
name|x
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|failed
operator|=
name|message
expr_stmt|;
block|}
block|}
name|CourseRequestInterface
name|cr
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setAcademicSessionId
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCourses
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|fillInAlternatives
argument_list|(
name|cr
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|success
init|=
operator|(
name|failed
operator|==
literal|null
operator|)
decl_stmt|;
name|iSectioningService
operator|.
name|checkCourses
argument_list|(
name|iOnline
argument_list|,
name|cr
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|String
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|course
range|:
name|result
control|)
name|setError
argument_list|(
name|course
argument_list|,
name|MESSAGES
operator|.
name|validationCourseNotExists
argument_list|(
name|course
argument_list|)
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
name|success
operator|&&
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|course
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|GWT
operator|.
name|log
argument_list|(
name|error
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|c
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|c
index|[
name|i
index|]
operator|.
name|getError
argument_list|()
operator|==
literal|null
condition|)
name|c
index|[
name|i
index|]
operator|.
name|setError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iAlternatives
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|c
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|c
index|[
name|i
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|&&
name|c
index|[
name|i
index|]
operator|.
name|getError
argument_list|()
operator|==
literal|null
condition|)
name|c
index|[
name|i
index|]
operator|.
name|setError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|changeTip
parameter_list|()
block|{
name|iTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fillInCourses
parameter_list|(
name|CourseRequestInterface
name|cr
parameter_list|)
block|{
for|for
control|(
name|CourseSelectionBox
index|[]
name|course
range|:
name|iCourses
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|req
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|course
index|[
literal|0
index|]
operator|.
name|fillInFreeTime
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRequestedCourse
argument_list|(
name|course
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFirstAlternative
argument_list|(
name|course
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setSecondAlternative
argument_list|(
name|course
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setWaitList
argument_list|(
name|course
index|[
literal|0
index|]
operator|.
name|getWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fillInAlternatives
parameter_list|(
name|CourseRequestInterface
name|cr
parameter_list|)
block|{
for|for
control|(
name|CourseSelectionBox
index|[]
name|course
range|:
name|iAlternatives
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|req
init|=
operator|new
name|CourseRequestInterface
operator|.
name|Request
argument_list|()
decl_stmt|;
name|req
operator|.
name|setRequestedCourse
argument_list|(
name|course
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setFirstAlternative
argument_list|(
name|course
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|setSecondAlternative
argument_list|(
name|course
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
name|CourseRequestInterface
name|cr
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setAcademicSessionId
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCourses
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|fillInAlternatives
argument_list|(
name|cr
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
specifier|public
name|void
name|setRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
while|while
condition|(
name|iCourses
operator|.
name|size
argument_list|()
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|addCourseLine
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|iCourses
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|0
index|]
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getRequestedCourse
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|1
index|]
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getFirstAlternative
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|2
index|]
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getSecondAlternative
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|0
index|]
operator|.
name|setWaitList
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|isWaitList
argument_list|()
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|iAlternatives
operator|.
name|size
argument_list|()
operator|<
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|addAlternativeLine
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|iAlternatives
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|0
index|]
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getRequestedCourse
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iAlternatives
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|1
index|]
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getFirstAlternative
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iAlternatives
operator|.
name|get
argument_list|(
name|idx
argument_list|)
index|[
literal|2
index|]
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getSecondAlternative
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Boolean
name|getWaitList
parameter_list|(
name|String
name|course
parameter_list|)
block|{
if|if
condition|(
name|iCanWaitList
condition|)
for|for
control|(
name|CourseSelectionBox
index|[]
name|line
range|:
name|iCourses
control|)
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|line
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|equals
argument_list|(
name|line
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|equals
argument_list|(
name|line
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|line
index|[
literal|0
index|]
operator|.
name|getWaitList
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|String
name|course
parameter_list|,
name|boolean
name|waitList
parameter_list|)
block|{
for|for
control|(
name|CourseSelectionBox
index|[]
name|line
range|:
name|iCourses
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|line
index|[
literal|0
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|equals
argument_list|(
name|line
index|[
literal|1
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
operator|||
name|course
operator|.
name|equals
argument_list|(
name|line
index|[
literal|2
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
name|line
index|[
literal|0
index|]
operator|.
name|setWaitList
argument_list|(
name|waitList
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|iTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|c
index|[
name|i
index|]
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|c
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
index|[
name|i
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
name|c
index|[
literal|0
index|]
operator|.
name|setWaitList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iAlternatives
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|c
index|[
name|i
index|]
operator|.
name|setValue
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|c
index|[
name|i
index|]
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|c
index|[
name|i
index|]
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|String
name|getFirstError
parameter_list|()
block|{
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|c
index|[
name|i
index|]
operator|.
name|getError
argument_list|()
return|;
block|}
block|}
for|for
control|(
name|CourseSelectionBox
index|[]
name|c
range|:
name|iAlternatives
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|c
index|[
name|i
index|]
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|c
index|[
name|i
index|]
operator|.
name|getError
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|getValue
parameter_list|()
block|{
return|return
name|getRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|CourseRequestInterface
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|CourseRequestInterface
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|setRequest
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

