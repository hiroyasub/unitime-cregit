begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|CourseRequestLine
operator|.
name|CourseSelectionBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseSelection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CourseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|CourseRequestsTable
extends|extends
name|P
implements|implements
name|HasValue
argument_list|<
name|CourseRequestInterface
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iSessionProvider
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|CourseRequestLine
argument_list|>
name|iCourses
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|CourseRequestLine
argument_list|>
name|iAlternatives
decl_stmt|;
specifier|private
name|Label
name|iTip
decl_stmt|;
specifier|private
name|boolean
name|iSectioning
decl_stmt|;
specifier|private
name|boolean
name|iOnline
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSpecReg
decl_stmt|;
specifier|private
name|CheckCoursesResponse
name|iLastCheck
decl_stmt|;
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
name|iCheckForDuplicities
decl_stmt|;
specifier|private
name|boolean
name|iCanWaitList
init|=
literal|true
decl_stmt|;
specifier|private
name|P
name|iHeader
decl_stmt|,
name|iHeaderTitle
decl_stmt|,
name|iHeaderWaitlist
decl_stmt|;
specifier|private
name|P
name|iAltHeader
decl_stmt|,
name|iAltHeaderTitle
decl_stmt|,
name|iAltHeaderNote
decl_stmt|;
specifier|private
name|boolean
name|iArrowsVisible
init|=
literal|true
decl_stmt|;
specifier|public
name|CourseRequestsTable
parameter_list|(
name|AcademicSessionProvider
name|sessionProvider
parameter_list|,
name|boolean
name|sectioning
parameter_list|,
name|boolean
name|online
parameter_list|,
name|SpecialRegistrationContext
name|specreg
parameter_list|)
block|{
name|super
argument_list|(
literal|"unitime-CourseRequests"
argument_list|)
expr_stmt|;
name|iSectioning
operator|=
name|sectioning
expr_stmt|;
name|iOnline
operator|=
name|online
expr_stmt|;
name|iSessionProvider
operator|=
name|sessionProvider
expr_stmt|;
name|iSpecReg
operator|=
name|specreg
expr_stmt|;
name|iHeader
operator|=
operator|new
name|P
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|iHeaderTitle
operator|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
expr_stmt|;
name|iHeaderTitle
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsCourses
argument_list|()
argument_list|)
expr_stmt|;
name|iHeaderWaitlist
operator|=
operator|new
name|P
argument_list|(
literal|"waitlist"
argument_list|)
expr_stmt|;
name|iHeaderWaitlist
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsWaitList
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|iHeaderTitle
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|iHeaderWaitlist
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iCourses
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequestLine
argument_list|>
argument_list|()
expr_stmt|;
name|iAlternatives
operator|=
operator|new
name|ArrayList
argument_list|<
name|CourseRequestLine
argument_list|>
argument_list|()
expr_stmt|;
name|iCheckForDuplicities
operator|=
operator|new
name|Validator
argument_list|<
name|CourseSelection
argument_list|>
argument_list|()
block|{
specifier|public
name|String
name|validate
parameter_list|(
name|CourseSelection
name|source
parameter_list|)
block|{
name|RequestedCourse
name|course
init|=
name|source
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
return|return
literal|null
return|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|c
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|source
condition|)
continue|continue;
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|MESSAGES
operator|.
name|validationMultiple
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
return|;
block|}
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
for|for
control|(
name|CourseSelectionBox
name|c
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|source
condition|)
continue|continue;
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|MESSAGES
operator|.
name|validationMultiple
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|CourseRequestLine
name|line
init|=
operator|new
name|CourseRequestLine
argument_list|(
name|iSessionProvider
argument_list|,
name|i
argument_list|,
literal|false
argument_list|,
name|iCheckForDuplicities
argument_list|,
name|iSectioning
argument_list|,
name|iSpecReg
argument_list|)
decl_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|CourseRequestLine
name|prev
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|line
operator|.
name|setPrevious
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Request
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|iLastCheck
operator|.
name|getMessage
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iLastCheck
operator|.
name|isError
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|iLastCheck
operator|.
name|isConfirm
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|iCourses
operator|.
name|indexOf
argument_list|(
name|line
argument_list|)
operator|+
literal|1
operator|==
name|iCourses
operator|.
name|size
argument_list|()
condition|)
name|addCourseLine
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|iCourses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint1
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint3
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint4
argument_list|()
argument_list|)
expr_stmt|;
name|iCourses
operator|.
name|get
argument_list|(
name|CONSTANTS
operator|.
name|numberOfCourses
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint8
argument_list|()
argument_list|)
expr_stmt|;
name|iTip
operator|=
operator|new
name|Label
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|disableTextSelectInternal
argument_list|(
name|iTip
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|iTip
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|String
name|oldText
init|=
name|iTip
operator|.
name|getText
argument_list|()
decl_stmt|;
do|do
block|{
name|iTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|oldText
operator|.
name|equals
argument_list|(
name|iTip
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
do|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTip
operator|.
name|addStyleName
argument_list|(
literal|"tip"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iTip
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|numberOfAlternatives
argument_list|()
operator|>
literal|0
condition|)
block|{
name|iAltHeader
operator|=
operator|new
name|P
argument_list|(
literal|"alt-header"
argument_list|)
expr_stmt|;
name|iAltHeaderTitle
operator|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
expr_stmt|;
name|iAltHeaderTitle
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsAlternatives
argument_list|()
argument_list|)
expr_stmt|;
name|iAltHeaderNote
operator|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
name|iAltHeaderNote
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsAlternativesNote
argument_list|()
argument_list|)
expr_stmt|;
name|iAltHeader
operator|.
name|add
argument_list|(
name|iAltHeaderTitle
argument_list|)
expr_stmt|;
name|iAltHeader
operator|.
name|add
argument_list|(
name|iAltHeaderNote
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iAltHeader
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|CONSTANTS
operator|.
name|numberOfAlternatives
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|CourseRequestLine
name|line
init|=
operator|new
name|CourseRequestLine
argument_list|(
name|iSessionProvider
argument_list|,
name|i
argument_list|,
literal|true
argument_list|,
name|iCheckForDuplicities
argument_list|,
name|iSectioning
argument_list|,
name|iSpecReg
argument_list|)
decl_stmt|;
name|iAlternatives
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|CourseRequestLine
name|prev
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|line
operator|.
name|setPrevious
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseRequestLine
name|prev
init|=
name|iAlternatives
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|line
operator|.
name|setPrevious
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Request
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|iLastCheck
operator|.
name|getMessage
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iLastCheck
operator|.
name|isError
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|iLastCheck
operator|.
name|isConfirm
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|iAlternatives
operator|.
name|indexOf
argument_list|(
name|line
argument_list|)
operator|+
literal|1
operator|==
name|iAlternatives
operator|.
name|size
argument_list|()
condition|)
name|addAlternativeLine
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|CONSTANTS
operator|.
name|numberOfAlternatives
argument_list|()
operator|>
literal|0
condition|)
name|iAlternatives
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHintA0
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addCourseLine
parameter_list|()
block|{
name|int
name|i
init|=
name|iCourses
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|CourseRequestLine
name|line
init|=
operator|new
name|CourseRequestLine
argument_list|(
name|iSessionProvider
argument_list|,
name|i
argument_list|,
literal|false
argument_list|,
name|iCheckForDuplicities
argument_list|,
name|iSectioning
argument_list|,
name|iSpecReg
argument_list|)
decl_stmt|;
name|iCourses
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|CourseRequestLine
name|prev
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|prev
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|line
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|setHint
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsHint8
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestLine
name|next
init|=
operator|(
name|iAlternatives
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|iAlternatives
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
name|line
operator|.
name|setPrevious
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|setNext
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|.
name|setPrevious
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|setArrowsVisible
argument_list|(
name|iArrowsVisible
argument_list|)
expr_stmt|;
name|line
operator|.
name|setWaitListVisible
argument_list|(
name|iCanWaitList
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|line
argument_list|,
literal|1
operator|+
name|i
argument_list|)
expr_stmt|;
name|line
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Request
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|iLastCheck
operator|.
name|getMessage
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iLastCheck
operator|.
name|isError
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|iLastCheck
operator|.
name|isConfirm
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|iCourses
operator|.
name|indexOf
argument_list|(
name|line
argument_list|)
operator|+
literal|1
operator|==
name|iCourses
operator|.
name|size
argument_list|()
condition|)
name|addCourseLine
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addAlternativeLine
parameter_list|()
block|{
if|if
condition|(
name|iAlternatives
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iAltHeader
operator|=
operator|new
name|P
argument_list|(
literal|"alt-header"
argument_list|)
expr_stmt|;
name|iAltHeaderTitle
operator|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
expr_stmt|;
name|iAltHeaderTitle
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsAlternatives
argument_list|()
argument_list|)
expr_stmt|;
name|iAltHeaderNote
operator|=
operator|new
name|P
argument_list|(
literal|"note"
argument_list|)
expr_stmt|;
name|iAltHeaderNote
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsAlternativesNote
argument_list|()
argument_list|)
expr_stmt|;
name|iAltHeader
operator|.
name|add
argument_list|(
name|iAltHeaderTitle
argument_list|)
expr_stmt|;
name|iAltHeader
operator|.
name|add
argument_list|(
name|iAltHeaderNote
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iAltHeader
argument_list|)
expr_stmt|;
block|}
name|int
name|i
init|=
name|iAlternatives
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|CourseRequestLine
name|line
init|=
operator|new
name|CourseRequestLine
argument_list|(
name|iSessionProvider
argument_list|,
name|i
argument_list|,
literal|true
argument_list|,
name|iCheckForDuplicities
argument_list|,
name|iSectioning
argument_list|,
name|iSpecReg
argument_list|)
decl_stmt|;
name|iAlternatives
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|CourseRequestLine
name|prev
init|=
operator|(
name|i
operator|==
literal|0
condition|?
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|iAlternatives
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|line
operator|.
name|setPrevious
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setNext
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|setArrowsVisible
argument_list|(
name|iArrowsVisible
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|line
argument_list|,
literal|3
operator|+
name|iCourses
operator|.
name|size
argument_list|()
operator|+
name|i
argument_list|)
expr_stmt|;
name|line
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
operator|.
name|Request
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Request
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|iLastCheck
operator|.
name|getMessage
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iLastCheck
operator|.
name|isError
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|iLastCheck
operator|.
name|isConfirm
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|CourseRequestsTable
operator|.
name|this
argument_list|,
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
operator|&&
name|iAlternatives
operator|.
name|indexOf
argument_list|(
name|line
argument_list|)
operator|+
literal|1
operator|==
name|iAlternatives
operator|.
name|size
argument_list|()
condition|)
name|addAlternativeLine
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCanWaitList
parameter_list|(
name|boolean
name|canWaitList
parameter_list|)
block|{
name|iCanWaitList
operator|=
name|canWaitList
expr_stmt|;
name|iHeaderWaitlist
operator|.
name|setVisible
argument_list|(
name|canWaitList
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
name|line
operator|.
name|setWaitListVisible
argument_list|(
name|canWaitList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setArrowsVisible
parameter_list|(
name|boolean
name|arrowsVisible
parameter_list|)
block|{
name|iArrowsVisible
operator|=
name|arrowsVisible
expr_stmt|;
name|iHeaderWaitlist
operator|.
name|setHTML
argument_list|(
name|arrowsVisible
condition|?
name|MESSAGES
operator|.
name|courseRequestsWaitList
argument_list|()
else|:
name|MESSAGES
operator|.
name|courseRequestsWaitListNoArrows
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setStyleName
argument_list|(
literal|"noarrows"
argument_list|,
operator|!
name|arrowsVisible
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
name|line
operator|.
name|setArrowsVisible
argument_list|(
name|arrowsVisible
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
name|line
operator|.
name|setArrowsVisible
argument_list|(
name|arrowsVisible
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|validate
argument_list|(
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|validate
parameter_list|(
name|Boolean
name|updateLastRequest
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
try|try
block|{
name|iLastCheck
operator|=
literal|null
expr_stmt|;
name|String
name|failed
init|=
literal|null
decl_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsValidating
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
name|String
name|message
init|=
name|line
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|failed
operator|=
name|message
expr_stmt|;
block|}
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
block|{
name|String
name|message
init|=
name|line
operator|.
name|validate
argument_list|()
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|failed
operator|=
name|message
expr_stmt|;
block|}
specifier|final
name|CourseRequestInterface
name|cr
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setAcademicSessionId
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
operator|.
name|getAcademicSessionId
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SectioningException
argument_list|(
name|MESSAGES
operator|.
name|sessionSelectorNoSession
argument_list|()
argument_list|)
throw|;
name|fillInCourses
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|fillInAlternatives
argument_list|(
name|cr
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateLastRequest
operator|!=
literal|null
condition|)
name|cr
operator|.
name|setUpdateLastRequest
argument_list|(
name|updateLastRequest
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|success
init|=
operator|(
name|failed
operator|==
literal|null
operator|)
decl_stmt|;
name|iSectioningService
operator|.
name|checkCourses
argument_list|(
name|iOnline
argument_list|,
name|iSectioning
argument_list|,
name|cr
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|CheckCoursesResponse
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|CheckCoursesResponse
name|result
parameter_list|)
block|{
name|iLastCheck
operator|=
name|result
expr_stmt|;
name|setErrors
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isError
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|success
operator|&&
name|result
operator|.
name|isConfirm
argument_list|()
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|it
init|=
name|result
operator|.
name|getConfirms
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|result
operator|.
name|getConfirmations
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|success
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setError
parameter_list|(
name|String
name|course
parameter_list|,
name|String
name|error
parameter_list|)
block|{
name|GWT
operator|.
name|log
argument_list|(
name|error
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|setErrors
parameter_list|(
name|CheckCoursesResponse
name|response
parameter_list|)
block|{
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|response
operator|.
name|getMessage
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|isError
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|response
operator|.
name|isConfirm
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
block|{
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
block|{
name|String
name|message
init|=
name|response
operator|.
name|getMessage
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|,
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|response
operator|.
name|isError
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
operator|||
name|response
operator|.
name|isConfirm
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|box
operator|.
name|setError
argument_list|(
name|message
argument_list|)
expr_stmt|;
else|else
name|box
operator|.
name|setWarning
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|changeTip
parameter_list|()
block|{
name|iTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fillInCourses
parameter_list|(
name|CourseRequestInterface
name|cr
parameter_list|)
block|{
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|req
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|cr
operator|.
name|getCourses
argument_list|()
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|fillInAlternatives
parameter_list|(
name|CourseRequestInterface
name|cr
parameter_list|)
block|{
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
block|{
name|CourseRequestInterface
operator|.
name|Request
name|req
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|req
operator|!=
literal|null
condition|)
name|cr
operator|.
name|getAlternatives
argument_list|()
operator|.
name|add
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
name|CourseRequestInterface
name|cr
init|=
operator|new
name|CourseRequestInterface
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setAcademicSessionId
argument_list|(
name|iSessionProvider
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|fillInCourses
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|fillInAlternatives
argument_list|(
name|cr
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setTimeConflictsAllowed
argument_list|(
name|iSpecReg
operator|.
name|isSpecRegMode
argument_list|()
operator|&&
name|iSpecReg
operator|.
name|isDisclaimerAccepted
argument_list|()
operator|&&
name|iSpecReg
operator|.
name|areTimeConflictsAllowed
argument_list|()
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setSpaceConflictsAllowed
argument_list|(
name|iSpecReg
operator|.
name|isSpecRegMode
argument_list|()
operator|&&
name|iSpecReg
operator|.
name|isDisclaimerAccepted
argument_list|()
operator|&&
name|iSpecReg
operator|.
name|areSpaceConflictsAllowed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
condition|)
name|cr
operator|.
name|setConfirmations
argument_list|(
name|iLastCheck
operator|.
name|getMessages
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|cr
return|;
block|}
specifier|public
name|void
name|setRequest
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|iCourses
operator|.
name|size
argument_list|()
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|addCourseLine
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|iCourses
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getCourses
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
name|iAlternatives
operator|.
name|size
argument_list|()
operator|<
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
condition|)
name|addAlternativeLine
argument_list|()
expr_stmt|;
empty_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|idx
operator|++
control|)
name|iAlternatives
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|setValue
argument_list|(
name|request
operator|.
name|getAlternatives
argument_list|()
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
name|iLastCheck
operator|=
operator|new
name|CheckCoursesResponse
argument_list|(
name|request
operator|.
name|getConfirmations
argument_list|()
argument_list|)
expr_stmt|;
name|setErrors
argument_list|(
name|iLastCheck
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iLastCheck
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|notifySaveSucceeded
parameter_list|()
block|{
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
operator|&&
name|iLastCheck
operator|.
name|hasMessages
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseMessage
name|m
range|:
name|iLastCheck
operator|.
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|isConfirm
argument_list|()
condition|)
name|m
operator|.
name|setConfirm
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|setErrors
argument_list|(
name|iLastCheck
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Boolean
name|getWaitList
parameter_list|(
name|String
name|course
parameter_list|)
block|{
if|if
condition|(
name|iCanWaitList
condition|)
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|box
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|line
operator|.
name|getWaitList
argument_list|()
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setWaitList
parameter_list|(
name|String
name|course
parameter_list|,
name|boolean
name|waitList
parameter_list|)
block|{
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|equals
argument_list|(
name|box
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
name|line
operator|.
name|setWaitList
argument_list|(
name|waitList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|iTip
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|tips
argument_list|()
index|[
operator|(
name|int
operator|)
operator|(
name|Math
operator|.
name|random
argument_list|()
operator|*
name|CONSTANTS
operator|.
name|tips
argument_list|()
operator|.
name|length
operator|)
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
name|line
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
name|line
operator|.
name|setValue
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getFirstError
parameter_list|()
block|{
if|if
condition|(
name|iLastCheck
operator|!=
literal|null
operator|&&
name|iLastCheck
operator|.
name|hasMessages
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|iLastCheck
operator|.
name|getMessages
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
return|return
name|m
operator|.
name|getMessage
argument_list|()
return|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
for|for
control|(
name|CourseMessage
name|m
range|:
name|iLastCheck
operator|.
name|getMessages
argument_list|(
name|box
operator|.
name|getText
argument_list|()
argument_list|)
control|)
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
return|return
name|m
operator|.
name|getMessage
argument_list|()
return|;
for|for
control|(
name|CourseMessage
name|m
range|:
name|iLastCheck
operator|.
name|getMessages
argument_list|()
control|)
if|if
condition|(
name|m
operator|.
name|isError
argument_list|()
condition|)
return|return
name|m
operator|.
name|getMessage
argument_list|()
return|;
block|}
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|box
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|box
operator|.
name|getError
argument_list|()
return|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|box
operator|.
name|getError
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|box
operator|.
name|getError
argument_list|()
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addValueChangeHandler
parameter_list|(
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
argument_list|>
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ValueChangeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CourseRequestInterface
name|getValue
parameter_list|()
block|{
return|return
name|getRequest
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|CourseRequestInterface
name|value
parameter_list|)
block|{
name|setValue
argument_list|(
name|value
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValue
parameter_list|(
name|CourseRequestInterface
name|value
parameter_list|,
name|boolean
name|fireEvents
parameter_list|)
block|{
name|setRequest
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|fireEvents
condition|)
name|ValueChangeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|clearErrors
parameter_list|()
block|{
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
name|box
operator|.
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
name|box
operator|.
name|setError
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Command
name|addCourse
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
name|Request
name|request
init|=
operator|new
name|Request
argument_list|()
decl_stmt|;
name|request
operator|.
name|addRequestedCourse
argument_list|(
name|rc
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
if|if
condition|(
name|line
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|line
operator|.
name|setValue
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|line
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|clearErrors
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
name|addCourseLine
argument_list|()
expr_stmt|;
specifier|final
name|CourseRequestLine
name|line
init|=
name|iCourses
operator|.
name|get
argument_list|(
name|iCourses
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|line
operator|.
name|setValue
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|line
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|clearErrors
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
specifier|public
name|boolean
name|hasCourse
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
name|Request
name|request
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|(
name|rc
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
block|{
name|Request
name|request
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|(
name|rc
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|dropCourse
parameter_list|(
name|RequestedCourse
name|rc
parameter_list|)
block|{
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
name|Request
name|request
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|(
name|rc
argument_list|)
condition|)
block|{
name|line
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
block|{
name|Request
name|request
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|(
name|rc
argument_list|)
condition|)
block|{
name|line
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
specifier|public
name|void
name|dropCourse
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|assignment
parameter_list|)
block|{
if|if
condition|(
name|assignment
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|assignment
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|FreeTime
name|ft
init|=
operator|new
name|FreeTime
argument_list|(
name|assignment
operator|.
name|getDays
argument_list|()
argument_list|,
name|assignment
operator|.
name|getStart
argument_list|()
argument_list|,
name|assignment
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
block|{
name|Request
name|request
init|=
name|line
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|()
operator|&&
name|request
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|request
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getFreeTime
argument_list|()
operator|.
name|contains
argument_list|(
name|ft
argument_list|)
condition|)
block|{
name|request
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|getFreeTime
argument_list|()
operator|.
name|remove
argument_list|(
name|ft
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getRequestedCourse
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|line
operator|.
name|delete
argument_list|()
expr_stmt|;
else|else
name|line
operator|.
name|setValue
argument_list|(
name|request
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
if|else if
condition|(
operator|!
name|assignment
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iCourses
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|assignment
operator|.
name|equalsIgnoreCase
argument_list|(
name|box
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|line
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return;
block|}
for|for
control|(
specifier|final
name|CourseRequestLine
name|line
range|:
name|iAlternatives
control|)
for|for
control|(
name|CourseSelectionBox
name|box
range|:
name|line
operator|.
name|getCourses
argument_list|()
control|)
if|if
condition|(
name|assignment
operator|.
name|equalsIgnoreCase
argument_list|(
name|box
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|line
operator|.
name|delete
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_class

end_unit

