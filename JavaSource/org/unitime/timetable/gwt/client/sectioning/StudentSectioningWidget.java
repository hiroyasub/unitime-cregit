begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaButton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaTabBar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|TimeGrid
operator|.
name|Meeting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderClasses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderCourses
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDetails
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|CourseFinderDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|DataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ImageLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtAriaMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|DegreePlanInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SectioningException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveAllSpecialRegistrationsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|RetrieveSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationEligibilityResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SubmitSpecialRegistrationResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CheckCoursesResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|FreeTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|UserAuthenticationProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|RunAsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|TextAlign
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|HasResizeHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|HasValueChangeHandlers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ImageResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DockPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningWidget
extends|extends
name|Composite
implements|implements
name|HasResizeHandlers
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtAriaMessages
name|ARIA
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtAriaMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|GwtMessages
name|GWT_MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|AcademicSessionProvider
name|iSessionSelector
decl_stmt|;
specifier|private
name|UserAuthenticationProvider
name|iUserAuthentication
decl_stmt|;
specifier|private
name|VerticalPanel
name|iPanel
decl_stmt|;
specifier|private
name|P
name|iFooter
decl_stmt|;
specifier|private
name|AriaButton
name|iRequests
decl_stmt|,
name|iReset
decl_stmt|,
name|iSchedule
decl_stmt|,
name|iEnroll
decl_stmt|,
name|iPrint
decl_stmt|,
name|iExport
init|=
literal|null
decl_stmt|,
name|iSave
decl_stmt|,
name|iStartOver
decl_stmt|,
name|iDegreePlan
decl_stmt|,
name|iSubmitSpecReg
decl_stmt|,
name|iGetSpecRegs
decl_stmt|;
specifier|private
name|AriaTabBar
name|iAssignmentTab
decl_stmt|;
specifier|private
name|DockPanel
name|iAssignmentDock
decl_stmt|;
specifier|private
name|FocusPanel
name|iAssignmentPanel
decl_stmt|;
specifier|private
name|ImageLink
name|iCalendar
init|=
literal|null
decl_stmt|;
specifier|private
name|CourseRequestsTable
name|iCourseRequests
decl_stmt|;
specifier|private
name|WebTable
name|iAssignments
decl_stmt|;
specifier|private
name|TimeGrid
name|iAssignmentGrid
decl_stmt|;
specifier|private
name|SuggestionsBox
name|iSuggestionsBox
decl_stmt|;
specifier|private
name|CheckBox
name|iShowUnassignments
decl_stmt|;
specifier|private
name|Label
name|iTotalCredit
decl_stmt|;
specifier|private
name|P
name|iGridMessage
decl_stmt|;
specifier|private
name|Image
name|iTotalCreditRequestsStatus
decl_stmt|;
specifier|private
name|P
name|iTotalCreditRequests
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iLastResult
decl_stmt|,
name|iLastEnrollment
decl_stmt|;
specifier|private
name|ClassAssignmentInterface
name|iLastAssignment
decl_stmt|,
name|iSavedAssignment
init|=
literal|null
decl_stmt|,
name|iSpecialRegAssignment
init|=
literal|null
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iSavedRequest
init|=
literal|null
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|HistoryItem
argument_list|>
name|iHistory
init|=
operator|new
name|ArrayList
argument_list|<
name|HistoryItem
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iInRestore
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|iTrackHistory
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|iOnline
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSpecRegCx
init|=
operator|new
name|SpecialRegistrationContext
argument_list|()
decl_stmt|;
specifier|private
name|StudentSectioningPage
operator|.
name|Mode
name|iMode
init|=
literal|null
decl_stmt|;
specifier|private
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|iEligibilityCheck
init|=
literal|null
decl_stmt|;
specifier|private
name|PinDialog
name|iPinDialog
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iScheduleChanged
init|=
literal|false
decl_stmt|;
specifier|private
name|ScheduleStatus
name|iStatus
init|=
literal|null
decl_stmt|;
specifier|private
name|AriaButton
name|iQuickAdd
decl_stmt|;
specifier|private
name|CourseFinder
name|iQuickAddFinder
init|=
literal|null
decl_stmt|;
specifier|private
name|SuggestionsBox
name|iQuickAddSuggestions
init|=
literal|null
decl_stmt|;
specifier|private
name|CheckBox
name|iCustomCheckbox
init|=
literal|null
decl_stmt|;
specifier|private
name|DegreePlansSelectionDialog
name|iDegreePlansSelectionDialog
init|=
literal|null
decl_stmt|;
specifier|private
name|DegreePlanDialog
name|iDegreePlanDialog
init|=
literal|null
decl_stmt|;
specifier|private
name|SpecialRegistrationSelectionDialog
name|iSpecialRegistrationSelectionDialog
init|=
literal|null
decl_stmt|;
specifier|public
name|StudentSectioningWidget
parameter_list|(
name|boolean
name|online
parameter_list|,
name|AcademicSessionProvider
name|sessionSelector
parameter_list|,
name|UserAuthenticationProvider
name|userAuthentication
parameter_list|,
name|StudentSectioningPage
operator|.
name|Mode
name|mode
parameter_list|,
name|boolean
name|history
parameter_list|)
block|{
name|iMode
operator|=
name|mode
expr_stmt|;
name|iOnline
operator|=
name|online
expr_stmt|;
name|iSpecRegCx
operator|.
name|setRequestKey
argument_list|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"reqKey"
argument_list|)
argument_list|)
expr_stmt|;
name|iSessionSelector
operator|=
name|sessionSelector
expr_stmt|;
name|iUserAuthentication
operator|=
name|userAuthentication
expr_stmt|;
name|iTrackHistory
operator|=
name|history
expr_stmt|;
name|iPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|addStyleName
argument_list|(
literal|"unitime-SchedulingAssistant"
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|=
operator|new
name|CourseRequestsTable
argument_list|(
name|iSessionSelector
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|iOnline
argument_list|,
name|iSpecRegCx
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|CourseRequestInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|CourseRequestInterface
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|iTotalCreditRequests
operator|!=
literal|null
condition|)
block|{
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isChanged
argument_list|()
operator|&&
name|iSavedRequest
operator|!=
literal|null
operator|&&
name|iSavedRequest
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|iSavedRequest
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|)
block|{
case|case
name|CREDIT_HIGH
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestError
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|iSavedRequest
operator|.
name|getCreditWarning
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusTooHigh
argument_list|()
operator|+
operator|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestError
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|iSavedRequest
operator|.
name|getCreditWarning
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusDenied
argument_list|()
operator|+
operator|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|iSavedRequest
operator|.
name|getCreditWarning
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusCancelled
argument_list|()
operator|+
operator|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|CREDIT_LOW
case|:
case|case
name|OVERRIDE_NEEDED
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|iSavedRequest
operator|.
name|getCreditWarning
argument_list|()
operator|+
operator|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestPending
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|iSavedRequest
operator|.
name|getCreditWarning
argument_list|()
operator|+
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusPending
argument_list|()
operator|+
operator|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|MESSAGES
operator|.
name|creditStatusApproved
argument_list|()
operator|+
operator|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|SAVED
case|:
name|iTotalCreditRequestsStatus
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setAltText
argument_list|(
name|iSavedRequest
operator|.
name|hasCreditNote
argument_list|()
condition|?
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|iSavedRequest
operator|.
name|getCreditNote
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setTitle
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|float
index|[]
name|credit
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
operator|.
name|getCreditRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|credit
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|credit
index|[
literal|0
index|]
operator|!=
name|credit
index|[
literal|1
index|]
condition|)
name|iTotalCreditRequests
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|totalCreditRange
argument_list|(
name|credit
index|[
literal|0
index|]
argument_list|,
name|credit
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iTotalCreditRequests
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|totalCredit
argument_list|(
name|credit
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTotalCreditRequests
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iSavedRequest
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|iSavedRequest
operator|.
name|equals
argument_list|(
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iSave
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|iSavedRequest
operator|.
name|isEmpty
argument_list|()
condition|?
name|MESSAGES
operator|.
name|warnRequestsEmptyOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnRequestsChangedOnCourseRequest
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iScheduleChanged
condition|)
block|{
name|iScheduleChanged
operator|=
literal|false
expr_stmt|;
name|iSave
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|iLastAssignment
operator|==
literal|null
operator|||
operator|!
name|iLastAssignment
operator|.
name|isCanEnroll
argument_list|()
operator|||
name|iEligibilityCheck
operator|==
literal|null
operator|||
operator|!
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
condition|)
return|return;
if|if
condition|(
operator|!
name|iScheduleChanged
condition|)
block|{
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|(
name|course
argument_list|)
condition|)
continue|continue
name|courses
continue|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|(
name|course
argument_list|)
condition|)
continue|continue
name|courses
continue|;
block|}
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|MESSAGES
operator|.
name|warnScheduleChangedOnCourseRequest
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|else if
condition|(
name|MESSAGES
operator|.
name|warnScheduleChangedOnCourseRequest
argument_list|()
operator|.
name|equals
argument_list|(
name|iStatus
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
name|updateScheduleChangedNoteIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iCourseRequests
argument_list|)
expr_stmt|;
name|iFooter
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-SchedulingAssistantButtons"
argument_list|)
expr_stmt|;
name|P
name|leftFooterPanel
init|=
operator|new
name|P
argument_list|(
literal|"left-panel"
argument_list|)
decl_stmt|;
name|iDegreePlan
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonDegreePlan
argument_list|()
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintDegreePlan
argument_list|()
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|leftFooterPanel
operator|.
name|add
argument_list|(
name|iDegreePlan
argument_list|)
expr_stmt|;
name|iRequests
operator|=
operator|new
name|AriaButton
argument_list|(
name|RESOURCES
operator|.
name|arrowBack
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|buttonRequests
argument_list|()
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintRequests
argument_list|()
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|leftFooterPanel
operator|.
name|add
argument_list|(
name|iRequests
argument_list|)
expr_stmt|;
name|iReset
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonReset
argument_list|()
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintReset
argument_list|()
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|leftFooterPanel
operator|.
name|add
argument_list|(
name|iReset
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|add
argument_list|(
name|leftFooterPanel
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|StudentSectioningPage
operator|.
name|Mode
operator|.
name|REQUESTS
condition|)
block|{
name|iTotalCreditRequestsStatus
operator|=
operator|new
name|Image
argument_list|()
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|addStyleName
argument_list|(
literal|"credit-status"
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTotalCreditRequestsStatus
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|UniTimeConfirmationDialog
operator|.
name|info
argument_list|(
name|iTotalCreditRequestsStatus
operator|.
name|getAltText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setCreditStatusIcon
argument_list|(
name|iTotalCreditRequestsStatus
argument_list|)
expr_stmt|;
name|iTotalCreditRequests
operator|=
operator|new
name|P
argument_list|(
literal|"credit-text"
argument_list|)
expr_stmt|;
name|P
name|credit
init|=
operator|new
name|P
argument_list|(
literal|"center-panel"
argument_list|,
literal|"total-request-credit"
argument_list|)
decl_stmt|;
name|credit
operator|.
name|add
argument_list|(
name|iTotalCreditRequestsStatus
argument_list|)
expr_stmt|;
name|credit
operator|.
name|add
argument_list|(
name|iTotalCreditRequests
argument_list|)
expr_stmt|;
name|iFooter
operator|.
name|add
argument_list|(
name|credit
argument_list|)
expr_stmt|;
block|}
name|P
name|rightFooterPanel
init|=
operator|new
name|P
argument_list|(
literal|"right-panel"
argument_list|)
decl_stmt|;
name|iFooter
operator|.
name|add
argument_list|(
name|rightFooterPanel
argument_list|)
expr_stmt|;
name|iStartOver
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonStartOver
argument_list|()
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintStartOver
argument_list|()
argument_list|)
expr_stmt|;
name|leftFooterPanel
operator|.
name|add
argument_list|(
name|iStartOver
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonGetSpecRegs
argument_list|()
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintGetSpecRegs
argument_list|()
argument_list|)
expr_stmt|;
name|leftFooterPanel
operator|.
name|add
argument_list|(
name|iGetSpecRegs
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iSchedule
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonSchedule
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|arrowForward
argument_list|()
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintSchedule
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|.
name|isSectioning
argument_list|()
condition|)
name|rightFooterPanel
operator|.
name|add
argument_list|(
name|iSchedule
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setVisible
argument_list|(
name|mode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
name|mode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonSave
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintSave
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
condition|)
name|rightFooterPanel
operator|.
name|add
argument_list|(
name|iSave
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setVisible
argument_list|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|rightFooterPanel
operator|.
name|add
argument_list|(
name|iEnroll
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonSubmitSpecReg
argument_list|()
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintSpecialRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|rightFooterPanel
operator|.
name|add
argument_list|(
name|iSubmitSpecReg
argument_list|)
expr_stmt|;
name|iPrint
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonPrint
argument_list|()
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintPrint
argument_list|()
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|rightFooterPanel
operator|.
name|add
argument_list|(
name|iPrint
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|allowCalendarExport
argument_list|()
condition|)
block|{
name|iExport
operator|=
operator|new
name|AriaButton
argument_list|(
name|MESSAGES
operator|.
name|buttonExport
argument_list|()
argument_list|)
expr_stmt|;
name|iExport
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintExport
argument_list|()
argument_list|)
expr_stmt|;
name|iExport
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iExport
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iExport
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|4
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|rightFooterPanel
operator|.
name|add
argument_list|(
name|iExport
argument_list|)
expr_stmt|;
block|}
name|iPanel
operator|.
name|add
argument_list|(
name|iFooter
argument_list|)
expr_stmt|;
name|iStatus
operator|=
operator|new
name|ScheduleStatus
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iStatus
argument_list|)
expr_stmt|;
name|iLastResult
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
expr_stmt|;
name|iQuickAdd
operator|=
operator|new
name|AriaButton
argument_list|(
name|RESOURCES
operator|.
name|quickAddCourse
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|buttonQuickAdd
argument_list|()
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|hintQuickAdd
argument_list|()
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setStyleName
argument_list|(
literal|"unitime-QuickAddButton"
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|getQuickAddFinder
argument_list|()
operator|.
name|findCourse
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitListDegreePlans
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|listDegreePlans
argument_list|(
name|iOnline
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|caught
operator|instanceof
name|SectioningException
condition|)
block|{
name|SectioningException
name|s
init|=
operator|(
name|SectioningException
operator|)
name|caught
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isInfo
argument_list|()
condition|)
name|iStatus
operator|.
name|info
argument_list|(
name|s
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|s
operator|.
name|isWarning
argument_list|()
condition|)
name|iStatus
operator|.
name|warning
argument_list|(
name|s
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
if|else if
condition|(
name|s
operator|.
name|isError
argument_list|()
condition|)
name|iStatus
operator|.
name|error
argument_list|(
name|s
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedListDegreePlans
argument_list|(
name|s
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedListDegreePlans
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|DegreePlanInterface
argument_list|>
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|failedNoDegreePlans
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CourseFinderDetails
name|details
init|=
operator|new
name|CourseFinderDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderClasses
name|classes
init|=
operator|new
name|CourseFinderClasses
argument_list|(
literal|true
argument_list|,
name|iSpecRegCx
argument_list|)
decl_stmt|;
name|classes
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listClasses
argument_list|(
name|iOnline
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iDegreePlanDialog
operator|==
literal|null
condition|)
block|{
name|iDegreePlanDialog
operator|=
operator|new
name|DegreePlanDialog
argument_list|(
name|iMode
argument_list|,
name|iCourseRequests
argument_list|,
operator|new
name|DegreePlanDialog
operator|.
name|AssignmentProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|getSavedAssignment
parameter_list|()
block|{
return|return
name|iSavedAssignment
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClassAssignmentInterface
name|getLastAssignment
parameter_list|()
block|{
return|return
name|iLastAssignment
return|;
block|}
block|}
argument_list|,
name|details
argument_list|,
name|classes
argument_list|)
block|{
specifier|protected
name|void
name|doBack
parameter_list|()
block|{
name|super
operator|.
name|doBack
argument_list|()
expr_stmt|;
name|iDegreePlansSelectionDialog
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|doApply
parameter_list|()
block|{
name|updateHistory
argument_list|()
expr_stmt|;
name|super
operator|.
name|doApply
argument_list|()
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|iDegreePlansSelectionDialog
operator|==
literal|null
condition|)
block|{
name|iDegreePlansSelectionDialog
operator|=
operator|new
name|DegreePlansSelectionDialog
argument_list|()
block|{
specifier|public
name|void
name|doSubmit
parameter_list|(
name|DegreePlanInterface
name|plan
parameter_list|)
block|{
name|super
operator|.
name|doSubmit
argument_list|(
name|plan
argument_list|)
expr_stmt|;
name|iDegreePlanDialog
operator|.
name|open
argument_list|(
name|plan
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|iDegreePlanDialog
operator|.
name|open
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|iDegreePlansSelectionDialog
operator|.
name|open
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
comment|/* 	private void initAsync() { 		GWT.runAsync(new RunAsyncCallback() { 			public void onSuccess() { 				init(); 			} 			public void onFailure(Throwable reason) { 				Label error = new Label(MESSAGES.failedToLoadTheApp(reason.getMessage())); 				error.setStyleName("unitime-ErrorMessage"); 				RootPanel.get("loading").setVisible(false); 				RootPanel.get("body").add(error); 			} 		}); 	} 	*/
specifier|private
name|void
name|addHistory
parameter_list|()
block|{
if|if
condition|(
name|iInRestore
operator|||
operator|!
name|iTrackHistory
operator|||
name|iUserAuthentication
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|iHistory
operator|.
name|add
argument_list|(
operator|new
name|HistoryItem
argument_list|()
argument_list|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|iHistory
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateHistory
parameter_list|()
block|{
if|if
condition|(
name|iInRestore
operator|||
operator|!
name|iTrackHistory
operator|||
name|iUserAuthentication
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|!
name|iHistory
operator|.
name|isEmpty
argument_list|()
condition|)
name|iHistory
operator|.
name|remove
argument_list|(
name|iHistory
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|allowCalendarExport
argument_list|()
condition|)
block|{
name|iCalendar
operator|=
operator|new
name|ImageLink
argument_list|()
expr_stmt|;
name|iCalendar
operator|.
name|setImage
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|calendar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTarget
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|exportICalendar
argument_list|()
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setAriaLabel
argument_list|(
name|MESSAGES
operator|.
name|exportICalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iAssignments
operator|=
operator|new
name|WebTable
argument_list|()
expr_stmt|;
name|iAssignments
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colLock
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|)
operator|.
name|aria
argument_list|(
name|ARIA
operator|.
name|colLimit
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDays
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colStart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colEnd
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colParent
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colNote
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|)
argument_list|,
operator|(
name|iCalendar
operator|!=
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|WidgetCell
argument_list|(
name|iCalendar
argument_list|,
name|MESSAGES
operator|.
name|colIcons
argument_list|()
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colIcons
argument_list|()
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|iAssignments
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|iAssignments
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|emptySchedule
argument_list|()
argument_list|)
expr_stmt|;
name|ScrollPanel
name|assignmentsPanel
init|=
operator|new
name|ScrollPanel
argument_list|(
name|iAssignments
argument_list|)
decl_stmt|;
name|assignmentsPanel
operator|.
name|setStyleName
argument_list|(
literal|"body"
argument_list|)
expr_stmt|;
name|assignmentsPanel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflowY
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
specifier|final
name|P
name|panel
init|=
operator|new
name|P
argument_list|(
literal|"unitime-Panel"
argument_list|)
decl_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|assignmentsPanel
argument_list|)
expr_stmt|;
name|iTotalCredit
operator|=
operator|new
name|Label
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iShowUnassignments
operator|=
operator|new
name|CheckBox
argument_list|(
name|MESSAGES
operator|.
name|showUnassignments
argument_list|()
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|addStyleName
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|P
name|bottom
init|=
operator|new
name|P
argument_list|(
literal|"footer"
argument_list|)
decl_stmt|;
name|iTotalCredit
operator|.
name|addStyleName
argument_list|(
literal|"center"
argument_list|)
expr_stmt|;
name|iTotalCredit
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|3
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iShowUnassignments
operator|.
name|addStyleName
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|iShowUnassignments
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|3
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|bottom
operator|.
name|add
argument_list|(
name|iQuickAdd
argument_list|)
expr_stmt|;
name|bottom
operator|.
name|add
argument_list|(
name|iShowUnassignments
argument_list|)
expr_stmt|;
name|bottom
operator|.
name|add
argument_list|(
name|iTotalCredit
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|bottom
argument_list|)
expr_stmt|;
name|iShowUnassignments
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|showUnassignments
init|=
name|Cookies
operator|.
name|getCookie
argument_list|(
literal|"UniTime:Unassignments"
argument_list|)
decl_stmt|;
name|iShowUnassignments
operator|.
name|setValue
argument_list|(
name|showUnassignments
operator|==
literal|null
operator|||
literal|"1"
operator|.
name|equals
argument_list|(
name|showUnassignments
argument_list|)
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|=
operator|new
name|TimeGrid
argument_list|()
expr_stmt|;
name|iGridMessage
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimeGridMessage"
argument_list|)
expr_stmt|;
name|iGridMessage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|P
name|gridPanel
init|=
operator|new
name|P
argument_list|(
literal|"unitime-TimeGridPanel"
argument_list|)
decl_stmt|;
name|gridPanel
operator|.
name|add
argument_list|(
name|iGridMessage
argument_list|)
expr_stmt|;
name|gridPanel
operator|.
name|add
argument_list|(
name|iAssignmentGrid
argument_list|)
expr_stmt|;
name|iAssignmentTab
operator|=
operator|new
name|AriaTabBar
argument_list|()
expr_stmt|;
name|iAssignmentTab
operator|.
name|addTab
argument_list|(
name|MESSAGES
operator|.
name|tabClasses
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iAssignmentTab
operator|.
name|addTab
argument_list|(
name|MESSAGES
operator|.
name|tabTimetable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iAssignmentTab
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iAssignmentTab
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|==
literal|0
condition|)
block|{
name|iAssignmentPanel
operator|.
name|setWidget
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|listOfClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iAssignmentGrid
operator|.
name|shrink
argument_list|()
expr_stmt|;
name|iAssignmentPanel
operator|.
name|setWidget
argument_list|(
name|gridPanel
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|scrollDown
argument_list|()
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|timetable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|addHistory
argument_list|()
expr_stmt|;
name|ResizeEvent
operator|.
name|fire
argument_list|(
name|StudentSectioningWidget
operator|.
name|this
argument_list|,
name|StudentSectioningWidget
operator|.
name|this
operator|.
name|getOffsetWidth
argument_list|()
argument_list|,
name|StudentSectioningWidget
operator|.
name|this
operator|.
name|getOffsetHeight
argument_list|()
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iAssignmentPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iAssignmentPanel
operator|=
operator|new
name|FocusPanel
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|iAssignmentPanel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ClassScheduleTabPanel"
argument_list|)
expr_stmt|;
name|iAssignmentPanel
operator|.
name|addStyleName
argument_list|(
literal|"unitime-FocusPanel"
argument_list|)
expr_stmt|;
specifier|final
name|Character
name|classesAccessKey
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|tabClasses
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Character
name|timetableAccessKey
init|=
name|UniTimeHeaderPanel
operator|.
name|guessAccessKey
argument_list|(
name|MESSAGES
operator|.
name|tabTimetable
argument_list|()
argument_list|)
decl_stmt|;
name|iAssignmentPanel
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iAssignmentTab
operator|.
name|getSelectedTab
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_DOWN
condition|)
block|{
do|do
block|{
name|iAssignments
operator|.
name|setSelectedRow
argument_list|(
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|.
name|isSelectable
argument_list|()
condition|)
do|;
if|if
condition|(
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
operator|&&
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|<
name|iAssignments
operator|.
name|getRows
argument_list|()
operator|.
name|length
operator|&&
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|!=
literal|null
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|classSelected
argument_list|(
literal|1
operator|+
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iAssignments
operator|.
name|getRowsCount
argument_list|()
argument_list|,
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_UP
condition|)
block|{
do|do
block|{
name|iAssignments
operator|.
name|setSelectedRow
argument_list|(
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|==
literal|0
condition|?
name|iAssignments
operator|.
name|getRowsCount
argument_list|()
operator|-
literal|1
else|:
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|.
name|isSelectable
argument_list|()
condition|)
do|;
if|if
condition|(
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|>=
literal|0
operator|&&
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
operator|<
name|iAssignments
operator|.
name|getRows
argument_list|()
operator|.
name|length
operator|&&
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|!=
literal|null
condition|)
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|classSelected
argument_list|(
literal|1
operator|+
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
argument_list|,
name|iAssignments
operator|.
name|getRowsCount
argument_list|()
argument_list|,
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
index|]
operator|.
name|getAriaLabel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|updateHistory
argument_list|()
expr_stmt|;
name|showSuggestionsAsync
argument_list|(
name|iAssignments
operator|.
name|getSelectedRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|tab
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|classesAccessKey
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|classesAccessKey
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|classesAccessKey
argument_list|)
operator|)
condition|)
block|{
name|tab
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|timetableAccessKey
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|timetableAccessKey
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|Character
operator|.
name|toUpperCase
argument_list|(
name|timetableAccessKey
argument_list|)
operator|)
condition|)
block|{
name|tab
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|tab
operator|>=
literal|0
condition|)
block|{
name|iAssignmentTab
operator|.
name|selectTab
argument_list|(
name|tab
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|=
operator|new
name|DockPanel
argument_list|()
expr_stmt|;
name|iAssignmentDock
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ClassSchedulePanel"
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setSpacing
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|add
argument_list|(
name|iAssignmentPanel
argument_list|,
name|DockPanel
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|add
argument_list|(
name|iAssignmentTab
argument_list|,
name|DockPanel
operator|.
name|WEST
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setCellWidth
argument_list|(
name|iAssignmentTab
argument_list|,
literal|"33%"
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iAssignmentTab
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_BOTTOM
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iAssignmentTab
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getTabpanelRole
argument_list|()
operator|.
name|set
argument_list|(
name|iAssignmentDock
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getTabpanelRole
argument_list|()
operator|.
name|setAriaOwnsProperty
argument_list|(
name|iAssignmentDock
operator|.
name|getElement
argument_list|()
argument_list|,
name|Id
operator|.
name|of
argument_list|(
name|iAssignmentTab
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|P
name|header
init|=
operator|new
name|P
argument_list|(
literal|"unitime-MainHeader"
argument_list|)
decl_stmt|;
name|header
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|headerClassSchedule
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTextAlign
argument_list|(
name|TextAlign
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|add
argument_list|(
name|header
argument_list|,
name|DockPanel
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|header
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setCellWidth
argument_list|(
name|header
argument_list|,
literal|"34%"
argument_list|)
expr_stmt|;
name|P
name|padding
init|=
operator|new
name|P
argument_list|(
literal|"unitime-HeaderPadding"
argument_list|)
decl_stmt|;
name|padding
operator|.
name|setHTML
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|add
argument_list|(
name|padding
argument_list|,
name|DockPanel
operator|.
name|EAST
argument_list|)
expr_stmt|;
name|iAssignmentDock
operator|.
name|setCellWidth
argument_list|(
name|padding
argument_list|,
literal|"33%"
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|prev
argument_list|()
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
name|iOnline
argument_list|,
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionSectioningFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iCourseRequests
operator|.
name|changeTip
argument_list|()
expr_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|validate
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|updateHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
name|iOnline
argument_list|,
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|,
name|iLastResult
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionSectioningFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|error
init|=
name|iCourseRequests
operator|.
name|getFirstError
argument_list|()
decl_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|error
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|validationFailed
argument_list|()
else|:
name|MESSAGES
operator|.
name|validationFailedWithMessage
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|validationFailedWithMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|isChanged
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
condition|?
name|MESSAGES
operator|.
name|queryLeaveChangesOnClassSchedule
argument_list|()
else|:
name|MESSAGES
operator|.
name|queryLeaveChangesOnCourseRequests
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
name|lastRequest
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|clear
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
name|lastRequest
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iAssignments
operator|.
name|addRowClickHandler
argument_list|(
operator|new
name|WebTable
operator|.
name|RowClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onRowClick
parameter_list|(
name|WebTable
operator|.
name|RowClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iLastResult
operator|.
name|get
argument_list|(
name|event
operator|.
name|getRowIdx
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
return|return;
name|updateHistory
argument_list|()
expr_stmt|;
name|showSuggestionsAsync
argument_list|(
name|event
operator|.
name|getRowIdx
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|addMeetingClickHandler
argument_list|(
operator|new
name|TimeGrid
operator|.
name|MeetingClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onMeetingClick
parameter_list|(
name|TimeGrid
operator|.
name|MeetingClickEvent
name|event
parameter_list|)
block|{
name|updateHistory
argument_list|()
expr_stmt|;
name|showSuggestionsAsync
argument_list|(
name|event
operator|.
name|getRowIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|addPinClickHandler
argument_list|(
operator|new
name|TimeGrid
operator|.
name|PinClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onPinClick
parameter_list|(
name|TimeGrid
operator|.
name|PinClickEvent
name|event
parameter_list|)
block|{
operator|(
operator|(
name|HasValue
argument_list|<
name|Boolean
argument_list|>
operator|)
name|iAssignments
operator|.
name|getRows
argument_list|()
index|[
name|event
operator|.
name|getRowIndex
argument_list|()
index|]
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|setValue
argument_list|(
name|event
operator|.
name|isPinChecked
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|get
argument_list|(
name|event
operator|.
name|getRowIndex
argument_list|()
argument_list|)
operator|.
name|setPinned
argument_list|(
name|event
operator|.
name|isPinChecked
argument_list|()
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|Command
name|enroll
init|=
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitEnroll
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|lastEnrollment
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|(
name|iLastResult
argument_list|)
decl_stmt|;
name|iSectioningService
operator|.
name|enroll
argument_list|(
name|iOnline
argument_list|,
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|,
name|iLastResult
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iSavedAssignment
operator|=
name|result
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
name|iSavedAssignment
operator|!=
literal|null
operator|&&
operator|!
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
name|iSavedAssignment
operator|!=
literal|null
operator|&&
operator|!
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasRequest
argument_list|()
condition|)
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|result
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|hasMessages
argument_list|()
condition|)
name|iStatus
operator|.
name|done
argument_list|(
name|MESSAGES
operator|.
name|enrollOK
argument_list|()
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|RECHECK_AFTER_ENROLLMENT
argument_list|)
condition|)
block|{
name|iSectioningService
operator|.
name|checkEligibility
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|iEligibilityCheck
operator|.
name|getStudentId
argument_list|()
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|result
parameter_list|)
block|{
name|setElibibilityCheckDuringEnrollment
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|)
operator|&&
name|result
operator|.
name|hasMessages
argument_list|()
condition|)
name|checkSpecialRegistrationAfterFailedSubmitSchedule
argument_list|(
name|lastEnrollment
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|enrollFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|caught
operator|instanceof
name|SectioningException
condition|)
block|{
name|SectioningException
name|se
init|=
operator|(
name|SectioningException
operator|)
name|caught
decl_stmt|;
name|EligibilityCheck
name|check
init|=
name|se
operator|.
name|getEligibilityCheck
argument_list|()
decl_stmt|;
if|if
condition|(
name|check
operator|!=
literal|null
condition|)
block|{
name|setElibibilityCheckDuringEnrollment
argument_list|(
name|check
argument_list|)
expr_stmt|;
if|if
condition|(
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|)
condition|)
block|{
if|if
condition|(
name|iPinDialog
operator|==
literal|null
condition|)
name|iPinDialog
operator|=
operator|new
name|PinDialog
argument_list|()
expr_stmt|;
name|PinDialog
operator|.
name|PinCallback
name|callback
init|=
operator|new
name|PinDialog
operator|.
name|PinCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|result
parameter_list|)
block|{
name|setElibibilityCheckDuringEnrollment
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|&&
operator|!
name|result
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|RECHECK_BEFORE_ENROLLMENT
argument_list|)
condition|)
name|iEnroll
operator|.
name|click
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|)
condition|)
block|{
name|iStatus
operator|.
name|warning
argument_list|(
name|MESSAGES
operator|.
name|exceptionAuthenticationPinRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|iPinDialog
operator|.
name|checkEligibility
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|se
operator|.
name|hasErrors
argument_list|()
condition|)
name|iLastAssignment
operator|.
name|setErrors
argument_list|(
name|se
operator|.
name|getErrors
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|se
operator|.
name|hasSectionMessages
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseAssignment
name|ca
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignment
name|c
range|:
name|ca
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|c
operator|.
name|setError
argument_list|(
name|se
operator|.
name|getSectionMessage
argument_list|(
name|c
operator|.
name|getClassId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|fillIn
argument_list|(
name|iLastAssignment
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|)
condition|)
name|checkSpecialRegistrationAfterFailedSubmitSchedule
argument_list|(
name|lastEnrollment
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|enroll
operator|=
name|confirmEnrollment
argument_list|(
name|enroll
argument_list|)
expr_stmt|;
name|enroll
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitSpecialRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|submitSpecialRequest
argument_list|(
operator|new
name|SubmitSpecialRegistrationRequest
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|iEligibilityCheck
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|iSpecRegCx
operator|.
name|getRequestKey
argument_list|()
argument_list|,
name|iSpecRegCx
operator|.
name|getRequestId
argument_list|()
argument_list|,
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|,
name|iLastEnrollment
operator|!=
literal|null
condition|?
name|iLastEnrollment
else|:
name|iLastResult
argument_list|,
name|iLastAssignment
operator|==
literal|null
condition|?
literal|null
else|:
name|iLastAssignment
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SubmitSpecialRegistrationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|submitSpecialRegistrationFail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SubmitSpecialRegistrationResponse
name|respose
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|respose
operator|.
name|isSuccess
argument_list|()
condition|)
block|{
name|iSpecialRegAssignment
operator|=
name|iLastAssignment
expr_stmt|;
name|iStatus
operator|.
name|done
argument_list|(
name|respose
operator|.
name|hasMessage
argument_list|()
condition|?
name|respose
operator|.
name|getMessage
argument_list|()
else|:
name|MESSAGES
operator|.
name|submitSecialRegistrationOK
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|respose
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSpecRegCx
operator|.
name|setCanSubmit
argument_list|(
name|respose
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanEnroll
argument_list|(
name|respose
operator|.
name|isCanEnroll
argument_list|()
operator|||
operator|!
name|iSpecRegCx
operator|.
name|hasRequestKey
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iSpecRegCx
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|iSpecRegCx
operator|.
name|setRequestId
argument_list|(
name|respose
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setEnabled
argument_list|(
name|iSpecRegCx
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setVisible
argument_list|(
name|iSpecRegCx
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|)
condition|)
block|{
name|iEligibilityCheck
operator|.
name|setFlag
argument_list|(
name|EligibilityFlag
operator|.
name|HAS_SPECREG
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitSpecialRegistration
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|retrieveAllSpecialRequests
argument_list|(
operator|new
name|RetrieveAllSpecialRegistrationsRequest
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|iEligibilityCheck
operator|.
name|getStudentId
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|retrieveAllSpecialRegistrationsFail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
name|response
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|response
operator|.
name|isEmpty
argument_list|()
condition|)
name|getSpecialRegistrationSelectionDialog
argument_list|()
operator|.
name|open
argument_list|(
name|response
argument_list|)
expr_stmt|;
else|else
name|iStatus
operator|.
name|info
argument_list|(
name|MESSAGES
operator|.
name|failedNoSpecialRegistrations
argument_list|()
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|boolean
name|allSaved
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|iLastResult
control|)
block|{
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
operator|!
name|clazz
operator|.
name|isFreeTime
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isSaved
argument_list|()
condition|)
name|allSaved
operator|=
literal|false
expr_stmt|;
block|}
name|Widget
name|w
init|=
name|iAssignments
operator|.
name|getPrintWidget
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|,
literal|15
argument_list|)
decl_stmt|;
name|w
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|print
argument_list|(
operator|(
name|allSaved
operator|&&
operator|!
name|isChanged
argument_list|()
condition|?
name|MESSAGES
operator|.
name|studentSchedule
argument_list|()
else|:
name|MESSAGES
operator|.
name|studentScheduleNotEnrolled
argument_list|()
operator|)
argument_list|,
operator|(
name|CONSTANTS
operator|.
name|printReportShowUserName
argument_list|()
condition|?
name|iUserAuthentication
operator|.
name|getUser
argument_list|()
else|:
literal|""
operator|)
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|,
name|iAssignmentGrid
operator|.
name|getPrintWidget
argument_list|(
literal|900
argument_list|)
argument_list|,
name|w
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iExport
operator|!=
literal|null
condition|)
name|iExport
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|iCalendar
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTrackHistory
condition|)
block|{
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|item
init|=
name|iHistory
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|item
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|item
operator|<
literal|0
condition|)
name|item
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|item
operator|>=
name|iHistory
operator|.
name|size
argument_list|()
condition|)
name|item
operator|=
name|iHistory
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|item
operator|>=
literal|0
condition|)
name|iHistory
operator|.
name|get
argument_list|(
name|item
argument_list|)
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|isChanged
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
condition|?
name|MESSAGES
operator|.
name|queryLeaveChangesOnClassSchedule
argument_list|()
else|:
name|MESSAGES
operator|.
name|queryLeaveChangesOnCourseRequests
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|iSchedule
operator|.
name|isVisible
argument_list|()
condition|)
name|prev
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iSessionSelector
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionSelector
operator|.
name|AcademicSessionChangeHandler
argument_list|()
block|{
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|addHistory
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|changeTip
argument_list|()
expr_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|validate
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsSaving
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|CourseRequestInterface
name|request
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|iSectioningService
operator|.
name|saveRequest
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|CourseRequestInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|CourseRequestInterface
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|iScheduleChanged
condition|)
block|{
name|iScheduleChanged
operator|=
literal|false
expr_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
block|}
name|iSavedRequest
operator|=
name|result
expr_stmt|;
name|iCourseRequests
operator|.
name|setValue
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|notifySaveSucceeded
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|done
argument_list|(
name|MESSAGES
operator|.
name|saveRequestsOK
argument_list|()
argument_list|)
expr_stmt|;
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|MESSAGES
operator|.
name|saveRequestsConfirmation
argument_list|()
argument_list|,
name|RESOURCES
operator|.
name|statusDone
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|printConfirmation
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|saveRequestsFail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iSavedRequest
operator|!=
literal|null
operator|&&
operator|!
name|iSavedRequest
operator|.
name|equals
argument_list|(
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iSave
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|iSavedRequest
operator|.
name|isEmpty
argument_list|()
condition|?
name|MESSAGES
operator|.
name|warnRequestsEmptyOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnRequestsChangedOnCourseRequest
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|caught
operator|!=
literal|null
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|validationFailedWithMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|error
init|=
name|iCourseRequests
operator|.
name|getFirstError
argument_list|()
decl_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|error
operator|==
literal|null
condition|?
name|MESSAGES
operator|.
name|validationFailed
argument_list|()
else|:
name|MESSAGES
operator|.
name|validationFailedWithMessage
argument_list|(
name|error
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSavedRequest
operator|!=
literal|null
operator|&&
operator|!
name|iSavedRequest
operator|.
name|equals
argument_list|(
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
block|}
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iShowUnassignments
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|Cookies
operator|.
name|setCookie
argument_list|(
literal|"UniTime:Unassignments"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|fillIn
argument_list|(
name|iLastAssignment
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openSuggestionsBox
parameter_list|(
name|int
name|rowIndex
parameter_list|)
block|{
if|if
condition|(
name|iSuggestionsBox
operator|==
literal|null
condition|)
block|{
name|iSuggestionsBox
operator|=
operator|new
name|SuggestionsBox
argument_list|(
name|iAssignmentGrid
operator|.
name|getColorProvider
argument_list|()
argument_list|,
name|iOnline
argument_list|,
name|iSpecRegCx
argument_list|)
expr_stmt|;
name|iSuggestionsBox
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iAssignmentPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggestionsBox
operator|.
name|addSuggestionSelectedHandler
argument_list|(
operator|new
name|SuggestionsBox
operator|.
name|SuggestionSelectedHandler
argument_list|()
block|{
specifier|public
name|void
name|onSuggestionSelected
parameter_list|(
name|SuggestionsBox
operator|.
name|SuggestionSelectedEvent
name|event
parameter_list|)
block|{
name|ClassAssignmentInterface
name|result
init|=
name|event
operator|.
name|getSuggestion
argument_list|()
decl_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSuggestionsBox
operator|.
name|addQuickDropHandler
argument_list|(
operator|new
name|SuggestionsBox
operator|.
name|QuickDropHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onQuickDrop
parameter_list|(
name|SuggestionsBox
operator|.
name|QuickDropEvent
name|event
parameter_list|)
block|{
specifier|final
name|CourseRequestInterface
name|undo
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|iCourseRequests
operator|.
name|dropCourse
argument_list|(
name|event
operator|.
name|getAssignment
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestInterface
name|r
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setNoChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
name|iOnline
argument_list|,
name|r
argument_list|,
name|iLastResult
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionSectioningFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iAssignments
operator|.
name|setSelectedRow
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
name|iSuggestionsBox
operator|.
name|open
argument_list|(
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|,
name|iLastResult
argument_list|,
name|rowIndex
argument_list|,
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|ALTERNATIVES_DROP
argument_list|)
argument_list|,
name|useDefaultConfirmDialog
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|fillIn
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|iLastEnrollment
operator|=
literal|null
expr_stmt|;
name|iLastResult
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iLastAssignment
operator|=
name|result
expr_stmt|;
name|String
name|calendarUrl
init|=
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"calendar?sid="
operator|+
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
operator|+
literal|"&cid="
decl_stmt|;
name|String
name|ftParam
init|=
literal|"&ft="
decl_stmt|;
name|boolean
name|hasError
init|=
literal|false
decl_stmt|;
name|float
name|totalCredit
init|=
literal|0f
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|getCourseAssignments
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|allowEmptySchedule
argument_list|()
condition|)
block|{
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
argument_list|()
decl_stmt|;
name|iAssignmentGrid
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|result
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|boolean
name|firstClazz
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
name|calendarUrl
operator|+=
name|clazz
operator|.
name|getCourseId
argument_list|()
operator|+
literal|"-"
operator|+
name|clazz
operator|.
name|getClassId
argument_list|()
operator|+
literal|","
expr_stmt|;
if|else if
condition|(
name|clazz
operator|.
name|isFreeTime
argument_list|()
condition|)
name|ftParam
operator|+=
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
operator|+
literal|"-"
operator|+
name|clazz
operator|.
name|getStart
argument_list|()
operator|+
literal|"-"
operator|+
name|clazz
operator|.
name|getLength
argument_list|()
operator|+
literal|","
expr_stmt|;
name|String
name|style
init|=
operator|(
name|firstClazz
operator|&&
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"top-border-dashed"
else|:
literal|""
operator|)
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|WebTable
operator|.
name|IconsCell
name|icons
init|=
operator|new
name|WebTable
operator|.
name|IconsCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isInstructing
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|isInstructing
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|instructing
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|+=
operator|(
name|clazz
operator|.
name|isInstructing
argument_list|()
condition|?
literal|" text-steelblue"
else|:
literal|" text-steelblue-italic"
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|saved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|saved
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|clazz
operator|.
name|isDummy
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|unassignment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|unassignment
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|clazz
operator|.
name|isFreeTime
argument_list|()
operator|&&
name|result
operator|.
name|isCanEnroll
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|assignment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|assignment
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|error
argument_list|()
argument_list|,
name|clazz
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
name|style
operator|+=
literal|" text-red"
expr_stmt|;
name|hasError
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|isLocked
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|courseLocked
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isOfHighDemand
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|clazz
operator|.
name|getExpected
argument_list|()
argument_list|,
name|clazz
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
operator|&&
name|clazz
operator|.
name|hasOverlapNote
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|overlap
argument_list|()
argument_list|,
name|clazz
operator|.
name|getOverlapNote
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|cancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|classCancelled
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
name|totalCredit
operator|+=
name|clazz
operator|.
name|guessCreditCount
argument_list|()
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
name|clazz
operator|.
name|isDummy
argument_list|()
operator|||
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|LockCell
argument_list|(
name|clazz
operator|.
name|isPinned
argument_list|()
argument_list|,
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|ARIA
operator|.
name|freeTimePin
argument_list|(
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
else|:
name|ARIA
operator|.
name|classPin
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|hintLocked
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintUnlocked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|firstClazz
condition|?
literal|""
else|:
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|firstClazz
condition|?
literal|""
else|:
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getStartStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getEndStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|,
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
name|clazz
operator|.
name|isDummy
argument_list|()
operator|||
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|LockCell
argument_list|(
name|clazz
operator|.
name|isPinned
argument_list|()
argument_list|,
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|ARIA
operator|.
name|freeTimePin
argument_list|(
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
else|:
name|ARIA
operator|.
name|classPin
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|hintLocked
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintUnlocked
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|hasDatePattern
argument_list|()
condition|?
name|clazz
operator|.
name|getDatePattern
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|,
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|freeTimeAssignment
argument_list|(
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
block|{
name|row
operator|.
name|setStyleName
argument_list|(
literal|"teaching-assignment"
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isInstructing
argument_list|()
condition|)
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|instructingAssignment
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|teachingAssignment
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|classAssignment
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ArrayList
argument_list|<
name|TimeGrid
operator|.
name|Meeting
argument_list|>
name|meetings
init|=
operator|(
name|clazz
operator|.
name|isFreeTime
argument_list|()
condition|?
literal|null
else|:
name|iAssignmentGrid
operator|.
name|addClass
argument_list|(
name|clazz
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
operator|)
decl_stmt|;
comment|// row.setId(course.isFreeTime() ? "Free " + clazz.getDaysString() + " " +clazz.getStartString() + " - " + clazz.getEndString() : course.getCourseId() + ":" + clazz.getClassId());
specifier|final
name|int
name|index
init|=
name|rows
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isDummy
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
operator|(
operator|(
name|HasValueChangeHandlers
argument_list|<
name|Boolean
argument_list|>
operator|)
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|meetings
operator|==
literal|null
condition|)
block|{
name|iLastResult
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|setPinned
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
block|{
name|m
operator|.
name|setPinned
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|get
argument_list|(
name|m
operator|.
name|getIndex
argument_list|()
argument_list|)
operator|.
name|setPinned
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|isDummy
argument_list|()
operator|||
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|?
literal|null
else|:
name|clazz
argument_list|)
expr_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|firstClazz
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|style
init|=
literal|"text-red"
operator|+
operator|(
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" top-border-dashed"
else|:
literal|""
operator|)
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|String
name|unassignedMessage
init|=
name|MESSAGES
operator|.
name|courseNotAssigned
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|hasEnrollmentMessage
argument_list|()
condition|)
name|unassignedMessage
operator|=
name|course
operator|.
name|getEnrollmentMessage
argument_list|()
expr_stmt|;
if|else if
condition|(
name|course
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|)
name|unassignedMessage
operator|=
name|course
operator|.
name|getNote
argument_list|()
expr_stmt|;
if|else if
condition|(
name|course
operator|.
name|getOverlaps
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassignedMessage
operator|.
name|isEmpty
argument_list|()
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithFirst
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithLast
argument_list|(
name|x
argument_list|)
expr_stmt|;
else|else
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithMiddle
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getInstead
argument_list|()
operator|!=
literal|null
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictAssignedAlternative
argument_list|(
name|course
operator|.
name|getInstead
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedMessage
operator|+=
literal|"."
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|isNotAvailable
argument_list|()
condition|)
block|{
if|if
condition|(
name|course
operator|.
name|isFull
argument_list|()
condition|)
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|courseIsFull
argument_list|()
expr_stmt|;
else|else
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|classNotAvailable
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|IconsCell
name|icons
init|=
operator|new
name|WebTable
operator|.
name|IconsCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|isLocked
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|courseLocked
argument_list|()
argument_list|,
name|course
operator|.
name|getNote
argument_list|()
operator|!=
literal|null
condition|?
name|course
operator|.
name|getNote
argument_list|()
else|:
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|CheckboxCell
name|waitList
init|=
literal|null
decl_stmt|;
name|Boolean
name|w
init|=
name|iCourseRequests
operator|.
name|getWaitList
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
condition|)
block|{
name|waitList
operator|=
operator|new
name|WebTable
operator|.
name|CheckboxCell
argument_list|(
name|w
argument_list|,
name|MESSAGES
operator|.
name|toggleWaitList
argument_list|()
argument_list|,
name|ARIA
operator|.
name|titleRequestedWaitListForCourse
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|waitList
operator|.
name|getWidget
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|"toggle"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CheckBox
operator|)
name|waitList
operator|.
name|getWidget
argument_list|()
operator|)
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|setWaitList
argument_list|(
name|course
operator|.
name|getCourseName
argument_list|()
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestInterface
name|r
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setNoChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
name|iOnline
argument_list|,
name|r
argument_list|,
name|iLastResult
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionSectioningFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getStartStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getEndStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|(
name|waitList
operator|!=
literal|null
condition|?
name|waitList
else|:
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
operator|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|freeTimeUnassignment
argument_list|(
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseUnassginment
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|hasDatePattern
argument_list|()
condition|?
name|clazz
operator|.
name|getDatePattern
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|(
name|waitList
operator|!=
literal|null
condition|?
name|waitList
else|:
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
operator|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|freeTimeUnassignment
argument_list|(
literal|""
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseUnassginment
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|7
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|(
name|waitList
operator|!=
literal|null
condition|?
name|waitList
else|:
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
operator|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
if|if
condition|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|freeTimeUnassignment
argument_list|(
literal|""
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseUnassginment
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setId
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
else|:
name|course
operator|.
name|getCourseId
argument_list|()
operator|+
literal|":"
operator|+
name|clazz
operator|.
name|getClassId
argument_list|()
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|isDummy
argument_list|()
operator|||
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|?
literal|null
else|:
name|clazz
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|waitList
operator|!=
literal|null
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|11
argument_list|,
literal|null
argument_list|)
argument_list|,
name|waitList
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|12
argument_list|,
literal|null
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setId
argument_list|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|courseUnassginment
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
name|unassignedMessage
argument_list|)
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|add
argument_list|(
name|course
operator|.
name|addClassAssignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|row
operator|.
name|getCell
argument_list|(
name|row
operator|.
name|getNrCells
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setStyleName
argument_list|(
literal|"text-red-centered"
operator|+
operator|(
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" top-border-dashed"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iSavedAssignment
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|isFreeTime
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|isTeachingAssignment
argument_list|()
operator|&&
name|iShowUnassignments
operator|.
name|getValue
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|saved
range|:
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|saved
operator|.
name|isAssigned
argument_list|()
operator|||
name|saved
operator|.
name|isFreeTime
argument_list|()
operator|||
name|saved
operator|.
name|isTeachingAssignment
argument_list|()
operator|||
operator|!
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|saved
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|classes
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|saved
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|x
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
if|if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue
name|classes
continue|;
name|String
name|style
init|=
literal|"text-gray"
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|WebTable
operator|.
name|IconsCell
name|icons
init|=
operator|new
name|WebTable
operator|.
name|IconsCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|error
argument_list|()
argument_list|,
name|clazz
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|unassignment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|unassignment
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isOfHighDemand
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|clazz
operator|.
name|getExpected
argument_list|()
argument_list|,
name|clazz
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|cancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|classCancelled
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getStartStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getEndStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|,
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|hasDatePattern
argument_list|()
condition|?
name|clazz
operator|.
name|getDatePattern
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|,
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|previousAssignment
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|.
name|setSelectable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iSavedAssignment
operator|!=
literal|null
operator|&&
name|iShowUnassignments
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|x
range|:
name|result
operator|.
name|getCourseAssignments
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
name|boolean
name|firstClazz
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|String
name|style
init|=
literal|"text-gray"
operator|+
operator|(
name|firstClazz
operator|&&
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" top-border-dashed"
else|:
literal|""
operator|)
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|WebTable
operator|.
name|IconsCell
name|icons
init|=
operator|new
name|WebTable
operator|.
name|IconsCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|error
argument_list|()
argument_list|,
name|clazz
operator|.
name|getError
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|unassignment
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|unassignment
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isOfHighDemand
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|clazz
operator|.
name|getExpected
argument_list|()
argument_list|,
name|clazz
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isCancelled
argument_list|()
condition|)
name|icons
operator|.
name|add
argument_list|(
name|RESOURCES
operator|.
name|cancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|classCancelled
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSubpart
argument_list|()
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|firstClazz
condition|?
literal|""
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|firstClazz
condition|?
literal|""
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
literal|" "
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getStartStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
operator|.
name|aria
argument_list|(
name|clazz
operator|.
name|getEndStringAria
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|,
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|firstClazz
condition|?
literal|""
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
else|:
literal|""
argument_list|)
operator|.
name|aria
argument_list|(
name|firstClazz
condition|?
literal|""
else|:
name|course
operator|.
name|getCourseNbr
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|arrangeHours
argument_list|()
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|hasDatePattern
argument_list|()
condition|?
name|clazz
operator|.
name|getDatePattern
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|RoomCell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|()
argument_list|,
literal|", "
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|,
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|==
literal|null
operator|||
name|clazz
operator|.
name|getParentSection
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|10
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|NoteCell
argument_list|(
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|"text-red"
argument_list|)
argument_list|,
name|clazz
operator|.
name|getOverlapAndNote
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|,
name|icons
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|setAriaLabel
argument_list|(
name|ARIA
operator|.
name|previousAssignment
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|?
name|clazz
operator|.
name|getTimeStringAria
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|,
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|clazz
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
else|:
name|ARIA
operator|.
name|arrangeHours
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|row
operator|.
name|setSelectable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iLastResult
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|firstClazz
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|result
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
init|=
operator|new
name|CourseRequestInterface
operator|.
name|FreeTime
argument_list|()
decl_stmt|;
name|ft
operator|.
name|setLength
argument_list|(
name|clazz
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|ft
operator|.
name|setStart
argument_list|(
name|clazz
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
range|:
name|clazz
operator|.
name|getDays
argument_list|()
control|)
name|ft
operator|.
name|addDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|addFreeTime
argument_list|(
name|ft
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|WebTable
operator|.
name|Row
index|[]
name|rowArray
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|rows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Row
name|row
range|:
name|rows
control|)
name|rowArray
index|[
name|idx
operator|++
index|]
operator|=
name|row
expr_stmt|;
name|iAssignmentGrid
operator|.
name|shrink
argument_list|()
expr_stmt|;
comment|// iAssignmentPanel.setWidth(iAssignmentGrid.getWidth() + "px");
if|if
condition|(
name|hasNotAssignedClass
argument_list|(
name|result
argument_list|)
condition|)
block|{
name|iGridMessage
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|timeGridNotAssignedTimes
argument_list|()
argument_list|)
expr_stmt|;
name|iGridMessage
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iGridMessage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|iAssignments
operator|.
name|setData
argument_list|(
name|rowArray
argument_list|)
expr_stmt|;
if|if
condition|(
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|isShowing
argument_list|()
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iPanel
operator|.
name|remove
argument_list|(
name|iCourseRequests
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|insert
argument_list|(
name|iAssignmentDock
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_RESET
argument_list|)
condition|)
block|{
name|iReset
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|QUICK_ADD_DROP
argument_list|)
condition|)
block|{
name|iQuickAdd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|iEnroll
operator|.
name|setVisible
argument_list|(
name|result
operator|.
name|isCanEnroll
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|&&
name|iSpecRegCx
operator|.
name|isCanEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setVisible
argument_list|(
name|iSpecRegCx
operator|.
name|isCanSubmit
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|)
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setEnabled
argument_list|(
name|iSpecRegCx
operator|.
name|isCanSubmit
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|)
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setVisible
argument_list|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|HAS_SPECREG
argument_list|)
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setEnabled
argument_list|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|HAS_SPECREG
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasCheckboxMessage
argument_list|()
condition|)
block|{
if|if
condition|(
name|iCustomCheckbox
operator|==
literal|null
condition|)
block|{
name|iCustomCheckbox
operator|=
operator|new
name|CheckBox
argument_list|(
name|iEligibilityCheck
operator|.
name|getCheckboxMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HorizontalPanel
operator|)
name|iFooter
operator|.
name|getWidget
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|insert
argument_list|(
name|iCustomCheckbox
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HorizontalPanel
operator|)
name|iFooter
operator|.
name|getWidget
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iCustomCheckbox
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingRight
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iEnroll
operator|.
name|setEnabled
argument_list|(
name|iCustomCheckbox
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
name|result
operator|.
name|isCanEnroll
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|&&
name|iSpecRegCx
operator|.
name|isCanEnroll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iPrint
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
name|iSavedAssignment
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
name|iSavedAssignment
operator|!=
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|iExport
operator|!=
literal|null
condition|)
block|{
name|iExport
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iExport
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|iSchedule
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|scrollDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|iCalendar
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|calendarUrl
operator|.
name|endsWith
argument_list|(
literal|","
argument_list|)
condition|)
name|calendarUrl
operator|=
name|calendarUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|calendarUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|calendarUrl
operator|+=
name|ftParam
expr_stmt|;
if|if
condition|(
name|calendarUrl
operator|.
name|endsWith
argument_list|(
literal|","
argument_list|)
condition|)
name|calendarUrl
operator|=
name|calendarUrl
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|calendarUrl
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|setCalendarUrl
argument_list|(
name|calendarUrl
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setUrl
argument_list|(
name|calendarUrl
argument_list|)
expr_stmt|;
block|}
name|ResizeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getOffsetWidth
argument_list|()
argument_list|,
name|getOffsetHeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iAssignmentTab
operator|.
name|getSelectedTab
argument_list|()
operator|==
literal|0
condition|)
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|listOfClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|timetable
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|hasMessages
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasError
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|result
operator|.
name|getMessages
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStatus
operator|.
name|warning
argument_list|(
name|result
operator|.
name|getMessages
argument_list|(
literal|"<br>"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|updateScheduleChangedNoteIfNeeded
argument_list|()
expr_stmt|;
block|}
name|iTotalCredit
operator|.
name|setVisible
argument_list|(
name|totalCredit
operator|>
literal|0f
argument_list|)
expr_stmt|;
name|iTotalCredit
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|totalCredit
argument_list|(
name|totalCredit
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTotalCredit
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|noSchedule
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|isShowing
argument_list|()
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|prev
parameter_list|()
block|{
name|iPanel
operator|.
name|remove
argument_list|(
name|iAssignmentDock
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|insert
argument_list|(
name|iCourseRequests
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iRequests
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iReset
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iQuickAdd
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iGetSpecRegs
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCustomCheckbox
operator|!=
literal|null
condition|)
block|{
name|iCustomCheckbox
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|iPrint
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPrint
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iExport
operator|!=
literal|null
condition|)
block|{
name|iExport
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iExport
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|iSchedule
operator|.
name|setVisible
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setVisible
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setEnabled
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|DEGREE_PLANS
argument_list|)
condition|)
block|{
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|clearMessage
argument_list|()
expr_stmt|;
name|ResizeEvent
operator|.
name|fire
argument_list|(
name|this
argument_list|,
name|getOffsetWidth
argument_list|()
argument_list|,
name|getOffsetHeight
argument_list|()
argument_list|)
expr_stmt|;
name|AriaStatus
operator|.
name|getInstance
argument_list|()
operator|.
name|setHTML
argument_list|(
name|ARIA
operator|.
name|courseRequests
argument_list|()
argument_list|)
expr_stmt|;
name|updateScheduleChangedNoteIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|(
name|boolean
name|switchToRequests
parameter_list|)
block|{
if|if
condition|(
name|iShowUnassignments
operator|!=
literal|null
condition|)
name|iShowUnassignments
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSavedAssignment
operator|=
literal|null
expr_stmt|;
name|iLastAssignment
operator|=
literal|null
expr_stmt|;
name|iSpecialRegAssignment
operator|=
literal|null
expr_stmt|;
name|iCourseRequests
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iLastResult
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iAssignments
operator|.
name|clearData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iAssignmentGrid
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iShowUnassignments
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequests
operator|.
name|isVisible
argument_list|()
operator|&&
name|switchToRequests
condition|)
block|{
name|prev
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkEligibility
parameter_list|(
specifier|final
name|Long
name|sessionId
parameter_list|,
specifier|final
name|Long
name|studentId
parameter_list|,
specifier|final
name|boolean
name|saved
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
argument_list|>
name|ret
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsLoading
argument_list|()
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|reset
argument_list|()
expr_stmt|;
name|iSectioningService
operator|.
name|checkEligibility
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|result
parameter_list|)
block|{
name|clearMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEligibilityCheck
operator|=
name|result
expr_stmt|;
name|iSpecRegCx
operator|.
name|update
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setCanWaitList
argument_list|(
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_WAITLIST
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setArrowsVisible
argument_list|(
operator|!
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|NO_REQUEST_ARROWS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_USE_ASSISTANT
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
operator|&&
operator|(
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
operator|!
name|result
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|)
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
operator|&&
operator|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
operator|!
name|result
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
operator|)
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|warning
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|)
condition|)
block|{
if|if
condition|(
name|iPinDialog
operator|==
literal|null
condition|)
name|iPinDialog
operator|=
operator|new
name|PinDialog
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|PinDialog
operator|.
name|PinCallback
name|callback
init|=
operator|new
name|PinDialog
operator|.
name|PinCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setVisible
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setVisible
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setEnabled
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|DEGREE_PLANS
argument_list|)
condition|)
block|{
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|lastRequest
argument_list|(
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|saved
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|onSuccess
argument_list|(
name|iEligibilityCheck
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|result
parameter_list|)
block|{
name|iCourseRequests
operator|.
name|setCanWaitList
argument_list|(
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_WAITLIST
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setArrowsVisible
argument_list|(
operator|!
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|NO_REQUEST_ARROWS
argument_list|)
argument_list|)
expr_stmt|;
name|iEligibilityCheck
operator|=
name|result
expr_stmt|;
name|iSpecRegCx
operator|.
name|update
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setVisible
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setVisible
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setEnabled
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|DEGREE_PLANS
argument_list|)
condition|)
block|{
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|lastRequest
argument_list|(
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|saved
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|onSuccess
argument_list|(
name|iEligibilityCheck
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onMessage
parameter_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|result
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|)
condition|)
block|{
name|iStatus
operator|.
name|warning
argument_list|(
name|MESSAGES
operator|.
name|exceptionAuthenticationPinRequired
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMessage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|iPinDialog
operator|.
name|checkEligibility
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|sessionId
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSchedule
operator|.
name|setVisible
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setVisible
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setEnabled
argument_list|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|DEGREE_PLANS
argument_list|)
condition|)
block|{
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|lastRequest
argument_list|(
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|saved
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|onSuccess
argument_list|(
name|iEligibilityCheck
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iCourseRequests
operator|.
name|setCanWaitList
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iSchedule
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSchedule
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iDegreePlan
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|warning
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|onFailure
argument_list|(
operator|new
name|SectioningException
argument_list|(
name|result
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iEligibilityCheck
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|null
condition|)
name|ret
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionFailedEligibilityCheck
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|lastResult
parameter_list|(
specifier|final
name|CourseRequestInterface
name|request
parameter_list|,
specifier|final
name|Long
name|sessionId
parameter_list|,
specifier|final
name|Long
name|studentId
parameter_list|,
name|boolean
name|saved
parameter_list|,
specifier|final
name|boolean
name|changeViewIfNeeded
parameter_list|)
block|{
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
name|callback
init|=
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|ClassAssignmentInterface
name|saved
parameter_list|)
block|{
name|iSavedAssignment
operator|=
name|saved
expr_stmt|;
name|iShowUnassignments
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSpecRegCx
operator|.
name|hasRequestKey
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_SPECREG
argument_list|)
condition|)
block|{
name|iSectioningService
operator|.
name|retrieveSpecialRequest
argument_list|(
operator|new
name|RetrieveSpecialRegistrationRequest
argument_list|(
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|iSpecRegCx
operator|.
name|getRequestKey
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|RetrieveSpecialRegistrationResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iSpecRegCx
operator|.
name|update
argument_list|(
name|iEligibilityCheck
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setSpecRegRequestKeyValid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanEnroll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanSubmit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fillIn
argument_list|(
name|saved
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|requestSpecialRegistrationFail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RetrieveSpecialRegistrationResponse
name|specReg
parameter_list|)
block|{
name|iSpecRegCx
operator|.
name|setSpecRegMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setSpecRegRequestKeyValid
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanSubmit
argument_list|(
name|specReg
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanEnroll
argument_list|(
name|specReg
operator|.
name|isCanEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setRequestId
argument_list|(
name|specReg
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|specReg
operator|.
name|hasClassAssignments
argument_list|()
operator|&&
name|specReg
operator|.
name|getRequestId
argument_list|()
operator|!=
literal|null
condition|)
name|iSpecRegCx
operator|.
name|setDisclaimerAccepted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSpecialRegAssignment
operator|=
name|specReg
operator|.
name|getClassAssignments
argument_list|()
expr_stmt|;
if|if
condition|(
name|specReg
operator|.
name|hasClassAssignments
argument_list|()
condition|)
block|{
name|fillIn
argument_list|(
name|specReg
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|specReg
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|hasRequest
argument_list|()
condition|)
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|specReg
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fillIn
argument_list|(
name|saved
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|request
operator|.
name|isSaved
argument_list|()
operator|||
operator|!
name|CONSTANTS
operator|.
name|checkLastResult
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
name|saved
operator|.
name|isEnrolled
argument_list|()
operator|&&
operator|(
name|changeViewIfNeeded
operator|||
name|CONSTANTS
operator|.
name|startOverCanChangeView
argument_list|()
operator|)
operator|)
operator|||
name|iRequests
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|fillIn
argument_list|(
name|saved
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iLastAssignment
operator|=
name|saved
expr_stmt|;
name|iLastResult
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|saved
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isAssigned
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|iLastResult
operator|.
name|add
argument_list|(
name|clazz
operator|.
name|isDummy
argument_list|()
condition|?
literal|null
else|:
name|clazz
argument_list|)
expr_stmt|;
block|}
block|}
name|iStartOver
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|updateScheduleChangedNoteIfNeeded
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|iCourseRequests
operator|.
name|validate
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
block|{
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|classes
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|saved
operator|.
name|getCourseAssignments
argument_list|()
control|)
name|classes
operator|.
name|addAll
argument_list|(
name|course
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
name|iOnline
argument_list|,
name|request
argument_list|,
name|classes
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
name|saved
condition|)
name|iSectioningService
operator|.
name|savedResult
argument_list|(
name|iOnline
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|request
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
else|else
name|iSectioningService
operator|.
name|lastResult
argument_list|(
name|iOnline
argument_list|,
name|request
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|lastRequest
parameter_list|(
specifier|final
name|Long
name|sessionId
parameter_list|,
specifier|final
name|Long
name|studentId
parameter_list|,
specifier|final
name|boolean
name|saved
parameter_list|,
specifier|final
name|boolean
name|changeViewIfNeeded
parameter_list|)
block|{
if|if
condition|(
operator|!
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|isShowing
argument_list|()
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsLoading
argument_list|()
argument_list|)
expr_stmt|;
name|AsyncCallback
argument_list|<
name|CourseRequestInterface
argument_list|>
name|callback
init|=
operator|new
name|AsyncCallback
argument_list|<
name|CourseRequestInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|clear
argument_list|(
name|changeViewIfNeeded
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|MESSAGES
operator|.
name|exceptionNoStudent
argument_list|()
operator|.
name|equals
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|||
name|iEligibilityCheck
operator|==
literal|null
operator|||
operator|!
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|IS_ADMIN
argument_list|,
name|EligibilityFlag
operator|.
name|IS_ADVISOR
argument_list|)
condition|)
name|iStatus
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|CourseRequestInterface
name|request
parameter_list|)
block|{
if|if
condition|(
name|request
operator|.
name|isSaved
argument_list|()
condition|)
name|iSavedRequest
operator|=
name|request
expr_stmt|;
if|else if
condition|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iSavedRequest
operator|==
literal|null
condition|)
block|{
name|iSectioningService
operator|.
name|savedRequest
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|CourseRequestInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|CourseRequestInterface
name|savedRequest
parameter_list|)
block|{
name|iSavedRequest
operator|=
name|savedRequest
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|clear
argument_list|(
name|changeViewIfNeeded
argument_list|)
expr_stmt|;
comment|/* 				if (request.isSaved()&& request.getCourses().isEmpty()) { 					LoadingWidget.getInstance().hide(); 					return; 				}*/
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|updateHistory
argument_list|()
expr_stmt|;
if|if
condition|(
name|iSchedule
operator|.
name|isVisible
argument_list|()
operator|||
name|iRequests
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|lastResult
argument_list|(
name|request
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|saved
argument_list|,
name|changeViewIfNeeded
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iStartOver
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iStartOver
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|hasErrorMessage
argument_list|()
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|,
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
condition|)
if|if
condition|(
name|iEligibilityCheck
operator|.
name|hasMessage
argument_list|()
condition|)
name|iStatus
operator|.
name|warning
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
operator|+
literal|"\n"
operator|+
name|request
operator|.
name|getErrorMessaeg
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iStatus
operator|.
name|warning
argument_list|(
name|request
operator|.
name|getErrorMessaeg
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
name|saved
condition|)
name|iSectioningService
operator|.
name|savedRequest
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|studentId
argument_list|,
name|callback
argument_list|)
expr_stmt|;
else|else
name|iSectioningService
operator|.
name|lastRequest
argument_list|(
name|iOnline
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
argument_list|,
name|sessionId
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showSuggestionsAsync
parameter_list|(
specifier|final
name|int
name|rowIndex
parameter_list|)
block|{
if|if
condition|(
name|rowIndex
operator|<
literal|0
condition|)
return|return;
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|RunAsyncCallback
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|openSuggestionsBox
argument_list|(
name|rowIndex
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionSuggestionsFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|HistoryItem
block|{
specifier|private
name|CourseRequestInterface
name|iRequest
decl_stmt|;
specifier|private
name|ClassAssignmentInterface
name|iAssignment
decl_stmt|;
specifier|private
name|boolean
name|iFirstPage
decl_stmt|;
specifier|private
name|Long
name|iSessionId
decl_stmt|;
specifier|private
name|String
name|iUser
decl_stmt|;
specifier|private
name|String
name|iMessage
init|=
literal|null
decl_stmt|;
specifier|private
name|ScheduleStatus
operator|.
name|Level
name|iMessageLevel
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iTab
init|=
literal|0
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSRCx
decl_stmt|;
specifier|private
name|ClassAssignmentInterface
name|iSRassignment
init|=
literal|null
decl_stmt|;
specifier|private
name|HistoryItem
parameter_list|()
block|{
name|iRequest
operator|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
expr_stmt|;
name|iAssignment
operator|=
name|iLastAssignment
expr_stmt|;
name|iFirstPage
operator|=
name|iSchedule
operator|.
name|isVisible
argument_list|()
expr_stmt|;
name|iSessionId
operator|=
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
expr_stmt|;
name|iUser
operator|=
name|iUserAuthentication
operator|.
name|getUser
argument_list|()
expr_stmt|;
name|iMessage
operator|=
name|iStatus
operator|.
name|getMessage
argument_list|()
expr_stmt|;
name|iMessageLevel
operator|=
name|iStatus
operator|.
name|getLevel
argument_list|()
expr_stmt|;
name|iTab
operator|=
name|iAssignmentTab
operator|.
name|getSelectedTab
argument_list|()
expr_stmt|;
name|iSRCx
operator|=
operator|new
name|SpecialRegistrationContext
argument_list|(
name|iSpecRegCx
argument_list|)
expr_stmt|;
name|iSRassignment
operator|=
name|iSpecialRegAssignment
expr_stmt|;
block|}
specifier|public
name|void
name|restore
parameter_list|()
block|{
if|if
condition|(
name|isChanged
argument_list|()
operator|&&
operator|(
operator|(
name|iUser
operator|!=
literal|null
operator|&&
operator|!
name|iUser
operator|.
name|equals
argument_list|(
name|iUserAuthentication
operator|.
name|getUser
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
name|iSessionId
operator|!=
literal|null
operator|&&
operator|!
name|iSessionId
operator|.
name|equals
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|)
operator|)
operator|)
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|iMode
operator|.
name|isSectioning
argument_list|()
condition|?
name|MESSAGES
operator|.
name|queryLeaveChangesOnClassSchedule
argument_list|()
else|:
name|MESSAGES
operator|.
name|queryLeaveChangesOnCourseRequests
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doRestore
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doRestore
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doRestore
parameter_list|()
block|{
name|iInRestore
operator|=
literal|true
expr_stmt|;
name|iUserAuthentication
operator|.
name|setUser
argument_list|(
name|iUser
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
block|{
name|iSessionSelector
operator|.
name|selectSession
argument_list|(
name|iSessionId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
block|{
name|iSpecRegCx
operator|.
name|copy
argument_list|(
name|iSRCx
argument_list|)
expr_stmt|;
name|iSpecialRegAssignment
operator|=
name|iSRassignment
expr_stmt|;
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|iRequest
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTab
operator|!=
name|iAssignmentTab
operator|.
name|getSelectedTab
argument_list|()
condition|)
name|iAssignmentTab
operator|.
name|selectTab
argument_list|(
name|iTab
argument_list|)
expr_stmt|;
if|if
condition|(
name|iFirstPage
condition|)
block|{
if|if
condition|(
operator|!
name|iSchedule
operator|.
name|isVisible
argument_list|()
condition|)
name|prev
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|changeTip
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iAssignment
operator|!=
literal|null
condition|)
name|fillIn
argument_list|(
name|iAssignment
argument_list|)
expr_stmt|;
block|}
name|iStatus
operator|.
name|setMessage
argument_list|(
name|iMessageLevel
argument_list|,
name|iMessage
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
name|iSavedRequest
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
operator|&&
operator|!
name|iSavedRequest
operator|.
name|equals
argument_list|(
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|)
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iSave
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|iSavedRequest
operator|.
name|isEmpty
argument_list|()
condition|?
name|MESSAGES
operator|.
name|warnRequestsEmptyOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnRequestsChangedOnCourseRequest
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|iInRestore
operator|=
literal|false
expr_stmt|;
name|ResizeEvent
operator|.
name|fire
argument_list|(
name|StudentSectioningWidget
operator|.
name|this
argument_list|,
name|getOffsetWidth
argument_list|()
argument_list|,
name|getOffsetHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
name|iInRestore
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iInRestore
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
name|iInRestore
operator|=
literal|false
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setData
parameter_list|(
name|CourseRequestInterface
name|request
parameter_list|,
name|ClassAssignmentInterface
name|response
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|request
operator|.
name|isSaved
argument_list|()
condition|)
block|{
name|iSavedAssignment
operator|=
name|response
expr_stmt|;
name|iShowUnassignments
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|fillIn
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HandlerRegistration
name|addResizeHandler
parameter_list|(
name|ResizeHandler
name|handler
parameter_list|)
block|{
return|return
name|addHandler
argument_list|(
name|handler
argument_list|,
name|ResizeEvent
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|void
name|updateScheduleChangedNoteIfNeeded
parameter_list|()
block|{
if|if
condition|(
name|iScheduleChanged
condition|)
block|{
name|iScheduleChanged
operator|=
literal|false
expr_stmt|;
name|clearMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|iLastAssignment
operator|==
literal|null
operator|||
operator|!
name|iLastAssignment
operator|.
name|isCanEnroll
argument_list|()
operator|||
name|iEligibilityCheck
operator|==
literal|null
operator|||
operator|!
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|||
operator|!
name|iSpecRegCx
operator|.
name|isCanEnroll
argument_list|()
condition|)
block|{
if|if
condition|(
name|iLastAssignment
operator|!=
literal|null
operator|&&
name|iSpecialRegAssignment
operator|!=
literal|null
operator|&&
name|iSpecRegCx
operator|.
name|isCanSubmit
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|saved
range|:
name|iSpecialRegAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|saved
operator|.
name|isAssigned
argument_list|()
operator|||
name|saved
operator|.
name|isFreeTime
argument_list|()
operator|||
name|saved
operator|.
name|isTeachingAssignment
argument_list|()
operator|||
operator|!
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|saved
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|classes
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|saved
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|x
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue
name|classes
continue|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|MESSAGES
operator|.
name|warnSpecialRegistrationChanged
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iSpecialRegAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|x
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|MESSAGES
operator|.
name|warnSpecialRegistrationChanged
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return;
block|}
name|boolean
name|cr
init|=
name|iSchedule
operator|.
name|isVisible
argument_list|()
decl_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|iSavedAssignment
operator|!=
literal|null
condition|)
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
break|break
name|courses
break|;
block|}
block|}
block|}
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iEnroll
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
if|if
condition|(
name|cr
condition|)
name|iStatus
operator|.
name|warning
argument_list|(
name|empty
condition|?
name|MESSAGES
operator|.
name|warnScheduleEmptyOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnScheduleChangedOnCourseRequest
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
name|iStatus
operator|.
name|warning
argument_list|(
name|empty
condition|?
name|MESSAGES
operator|.
name|warnScheduleEmptyOnClassSchedule
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnScheduleChangedOnClassSchedule
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
if|if
condition|(
name|iSavedAssignment
operator|!=
literal|null
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|saved
range|:
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|saved
operator|.
name|isAssigned
argument_list|()
operator|||
name|saved
operator|.
name|isFreeTime
argument_list|()
operator|||
name|saved
operator|.
name|isTeachingAssignment
argument_list|()
operator|||
operator|!
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|saved
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue;
name|classes
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|saved
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|x
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|getClassId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getClassId
argument_list|()
argument_list|)
condition|)
continue|continue
name|classes
continue|;
block|}
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iEnroll
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|cr
condition|?
name|MESSAGES
operator|.
name|warnScheduleChangedOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnScheduleChangedOnClassSchedule
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iSavedAssignment
operator|!=
literal|null
condition|)
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|x
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
continue|continue
name|courses
continue|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|clazz
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iEnroll
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|cr
condition|?
name|MESSAGES
operator|.
name|warnScheduleChangedOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnScheduleChangedOnClassSchedule
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|CourseRequestInterface
name|request
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|(
name|course
argument_list|)
condition|)
continue|continue
name|courses
continue|;
block|}
for|for
control|(
name|CourseRequestInterface
operator|.
name|Request
name|r
range|:
name|request
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|hasRequestedCourse
argument_list|(
name|course
argument_list|)
condition|)
continue|continue
name|courses
continue|;
block|}
name|iScheduleChanged
operator|=
literal|true
expr_stmt|;
name|iEnroll
operator|.
name|addStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|warning
argument_list|(
name|cr
condition|?
name|MESSAGES
operator|.
name|warnScheduleChangedOnCourseRequest
argument_list|()
else|:
name|MESSAGES
operator|.
name|warnScheduleChangedOnClassSchedule
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isChanged
parameter_list|()
block|{
return|return
name|iScheduleChanged
return|;
block|}
specifier|public
name|void
name|clearMessage
parameter_list|()
block|{
name|clearMessage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clearMessage
parameter_list|(
name|boolean
name|showEligibility
parameter_list|)
block|{
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iOnline
operator|&&
name|showEligibility
condition|)
block|{
if|if
condition|(
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|PIN_REQUIRED
argument_list|)
condition|)
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionAuthenticationPinNotProvided
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iEligibilityCheck
operator|.
name|hasMessage
argument_list|()
operator|&&
operator|(
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
operator|!
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
operator|)
condition|)
name|iStatus
operator|.
name|error
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iEligibilityCheck
operator|.
name|hasMessage
argument_list|()
operator|&&
operator|(
operator|!
name|iMode
operator|.
name|isSectioning
argument_list|()
operator|&&
operator|!
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_REGISTER
argument_list|)
operator|)
condition|)
name|iStatus
operator|.
name|error
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iEligibilityCheck
operator|.
name|hasMessage
argument_list|()
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|RECHECK_BEFORE_ENROLLMENT
argument_list|)
condition|)
name|iStatus
operator|.
name|warning
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|else if
condition|(
name|iEligibilityCheck
operator|.
name|hasMessage
argument_list|()
condition|)
name|iStatus
operator|.
name|info
argument_list|(
name|iEligibilityCheck
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|else
block|{
name|iStatus
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iEnroll
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iStatus
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iEnroll
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iSave
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-EnrollButton"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isChanged
argument_list|()
condition|)
name|updateScheduleChangedNoteIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setElibibilityCheckDuringEnrollment
parameter_list|(
name|EligibilityCheck
name|check
parameter_list|)
block|{
name|iEligibilityCheck
operator|=
name|check
expr_stmt|;
name|iSpecRegCx
operator|.
name|update
argument_list|(
name|check
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setCanWaitList
argument_list|(
name|check
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|CAN_WAITLIST
argument_list|)
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setArrowsVisible
argument_list|(
operator|!
name|check
operator|.
name|hasFlag
argument_list|(
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
operator|.
name|EligibilityFlag
operator|.
name|NO_REQUEST_ARROWS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|check
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CAN_ENROLL
argument_list|)
condition|)
block|{
name|iEnroll
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|check
operator|.
name|hasCheckboxMessage
argument_list|()
condition|)
block|{
if|if
condition|(
name|iCustomCheckbox
operator|==
literal|null
condition|)
block|{
name|iCustomCheckbox
operator|=
operator|new
name|CheckBox
argument_list|(
name|iEligibilityCheck
operator|.
name|getCheckboxMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HorizontalPanel
operator|)
name|iFooter
operator|.
name|getWidget
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|insert
argument_list|(
name|iCustomCheckbox
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HorizontalPanel
operator|)
name|iFooter
operator|.
name|getWidget
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iCustomCheckbox
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingRight
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iCustomCheckbox
operator|.
name|setHTML
argument_list|(
name|check
operator|.
name|getCheckboxMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iEnroll
operator|.
name|setEnabled
argument_list|(
name|iCustomCheckbox
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iCustomCheckbox
operator|!=
literal|null
condition|)
block|{
name|iCustomCheckbox
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iCustomCheckbox
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|hasNotAssignedClass
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|result
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isAssigned
argument_list|()
operator|&&
operator|!
name|course
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|clazz
operator|.
name|isAssigned
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getCoursesToDrop
parameter_list|()
block|{
if|if
condition|(
name|iLastAssignment
operator|!=
literal|null
operator|&&
name|iSavedAssignment
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|courses
label|:
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|iSavedAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|course
operator|.
name|isAssigned
argument_list|()
operator|||
name|course
operator|.
name|isFreeTime
argument_list|()
operator|||
name|course
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
continue|continue;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|x
range|:
name|iLastAssignment
operator|.
name|getCourseAssignments
argument_list|()
control|)
if|if
condition|(
name|course
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getCourseId
argument_list|()
argument_list|)
operator|&&
name|x
operator|.
name|isAssigned
argument_list|()
condition|)
continue|continue
name|courses
continue|;
name|ret
operator|.
name|add
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|,
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|useDefaultConfirmDialog
parameter_list|()
block|{
return|return
name|iEligibilityCheck
operator|==
literal|null
operator|||
operator|!
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|GWT_CONFIRMATIONS
argument_list|)
return|;
block|}
specifier|protected
name|Command
name|confirmEnrollment
parameter_list|(
specifier|final
name|Command
name|callback
parameter_list|)
block|{
if|if
condition|(
name|iEligibilityCheck
operator|!=
literal|null
operator|&&
name|iEligibilityCheck
operator|.
name|hasFlag
argument_list|(
name|EligibilityFlag
operator|.
name|CONFIRM_DROP
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|drops
init|=
name|getCoursesToDrop
argument_list|()
decl_stmt|;
if|if
condition|(
name|drops
operator|!=
literal|null
operator|&&
operator|!
name|drops
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|confirmEnrollmentCourseDrop
argument_list|(
name|ToolBox
operator|.
name|toString
argument_list|(
name|drops
argument_list|)
argument_list|)
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
return|return
name|callback
return|;
block|}
specifier|protected
name|CourseFinder
name|getQuickAddFinder
parameter_list|()
block|{
if|if
condition|(
name|iQuickAddFinder
operator|==
literal|null
condition|)
block|{
name|iQuickAddFinder
operator|=
operator|new
name|CourseFinderDialog
argument_list|()
expr_stmt|;
operator|(
operator|(
name|CourseFinderDialog
operator|)
name|iQuickAddFinder
operator|)
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogQuickAdd
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|CourseFinderDialog
operator|)
name|iQuickAddFinder
operator|)
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iAssignmentPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderCourses
name|courses
init|=
operator|new
name|CourseFinderCourses
argument_list|(
name|CONSTANTS
operator|.
name|showCourseTitle
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|courseFinderSuggestWhenEmpty
argument_list|()
argument_list|)
decl_stmt|;
name|courses
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|String
argument_list|,
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|String
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|CourseAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listCourseOfferings
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
argument_list|,
literal|null
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderDetails
name|details
init|=
operator|new
name|CourseFinderDetails
argument_list|()
decl_stmt|;
name|details
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|retrieveCourseDetails
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|CourseFinderClasses
name|classes
init|=
operator|new
name|CourseFinderClasses
argument_list|(
literal|true
argument_list|,
name|iSpecRegCx
argument_list|)
decl_stmt|;
name|classes
operator|.
name|setDataProvider
argument_list|(
operator|new
name|DataProvider
argument_list|<
name|CourseAssignment
argument_list|,
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|getData
parameter_list|(
name|CourseAssignment
name|source
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|ClassAssignment
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listClasses
argument_list|(
name|iOnline
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|source
operator|.
name|hasUniqueName
argument_list|()
condition|?
name|source
operator|.
name|getCourseName
argument_list|()
else|:
name|source
operator|.
name|getCourseNameWithTitle
argument_list|()
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|courses
operator|.
name|setCourseDetails
argument_list|(
name|details
argument_list|,
name|classes
argument_list|)
expr_stmt|;
name|iQuickAddFinder
operator|.
name|setTabs
argument_list|(
name|courses
argument_list|)
expr_stmt|;
name|iQuickAddFinder
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
specifier|final
name|SelectionEvent
argument_list|<
name|RequestedCourse
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|==
literal|null
operator|||
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iStatus
operator|.
name|warning
argument_list|(
name|MESSAGES
operator|.
name|courseSelectionNoCourseSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|iCourseRequests
operator|.
name|hasCourse
argument_list|(
name|event
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|confirmQuickDrop
argument_list|(
name|event
operator|.
name|getSelectedItem
argument_list|()
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|CourseRequestInterface
name|undo
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|iCourseRequests
operator|.
name|dropCourse
argument_list|(
name|event
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|courseRequestsScheduling
argument_list|()
argument_list|)
expr_stmt|;
name|CourseRequestInterface
name|r
init|=
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|r
operator|.
name|setNoChange
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|section
argument_list|(
name|iOnline
argument_list|,
name|r
argument_list|,
name|iLastResult
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|exceptionSectioningFailed
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|undo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
name|iQuickAddFinder
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iQuickAddSuggestions
operator|==
literal|null
condition|)
block|{
name|iQuickAddSuggestions
operator|=
operator|new
name|SuggestionsBox
argument_list|(
name|iAssignmentGrid
operator|.
name|getColorProvider
argument_list|()
argument_list|,
name|iOnline
argument_list|,
name|iSpecRegCx
argument_list|)
expr_stmt|;
name|iQuickAddSuggestions
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iAssignmentPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iQuickAddSuggestions
operator|.
name|open
argument_list|(
name|iCourseRequests
operator|.
name|getRequest
argument_list|()
argument_list|,
name|iLastResult
argument_list|,
name|event
operator|.
name|getSelectedItem
argument_list|()
argument_list|,
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|clearMessage
argument_list|()
expr_stmt|;
name|iCourseRequests
operator|.
name|addCourse
argument_list|(
name|event
operator|.
name|getSelectedItem
argument_list|()
argument_list|)
expr_stmt|;
name|fillIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
name|iQuickAddFinder
operator|.
name|setValue
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|caught
operator|!=
literal|null
condition|)
name|iStatus
operator|.
name|error
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iAssignmentPanel
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|iQuickAddFinder
return|;
block|}
specifier|protected
name|void
name|checkSpecialRegistrationAfterFailedSubmitSchedule
parameter_list|(
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|lastEnrollment
parameter_list|)
block|{
name|iLastEnrollment
operator|=
name|lastEnrollment
expr_stmt|;
if|if
condition|(
operator|!
name|iSpecRegCx
operator|.
name|isCanSubmit
argument_list|()
operator|&&
operator|!
name|iSpecRegCx
operator|.
name|hasRequestId
argument_list|()
condition|)
block|{
comment|/* 			if (iLastAssignment != null&& iLastAssignment.hasErrors()) { 				for (ErrorMessage e: iLastAssignment.getErrors()) { 					if (!iEligibilityCheck.hasOverride(e.getCode())) return; 				} 			} 			iSubmitSpecReg.setEnabled(true); 			iSubmitSpecReg.setVisible(true); 			iSubmitSpecReg.addStyleName("unitime-EnrollButton"); 			iEnroll.setEnabled(false); 			iEnroll.setVisible(false); 			UniTimeConfirmationDialog.confirm(MESSAGES.confirmSpecialRegistrationSubmit(), new Command() { 				@Override 				public void execute() { 					iSubmitSpecReg.click(); 				} 			}); 			*/
name|iSectioningService
operator|.
name|checkSpecialRequestEligibility
argument_list|(
operator|new
name|SpecialRegistrationEligibilityRequest
argument_list|(
name|iSessionSelector
operator|.
name|getAcademicSessionId
argument_list|()
argument_list|,
name|iEligibilityCheck
operator|.
name|getStudentId
argument_list|()
argument_list|,
name|iLastEnrollment
argument_list|,
name|iLastAssignment
operator|==
literal|null
condition|?
literal|null
else|:
name|iLastAssignment
operator|.
name|getErrors
argument_list|()
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SpecialRegistrationEligibilityResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iStatus
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|requestSpecialRegistrationFail
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SpecialRegistrationEligibilityResponse
name|response
parameter_list|)
block|{
name|iSubmitSpecReg
operator|.
name|setEnabled
argument_list|(
name|response
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|iSubmitSpecReg
operator|.
name|setVisible
argument_list|(
name|response
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|isCanSubmit
argument_list|()
condition|)
block|{
name|iEnroll
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnroll
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|response
operator|.
name|isCanSubmit
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|response
operator|.
name|hasMessage
argument_list|()
condition|?
name|response
operator|.
name|getMessage
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|confirmSpecialRegistrationSubmit
argument_list|()
else|:
name|MESSAGES
operator|.
name|confirmSpecialRegistrationSubmit
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSubmitSpecReg
operator|.
name|click
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|response
operator|.
name|hasMessage
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|alert
argument_list|(
name|response
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SpecialRegistrationSelectionDialog
name|getSpecialRegistrationSelectionDialog
parameter_list|()
block|{
if|if
condition|(
name|iSpecialRegistrationSelectionDialog
operator|==
literal|null
condition|)
block|{
name|iSpecialRegistrationSelectionDialog
operator|=
operator|new
name|SpecialRegistrationSelectionDialog
argument_list|(
name|iSpecRegCx
argument_list|)
block|{
specifier|public
name|void
name|doSubmit
parameter_list|(
name|RetrieveSpecialRegistrationResponse
name|specReg
parameter_list|)
block|{
name|super
operator|.
name|doSubmit
argument_list|(
name|specReg
argument_list|)
expr_stmt|;
if|if
condition|(
name|specReg
operator|==
literal|null
condition|)
block|{
name|iSpecRegCx
operator|.
name|update
argument_list|(
name|iEligibilityCheck
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setSpecRegMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setRequestId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanSubmit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanEnroll
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iSpecialRegAssignment
operator|=
name|iSavedAssignment
expr_stmt|;
name|fillIn
argument_list|(
name|iSavedAssignment
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|iSpecRegCx
operator|.
name|setSpecRegMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setRequestId
argument_list|(
name|specReg
operator|.
name|getRequestId
argument_list|()
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanSubmit
argument_list|(
name|specReg
operator|.
name|isCanSubmit
argument_list|()
argument_list|)
expr_stmt|;
name|iSpecRegCx
operator|.
name|setCanEnroll
argument_list|(
name|specReg
operator|.
name|isCanEnroll
argument_list|()
argument_list|)
expr_stmt|;
name|iSpecialRegAssignment
operator|=
name|specReg
operator|.
name|getClassAssignments
argument_list|()
expr_stmt|;
if|if
condition|(
name|specReg
operator|.
name|hasClassAssignments
argument_list|()
condition|)
block|{
name|fillIn
argument_list|(
name|specReg
operator|.
name|getClassAssignments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|specReg
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|hasRequest
argument_list|()
condition|)
name|iCourseRequests
operator|.
name|setRequest
argument_list|(
name|specReg
operator|.
name|getClassAssignments
argument_list|()
operator|.
name|getRequest
argument_list|()
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fillIn
argument_list|(
name|iSavedAssignment
argument_list|)
expr_stmt|;
name|addHistory
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
return|return
name|iSpecialRegistrationSelectionDialog
return|;
block|}
specifier|protected
name|void
name|printConfirmation
parameter_list|(
name|CourseRequestInterface
name|savedRequests
parameter_list|)
block|{
name|WebTable
name|requests
init|=
operator|new
name|WebTable
argument_list|()
decl_stmt|;
name|requests
operator|.
name|setEmptyMessage
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|emptyRequests
argument_list|()
argument_list|)
expr_stmt|;
name|requests
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colPriority
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"25px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"200px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"20px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colPreferences
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colWarnings
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"200px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colStatus
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"20px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|StudentSectioningWidget
operator|.
name|MESSAGES
operator|.
name|colWaitList
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"20px"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasPref
init|=
literal|false
decl_stmt|,
name|hasWarn
init|=
literal|false
decl_stmt|,
name|hasWait
init|=
literal|false
decl_stmt|;
name|NumberFormat
name|df
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"0.#"
argument_list|)
decl_stmt|;
name|CheckCoursesResponse
name|check
init|=
operator|new
name|CheckCoursesResponse
argument_list|(
name|savedRequests
operator|.
name|getConfirmations
argument_list|()
argument_list|)
decl_stmt|;
name|hasWarn
operator|=
name|savedRequests
operator|.
name|hasConfirmations
argument_list|()
expr_stmt|;
name|int
name|priority
init|=
literal|1
decl_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|savedRequests
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
continue|continue;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isWaitList
argument_list|()
condition|)
name|hasWait
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|ImageResource
name|icon
init|=
literal|null
decl_stmt|;
name|String
name|iconText
init|=
literal|null
decl_stmt|;
name|String
name|msg
init|=
name|check
operator|.
name|getMessage
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"\n"
argument_list|,
literal|"CREDIT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|check
operator|.
name|isError
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|&&
operator|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
operator|||
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|)
condition|)
block|{
name|icon
operator|=
name|RESOURCES
operator|.
name|requestError
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|msg
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|ENROLLED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestEnrolled
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|MESSAGES
operator|.
name|enrolled
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_NEEDED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|MESSAGES
operator|.
name|overrideNeeded
argument_list|(
name|msg
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|SAVED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|requested
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestRejected
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overrideRejected
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestPending
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overridePending
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestCancelled
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overrideCancelled
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overrideApproved
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|check
operator|.
name|isError
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
condition|)
name|icon
operator|=
name|RESOURCES
operator|.
name|requestError
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|msg
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|.
name|hasStatusNote
argument_list|()
condition|)
name|iconText
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|rc
operator|.
name|getStatusNote
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|prefs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|prefs
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|rc
operator|.
name|getSelectedClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|prefs
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|status
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|ENROLLED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusEnrolled
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusApproved
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusCancelled
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusPending
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRejected
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|isEmpty
argument_list|()
condition|)
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRegistered
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefs
operator|!=
literal|null
condition|)
name|hasPref
operator|=
literal|true
expr_stmt|;
name|WebTable
operator|.
name|Cell
name|credit
init|=
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|?
operator|(
name|rc
operator|.
name|getCreditMin
argument_list|()
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCreditMax
argument_list|()
argument_list|)
condition|?
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMin
argument_list|()
argument_list|)
else|:
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMin
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMax
argument_list|()
argument_list|)
operator|)
else|:
literal|""
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|String
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|check
operator|!=
literal|null
condition|)
name|note
operator|=
name|check
operator|.
name|getMessage
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"\n"
argument_list|,
literal|"CREDIT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasStatusNote
argument_list|()
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
operator|+
literal|"\n"
operator|)
operator|+
name|rc
operator|.
name|getStatusNote
argument_list|()
expr_stmt|;
name|P
name|messages
init|=
operator|new
name|P
argument_list|(
literal|"text-pre-wrap"
argument_list|)
decl_stmt|;
name|messages
operator|.
name|setText
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|first
condition|?
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|priority
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|rc
operator|.
name|hasCourseTitle
argument_list|()
condition|?
name|rc
operator|.
name|getCourseTitle
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
name|credit
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|ToolBox
operator|.
name|toString
argument_list|(
name|prefs
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|WidgetCell
argument_list|(
name|messages
argument_list|,
name|note
argument_list|)
argument_list|,
operator|(
name|icon
operator|==
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|status
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|icon
argument_list|,
name|iconText
argument_list|,
name|status
argument_list|)
operator|)
argument_list|,
operator|(
name|first
operator|&&
name|request
operator|.
name|isWaitList
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|requestsWaitList
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|descriptionRequestWaitListed
argument_list|()
argument_list|,
literal|""
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|>
literal|1
operator|&&
name|first
condition|)
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|String
name|free
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
name|free
operator|+=
literal|", "
expr_stmt|;
name|free
operator|+=
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|first
condition|?
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|priority
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|free
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|requested
argument_list|(
name|free
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|reqStatusRegistered
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|priority
operator|>
literal|1
operator|&&
name|first
condition|)
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|priority
operator|++
expr_stmt|;
block|}
name|priority
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|Request
name|request
range|:
name|savedRequests
operator|.
name|getAlternatives
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
continue|continue;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isWaitList
argument_list|()
condition|)
name|hasWait
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|isCourse
argument_list|()
condition|)
block|{
name|ImageResource
name|icon
init|=
literal|null
decl_stmt|;
name|String
name|iconText
init|=
literal|null
decl_stmt|;
name|String
name|msg
init|=
name|check
operator|.
name|getMessage
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"\n"
argument_list|,
literal|"CREDIT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|check
operator|.
name|isError
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|&&
operator|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
operator|||
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_REJECTED
operator|)
condition|)
block|{
name|icon
operator|=
name|RESOURCES
operator|.
name|requestError
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|msg
operator|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|ENROLLED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestEnrolled
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|MESSAGES
operator|.
name|enrolled
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_NEEDED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|MESSAGES
operator|.
name|overrideNeeded
argument_list|(
name|msg
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|SAVED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|requested
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestRejected
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overrideRejected
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestPending
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overridePending
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestCancelled
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overrideCancelled
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
operator|(
name|msg
operator|==
literal|null
condition|?
literal|""
else|:
name|MESSAGES
operator|.
name|requestWarnings
argument_list|(
name|msg
argument_list|)
operator|+
literal|"\n\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|overrideApproved
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
operator|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
name|check
operator|.
name|isError
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
condition|)
name|icon
operator|=
name|RESOURCES
operator|.
name|requestError
argument_list|()
expr_stmt|;
name|iconText
operator|=
operator|(
name|msg
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|rc
operator|.
name|hasStatusNote
argument_list|()
condition|)
name|iconText
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|overrideNote
argument_list|(
name|rc
operator|.
name|getStatusNote
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|prefs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|prefs
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|rc
operator|.
name|getSelectedClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|prefs
operator|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefs
operator|!=
literal|null
condition|)
name|hasPref
operator|=
literal|true
expr_stmt|;
name|String
name|status
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|ENROLLED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusEnrolled
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusApproved
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusCancelled
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusPending
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRejected
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|status
operator|.
name|isEmpty
argument_list|()
condition|)
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRegistered
argument_list|()
expr_stmt|;
name|WebTable
operator|.
name|Cell
name|credit
init|=
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|?
operator|(
name|rc
operator|.
name|getCreditMin
argument_list|()
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCreditMax
argument_list|()
argument_list|)
condition|?
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMin
argument_list|()
argument_list|)
else|:
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMin
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMax
argument_list|()
argument_list|)
operator|)
else|:
literal|""
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|String
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|check
operator|!=
literal|null
condition|)
name|note
operator|=
name|check
operator|.
name|getMessage
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|"\n"
argument_list|,
literal|"CREDIT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasStatusNote
argument_list|()
condition|)
name|note
operator|=
operator|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
operator|+
literal|"\n"
operator|)
operator|+
name|rc
operator|.
name|getStatusNote
argument_list|()
expr_stmt|;
name|P
name|messages
init|=
operator|new
name|P
argument_list|(
literal|"text-pre-wrap"
argument_list|)
decl_stmt|;
name|messages
operator|.
name|setText
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|first
condition|?
name|MESSAGES
operator|.
name|courseRequestsAlternative
argument_list|(
name|priority
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|rc
operator|.
name|hasCourseTitle
argument_list|()
condition|?
name|rc
operator|.
name|getCourseTitle
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
name|credit
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|ToolBox
operator|.
name|toString
argument_list|(
name|prefs
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|WidgetCell
argument_list|(
name|messages
argument_list|,
name|note
argument_list|)
argument_list|,
operator|(
name|icon
operator|==
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|status
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|icon
argument_list|,
name|iconText
argument_list|,
name|status
argument_list|)
operator|)
argument_list|,
operator|(
name|first
operator|&&
name|request
operator|.
name|isWaitList
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|requestsWaitList
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|descriptionRequestWaitListed
argument_list|()
argument_list|,
literal|""
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|priority
operator|==
literal|1
condition|?
literal|"top-border-solid"
else|:
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rc
operator|.
name|isFreeTime
argument_list|()
condition|)
block|{
name|String
name|free
init|=
literal|""
decl_stmt|;
for|for
control|(
name|FreeTime
name|ft
range|:
name|rc
operator|.
name|getFreeTime
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|free
operator|.
name|isEmpty
argument_list|()
condition|)
name|free
operator|+=
literal|", "
expr_stmt|;
name|free
operator|+=
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|first
condition|?
name|MESSAGES
operator|.
name|courseRequestsPriority
argument_list|(
name|priority
argument_list|)
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|free
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|requested
argument_list|(
name|free
argument_list|)
argument_list|,
name|MESSAGES
operator|.
name|reqStatusRegistered
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|first
condition|)
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|priority
operator|==
literal|1
condition|?
literal|"top-border-solid"
else|:
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|priority
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|savedRequests
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ImageResource
name|icon
init|=
literal|null
decl_stmt|;
name|String
name|status
init|=
literal|""
decl_stmt|;
name|String
name|note
init|=
literal|null
decl_stmt|;
name|String
name|iconText
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|savedRequests
operator|.
name|hasCreditWarning
argument_list|()
condition|)
block|{
name|note
operator|=
name|savedRequests
operator|.
name|getCreditWarning
argument_list|()
expr_stmt|;
name|iconText
operator|=
name|savedRequests
operator|.
name|getCreditWarning
argument_list|()
expr_stmt|;
name|hasWarn
operator|=
literal|true
expr_stmt|;
block|}
switch|switch
condition|(
name|savedRequests
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|)
block|{
case|case
name|CREDIT_HIGH
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestError
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRejected
argument_list|()
expr_stmt|;
name|iconText
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusTooHigh
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestError
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRejected
argument_list|()
expr_stmt|;
name|iconText
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusDenied
argument_list|()
expr_stmt|;
break|break;
case|case
name|CREDIT_LOW
case|:
case|case
name|OVERRIDE_NEEDED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusWarning
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusCancelled
argument_list|()
expr_stmt|;
name|iconText
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusCancelled
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestPending
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusPending
argument_list|()
expr_stmt|;
name|iconText
operator|+=
literal|"\n"
operator|+
name|MESSAGES
operator|.
name|creditStatusPending
argument_list|()
expr_stmt|;
break|break;
case|case
name|OVERRIDE_APPROVED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusApproved
argument_list|()
expr_stmt|;
name|iconText
operator|+=
operator|(
name|iconText
operator|==
literal|null
condition|?
literal|""
else|:
name|iconText
operator|+
literal|"\n"
operator|)
operator|+
name|MESSAGES
operator|.
name|creditStatusApproved
argument_list|()
expr_stmt|;
break|break;
case|case
name|SAVED
case|:
name|icon
operator|=
name|RESOURCES
operator|.
name|requestSaved
argument_list|()
expr_stmt|;
name|status
operator|=
name|MESSAGES
operator|.
name|reqStatusRegistered
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|savedRequests
operator|.
name|hasCreditNote
argument_list|()
condition|)
block|{
name|note
operator|=
operator|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
operator|+
literal|"\n"
operator|)
operator|+
name|savedRequests
operator|.
name|getCreditNote
argument_list|()
expr_stmt|;
name|hasWarn
operator|=
literal|true
expr_stmt|;
block|}
name|float
index|[]
name|range
init|=
name|savedRequests
operator|.
name|getCreditRange
argument_list|()
decl_stmt|;
name|WebTable
operator|.
name|Cell
name|credit
init|=
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|range
operator|!=
literal|null
condition|?
name|range
index|[
literal|0
index|]
operator|<
name|range
index|[
literal|1
index|]
condition|?
name|df
operator|.
name|format
argument_list|(
name|range
index|[
literal|0
index|]
argument_list|)
operator|+
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|range
index|[
literal|1
index|]
argument_list|)
else|:
name|df
operator|.
name|format
argument_list|(
name|range
index|[
literal|0
index|]
argument_list|)
else|:
literal|""
argument_list|)
decl_stmt|;
name|credit
operator|.
name|setHorizontalAlignment
argument_list|(
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|P
name|messages
init|=
operator|new
name|P
argument_list|(
literal|"text-pre-wrap"
argument_list|)
decl_stmt|;
name|messages
operator|.
name|setText
argument_list|(
name|note
argument_list|)
expr_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|rowRequestedCredit
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
name|credit
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|WidgetCell
argument_list|(
name|messages
argument_list|,
name|note
argument_list|)
argument_list|,
operator|(
name|icon
operator|==
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|status
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|icon
argument_list|,
name|iconText
argument_list|,
name|status
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
literal|"top-border-solid"
argument_list|)
expr_stmt|;
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|setStyleName
argument_list|(
literal|"top-border-solid text-bold"
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|WebTable
operator|.
name|Row
index|[]
name|rowArray
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|rows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Row
name|row
range|:
name|rows
control|)
name|rowArray
index|[
name|idx
operator|++
index|]
operator|=
name|row
expr_stmt|;
name|requests
operator|.
name|setData
argument_list|(
name|rowArray
argument_list|)
expr_stmt|;
name|requests
operator|.
name|setColumnVisible
argument_list|(
literal|4
argument_list|,
name|hasPref
argument_list|)
expr_stmt|;
name|requests
operator|.
name|setColumnVisible
argument_list|(
literal|5
argument_list|,
name|hasWarn
argument_list|)
expr_stmt|;
name|requests
operator|.
name|setColumnVisible
argument_list|(
literal|7
argument_list|,
name|hasWait
argument_list|)
expr_stmt|;
name|P
name|credit
init|=
operator|new
name|P
argument_list|(
literal|"unitime-StatusLine"
argument_list|)
decl_stmt|;
name|float
index|[]
name|range
init|=
name|savedRequests
operator|.
name|getCreditRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|!=
literal|null
operator|&&
name|range
index|[
literal|1
index|]
operator|>
literal|0f
condition|)
block|{
if|if
condition|(
name|range
index|[
literal|0
index|]
operator|==
name|range
index|[
literal|1
index|]
condition|)
name|credit
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|requestedCredit
argument_list|(
name|range
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|credit
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|requestedCreditRange
argument_list|(
name|range
index|[
literal|0
index|]
argument_list|,
name|range
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ToolBox
operator|.
name|print
argument_list|(
name|GWT_MESSAGES
operator|.
name|pageStudentCourseRequests
argument_list|()
argument_list|,
name|iUserAuthentication
operator|.
name|getUser
argument_list|()
argument_list|,
name|iSessionSelector
operator|.
name|getAcademicSessionName
argument_list|()
argument_list|,
name|requests
comment|//, credit
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

