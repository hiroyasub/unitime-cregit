begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.3 - 3.5 (University Timetabling Application)  * Copyright (C) 2011 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Components
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|Client
operator|.
name|GwtPageChangedHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|EnrollmentTable
operator|.
name|TopCell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|HorizontalPanelWithHint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTabPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasColSpan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTextBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|SectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|StudentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestBox
operator|.
name|DefaultSuggestionDisplay
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningStatusPage
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|requestDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sTSF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TextBox
name|iFilter
init|=
literal|null
decl_stmt|;
specifier|private
name|Button
name|iSearch
init|=
literal|null
decl_stmt|;
specifier|private
name|Image
name|iLoadingImage
init|=
literal|null
decl_stmt|;
specifier|private
name|SuggestBox
name|iFilterSuggest
init|=
literal|null
decl_stmt|;
specifier|private
name|VerticalPanel
name|iSectioningPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|VerticalPanel
name|iPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|HorizontalPanelWithHint
name|iFilterPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|EnrollmentInfo
argument_list|>
name|iCourseTable
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|StudentInfo
argument_list|>
name|iStudentTable
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|SectioningAction
argument_list|>
name|iLogTable
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeDialogBox
name|iEnrollmentDialog
init|=
literal|null
decl_stmt|;
specifier|private
name|EnrollmentTable
name|iEnrollmentTable
init|=
literal|null
decl_stmt|;
specifier|private
name|ScrollPanel
name|iEnrollmentScroll
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeTabPanel
name|iTabPanel
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iTabIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|FocusPanel
name|iTabPanelWithFocus
init|=
literal|null
decl_stmt|;
specifier|private
name|HTML
name|iError
init|=
literal|null
decl_stmt|,
name|iCourseTableHint
decl_stmt|,
name|iStudentTableHint
decl_stmt|;
specifier|private
name|String
name|iLastFilterOnEnter
init|=
literal|null
decl_stmt|,
name|iCourseFilter
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iStates
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|iStatusColumn
init|=
literal|0
decl_stmt|;
specifier|private
name|UniTimeTextBox
name|iSubject
decl_stmt|,
name|iCC
decl_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
name|iStatus
decl_stmt|;
specifier|private
name|TextArea
name|iMessage
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|Long
argument_list|>
name|iSelectedStudentIds
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|iOnline
decl_stmt|;
specifier|public
name|SectioningStatusPage
parameter_list|(
name|boolean
name|online
parameter_list|)
block|{
name|iOnline
operator|=
name|online
expr_stmt|;
name|iPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iSectioningPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iFilterPanel
operator|=
operator|new
name|HorizontalPanelWithHint
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|sectioningStatusFilterHint
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|setSpacing
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|Client
operator|.
name|addGwtPageChangedHandler
argument_list|(
operator|new
name|GwtPageChangedHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|GwtPageChangeEvent
name|event
parameter_list|)
block|{
name|iFilterPanel
operator|.
name|hideHint
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Label
name|filterLabel
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|filter
argument_list|()
argument_list|)
decl_stmt|;
name|iFilterPanel
operator|.
name|add
argument_list|(
name|filterLabel
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|filterLabel
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|SuggestOracle
name|courseOfferingOracle
init|=
operator|new
name|SuggestOracle
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|requestDefaultSuggestions
parameter_list|(
name|Request
name|request
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|requestSuggestions
argument_list|(
name|request
argument_list|,
name|callback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|requestSuggestions
parameter_list|(
name|Request
name|request
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|querySuggestions
argument_list|(
name|iOnline
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|,
name|request
operator|.
name|getLimit
argument_list|()
argument_list|,
operator|new
name|SuggestCallback
argument_list|(
name|request
argument_list|,
name|callback
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDisplayStringHTML
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
decl_stmt|;
name|iFilter
operator|=
operator|new
name|UniTimeTextBox
argument_list|()
expr_stmt|;
name|iFilter
operator|.
name|setWidth
argument_list|(
literal|"400px"
argument_list|)
expr_stmt|;
name|iFilterSuggest
operator|=
operator|new
name|SuggestBox
argument_list|(
name|courseOfferingOracle
argument_list|,
name|iFilter
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|add
argument_list|(
name|iFilterSuggest
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|iFilterSuggest
operator|.
name|showSuggestionList
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSearch
operator|=
operator|new
name|Button
argument_list|(
name|MESSAGES
operator|.
name|buttonSearch
argument_list|()
argument_list|)
expr_stmt|;
name|iSearch
operator|.
name|setAccessKey
argument_list|(
literal|'s'
argument_list|)
expr_stmt|;
name|iSearch
operator|.
name|addStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|add
argument_list|(
name|iSearch
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iSearch
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|add
argument_list|(
name|iLoadingImage
argument_list|)
expr_stmt|;
name|iFilterPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iLoadingImage
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iSectioningPanel
operator|.
name|add
argument_list|(
name|iFilterPanel
argument_list|)
expr_stmt|;
name|iSectioningPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iFilterPanel
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iCourseTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iStudentTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|StudentInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iLogTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
expr_stmt|;
name|VerticalPanel
name|courseTableWithHint
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
name|courseTableWithHint
operator|.
name|add
argument_list|(
name|iCourseTable
argument_list|)
expr_stmt|;
name|iCourseTableHint
operator|=
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|sectioningStatusReservationHint
argument_list|()
argument_list|)
expr_stmt|;
name|iCourseTableHint
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Hint"
argument_list|)
expr_stmt|;
name|courseTableWithHint
operator|.
name|add
argument_list|(
name|iCourseTableHint
argument_list|)
expr_stmt|;
name|courseTableWithHint
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iCourseTableHint
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|VerticalPanel
name|studentTableWithHint
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
name|studentTableWithHint
operator|.
name|add
argument_list|(
name|iStudentTable
argument_list|)
expr_stmt|;
name|iStudentTableHint
operator|=
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|sectioningStatusPriorityHint
argument_list|()
argument_list|)
expr_stmt|;
name|iStudentTableHint
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Hint"
argument_list|)
expr_stmt|;
name|studentTableWithHint
operator|.
name|add
argument_list|(
name|iStudentTableHint
argument_list|)
expr_stmt|;
name|studentTableWithHint
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iStudentTableHint
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
name|iTabPanel
operator|=
operator|new
name|UniTimeTabPanel
argument_list|()
expr_stmt|;
name|iTabPanel
operator|.
name|add
argument_list|(
name|courseTableWithHint
argument_list|,
name|MESSAGES
operator|.
name|tabEnrollments
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|add
argument_list|(
name|studentTableWithHint
argument_list|,
name|MESSAGES
operator|.
name|tabStudents
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|Integer
argument_list|>
name|event
parameter_list|)
block|{
name|iTabIndex
operator|=
name|event
operator|.
name|getSelectedItem
argument_list|()
expr_stmt|;
name|loadDataIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTabPanelWithFocus
operator|=
operator|new
name|FocusPanel
argument_list|(
name|iTabPanel
argument_list|)
expr_stmt|;
name|iTabPanelWithFocus
operator|.
name|setStyleName
argument_list|(
literal|"unitime-FocusPanel"
argument_list|)
expr_stmt|;
name|iSectioningPanel
operator|.
name|add
argument_list|(
name|iTabPanelWithFocus
argument_list|)
expr_stmt|;
name|iTabPanelWithFocus
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
literal|'e'
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
literal|'E'
operator|)
condition|)
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
literal|'s'
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
literal|'S'
operator|)
condition|)
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
literal|'l'
operator|||
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
literal|'L'
operator|)
condition|)
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iSectioningPanel
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iSectioningPanel
argument_list|)
expr_stmt|;
name|iError
operator|=
operator|new
name|HTML
argument_list|()
expr_stmt|;
name|iError
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iError
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iError
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iSearch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|loadData
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iFilter
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
if|if
condition|(
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iLastFilterOnEnter
argument_list|)
operator|&&
operator|!
name|iFilter
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|iCourseFilter
argument_list|)
condition|)
name|loadData
argument_list|()
expr_stmt|;
else|else
name|iLastFilterOnEnter
operator|=
name|iFilter
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourseTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|ClassAssignmentInterface
operator|.
name|EnrollmentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
specifier|final
name|TableEvent
argument_list|<
name|EnrollmentInfo
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
operator|||
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
return|return;
comment|// header or footer
name|iCourseTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|id
init|=
operator|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|?
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getOfferingId
argument_list|()
else|:
operator|-
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazzId
argument_list|()
operator|)
decl_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingEnrollments
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingEnrollments
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOnline
condition|)
block|{
name|iSectioningService
operator|.
name|canApprove
argument_list|(
name|id
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|courseIdsCanApprove
parameter_list|)
block|{
name|iSectioningService
operator|.
name|findEnrollments
argument_list|(
name|iOnline
argument_list|,
name|iCourseFilter
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazzId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|Enrollment
argument_list|>
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iEnrollmentTable
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|populate
argument_list|(
name|result
argument_list|,
name|courseIdsCanApprove
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
name|iEnrollmentDialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|titleEnrollments
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iEnrollmentDialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|titleEnrollments
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSectioningService
operator|.
name|findEnrollments
argument_list|(
name|iOnline
argument_list|,
name|iCourseFilter
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseId
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazzId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|Enrollment
argument_list|>
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iEnrollmentTable
operator|.
name|setId
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|populate
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
name|iEnrollmentDialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|titleEnrollments
argument_list|(
name|MESSAGES
operator|.
name|course
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iEnrollmentDialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|titleEnrollments
argument_list|(
name|MESSAGES
operator|.
name|clazz
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getSubpart
argument_list|()
argument_list|,
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getClazz
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
specifier|final
name|TableEvent
argument_list|<
name|StudentInfo
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
operator|||
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return;
comment|// header or footer
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getRequested
argument_list|()
operator|==
literal|null
operator|&&
name|iOnline
condition|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingAssistant
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|showStudentAssistant
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|iStudentTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iStudentTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingEnrollment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|showStudentSchedule
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iLogTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|ClassAssignmentInterface
operator|.
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|SectioningAction
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getProto
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HTML
name|widget
init|=
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getProto
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ScrollPanel
name|scroll
init|=
operator|new
name|ScrollPanel
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|scroll
operator|.
name|setHeight
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
literal|0.8
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
operator|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogChangeMessage
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|UniTimeDialogBox
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|UniTimeDialogBox
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|widget
operator|.
name|getElement
argument_list|()
operator|.
name|getScrollHeight
argument_list|()
argument_list|,
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|*
literal|80
operator|/
literal|100
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|-
name|dialog
operator|.
name|getOffsetWidth
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|dialog
operator|.
name|getOffsetHeight
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|iLogTable
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iCourseTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iStudentTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iLogTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTabIndex
operator|!=
literal|0
condition|)
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|loadData
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|=
operator|new
name|EnrollmentTable
argument_list|(
literal|false
argument_list|,
name|iOnline
argument_list|)
expr_stmt|;
name|iEnrollmentScroll
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iEnrollmentTable
argument_list|)
expr_stmt|;
name|iEnrollmentScroll
operator|.
name|setHeight
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
literal|0.8
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
operator|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|iEnrollmentScroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|setWidget
argument_list|(
name|iEnrollmentScroll
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|UniTimeDialogBox
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|UniTimeDialogBox
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
name|iEnrollmentScroll
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|iEnrollmentTable
operator|.
name|getElement
argument_list|()
operator|.
name|getScrollHeight
argument_list|()
argument_list|,
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|*
literal|80
operator|/
literal|100
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|-
name|iEnrollmentDialog
operator|.
name|getOffsetWidth
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|iEnrollmentDialog
operator|.
name|getOffsetHeight
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iEnrollmentTable
operator|.
name|getHeader
argument_list|()
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iEnrollmentDialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iEnrollmentDialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOnline
condition|)
block|{
name|iSectioningService
operator|.
name|isAdmin
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
name|iTabPanel
operator|.
name|add
argument_list|(
name|iLogTable
argument_list|,
name|MESSAGES
operator|.
name|tabChangeLog
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|lastAcademicSession
argument_list|(
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimePageHeader
name|header
init|=
operator|(
name|UniTimePageHeader
operator|)
name|RootPanel
operator|.
name|get
argument_list|(
name|Components
operator|.
name|header
operator|.
name|id
argument_list|()
argument_list|)
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AcademicSessionSelector
name|session
init|=
operator|new
name|AcademicSessionSelector
argument_list|(
name|StudentSectioningPage
operator|.
name|Mode
operator|.
name|SECTIONING
argument_list|)
decl_stmt|;
name|header
operator|.
name|setSessionSelector
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionSelector
operator|.
name|AcademicSessionChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
name|iSectioningService
operator|.
name|selectSession
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|checkLastQuery
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|session
operator|.
name|selectSession
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
name|result
parameter_list|)
block|{
name|checkLastQuery
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkLastQuery
argument_list|()
expr_stmt|;
block|}
name|iStatus
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
operator|new
name|ListBox
argument_list|()
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|lookupStudentSectioningStates
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
parameter_list|)
block|{
name|iStates
operator|=
name|result
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|ref
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|iStates
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
name|iStates
operator|.
name|get
argument_list|(
name|ref
argument_list|)
argument_list|,
name|ref
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
literal|"Cancelled"
operator|.
name|equalsIgnoreCase
argument_list|(
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|iSubject
operator|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|512
argument_list|,
literal|473
argument_list|)
expr_stmt|;
name|iSubject
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|defaulSubject
argument_list|()
argument_list|)
expr_stmt|;
name|iCC
operator|=
operator|new
name|UniTimeTextBox
argument_list|(
literal|512
argument_list|,
literal|473
argument_list|)
expr_stmt|;
name|iMessage
operator|=
operator|new
name|TextArea
argument_list|()
expr_stmt|;
name|iMessage
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iMessage
operator|.
name|setVisibleLines
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iMessage
operator|.
name|setCharacterWidth
argument_list|(
literal|80
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkLastQuery
parameter_list|()
block|{
if|if
condition|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"q"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"q"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"t"
argument_list|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"2"
operator|.
name|equals
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getParameter
argument_list|(
literal|"t"
argument_list|)
argument_list|)
condition|)
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|loadData
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Window
operator|.
name|Location
operator|.
name|getHash
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|Window
operator|.
name|Location
operator|.
name|getHash
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|hash
init|=
name|URL
operator|.
name|decode
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getHash
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hash
operator|.
name|matches
argument_list|(
literal|"^[0-9]+\\:?[0-9]*@?$"
argument_list|)
condition|)
block|{
if|if
condition|(
name|hash
operator|.
name|endsWith
argument_list|(
literal|"@"
argument_list|)
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|hash
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hash
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|hash
operator|.
name|endsWith
argument_list|(
literal|"$"
argument_list|)
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|hash
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hash
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|selectTab
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|hash
argument_list|)
expr_stmt|;
name|loadData
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|iSectioningService
operator|.
name|lastStatusQuery
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|iFilter
operator|.
name|setText
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|loadData
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setLoading
parameter_list|(
name|boolean
name|loading
parameter_list|)
block|{
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
name|loading
argument_list|)
expr_stmt|;
name|iSearch
operator|.
name|setVisible
argument_list|(
operator|!
name|loading
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|loadData
parameter_list|()
block|{
name|iCourseTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iStudentTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iLogTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|loadDataIfNeeded
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|loadDataIfNeeded
parameter_list|()
block|{
name|iCourseFilter
operator|=
name|iFilter
operator|.
name|getText
argument_list|()
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iCourseFilter
operator|+
operator|(
name|iTabIndex
operator|==
literal|1
condition|?
literal|"@"
else|:
name|iTabIndex
operator|==
literal|2
condition|?
literal|"$"
else|:
literal|""
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|DefaultSuggestionDisplay
operator|)
name|iFilterSuggest
operator|.
name|getSuggestionDisplay
argument_list|()
operator|)
operator|.
name|isSuggestionListShowing
argument_list|()
condition|)
operator|(
operator|(
name|DefaultSuggestionDisplay
operator|)
name|iFilterSuggest
operator|.
name|getSuggestionDisplay
argument_list|()
operator|)
operator|.
name|hideSuggestions
argument_list|()
expr_stmt|;
if|if
condition|(
name|iTabIndex
operator|==
literal|0
operator|&&
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
name|iTabIndex
operator|==
literal|1
operator|&&
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
return|return;
if|if
condition|(
name|iTabIndex
operator|==
literal|2
operator|&&
name|iLogTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|0
condition|)
return|return;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingData
argument_list|()
argument_list|)
expr_stmt|;
name|setLoading
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iTabIndex
operator|==
literal|0
condition|)
block|{
name|iSectioningService
operator|.
name|findEnrollmentInfos
argument_list|(
name|iOnline
argument_list|,
name|iCourseFilter
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iError
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|exceptionNoMatchingResultsFound
argument_list|(
name|iCourseFilter
argument_list|)
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populateCourseTable
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|iTabIndex
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|iOnline
condition|)
block|{
name|iSectioningService
operator|.
name|isAdmin
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|Boolean
name|isAdmin
parameter_list|)
block|{
name|iSectioningService
operator|.
name|findStudentInfos
argument_list|(
name|iOnline
argument_list|,
name|iCourseFilter
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|StudentInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iError
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|exceptionNoMatchingResultsFound
argument_list|(
name|iCourseFilter
argument_list|)
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populateStudentTable
argument_list|(
name|result
argument_list|,
name|isAdmin
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSectioningService
operator|.
name|findStudentInfos
argument_list|(
name|iOnline
argument_list|,
name|iCourseFilter
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|StudentInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iError
operator|.
name|setHTML
argument_list|(
name|MESSAGES
operator|.
name|exceptionNoMatchingResultsFound
argument_list|(
name|iCourseFilter
argument_list|)
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populateStudentTable
argument_list|(
name|result
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|iOnline
condition|)
block|{
name|iSectioningService
operator|.
name|changeLog
argument_list|(
name|iCourseFilter
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|SectioningAction
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|result
parameter_list|)
block|{
name|populateChangeLog
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|iTabPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Widget
argument_list|>
name|line
parameter_list|(
specifier|final
name|EnrollmentInfo
name|e
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Image
name|showDetails
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
decl_stmt|;
name|showDetails
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|int
name|row
init|=
name|iCourseTable
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|+
literal|1
operator|==
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|||
name|iCourseTable
operator|.
name|getData
argument_list|(
name|row
operator|+
literal|1
argument_list|)
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// open
name|setLoading
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|showDetails
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|findEnrollmentInfos
argument_list|(
name|iOnline
argument_list|,
name|iCourseFilter
argument_list|,
name|e
operator|.
name|getCourseId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setHTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|iError
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|result
parameter_list|)
block|{
name|setLoading
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|int
name|r
init|=
name|row
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|EnrollmentInfo
name|e
range|:
name|result
control|)
block|{
name|iCourseTable
operator|.
name|insertRow
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|iCourseTable
operator|.
name|setRow
argument_list|(
name|r
argument_list|,
name|e
argument_list|,
name|line
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|++
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|r
init|=
name|row
operator|+
literal|1
init|;
name|r
operator|<
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|iCourseTable
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
break|break;
name|iCourseTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|r
argument_list|,
operator|!
name|iCourseTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|isVisible
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|showDetails
operator|.
name|setResource
argument_list|(
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|showDetails
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getSubject
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getCourseNbr
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|TitleCell
argument_list|(
name|e
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getConsent
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getConsent
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;&nbsp;"
operator|+
operator|(
name|e
operator|.
name|getSubpart
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getIndent
argument_list|()
operator|+
name|e
operator|.
name|getSubpart
argument_list|()
operator|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|e
operator|.
name|getClazz
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e
operator|.
name|getIndent
argument_list|()
operator|+
name|e
operator|.
name|getClazz
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getDays
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
operator|!
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|hasDatePattern
argument_list|()
condition|?
literal|""
else|:
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getDatePattern
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
operator|!
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|hasRoom
argument_list|()
condition|?
literal|""
else|:
name|e
operator|.
name|getAssignment
argument_list|()
operator|.
name|getRooms
argument_list|(
literal|","
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|line
operator|.
name|add
argument_list|(
operator|new
name|AvailableCell
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
literal|null
argument_list|,
name|e
operator|.
name|getProjection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|e
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|WaitListCell
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|e
operator|.
name|getReservation
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|e
operator|.
name|getConsentNeeded
argument_list|()
argument_list|,
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|line
return|;
block|}
specifier|public
name|void
name|populateCourseTable
parameter_list|(
name|List
argument_list|<
name|EnrollmentInfo
argument_list|>
name|result
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|hOperations
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hOperations
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hSubject
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
operator|+
literal|"<br>&nbsp;&nbsp;"
operator|+
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSubject
argument_list|)
expr_stmt|;
name|hSubject
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hSubject
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|SUBJECT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hCourse
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
operator|+
literal|"<br>"
operator|+
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCourse
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hCourse
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|COURSE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hTitleSubpart
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
operator|+
literal|"<br>"
operator|+
name|MESSAGES
operator|.
name|colTime
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTitleSubpart
argument_list|)
expr_stmt|;
name|hTitleSubpart
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hTitleSubpart
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|TITLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hStart
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"<br>"
operator|+
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hStart
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hRoom
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConsent
argument_list|()
operator|+
literal|"<br>"
operator|+
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hRoom
argument_list|)
expr_stmt|;
name|hRoom
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hRoom
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CONSENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colConsent
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hLimit
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAvailable
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hLimit
argument_list|)
expr_stmt|;
name|hLimit
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hLimit
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|LIMIT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colAvailable
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hProjection
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colProjection
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hProjection
argument_list|)
expr_stmt|;
name|hProjection
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hProjection
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|PROJECTION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colProjection
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hEnrollment
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEnrollment
argument_list|)
expr_stmt|;
name|hEnrollment
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hEnrollment
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|ENROLLMENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hWaitListed
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colWaitListed
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hWaitListed
argument_list|)
expr_stmt|;
name|hWaitListed
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hWaitListed
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|WAITLIST
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colWaitListed
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hReserved
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colReserved
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hReserved
argument_list|)
expr_stmt|;
name|hReserved
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hReserved
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|RESERVATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colReserved
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hConsent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colNeedConsent
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConsent
argument_list|)
expr_stmt|;
name|hConsent
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iCourseTable
operator|.
name|sort
argument_list|(
name|hConsent
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|NEED_CONSENT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colNeedConsent
argument_list|()
operator|.
name|replace
argument_list|(
literal|"<br>"
argument_list|,
literal|" "
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourseTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|boolean
name|hasReservation
init|=
literal|false
decl_stmt|;
for|for
control|(
name|EnrollmentInfo
name|e
range|:
name|result
control|)
block|{
name|iCourseTable
operator|.
name|addRow
argument_list|(
name|e
argument_list|,
name|line
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasReservation
operator|&&
name|AvailableCell
operator|.
name|hasReservedSpace
argument_list|(
name|e
argument_list|)
condition|)
name|hasReservation
operator|=
literal|true
expr_stmt|;
name|iCourseTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|setBackgroundColor
argument_list|(
literal|"#f3f3f3"
argument_list|)
expr_stmt|;
block|}
comment|// Total line
if|if
condition|(
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|>=
literal|2
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iCourseTable
operator|.
name|getCellCount
argument_list|(
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
condition|;
name|c
operator|++
control|)
name|iCourseTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|c
argument_list|,
literal|"unitime-TotalRow"
argument_list|)
expr_stmt|;
name|iCourseTable
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|iCourseTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|getStyle
argument_list|()
operator|.
name|clearBackgroundColor
argument_list|()
expr_stmt|;
block|}
name|iCourseTableHint
operator|.
name|setVisible
argument_list|(
name|hasReservation
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|populateStudentTable
parameter_list|(
name|List
argument_list|<
name|StudentInfo
argument_list|>
name|result
parameter_list|,
name|boolean
name|isAdmin
parameter_list|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|isAdmin
operator|&&
name|iOnline
condition|)
block|{
name|UniTimeTableHeader
name|hSelect
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&otimes;"
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSelect
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|setWidth
argument_list|(
literal|"10px"
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addAdditionalStyleName
argument_list|(
literal|"unitime-NoPrint"
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|selectAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iSelectedStudentIds
operator|.
name|size
argument_list|()
operator|!=
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
operator|+
literal|2
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSelectedStudentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
condition|)
block|{
operator|(
operator|(
name|CheckBox
operator|)
name|iStudentTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iSelectedStudentIds
operator|.
name|add
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|clearAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iSelectedStudentIds
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iSelectedStudentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
condition|)
operator|(
operator|(
name|CheckBox
operator|)
name|iStudentTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sendStudentEmail
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iSelectedStudentIds
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|SimpleForm
name|sf
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeHeaderPanel
name|buttons
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|sf
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|emailSubject
argument_list|()
argument_list|,
name|iSubject
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubject
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|iSubject
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|MESSAGES
operator|.
name|defaulSubjectMassCancel
argument_list|()
argument_list|)
condition|)
name|iSubject
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|defaulSubject
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|emailCC
argument_list|()
argument_list|,
name|iCC
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|emailBody
argument_list|()
argument_list|,
name|iMessage
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|sendStudentEmail
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"send"
argument_list|,
name|MESSAGES
operator|.
name|emailSend
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|iSelectedStudentIds
operator|.
name|contains
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|studentIds
operator|.
name|add
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|sendEmail
argument_list|(
name|studentIds
operator|.
name|iterator
argument_list|()
argument_list|,
name|iSubject
operator|.
name|getText
argument_list|()
argument_list|,
name|iMessage
operator|.
name|getText
argument_list|()
argument_list|,
name|iCC
operator|.
name|getText
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|massCancel
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iSelectedStudentIds
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|SimpleForm
name|sf
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeHeaderPanel
name|buttons
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|sf
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
if|if
condition|(
name|iSubject
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|iSubject
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|MESSAGES
operator|.
name|defaulSubject
argument_list|()
argument_list|)
condition|)
name|iSubject
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|defaulSubjectMassCancel
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|emailSubject
argument_list|()
argument_list|,
name|iSubject
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|emailCC
argument_list|()
argument_list|,
name|iCC
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|emailBody
argument_list|()
argument_list|,
name|iMessage
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|newStatus
argument_list|()
argument_list|,
name|iStatus
argument_list|)
expr_stmt|;
name|sf
operator|.
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|sf
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|massCancel
argument_list|()
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"cancel"
argument_list|,
name|MESSAGES
operator|.
name|buttonMassCancel
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Window
operator|.
name|confirm
argument_list|(
name|MESSAGES
operator|.
name|massCancelConfirmation
argument_list|()
argument_list|)
condition|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|iSelectedStudentIds
operator|.
name|contains
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|studentIds
operator|.
name|add
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|massCanceling
argument_list|()
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|massCancel
argument_list|(
name|studentIds
argument_list|,
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iStatus
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|,
name|iSubject
operator|.
name|getText
argument_list|()
argument_list|,
name|iMessage
operator|.
name|getText
argument_list|()
argument_list|,
name|iCC
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|studentIds
operator|.
name|contains
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|HTML
name|error
init|=
operator|new
name|HTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|i
operator|.
name|setEmailDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|loadData
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStates
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|ref
range|:
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|iStates
operator|.
name|keySet
argument_list|()
argument_list|)
control|)
block|{
name|hSelect
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|changeStatusTo
argument_list|(
name|iStates
operator|.
name|get
argument_list|(
name|ref
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|""
operator|.
name|equals
argument_list|(
name|ref
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|iSelectedStudentIds
operator|.
name|size
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|(
name|iSelectedStudentIds
argument_list|)
decl_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|changingStatusTo
argument_list|(
name|iStates
operator|.
name|get
argument_list|(
name|ref
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|changeStatus
argument_list|(
name|studentIds
argument_list|,
name|ref
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|iStudentTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|i
operator|.
name|setStatus
argument_list|(
name|ref
argument_list|)
expr_stmt|;
operator|(
operator|(
name|HTML
operator|)
name|iStudentTable
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iStatusColumn
argument_list|)
operator|)
operator|.
name|setHTML
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|UniTimeTableHeader
name|hStudent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hStudent
argument_list|)
expr_stmt|;
name|hStudent
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hStudent
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hTotal
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
literal|"&nbsp;"
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTotal
argument_list|)
expr_stmt|;
name|boolean
name|hasEnrollment
init|=
literal|false
decl_stmt|,
name|hasWaitList
init|=
literal|false
decl_stmt|,
name|hasArea
init|=
literal|false
decl_stmt|,
name|hasMajor
init|=
literal|false
decl_stmt|,
name|hasGroup
init|=
literal|false
decl_stmt|,
name|hasReservation
init|=
literal|false
decl_stmt|,
name|hasRequestedDate
init|=
literal|false
decl_stmt|,
name|hasEnrolledDate
init|=
literal|false
decl_stmt|,
name|hasConsent
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e
range|:
name|result
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
comment|// if (e.getStatus() != null) hasStatus = true;
if|if
condition|(
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|>
literal|0
condition|)
name|hasEnrollment
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getTotalUnassigned
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalUnassigned
argument_list|()
operator|>
literal|0
condition|)
name|hasWaitList
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasArea
argument_list|()
condition|)
name|hasArea
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasMajor
argument_list|()
condition|)
name|hasMajor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasGroup
argument_list|()
condition|)
name|hasGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getTotalReservation
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalReservation
argument_list|()
operator|>
literal|0
condition|)
name|hasReservation
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getRequestedDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasRequestedDate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getEnrolledDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasEnrolledDate
operator|=
literal|true
expr_stmt|;
comment|// if (e.getEmailDate() != null) hasEmailDate = true;
if|if
condition|(
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|>
literal|0
condition|)
name|hasConsent
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hasArea
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hArea
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
decl_stmt|;
comment|//hArea.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hArea
argument_list|)
expr_stmt|;
name|hArea
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hArea
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hClasf
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|)
decl_stmt|;
comment|//hClasf.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hClasf
argument_list|)
expr_stmt|;
name|hClasf
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hClasf
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasMajor
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hMajor
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|)
decl_stmt|;
comment|//hMajor.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hMajor
argument_list|)
expr_stmt|;
name|hMajor
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hMajor
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasGroup
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hGroup
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|)
decl_stmt|;
comment|//hGroup.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hGroup
argument_list|)
expr_stmt|;
name|hGroup
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hGroup
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iStatusColumn
operator|=
name|header
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hStatus
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStatus
argument_list|()
argument_list|)
decl_stmt|;
comment|//hMajor.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hStatus
argument_list|)
expr_stmt|;
name|hStatus
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hStatus
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getStatus
argument_list|()
operator|)
operator|.
name|compareToIgnoreCase
argument_list|(
name|e2
operator|.
name|getStatus
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getStatus
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colStatus
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrollment
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hEnrollment
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEnrollment
argument_list|)
expr_stmt|;
name|hEnrollment
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hEnrollment
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getEnrollment
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getEnrollment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalEnrollment
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colEnrollment
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasWaitList
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hWaitlist
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colWaitListed
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hWaitlist
argument_list|)
expr_stmt|;
name|hWaitlist
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hWaitlist
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getUnassigned
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getUnassigned
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getUnassigned
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getUnassigned
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getWaitlist
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getWaitlist
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getWaitlist
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getWaitlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalUnassigned
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalUnassigned
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalUnassigned
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalUnassigned
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalWaitlist
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalWaitlist
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalWaitlist
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalWaitlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTopWaitingPriority
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
else|:
name|e1
operator|.
name|getTopWaitingPriority
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTopWaitingPriority
argument_list|()
operator|==
literal|null
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|e2
operator|.
name|getTopWaitingPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colWaitListed
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasReservation
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hReservation
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hReservation
argument_list|)
expr_stmt|;
name|hReservation
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hReservation
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getReservation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalReservation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalReservation
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalReservation
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasConsent
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hConsent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConsent
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConsent
argument_list|)
expr_stmt|;
name|hConsent
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hConsent
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getConsentNeeded
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getConsentNeeded
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colConsent
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasRequestedDate
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hTimeStamp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
comment|//hTimeStamp.setWidth("100px");
name|hTimeStamp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hTimeStamp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getRequestedDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e2
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasEnrolledDate
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hTimeStamp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
comment|//hTimeStamp.setWidth("100px");
name|hTimeStamp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hTimeStamp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getEnrolledDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e2
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|iOnline
condition|)
block|{
specifier|final
name|UniTimeTableHeader
name|hTimeStamp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEmailTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
comment|//hTimeStamp.setWidth("100px");
name|hTimeStamp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iStudentTable
operator|.
name|sort
argument_list|(
name|hTimeStamp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|StudentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|StudentInfo
name|e2
parameter_list|)
block|{
if|if
condition|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getEmailDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getEmailDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEmailDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e2
operator|.
name|getEmailDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colEmailTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeStamp
argument_list|)
expr_stmt|;
block|}
name|iStudentTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|newlySelected
init|=
operator|new
name|HashSet
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StudentInfo
name|info
range|:
name|result
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isAdmin
operator|&&
name|iOnline
condition|)
block|{
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|sid
init|=
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|iSelectedStudentIds
operator|.
name|contains
argument_list|(
name|sid
argument_list|)
condition|)
block|{
name|ch
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|newlySelected
operator|.
name|add
argument_list|(
name|sid
argument_list|)
expr_stmt|;
block|}
name|ch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|ch
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
name|iSelectedStudentIds
operator|.
name|add
argument_list|(
name|sid
argument_list|)
expr_stmt|;
else|else
name|iSelectedStudentIds
operator|.
name|remove
argument_list|(
name|sid
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|line
operator|.
name|add
argument_list|(
operator|new
name|TitleCell
argument_list|(
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasArea
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasMajor
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasGroup
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getStatus
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isAdmin
operator|&&
name|iOnline
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|total
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasArea
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasMajor
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasGroup
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasEnrollment
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|info
operator|.
name|getEnrollment
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasWaitList
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|WaitListCell
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasReservation
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|info
operator|.
name|getReservation
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasConsent
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|NumberCell
argument_list|(
name|info
operator|.
name|getConsentNeeded
argument_list|()
argument_list|,
name|info
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|hasRequestedDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|info
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrolledDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|info
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOnline
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|info
operator|.
name|getEmailDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|info
operator|.
name|getEmailDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasRequestedDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrolledDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOnline
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iStudentTable
operator|.
name|addRow
argument_list|(
name|info
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
name|iSelectedStudentIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iSelectedStudentIds
operator|.
name|addAll
argument_list|(
name|newlySelected
argument_list|)
expr_stmt|;
if|if
condition|(
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
operator|>=
literal|2
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
condition|;
name|c
operator|++
control|)
name|iStudentTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|c
argument_list|,
literal|"unitime-TotalRow"
argument_list|)
expr_stmt|;
block|}
name|iStudentTableHint
operator|.
name|setVisible
argument_list|(
name|hasWaitList
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|populateChangeLog
parameter_list|(
name|List
argument_list|<
name|SectioningAction
argument_list|>
name|result
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|hStudent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hStudent
argument_list|)
expr_stmt|;
name|hStudent
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLogTable
operator|.
name|sort
argument_list|(
name|hStudent
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SectioningAction
name|e1
parameter_list|,
name|SectioningAction
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|-
name|e1
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hOp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colOperation
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hOp
argument_list|)
expr_stmt|;
name|hOp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLogTable
operator|.
name|sort
argument_list|(
name|hOp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SectioningAction
name|e1
parameter_list|,
name|SectioningAction
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getOperation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getOperation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|-
name|e1
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colOperation
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hTimeStamp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeStamp
argument_list|)
expr_stmt|;
name|hTimeStamp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLogTable
operator|.
name|sort
argument_list|(
name|hTimeStamp
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SectioningAction
name|e1
parameter_list|,
name|SectioningAction
name|e2
parameter_list|)
block|{
return|return
operator|-
name|e1
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hResult
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colResult
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hResult
argument_list|)
expr_stmt|;
name|hResult
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLogTable
operator|.
name|sort
argument_list|(
name|hResult
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SectioningAction
name|e1
parameter_list|,
name|SectioningAction
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getResult
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getResult
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getResult
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getResult
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|-
name|e1
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colResult
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hUser
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colUser
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hUser
argument_list|)
expr_stmt|;
name|hUser
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLogTable
operator|.
name|sort
argument_list|(
name|hUser
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SectioningAction
name|e1
parameter_list|,
name|SectioningAction
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getUser
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getUser
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|-
name|e1
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colUser
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeTableHeader
name|hMessage
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMessage
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hMessage
argument_list|)
expr_stmt|;
name|hMessage
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iLogTable
operator|.
name|sort
argument_list|(
name|hMessage
argument_list|,
operator|new
name|Comparator
argument_list|<
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|SectioningAction
name|e1
parameter_list|,
name|SectioningAction
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getMessage
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|-
name|e1
operator|.
name|getTimeStamp
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colMessage
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iLogTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|SectioningAction
name|log
range|:
name|result
control|)
block|{
name|iLogTable
operator|.
name|addRow
argument_list|(
name|log
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|sTSF
operator|.
name|format
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|log
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|log
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|log
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SimpleSuggestion
implements|implements
name|Suggestion
block|{
specifier|private
name|String
name|iDisplay
decl_stmt|,
name|iReplace
decl_stmt|;
specifier|public
name|SimpleSuggestion
parameter_list|(
name|String
name|display
parameter_list|,
name|String
name|replace
parameter_list|)
block|{
name|iDisplay
operator|=
name|display
expr_stmt|;
name|iReplace
operator|=
name|replace
expr_stmt|;
block|}
specifier|public
name|SimpleSuggestion
parameter_list|(
name|String
name|replace
parameter_list|)
block|{
name|this
argument_list|(
name|replace
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
return|return
name|iDisplay
return|;
block|}
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
name|iReplace
return|;
block|}
block|}
specifier|public
class|class
name|SuggestCallback
implements|implements
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|String
index|[]
argument_list|>
argument_list|>
block|{
specifier|private
name|Request
name|iRequest
decl_stmt|;
specifier|private
name|Callback
name|iCallback
decl_stmt|;
specifier|public
name|SuggestCallback
parameter_list|(
name|Request
name|request
parameter_list|,
name|Callback
name|callback
parameter_list|)
block|{
name|iRequest
operator|=
name|request
expr_stmt|;
name|iCallback
operator|=
name|callback
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
comment|// suggestions.add(new SimpleSuggestion("<font color='red'>"+caught.getMessage()+"</font>", ""));
name|iCallback
operator|.
name|onSuggestionsReady
argument_list|(
name|iRequest
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
name|ToolBox
operator|.
name|checkAccess
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|result
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
index|[]
name|suggestion
range|:
name|result
control|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|SimpleSuggestion
argument_list|(
name|suggestion
index|[
literal|1
index|]
argument_list|,
name|suggestion
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iCallback
operator|.
name|onSuggestionsReady
argument_list|(
name|iRequest
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NumberCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|NumberCell
parameter_list|(
name|Integer
name|value
parameter_list|,
name|Integer
name|total
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|total
operator|!=
literal|null
condition|)
name|setHTML
argument_list|(
name|total
operator|==
literal|0
condition|?
literal|"-"
else|:
name|total
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
name|total
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|total
argument_list|)
condition|)
name|setHTML
argument_list|(
name|total
operator|==
literal|0
condition|?
literal|"-"
else|:
name|total
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
name|total
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|setHTML
argument_list|(
operator|(
name|value
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
name|value
operator|.
name|toString
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
operator|(
name|total
operator|<
literal|0
condition|?
literal|"&infin;"
else|:
name|total
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TitleCell
extends|extends
name|HTML
implements|implements
name|HasColSpan
block|{
specifier|public
name|TitleCell
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|super
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AvailableCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|AvailableCell
parameter_list|(
name|EnrollmentInfo
name|e
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|int
name|other
init|=
operator|(
name|e
operator|.
name|getOther
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e
operator|.
name|getOther
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setHTML
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|availableNoLimit
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
literal|0
condition|)
block|{
name|setHTML
argument_list|(
literal|"&infin;"
operator|+
name|MESSAGES
operator|.
name|htmlReservationSign
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|availableUnlimitedWithReservation
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
literal|"&infin;"
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|availableUnlimited
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|other
condition|)
block|{
name|setHTML
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|+
literal|" / "
operator|+
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
literal|0
condition|)
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|availableNot
argument_list|(
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|available
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
literal|0
operator|&&
name|e
operator|.
name|getLimit
argument_list|()
operator|>
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|+
name|other
condition|)
block|{
name|setHTML
argument_list|(
operator|(
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|other
operator|)
operator|+
name|MESSAGES
operator|.
name|htmlReservationSign
argument_list|()
operator|+
literal|" / "
operator|+
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|availableWithReservation
argument_list|(
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|other
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
operator|+
literal|" + "
operator|+
operator|(
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|e
operator|.
name|getAvailable
argument_list|()
operator|-
name|other
operator|)
operator|+
name|MESSAGES
operator|.
name|htmlReservationSign
argument_list|()
operator|+
literal|" / "
operator|+
name|e
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|availableSomeReservation
argument_list|(
name|e
operator|.
name|getAvailable
argument_list|()
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
argument_list|,
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
name|e
operator|.
name|getAvailable
argument_list|()
operator|-
name|other
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|boolean
name|hasReservedSpace
parameter_list|(
name|EnrollmentInfo
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|e
operator|.
name|getLimit
argument_list|()
operator|<
literal|0
condition|)
block|{
return|return
name|e
operator|.
name|getAvailable
argument_list|()
operator|==
literal|0
return|;
block|}
else|else
block|{
return|return
name|e
operator|.
name|getAvailable
argument_list|()
operator|!=
name|e
operator|.
name|getLimit
argument_list|()
operator|-
name|e
operator|.
name|getTotalEnrollment
argument_list|()
operator|-
operator|(
name|e
operator|.
name|getOther
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e
operator|.
name|getOther
argument_list|()
operator|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|WaitListCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|WaitListCell
parameter_list|(
name|int
name|wait
parameter_list|,
name|int
name|tWait
parameter_list|,
name|int
name|unasg
parameter_list|,
name|int
name|tUnasg
parameter_list|,
name|Integer
name|topWaitingPriority
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
if|if
condition|(
name|tWait
operator|==
literal|0
operator|||
name|tWait
operator|==
name|tUnasg
condition|)
block|{
comment|// no wait-list or all wait-listed
if|if
condition|(
name|unasg
operator|==
name|tUnasg
condition|)
block|{
name|setHTML
argument_list|(
name|unasg
operator|==
literal|0
condition|?
literal|"-"
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|unasg
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
name|unasg
operator|+
literal|" / "
operator|+
name|tUnasg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tWait
operator|>
literal|0
condition|)
name|setHTML
argument_list|(
name|getHTML
argument_list|()
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|wait
operator|==
name|tWait
operator|&&
name|unasg
operator|==
name|tUnasg
condition|)
block|{
name|setHTML
argument_list|(
name|wait
operator|==
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|unasg
argument_list|)
else|:
name|wait
operator|==
name|unasg
condition|?
name|wait
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
else|:
operator|(
name|unasg
operator|-
name|wait
operator|)
operator|+
literal|" + "
operator|+
name|wait
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setHTML
argument_list|(
operator|(
name|wait
operator|==
literal|0
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|unasg
argument_list|)
else|:
name|wait
operator|==
name|unasg
condition|?
name|wait
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
else|:
operator|(
name|unasg
operator|-
name|wait
operator|)
operator|+
literal|" + "
operator|+
name|wait
operator|+
name|MESSAGES
operator|.
name|htmlWaitListSign
argument_list|()
operator|)
operator|+
literal|" / "
operator|+
name|tUnasg
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|topWaitingPriority
operator|!=
literal|null
condition|)
name|setHTML
argument_list|(
name|getHTML
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|firstWaitListedPrioritySign
argument_list|(
name|topWaitingPriority
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WaitListCell
parameter_list|(
name|StudentInfo
name|e
parameter_list|)
block|{
name|this
argument_list|(
name|e
operator|.
name|hasWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getTotalWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getUnassigned
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getTotalUnassigned
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|getTopWaitingPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|WaitListCell
parameter_list|(
name|EnrollmentInfo
name|e
parameter_list|)
block|{
name|this
argument_list|(
name|e
operator|.
name|hasWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalWaitlist
argument_list|()
condition|?
name|e
operator|.
name|getTotalWaitlist
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getUnassigned
argument_list|()
else|:
literal|0
argument_list|,
name|e
operator|.
name|hasTotalUnassigned
argument_list|()
condition|?
name|e
operator|.
name|getTotalUnassigned
argument_list|()
else|:
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|EnrollmentComparator
implements|implements
name|Comparator
argument_list|<
name|EnrollmentInfo
argument_list|>
block|{
specifier|public
enum|enum
name|SortBy
block|{
name|SUBJECT
block|,
name|COURSE
block|,
name|TITLE
block|,
name|CONSENT
block|,
name|LIMIT
block|,
name|PROJECTION
block|,
name|ENROLLMENT
block|,
name|WAITLIST
block|,
name|RESERVATION
block|,
name|NEED_CONSENT
block|}
specifier|private
name|SortBy
name|iSortBy
decl_stmt|;
specifier|public
name|EnrollmentComparator
parameter_list|(
name|SortBy
name|sortBy
parameter_list|)
block|{
name|iSortBy
operator|=
name|sortBy
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|EnrollmentInfo
name|e1
parameter_list|,
name|EnrollmentInfo
name|e2
parameter_list|)
block|{
comment|// Totals line is always last
if|if
condition|(
name|e1
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getCourseId
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|e1
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|e2
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Same course
comment|// Course line first
if|if
condition|(
name|e1
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|e2
operator|.
name|getConfigId
argument_list|()
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|compareClasses
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
else|else
block|{
comment|// Different course
return|return
name|compareCourses
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
return|;
block|}
block|}
specifier|private
name|int
name|compareClasses
parameter_list|(
name|EnrollmentInfo
name|e1
parameter_list|,
name|EnrollmentInfo
name|e2
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
specifier|private
name|int
name|compareCourses
parameter_list|(
name|EnrollmentInfo
name|e1
parameter_list|,
name|EnrollmentInfo
name|e2
parameter_list|)
block|{
name|int
name|cmp
decl_stmt|;
switch|switch
condition|(
name|iSortBy
condition|)
block|{
case|case
name|SUBJECT
case|:
break|break;
case|case
name|COURSE
case|:
name|cmp
operator|=
name|e1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|TITLE
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getTitle
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTitle
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|CONSENT
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getConsent
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getConsent
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getConsent
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getConsent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|LIMIT
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getAvailable
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getAvailable
argument_list|()
operator|<
literal|0
condition|?
operator|new
name|Integer
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
else|:
name|e1
operator|.
name|getAvailable
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getAvailable
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getAvailable
argument_list|()
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|e2
operator|.
name|getAvailable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getLimit
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getLimit
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getLimit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
break|break;
case|case
name|PROJECTION
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getProjection
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getProjection
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getProjection
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
break|break;
case|case
name|ENROLLMENT
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getEnrollment
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalEnrollment
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalEnrollment
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalEnrollment
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalEnrollment
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
break|break;
case|case
name|WAITLIST
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getWaitlist
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getWaitlist
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getWaitlist
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getWaitlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getUnassigned
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getUnassigned
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getUnassigned
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getUnassigned
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalWaitlist
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalWaitlist
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalWaitlist
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalWaitlist
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalUnassigned
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalUnassigned
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalUnassigned
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalUnassigned
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
break|break;
case|case
name|RESERVATION
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getReservation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalReservation
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getTotalReservation
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalReservation
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalReservation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
break|break;
case|case
name|NEED_CONSENT
case|:
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getConsentNeeded
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getConsentNeeded
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
name|cmp
operator|=
operator|(
name|e1
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Integer
argument_list|(
literal|0
argument_list|)
else|:
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getTotalConsentNeeded
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getTotalConsentNeeded
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
operator|-
name|cmp
return|;
break|break;
block|}
comment|// Default sort
name|cmp
operator|=
name|e1
operator|.
name|getSubject
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getCourseNbr
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
literal|0
return|;
block|}
block|}
specifier|private
name|void
name|sendEmail
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|Long
argument_list|>
name|studentIds
parameter_list|,
specifier|final
name|String
name|subject
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|cc
parameter_list|,
specifier|final
name|int
name|fails
parameter_list|)
block|{
if|if
condition|(
operator|!
name|studentIds
operator|.
name|hasNext
argument_list|()
condition|)
return|return;
specifier|final
name|Long
name|studentId
init|=
name|studentIds
operator|.
name|next
argument_list|()
decl_stmt|;
name|iSectioningService
operator|.
name|sendEmail
argument_list|(
name|studentId
argument_list|,
name|subject
argument_list|,
name|message
argument_list|,
name|cc
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|studentId
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|HTML
name|error
init|=
operator|new
name|HTML
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|i
operator|.
name|setEmailDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fails
operator|>=
literal|4
condition|)
block|{
while|while
condition|(
name|studentIds
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Long
name|sid
init|=
name|studentIds
operator|.
name|next
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|sid
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|HTML
name|error
init|=
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|exceptionCancelled
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|i
operator|.
name|setEmailDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|sendEmail
argument_list|(
name|studentIds
argument_list|,
name|subject
argument_list|,
name|message
argument_list|,
name|cc
argument_list|,
name|fails
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iStudentTable
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|StudentInfo
name|i
init|=
name|iStudentTable
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|!=
literal|null
operator|&&
name|i
operator|.
name|getStudent
argument_list|()
operator|!=
literal|null
operator|&&
name|studentId
operator|.
name|equals
argument_list|(
name|i
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|result
condition|)
block|{
name|i
operator|.
name|setEmailDate
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
operator|new
name|HTML
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
name|i
operator|.
name|getEmailDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|HTML
name|error
init|=
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|exceptionNoEmail
argument_list|()
argument_list|)
decl_stmt|;
name|error
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iStudentTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|iStudentTable
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|i
operator|.
name|setEmailDate
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|sendEmail
argument_list|(
name|studentIds
argument_list|,
name|subject
argument_list|,
name|message
argument_list|,
name|cc
argument_list|,
name|fails
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

