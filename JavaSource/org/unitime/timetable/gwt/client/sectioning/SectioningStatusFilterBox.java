begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|aria
operator|.
name|AriaSuggestBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|events
operator|.
name|UniTimeFilterBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
operator|.
name|Chip
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|FilterBox
operator|.
name|Suggestion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|FilterRpcResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|SelectionHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningStatusFilterBox
extends|extends
name|UniTimeFilterBox
argument_list|<
name|SectioningStatusFilterBox
operator|.
name|SectioningStatusFilterRpcRequest
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtMessages
name|GWT_MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|iOnline
decl_stmt|;
specifier|private
name|AriaSuggestBox
name|iCourse
decl_stmt|;
specifier|private
name|Chip
name|iLastCourse
decl_stmt|;
specifier|private
name|AriaSuggestBox
name|iStudent
decl_stmt|;
specifier|private
name|Chip
name|iLastStudent
decl_stmt|;
specifier|public
name|SectioningStatusFilterBox
parameter_list|(
name|boolean
name|online
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iOnline
operator|=
name|online
expr_stmt|;
name|FilterBox
operator|.
name|StaticSimpleFilter
name|mode
init|=
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"mode"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagSectioningMode
argument_list|()
argument_list|)
decl_stmt|;
name|mode
operator|.
name|setMultipleSelection
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"type"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagSectioningType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"status"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagSectioningStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"approver"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagApprover
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"area"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagAcademicArea
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"major"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagMajor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"classification"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagClassification
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"group"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagStudentGroup
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"accommodation"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagStudentAccommodation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"credit"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"overlap"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagOverlap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"assignment"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagSectioningAssignment
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Chip
argument_list|>
name|callback
parameter_list|)
block|{
name|String
name|translatedValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"assigned"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
if|else if
condition|(
literal|"reserved"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|1
index|]
expr_stmt|;
if|else if
condition|(
literal|"not assigned"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|2
index|]
expr_stmt|;
if|else if
condition|(
literal|"wait-listed"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|assignmentType
argument_list|()
index|[
literal|3
index|]
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|Chip
argument_list|(
name|getCommand
argument_list|()
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|getLabel
argument_list|()
argument_list|)
operator|.
name|withTranslatedValue
argument_list|(
name|translatedValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"consent"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagSectioningConsent
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Chip
argument_list|>
name|callback
parameter_list|)
block|{
name|String
name|translatedValue
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"consent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|0
index|]
expr_stmt|;
if|else if
condition|(
literal|"no consent"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|1
index|]
expr_stmt|;
if|else if
condition|(
literal|"waiting"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|2
index|]
expr_stmt|;
if|else if
condition|(
literal|"approved"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|3
index|]
expr_stmt|;
if|else if
condition|(
literal|"to do"
operator|.
name|equalsIgnoreCase
argument_list|(
name|text
argument_list|)
condition|)
name|translatedValue
operator|=
name|CONSTANTS
operator|.
name|consentTypeAbbv
argument_list|()
index|[
literal|3
index|]
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
operator|new
name|Chip
argument_list|(
name|getCommand
argument_list|()
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|getLabel
argument_list|()
argument_list|)
operator|.
name|withTranslatedValue
argument_list|(
name|translatedValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|FilterBox
operator|.
name|StaticSimpleFilter
name|op
init|=
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"operation"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagSectioningOperation
argument_list|()
argument_list|)
decl_stmt|;
name|op
operator|.
name|setMultipleSelection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
name|op
argument_list|)
expr_stmt|;
specifier|final
name|TextBox
name|curriculum
init|=
operator|new
name|TextBox
argument_list|()
decl_stmt|;
name|curriculum
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setMaxLength
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|setWidth
argument_list|(
literal|"200px"
argument_list|)
expr_stmt|;
name|curriculum
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|boolean
name|removed
init|=
name|removeChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"curriculum"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|curriculum
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|removed
condition|)
name|fireValueChangeEvent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|addChip
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"curriculum"
argument_list|,
name|curriculum
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagCurriculum
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|Label
name|courseLab
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|propCourse
argument_list|()
argument_list|)
decl_stmt|;
name|iCourse
operator|=
operator|new
name|AriaSuggestBox
argument_list|(
operator|new
name|CourseOracle
argument_list|()
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|setWidth
argument_list|(
literal|"200px"
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"course"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|getValueBox
argument_list|()
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|courseChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|getValueBox
argument_list|()
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|courseChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|getValueBox
argument_list|()
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_BACKSPACE
condition|)
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|courseChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|getValueBox
argument_list|()
operator|.
name|addBlurHandler
argument_list|(
operator|new
name|BlurHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
name|courseChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iCourse
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|SuggestOracle
operator|.
name|Suggestion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Suggestion
argument_list|>
name|event
parameter_list|)
block|{
name|courseChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Label
name|studentLab
init|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|propStudent
argument_list|()
argument_list|)
decl_stmt|;
name|studentLab
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginLeft
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iStudent
operator|=
operator|new
name|AriaSuggestBox
argument_list|(
operator|new
name|StudentOracle
argument_list|()
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|setStyleName
argument_list|(
literal|"unitime-TextArea"
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|setWidth
argument_list|(
literal|"200px"
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|StaticSimpleFilter
argument_list|(
literal|"student"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagStudent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|getValueBox
argument_list|()
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|studentChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|getValueBox
argument_list|()
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|studentChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|getValueBox
argument_list|()
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_BACKSPACE
condition|)
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|studentChanged
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|getValueBox
argument_list|()
operator|.
name|addBlurHandler
argument_list|(
operator|new
name|BlurHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
name|studentChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iStudent
operator|.
name|addSelectionHandler
argument_list|(
operator|new
name|SelectionHandler
argument_list|<
name|SuggestOracle
operator|.
name|Suggestion
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSelection
parameter_list|(
name|SelectionEvent
argument_list|<
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SuggestOracle
operator|.
name|Suggestion
argument_list|>
name|event
parameter_list|)
block|{
name|studentChanged
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addFilter
argument_list|(
operator|new
name|FilterBox
operator|.
name|CustomFilter
argument_list|(
literal|"Other"
argument_list|,
name|GWT_MESSAGES
operator|.
name|tagOther
argument_list|()
argument_list|,
name|courseLab
argument_list|,
name|iCourse
argument_list|,
name|studentLab
argument_list|,
name|iStudent
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|getSuggestions
parameter_list|(
specifier|final
name|List
argument_list|<
name|Chip
argument_list|>
name|chips
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|()
decl_stmt|;
name|Chip
name|old
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Chip
name|c
range|:
name|chips
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"limit"
argument_list|)
condition|)
block|{
name|old
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"limit"
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagLimit
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
name|old
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Chip
name|c
range|:
name|chips
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"credit"
argument_list|)
condition|)
block|{
name|old
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
try|try
block|{
name|String
name|number
init|=
name|text
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
operator|||
name|text
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
operator|||
name|text
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"credit"
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagCredit
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"credit"
argument_list|,
literal|"<="
operator|+
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagCredit
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"credit"
argument_list|,
literal|">="
operator|+
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagCredit
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|first
init|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|second
init|=
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"credit"
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagCredit
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|old
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Chip
name|c
range|:
name|chips
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getCommand
argument_list|()
operator|.
name|equals
argument_list|(
literal|"overlap"
argument_list|)
condition|)
block|{
name|old
operator|=
name|c
expr_stmt|;
break|break;
block|}
block|}
try|try
block|{
name|String
name|number
init|=
name|text
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
literal|"<="
argument_list|)
operator|||
name|text
operator|.
name|startsWith
argument_list|(
literal|">="
argument_list|)
condition|)
block|{
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|text
operator|.
name|startsWith
argument_list|(
literal|"<"
argument_list|)
operator|||
name|text
operator|.
name|startsWith
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
name|number
operator|=
name|number
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"overlap"
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagOverlap
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"overlap"
argument_list|,
literal|"<="
operator|+
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagOverlap
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"overlap"
argument_list|,
literal|">="
operator|+
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagOverlap
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|text
operator|.
name|contains
argument_list|(
literal|".."
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|first
init|=
name|text
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|second
init|=
name|text
operator|.
name|substring
argument_list|(
name|text
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
operator|+
literal|2
argument_list|)
decl_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|Integer
operator|.
name|parseInt
argument_list|(
name|second
argument_list|)
expr_stmt|;
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|Suggestion
argument_list|(
operator|new
name|Chip
argument_list|(
literal|"overlap"
argument_list|,
name|text
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagOverlap
argument_list|()
argument_list|)
argument_list|,
name|old
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|suggestions
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|iLastCourse
operator|=
name|getChip
argument_list|(
literal|"course"
argument_list|)
expr_stmt|;
name|iLastStudent
operator|=
name|getChip
argument_list|(
literal|"student"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isFilterPopupShowing
argument_list|()
condition|)
block|{
name|Chip
name|chip
init|=
name|getChip
argument_list|(
literal|"curriculum"
argument_list|)
decl_stmt|;
if|if
condition|(
name|chip
operator|==
literal|null
condition|)
name|curriculum
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|curriculum
operator|.
name|setText
argument_list|(
name|chip
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Chip
name|course
init|=
name|getChip
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
if|if
condition|(
name|course
operator|==
literal|null
condition|)
name|iCourse
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|iCourse
operator|.
name|setText
argument_list|(
name|course
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|Chip
name|student
init|=
name|getChip
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
if|if
condition|(
name|student
operator|==
literal|null
condition|)
name|iStudent
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|iStudent
operator|.
name|setText
argument_list|(
name|student
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|init
argument_list|(
literal|false
argument_list|,
name|getAcademicSessionId
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|isFilterPopupShowing
argument_list|()
condition|)
name|showFilterPopup
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|courseChanged
parameter_list|(
name|boolean
name|fireChange
parameter_list|)
block|{
name|Chip
name|oldChip
init|=
name|getChip
argument_list|(
literal|"course"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iCourse
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldChip
operator|!=
literal|null
condition|)
name|removeChip
argument_list|(
name|oldChip
argument_list|,
name|fireChange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Chip
name|newChip
init|=
operator|new
name|Chip
argument_list|(
literal|"course"
argument_list|,
name|iCourse
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagCourse
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldChip
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newChip
operator|.
name|equals
argument_list|(
name|oldChip
argument_list|)
condition|)
block|{
if|if
condition|(
name|fireChange
operator|&&
operator|!
name|newChip
operator|.
name|equals
argument_list|(
name|iLastCourse
argument_list|)
condition|)
name|fireValueChangeEvent
argument_list|()
expr_stmt|;
return|return;
block|}
name|removeChip
argument_list|(
name|oldChip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|addChip
argument_list|(
name|newChip
argument_list|,
name|fireChange
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|studentChanged
parameter_list|(
name|boolean
name|fireChange
parameter_list|)
block|{
name|Chip
name|oldChip
init|=
name|getChip
argument_list|(
literal|"student"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iStudent
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|oldChip
operator|!=
literal|null
condition|)
name|removeChip
argument_list|(
name|oldChip
argument_list|,
name|fireChange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Chip
name|newChip
init|=
operator|new
name|Chip
argument_list|(
literal|"student"
argument_list|,
name|iStudent
operator|.
name|getText
argument_list|()
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|GWT_MESSAGES
operator|.
name|tagStudent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldChip
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|newChip
operator|.
name|equals
argument_list|(
name|oldChip
argument_list|)
condition|)
block|{
if|if
condition|(
name|fireChange
operator|&&
operator|!
name|newChip
operator|.
name|equals
argument_list|(
name|iLastStudent
argument_list|)
condition|)
name|fireValueChangeEvent
argument_list|()
expr_stmt|;
return|return;
block|}
name|removeChip
argument_list|(
name|oldChip
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|addChip
argument_list|(
name|newChip
argument_list|,
name|fireChange
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|populateFilter
parameter_list|(
name|FilterBox
operator|.
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|FilterRpcResponse
operator|.
name|Entity
argument_list|>
name|entities
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|instanceof
name|FilterBox
operator|.
name|StaticSimpleFilter
condition|)
block|{
name|FilterBox
operator|.
name|StaticSimpleFilter
name|simple
init|=
operator|(
name|FilterBox
operator|.
name|StaticSimpleFilter
operator|)
name|filter
decl_stmt|;
name|List
argument_list|<
name|FilterBox
operator|.
name|Chip
argument_list|>
name|chips
init|=
operator|new
name|ArrayList
argument_list|<
name|FilterBox
operator|.
name|Chip
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|entities
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FilterRpcResponse
operator|.
name|Entity
name|entity
range|:
name|entities
control|)
name|chips
operator|.
name|add
argument_list|(
operator|new
name|FilterBox
operator|.
name|Chip
argument_list|(
name|filter
operator|.
name|getCommand
argument_list|()
argument_list|,
name|entity
operator|.
name|getAbbreviation
argument_list|()
argument_list|)
operator|.
name|withLabel
argument_list|(
name|entity
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withCount
argument_list|(
name|entity
operator|.
name|getCount
argument_list|()
argument_list|)
operator|.
name|withTranslatedCommand
argument_list|(
name|filter
operator|.
name|getLabel
argument_list|()
argument_list|)
operator|.
name|withTranslatedValue
argument_list|(
name|entity
operator|.
name|getProperty
argument_list|(
literal|"translated-value"
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|simple
operator|.
name|setValues
argument_list|(
name|chips
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|SectioningStatusFilterRpcRequest
name|createRpcRequest
parameter_list|()
block|{
name|SectioningStatusFilterRpcRequest
name|req
init|=
operator|new
name|SectioningStatusFilterRpcRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setOption
argument_list|(
literal|"online"
argument_list|,
name|iOnline
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
return|return
name|req
return|;
block|}
specifier|public
specifier|static
class|class
name|SectioningStatusFilterRpcRequest
extends|extends
name|FilterRpcRequest
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|SectioningStatusFilterRpcRequest
parameter_list|()
block|{
block|}
block|}
specifier|public
class|class
name|CourseSuggestion
implements|implements
name|SuggestOracle
operator|.
name|Suggestion
block|{
specifier|private
name|FilterBox
operator|.
name|Suggestion
name|iSuggestion
decl_stmt|;
name|CourseSuggestion
parameter_list|(
name|FilterBox
operator|.
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|iSuggestion
operator|=
name|suggestion
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
return|return
name|iSuggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getLabel
argument_list|()
operator|+
operator|(
name|iSuggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|hasToolTip
argument_list|()
condition|?
literal|"<span class='item-hint'>"
operator|+
name|iSuggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getToolTip
argument_list|()
operator|+
literal|"</span>"
else|:
literal|""
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
name|iSuggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|CourseOracle
extends|extends
name|SuggestOracle
block|{
annotation|@
name|Override
specifier|public
name|void
name|requestSuggestions
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getQuery
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iFilter
operator|.
name|getWidget
argument_list|()
operator|.
name|getSuggestionsProvider
argument_list|()
operator|.
name|getSuggestions
argument_list|(
name|iFilter
operator|.
name|getWidget
argument_list|()
operator|.
name|getChips
argument_list|(
literal|null
argument_list|)
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return;
name|List
argument_list|<
name|CourseSuggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|CourseSuggestion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FilterBox
operator|.
name|Suggestion
name|suggestion
range|:
name|result
control|)
block|{
if|if
condition|(
name|suggestion
operator|.
name|getChipToAdd
argument_list|()
operator|!=
literal|null
operator|&&
literal|"course"
operator|.
name|equals
argument_list|(
name|suggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|CourseSuggestion
argument_list|(
name|suggestion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|onSuggestionsReady
argument_list|(
name|request
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isDisplayStringHTML
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
class|class
name|StudentSuggestion
implements|implements
name|SuggestOracle
operator|.
name|Suggestion
block|{
specifier|private
name|FilterBox
operator|.
name|Suggestion
name|iSuggestion
decl_stmt|;
name|StudentSuggestion
parameter_list|(
name|FilterBox
operator|.
name|Suggestion
name|suggestion
parameter_list|)
block|{
name|iSuggestion
operator|=
name|suggestion
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayString
parameter_list|()
block|{
return|return
name|iSuggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getLabel
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReplacementString
parameter_list|()
block|{
return|return
name|iSuggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|StudentOracle
extends|extends
name|SuggestOracle
block|{
annotation|@
name|Override
specifier|public
name|void
name|requestSuggestions
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getQuery
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iFilter
operator|.
name|getWidget
argument_list|()
operator|.
name|getSuggestionsProvider
argument_list|()
operator|.
name|getSuggestions
argument_list|(
name|iFilter
operator|.
name|getWidget
argument_list|()
operator|.
name|getChips
argument_list|(
literal|null
argument_list|)
argument_list|,
name|request
operator|.
name|getQuery
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Collection
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Collection
argument_list|<
name|FilterBox
operator|.
name|Suggestion
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return;
name|List
argument_list|<
name|StudentSuggestion
argument_list|>
name|suggestions
init|=
operator|new
name|ArrayList
argument_list|<
name|StudentSuggestion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FilterBox
operator|.
name|Suggestion
name|suggestion
range|:
name|result
control|)
block|{
if|if
condition|(
name|suggestion
operator|.
name|getChipToAdd
argument_list|()
operator|!=
literal|null
operator|&&
literal|"student"
operator|.
name|equals
argument_list|(
name|suggestion
operator|.
name|getChipToAdd
argument_list|()
operator|.
name|getCommand
argument_list|()
argument_list|)
condition|)
block|{
name|suggestions
operator|.
name|add
argument_list|(
operator|new
name|StudentSuggestion
argument_list|(
name|suggestion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|onSuggestionsReady
argument_list|(
name|request
argument_list|,
operator|new
name|Response
argument_list|(
name|suggestions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

