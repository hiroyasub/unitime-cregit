begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * UniTime 3.2 - 3.5 (University Timetabling Application)  * Copyright (C) 2010 - 2013, UniTime LLC, and individual contributors  * as indicated by the @authors tag.  *   * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License as published by  * the Free Software Foundation; either version 3 of the License, or  * (at your option) any later version.  *   * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU General Public License for more details.  *   * You should have received a copy of the GNU General Public License along  * with this program.  If not, see<http://www.gnu.org/licenses/>.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|ImageLink
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|EventTarget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbsolutePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|TimeGrid
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|P
name|iContainer
decl_stmt|;
specifier|private
name|P
name|iPanel
decl_stmt|;
specifier|private
name|P
name|iGrid
decl_stmt|;
specifier|private
name|P
name|iHeader
decl_stmt|,
name|iDock
decl_stmt|,
name|iTimes
decl_stmt|;
specifier|private
name|P
index|[]
name|iSeparators
init|=
operator|new
name|P
index|[
literal|7
index|]
decl_stmt|;
specifier|private
name|P
name|iWorkingHours
decl_stmt|;
specifier|private
name|ScrollPanel
name|iScrollPanel
decl_stmt|;
specifier|private
name|ImageLink
name|iCalendar
init|=
literal|null
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|>
name|iMeetings
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
index|[]
index|[]
name|iMeetingTable
init|=
operator|new
name|ArrayList
index|[
literal|7
index|]
index|[
literal|24
operator|*
literal|60
operator|/
literal|5
index|]
decl_stmt|;
specifier|private
name|int
name|iCellWidth
init|=
literal|150
decl_stmt|;
specifier|private
name|int
name|iNrDays
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|iStart
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iEnd
init|=
literal|24
decl_stmt|;
specifier|private
name|boolean
name|iPrint
init|=
literal|false
decl_stmt|;
specifier|private
name|ColorProvider
name|iColor
init|=
literal|null
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|MeetingClickHandler
argument_list|>
name|iMeetingClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|MeetingClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|PinClickHandler
argument_list|>
name|iPinClickHandlers
init|=
operator|new
name|ArrayList
argument_list|<
name|PinClickHandler
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
name|iClasses
init|=
operator|new
name|ArrayList
argument_list|<
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|BusyPanel
argument_list|>
name|iBusy
init|=
operator|new
name|ArrayList
argument_list|<
name|BusyPanel
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|TimeGrid
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|ColorProvider
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|900
operator|/
literal|5
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeGrid
parameter_list|(
name|ColorProvider
name|color
parameter_list|)
block|{
name|this
argument_list|(
name|color
argument_list|,
literal|5
argument_list|,
literal|900
operator|/
literal|5
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|24
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimeGrid
parameter_list|(
name|ColorProvider
name|color
parameter_list|,
name|int
name|nrDays
parameter_list|,
name|int
name|cellWidth
parameter_list|,
name|boolean
name|print
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|iColor
operator|=
name|color
expr_stmt|;
name|iNrDays
operator|=
name|nrDays
expr_stmt|;
name|iCellWidth
operator|=
name|cellWidth
expr_stmt|;
name|iStart
operator|=
name|start
expr_stmt|;
name|iEnd
operator|=
name|end
expr_stmt|;
name|iPrint
operator|=
name|print
expr_stmt|;
name|iContainer
operator|=
operator|new
name|P
argument_list|(
literal|"unitime-TimeGrid"
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|setSize
argument_list|(
literal|40
operator|+
name|iNrDays
operator|*
name|iCellWidth
argument_list|,
name|iPrint
condition|?
literal|25
operator|+
literal|50
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
else|:
literal|575
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-header"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setWidth
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iDock
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-dock"
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|setHeight
argument_list|(
literal|50
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
operator|+
literal|5
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-panel"
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setSize
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
operator|+
literal|5
argument_list|,
literal|50
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|iTimes
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-times"
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|setHeight
argument_list|(
literal|50
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|CONSTANTS
operator|.
name|allowCalendarExport
argument_list|()
operator|&&
operator|!
name|iPrint
condition|)
block|{
name|iCalendar
operator|=
operator|new
name|ImageLink
argument_list|()
expr_stmt|;
name|iCalendar
operator|.
name|setImage
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|calendar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTarget
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|exportICalendar
argument_list|()
argument_list|)
expr_stmt|;
name|iCalendar
operator|.
name|addStyleName
argument_list|(
literal|"calendar"
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iCalendar
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrDays
condition|;
name|i
operator|++
control|)
block|{
name|P
name|sp
init|=
operator|new
name|P
argument_list|(
literal|"header-time-interval"
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setWidth
argument_list|(
name|iCellWidth
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|iGrid
operator|=
operator|new
name|P
argument_list|(
literal|"calendar-grid"
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|=
operator|new
name|P
argument_list|(
literal|"working-hours"
argument_list|)
expr_stmt|;
name|iWorkingHours
operator|.
name|setSize
argument_list|(
name|iCellWidth
operator|*
literal|5
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iWorkingHours
argument_list|,
literal|0
argument_list|,
literal|375
operator|-
operator|(
literal|50
operator|*
name|iStart
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iStart
init|;
name|i
operator|<
name|iEnd
condition|;
name|i
operator|++
control|)
block|{
comment|//create major interval
name|P
name|sp1
init|=
operator|new
name|P
argument_list|(
literal|"major-time-interval"
argument_list|)
decl_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|sp1
argument_list|,
literal|0
argument_list|,
literal|50
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|P
name|sp3
init|=
operator|new
name|P
argument_list|(
literal|"dummy-time-interval"
argument_list|)
decl_stmt|;
name|sp3
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
condition|?
operator|(
name|i
operator|==
literal|0
condition|?
literal|"12am"
else|:
name|i
operator|<=
literal|11
condition|?
name|i
operator|+
literal|"am"
else|:
name|i
operator|==
literal|12
condition|?
literal|"12pm"
else|:
operator|(
name|i
operator|-
literal|12
operator|)
operator|+
literal|"pm"
operator|)
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|iTimes
operator|.
name|add
argument_list|(
name|sp3
argument_list|,
literal|0
argument_list|,
literal|50
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
argument_list|)
expr_stmt|;
name|P
name|sp2
init|=
operator|new
name|P
argument_list|(
literal|"minor-time-interval"
argument_list|)
decl_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|sp2
argument_list|,
literal|0
argument_list|,
literal|50
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
operator|+
literal|25
argument_list|)
expr_stmt|;
name|P
name|sp4
init|=
operator|new
name|P
argument_list|(
literal|"dummy-time-interval"
argument_list|)
decl_stmt|;
name|iTimes
operator|.
name|add
argument_list|(
name|sp4
argument_list|,
literal|0
argument_list|,
literal|50
operator|*
operator|(
name|i
operator|-
name|iStart
operator|)
operator|+
literal|25
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
name|iNrDays
condition|;
name|day
operator|++
control|)
block|{
name|iSeparators
index|[
name|day
index|]
operator|=
operator|new
name|P
argument_list|(
literal|"day-separator"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iSeparators
index|[
name|day
index|]
argument_list|,
name|iCellWidth
operator|*
name|day
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|P
name|lastSeparator
init|=
operator|new
name|P
argument_list|(
literal|"day-separator"
argument_list|)
decl_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setRight
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|lastSeparator
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|lastSeparator
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|iGrid
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|add
argument_list|(
name|iTimes
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iDock
operator|.
name|add
argument_list|(
name|iPanel
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iHeader
argument_list|,
literal|30
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// iContainer.add(iDock, 0, 20);
if|if
condition|(
operator|!
name|iPrint
condition|)
block|{
name|iScrollPanel
operator|=
operator|new
name|ScrollPanel
argument_list|(
name|iDock
argument_list|)
expr_stmt|;
name|iScrollPanel
operator|.
name|setStyleName
argument_list|(
literal|"calendar-scroll"
argument_list|)
expr_stmt|;
name|iContainer
operator|.
name|add
argument_list|(
name|iScrollPanel
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iContainer
operator|.
name|add
argument_list|(
name|iDock
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
block|}
comment|// iScrollPanel.setWidth(String.valueOf(iNrDays * iCellWidth + 30 + (iPrint ? 5 : ToolBox.getScrollBarWidth())));
name|initWidget
argument_list|(
name|iContainer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addFreeTime
parameter_list|(
name|CourseRequestInterface
operator|.
name|FreeTime
name|ft
parameter_list|)
block|{
for|for
control|(
name|int
name|day
range|:
name|ft
operator|.
name|getDays
argument_list|()
control|)
name|addBusy
argument_list|(
name|CONSTANTS
operator|.
name|freePrefix
argument_list|()
operator|+
name|ft
operator|.
name|toString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|,
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|,
name|day
argument_list|,
name|ft
operator|.
name|getStart
argument_list|()
argument_list|,
name|ft
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addBusy
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|iBusy
operator|.
name|add
argument_list|(
operator|new
name|BusyPanel
argument_list|(
name|text
argument_list|,
name|day
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCalendarUrl
parameter_list|(
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|iCalendar
operator|!=
literal|null
condition|)
name|iCalendar
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Widget
name|getPrintWidget
parameter_list|()
block|{
name|int
name|firstHour
init|=
name|firstSlot
argument_list|()
operator|/
literal|12
decl_stmt|;
name|int
name|lastHour
init|=
literal|1
operator|+
name|lastSlot
argument_list|()
operator|/
literal|12
decl_stmt|;
name|TimeGrid
name|tg
init|=
operator|new
name|TimeGrid
argument_list|(
name|iColor
argument_list|,
name|iNrDays
argument_list|,
name|iCellWidth
argument_list|,
literal|true
argument_list|,
operator|(
name|firstHour
operator|<
literal|7
condition|?
name|firstHour
else|:
literal|7
operator|)
argument_list|,
operator|(
name|lastHour
operator|>
literal|18
condition|?
name|lastHour
else|:
literal|18
operator|)
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|c
range|:
name|iClasses
control|)
for|for
control|(
name|Meeting
name|m
range|:
name|tg
operator|.
name|addClass
argument_list|(
name|c
argument_list|,
name|i
operator|++
argument_list|)
control|)
block|{
name|m
operator|.
name|hidePin
argument_list|()
expr_stmt|;
name|m
operator|.
name|setDummy
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
literal|"meeting-selected-noshadow"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BusyPanel
name|busy
range|:
name|iBusy
control|)
name|tg
operator|.
name|addBusy
argument_list|(
name|busy
operator|.
name|getTitle
argument_list|()
argument_list|,
name|busy
operator|.
name|getDay
argument_list|()
argument_list|,
name|busy
operator|.
name|getStart
argument_list|()
argument_list|,
name|busy
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|tg
return|;
block|}
specifier|public
name|void
name|setNrDays
parameter_list|(
name|int
name|days
parameter_list|)
block|{
if|if
condition|(
name|iNrDays
operator|==
name|days
condition|)
return|return;
name|iNrDays
operator|=
name|days
expr_stmt|;
name|iCellWidth
operator|=
literal|900
operator|/
name|days
expr_stmt|;
name|iContainer
operator|.
name|setWidth
argument_list|(
literal|40
operator|+
name|iNrDays
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setWidth
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setWidth
argument_list|(
name|iNrDays
operator|*
name|iCellWidth
argument_list|)
expr_stmt|;
comment|// iScrollPanel.setWidth(String.valueOf(iNrDays * iCellWidth + 30 + ToolBox.getScrollBarWidth()));
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|day
operator|<
name|days
condition|)
block|{
if|if
condition|(
name|iSeparators
index|[
name|day
index|]
operator|==
literal|null
condition|)
block|{
name|iSeparators
index|[
name|day
index|]
operator|=
operator|new
name|P
argument_list|(
literal|"day-separator"
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|add
argument_list|(
name|iSeparators
index|[
name|day
index|]
argument_list|,
name|iCellWidth
operator|*
name|day
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iSeparators
index|[
name|day
index|]
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iCellWidth
operator|*
name|day
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iSeparators
index|[
name|day
index|]
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|iSeparators
index|[
name|day
index|]
operator|!=
literal|null
condition|)
name|iSeparators
index|[
name|day
index|]
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iNrDays
condition|;
name|i
operator|++
control|)
block|{
name|P
name|sp
init|=
operator|new
name|P
argument_list|(
literal|"header-time-interval"
argument_list|)
decl_stmt|;
name|sp
operator|.
name|setWidth
argument_list|(
name|iCellWidth
argument_list|)
expr_stmt|;
name|sp
operator|.
name|setText
argument_list|(
name|CONSTANTS
operator|.
name|longDays
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|add
argument_list|(
name|sp
argument_list|,
name|i
operator|*
name|iCellWidth
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
name|meeting
operator|.
name|move
argument_list|()
expr_stmt|;
for|for
control|(
name|BusyPanel
name|busy
range|:
name|iBusy
control|)
name|busy
operator|.
name|move
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|firstSlot
parameter_list|()
block|{
for|for
control|(
name|int
name|slot
init|=
literal|0
init|;
name|slot
operator|<
literal|24
operator|*
literal|60
operator|/
literal|5
condition|;
name|slot
operator|++
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|slot
return|;
block|}
block|}
return|return
literal|24
operator|*
literal|60
operator|/
literal|5
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|lastSlot
parameter_list|()
block|{
for|for
control|(
name|int
name|slot
init|=
literal|24
operator|*
literal|60
operator|/
literal|5
operator|-
literal|1
init|;
name|slot
operator|>=
literal|0
condition|;
name|slot
operator|--
control|)
block|{
for|for
control|(
name|int
name|day
init|=
literal|0
init|;
name|day
operator|<
literal|7
condition|;
name|day
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|day
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|slot
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|shrink
parameter_list|()
block|{
name|boolean
name|hasSat
init|=
literal|false
decl_stmt|,
name|hasSun
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|slot
init|=
literal|0
init|;
name|slot
operator|<
literal|24
operator|*
literal|60
operator|/
literal|5
condition|;
name|slot
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
literal|5
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
literal|5
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|iMeetingTable
index|[
literal|6
index|]
index|[
name|slot
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
literal|6
index|]
index|[
name|slot
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|BusyPanel
name|busy
range|:
name|iBusy
control|)
block|{
if|if
condition|(
name|busy
operator|.
name|getDay
argument_list|()
operator|==
literal|5
condition|)
name|hasSat
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|busy
operator|.
name|getDay
argument_list|()
operator|==
literal|6
condition|)
name|hasSun
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasSat
operator|&&
operator|!
name|hasSun
condition|)
name|setNrDays
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|hasSun
condition|)
name|setNrDays
argument_list|(
literal|6
argument_list|)
expr_stmt|;
else|else
name|setNrDays
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getWidth
parameter_list|()
block|{
return|return
name|iNrDays
operator|*
name|iCellWidth
operator|+
literal|40
return|;
block|}
specifier|public
name|int
name|getHeight
parameter_list|()
block|{
return|return
name|iPrint
condition|?
literal|25
operator|+
literal|50
operator|*
operator|(
name|iEnd
operator|-
name|iStart
operator|)
else|:
literal|575
return|;
block|}
specifier|public
name|ColorProvider
name|getColorProvider
parameter_list|()
block|{
return|return
name|iColor
return|;
block|}
specifier|public
name|void
name|scrollDown
parameter_list|()
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|iScrollPanel
operator|!=
literal|null
condition|)
name|iScrollPanel
operator|.
name|setVerticalScrollPosition
argument_list|(
literal|350
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|(
name|boolean
name|clearColors
parameter_list|)
block|{
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
name|iPanel
operator|.
name|remove
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
name|iMeetings
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iMeetingTable
operator|.
name|length
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|iMeetingTable
index|[
name|i
index|]
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|iMeetingTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|!=
literal|null
condition|)
name|iMeetingTable
index|[
name|i
index|]
index|[
name|j
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iClasses
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|BusyPanel
name|busy
range|:
name|iBusy
control|)
name|busy
operator|.
name|remove
argument_list|()
expr_stmt|;
name|iBusy
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|clearColors
condition|)
name|iColor
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Meeting
name|addMeeting
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|body
parameter_list|,
name|String
name|note
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|color
parameter_list|,
name|boolean
name|pinned
parameter_list|,
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|)
block|{
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|getColumn
argument_list|()
operator|>
name|col
condition|)
name|col
operator|=
name|m
operator|.
name|getColumn
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|col
operator|+=
literal|1
expr_stmt|;
name|int
name|cols
init|=
name|col
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|col
operator|>
literal|0
condition|)
block|{
name|boolean
name|used
index|[]
init|=
operator|new
name|boolean
index|[
name|cols
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|-
literal|1
condition|;
name|i
operator|++
control|)
name|used
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|used
index|[
name|m
operator|.
name|getColumn
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cols
operator|-
literal|1
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|used
index|[
name|i
index|]
condition|)
block|{
name|col
operator|=
name|i
expr_stmt|;
name|cols
operator|--
expr_stmt|;
break|break;
block|}
block|}
name|Meeting
name|meeting
init|=
operator|new
name|Meeting
argument_list|(
name|index
argument_list|,
name|name
argument_list|,
name|body
argument_list|,
name|note
argument_list|,
name|day
argument_list|,
name|startSlot
argument_list|,
name|length
argument_list|,
name|col
argument_list|,
name|cols
argument_list|,
name|pinned
argument_list|,
name|meetings
argument_list|)
decl_stmt|;
name|meeting
operator|.
name|addStyleName
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|meeting
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|==
literal|null
condition|)
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Meeting
argument_list|>
name|j
init|=
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Meeting
name|m
init|=
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|m
operator|.
name|setNrColumns
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
name|iMeetingTable
index|[
name|day
index|]
index|[
name|startSlot
operator|+
name|i
index|]
operator|.
name|add
argument_list|(
name|meeting
argument_list|)
expr_stmt|;
block|}
return|return
name|meeting
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|getMeetings
parameter_list|(
name|int
name|index
parameter_list|)
block|{
for|for
control|(
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
range|:
name|iMeetings
control|)
for|for
control|(
name|Meeting
name|meeting
range|:
name|meetings
control|)
if|if
condition|(
name|meeting
operator|.
name|getIndex
argument_list|()
operator|==
name|index
condition|)
return|return
name|meetings
return|;
return|return
literal|null
return|;
block|}
specifier|public
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|addClass
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|row
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|isAssigned
argument_list|()
condition|)
return|return
literal|null
return|;
name|iClasses
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|String
name|name
init|=
operator|(
name|row
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
operator|+
literal|" "
operator|+
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|row
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|row
operator|.
name|getCourseNbr
argument_list|()
operator|+
literal|" "
operator|+
name|row
operator|.
name|getSubpart
argument_list|()
operator|)
decl_stmt|;
name|String
name|longName
init|=
name|name
operator|+
operator|(
name|row
operator|.
name|isFreeTime
argument_list|()
condition|?
literal|""
else|:
literal|" "
operator|+
name|row
operator|.
name|getSection
argument_list|()
operator|)
decl_stmt|;
name|String
name|time
init|=
name|row
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
operator|+
literal|" "
operator|+
name|row
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|row
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|notesNoHtml
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|row
operator|.
name|hasRoom
argument_list|()
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|row
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|notesNoHtml
operator|.
name|add
argument_list|(
name|row
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|color
init|=
name|iColor
operator|.
name|getColor
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|.
name|hasInstructors
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|iPrint
condition|)
block|{
name|String
name|instructors
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|row
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|email
init|=
operator|(
name|row
operator|.
name|hasInstructorEmails
argument_list|()
operator|&&
name|i
operator|<
name|row
operator|.
name|getInstructorEmails
argument_list|()
operator|.
name|size
argument_list|()
condition|?
name|row
operator|.
name|getInstructorEmails
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
else|:
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|email
operator|!=
literal|null
operator|&&
operator|!
name|email
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ImageLink
name|il
init|=
operator|new
name|ImageLink
argument_list|(
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|email
argument_list|()
argument_list|)
argument_list|,
literal|"mailto:"
operator|+
name|email
argument_list|)
decl_stmt|;
name|il
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|sendEmail
argument_list|(
name|row
operator|.
name|getInstructors
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|il
operator|.
name|setStyleName
argument_list|(
literal|"A.unitime-SimpleLink"
argument_list|)
expr_stmt|;
name|il
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginRight
argument_list|(
literal|1
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|instructors
operator|+=
name|il
operator|.
name|getElement
argument_list|()
operator|.
name|getString
argument_list|()
operator|+
name|row
operator|.
name|getInstructors
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
operator|(
name|i
operator|+
literal|1
operator|<
name|row
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
else|else
block|{
name|instructors
operator|+=
name|row
operator|.
name|getInstructors
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
operator|(
name|i
operator|+
literal|1
operator|<
name|row
operator|.
name|getInstructors
argument_list|()
operator|.
name|size
argument_list|()
condition|?
literal|", "
else|:
literal|""
operator|)
expr_stmt|;
block|}
block|}
name|notes
operator|.
name|add
argument_list|(
name|instructors
argument_list|)
expr_stmt|;
name|notesNoHtml
operator|.
name|add
argument_list|(
name|row
operator|.
name|getInstructors
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|notes
operator|.
name|add
argument_list|(
name|row
operator|.
name|getInstructors
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
name|notesNoHtml
operator|.
name|add
argument_list|(
name|row
operator|.
name|getInstructors
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|row
operator|.
name|hasDatePattern
argument_list|()
condition|)
block|{
name|notes
operator|.
name|add
argument_list|(
name|row
operator|.
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
name|notesNoHtml
operator|.
name|add
argument_list|(
name|row
operator|.
name|getDatePattern
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|note
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|notesNoHtml
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
operator|||
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
name|note
operator|+=
literal|", "
expr_stmt|;
name|note
operator|+=
name|n
expr_stmt|;
block|}
name|String
name|title
init|=
name|longName
operator|+
literal|" ("
operator|+
name|time
operator|+
literal|", "
operator|+
name|note
operator|+
literal|")"
decl_stmt|;
if|if
condition|(
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|title
operator|=
name|longName
operator|+
literal|" ("
operator|+
name|time
operator|+
literal|")"
expr_stmt|;
name|note
operator|=
name|time
expr_stmt|;
block|}
specifier|final
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
init|=
operator|new
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|day
range|:
name|row
operator|.
name|getDays
argument_list|()
control|)
block|{
name|meetings
operator|.
name|add
argument_list|(
name|addMeeting
argument_list|(
name|index
argument_list|,
name|day
argument_list|,
name|row
operator|.
name|getStart
argument_list|()
argument_list|,
name|row
operator|.
name|getLength
argument_list|()
argument_list|,
name|name
argument_list|,
name|notes
argument_list|,
name|row
operator|.
name|getNote
argument_list|()
argument_list|,
name|title
argument_list|,
name|color
argument_list|,
name|row
operator|.
name|isPinned
argument_list|()
argument_list|,
name|meetings
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|.
name|isPinned
argument_list|()
condition|)
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
name|m
operator|.
name|setPinned
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|row
operator|.
name|hasDistanceConflict
argument_list|()
condition|)
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
block|{
name|Widget
name|dist
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|iPrint
condition|)
block|{
name|dist
operator|=
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|distanceConflict
argument_list|(
name|row
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dist
operator|.
name|setStyleName
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
comment|// FIXME: Workaround about inability of image bundle images to be printed
comment|// dist = new Image(GWT.getHostPageBaseURL() + "roadrunner16.png");
block|}
name|dist
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|row
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|row
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|addIcon
argument_list|(
name|dist
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|row
operator|.
name|isOfHighDemand
argument_list|()
operator|&&
operator|!
name|iPrint
condition|)
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
block|{
name|Image
name|highDemand
init|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|highDemand
argument_list|()
argument_list|)
decl_stmt|;
name|highDemand
operator|.
name|setTitle
argument_list|(
name|MESSAGES
operator|.
name|highDemand
argument_list|(
name|row
operator|.
name|getExpected
argument_list|()
argument_list|,
name|row
operator|.
name|getAvailableLimit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|addIcon
argument_list|(
name|highDemand
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|row
operator|.
name|isSaved
argument_list|()
operator|&&
operator|!
name|iPrint
condition|)
block|{
for|for
control|(
name|Meeting
name|m
range|:
name|meetings
control|)
name|m
operator|.
name|setSaved
argument_list|(
name|row
operator|.
name|isSaved
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iMeetings
operator|.
name|add
argument_list|(
name|meetings
argument_list|)
expr_stmt|;
return|return
name|meetings
return|;
block|}
specifier|public
interface|interface
name|MeetingClickHandler
block|{
specifier|public
name|void
name|onMeetingClick
parameter_list|(
name|MeetingClickEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|MeetingClickEvent
block|{
specifier|private
name|Meeting
name|iMeeting
decl_stmt|;
name|MeetingClickEvent
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|int
name|getRowIndex
parameter_list|()
block|{
return|return
name|iMeeting
operator|.
name|getIndex
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addMeetingClickHandler
parameter_list|(
name|MeetingClickHandler
name|h
parameter_list|)
block|{
name|iMeetingClickHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
interface|interface
name|PinClickHandler
block|{
specifier|public
name|void
name|onPinClick
parameter_list|(
name|PinClickEvent
name|event
parameter_list|)
function_decl|;
block|}
specifier|public
class|class
name|PinClickEvent
block|{
specifier|private
name|Meeting
name|iMeeting
decl_stmt|;
name|PinClickEvent
parameter_list|(
name|Meeting
name|meeting
parameter_list|)
block|{
name|iMeeting
operator|=
name|meeting
expr_stmt|;
block|}
specifier|public
name|int
name|getRowIndex
parameter_list|()
block|{
return|return
name|iMeeting
operator|.
name|getIndex
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isPinChecked
parameter_list|()
block|{
return|return
name|iMeeting
operator|.
name|getPinned
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|addPinClickHandler
parameter_list|(
name|PinClickHandler
name|h
parameter_list|)
block|{
name|iPinClickHandlers
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
specifier|public
class|class
name|Meeting
extends|extends
name|AbsolutePanel
block|{
specifier|private
name|int
name|iIndex
decl_stmt|,
name|iColumn
decl_stmt|,
name|iDay
decl_stmt|,
name|iNrColumns
decl_stmt|;
specifier|private
name|int
name|iLeft
decl_stmt|,
name|iWidth
decl_stmt|;
specifier|private
name|boolean
name|iPinned
init|=
literal|false
decl_stmt|;
specifier|private
name|Image
name|iPin
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|iMeetings
decl_stmt|;
specifier|private
name|HorizontalPanel
name|iHeaderPanel
decl_stmt|;
specifier|private
name|Image
name|iSaved
decl_stmt|;
specifier|private
name|boolean
name|iDummy
init|=
literal|false
decl_stmt|;
specifier|private
name|Meeting
parameter_list|(
name|int
name|index
parameter_list|,
name|String
name|name
parameter_list|,
name|ArrayList
argument_list|<
name|String
argument_list|>
name|body
parameter_list|,
name|String
name|note
parameter_list|,
name|int
name|day
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|,
name|int
name|column
parameter_list|,
name|int
name|nrColumns
parameter_list|,
name|boolean
name|pinned
parameter_list|,
name|ArrayList
argument_list|<
name|Meeting
argument_list|>
name|meetings
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iMeetings
operator|=
name|meetings
expr_stmt|;
name|iIndex
operator|=
name|index
expr_stmt|;
name|iDay
operator|=
name|day
expr_stmt|;
name|iColumn
operator|=
name|column
expr_stmt|;
name|iNrColumns
operator|=
name|nrColumns
expr_stmt|;
name|iHeaderPanel
operator|=
operator|new
name|HorizontalPanel
argument_list|()
expr_stmt|;
name|iHeaderPanel
operator|.
name|setStylePrimaryName
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|iPinned
operator|=
name|pinned
expr_stmt|;
name|iPin
operator|=
operator|new
name|Image
argument_list|(
name|pinned
condition|?
name|RESOURCES
operator|.
name|locked
argument_list|()
else|:
name|RESOURCES
operator|.
name|unlocked
argument_list|()
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|add
argument_list|(
name|iPin
argument_list|)
expr_stmt|;
name|Label
name|nameLabel
init|=
operator|new
name|Label
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|nameLabel
operator|.
name|setStyleName
argument_list|(
literal|"label"
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|add
argument_list|(
name|nameLabel
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iPin
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iSaved
operator|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|saved
argument_list|()
argument_list|)
expr_stmt|;
name|iSaved
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iHeaderPanel
operator|.
name|add
argument_list|(
name|iSaved
argument_list|)
expr_stmt|;
name|iPin
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|boolean
name|pinned
init|=
operator|!
name|getPinned
argument_list|()
decl_stmt|;
for|for
control|(
name|Meeting
name|m
range|:
name|iMeetings
control|)
name|m
operator|.
name|setPinned
argument_list|(
name|pinned
argument_list|)
expr_stmt|;
name|PinClickEvent
name|e
init|=
operator|new
name|PinClickEvent
argument_list|(
name|Meeting
operator|.
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|PinClickHandler
name|h
range|:
name|iPinClickHandlers
control|)
name|h
operator|.
name|onPinClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|SimplePanel
name|mbot
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|mbot
operator|.
name|setStylePrimaryName
argument_list|(
literal|"footer"
argument_list|)
expr_stmt|;
name|String
name|notes
init|=
literal|""
decl_stmt|;
name|String
name|delim
init|=
literal|"<br>"
decl_stmt|;
if|if
condition|(
name|body
operator|.
name|size
argument_list|()
operator|+
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
operator|>
literal|2
operator|&&
name|length
operator|<=
literal|14
condition|)
name|delim
operator|=
literal|", "
expr_stmt|;
if|if
condition|(
name|body
operator|.
name|size
argument_list|()
operator|+
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|0
else|:
literal|1
operator|)
operator|>
literal|3
operator|&&
name|length
operator|<=
literal|20
condition|)
name|delim
operator|=
literal|", "
expr_stmt|;
for|for
control|(
name|String
name|n
range|:
name|body
control|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
operator|||
name|n
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|notes
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|notes
operator|+=
name|delim
expr_stmt|;
name|notes
operator|+=
literal|"<span  style=\"white-space: nowrap\">"
operator|+
name|n
operator|+
literal|"</span>"
expr_stmt|;
block|}
if|if
condition|(
name|note
operator|!=
literal|null
operator|&&
operator|!
name|note
operator|.
name|isEmpty
argument_list|()
condition|)
name|notes
operator|+=
literal|"<br>"
operator|+
name|note
expr_stmt|;
name|mbot
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|notes
argument_list|)
argument_list|)
expr_stmt|;
name|setStylePrimaryName
argument_list|(
literal|"meeting"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iHeaderPanel
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|mbot
argument_list|)
expr_stmt|;
name|iWidth
operator|=
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|nrColumns
operator|+
operator|(
name|column
operator|+
literal|1
operator|!=
name|nrColumns
operator|&&
name|nrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|125
operator|*
name|length
operator|/
literal|30
operator|-
literal|3
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPosition
argument_list|(
name|Position
operator|.
name|ABSOLUTE
argument_list|)
expr_stmt|;
name|iLeft
operator|=
literal|4
operator|+
name|iCellWidth
operator|*
name|day
operator|+
name|column
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|nrColumns
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setTop
argument_list|(
literal|1
operator|+
literal|125
operator|*
name|start
operator|/
literal|30
operator|-
literal|50
operator|*
name|iStart
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOVER
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEMOVE
argument_list|)
expr_stmt|;
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONMOUSEOUT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addIcon
parameter_list|(
name|Widget
name|image
parameter_list|)
block|{
name|iHeaderPanel
operator|.
name|add
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setSaved
parameter_list|(
name|boolean
name|saved
parameter_list|)
block|{
name|iSaved
operator|.
name|setVisible
argument_list|(
name|saved
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setPinned
parameter_list|(
name|boolean
name|pinned
parameter_list|)
block|{
name|iPinned
operator|=
name|pinned
expr_stmt|;
name|iPin
operator|.
name|setResource
argument_list|(
name|pinned
condition|?
name|RESOURCES
operator|.
name|locked
argument_list|()
else|:
name|RESOURCES
operator|.
name|unlocked
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hidePin
parameter_list|()
block|{
name|iHeaderPanel
operator|.
name|remove
argument_list|(
name|iPin
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|getPinned
parameter_list|()
block|{
return|return
name|iPinned
return|;
block|}
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
name|Event
name|event
parameter_list|)
block|{
if|if
condition|(
name|iDummy
condition|)
return|return;
name|Element
name|target
init|=
name|DOM
operator|.
name|eventGetTarget
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|boolean
name|anchor
init|=
literal|false
decl_stmt|;
for|for
control|(
init|;
name|target
operator|!=
literal|null
condition|;
name|target
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|target
argument_list|)
control|)
block|{
name|String
name|tag
init|=
name|target
operator|.
name|getPropertyString
argument_list|(
literal|"tagName"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|anchor
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|tag
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"div"
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|EventTarget
name|related
init|=
name|event
operator|.
name|getRelatedEventTarget
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearZIndex
argument_list|()
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
name|meeting
operator|.
name|removeStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|anchor
condition|)
block|{
name|MeetingClickEvent
name|e
init|=
operator|new
name|MeetingClickEvent
argument_list|(
name|Meeting
operator|.
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|MeetingClickHandler
name|h
range|:
name|iMeetingClickHandlers
control|)
name|h
operator|.
name|onMeetingClick
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOVER
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iCellWidth
operator|-
literal|6
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setZIndex
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
literal|4
operator|+
name|iCellWidth
operator|*
name|iDay
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
name|meeting
operator|.
name|addStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEOUT
case|:
if|if
condition|(
name|related
operator|==
literal|null
operator|||
operator|!
name|getElement
argument_list|()
operator|.
name|isOrHasChild
argument_list|(
operator|(
name|Element
operator|)
name|related
operator|.
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearZIndex
argument_list|()
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
for|for
control|(
name|Meeting
name|meeting
range|:
name|iMeetings
control|)
name|meeting
operator|.
name|removeStyleName
argument_list|(
literal|"meeting-selected"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Event
operator|.
name|ONMOUSEMOVE
case|:
name|int
name|relativeX
init|=
name|event
operator|.
name|getClientX
argument_list|()
operator|-
name|getElement
argument_list|()
operator|.
name|getAbsoluteLeft
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
operator|+
name|getElement
argument_list|()
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getScrollLeft
argument_list|()
decl_stmt|;
if|if
condition|(
name|relativeX
operator|<
name|iLeft
operator|-
literal|6
operator|-
name|iDay
operator|*
name|iCellWidth
operator|||
name|relativeX
operator|>
name|iLeft
operator|-
literal|2
operator|-
name|iDay
operator|*
name|iCellWidth
operator|+
name|iWidth
condition|)
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|clearZIndex
argument_list|()
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|iIndex
return|;
block|}
specifier|public
name|void
name|setNrColumns
parameter_list|(
name|int
name|nrColumns
parameter_list|)
block|{
if|if
condition|(
name|nrColumns
operator|==
name|iNrColumns
condition|)
return|return;
name|iNrColumns
operator|=
name|nrColumns
expr_stmt|;
name|move
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|move
parameter_list|()
block|{
name|iWidth
operator|=
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iNrColumns
operator|+
operator|(
name|iColumn
operator|+
literal|1
operator|!=
name|iNrColumns
operator|&&
name|iNrColumns
operator|>
literal|1
condition|?
operator|-
literal|3
else|:
literal|0
operator|)
expr_stmt|;
name|iLeft
operator|=
literal|4
operator|+
name|iCellWidth
operator|*
name|iDay
operator|+
name|iColumn
operator|*
operator|(
name|iCellWidth
operator|-
literal|6
operator|)
operator|/
name|iNrColumns
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iWidth
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iLeft
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTitle
parameter_list|(
name|String
name|title
parameter_list|)
block|{
name|super
operator|.
name|setTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|iColumn
return|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
return|return
name|iDay
return|;
block|}
specifier|public
name|int
name|getNrColumns
parameter_list|()
block|{
return|return
name|iNrColumns
return|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Widget
name|w
parameter_list|)
block|{
name|super
operator|.
name|add
argument_list|(
name|w
argument_list|,
operator|(
name|Element
operator|)
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDummy
parameter_list|()
block|{
name|iDummy
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|BusyPanel
extends|extends
name|SimplePanel
block|{
specifier|private
name|int
name|iDayOfWeek
decl_stmt|,
name|iStartSlot
decl_stmt|,
name|iLength
decl_stmt|;
specifier|private
name|String
name|iText
decl_stmt|;
specifier|public
name|BusyPanel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|dayOfWeek
parameter_list|,
name|int
name|startSlot
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iText
operator|=
name|text
expr_stmt|;
name|iDayOfWeek
operator|=
name|dayOfWeek
expr_stmt|;
name|iStartSlot
operator|=
name|startSlot
expr_stmt|;
name|iLength
operator|=
name|length
expr_stmt|;
if|if
condition|(
name|iText
operator|!=
literal|null
operator|||
operator|!
name|iText
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setTitle
argument_list|(
name|iText
argument_list|)
expr_stmt|;
name|boolean
name|empty
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|iMeetingTable
index|[
name|iDayOfWeek
index|]
operator|.
name|length
operator|<=
name|iStartSlot
operator|+
name|i
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|iMeetingTable
index|[
name|iDayOfWeek
index|]
index|[
name|iStartSlot
operator|+
name|i
index|]
operator|!=
literal|null
operator|&&
operator|!
name|iMeetingTable
index|[
name|iDayOfWeek
index|]
index|[
name|iStartSlot
operator|+
name|i
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|empty
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|empty
condition|)
block|{
name|HTML
name|widget
init|=
operator|new
name|HTML
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|widget
operator|.
name|setStyleName
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
block|}
name|setStyleName
argument_list|(
literal|"busy"
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iCellWidth
operator|+
operator|(
name|iPrint
condition|?
literal|3
else|:
name|iDayOfWeek
operator|+
literal|1
operator|<
name|iNrDays
condition|?
literal|3
else|:
literal|0
operator|)
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
literal|125
operator|*
name|iLength
operator|/
literal|30
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iGrid
operator|.
name|insert
argument_list|(
name|this
argument_list|,
name|iCellWidth
operator|*
name|iDayOfWeek
argument_list|,
literal|125
operator|*
name|iStartSlot
operator|/
literal|30
operator|-
literal|50
operator|*
name|iStart
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|move
parameter_list|()
block|{
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
name|iCellWidth
operator|+
operator|(
name|iPrint
condition|?
literal|3
else|:
name|iDayOfWeek
operator|+
literal|1
operator|<
name|iNrDays
condition|?
literal|3
else|:
literal|0
operator|)
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setLeft
argument_list|(
name|iCellWidth
operator|*
name|iDayOfWeek
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getDay
parameter_list|()
block|{
return|return
name|iDayOfWeek
return|;
block|}
specifier|public
name|int
name|getStart
parameter_list|()
block|{
return|return
name|iStartSlot
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|iLength
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|iGrid
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ColorProvider
block|{
specifier|private
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
name|iColor
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|String
name|getColor
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
parameter_list|)
block|{
if|if
condition|(
name|clazz
operator|.
name|isFreeTime
argument_list|()
condition|)
return|return
name|CONSTANTS
operator|.
name|freeTimeColor
argument_list|()
return|;
for|for
control|(
name|String
index|[]
name|pair
range|:
name|iColor
control|)
if|if
condition|(
name|pair
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|clazz
operator|.
name|getCourseId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
return|return
name|pair
index|[
literal|1
index|]
return|;
name|String
name|color
init|=
name|CONSTANTS
operator|.
name|meetingColors
argument_list|()
index|[
name|iColor
operator|.
name|size
argument_list|()
operator|%
name|CONSTANTS
operator|.
name|meetingColors
argument_list|()
operator|.
name|length
index|]
decl_stmt|;
name|iColor
operator|.
name|add
argument_list|(
operator|new
name|String
index|[]
block|{
name|clazz
operator|.
name|getCourseId
argument_list|()
operator|.
name|toString
argument_list|()
block|,
name|color
block|}
argument_list|)
expr_stmt|;
return|return
name|color
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|iColor
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

