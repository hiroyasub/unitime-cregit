begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimePageHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
operator|.
name|UserAuthentication
operator|.
name|UserAuthenticatedEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeFrameDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
operator|.
name|AcademicSessionMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|SectioningProperties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|ClosingEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|StudentSectioningPage
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|Mode
block|{
name|SECTIONING
argument_list|(
literal|true
argument_list|)
block|,
name|REQUESTS
argument_list|(
literal|false
argument_list|)
block|;
name|boolean
name|iSectioning
decl_stmt|;
specifier|private
name|Mode
parameter_list|(
name|boolean
name|isSectioning
parameter_list|)
block|{
name|iSectioning
operator|=
name|isSectioning
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSectioning
parameter_list|()
block|{
return|return
name|iSectioning
return|;
block|}
block|}
empty_stmt|;
specifier|public
name|StudentSectioningPage
parameter_list|(
specifier|final
name|Mode
name|mode
parameter_list|)
block|{
specifier|final
name|UserAuthentication
name|userAuthentication
init|=
operator|new
name|UserAuthentication
argument_list|(
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getMiddle
argument_list|()
argument_list|,
name|mode
operator|.
name|isSectioning
argument_list|()
condition|?
operator|!
name|CONSTANTS
operator|.
name|isAuthenticationRequired
argument_list|()
else|:
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"student"
argument_list|)
operator|==
literal|null
condition|)
name|iSectioningService
operator|.
name|whoAmI
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|isAuthenticationRequired
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|tryAuthenticationWhenGuest
argument_list|()
condition|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|allowUserLogin
argument_list|()
condition|)
name|userAuthentication
operator|.
name|authenticate
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|isAuthenticationRequired
argument_list|()
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"login.do?target="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|Location
operator|.
name|getHref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|userAuthentication
operator|.
name|authenticated
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|// not authenticated
if|if
condition|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|isAuthenticationRequired
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|tryAuthenticationWhenGuest
argument_list|()
condition|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|allowUserLogin
argument_list|()
condition|)
name|userAuthentication
operator|.
name|authenticate
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
operator|||
name|CONSTANTS
operator|.
name|isAuthenticationRequired
argument_list|()
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"login.do?target="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|Location
operator|.
name|getHref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|userAuthentication
operator|.
name|authenticated
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userAuthentication
operator|.
name|authenticated
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|userAuthentication
operator|.
name|authenticated
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|AcademicSessionSelector
name|sessionSelector
init|=
operator|new
name|AcademicSessionSelector
argument_list|(
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getRight
argument_list|()
argument_list|,
name|mode
argument_list|)
decl_stmt|;
name|iSectioningService
operator|.
name|getProperties
argument_list|(
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SectioningProperties
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SectioningProperties
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isAdminOrAdvisor
argument_list|()
condition|)
block|{
name|userAuthentication
operator|.
name|setAllowLookup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"session"
argument_list|)
operator|!=
literal|null
operator|||
name|Location
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|!=
literal|null
condition|)
name|sessionSelector
operator|.
name|selectSession
argument_list|(
operator|new
name|AcademicSessionMatcher
argument_list|()
block|{
specifier|protected
name|boolean
name|matchCampus
parameter_list|(
name|AcademicSessionInfo
name|info
parameter_list|,
name|String
name|campus
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|hasExternalCampus
argument_list|()
operator|&&
name|campus
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getExternalCampus
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|campus
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getCampus
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|matchTerm
parameter_list|(
name|AcademicSessionInfo
name|info
parameter_list|,
name|String
name|term
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|hasExternalTerm
argument_list|()
operator|&&
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getExternalTerm
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTerm
argument_list|()
operator|+
name|info
operator|.
name|getYear
argument_list|()
argument_list|)
operator|||
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getYear
argument_list|()
operator|+
name|info
operator|.
name|getTerm
argument_list|()
argument_list|)
operator|||
name|term
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTerm
argument_list|()
operator|+
name|info
operator|.
name|getYear
argument_list|()
operator|+
name|info
operator|.
name|getCampus
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|matchSession
parameter_list|(
name|AcademicSessionInfo
name|info
parameter_list|,
name|String
name|session
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|hasExternalTerm
argument_list|()
operator|&&
name|info
operator|.
name|hasExternalCampus
argument_list|()
operator|&&
name|session
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getExternalTerm
argument_list|()
operator|+
name|info
operator|.
name|hasExternalCampus
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
name|session
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTerm
argument_list|()
operator|+
name|info
operator|.
name|getYear
argument_list|()
operator|+
name|info
operator|.
name|getCampus
argument_list|()
argument_list|)
operator|||
name|session
operator|.
name|equalsIgnoreCase
argument_list|(
name|info
operator|.
name|getTerm
argument_list|()
operator|+
name|info
operator|.
name|getYear
argument_list|()
argument_list|)
operator|||
name|session
operator|.
name|equals
argument_list|(
name|info
operator|.
name|getSessionId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|match
parameter_list|(
name|AcademicSessionInfo
name|info
parameter_list|)
block|{
name|String
name|campus
init|=
name|Location
operator|.
name|getParameter
argument_list|(
literal|"campus"
argument_list|)
decl_stmt|;
if|if
condition|(
name|campus
operator|!=
literal|null
operator|&&
operator|!
name|matchCampus
argument_list|(
name|info
argument_list|,
name|campus
argument_list|)
condition|)
return|return
literal|false
return|;
name|String
name|term
init|=
name|Location
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
decl_stmt|;
if|if
condition|(
name|term
operator|!=
literal|null
operator|&&
operator|!
name|matchTerm
argument_list|(
name|info
argument_list|,
name|term
argument_list|)
condition|)
return|return
literal|false
return|;
name|String
name|session
init|=
name|Location
operator|.
name|getParameter
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
operator|&&
operator|!
name|matchSession
argument_list|(
name|info
argument_list|,
name|session
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"student"
argument_list|)
operator|!=
literal|null
condition|)
name|UserAuthentication
operator|.
name|personFound
argument_list|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"student"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|userAuthentication
operator|.
name|setAllowLookup
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getLeft
argument_list|()
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getLeft
argument_list|()
operator|.
name|setPreventDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|StudentSectioningWidget
name|widget
init|=
operator|new
name|StudentSectioningWidget
argument_list|(
literal|true
argument_list|,
name|sessionSelector
argument_list|,
name|userAuthentication
argument_list|,
name|mode
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|initWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getRight
argument_list|()
operator|.
name|setClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|.
name|isChanged
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|widget
operator|.
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|queryLeaveChanges
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|sessionSelector
operator|.
name|selectSession
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sessionSelector
operator|.
name|selectSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimePageHeader
operator|.
name|getInstance
argument_list|()
operator|.
name|getMiddle
argument_list|()
operator|.
name|setClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|CONSTANTS
operator|.
name|allowUserLogin
argument_list|()
condition|)
block|{
if|if
condition|(
name|widget
operator|.
name|isChanged
argument_list|()
condition|)
block|{
name|UniTimeConfirmationDialog
operator|.
name|confirm
argument_list|(
name|widget
operator|.
name|useDefaultConfirmDialog
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|queryLeaveChanges
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
name|userAuthentication
operator|.
name|isLoggedIn
argument_list|()
condition|)
name|userAuthentication
operator|.
name|logOut
argument_list|()
expr_stmt|;
else|else
name|userAuthentication
operator|.
name|authenticate
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|userAuthentication
operator|.
name|isLoggedIn
argument_list|()
condition|)
name|userAuthentication
operator|.
name|logOut
argument_list|()
expr_stmt|;
else|else
name|userAuthentication
operator|.
name|authenticate
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|userAuthentication
operator|.
name|isAllowLookup
argument_list|()
condition|)
block|{
name|userAuthentication
operator|.
name|doLookup
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|userAuthentication
operator|.
name|isLoggedIn
argument_list|()
condition|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"logOut.do"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"login.do?target="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|Location
operator|.
name|getHref
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|userAuthentication
operator|.
name|addUserAuthenticatedHandler
argument_list|(
operator|new
name|UserAuthentication
operator|.
name|UserAuthenticatedHandler
argument_list|()
block|{
specifier|public
name|void
name|onLogIn
parameter_list|(
name|UserAuthenticatedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|mode
operator|.
name|isSectioning
argument_list|()
condition|)
name|sessionSelector
operator|.
name|selectSession
argument_list|(
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sessionSelector
operator|.
name|selectSession
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onLogOut
parameter_list|(
name|UserAuthenticatedEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|event
operator|.
name|isGuest
argument_list|()
condition|)
block|{
name|widget
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|widget
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// sessionSelector.selectSession(null);
block|}
name|userAuthentication
operator|.
name|authenticate
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|sessionSelector
operator|.
name|addAcademicSessionChangeHandler
argument_list|(
operator|new
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeHandler
argument_list|()
block|{
specifier|public
name|void
name|onAcademicSessionChange
parameter_list|(
name|AcademicSessionProvider
operator|.
name|AcademicSessionChangeEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|isChanged
argument_list|()
condition|)
block|{
name|widget
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|widget
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|widget
operator|.
name|checkEligibility
argument_list|(
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|userAuthentication
operator|.
name|setLookupOptions
argument_list|(
literal|"mustHaveExternalId,source=students,session="
operator|+
name|event
operator|.
name|getNewAcademicSessionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|Location
operator|.
name|getParameter
argument_list|(
literal|"session"
argument_list|)
operator|==
literal|null
operator|&&
name|Location
operator|.
name|getParameter
argument_list|(
literal|"term"
argument_list|)
operator|==
literal|null
condition|)
name|iSectioningService
operator|.
name|lastAcademicSession
argument_list|(
name|mode
operator|.
name|isSectioning
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
operator|!
name|userAuthentication
operator|.
name|isShowing
argument_list|()
operator|&&
operator|!
name|UniTimeFrameDialog
operator|.
name|hasDialog
argument_list|()
condition|)
name|sessionSelector
operator|.
name|selectSession
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AcademicSessionProvider
operator|.
name|AcademicSessionInfo
name|result
parameter_list|)
block|{
name|sessionSelector
operator|.
name|selectSession
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Window
operator|.
name|addWindowClosingHandler
argument_list|(
operator|new
name|Window
operator|.
name|ClosingHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onWindowClosing
parameter_list|(
name|ClosingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|widget
operator|.
name|isChanged
argument_list|()
condition|)
block|{
if|if
condition|(
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|isShowing
argument_list|()
condition|)
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|event
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|queryLeaveChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

