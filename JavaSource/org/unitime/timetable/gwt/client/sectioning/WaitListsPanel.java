begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|OpenCloseSectionImage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|P
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeConfirmationDialog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|CourseMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Preference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|CourseRequestInterface
operator|.
name|RequestedCourseStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|WaitListMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|SpecialRegistrationInterface
operator|.
name|SpecialRegistrationContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ImageResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|WaitListsPanel
extends|extends
name|P
block|{
specifier|protected
specifier|static
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sModifiedDateFormat
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|RequestedCourse
argument_list|>
name|iTable
decl_stmt|;
specifier|private
name|FocusPanel
name|iPanel
decl_stmt|;
specifier|private
name|Image
name|iWaiting
init|=
literal|null
decl_stmt|;
specifier|private
name|OpenCloseSectionImage
name|iOpenCloseImage
decl_stmt|;
specifier|private
name|CourseRequestInterface
name|iRequests
decl_stmt|;
specifier|private
name|SpecialRegistrationContext
name|iSpecReg
decl_stmt|;
specifier|public
name|WaitListsPanel
parameter_list|(
name|SpecialRegistrationContext
name|specReg
parameter_list|)
block|{
name|iSpecReg
operator|=
name|specReg
expr_stmt|;
name|addStyleName
argument_list|(
literal|"unitime-WaitListsPanel"
argument_list|)
expr_stmt|;
name|P
name|title
init|=
operator|new
name|P
argument_list|(
literal|"waitlists-header"
argument_list|)
decl_stmt|;
name|iWaiting
operator|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
expr_stmt|;
name|iWaiting
operator|.
name|addStyleName
argument_list|(
literal|"icon"
argument_list|)
expr_stmt|;
name|iWaiting
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|title
operator|.
name|add
argument_list|(
name|iWaiting
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|=
operator|new
name|OpenCloseSectionImage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|addStyleName
argument_list|(
literal|"open-close-icon"
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|title
operator|.
name|add
argument_list|(
name|iOpenCloseImage
argument_list|)
expr_stmt|;
name|P
name|label
init|=
operator|new
name|P
argument_list|(
literal|"title"
argument_list|)
decl_stmt|;
name|label
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|panelWaitListedCourses
argument_list|()
argument_list|)
expr_stmt|;
name|title
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|iTable
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|RequestedCourse
argument_list|>
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|addStyleName
argument_list|(
literal|"waitlists-table"
argument_list|)
expr_stmt|;
name|iPanel
operator|=
operator|new
name|FocusPanel
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|addStyleName
argument_list|(
literal|"waitlists-panel"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|iPanel
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|iPanel
operator|.
name|setVisible
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|&&
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setWaitListsOpened
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|label
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iOpenCloseImage
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|iOpenCloseImage
operator|.
name|setValue
argument_list|(
operator|!
name|iOpenCloseImage
operator|.
name|getValue
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colWaitListedTimeStamp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTitle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colWaitListPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRequirements
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colWaitListErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setValue
argument_list|(
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|isWaitListsOpened
argument_list|()
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setVisible
argument_list|(
name|iOpenCloseImage
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|showWaiting
parameter_list|()
block|{
name|iWaiting
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|hideWaiting
parameter_list|()
block|{
name|iWaiting
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setVisible
argument_list|(
name|iOpenCloseImage
operator|.
name|getValue
argument_list|()
operator|&&
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|setVisible
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|CourseRequestInterface
name|value
parameter_list|)
block|{
name|iRequests
operator|=
name|value
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|iRequests
operator|!=
literal|null
operator|&&
name|iRequests
operator|.
name|getWaitListMode
argument_list|()
operator|==
name|WaitListMode
operator|.
name|WaitList
condition|)
block|{
name|NumberFormat
name|df
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"0.#"
argument_list|)
decl_stmt|;
name|boolean
name|hasPrefs
init|=
literal|false
decl_stmt|;
name|boolean
name|hasPosition
init|=
literal|false
decl_stmt|;
name|request
label|:
for|for
control|(
name|Request
name|request
range|:
name|iRequests
operator|.
name|getCourses
argument_list|()
control|)
block|{
if|if
condition|(
name|request
operator|.
name|isWaitList
argument_list|()
operator|&&
name|request
operator|.
name|hasRequestedCourse
argument_list|()
condition|)
block|{
name|boolean
name|firstLine
init|=
literal|true
decl_stmt|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
continue|continue
name|request
continue|;
for|for
control|(
name|RequestedCourse
name|rc
range|:
name|request
operator|.
name|getRequestedCourse
argument_list|()
control|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasCourseId
argument_list|()
operator|&&
name|rc
operator|.
name|isCanWaitList
argument_list|()
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|ENROLLED
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"icons"
argument_list|)
decl_stmt|;
name|String
name|style
init|=
literal|"pending"
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|rc
operator|.
name|getStatus
argument_list|()
condition|)
block|{
case|case
name|OVERRIDE_APPROVED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegApproved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegApproved
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"approved"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegCancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegCancelled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"cancelled"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegPending
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegPending
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"pending"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegRejected
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegRejected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"rejected"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_NEEDED
case|:
case|case
name|NEW_REQUEST
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|reqStatusNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"needed"
expr_stmt|;
break|break;
case|case
name|SAVED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|requestsWaitList
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|descriptionRequestWaitListed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"saved"
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|requestsWaitList
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|descriptionRequestWaitListed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"saved"
expr_stmt|;
block|}
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|reqNote
init|=
name|rc
operator|.
name|getRequestorNote
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|reqNote
operator|==
literal|null
operator|||
name|reqNote
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|iSpecReg
operator|.
name|isAllowChangeRequestNote
argument_list|()
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
condition|)
name|reqNote
operator|=
name|MESSAGES
operator|.
name|noRequestNoteClickToChange
argument_list|()
expr_stmt|;
name|DateAndNoteCell
name|date
init|=
operator|new
name|DateAndNoteCell
argument_list|(
name|firstLine
condition|?
name|request
operator|.
name|getWaitListedTimeStamp
argument_list|()
else|:
literal|null
argument_list|,
name|reqNote
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSpecReg
operator|.
name|isAllowChangeRequestNote
argument_list|()
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
condition|)
block|{
name|date
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|date
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iSpecReg
operator|.
name|getChangeRequestorNoteInterface
argument_list|()
operator|.
name|changeRequestorNote
argument_list|(
name|rc
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|rc
operator|.
name|getCourseName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|rc
operator|.
name|hasCourseTitle
argument_list|()
condition|?
name|rc
operator|.
name|getCourseTitle
argument_list|()
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|rc
operator|.
name|hasCredit
argument_list|()
condition|?
operator|(
name|rc
operator|.
name|getCreditMin
argument_list|()
operator|.
name|equals
argument_list|(
name|rc
operator|.
name|getCreditMax
argument_list|()
argument_list|)
condition|?
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMin
argument_list|()
argument_list|)
else|:
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMin
argument_list|()
argument_list|)
operator|+
literal|" - "
operator|+
name|df
operator|.
name|format
argument_list|(
name|rc
operator|.
name|getCreditMax
argument_list|()
argument_list|)
operator|)
else|:
literal|""
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasWaitListPosition
argument_list|()
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|NEW_REQUEST
operator|&&
name|rc
operator|.
name|getStatus
argument_list|()
operator|!=
name|RequestedCourseStatus
operator|.
name|OVERRIDE_NEEDED
condition|)
block|{
name|hasPosition
operator|=
literal|true
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|rc
operator|.
name|getWaitListPosition
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Collection
argument_list|<
name|Preference
argument_list|>
name|prefs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rc
operator|.
name|hasSelectedIntructionalMethods
argument_list|()
condition|)
block|{
if|if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|prefs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Preference
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|rc
operator|.
name|getSelectedClasses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|Preference
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prefs
operator|.
name|addAll
argument_list|(
operator|new
name|TreeSet
argument_list|<
name|Preference
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prefs
operator|=
operator|new
name|TreeSet
argument_list|<
name|Preference
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedIntructionalMethods
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|rc
operator|.
name|hasSelectedClasses
argument_list|()
condition|)
block|{
name|prefs
operator|=
operator|new
name|TreeSet
argument_list|<
name|Preference
argument_list|>
argument_list|(
name|rc
operator|.
name|getSelectedClasses
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|prefs
operator|!=
literal|null
operator|&&
operator|!
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Preference
argument_list|>
name|i
init|=
name|prefs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Preference
name|pr
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pr
operator|.
name|isRequired
argument_list|()
condition|)
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|ToolBox
operator|.
name|toString
argument_list|(
name|prefs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|!=
literal|null
operator|&&
operator|!
name|prefs
operator|.
name|isEmpty
argument_list|()
condition|)
name|hasPrefs
operator|=
literal|true
expr_stmt|;
name|String
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iRequests
operator|.
name|hasConfirmations
argument_list|()
condition|)
block|{
for|for
control|(
name|CourseMessage
name|m
range|:
name|iRequests
operator|.
name|getConfirmations
argument_list|()
control|)
block|{
if|if
condition|(
literal|"NO_ALT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
literal|"CREDIT"
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCode
argument_list|()
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|m
operator|.
name|hasCourse
argument_list|()
operator|&&
name|rc
operator|.
name|getCourseId
argument_list|()
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|note
operator|==
literal|null
condition|)
block|{
name|note
operator|=
operator|(
name|m
operator|.
name|isError
argument_list|()
condition|?
literal|"<span class='error'>"
else|:
literal|"<span class='"
operator|+
name|style
operator|+
literal|"'>"
operator|)
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
else|else
block|{
name|note
operator|+=
literal|"\n"
operator|+
operator|(
name|m
operator|.
name|isError
argument_list|()
condition|?
literal|"<span class='error'>"
else|:
literal|"<span class='"
operator|+
name|style
operator|+
literal|"'>"
operator|)
operator|+
name|m
operator|.
name|getMessage
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|rc
operator|.
name|hasStatusNote
argument_list|()
condition|)
block|{
name|note
operator|=
operator|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
operator|+
literal|"<br>"
operator|)
operator|+
literal|"<span class='note'>"
operator|+
name|rc
operator|.
name|getStatusNote
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
block|}
name|HTML
name|errorsLabel
init|=
operator|new
name|HTML
argument_list|(
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
argument_list|)
decl_stmt|;
name|errorsLabel
operator|.
name|addStyleName
argument_list|(
literal|"waitlists-errors"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|errorsLabel
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|iTable
operator|.
name|addRow
argument_list|(
name|rc
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstLine
operator|&&
name|idx
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
block|}
name|firstLine
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|iRequests
operator|.
name|hasMaxCreditOverride
argument_list|()
condition|)
block|{
name|P
name|p
init|=
operator|new
name|P
argument_list|(
literal|"icons"
argument_list|)
decl_stmt|;
name|String
name|style
init|=
literal|"pending"
decl_stmt|;
if|if
condition|(
name|iRequests
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|!=
literal|null
condition|)
block|{
switch|switch
condition|(
name|iRequests
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
condition|)
block|{
case|case
name|OVERRIDE_APPROVED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegApproved
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegApproved
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"approved"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_CANCELLED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegCancelled
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegCancelled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"cancelled"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_PENDING
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegPending
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegPending
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"pending"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_REJECTED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|specRegRejected
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|hintSpecRegRejected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"rejected"
expr_stmt|;
break|break;
case|case
name|OVERRIDE_NEEDED
case|:
case|case
name|NEW_REQUEST
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|requestNeeded
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|reqStatusNeeded
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"needed"
expr_stmt|;
break|break;
case|case
name|SAVED
case|:
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|requestsWaitList
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|descriptionRequestWaitListed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"saved"
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|p
operator|.
name|add
argument_list|(
operator|new
name|Icon
argument_list|(
name|RESOURCES
operator|.
name|requestsWaitList
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|descriptionRequestWaitListed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|style
operator|=
literal|"saved"
expr_stmt|;
block|}
name|List
argument_list|<
name|Widget
argument_list|>
name|row
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|row
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|String
name|reqNote
init|=
name|iRequests
operator|.
name|getRequestorNote
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|reqNote
operator|==
literal|null
operator|||
name|reqNote
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|iSpecReg
operator|.
name|isAllowChangeRequestNote
argument_list|()
operator|&&
name|iRequests
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
condition|)
name|reqNote
operator|=
name|MESSAGES
operator|.
name|noRequestNoteClickToChange
argument_list|()
expr_stmt|;
name|DateAndNoteCell
name|date
init|=
operator|new
name|DateAndNoteCell
argument_list|(
name|iRequests
operator|.
name|getMaxCreditOverrideTimeStamp
argument_list|()
argument_list|,
name|reqNote
argument_list|)
decl_stmt|;
if|if
condition|(
name|iSpecReg
operator|.
name|isAllowChangeRequestNote
argument_list|()
operator|&&
name|iRequests
operator|.
name|getMaxCreditOverrideStatus
argument_list|()
operator|==
name|RequestedCourseStatus
operator|.
name|OVERRIDE_PENDING
condition|)
block|{
name|date
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|date
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iSpecReg
operator|.
name|getChangeRequestorNoteInterface
argument_list|()
operator|.
name|changeRequestorCreditNote
argument_list|(
name|iRequests
argument_list|)
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|row
operator|.
name|add
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|iRequests
operator|.
name|getMaxCreditOverride
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|note
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|iRequests
operator|.
name|hasCreditWarning
argument_list|()
condition|)
name|note
operator|=
literal|"<span class='"
operator|+
name|style
operator|+
literal|"'>"
operator|+
name|iRequests
operator|.
name|getCreditWarning
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
else|else
name|note
operator|=
literal|"<span class='"
operator|+
name|style
operator|+
literal|"'>"
operator|+
name|MESSAGES
operator|.
name|creditWarning
argument_list|(
name|iRequests
operator|.
name|getMaxCredit
argument_list|()
argument_list|)
operator|+
literal|"</span>"
expr_stmt|;
if|if
condition|(
name|iRequests
operator|.
name|hasCreditNote
argument_list|()
condition|)
name|note
operator|+=
literal|"\n<span class='note'>"
operator|+
name|iRequests
operator|.
name|getCreditNote
argument_list|()
operator|+
literal|"</span>"
expr_stmt|;
name|HTML
name|errorsLabel
init|=
operator|new
name|HTML
argument_list|(
name|note
argument_list|)
decl_stmt|;
name|errorsLabel
operator|.
name|addStyleName
argument_list|(
literal|"waitlists-errors"
argument_list|)
expr_stmt|;
name|row
operator|.
name|add
argument_list|(
name|errorsLabel
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|idx
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|idx
argument_list|,
name|c
argument_list|,
literal|"top-border-dashed"
argument_list|)
expr_stmt|;
block|}
block|}
name|iTable
operator|.
name|setColumnVisible
argument_list|(
literal|5
argument_list|,
name|hasPosition
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|setColumnVisible
argument_list|(
literal|6
argument_list|,
name|hasPrefs
argument_list|)
expr_stmt|;
block|}
name|setVisible
argument_list|(
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|iPanel
operator|.
name|setVisible
argument_list|(
name|iOpenCloseImage
operator|.
name|getValue
argument_list|()
operator|&&
name|iTable
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CourseRequestInterface
name|getRequest
parameter_list|()
block|{
return|return
name|iRequests
return|;
block|}
specifier|protected
class|class
name|DateAndNoteCell
extends|extends
name|Label
block|{
specifier|public
name|DateAndNoteCell
parameter_list|(
name|Date
name|date
parameter_list|,
name|String
name|note
parameter_list|)
block|{
name|super
argument_list|(
name|date
operator|==
literal|null
condition|?
name|note
operator|==
literal|null
condition|?
literal|""
else|:
name|note
else|:
name|sModifiedDateFormat
operator|.
name|format
argument_list|(
name|date
argument_list|)
operator|+
operator|(
name|note
operator|==
literal|null
operator|||
name|note
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\n"
operator|+
name|note
operator|)
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"date-and-note"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|Icon
extends|extends
name|Image
block|{
specifier|public
name|Icon
parameter_list|(
name|ImageResource
name|image
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|image
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
operator|&&
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setAltText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|setTitle
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|UniTimeConfirmationDialog
operator|.
name|info
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

