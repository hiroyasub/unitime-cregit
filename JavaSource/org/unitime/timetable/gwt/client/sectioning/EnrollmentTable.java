begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasColSpan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasStyleName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
specifier|public
class|class
name|EnrollmentTable
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|requestDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|VerticalPanel
name|iEnrollmentPanel
decl_stmt|;
specifier|private
name|Image
name|iOpenCloseImage
decl_stmt|,
name|iLoadingImage
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|iEnrollments
decl_stmt|;
specifier|private
name|Label
name|iErrorLabel
decl_stmt|;
specifier|private
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
name|iLoadCallback
init|=
literal|null
decl_stmt|;
specifier|public
name|EnrollmentTable
parameter_list|(
name|boolean
name|showHeader
parameter_list|)
block|{
name|iEnrollmentPanel
operator|=
operator|new
name|VerticalPanel
argument_list|()
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showHeader
condition|)
block|{
name|HorizontalPanel
name|header
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|iOpenCloseImage
operator|=
operator|new
name|Image
argument_list|(
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
condition|?
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
else|:
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setCursor
argument_list|(
name|Cursor
operator|.
name|POINTER
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|iOpenCloseImage
argument_list|)
expr_stmt|;
name|Label
name|curriculaLabel
init|=
operator|new
name|Label
argument_list|(
literal|"Enrollments"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|curriculaLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime3-HeaderTitle"
argument_list|)
expr_stmt|;
name|curriculaLabel
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setPaddingLeft
argument_list|(
literal|2
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|curriculaLabel
argument_list|)
expr_stmt|;
name|header
operator|.
name|setCellWidth
argument_list|(
name|curriculaLabel
argument_list|,
literal|"100%"
argument_list|)
expr_stmt|;
name|header
operator|.
name|setStyleName
argument_list|(
literal|"unitime3-HeaderPanel"
argument_list|)
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|add
argument_list|(
name|header
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentCoursesDetails
argument_list|(
operator|!
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setResource
argument_list|(
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
condition|?
name|RESOURCES
operator|.
name|treeOpen
argument_list|()
else|:
name|RESOURCES
operator|.
name|treeClosed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|iLoadingImage
operator|=
operator|new
name|Image
argument_list|(
name|RESOURCES
operator|.
name|loading_small
argument_list|()
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|add
argument_list|(
name|iLoadingImage
argument_list|)
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|setCellHorizontalAlignment
argument_list|(
name|iLoadingImage
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|setCellVerticalAlignment
argument_list|(
name|iLoadingImage
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_MIDDLE
argument_list|)
expr_stmt|;
name|iEnrollments
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|add
argument_list|(
name|iEnrollments
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|=
operator|new
name|Label
argument_list|()
expr_stmt|;
name|iErrorLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|add
argument_list|(
name|iErrorLabel
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iEnrollmentPanel
argument_list|)
expr_stmt|;
name|iEnrollments
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
specifier|final
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingEnrollment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iSectioningService
operator|.
name|getEnrollment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|fail
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|WebTable
name|assignments
init|=
operator|new
name|WebTable
argument_list|()
decl_stmt|;
name|assignments
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"50"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDays
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"50"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colStart
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colEnd
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colParent
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|result
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|boolean
name|firstClazz
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|String
name|style
init|=
literal|"unitime-ClassRow"
operator|+
operator|(
name|firstClazz
operator|&&
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"First"
else|:
literal|""
operator|)
decl_stmt|;
specifier|final
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|firstClazz
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|style
init|=
literal|"unitime-ClassRowRed"
operator|+
operator|(
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"First"
else|:
literal|""
operator|)
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|String
name|unassignedMessage
init|=
name|MESSAGES
operator|.
name|courseNotAssigned
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getOverlaps
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|conflictWith
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithOr
argument_list|()
expr_stmt|;
name|unassignedMessage
operator|+=
name|x
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|unassignedMessage
operator|+=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getInstead
argument_list|()
operator|!=
literal|null
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictAssignedAlternative
argument_list|(
name|course
operator|.
name|getInstead
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedMessage
operator|+=
literal|"."
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|isNotAvailable
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|classNotAvailable
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|10
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|row
operator|.
name|getCell
argument_list|(
name|row
operator|.
name|getNrCells
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ClassRowProblem"
operator|+
operator|(
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"First"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
name|WebTable
operator|.
name|Row
index|[]
name|rowArray
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|rows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Row
name|row
range|:
name|rows
control|)
name|rowArray
index|[
name|idx
operator|++
index|]
operator|=
name|row
expr_stmt|;
name|assignments
operator|.
name|setData
argument_list|(
name|rowArray
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogEnrollments
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|iEnrollments
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Number
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|Number
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|private
name|void
name|initCallbacks
parameter_list|()
block|{
if|if
condition|(
name|iLoadCallback
operator|==
literal|null
condition|)
block|{
name|iLoadCallback
operator|=
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|offeringHasNoEnrollments
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|populate
argument_list|(
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|iOpenCloseImage
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingId
operator|!=
literal|null
condition|)
block|{
name|iSectioningService
operator|.
name|listEnrollments
argument_list|(
name|iOfferingId
argument_list|,
name|iLoadCallback
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clear
parameter_list|(
name|boolean
name|loading
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
name|iEnrollments
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|iEnrollments
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|iLoadingImage
operator|.
name|setVisible
argument_list|(
name|loading
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|populate
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|enrollments
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|enrollments
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hStudent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
decl_stmt|;
comment|//hStudent.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hStudent
argument_list|)
expr_stmt|;
name|hStudent
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|crosslist
init|=
literal|false
decl_stmt|;
name|Long
name|courseId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
name|courseId
operator|=
name|e
operator|.
name|getCourseId
argument_list|()
expr_stmt|;
if|else if
condition|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|!=
name|courseId
condition|)
block|{
name|crosslist
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|crosslist
condition|)
block|{
name|UniTimeTableHeader
name|hCourse
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
decl_stmt|;
comment|//hCourse.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hCourse
argument_list|)
expr_stmt|;
name|hCourse
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getCourseName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasPriority
init|=
literal|false
decl_stmt|,
name|hasArea
init|=
literal|false
decl_stmt|,
name|hasMajor
init|=
literal|false
decl_stmt|,
name|hasAlternative
init|=
literal|false
decl_stmt|,
name|hasReservation
init|=
literal|false
decl_stmt|,
name|hasRequestedDate
init|=
literal|false
decl_stmt|,
name|hasEnrolledDate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
condition|)
name|hasPriority
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isAlternative
argument_list|()
condition|)
name|hasAlternative
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasArea
argument_list|()
condition|)
name|hasArea
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasMajor
argument_list|()
condition|)
name|hasMajor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|hasReservation
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getRequestedDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasRequestedDate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getEnrolledDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasEnrolledDate
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|hasPriority
condition|)
block|{
name|UniTimeTableHeader
name|hPriority
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPriority
argument_list|()
argument_list|)
decl_stmt|;
comment|//hPriority.setWidth("100px");
name|hPriority
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getPriority
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getAlternative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colPriority
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hPriority
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasAlternative
condition|)
block|{
name|UniTimeTableHeader
name|hAlternative
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAlternative
argument_list|()
argument_list|)
decl_stmt|;
comment|//hAlternative.setWidth("100px");
name|hAlternative
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getAlternative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getAlternative
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colAlternative
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hAlternative
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasArea
condition|)
block|{
name|UniTimeTableHeader
name|hArea
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
decl_stmt|;
comment|//hArea.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hArea
argument_list|)
expr_stmt|;
name|hArea
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|UniTimeTableHeader
name|hClasf
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|)
decl_stmt|;
comment|//hClasf.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hClasf
argument_list|)
expr_stmt|;
name|hClasf
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasMajor
condition|)
block|{
name|UniTimeTableHeader
name|hMajor
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|)
decl_stmt|;
comment|//hMajor.setWidth("100px");
name|header
operator|.
name|add
argument_list|(
name|hMajor
argument_list|)
expr_stmt|;
name|hMajor
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasReservation
condition|)
block|{
name|UniTimeTableHeader
name|hReservation
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|)
decl_stmt|;
comment|//hReservation.setWidth("100px");
name|hReservation
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|e1
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getReservation
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hReservation
argument_list|)
expr_stmt|;
block|}
name|TreeSet
argument_list|<
name|String
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|e
operator|.
name|hasClasses
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|c
range|:
name|e
operator|.
name|getClasses
argument_list|()
control|)
name|subparts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getSubpart
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|subpart
range|:
name|subparts
control|)
block|{
name|UniTimeTableHeader
name|hSubpart
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|subpart
argument_list|)
decl_stmt|;
comment|//hSubpart.setWidth("100px");
name|hSubpart
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getClasses
argument_list|(
name|subpart
argument_list|,
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getClasses
argument_list|(
name|subpart
argument_list|,
literal|"|"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|subpart
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSubpart
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasRequestedDate
condition|)
block|{
name|UniTimeTableHeader
name|hTimeStamp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
comment|//hTimeStamp.setWidth("100px");
name|hTimeStamp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getRequestedDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeStamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasEnrolledDate
condition|)
block|{
name|UniTimeTableHeader
name|hTimeStamp
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|)
decl_stmt|;
comment|//hTimeStamp.setWidth("100px");
name|hTimeStamp
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getEnrolledDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hTimeStamp
argument_list|)
expr_stmt|;
block|}
name|iEnrollments
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|int
name|enrolled
init|=
literal|0
decl_stmt|;
name|int
name|waitlisted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|crosslist
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPriority
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Number
argument_list|(
name|enrollment
operator|.
name|getPriority
argument_list|()
operator|<=
literal|0
condition|?
literal|"&nbsp;"
else|:
name|MESSAGES
operator|.
name|priority
argument_list|(
name|enrollment
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAlternative
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getAlternative
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasArea
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasMajor
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasReservation
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|enrollment
operator|.
name|getReservation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|hasClasses
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|WarningLabel
argument_list|(
name|MESSAGES
operator|.
name|courseWaitListed
argument_list|()
argument_list|,
name|subparts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
for|for
control|(
name|String
name|subpart
range|:
name|subparts
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getClasses
argument_list|(
name|subpart
argument_list|,
literal|", "
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasRequestedDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrolledDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|iEnrollments
operator|.
name|addRow
argument_list|(
name|enrollment
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
if|if
condition|(
name|enrollment
operator|.
name|hasClasses
argument_list|()
condition|)
name|enrolled
operator|++
expr_stmt|;
else|else
name|waitlisted
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Widget
argument_list|>
name|footer
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|waitlisted
operator|==
literal|0
condition|)
block|{
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalEnrolled
argument_list|(
name|enrolled
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|enrolled
operator|==
literal|0
condition|)
block|{
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalRequested
argument_list|(
name|waitlisted
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalEnrolled
argument_list|(
name|enrolled
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalWaitListed
argument_list|(
name|waitlisted
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
operator|-
operator|(
name|header
operator|.
name|size
argument_list|()
operator|/
literal|2
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iEnrollments
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|footer
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TotalLabel
extends|extends
name|HTML
implements|implements
name|HasColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|TotalLabel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-TotalRow"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WarningLabel
extends|extends
name|HTML
implements|implements
name|HasColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|WarningLabel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-ClassRowRed"
return|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
name|initCallbacks
argument_list|()
expr_stmt|;
name|iOfferingId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setErrorMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iErrorLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ErrorMessage"
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setText
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setMessage
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|iErrorLabel
operator|.
name|setStyleName
argument_list|(
literal|"unitime-Message"
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setText
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|iErrorLabel
operator|.
name|setVisible
argument_list|(
name|message
operator|!=
literal|null
operator|&&
operator|!
name|message
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|scrollIntoView
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|iEnrollments
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
operator|&&
name|iEnrollments
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|r
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ReservationClickedEvent
block|{
specifier|private
name|ReservationInterface
name|iReservation
decl_stmt|;
specifier|public
name|ReservationClickedEvent
parameter_list|(
name|ReservationInterface
name|reservation
parameter_list|)
block|{
name|iReservation
operator|=
name|reservation
expr_stmt|;
block|}
specifier|public
name|ReservationInterface
name|getReservation
parameter_list|()
block|{
return|return
name|iReservation
return|;
block|}
block|}
specifier|public
interface|interface
name|ReservationClickHandler
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ReservationClickedEvent
name|evt
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|select
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|iEnrollments
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|i
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

