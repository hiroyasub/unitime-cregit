begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|page
operator|.
name|UniTimeNotifications
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeDialogBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|MouseClickListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|TableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|WebTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasColSpan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasStyleName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasVerticalCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
operator|.
name|Operation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|StudentSectioningResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|services
operator|.
name|SectioningServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|AcademicSessionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Conflict
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|Enrollment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ClassAssignmentInterface
operator|.
name|SectioningAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|OnlineSectioningInterface
operator|.
name|EligibilityCheck
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|ReservationInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|UserAuthenticationProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Overflow
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|DateTimeFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasVerticalAlignment
operator|.
name|VerticalAlignmentConstant
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|EnrollmentTable
extends|extends
name|Composite
block|{
specifier|public
specifier|static
specifier|final
name|StudentSectioningMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningResources
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|StudentSectioningConstants
name|CONSTANTS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|StudentSectioningConstants
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sDF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|requestDateFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|DateTimeFormat
name|sTSF
init|=
name|DateTimeFormat
operator|.
name|getFormat
argument_list|(
name|CONSTANTS
operator|.
name|timeStampFormat
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Long
name|iOfferingId
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|SectioningServiceAsync
name|iSectioningService
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SectioningService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iEnrollmentPanel
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|iEnrollments
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
decl_stmt|;
specifier|private
name|Operation
name|iApprove
decl_stmt|,
name|iReject
decl_stmt|;
specifier|private
name|boolean
name|iOnline
decl_stmt|;
specifier|private
name|boolean
name|iShowFilter
init|=
literal|false
decl_stmt|;
specifier|public
name|EnrollmentTable
parameter_list|(
specifier|final
name|boolean
name|showHeader
parameter_list|,
name|boolean
name|online
parameter_list|)
block|{
name|this
argument_list|(
name|showHeader
argument_list|,
name|online
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EnrollmentTable
parameter_list|(
specifier|final
name|boolean
name|showHeader
parameter_list|,
name|boolean
name|online
parameter_list|,
name|boolean
name|showFilter
parameter_list|)
block|{
name|iOnline
operator|=
name|online
expr_stmt|;
name|iEnrollmentPanel
operator|=
operator|new
name|SimpleForm
argument_list|()
expr_stmt|;
name|iShowFilter
operator|=
name|showFilter
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|showHeader
condition|?
name|MESSAGES
operator|.
name|enrollmentsTable
argument_list|()
else|:
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addCollapsibleHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentCoursesDetails
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|==
literal|0
condition|)
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
name|showHeader
condition|?
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setTitleStyleName
argument_list|(
literal|"unitime3-HeaderTitle"
argument_list|)
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
if|if
condition|(
name|showHeader
condition|)
block|{
name|iEnrollmentPanel
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setMarginTop
argument_list|(
literal|10
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
name|iEnrollments
operator|=
operator|new
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
expr_stmt|;
name|iEnrollmentPanel
operator|.
name|addRow
argument_list|(
name|iEnrollments
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|showHeader
condition|)
name|iEnrollmentPanel
operator|.
name|addBottomRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"approve"
argument_list|,
name|MESSAGES
operator|.
name|buttonApproveSelectedEnrollments
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
condition|)
name|iApprove
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"reject"
argument_list|,
name|MESSAGES
operator|.
name|buttonRejectSelectedEnrollments
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
condition|)
name|iReject
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iEnrollmentPanel
argument_list|)
expr_stmt|;
name|iEnrollments
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingEnrollment
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|showStudentSchedule
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getStudent
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|showHeader
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|,
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|getTable
parameter_list|()
block|{
return|return
name|iEnrollments
return|;
block|}
specifier|public
name|UniTimeHeaderPanel
name|getHeader
parameter_list|()
block|{
return|return
name|iHeader
return|;
block|}
specifier|public
name|void
name|showStudentSchedule
parameter_list|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|Student
name|student
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|getEnrollment
argument_list|(
name|iOnline
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ClassAssignmentInterface
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ClassAssignmentInterface
name|result
parameter_list|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|WebTable
name|assignments
init|=
operator|new
name|WebTable
argument_list|()
decl_stmt|;
name|assignments
operator|.
name|setHeader
argument_list|(
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubject
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colSubpart
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"50px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colClass
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colLimit
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"60px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDays
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"50px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colStart
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colEnd
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colDate
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colRoom
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colInstructor
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"100px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colParent
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colNoteIcon
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"10px"
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|MESSAGES
operator|.
name|colCredit
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|"75px"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assignments
operator|.
name|setEmptyMessage
argument_list|(
name|MESSAGES
operator|.
name|emptySchedule
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
name|rows
init|=
operator|new
name|ArrayList
argument_list|<
name|WebTable
operator|.
name|Row
argument_list|>
argument_list|()
decl_stmt|;
name|float
name|totalCredit
init|=
literal|0f
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|CourseAssignment
name|course
range|:
name|result
operator|.
name|getCourseAssignments
argument_list|()
control|)
block|{
if|if
condition|(
name|course
operator|.
name|isAssigned
argument_list|()
condition|)
block|{
name|boolean
name|firstClazz
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|String
name|style
init|=
operator|(
name|firstClazz
operator|&&
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"top-border-dashed"
else|:
literal|""
operator|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
name|style
operator|+=
operator|(
name|clazz
operator|.
name|isInstructing
argument_list|()
condition|?
literal|" text-steelblue"
else|:
literal|" text-steelblue-italic"
operator|)
expr_stmt|;
specifier|final
name|WebTable
operator|.
name|Row
name|row
init|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|firstClazz
condition|?
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|()
else|:
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|(
name|clazz
operator|.
name|hasDistanceConflict
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|distantConflict
argument_list|()
argument_list|,
name|MESSAGES
operator|.
name|backToBackDistance
argument_list|(
name|clazz
operator|.
name|getBackToBackRooms
argument_list|()
argument_list|,
name|clazz
operator|.
name|getBackToBackDistance
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getRooms
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|)
argument_list|,
operator|new
name|WebTable
operator|.
name|InstructorCell
argument_list|(
name|clazz
operator|.
name|getInstructors
argument_list|()
argument_list|,
name|clazz
operator|.
name|getInstructorEmails
argument_list|()
argument_list|,
literal|", "
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getParentSection
argument_list|()
argument_list|)
argument_list|,
name|clazz
operator|.
name|hasNote
argument_list|()
condition|?
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|note
argument_list|()
argument_list|,
name|clazz
operator|.
name|getNote
argument_list|()
argument_list|,
literal|""
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|firstClazz
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|clazz
operator|.
name|isTeachingAssignment
argument_list|()
condition|)
name|totalCredit
operator|+=
name|clazz
operator|.
name|guessCreditCount
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|style
init|=
literal|"text-red"
operator|+
operator|(
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" top-border-dashed"
else|:
literal|""
operator|)
decl_stmt|;
name|WebTable
operator|.
name|Row
name|row
init|=
literal|null
decl_stmt|;
name|String
name|unassignedMessage
init|=
name|MESSAGES
operator|.
name|courseNotAssigned
argument_list|()
decl_stmt|;
if|if
condition|(
name|course
operator|.
name|hasEnrollmentMessage
argument_list|()
condition|)
name|unassignedMessage
operator|=
name|course
operator|.
name|getEnrollmentMessage
argument_list|()
expr_stmt|;
if|else if
condition|(
name|course
operator|.
name|getOverlaps
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|course
operator|.
name|getOverlaps
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|x
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|unassignedMessage
operator|.
name|isEmpty
argument_list|()
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithFirst
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|!
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithLast
argument_list|(
name|x
argument_list|)
expr_stmt|;
else|else
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictWithMiddle
argument_list|(
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
name|unassignedMessage
operator|+=
literal|", "
expr_stmt|;
block|}
if|if
condition|(
name|course
operator|.
name|getInstead
argument_list|()
operator|!=
literal|null
condition|)
name|unassignedMessage
operator|+=
name|MESSAGES
operator|.
name|conflictAssignedAlternative
argument_list|(
name|course
operator|.
name|getInstead
argument_list|()
argument_list|)
expr_stmt|;
name|unassignedMessage
operator|+=
literal|"."
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|isNotAvailable
argument_list|()
condition|)
block|{
if|if
condition|(
name|course
operator|.
name|isFull
argument_list|()
condition|)
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|courseIsFull
argument_list|()
expr_stmt|;
else|else
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|classNotAvailable
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|course
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|unassignedMessage
operator|=
name|MESSAGES
operator|.
name|courseLocked
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
operator|+
literal|" "
operator|+
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|clazz
range|:
name|course
operator|.
name|getClassAssignments
argument_list|()
control|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeSubject
argument_list|()
else|:
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|isFreeTime
argument_list|()
condition|?
name|MESSAGES
operator|.
name|freeTimeCourse
argument_list|()
else|:
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSubpart
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getSection
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getLimitString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDaysString
argument_list|(
name|CONSTANTS
operator|.
name|shortDays
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getStartString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getEndString
argument_list|(
name|CONSTANTS
operator|.
name|useAmPm
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|clazz
operator|.
name|getDatePattern
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|3
argument_list|,
literal|null
argument_list|)
argument_list|,
name|clazz
operator|.
name|getNote
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
literal|""
argument_list|)
else|:
operator|new
name|WebTable
operator|.
name|IconCell
argument_list|(
name|RESOURCES
operator|.
name|note
argument_list|()
argument_list|,
name|clazz
operator|.
name|getNote
argument_list|()
argument_list|,
literal|""
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|AbbvTextCell
argument_list|(
name|clazz
operator|.
name|getCredit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|row
operator|==
literal|null
condition|)
block|{
name|row
operator|=
operator|new
name|WebTable
operator|.
name|Row
argument_list|(
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getSubject
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|course
operator|.
name|getCourseNbr
argument_list|()
argument_list|)
argument_list|,
operator|new
name|WebTable
operator|.
name|Cell
argument_list|(
name|unassignedMessage
argument_list|,
literal|12
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|WebTable
operator|.
name|Cell
name|cell
range|:
name|row
operator|.
name|getCells
argument_list|()
control|)
name|cell
operator|.
name|setStyleName
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|row
operator|.
name|getCell
argument_list|(
name|row
operator|.
name|getNrCells
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|setStyleName
argument_list|(
literal|"text-gray"
operator|+
operator|(
operator|!
name|rows
operator|.
name|isEmpty
argument_list|()
condition|?
literal|" top-border-dashed"
else|:
literal|""
operator|)
argument_list|)
expr_stmt|;
name|rows
operator|.
name|add
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
name|WebTable
operator|.
name|Row
index|[]
name|rowArray
init|=
operator|new
name|WebTable
operator|.
name|Row
index|[
name|rows
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|WebTable
operator|.
name|Row
name|row
range|:
name|rows
control|)
name|rowArray
index|[
name|idx
operator|++
index|]
operator|=
name|row
expr_stmt|;
name|assignments
operator|.
name|setData
argument_list|(
name|rowArray
argument_list|)
expr_stmt|;
name|SimpleForm
name|form
init|=
operator|new
name|SimpleForm
argument_list|()
decl_stmt|;
name|form
operator|.
name|addRow
argument_list|(
name|assignments
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeHeaderPanel
name|buttons
init|=
operator|new
name|UniTimeHeaderPanel
argument_list|()
decl_stmt|;
name|form
operator|.
name|addBottomRow
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|form
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogEnrollments
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|totalCredit
operator|>
literal|0f
condition|)
name|buttons
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|totalCredit
argument_list|(
name|totalCredit
argument_list|)
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"registration"
argument_list|,
name|MESSAGES
operator|.
name|buttonRegistration
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|showCourseRequests
argument_list|(
name|student
argument_list|,
name|iOnline
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|setEnabled
argument_list|(
literal|"registration"
argument_list|,
name|student
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|isCanRegister
argument_list|()
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|addButton
argument_list|(
literal|"assistant"
argument_list|,
name|MESSAGES
operator|.
name|buttonAssistant
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|showStudentAssistant
argument_list|(
name|student
argument_list|,
name|iOnline
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
condition|)
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|setEnabled
argument_list|(
literal|"assistant"
argument_list|,
name|student
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|isCanUseAssistant
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOnline
condition|)
block|{
name|buttons
operator|.
name|addButton
argument_list|(
literal|"log"
argument_list|,
name|MESSAGES
operator|.
name|buttonChangeLog
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|loadingChangeLog
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|showChangeLog
argument_list|(
name|student
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
name|UniTimeNotifications
operator|.
name|error
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
condition|)
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|setEnabled
argument_list|(
literal|"log"
argument_list|,
name|student
operator|.
name|getSessionId
argument_list|()
operator|!=
literal|null
operator|&&
name|student
operator|.
name|isCanUseAssistant
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|buttons
operator|.
name|addButton
argument_list|(
literal|"close"
argument_list|,
name|MESSAGES
operator|.
name|buttonClose
argument_list|()
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|dialog
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|iEnrollments
operator|.
name|clearHover
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|/* 				buttons.showLoading(); 				if (iOnline) { 					iSectioningService.checkEligibility(iOnline, null, student.getId(), null, new AsyncCallback<EligibilityCheck>() { 						@Override 						public void onFailure(Throwable caught) { 							buttons.clearMessage(); 						} 						@Override 						public void onSuccess(EligibilityCheck result) { 							buttons.clearMessage(); 							buttons.setEnabled("assistant", result.hasFlag(EligibilityCheck.EligibilityFlag.CAN_USE_ASSISTANT)); 						} 					}); 				} else { 					buttons.setEnabled("assistant", true); 					buttons.clearMessage(); 				}*/
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|showStudentAssistant
parameter_list|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|Student
name|student
parameter_list|,
specifier|final
name|boolean
name|online
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|UserAuthenticationProvider
name|user
init|=
operator|new
name|UserAuthenticationProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|student
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|AcademicSessionProvider
name|session
init|=
operator|new
name|AcademicSessionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|student
operator|.
name|getSessionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAcademicSessionName
parameter_list|()
block|{
return|return
literal|"Current Session"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAcademicSessionChangeHandler
parameter_list|(
name|AcademicSessionChangeHandler
name|handler
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectSession
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSessionInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|StudentSectioningWidget
name|widget
init|=
operator|new
name|StudentSectioningWidget
argument_list|(
name|online
argument_list|,
name|session
argument_list|,
name|user
argument_list|,
name|StudentSectioningPage
operator|.
name|Mode
operator|.
name|SECTIONING
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iSectioningService
operator|.
name|logIn
argument_list|(
name|online
condition|?
literal|"LOOKUP"
else|:
literal|"BATCH"
argument_list|,
name|online
condition|?
name|student
operator|.
name|getExternalId
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|widget
operator|.
name|checkEligibility
argument_list|(
name|student
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EligibilityCheck
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EligibilityCheck
name|result
parameter_list|)
block|{
specifier|final
name|UniTimeDialogBox
name|d
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|d
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogAssistant
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|.
name|center
argument_list|()
expr_stmt|;
name|widget
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
name|d
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|showCourseRequests
parameter_list|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|Student
name|student
parameter_list|,
specifier|final
name|boolean
name|online
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|UserAuthenticationProvider
name|user
init|=
operator|new
name|UserAuthenticationProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|student
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
block|}
block|}
decl_stmt|;
name|AcademicSessionProvider
name|session
init|=
operator|new
name|AcademicSessionProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Long
name|getAcademicSessionId
parameter_list|()
block|{
return|return
name|student
operator|.
name|getSessionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAcademicSessionName
parameter_list|()
block|{
return|return
literal|"Current Session"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAcademicSessionChangeHandler
parameter_list|(
name|AcademicSessionChangeHandler
name|handler
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectSession
parameter_list|(
name|Long
name|sessionId
parameter_list|,
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|AcademicSessionInfo
name|getAcademicSessionInfo
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|StudentSectioningWidget
name|widget
init|=
operator|new
name|StudentSectioningWidget
argument_list|(
name|online
argument_list|,
name|session
argument_list|,
name|user
argument_list|,
name|StudentSectioningPage
operator|.
name|Mode
operator|.
name|REQUESTS
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iSectioningService
operator|.
name|logIn
argument_list|(
name|online
condition|?
literal|"LOOKUP"
else|:
literal|"BATCH"
argument_list|,
name|online
condition|?
name|student
operator|.
name|getExternalId
argument_list|()
else|:
name|String
operator|.
name|valueOf
argument_list|(
name|student
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|widget
operator|.
name|lastRequest
argument_list|(
name|student
operator|.
name|getSessionId
argument_list|()
argument_list|,
name|student
operator|.
name|getId
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|d
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|d
operator|.
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|d
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogRegistration
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|d
operator|.
name|center
argument_list|()
expr_stmt|;
name|widget
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
name|d
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|showChangeLog
parameter_list|(
specifier|final
name|ClassAssignmentInterface
operator|.
name|Student
name|student
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
name|callback
parameter_list|)
block|{
name|iSectioningService
operator|.
name|changeLog
argument_list|(
literal|"id:"
operator|+
name|student
operator|.
name|getExternalId
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|SectioningAction
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|callback
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|SectioningAction
argument_list|>
name|logs
parameter_list|)
block|{
if|if
condition|(
name|logs
operator|==
literal|null
operator|||
name|logs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|SectioningAction
argument_list|>
name|table
init|=
operator|new
name|UniTimeTable
argument_list|<
name|ClassAssignmentInterface
operator|.
name|SectioningAction
argument_list|>
argument_list|()
decl_stmt|;
name|table
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colOperation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colTimeStamp
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colResult
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colUser
argument_list|()
argument_list|)
argument_list|,
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|SectioningAction
name|log
range|:
name|logs
control|)
block|{
name|table
operator|.
name|addRow
argument_list|(
name|log
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getOperation
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|sTSF
operator|.
name|format
argument_list|(
name|log
operator|.
name|getTimeStamp
argument_list|()
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getResult
argument_list|()
argument_list|)
argument_list|,
operator|new
name|TopCell
argument_list|(
name|log
operator|.
name|getUser
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|log
operator|.
name|getUser
argument_list|()
argument_list|)
argument_list|,
operator|new
name|HTML
argument_list|(
name|log
operator|.
name|getMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|log
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|MouseClickListener
argument_list|<
name|ClassAssignmentInterface
operator|.
name|SectioningAction
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|TableEvent
argument_list|<
name|SectioningAction
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getProto
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|HTML
name|widget
init|=
operator|new
name|HTML
argument_list|(
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getProto
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ScrollPanel
name|scroll
init|=
operator|new
name|ScrollPanel
argument_list|(
name|widget
argument_list|)
decl_stmt|;
name|scroll
operator|.
name|setHeight
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
literal|0.8
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
operator|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogChangeMessage
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|UniTimeDialogBox
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|UniTimeDialogBox
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|widget
operator|.
name|getElement
argument_list|()
operator|.
name|getScrollHeight
argument_list|()
argument_list|,
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|*
literal|80
operator|/
literal|100
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|-
name|dialog
operator|.
name|getOffsetWidth
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|dialog
operator|.
name|getOffsetHeight
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|table
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|UniTimeDialogBox
name|dialog
init|=
operator|new
name|UniTimeDialogBox
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|ScrollPanel
name|scroll
init|=
operator|new
name|ScrollPanel
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|scroll
operator|.
name|setHeight
argument_list|(
operator|(
operator|(
name|int
operator|)
operator|(
literal|0.8
operator|*
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|)
operator|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|setStyleName
argument_list|(
literal|"unitime-ScrollPanel"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWidget
argument_list|(
name|scroll
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setText
argument_list|(
name|MESSAGES
operator|.
name|dialogChangeLog
argument_list|(
name|student
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setEscapeToHide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addOpenHandler
argument_list|(
operator|new
name|OpenHandler
argument_list|<
name|UniTimeDialogBox
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|UniTimeDialogBox
argument_list|>
name|event
parameter_list|)
block|{
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
name|scroll
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getScrollHeight
argument_list|()
argument_list|,
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|*
literal|80
operator|/
literal|100
argument_list|)
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setPopupPosition
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollLeft
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientWidth
argument_list|()
operator|-
name|dialog
operator|.
name|getOffsetWidth
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|Window
operator|.
name|getScrollTop
argument_list|()
operator|+
operator|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|dialog
operator|.
name|getOffsetHeight
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|table
operator|.
name|clearHover
argument_list|()
expr_stmt|;
name|RootPanel
operator|.
name|getBodyElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setOverflow
argument_list|(
name|Overflow
operator|.
name|AUTO
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|callback
operator|.
name|onSuccess
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|Number
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|Number
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|protected
name|void
name|refresh
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingId
operator|!=
literal|null
condition|)
block|{
name|iSectioningService
operator|.
name|canApprove
argument_list|(
name|iOfferingId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|Long
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|courseIdsToApprove
parameter_list|)
block|{
name|iSectioningService
operator|.
name|listEnrollments
argument_list|(
name|iOfferingId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToLoadEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentCoursesDetails
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|iHeader
operator|.
name|setMessage
argument_list|(
name|iOfferingId
operator|>=
literal|0
condition|?
name|MESSAGES
operator|.
name|offeringHasNoEnrollments
argument_list|()
else|:
name|MESSAGES
operator|.
name|classHasNoEnrollments
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|result
argument_list|,
name|courseIdsToApprove
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|>
literal|2
condition|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
condition|;
name|row
operator|++
control|)
block|{
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVisible
argument_list|(
name|row
argument_list|,
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
name|courseIdsToApprove
operator|!=
literal|null
operator|&&
operator|!
name|courseIdsToApprove
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
name|courseIdsToApprove
operator|!=
literal|null
operator|&&
operator|!
name|courseIdsToApprove
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
name|iEnrollments
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|iEnrollments
operator|.
name|clear
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|boolean
name|filter
parameter_list|(
name|SectioningCookie
operator|.
name|EnrollmentFilter
name|f
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|f
condition|)
block|{
case|case
name|ALL
case|:
return|return
literal|false
return|;
case|case
name|ENROLLED
case|:
return|return
operator|!
name|e
operator|.
name|hasClasses
argument_list|()
return|;
case|case
name|WAIT_LISTED
case|:
return|return
name|e
operator|.
name|hasClasses
argument_list|()
operator|||
operator|!
name|e
operator|.
name|isWaitList
argument_list|()
return|;
case|case
name|NOT_ENROLLED
case|:
return|return
name|e
operator|.
name|hasClasses
argument_list|()
operator|||
name|e
operator|.
name|isWaitList
argument_list|()
return|;
default|default:
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|populate
parameter_list|(
specifier|final
name|List
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
name|enrollments
parameter_list|,
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|courseIdsCanApprove
parameter_list|)
block|{
name|List
argument_list|<
name|UniTimeTableHeader
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|enrolled
init|=
literal|0
decl_stmt|;
name|int
name|waitlisted
init|=
literal|0
decl_stmt|;
name|int
name|unassigned
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|hasClasses
argument_list|()
condition|)
name|enrolled
operator|++
expr_stmt|;
if|else if
condition|(
name|enrollment
operator|.
name|isWaitList
argument_list|()
condition|)
name|waitlisted
operator|++
expr_stmt|;
else|else
name|unassigned
operator|++
expr_stmt|;
block|}
name|SectioningCookie
operator|.
name|EnrollmentFilter
name|f
init|=
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|ALL
decl_stmt|;
name|boolean
name|showFilter
init|=
operator|(
name|iShowFilter
operator|&&
name|iOfferingId
operator|!=
literal|null
operator|&&
name|iOfferingId
operator|>
literal|0
operator|)
decl_stmt|;
if|if
condition|(
name|showFilter
condition|)
block|{
name|f
operator|=
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentFilter
argument_list|()
expr_stmt|;
if|if
condition|(
name|f
operator|==
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|ALL
condition|)
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|studentsTable
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|enrollmentTableFilter
argument_list|(
name|CONSTANTS
operator|.
name|enrollmentFilterValues
argument_list|()
index|[
name|f
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|enrollments
argument_list|,
operator|new
name|Comparator
argument_list|<
name|ClassAssignmentInterface
operator|.
name|Enrollment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e1
parameter_list|,
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|boolean
name|hasExtId
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
operator|!
name|filter
argument_list|(
name|f
argument_list|,
name|e
argument_list|)
operator|&&
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|isCanShowExternalId
argument_list|()
condition|)
block|{
name|hasExtId
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|UniTimeTableHeader
name|hExtId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasExtId
condition|)
block|{
name|hExtId
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudentExternalId
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hExtId
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hExtId
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|EXTERNAL_ID
argument_list|,
name|MESSAGES
operator|.
name|colStudentExternalId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hStudent
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
decl_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hStudent
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hStudent
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|STUDENT
argument_list|,
name|MESSAGES
operator|.
name|colStudent
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|crosslist
init|=
literal|false
decl_stmt|;
name|Long
name|courseId
init|=
literal|null
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|filter
argument_list|(
name|f
argument_list|,
name|e
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|courseId
operator|==
literal|null
condition|)
name|courseId
operator|=
name|e
operator|.
name|getCourseId
argument_list|()
expr_stmt|;
if|else if
condition|(
name|e
operator|.
name|getCourseId
argument_list|()
operator|!=
name|courseId
condition|)
block|{
name|crosslist
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|UniTimeTableHeader
name|hCourse
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|crosslist
condition|)
block|{
name|hCourse
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hCourse
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hStudent
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|COURSE
argument_list|,
name|MESSAGES
operator|.
name|colCourse
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|hasPriority
init|=
literal|false
decl_stmt|,
name|hasArea
init|=
literal|false
decl_stmt|,
name|hasMajor
init|=
literal|false
decl_stmt|,
name|hasGroup
init|=
literal|false
decl_stmt|,
name|hasAcmd
init|=
literal|false
decl_stmt|,
name|hasAlternative
init|=
literal|false
decl_stmt|,
name|hasReservation
init|=
literal|false
decl_stmt|,
name|hasRequestedDate
init|=
literal|false
decl_stmt|,
name|hasEnrolledDate
init|=
literal|false
decl_stmt|,
name|hasConflict
init|=
literal|false
decl_stmt|,
name|hasMessage
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|filter
argument_list|(
name|f
argument_list|,
name|e
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|e
operator|.
name|getPriority
argument_list|()
operator|>
literal|0
condition|)
name|hasPriority
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|isAlternative
argument_list|()
condition|)
name|hasAlternative
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasArea
argument_list|()
condition|)
name|hasArea
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasMajor
argument_list|()
condition|)
name|hasMajor
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasGroup
argument_list|()
condition|)
name|hasGroup
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|hasAccommodation
argument_list|()
condition|)
name|hasAcmd
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getReservation
argument_list|()
operator|!=
literal|null
condition|)
name|hasReservation
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getRequestedDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasRequestedDate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|getEnrolledDate
argument_list|()
operator|!=
literal|null
condition|)
name|hasEnrolledDate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasConflict
argument_list|()
condition|)
name|hasConflict
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|e
operator|.
name|hasEnrollmentMessage
argument_list|()
condition|)
name|hasMessage
operator|=
literal|true
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hPriority
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasPriority
condition|)
block|{
name|hPriority
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colPriority
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hPriority
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hPriority
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|PRIORITY
argument_list|,
name|MESSAGES
operator|.
name|colPriority
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hAlternative
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasAlternative
condition|)
block|{
name|hAlternative
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAlternative
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hAlternative
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hAlternative
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|ALTERNATIVE
argument_list|,
name|MESSAGES
operator|.
name|colAlternative
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hArea
init|=
literal|null
decl_stmt|,
name|hClasf
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasArea
condition|)
block|{
name|hArea
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hArea
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hArea
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|AREA
argument_list|,
name|MESSAGES
operator|.
name|colArea
argument_list|()
argument_list|)
expr_stmt|;
name|hClasf
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hClasf
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hClasf
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CLASSIFICATION
argument_list|,
name|MESSAGES
operator|.
name|colClassification
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hMajor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMajor
condition|)
block|{
name|hMajor
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hMajor
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hMajor
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|MAJOR
argument_list|,
name|MESSAGES
operator|.
name|colMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hGroup
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasGroup
condition|)
block|{
name|hGroup
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hGroup
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hGroup
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|GROUP
argument_list|,
name|MESSAGES
operator|.
name|colGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hAccmd
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasAcmd
condition|)
block|{
name|hAccmd
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colAccommodation
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hAccmd
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hAccmd
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|ACCOMODATION
argument_list|,
name|MESSAGES
operator|.
name|colAccommodation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hReservation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasReservation
condition|)
block|{
name|hReservation
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hReservation
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hReservation
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|RESERVATION
argument_list|,
name|MESSAGES
operator|.
name|colReservation
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|subparts
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
range|:
name|enrollments
control|)
block|{
if|if
condition|(
operator|!
name|filter
argument_list|(
name|f
argument_list|,
name|e
argument_list|)
operator|&&
name|e
operator|.
name|hasClasses
argument_list|()
condition|)
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|ClassAssignment
name|c
range|:
name|e
operator|.
name|getClasses
argument_list|()
control|)
name|subparts
operator|.
name|add
argument_list|(
name|c
operator|.
name|getSubpart
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|UniTimeTableHeader
argument_list|>
name|hSubparts
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|UniTimeTableHeader
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|subpart
range|:
name|subparts
control|)
block|{
name|UniTimeTableHeader
name|hSubpart
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|subpart
argument_list|)
decl_stmt|;
name|hSubparts
operator|.
name|put
argument_list|(
name|subpart
argument_list|,
name|hSubpart
argument_list|)
expr_stmt|;
specifier|final
name|int
name|col
init|=
literal|1
operator|+
operator|(
name|hasExtId
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|crosslist
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasPriority
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasAlternative
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasArea
condition|?
literal|2
else|:
literal|0
operator|)
operator|+
operator|(
name|hasMajor
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasGroup
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasAcmd
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|hasReservation
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|hSubpart
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setShowClassNumbers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|iEnrollments
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
operator|||
operator|!
name|e
operator|.
name|hasClasses
argument_list|()
condition|)
continue|continue;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|subpart
range|:
name|subparts
control|)
block|{
operator|(
operator|(
name|HTML
operator|)
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
operator|+
name|idx
argument_list|)
operator|)
operator|.
name|setHTML
argument_list|(
name|e
operator|.
name|getClasses
argument_list|(
name|subpart
argument_list|,
literal|", "
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowClassNumbers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|showExternalIds
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hSubpart
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setShowClassNumbers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|iEnrollments
operator|.
name|getData
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
operator|||
operator|!
name|e
operator|.
name|hasClasses
argument_list|()
condition|)
continue|continue;
name|int
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|subpart
range|:
name|subparts
control|)
block|{
operator|(
operator|(
name|HTML
operator|)
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|col
operator|+
name|idx
argument_list|)
operator|)
operator|.
name|setHTML
argument_list|(
name|e
operator|.
name|getClasses
argument_list|(
name|subpart
argument_list|,
literal|", "
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|idx
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
operator|!
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowClassNumbers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|showClassNumbers
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hSubpart
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hSubpart
argument_list|,
name|subpart
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hRequestTS
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasRequestedDate
condition|)
block|{
name|hRequestTS
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hRequestTS
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hRequestTS
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|REQUEST_TS
argument_list|,
name|MESSAGES
operator|.
name|colRequestTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hEnrollmentTS
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasEnrolledDate
condition|)
block|{
name|hEnrollmentTS
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hEnrollmentTS
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hEnrollmentTS
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|ENROLLMENT_TS
argument_list|,
name|MESSAGES
operator|.
name|colEnrollmentTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hMessage
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasMessage
condition|)
block|{
name|hMessage
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colMessage
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hMessage
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hMessage
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|MESSAGE
argument_list|,
name|MESSAGES
operator|.
name|colMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hConflictType
init|=
literal|null
decl_stmt|,
name|hConflictName
init|=
literal|null
decl_stmt|,
name|hConflictDate
init|=
literal|null
decl_stmt|,
name|hConflictTime
init|=
literal|null
decl_stmt|,
name|hConflictRoom
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|hasConflict
condition|)
block|{
name|hConflictType
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictType
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConflictType
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hConflictType
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CONFLICT_TYPE
argument_list|,
name|MESSAGES
operator|.
name|colConflictType
argument_list|()
argument_list|)
expr_stmt|;
name|hConflictName
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictName
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConflictName
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hConflictName
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CONFLICT_NAME
argument_list|,
name|MESSAGES
operator|.
name|colConflictName
argument_list|()
argument_list|)
expr_stmt|;
name|hConflictDate
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictDate
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConflictDate
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hConflictDate
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CONFLICT_DATE
argument_list|,
name|MESSAGES
operator|.
name|colConflictDate
argument_list|()
argument_list|)
expr_stmt|;
name|hConflictTime
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictTime
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConflictTime
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hConflictTime
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CONFLICT_TIME
argument_list|,
name|MESSAGES
operator|.
name|colConflictTime
argument_list|()
argument_list|)
expr_stmt|;
name|hConflictRoom
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colConflictRoom
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hConflictRoom
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hConflictRoom
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|CONFLICT_ROOM
argument_list|,
name|MESSAGES
operator|.
name|colConflictRoom
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|UniTimeTableHeader
name|hApproved
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|courseIdsCanApprove
operator|!=
literal|null
operator|&&
operator|!
name|courseIdsCanApprove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hApproved
operator|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|MESSAGES
operator|.
name|colApproved
argument_list|()
argument_list|)
expr_stmt|;
name|hApproved
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
condition|)
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|!
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|selectAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hApproved
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
condition|)
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|setValue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|clearAll
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iApprove
operator|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
name|studentIds
operator|.
name|add
argument_list|(
name|iEnrollments
operator|.
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iSectioningService
operator|.
name|approveEnrollments
argument_list|(
name|iOfferingId
argument_list|,
name|studentIds
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|String
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|String
index|[]
name|approval
init|=
name|result
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
name|iEnrollments
operator|.
name|replaceWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|,
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|approval
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
operator|new
name|Date
argument_list|(
name|Long
operator|.
name|valueOf
argument_list|(
name|approval
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|approval
index|[
literal|2
index|]
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToApproveEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|approveSelectedEnrollments
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|hApproved
operator|.
name|addOperation
argument_list|(
name|iApprove
argument_list|)
expr_stmt|;
name|iReject
operator|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|studentIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
name|studentIds
operator|.
name|add
argument_list|(
name|iEnrollments
operator|.
name|getData
argument_list|(
name|row
argument_list|)
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|iHeader
operator|.
name|showLoading
argument_list|()
expr_stmt|;
name|iSectioningService
operator|.
name|rejectEnrollments
argument_list|(
name|iOfferingId
argument_list|,
name|studentIds
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Boolean
name|result
parameter_list|)
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
name|iEnrollments
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
else|else
name|row
operator|++
expr_stmt|;
block|}
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|failedToApproveEnrollments
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|iEnrollments
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|iEnrollments
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|w
operator|)
operator|.
name|getValue
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|rejectSelectedEnrollments
argument_list|()
return|;
block|}
block|}
expr_stmt|;
name|hApproved
operator|.
name|addOperation
argument_list|(
name|iReject
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|hApproved
argument_list|)
expr_stmt|;
name|addSortOperation
argument_list|(
name|hApproved
argument_list|,
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|APPROVED
argument_list|,
name|MESSAGES
operator|.
name|colApproved
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iApprove
operator|=
literal|null
expr_stmt|;
name|iReject
operator|=
literal|null
expr_stmt|;
block|}
name|iEnrollments
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|boolean
name|suffix
init|=
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowClassNumbers
argument_list|()
decl_stmt|;
for|for
control|(
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|enrollment
range|:
name|enrollments
control|)
block|{
if|if
condition|(
name|filter
argument_list|(
name|f
argument_list|,
name|enrollment
argument_list|)
condition|)
continue|continue;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasExtId
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|isCanShowExternalId
argument_list|()
condition|?
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|crosslist
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getCourseName
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPriority
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Number
argument_list|(
name|enrollment
operator|.
name|getPriority
argument_list|()
operator|<=
literal|0
condition|?
literal|"&nbsp;"
else|:
name|MESSAGES
operator|.
name|priority
argument_list|(
name|enrollment
operator|.
name|getPriority
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAlternative
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|enrollment
operator|.
name|getAlternative
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasArea
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasMajor
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasGroup
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasAcmd
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccommodation
argument_list|(
literal|"<br>"
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasReservation
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|enrollment
operator|.
name|getReservation
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subparts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|hasClasses
argument_list|()
condition|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|WarningLabel
argument_list|(
name|enrollment
operator|.
name|isWaitList
argument_list|()
condition|?
name|MESSAGES
operator|.
name|courseWaitListed
argument_list|()
else|:
name|MESSAGES
operator|.
name|courseNotEnrolled
argument_list|()
argument_list|,
name|subparts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
for|for
control|(
name|String
name|subpart
range|:
name|subparts
control|)
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getClasses
argument_list|(
name|subpart
argument_list|,
literal|", "
argument_list|,
name|suffix
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasRequestedDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasEnrolledDate
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
literal|"&nbsp;"
else|:
name|sDF
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasMessage
condition|)
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|enrollment
operator|.
name|hasEnrollmentMessage
argument_list|()
condition|?
name|enrollment
operator|.
name|getEnrollmentMessage
argument_list|()
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"<br>"
argument_list|)
else|:
literal|"&nbsp;"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasConflict
condition|)
block|{
if|if
condition|(
name|enrollment
operator|.
name|hasConflict
argument_list|()
condition|)
block|{
name|String
name|name
init|=
literal|""
decl_stmt|,
name|type
init|=
literal|""
decl_stmt|,
name|date
init|=
literal|""
decl_stmt|,
name|time
init|=
literal|""
decl_stmt|,
name|room
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Conflict
name|conflict
range|:
name|enrollment
operator|.
name|getConflicts
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|+=
literal|"<br>"
expr_stmt|;
name|type
operator|+=
literal|"<br>"
expr_stmt|;
name|date
operator|+=
literal|"<br>"
expr_stmt|;
name|time
operator|+=
literal|"<br>"
expr_stmt|;
name|room
operator|+=
literal|"<br>"
expr_stmt|;
block|}
if|if
condition|(
name|conflict
operator|.
name|hasStyle
argument_list|()
condition|)
block|{
name|name
operator|+=
literal|"<span class='"
operator|+
name|conflict
operator|.
name|getStyle
argument_list|()
operator|+
literal|"'>"
expr_stmt|;
name|type
operator|+=
literal|"<span class='"
operator|+
name|conflict
operator|.
name|getStyle
argument_list|()
operator|+
literal|"'>"
expr_stmt|;
name|date
operator|+=
literal|"<span class='"
operator|+
name|conflict
operator|.
name|getStyle
argument_list|()
operator|+
literal|"'>"
expr_stmt|;
name|time
operator|+=
literal|"<span class='"
operator|+
name|conflict
operator|.
name|getStyle
argument_list|()
operator|+
literal|"'>"
expr_stmt|;
name|room
operator|+=
literal|"<span class='"
operator|+
name|conflict
operator|.
name|getStyle
argument_list|()
operator|+
literal|"'>"
expr_stmt|;
block|}
name|name
operator|+=
name|conflict
operator|.
name|getName
argument_list|()
expr_stmt|;
name|type
operator|+=
name|conflict
operator|.
name|getType
argument_list|()
expr_stmt|;
name|date
operator|+=
name|conflict
operator|.
name|getDate
argument_list|()
expr_stmt|;
name|time
operator|+=
name|conflict
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|room
operator|+=
name|conflict
operator|.
name|getRoom
argument_list|()
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|hasStyle
argument_list|()
condition|)
block|{
name|name
operator|+=
literal|"</span>"
expr_stmt|;
name|type
operator|+=
literal|"</span>"
expr_stmt|;
name|date
operator|+=
literal|"</span>"
expr_stmt|;
name|time
operator|+=
literal|"</span>"
expr_stmt|;
name|room
operator|+=
literal|"</span>"
expr_stmt|;
block|}
block|}
name|HTML
name|html
init|=
operator|new
name|HTML
argument_list|(
name|type
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|=
operator|new
name|HTML
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|=
operator|new
name|HTML
argument_list|(
name|date
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|=
operator|new
name|HTML
argument_list|(
name|time
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|=
operator|new
name|HTML
argument_list|(
name|room
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|html
operator|.
name|addStyleName
argument_list|(
literal|"conflict"
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|courseIdsCanApprove
operator|!=
literal|null
operator|&&
operator|!
name|courseIdsCanApprove
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|enrollment
operator|.
name|hasClasses
argument_list|()
condition|)
block|{
comment|// not enrolled
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|courseIdsCanApprove
operator|.
name|contains
argument_list|(
name|enrollment
operator|.
name|getCourseId
argument_list|()
argument_list|)
condition|)
block|{
comment|// cannot approve this course
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|enrollment
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// not yet approved
name|CheckBox
name|ch
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|ch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|event
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"approve"
argument_list|,
name|iApprove
operator|!=
literal|null
operator|&&
name|iApprove
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"reject"
argument_list|,
name|iReject
operator|!=
literal|null
operator|&&
name|iReject
operator|.
name|isApplicable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// already approved
name|line
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
name|MESSAGES
operator|.
name|approval
argument_list|(
name|sDF
operator|.
name|format
argument_list|(
name|enrollment
operator|.
name|getApprovedDate
argument_list|()
argument_list|)
argument_list|,
name|enrollment
operator|.
name|getApprovedBy
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|iEnrollments
operator|.
name|addRow
argument_list|(
name|enrollment
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setVerticalAlign
argument_list|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|,
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Widget
argument_list|>
name|footer
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|enrolled
operator|>
literal|0
condition|)
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalEnrolled
argument_list|(
name|enrolled
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|waitlisted
operator|>
literal|0
condition|)
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalWaitListed
argument_list|(
name|waitlisted
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unassigned
operator|>
literal|0
condition|)
name|footer
operator|.
name|add
argument_list|(
operator|new
name|TotalLabel
argument_list|(
name|MESSAGES
operator|.
name|totalNotEnrolled
argument_list|(
name|unassigned
operator|+
name|waitlisted
argument_list|)
argument_list|,
name|header
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|showFilter
condition|)
block|{
name|FilterRow
name|filter
init|=
operator|new
name|FilterRow
argument_list|(
name|header
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|filter
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|MESSAGES
operator|.
name|filter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|ListBox
name|box
init|=
operator|new
name|ListBox
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SectioningCookie
operator|.
name|EnrollmentFilter
name|x
init|=
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|box
operator|.
name|addItem
argument_list|(
name|CONSTANTS
operator|.
name|enrollmentFilterValues
argument_list|()
index|[
name|i
index|]
argument_list|,
name|x
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|setSelectedIndex
argument_list|(
name|f
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentCoursesDetails
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentFilter
argument_list|(
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|valueOf
argument_list|(
name|box
operator|.
name|getValue
argument_list|(
name|box
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|enrollments
argument_list|,
name|courseIdsCanApprove
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|filter
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|footer
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|f
operator|==
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|ALL
condition|)
name|iEnrollments
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|EmptyLabel
argument_list|(
name|MESSAGES
operator|.
name|offeringHasNoEnrollments
argument_list|()
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|header
operator|.
name|size
argument_list|()
argument_list|,
name|footer
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iEnrollments
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
operator|new
name|EmptyLabel
argument_list|(
name|MESSAGES
operator|.
name|offeringHasNoEnrollmentsOfType
argument_list|(
name|CONSTANTS
operator|.
name|enrollmentFilterValues
argument_list|()
index|[
name|f
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|header
operator|.
name|size
argument_list|()
argument_list|,
name|footer
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|footer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|footer
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|span
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|header
operator|.
name|size
argument_list|()
operator|/
name|footer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Widget
name|w
range|:
name|footer
control|)
operator|(
operator|(
name|SetColSpan
operator|)
name|w
operator|)
operator|.
name|setColSpan
argument_list|(
name|span
argument_list|)
expr_stmt|;
operator|(
operator|(
name|SetColSpan
operator|)
name|footer
operator|.
name|get
argument_list|(
name|footer
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|setColSpan
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|header
operator|.
name|size
argument_list|()
operator|-
operator|(
name|footer
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
operator|*
name|span
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|row
init|=
name|iEnrollments
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|footer
argument_list|)
decl_stmt|;
if|if
condition|(
name|showFilter
condition|)
name|iEnrollments
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setHorizontalAlignment
argument_list|(
name|row
argument_list|,
name|footer
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|showFilter
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|values
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|SectioningCookie
operator|.
name|EnrollmentFilter
name|x
init|=
name|SectioningCookie
operator|.
name|EnrollmentFilter
operator|.
name|values
argument_list|()
index|[
name|i
index|]
decl_stmt|;
name|Operation
name|op
init|=
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentFilter
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|clear
argument_list|()
expr_stmt|;
name|populate
argument_list|(
name|enrollments
argument_list|,
name|courseIdsCanApprove
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
name|x
operator|.
name|ordinal
argument_list|()
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|enrollmentTableFilter
argument_list|(
name|CONSTANTS
operator|.
name|enrollmentFilterValues
argument_list|()
index|[
name|x
operator|.
name|ordinal
argument_list|()
index|]
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|UniTimeTableHeader
name|h
range|:
name|header
control|)
name|h
operator|.
name|addOperation
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentSortBy
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|boolean
name|asc
init|=
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentSortBy
argument_list|()
operator|>
literal|0
decl_stmt|;
name|EnrollmentComparator
operator|.
name|SortBy
name|sort
init|=
name|EnrollmentComparator
operator|.
name|SortBy
operator|.
name|values
argument_list|()
index|[
name|Math
operator|.
name|abs
argument_list|(
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentSortBy
argument_list|()
argument_list|)
operator|-
literal|1
index|]
decl_stmt|;
name|UniTimeTableHeader
name|h
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|sort
condition|)
block|{
case|case
name|ACCOMODATION
case|:
name|h
operator|=
name|hAccmd
expr_stmt|;
break|break;
case|case
name|ALTERNATIVE
case|:
name|h
operator|=
name|hAlternative
expr_stmt|;
break|break;
case|case
name|APPROVED
case|:
name|h
operator|=
name|hApproved
expr_stmt|;
break|break;
case|case
name|AREA
case|:
name|h
operator|=
name|hArea
expr_stmt|;
break|break;
case|case
name|CLASSIFICATION
case|:
name|h
operator|=
name|hClasf
expr_stmt|;
break|break;
case|case
name|CONFLICT_DATE
case|:
name|h
operator|=
name|hConflictDate
expr_stmt|;
break|break;
case|case
name|CONFLICT_NAME
case|:
name|h
operator|=
name|hConflictName
expr_stmt|;
break|break;
case|case
name|CONFLICT_ROOM
case|:
name|h
operator|=
name|hConflictRoom
expr_stmt|;
break|break;
case|case
name|CONFLICT_TIME
case|:
name|h
operator|=
name|hConflictTime
expr_stmt|;
break|break;
case|case
name|CONFLICT_TYPE
case|:
name|h
operator|=
name|hConflictType
expr_stmt|;
break|break;
case|case
name|COURSE
case|:
name|h
operator|=
name|hCourse
expr_stmt|;
break|break;
case|case
name|ENROLLMENT_TS
case|:
name|h
operator|=
name|hEnrollmentTS
expr_stmt|;
break|break;
case|case
name|EXTERNAL_ID
case|:
name|h
operator|=
name|hExtId
expr_stmt|;
break|break;
case|case
name|GROUP
case|:
name|h
operator|=
name|hGroup
expr_stmt|;
break|break;
case|case
name|MAJOR
case|:
name|h
operator|=
name|hMajor
expr_stmt|;
break|break;
case|case
name|MESSAGE
case|:
name|h
operator|=
name|hMessage
expr_stmt|;
break|break;
case|case
name|PRIORITY
case|:
name|h
operator|=
name|hPriority
expr_stmt|;
break|break;
case|case
name|REQUEST_TS
case|:
name|h
operator|=
name|hRequestTS
expr_stmt|;
break|break;
case|case
name|RESERVATION
case|:
name|h
operator|=
name|hReservation
expr_stmt|;
break|break;
case|case
name|STUDENT
case|:
name|h
operator|=
name|hStudent
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
name|iEnrollments
operator|.
name|sort
argument_list|(
name|h
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|sort
argument_list|)
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|subpart
init|=
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentSortBySubpart
argument_list|()
decl_stmt|;
if|if
condition|(
name|subpart
operator|!=
literal|null
operator|&&
operator|!
name|subpart
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
name|asc
init|=
operator|!
name|subpart
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
name|UniTimeTableHeader
name|h
init|=
name|hSubparts
operator|.
name|get
argument_list|(
name|asc
condition|?
name|subpart
else|:
name|subpart
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|h
operator|!=
literal|null
condition|)
name|iEnrollments
operator|.
name|sort
argument_list|(
name|h
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|asc
condition|?
name|subpart
else|:
name|subpart
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|asc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
interface|interface
name|SetColSpan
extends|extends
name|HasColSpan
block|{
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|TotalLabel
extends|extends
name|HTML
implements|implements
name|SetColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|TotalLabel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-TotalRow"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|WarningLabel
extends|extends
name|HTML
implements|implements
name|SetColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|WarningLabel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"text-red"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|EmptyLabel
extends|extends
name|HTML
implements|implements
name|SetColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|EmptyLabel
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"text-gray"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FilterRow
extends|extends
name|HorizontalPanel
implements|implements
name|SetColSpan
implements|,
name|HasStyleName
block|{
specifier|private
name|int
name|iColSpan
decl_stmt|;
specifier|public
name|FilterRow
parameter_list|(
name|int
name|colspan
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|iColSpan
operator|=
name|colspan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setColSpan
parameter_list|(
name|int
name|colSpan
parameter_list|)
block|{
name|iColSpan
operator|=
name|colSpan
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColSpan
parameter_list|()
block|{
return|return
name|iColSpan
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStyleName
parameter_list|()
block|{
return|return
literal|"unitime-TotalRow"
return|;
block|}
block|}
specifier|public
name|void
name|insert
parameter_list|(
specifier|final
name|RootPanel
name|panel
parameter_list|)
block|{
name|iOfferingId
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|getInnerText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iOfferingId
operator|>=
literal|0
operator|&&
name|iShowFilter
condition|)
name|iHeader
operator|.
name|setHeaderTitle
argument_list|(
name|MESSAGES
operator|.
name|studentsTable
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getEnrollmentCoursesDetails
argument_list|()
condition|)
block|{
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|clear
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|setCollapsible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|setInnerText
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setId
parameter_list|(
name|Long
name|id
parameter_list|)
block|{
name|iOfferingId
operator|=
name|id
expr_stmt|;
block|}
specifier|public
name|Long
name|getId
parameter_list|()
block|{
return|return
name|iOfferingId
return|;
block|}
specifier|public
name|void
name|scrollIntoView
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|int
name|r
init|=
literal|1
init|;
name|r
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|iEnrollments
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
operator|&&
name|iEnrollments
operator|.
name|getData
argument_list|(
name|r
argument_list|)
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
block|{
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|r
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ReservationClickedEvent
block|{
specifier|private
name|ReservationInterface
name|iReservation
decl_stmt|;
specifier|public
name|ReservationClickedEvent
parameter_list|(
name|ReservationInterface
name|reservation
parameter_list|)
block|{
name|iReservation
operator|=
name|reservation
expr_stmt|;
block|}
specifier|public
name|ReservationInterface
name|getReservation
parameter_list|()
block|{
return|return
name|iReservation
return|;
block|}
block|}
specifier|public
interface|interface
name|ReservationClickHandler
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ReservationClickedEvent
name|evt
parameter_list|)
function_decl|;
block|}
specifier|public
name|void
name|select
parameter_list|(
name|Long
name|studentId
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iEnrollments
operator|.
name|getRowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ClassAssignmentInterface
operator|.
name|Enrollment
name|e
init|=
name|iEnrollments
operator|.
name|getData
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|e
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|==
name|studentId
condition|)
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|i
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"unitime-TableRowSelected"
operator|.
name|equals
argument_list|(
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|iEnrollments
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|i
argument_list|,
literal|"unitime-TableRowSelected"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|TopCell
extends|extends
name|Label
implements|implements
name|HasVerticalCellAlignment
block|{
name|TopCell
parameter_list|(
name|String
name|cell
parameter_list|)
block|{
name|super
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|VerticalAlignmentConstant
name|getVerticalCellAlignment
parameter_list|()
block|{
return|return
name|HasVerticalAlignment
operator|.
name|ALIGN_TOP
return|;
block|}
block|}
specifier|protected
name|void
name|addSortOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|EnrollmentComparator
operator|.
name|SortBy
name|sort
parameter_list|,
specifier|final
name|String
name|column
parameter_list|)
block|{
name|header
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
name|header
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|sort
argument_list|)
argument_list|)
expr_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentSortBy
argument_list|(
name|header
operator|.
name|getOrder
argument_list|()
condition|?
literal|1
operator|+
name|sort
operator|.
name|ordinal
argument_list|()
else|:
operator|-
literal|1
operator|-
name|sort
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|column
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addSortOperation
parameter_list|(
specifier|final
name|UniTimeTableHeader
name|header
parameter_list|,
specifier|final
name|String
name|subpart
parameter_list|)
block|{
name|header
operator|.
name|addOperation
argument_list|(
operator|new
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|iEnrollments
operator|.
name|sort
argument_list|(
name|header
argument_list|,
operator|new
name|EnrollmentComparator
argument_list|(
name|subpart
argument_list|)
argument_list|)
expr_stmt|;
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|setEnrollmentSortBySubpart
argument_list|(
name|header
operator|.
name|getOrder
argument_list|()
condition|?
name|subpart
else|:
literal|"-"
operator|+
name|subpart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|sortBy
argument_list|(
name|subpart
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|EnrollmentComparator
implements|implements
name|Comparator
argument_list|<
name|Enrollment
argument_list|>
block|{
specifier|public
enum|enum
name|SortBy
block|{
name|EXTERNAL_ID
block|,
name|STUDENT
block|,
name|COURSE
block|,
name|PRIORITY
block|,
name|ALTERNATIVE
block|,
name|AREA
block|,
name|CLASSIFICATION
block|,
name|MAJOR
block|,
name|GROUP
block|,
name|ACCOMODATION
block|,
name|RESERVATION
block|,
name|REQUEST_TS
block|,
name|ENROLLMENT_TS
block|,
name|MESSAGE
block|,
name|CONFLICT_TYPE
block|,
name|CONFLICT_NAME
block|,
name|CONFLICT_DATE
block|,
name|CONFLICT_TIME
block|,
name|CONFLICT_ROOM
block|,
name|APPROVED
block|, 			; 		}
specifier|private
name|SortBy
name|iSortBy
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|iSubpart
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iShowClassNumbers
init|=
literal|true
decl_stmt|;
specifier|public
name|EnrollmentComparator
parameter_list|(
name|SortBy
name|sortBy
parameter_list|)
block|{
name|iSortBy
operator|=
name|sortBy
expr_stmt|;
block|}
specifier|public
name|EnrollmentComparator
parameter_list|(
name|String
name|subpart
parameter_list|)
block|{
name|iSubpart
operator|=
name|subpart
expr_stmt|;
name|iShowClassNumbers
operator|=
name|SectioningCookie
operator|.
name|getInstance
argument_list|()
operator|.
name|getShowClassNumbers
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|doCompare
parameter_list|(
name|Conflict
name|c1
parameter_list|,
name|Conflict
name|c2
parameter_list|)
block|{
switch|switch
condition|(
name|iSortBy
condition|)
block|{
case|case
name|CONFLICT_TYPE
case|:
return|return
name|c1
operator|.
name|getType
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getType
argument_list|()
argument_list|)
return|;
case|case
name|CONFLICT_NAME
case|:
return|return
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|CONFLICT_DATE
case|:
return|return
name|c1
operator|.
name|getDate
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getDate
argument_list|()
argument_list|)
return|;
case|case
name|CONFLICT_TIME
case|:
return|return
name|c1
operator|.
name|getTime
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
case|case
name|CONFLICT_ROOM
case|:
return|return
name|c1
operator|.
name|getRoom
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getRoom
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|protected
name|int
name|doCompare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
if|if
condition|(
name|iSubpart
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
name|e1
operator|.
name|getClasses
argument_list|(
name|iSubpart
argument_list|,
literal|"|"
argument_list|,
name|iShowClassNumbers
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getClasses
argument_list|(
name|iSubpart
argument_list|,
literal|"|"
argument_list|,
name|iShowClassNumbers
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|iSortBy
operator|!=
literal|null
condition|)
block|{
name|int
name|cmp
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|iSortBy
condition|)
block|{
case|case
name|EXTERNAL_ID
case|:
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|isCanShowExternalId
argument_list|()
condition|?
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|isCanShowExternalId
argument_list|()
condition|?
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getExternalId
argument_list|()
else|:
literal|""
argument_list|)
return|;
case|case
name|STUDENT
case|:
return|return
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
case|case
name|COURSE
case|:
return|return
name|e1
operator|.
name|getCourseName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getCourseName
argument_list|()
argument_list|)
return|;
case|case
name|PRIORITY
case|:
name|cmp
operator|=
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getPriority
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getAlternative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getAlternative
argument_list|()
argument_list|)
return|;
case|case
name|ALTERNATIVE
case|:
name|cmp
operator|=
name|e1
operator|.
name|getAlternative
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getAlternative
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|new
name|Integer
argument_list|(
name|e1
operator|.
name|getPriority
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getPriority
argument_list|()
argument_list|)
return|;
case|case
name|AREA
case|:
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
return|;
case|case
name|CLASSIFICATION
case|:
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getClassification
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getArea
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
return|;
case|case
name|MAJOR
case|:
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getMajor
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
return|;
case|case
name|GROUP
case|:
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getGroup
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
return|;
case|case
name|ACCOMODATION
case|:
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccommodation
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAccommodation
argument_list|(
literal|"|"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getAreaClasf
argument_list|(
literal|"|"
argument_list|)
argument_list|)
return|;
case|case
name|RESERVATION
case|:
return|return
operator|(
name|e1
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getReservation
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getReservation
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getReservation
argument_list|()
argument_list|)
return|;
case|case
name|REQUEST_TS
case|:
return|return
operator|(
name|e1
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getRequestedDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getRequestedDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e2
operator|.
name|getRequestedDate
argument_list|()
argument_list|)
return|;
case|case
name|ENROLLMENT_TS
case|:
return|return
operator|(
name|e1
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e1
operator|.
name|getEnrolledDate
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEnrolledDate
argument_list|()
operator|==
literal|null
condition|?
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
else|:
name|e2
operator|.
name|getEnrolledDate
argument_list|()
argument_list|)
return|;
case|case
name|MESSAGE
case|:
return|return
operator|(
name|e1
operator|.
name|getEnrollmentMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e1
operator|.
name|getEnrollmentMessage
argument_list|()
operator|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getEnrollmentMessage
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|e2
operator|.
name|getEnrollmentMessage
argument_list|()
argument_list|)
return|;
case|case
name|CONFLICT_TYPE
case|:
case|case
name|CONFLICT_NAME
case|:
case|case
name|CONFLICT_DATE
case|:
case|case
name|CONFLICT_TIME
case|:
if|if
condition|(
name|e1
operator|.
name|hasConflict
argument_list|()
condition|)
block|{
if|if
condition|(
name|e2
operator|.
name|hasConflict
argument_list|()
condition|)
block|{
name|Iterator
argument_list|<
name|Conflict
argument_list|>
name|i1
init|=
name|e1
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Conflict
argument_list|>
name|i2
init|=
name|e2
operator|.
name|getConflicts
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
operator|&&
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Conflict
name|c1
init|=
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|Conflict
name|c2
init|=
name|i2
operator|.
name|next
argument_list|()
decl_stmt|;
name|cmp
operator|=
name|doCompare
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|c1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|c2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
if|if
condition|(
name|i1
operator|.
name|hasNext
argument_list|()
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|i2
operator|.
name|hasNext
argument_list|()
condition|)
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
if|else if
condition|(
name|e2
operator|.
name|hasConflict
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
case|case
name|APPROVED
case|:
return|return
operator|new
name|Long
argument_list|(
name|e1
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e1
operator|.
name|getApprovedDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getApprovedDate
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|e2
operator|.
name|getApprovedDate
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|Enrollment
name|e1
parameter_list|,
name|Enrollment
name|e2
parameter_list|)
block|{
name|int
name|cmp
init|=
name|doCompare
argument_list|(
name|e1
argument_list|,
name|e2
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
name|cmp
operator|=
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
return|return
operator|(
name|e1
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
operator|<
name|e2
operator|.
name|getStudent
argument_list|()
operator|.
name|getId
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

