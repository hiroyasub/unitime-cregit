begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to The Apereo Foundation under one or more contributor license  * agreements. See the NOTICE file distributed with this work for  * additional information regarding copyright ownership.  *  * The Apereo Foundation licenses this file to you under the Apache License,  * Version 2.0 (the "License"); you may not use this file except in  * compliance with the License. You may obtain a copy of the License at:  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|sectioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|ToolBox
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|LoadingWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|SimpleForm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeHeaderPanel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTableHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeWidget
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|client
operator|.
name|widgets
operator|.
name|UniTimeTable
operator|.
name|HasCellAlignment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|command
operator|.
name|client
operator|.
name|GwtRpcServiceAsync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|resources
operator|.
name|GwtMessages
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EncodeQueryRpcRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|unitime
operator|.
name|timetable
operator|.
name|gwt
operator|.
name|shared
operator|.
name|EventInterface
operator|.
name|EncodeQueryRpcResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_comment
comment|/**  * @author Tomas Muller  */
end_comment

begin_class
specifier|public
class|class
name|SectioningReports
extends|extends
name|Composite
block|{
specifier|protected
specifier|static
specifier|final
name|GwtMessages
name|MESSAGES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtMessages
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|GwtRpcServiceAsync
name|RPC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GwtRpcService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|NumberFormat
name|PF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"0.0%"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|NumberFormat
name|DF
init|=
name|NumberFormat
operator|.
name|getFormat
argument_list|(
literal|"0.00"
argument_list|)
decl_stmt|;
specifier|private
name|SimpleForm
name|iForm
init|=
literal|null
decl_stmt|;
specifier|private
name|UniTimeHeaderPanel
name|iHeader
init|=
literal|null
decl_stmt|,
name|iTableHeader
init|=
literal|null
decl_stmt|;
empty_stmt|;
specifier|private
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
name|iReportSelector
init|=
literal|null
decl_stmt|;
specifier|private
name|RowData
name|iHead
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|RowData
argument_list|>
name|iData
init|=
operator|new
name|ArrayList
argument_list|<
name|RowData
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|UniTimeTable
argument_list|<
name|RowData
argument_list|>
name|iTable
init|=
operator|new
name|UniTimeTable
argument_list|<
name|RowData
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|iFirstLine
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|iLastSort
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|iLastHistory
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|iOnline
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
enum|enum
name|ReportType
block|{
name|TIME_CONFLICTS
argument_list|(
literal|"Time Conflicts"
argument_list|,
literal|"org.cpsolver.studentsct.report.SectionConflictTable"
argument_list|,
literal|"type"
argument_list|,
literal|"OVERLAPS"
argument_list|,
literal|"overlapsIncludeAll"
argument_list|,
literal|"true"
argument_list|)
block|,
name|AVAILABLE_CONFLICTS
argument_list|(
literal|"Availability Conflicts"
argument_list|,
literal|"org.cpsolver.studentsct.report.SectionConflictTable"
argument_list|,
literal|"type"
argument_list|,
literal|"UNAVAILABILITIES"
argument_list|,
literal|"overlapsIncludeAll"
argument_list|,
literal|"true"
argument_list|)
block|,
name|SECTION_CONFLICTS
argument_list|(
literal|"Time& Availability Conflicts"
argument_list|,
literal|"org.cpsolver.studentsct.report.SectionConflictTable"
argument_list|,
literal|"type"
argument_list|,
literal|"OVERLAPS_AND_UNAVAILABILITIES"
argument_list|,
literal|"overlapsIncludeAll"
argument_list|,
literal|"true"
argument_list|)
block|,
name|UNBALANCED_SECTIONS
argument_list|(
literal|"Unbalanced Classes"
argument_list|,
literal|"org.cpsolver.studentsct.report.UnbalancedSectionsTable"
argument_list|)
block|,
name|DISTANCE_CONFLICTS
argument_list|(
literal|"Distance Conflicts"
argument_list|,
literal|"org.cpsolver.studentsct.report.DistanceConflictTable"
argument_list|)
block|,
name|TIME_OVERLAPS
argument_list|(
literal|"Time Overlaps"
argument_list|,
literal|"org.cpsolver.studentsct.report.TimeOverlapConflictTable"
argument_list|)
block|,
name|REQUEST_GROUPS
argument_list|(
literal|"Request Groups"
argument_list|,
literal|"org.cpsolver.studentsct.report.RequestGroupTable"
argument_list|)
block|,
name|INDIVIDUAL_TIME_OVERLAPS
argument_list|(
literal|"Individual Student Time Overlaps"
argument_list|,
literal|"org.unitime.timetable.reports.studentsct.IndividualStudentTimeOverlaps"
argument_list|)
block|,
name|NOT_ALLOWED_TIME_OVERLAPS
argument_list|(
literal|"Not Allowed Time Overlaps"
argument_list|,
literal|"org.unitime.timetable.reports.studentsct.IndividualStudentTimeOverlaps"
argument_list|,
literal|"includeAllowedOverlaps"
argument_list|,
literal|"false"
argument_list|)
block|,
name|INDIVIDUAL_TIME_OVERLAPS_BT
argument_list|(
literal|"Individual Student Time Overlaps (Exclude Break Times)"
argument_list|,
literal|"org.unitime.timetable.reports.studentsct.IndividualStudentTimeOverlaps"
argument_list|,
literal|"ignoreBreakTimeConflicts"
argument_list|,
literal|"true"
argument_list|)
block|,
name|NOT_ALLOWED_TIME_OVERLAPS_BT
argument_list|(
literal|"Not Allowed Time Overlaps (Exclude Break Times)"
argument_list|,
literal|"org.unitime.timetable.reports.studentsct.IndividualStudentTimeOverlaps"
argument_list|,
literal|"ignoreBreakTimeConflicts"
argument_list|,
literal|"true"
argument_list|,
literal|"includeAllowedOverlaps"
argument_list|,
literal|"false"
argument_list|)
block|, 		;
name|String
name|iName
decl_stmt|,
name|iImplementation
decl_stmt|;
name|String
index|[]
name|iParameters
decl_stmt|;
name|ReportType
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|implementation
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
block|{
name|iName
operator|=
name|name
expr_stmt|;
name|iImplementation
operator|=
name|implementation
expr_stmt|;
name|iParameters
operator|=
name|params
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|iName
return|;
block|}
specifier|public
name|String
name|getImplementation
parameter_list|()
block|{
return|return
name|iImplementation
return|;
block|}
specifier|public
name|String
index|[]
name|getParameters
parameter_list|()
block|{
return|return
name|iParameters
return|;
block|}
block|}
specifier|public
name|SectioningReports
parameter_list|(
name|boolean
name|online
parameter_list|)
block|{
name|iOnline
operator|=
name|online
expr_stmt|;
name|iForm
operator|=
operator|new
name|SimpleForm
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|removeStyleName
argument_list|(
literal|"unitime-NotPrintableBottomLine"
argument_list|)
expr_stmt|;
name|iHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectFilter
argument_list|()
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"execute"
argument_list|,
name|MESSAGES
operator|.
name|buttonExecute
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iFirstLine
operator|=
literal|0
expr_stmt|;
name|iLastSort
operator|=
literal|0
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"print"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrint
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|UniTimeTable
argument_list|<
name|RowData
argument_list|>
name|table
init|=
operator|new
name|UniTimeTable
argument_list|<
name|RowData
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHead
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|x
init|=
name|iHead
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|x
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|iLastSort
condition|)
name|h
operator|.
name|setOrder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|-
literal|1
operator|-
name|i
operator|==
name|iLastSort
condition|)
name|h
operator|.
name|setOrder
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|RowData
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iData
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|RowData
name|row
init|=
name|iData
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|prevHide
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|x
operator|++
control|)
block|{
name|boolean
name|hide
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
operator|!
name|prevHide
operator|||
operator|!
name|prev
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
argument_list|)
condition|)
name|hide
operator|=
literal|false
expr_stmt|;
name|String
name|text
init|=
name|row
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
decl_stmt|;
name|boolean
name|number
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|number
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|iHead
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
operator|&&
name|number
condition|)
name|text
operator|=
name|PF
operator|.
name|format
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|text
operator|.
name|matches
argument_list|(
literal|"[\\-]?[0-9]+\\.[0-9]+"
argument_list|)
operator|&&
name|number
condition|)
name|text
operator|=
name|DF
operator|.
name|format
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|number
condition|?
operator|new
name|NumberCell
argument_list|(
name|hide
condition|?
literal|""
else|:
name|text
argument_list|)
else|:
operator|new
name|HTML
argument_list|(
name|hide
condition|?
literal|""
else|:
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|prevHide
operator|=
name|hide
expr_stmt|;
block|}
name|int
name|last
init|=
name|table
operator|.
name|addRow
argument_list|(
name|row
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
operator|!
name|prev
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|last
argument_list|)
condition|;
name|c
operator|++
control|)
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|last
argument_list|,
name|c
argument_list|,
literal|"unitime-TopLineDash"
argument_list|)
expr_stmt|;
name|prev
operator|=
name|row
expr_stmt|;
block|}
if|if
condition|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
condition|)
name|table
operator|.
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|table
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1040
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
comment|// Move header row to thead
name|Element
name|headerRow
init|=
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Element
name|tableElement
init|=
name|table
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|Element
name|thead
init|=
name|DOM
operator|.
name|createTHead
argument_list|()
decl_stmt|;
name|tableElement
operator|.
name|insertFirst
argument_list|(
name|thead
argument_list|)
expr_stmt|;
name|headerRow
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
name|thead
operator|.
name|appendChild
argument_list|(
name|headerRow
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemText
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
decl_stmt|;
name|ToolBox
operator|.
name|print
argument_list|(
operator|new
name|ToolBox
operator|.
name|Page
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSession
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getBody
parameter_list|()
block|{
return|return
name|table
operator|.
name|getElement
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|addButton
argument_list|(
literal|"export"
argument_list|,
name|MESSAGES
operator|.
name|buttonExportCSV
argument_list|()
argument_list|,
literal|85
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ReportType
name|type
init|=
name|ReportType
operator|.
name|valueOf
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
literal|"output=sct-report.csv&name="
operator|+
name|type
operator|.
name|name
argument_list|()
operator|+
literal|"&report="
operator|+
name|type
operator|.
name|getImplementation
argument_list|()
operator|+
literal|"&online="
operator|+
operator|(
name|iOnline
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|+
literal|"&sort="
operator|+
name|iLastSort
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|type
operator|.
name|getParameters
argument_list|()
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
name|query
operator|+=
literal|"&"
operator|+
name|type
operator|.
name|getParameters
argument_list|()
index|[
name|i
index|]
operator|+
literal|"="
operator|+
name|type
operator|.
name|getParameters
argument_list|()
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|EncodeQueryRpcRequest
operator|.
name|encode
argument_list|(
name|query
argument_list|)
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|EncodeQueryRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EncodeQueryRpcResponse
name|result
parameter_list|)
block|{
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"export?q="
operator|+
name|result
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iHeader
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"execute"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getColumnFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|0
argument_list|,
literal|"120px"
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|getColumnFormatter
argument_list|()
operator|.
name|setWidth
argument_list|(
literal|1
argument_list|,
literal|"100%"
argument_list|)
expr_stmt|;
name|iReportSelector
operator|=
operator|new
name|UniTimeWidget
argument_list|<
name|ListBox
argument_list|>
argument_list|(
operator|new
name|ListBox
argument_list|()
argument_list|)
expr_stmt|;
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
name|MESSAGES
operator|.
name|itemSelect
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|ReportType
name|type
range|:
name|ReportType
operator|.
name|values
argument_list|()
control|)
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|addItem
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
name|type
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|MESSAGES
operator|.
name|propReport
argument_list|()
argument_list|,
name|iReportSelector
argument_list|)
expr_stmt|;
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
name|iReportSelector
operator|.
name|clearHint
argument_list|()
expr_stmt|;
name|iReportSelector
operator|.
name|setPrintText
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getItemText
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|queryChanged
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTableHeader
operator|=
operator|new
name|UniTimeHeaderPanel
argument_list|(
name|MESSAGES
operator|.
name|sectResults
argument_list|()
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|addButton
argument_list|(
literal|"previous"
argument_list|,
name|MESSAGES
operator|.
name|buttonPrevious
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iFirstLine
operator|-=
literal|100
expr_stmt|;
name|populate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iLastHistory
operator|+
literal|":"
operator|+
name|iFirstLine
operator|+
literal|":"
operator|+
name|iLastSort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|addButton
argument_list|(
literal|"next"
argument_list|,
name|MESSAGES
operator|.
name|buttonNext
argument_list|()
argument_list|,
literal|75
argument_list|,
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|iFirstLine
operator|+=
literal|100
expr_stmt|;
name|populate
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iLastHistory
operator|+
literal|":"
operator|+
name|iFirstLine
operator|+
literal|":"
operator|+
name|iLastSort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setEnabled
argument_list|(
literal|"previous"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setEnabled
argument_list|(
literal|"next"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addHeaderRow
argument_list|(
name|iTableHeader
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addRow
argument_list|(
name|iTable
argument_list|)
expr_stmt|;
name|iForm
operator|.
name|addBottomRow
argument_list|(
name|iHeader
operator|.
name|clonePanel
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|iForm
argument_list|)
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|reload
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|iTable
operator|.
name|addMouseClickListener
argument_list|(
operator|new
name|UniTimeTable
operator|.
name|MouseClickListener
argument_list|<
name|RowData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onMouseClick
parameter_list|(
name|UniTimeTable
operator|.
name|TableEvent
argument_list|<
name|RowData
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getRow
argument_list|()
operator|>
literal|0
operator|&&
name|event
operator|.
name|getData
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"__Class"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"classDetail.do?cid="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Offering"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructionalOfferingDetail.do?op=view&io="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Subpart"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"schedulingSubpartDetail.do?ssuid="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Room"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"gwt.jsp?page=rooms&back=1&id="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Instructor"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"instructorDetail.do?instructorId="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Exam"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"examDetail.do?examId="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"__Event"
operator|.
name|equals
argument_list|(
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
name|ToolBox
operator|.
name|open
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"gwt.jsp?page=events#event="
operator|+
name|event
operator|.
name|getData
argument_list|()
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|reload
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|queryChanged
parameter_list|()
block|{
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
if|if
condition|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"execute"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"execute"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|populate
parameter_list|(
name|boolean
name|sort
parameter_list|)
block|{
if|if
condition|(
name|iData
operator|==
literal|null
operator|||
name|iData
operator|.
name|isEmpty
argument_list|()
operator|||
name|iHead
operator|==
literal|null
condition|)
block|{
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoResults
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|iLastSort
operator|!=
literal|0
operator|&&
name|sort
condition|)
block|{
specifier|final
name|boolean
name|asc
init|=
name|iLastSort
operator|>
literal|0
decl_stmt|;
specifier|final
name|int
name|col
init|=
name|Math
operator|.
name|abs
argument_list|(
name|iLastSort
argument_list|)
operator|-
literal|1
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|iData
argument_list|,
operator|new
name|Comparator
argument_list|<
name|RowData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|RowData
name|o1
parameter_list|,
name|RowData
name|o2
parameter_list|)
block|{
return|return
operator|(
name|asc
condition|?
name|o1
operator|.
name|compareTo
argument_list|(
name|o2
argument_list|,
name|col
argument_list|)
else|:
name|o2
operator|.
name|compareTo
argument_list|(
name|o1
argument_list|,
name|col
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Widget
argument_list|>
name|header
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iHead
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|x
init|=
name|iHead
operator|.
name|getCell
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|x
operator|.
name|replace
argument_list|(
literal|'_'
argument_list|,
literal|' '
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
specifier|final
name|UniTimeTableHeader
name|h
init|=
operator|new
name|UniTimeTableHeader
argument_list|(
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|col
init|=
name|header
operator|.
name|size
argument_list|()
decl_stmt|;
name|h
operator|.
name|addOperation
argument_list|(
operator|new
name|UniTimeTableHeader
operator|.
name|Operation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|boolean
name|asc
init|=
operator|(
name|h
operator|.
name|getOrder
argument_list|()
operator|==
literal|null
condition|?
literal|true
else|:
operator|!
name|h
operator|.
name|getOrder
argument_list|()
operator|)
decl_stmt|;
name|iLastSort
operator|=
operator|(
name|asc
condition|?
literal|1
operator|+
name|col
else|:
operator|-
literal|1
operator|-
name|col
operator|)
expr_stmt|;
name|populate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iLastHistory
operator|+
literal|":"
operator|+
name|iFirstLine
operator|+
literal|":"
operator|+
name|iLastSort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isApplicable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasSeparator
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|MESSAGES
operator|.
name|opSortBy
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|1
operator|==
name|iLastSort
condition|)
name|h
operator|.
name|setOrder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|else if
condition|(
operator|-
literal|1
operator|-
name|i
operator|==
name|iLastSort
condition|)
name|h
operator|.
name|setOrder
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|header
operator|.
name|add
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
name|iTable
operator|.
name|addRow
argument_list|(
literal|null
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|RowData
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|iFirstLine
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|iFirstLine
operator|+
literal|100
argument_list|,
name|iData
operator|.
name|size
argument_list|()
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|RowData
name|row
init|=
name|iData
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Widget
argument_list|>
name|line
init|=
operator|new
name|ArrayList
argument_list|<
name|Widget
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|prevHide
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
literal|0
argument_list|)
condition|;
name|x
operator|++
control|)
block|{
name|boolean
name|hide
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|prev
operator|==
literal|null
operator|||
operator|!
name|prevHide
operator|||
operator|!
name|prev
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
argument_list|)
condition|)
name|hide
operator|=
literal|false
expr_stmt|;
name|String
name|text
init|=
name|row
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\n"
argument_list|,
literal|"<br>"
argument_list|)
decl_stmt|;
name|boolean
name|number
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|number
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|iHead
operator|.
name|getCell
argument_list|(
name|x
argument_list|)
operator|.
name|contains
argument_list|(
literal|"%"
argument_list|)
operator|&&
name|number
condition|)
name|text
operator|=
name|PF
operator|.
name|format
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
if|else if
condition|(
name|text
operator|.
name|matches
argument_list|(
literal|"[\\-]?[0-9]+\\.[0-9]+"
argument_list|)
operator|&&
name|number
condition|)
name|text
operator|=
name|DF
operator|.
name|format
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|line
operator|.
name|add
argument_list|(
name|number
condition|?
operator|new
name|NumberCell
argument_list|(
name|hide
condition|?
literal|""
else|:
name|text
argument_list|)
else|:
operator|new
name|HTML
argument_list|(
name|hide
condition|?
literal|""
else|:
name|text
argument_list|)
argument_list|)
expr_stmt|;
name|prevHide
operator|=
name|hide
expr_stmt|;
block|}
name|int
name|last
init|=
name|iTable
operator|.
name|addRow
argument_list|(
name|row
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
operator|&&
operator|!
name|prev
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|row
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|iTable
operator|.
name|getCellCount
argument_list|(
name|last
argument_list|)
condition|;
name|c
operator|++
control|)
name|iTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|last
argument_list|,
name|c
argument_list|,
literal|"unitime-TopLineDash"
argument_list|)
expr_stmt|;
name|prev
operator|=
name|row
expr_stmt|;
block|}
name|iTable
operator|.
name|setColumnVisible
argument_list|(
literal|0
argument_list|,
operator|!
name|iHead
operator|.
name|getCell
argument_list|(
literal|0
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"__"
argument_list|)
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"export"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|iData
operator|.
name|size
argument_list|()
operator|<=
literal|100
operator|&&
name|iFirstLine
operator|==
literal|0
condition|)
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|infoShowingAllLines
argument_list|(
name|iData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|iTableHeader
operator|.
name|setMessage
argument_list|(
name|MESSAGES
operator|.
name|infoShowingLines
argument_list|(
name|iFirstLine
operator|+
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|iFirstLine
operator|+
literal|100
argument_list|,
name|iData
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setEnabled
argument_list|(
literal|"next"
argument_list|,
name|iFirstLine
operator|+
literal|100
operator|<
name|iData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|iTableHeader
operator|.
name|setEnabled
argument_list|(
literal|"previous"
argument_list|,
name|iFirstLine
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|reload
parameter_list|(
name|String
name|history
parameter_list|)
block|{
if|if
condition|(
name|history
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|history
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
operator|>=
literal|0
condition|)
name|history
operator|=
name|history
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|history
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|history
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|String
index|[]
name|params
init|=
name|history
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|ReportType
name|type
init|=
name|ReportType
operator|.
name|valueOf
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return;
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|setSelectedIndex
argument_list|(
literal|1
operator|+
name|type
operator|.
name|ordinal
argument_list|()
argument_list|)
expr_stmt|;
name|queryChanged
argument_list|()
expr_stmt|;
name|iFirstLine
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|iLastSort
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|execute
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|execute
parameter_list|()
block|{
name|iHeader
operator|.
name|setEnabled
argument_list|(
literal|"print"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|iHeader
operator|.
name|setErrorMessage
argument_list|(
name|MESSAGES
operator|.
name|errorNoReportSelected
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|ReportType
name|type
init|=
name|ReportType
operator|.
name|valueOf
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getValue
argument_list|(
name|iReportSelector
operator|.
name|getWidget
argument_list|()
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|iLastHistory
operator|=
name|type
operator|.
name|name
argument_list|()
expr_stmt|;
name|iTable
operator|.
name|clearTable
argument_list|()
expr_stmt|;
name|iTableHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|iHeader
operator|.
name|clearMessage
argument_list|()
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|show
argument_list|(
name|MESSAGES
operator|.
name|waitExecuting
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|iLastHistory
operator|+
literal|":"
operator|+
name|iFirstLine
operator|+
literal|":"
operator|+
name|iLastSort
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SectioningReportRpcRequest
name|request
init|=
operator|new
name|SectioningReportRpcRequest
argument_list|()
decl_stmt|;
name|request
operator|.
name|setParameter
argument_list|(
literal|"report"
argument_list|,
name|type
operator|.
name|getImplementation
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setParameter
argument_list|(
literal|"online"
argument_list|,
name|iOnline
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|+
literal|1
operator|<
name|type
operator|.
name|getParameters
argument_list|()
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
name|request
operator|.
name|setParameter
argument_list|(
name|type
operator|.
name|getParameters
argument_list|()
index|[
name|i
index|]
argument_list|,
name|type
operator|.
name|getParameters
argument_list|()
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
name|RPC
operator|.
name|execute
argument_list|(
name|request
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|SectioningReportRpcResponse
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|iTableHeader
operator|.
name|setErrorMessage
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|SectioningReportRpcResponse
name|result
parameter_list|)
block|{
name|iData
operator|.
name|clear
argument_list|()
expr_stmt|;
name|RowData
name|prev
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|getReport
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|row
init|=
name|result
operator|.
name|getReport
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|row
operator|.
name|length
operator|==
literal|0
condition|)
continue|continue;
name|RowData
name|data
init|=
operator|new
name|RowData
argument_list|(
name|row
argument_list|)
decl_stmt|;
while|while
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|data
operator|.
name|getNrBlanks
argument_list|()
operator|>
name|prev
operator|.
name|getNrBlanks
argument_list|()
condition|)
break|break;
name|prev
operator|=
name|prev
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
name|data
operator|.
name|setParent
argument_list|(
name|prev
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|iHead
operator|=
name|data
expr_stmt|;
block|}
else|else
block|{
name|iData
operator|.
name|add
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|prev
operator|=
name|data
expr_stmt|;
block|}
block|}
name|populate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LoadingWidget
operator|.
name|getInstance
argument_list|()
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|SectioningReportRpcRequest
implements|implements
name|GwtRpcRequest
argument_list|<
name|SectioningReportRpcResponse
argument_list|>
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|iParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SectioningReportRpcRequest
parameter_list|()
block|{
block|}
specifier|public
name|void
name|setParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|iParameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|iParameters
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getParameters
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|SectioningReportRpcResponse
implements|implements
name|GwtRpcResponse
block|{
specifier|private
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|iReport
init|=
operator|new
name|ArrayList
argument_list|<
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|SectioningReportRpcResponse
parameter_list|()
block|{
block|}
specifier|public
name|void
name|addLine
parameter_list|(
name|String
index|[]
name|line
parameter_list|)
block|{
name|iReport
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
index|[]
argument_list|>
name|getReport
parameter_list|()
block|{
return|return
name|iReport
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|NumberCell
extends|extends
name|HTML
implements|implements
name|HasCellAlignment
block|{
specifier|public
name|NumberCell
parameter_list|(
name|String
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NumberCell
parameter_list|(
name|int
name|text
parameter_list|)
block|{
name|super
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|text
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HorizontalAlignmentConstant
name|getCellAlignment
parameter_list|()
block|{
return|return
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|RowData
block|{
name|String
index|[]
name|iRow
decl_stmt|;
name|RowData
name|iParent
decl_stmt|;
specifier|public
name|RowData
parameter_list|(
name|String
index|[]
name|row
parameter_list|)
block|{
name|iRow
operator|=
name|row
expr_stmt|;
block|}
specifier|public
name|String
index|[]
name|getRow
parameter_list|()
block|{
return|return
name|iRow
return|;
block|}
specifier|public
name|RowData
name|getParent
parameter_list|()
block|{
return|return
name|iParent
return|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|RowData
name|parent
parameter_list|)
block|{
name|iParent
operator|=
name|parent
expr_stmt|;
block|}
specifier|public
name|boolean
name|isBlank
parameter_list|(
name|int
name|col
parameter_list|)
block|{
return|return
name|getRow
argument_list|()
operator|.
name|length
operator|<=
name|col
operator|||
name|getRow
argument_list|()
index|[
name|col
index|]
operator|==
literal|null
operator|||
name|getRow
argument_list|()
index|[
name|col
index|]
operator|.
name|isEmpty
argument_list|()
return|;
block|}
specifier|public
name|String
name|getCell
parameter_list|(
name|int
name|col
parameter_list|)
block|{
if|if
condition|(
name|isBlank
argument_list|(
name|col
argument_list|)
condition|)
block|{
if|if
condition|(
name|getParent
argument_list|()
operator|!=
literal|null
condition|)
return|return
name|getParent
argument_list|()
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
return|;
else|else
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|getRow
argument_list|()
index|[
name|col
index|]
return|;
block|}
block|}
specifier|public
name|int
name|getLevel
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|==
literal|null
condition|?
literal|0
else|:
name|getParent
argument_list|()
operator|.
name|getLevel
argument_list|()
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|getParent
argument_list|()
operator|==
literal|null
condition|?
name|getRow
argument_list|()
operator|.
name|length
else|:
name|getParent
argument_list|()
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|int
name|getNrBlanks
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|isBlank
argument_list|(
name|i
argument_list|)
condition|)
return|return
name|i
return|;
return|return
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isAllBlank
parameter_list|()
block|{
return|return
name|getNrBlanks
argument_list|()
operator|==
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|RowData
name|b
parameter_list|,
name|int
name|col
parameter_list|)
block|{
name|RowData
name|a
init|=
name|this
decl_stmt|;
while|while
condition|(
name|a
operator|.
name|getLevel
argument_list|()
operator|>
name|b
operator|.
name|getLevel
argument_list|()
condition|)
name|a
operator|=
name|a
operator|.
name|getParent
argument_list|()
expr_stmt|;
while|while
condition|(
name|b
operator|.
name|getLevel
argument_list|()
operator|>
name|a
operator|.
name|getLevel
argument_list|()
condition|)
name|b
operator|=
name|b
operator|.
name|getParent
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|valueOf
argument_list|(
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
argument_list|)
operator|.
name|compareTo
argument_list|(
name|Double
operator|.
name|valueOf
argument_list|(
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|"0"
else|:
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|int
name|cmp
init|=
operator|(
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|a
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
operator|==
literal|null
condition|?
literal|""
else|:
name|b
operator|.
name|getCell
argument_list|(
name|col
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
return|return
name|cmp
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

